
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3b ed 00 00       	call   c000ed5b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 54 02 c0       	mov    eax,0xc0025408
c0000025:	3d 08 54 02 c0       	cmp    eax,0xc0025408
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 54 02 c0       	push   0xc0025408
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 54 02 c0       	mov    eax,0xc0025408
c0000051:	2d 08 54 02 c0       	sub    eax,0xc0025408
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 54 02 c0       	push   0xc0025408
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 90 10 02 c0       	mov    ebx,0xc0021090
c0000097:	81 eb 8c 10 02 c0    	sub    ebx,0xc002108c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 8c 10 02 c0       	mov    esi,0xc002108c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 54 02 c0       	push   0xc0025408
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 08 54 02 c0       	push   0xc0025408
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d7 4f 01 00       	call   c0015284 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 04 33 01 00       	call   c00135c9 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b5 4f 01 00       	call   c0015284 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 f6 54 01 00       	call   c00157e4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b1 59 01 00       	call   c0015ca8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ea e5 00 00       	jmp    c000e969 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 10 02 c0 02 	test   BYTE PTR [edx-0x3ffdef60],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 10 02 c0 01 	test   BYTE PTR [edx-0x3ffdef60],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 10 02 c0 08 	test   BYTE PTR [edx-0x3ffdef60],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 10 02 c0 04 	test   BYTE PTR [ecx-0x3ffdef60],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 10 02 c0 01 	test   BYTE PTR [edx-0x3ffdef60],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000df7:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 49 dc 00 00       	call   c000eaa9 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 56 db 00 00       	call   c000ea4b <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 35 da 00 00       	call   c000ea15 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 30 da 00 00       	call   c000ea4b <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 dc d8 00 00       	call   c000ea15 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 c2 d8 00 00       	call   c000ea15 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 98 d8 00 00       	call   c000ea15 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 71 02 c0       	mov    eax,0xc0027100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c00012e5:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c0001321:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001326:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c0001334:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c0001385:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013a0:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c000145a:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c0001460:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001467:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000152d:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001533:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c000153a:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 71 02 c0       	mov    edx,0xc0027100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 a4 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdee5c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 41 89 01 00       	jmp    c001a8cc <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 6b 89 01 00       	jmp    c001a90c <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 8c 89 01 00       	jmp    c001a94c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 00 13 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffded00]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 00 13 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffded00]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba b0 3f 02 c0       	mov    edx,0xc0023fb0
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba bc 11 02 c0       	mov    edx,0xc00211bc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 c2 11 02 c0       	mov    eax,0xc00211c2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 80 12 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffded80]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 cb 11 02 c0       	mov    eax,0xc00211cb
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 00 13 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffded00]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 50 12 02 c0       	mov    eax,0xc0021250
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 40 12 02 c0       	mov    ebx,0xc0021240
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 20 12 02 c0       	mov    eax,0xc0021220
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 30 12 02 c0       	mov    eax,0xc0021230
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba d2 11 02 c0       	mov    edx,0xc00211d2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba de 11 02 c0       	mov    edx,0xc00211de
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba f2 11 02 c0       	mov    edx,0xc00211f2
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 14 8d 00 00       	call   c000eb2b <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 0c 8d 00 00       	call   c000eb3b <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 20 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021620
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 20 16 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021620
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 20 14 02 c0       	mov    eax,0xc0021420
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 60 13 02 c0       	mov    eax,0xc0021360
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 20 13 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdece0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 20 17 02 c0       	push   0xc0021720
c0006303:	e8 60 4f 01 00       	call   c001b268 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 2e 17 02 c0       	push   0xc002172e
c000633b:	e8 28 4f 01 00       	call   c001b268 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 91 4e 01 00       	call   c001b20c <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 70 02 c0       	mov    eax,0xc0027080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 70 02 c0       	mov    eax,0xc0027020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 7e 02 c0    	mov    ebp,DWORD PTR ds:0xc0027eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 3d 17 02 c0       	push   0xc002173d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c0006746:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000674c:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c0006768:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067e1:	8b 8d 4c 75 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd8ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068d9:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c0006917:	05 40 75 02 c0       	add    eax,0xc0027540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069d6:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 40 17 02 c0       	push   0xc0021740
c00069fa:	e8 69 48 01 00       	call   c001b268 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 7d 48 01 00       	call   c001b284 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 45 17 02 c0 	mov    DWORD PTR [esp],0xc0021745
c0006a14:	e8 4f 48 01 00       	call   c001b268 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a20:	e8 5f 48 01 00       	call   c001b284 <iso_kprintfd>
c0006a25:	c7 04 24 4b 17 02 c0 	mov    DWORD PTR [esp],0xc002174b
c0006a2c:	e8 37 48 01 00       	call   c001b268 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a38:	e8 47 48 01 00       	call   c001b284 <iso_kprintfd>
c0006a3d:	c7 04 24 51 17 02 c0 	mov    DWORD PTR [esp],0xc0021751
c0006a44:	e8 1f 48 01 00       	call   c001b268 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a50:	e8 2f 48 01 00       	call   c001b284 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006ab6:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 75 02 c0    	lea    ebp,[eax-0x3ffd8aa8]
c0006b12:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 75 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd8aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 3d 17 02 c0       	push   0xc002173d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006bee:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006bf4:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 75 02 c0       	add    eax,0xc0027550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 5a 17 02 c0       	push   0xc002175a
c0006c19:	e8 4a 46 01 00       	call   c001b268 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c4e:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 65 17 02 c0       	push   0xc0021765
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 6c 17 02 c0       	push   0xc002176c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006cec:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d0f:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 73 17 02 c0       	push   0xc0021773
c0006d30:	e8 33 45 01 00       	call   c001b268 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 7e 17 02 c0       	push   0xc002177e
c0006d4b:	e8 18 45 01 00       	call   c001b268 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 75 02 c0       	push   0xc0027540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d75:	e8 b1 7d 00 00       	call   c000eb2b <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d86:	e8 a0 7d 00 00       	call   c000eb2b <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 8b 7d 00 00       	call   c000eb2b <malloc>
c0006da0:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 72 7d 00 00       	call   c000eb2b <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006de6:	e8 50 7d 00 00       	call   c000eb3b <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 42 7d 00 00       	call   c000eb3b <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 28 7d 00 00       	call   c000eb3b <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 13 7d 00 00       	call   c000eb3b <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e35:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 90 17 02 c0       	mov    esi,0xc0021790
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 8f 17 02 c0       	mov    al,ds:0xc002178f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 a0 17 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde860]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 f0 18 02 c0       	push   0xc00218f0
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 04 19 02 c0       	push   0xc0021904
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 0e 19 02 c0       	push   0xc002190e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 18 19 02 c0       	push   0xc0021918
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 5c 1a 02 c0       	push   0xc0021a5c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 22 19 02 c0       	push   0xc0021922
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 7c 1a 02 c0       	push   0xc0021a7c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 37 19 02 c0       	push   0xc0021937
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 51 19 02 c0       	push   0xc0021951
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 a4 1a 02 c0       	push   0xc0021aa4
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 5c 1a 02 c0       	push   0xc0021a5c
c00071d4:	e8 99 7c 00 00       	call   c000ee72 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 ec 1a 02 c0       	push   0xc0021aec
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 ec 1a 02 c0       	push   0xc0021aec
c0007203:	e8 6a 7c 00 00       	call   c000ee72 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 5c 19 02 c0       	push   0xc002195c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 5c 19 02 c0       	push   0xc002195c
c000722f:	e8 3e 7c 00 00       	call   c000ee72 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 79 19 02 c0       	push   0xc0021979
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 79 19 02 c0       	push   0xc0021979
c000725b:	e8 12 7c 00 00       	call   c000ee72 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 0c 1b 02 c0       	push   0xc0021b0c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 0c 1b 02 c0       	push   0xc0021b0c
c0007287:	e8 e6 7b 00 00       	call   c000ee72 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 30 1b 02 c0       	push   0xc0021b30
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 30 1b 02 c0       	push   0xc0021b30
c00072b3:	e8 ba 7b 00 00       	call   c000ee72 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 95 19 02 c0       	push   0xc0021995
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 95 19 02 c0       	push   0xc0021995
c00072df:	e8 8e 7b 00 00       	call   c000ee72 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 b1 19 02 c0       	push   0xc00219b1
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 b1 19 02 c0       	push   0xc00219b1
c000730b:	e8 62 7b 00 00       	call   c000ee72 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 50 1b 02 c0       	push   0xc0021b50
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 50 1b 02 c0       	push   0xc0021b50
c0007337:	e8 36 7b 00 00       	call   c000ee72 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 74 1b 02 c0       	push   0xc0021b74
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 74 1b 02 c0       	push   0xc0021b74
c0007363:	e8 0a 7b 00 00       	call   c000ee72 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 61 77 00 00       	call   c000eb2b <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00073d5:	68 93 1b 02 c0       	push   0xc0021b93
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 b1 1b 02 c0       	push   0xc0021bb1
c00073ef:	e8 7e 7a 00 00       	call   c000ee72 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 cb 1b 02 c0       	push   0xc0021bcb
c0007410:	e8 5d 7a 00 00       	call   c000ee72 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 e5 1b 02 c0       	push   0xc0021be5
c0007457:	e8 16 7a 00 00       	call   c000ee72 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 ff 1b 02 c0       	push   0xc0021bff
c0007487:	e8 e6 79 00 00       	call   c000ee72 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 54 64 00 00       	call   c000d92d <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 73 83 00 00       	call   c000f866 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 19 1c 02 c0       	push   0xc0021c19
c000752c:	e8 41 79 00 00       	call   c000ee72 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 83 02 c0       	push   0xc0028300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 09 51 00 00       	call   c000c71a <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 0e 75 00 00       	call   c000eb2b <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007628:	68 93 1b 02 c0       	push   0xc0021b93
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 22 1c 02 c0       	push   0xc0021c22
c0007642:	e8 2b 78 00 00       	call   c000ee72 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 3f 1c 02 c0       	push   0xc0021c3f
c0007673:	e8 fa 77 00 00       	call   c000ee72 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 5c 1c 02 c0       	push   0xc0021c5c
c00076ad:	e8 c0 77 00 00       	call   c000ee72 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007790:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 7f 73 00 00       	call   c000eb2b <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00077b7:	68 93 1b 02 c0       	push   0xc0021b93
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 77 1c 02 c0       	push   0xc0021c77
c00077d1:	e8 9c 76 00 00       	call   c000ee72 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 92 1c 02 c0       	push   0xc0021c92
c0007804:	e8 69 76 00 00       	call   c000ee72 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 58 72 00 00       	call   c000eb2b <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 ce 70 00 00       	call   c000eb2b <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be ad 1c 02 c0       	mov    esi,0xc0021cad
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 84 1d 02 c0       	mov    edx,0xc0021d84
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 fb a2 00 00       	call   c0011fea <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 85 4b 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 ad a2 00 00       	call   c0011fea <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 37 4b 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 18 1d 02 c0       	mov    edx,0xc0021d18
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 18 1d 02 c0       	mov    edx,0xc0021d18
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 e1 4a 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 31 6d 00 00       	call   c000eb2b <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 66 2c 01 00       	call   c001aa68 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 1d 6d 00 00       	call   c000eb2b <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 7e 3b 01 00       	call   c001b994 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 6e 38 02 c0       	push   0xc002386e
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 b6 1c 02 c0       	push   0xc0021cb6
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 d1 1c 02 c0       	push   0xc0021cd1
c000801f:	e8 4e 6e 00 00       	call   c000ee72 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 b6 9d 00 00       	call   c0011e04 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 84 1d 02 c0       	mov    edx,0xc0021d84
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 f7 1c 02 c0       	push   0xc0021cf7
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 fc 1e 00 00       	call   c000a026 <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 f7 1a 00 00       	call   c000a026 <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 b3 65 00 00       	call   c000eb2b <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 e0 97 00 00       	call   c0011e04 <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 54 19 00 00       	call   c000a026 <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 d4 08 00 00       	call   c00091f4 <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba bc 1d 02 c0       	mov    edx,0xc0021dbc
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba bc 1d 02 c0       	mov    edx,0xc0021dbc
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 35 06 00 00       	call   c0008f94 <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 15 3f 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00089a0:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	83 ec 0c             	sub    esp,0xc
c00089ad:	6b c0 0a             	imul   eax,eax,0xa
c00089b0:	50                   	push   eax
c00089b1:	e8 c2 d2 00 00       	call   c0015c78 <milliTenthSleep(unsigned int)>
c00089b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089bd:	e8 11 03 01 00       	call   c0018cd3 <HalMakeBeep(int)>
c00089c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ca:	83 c4 1c             	add    esp,0x1c
c00089cd:	e9 7e d1 00 00       	jmp    c0015b50 <blockTask(TaskState)>

c00089d2 <KeBeep(int, int, bool)>:
c00089d2:	56                   	push   esi
c00089d3:	53                   	push   ebx
c00089d4:	83 ec 10             	sub    esp,0x10
c00089d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e3:	e8 eb 02 01 00       	call   c0018cd3 <HalMakeBeep(int)>
c00089e8:	83 c4 10             	add    esp,0x10
c00089eb:	89 f0                	mov    eax,esi
c00089ed:	84 c0                	test   al,al
c00089ef:	74 1e                	je     c0008a0f <KeBeep(int, int, bool)+0x3d>
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	6b db 0a             	imul   ebx,ebx,0xa
c00089f7:	53                   	push   ebx
c00089f8:	e8 7b d2 00 00       	call   c0015c78 <milliTenthSleep(unsigned int)>
c00089fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	e9 c4 02 01 00       	jmp    c0018cd3 <HalMakeBeep(int)>
c0008a0f:	68 e6 00 00 00       	push   0xe6
c0008a14:	53                   	push   ebx
c0008a15:	68 92 89 00 c0       	push   0xc0008992
c0008a1a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0008a20:	e8 13 ce 00 00       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c0008a25:	83 c4 14             	add    esp,0x14
c0008a28:	5b                   	pop    ebx
c0008a29:	5e                   	pop    esi
c0008a2a:	c3                   	ret    
c0008a2b:	90                   	nop

c0008a2c <KeLoadClockSettings()>:
c0008a2c:	57                   	push   edi
c0008a2d:	56                   	push   esi
c0008a2e:	53                   	push   ebx
c0008a2f:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a35:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a3a:	68 e0 1d 02 c0       	push   0xc0021de0
c0008a3f:	e8 b0 3e 00 00       	call   c000c8f4 <CmOpen(char const*)>
c0008a44:	59                   	pop    ecx
c0008a45:	89 c3                	mov    ebx,eax
c0008a47:	5e                   	pop    esi
c0008a48:	68 05 1e 02 c0       	push   0xc0021e05
c0008a4d:	50                   	push   eax
c0008a4e:	e8 a1 4a 00 00       	call   c000d4f4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a53:	5f                   	pop    edi
c0008a54:	89 c6                	mov    esi,eax
c0008a56:	5a                   	pop    edx
c0008a57:	50                   	push   eax
c0008a58:	68 1a 1e 02 c0       	push   0xc0021e1a
c0008a5d:	e8 02 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	85 f6                	test   esi,esi
c0008a67:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a6b:	7e 0c                	jle    c0008a79 <KeLoadClockSettings()+0x4d>
c0008a6d:	52                   	push   edx
c0008a6e:	57                   	push   edi
c0008a6f:	56                   	push   esi
c0008a70:	53                   	push   ebx
c0008a71:	e8 ee 3f 00 00       	call   c000ca64 <CmGetString(Reghive_Tag*, int, char*)>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	83 ec 0c             	sub    esp,0xc
c0008a7c:	53                   	push   ebx
c0008a7d:	e8 90 3f 00 00       	call   c000ca12 <CmClose(Reghive_Tag*)>
c0008a82:	83 c4 0c             	add    esp,0xc
c0008a85:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a8a:	50                   	push   eax
c0008a8b:	57                   	push   edi
c0008a8c:	68 28 1e 02 c0       	push   0xc0021e28
c0008a91:	e8 ce e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a96:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a9a:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa1:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa4:	83 c4 10             	add    esp,0x10
c0008aa7:	a8 fd                	test   al,0xfd
c0008aa9:	75 50                	jne    c0008afb <KeLoadClockSettings()+0xcf>
c0008aab:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008ab0:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab5:	83 fb 2e             	cmp    ebx,0x2e
c0008ab8:	75 07                	jne    c0008ac1 <KeLoadClockSettings()+0x95>
c0008aba:	b0 01                	mov    al,0x1
c0008abc:	83 fa 35             	cmp    edx,0x35
c0008abf:	74 0f                	je     c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac1:	31 c0                	xor    eax,eax
c0008ac3:	83 fa 2e             	cmp    edx,0x2e
c0008ac6:	75 08                	jne    c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac8:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008acd:	0f 94 c0             	sete   al
c0008ad0:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad5:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ada:	83 e8 30             	sub    eax,0x30
c0008add:	83 fa 2e             	cmp    edx,0x2e
c0008ae0:	75 07                	jne    c0008ae9 <KeLoadClockSettings()+0xbd>
c0008ae2:	6b c0 0a             	imul   eax,eax,0xa
c0008ae5:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	80 f9 2d             	cmp    cl,0x2d
c0008af1:	75 19                	jne    c0008b0c <KeLoadClockSettings()+0xe0>
c0008af3:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af9:	eb 11                	jmp    c0008b0c <KeLoadClockSettings()+0xe0>
c0008afb:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008b02:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b0c:	50                   	push   eax
c0008b0d:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b14:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b17:	50                   	push   eax
c0008b18:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1e:	68 3f 1e 02 c0       	push   0xc0021e3f
c0008b23:	e8 3c e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b28:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2e:	5b                   	pop    ebx
c0008b2f:	5e                   	pop    esi
c0008b30:	5f                   	pop    edi
c0008b31:	c3                   	ret    

c0008b32 <Clock::Clock(char const*)>:
c0008b32:	83 ec 0c             	sub    esp,0xc
c0008b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b39:	83 ec 08             	sub    esp,0x8
c0008b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b40:	50                   	push   eax
c0008b41:	e8 ae 06 00 00       	call   c00091f4 <Device::Device(char const*)>
c0008b46:	83 c4 10             	add    esp,0x10
c0008b49:	ba 68 1e 02 c0       	mov    edx,0xc0021e68
c0008b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b52:	89 10                	mov    DWORD PTR [eax],edx
c0008b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b58:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b62:	90                   	nop
c0008b63:	83 c4 0c             	add    esp,0xc
c0008b66:	c3                   	ret    
c0008b67:	90                   	nop

c0008b68 <Clock::~Clock()>:
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	ba 68 1e 02 c0       	mov    edx,0xc0021e68
c0008b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b74:	89 10                	mov    DWORD PTR [eax],edx
c0008b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b7a:	83 ec 0c             	sub    esp,0xc
c0008b7d:	50                   	push   eax
c0008b7e:	e8 11 04 00 00       	call   c0008f94 <Device::~Device()>
c0008b83:	83 c4 10             	add    esp,0x10
c0008b86:	90                   	nop
c0008b87:	83 c4 0c             	add    esp,0xc
c0008b8a:	c3                   	ret    
c0008b8b:	90                   	nop

c0008b8c <Clock::~Clock()>:
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b96:	e8 cd ff ff ff       	call   c0008b68 <Clock::~Clock()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 08             	sub    esp,0x8
c0008ba1:	68 58 01 00 00       	push   0x158
c0008ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008baa:	e8 f1 3c 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	83 c4 0c             	add    esp,0xc
c0008bb5:	c3                   	ret    

c0008bb6 <Clock::timeInSecondsLocal()>:
c0008bb6:	53                   	push   ebx
c0008bb7:	83 ec 14             	sub    esp,0x14
c0008bba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bc0:	50                   	push   eax
c0008bc1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc4:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bcb:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bd1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd7:	89 cb                	mov    ebx,ecx
c0008bd9:	c1 fb 1f             	sar    ebx,0x1f
c0008bdc:	01 c8                	add    eax,ecx
c0008bde:	11 da                	adc    edx,ebx
c0008be0:	83 c4 10             	add    esp,0x10
c0008be3:	31 c9                	xor    ecx,ecx
c0008be5:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bec:	74 05                	je     c0008bf3 <Clock::timeInSecondsLocal()+0x3d>
c0008bee:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf3:	31 db                	xor    ebx,ebx
c0008bf5:	01 c8                	add    eax,ecx
c0008bf7:	11 da                	adc    edx,ebx
c0008bf9:	83 c4 08             	add    esp,0x8
c0008bfc:	5b                   	pop    ebx
c0008bfd:	c3                   	ret    

c0008bfe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfe:	57                   	push   edi
c0008bff:	56                   	push   esi
c0008c00:	53                   	push   ebx
c0008c01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c12:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c19:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c25:	99                   	cdq    
c0008c26:	29 c6                	sub    esi,eax
c0008c28:	19 d7                	sbb    edi,edx
c0008c2a:	89 f0                	mov    eax,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	31 f6                	xor    esi,esi
c0008c30:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c37:	74 05                	je     c0008c3e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c39:	be 08 07 00 00       	mov    esi,0x708
c0008c3e:	31 ff                	xor    edi,edi
c0008c40:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c44:	29 f0                	sub    eax,esi
c0008c46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c4a:	19 fa                	sbb    edx,edi
c0008c4c:	89 d8                	mov    eax,ebx
c0008c4e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	ff e0                	jmp    eax

c0008c57 <KeDatetimeToSeconds(datetime_t)>:
c0008c57:	55                   	push   ebp
c0008c58:	57                   	push   edi
c0008c59:	56                   	push   esi
c0008c5a:	53                   	push   ebx
c0008c5b:	83 ec 0c             	sub    esp,0xc
c0008c5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c62:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c66:	89 d6                	mov    esi,edx
c0008c68:	0f b6 c7             	movzx  eax,bh
c0008c6b:	c1 ee 10             	shr    esi,0x10
c0008c6e:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c71:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c77:	0f b6 ce             	movzx  ecx,dh
c0008c7a:	89 df                	mov    edi,ebx
c0008c7c:	49                   	dec    ecx
c0008c7d:	c1 ef 10             	shr    edi,0x10
c0008c80:	0f b6 db             	movzx  ebx,bl
c0008c83:	89 f8                	mov    eax,edi
c0008c85:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c8b:	0f b6 f8             	movzx  edi,al
c0008c8e:	0f b6 d2             	movzx  edx,dl
c0008c91:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c95:	01 d8                	add    eax,ebx
c0008c97:	0f b7 de             	movzx  ebx,si
c0008c9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9d:	c1 f8 1f             	sar    eax,0x1f
c0008ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca4:	0f b6 c1             	movzx  eax,cl
c0008ca7:	8b 0c 85 a0 1e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde160]
c0008cae:	83 f8 01             	cmp    eax,0x1
c0008cb1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008cb5:	76 27                	jbe    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cb7:	83 e6 03             	and    esi,0x3
c0008cba:	75 22                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cbc:	31 d2                	xor    edx,edx
c0008cbe:	be 64 00 00 00       	mov    esi,0x64
c0008cc3:	89 d8                	mov    eax,ebx
c0008cc5:	f7 f6                	div    esi
c0008cc7:	85 d2                	test   edx,edx
c0008cc9:	75 12                	jne    c0008cdd <KeDatetimeToSeconds(datetime_t)+0x86>
c0008ccb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd1:	be 90 01 00 00       	mov    esi,0x190
c0008cd6:	99                   	cdq    
c0008cd7:	f7 fe                	idiv   esi
c0008cd9:	85 d2                	test   edx,edx
c0008cdb:	75 01                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cdd:	41                   	inc    ecx
c0008cde:	83 fb 46             	cmp    ebx,0x46
c0008ce1:	76 48                	jbe    c0008d2b <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008ce3:	be 46 00 00 00       	mov    esi,0x46
c0008ce8:	bf 64 00 00 00       	mov    edi,0x64
c0008ced:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf2:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cf7:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfd:	75 23                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008cff:	89 f0                	mov    eax,esi
c0008d01:	99                   	cdq    
c0008d02:	f7 ff                	idiv   edi
c0008d04:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d09:	85 d2                	test   edx,edx
c0008d0b:	75 15                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008d0d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d13:	99                   	cdq    
c0008d14:	f7 fd                	idiv   ebp
c0008d16:	83 fa 01             	cmp    edx,0x1
c0008d19:	19 c0                	sbb    eax,eax
c0008d1b:	f7 d0                	not    eax
c0008d1d:	05 6e 01 00 00       	add    eax,0x16e
c0008d22:	01 c1                	add    ecx,eax
c0008d24:	46                   	inc    esi
c0008d25:	39 de                	cmp    esi,ebx
c0008d27:	7c c9                	jl     c0008cf2 <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008d29:	eb 34                	jmp    c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2b:	74 32                	je     c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2d:	b8 45 00 00 00       	mov    eax,0x45
c0008d32:	89 c2                	mov    edx,eax
c0008d34:	83 e2 03             	and    edx,0x3
c0008d37:	39 d8                	cmp    eax,ebx
c0008d39:	7e 0f                	jle    c0008d4a <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008d3b:	83 fa 01             	cmp    edx,0x1
c0008d3e:	19 d2                	sbb    edx,edx
c0008d40:	48                   	dec    eax
c0008d41:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d48:	eb e8                	jmp    c0008d32 <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008d4a:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d4f:	85 d2                	test   edx,edx
c0008d51:	75 0a                	jne    c0008d5d <KeDatetimeToSeconds(datetime_t)+0x106>
c0008d53:	83 fb 01             	cmp    ebx,0x1
c0008d56:	19 c0                	sbb    eax,eax
c0008d58:	05 6e 01 00 00       	add    eax,0x16e
c0008d5d:	29 c1                	sub    ecx,eax
c0008d5f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d64:	f7 e9                	imul   ecx
c0008d66:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d6d:	83 c4 0c             	add    esp,0xc
c0008d70:	5b                   	pop    ebx
c0008d71:	5e                   	pop    esi
c0008d72:	5f                   	pop    edi
c0008d73:	5d                   	pop    ebp
c0008d74:	c3                   	ret    
c0008d75:	90                   	nop

c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d76:	57                   	push   edi
c0008d77:	56                   	push   esi
c0008d78:	53                   	push   ebx
c0008d79:	83 ec 10             	sub    esp,0x10
c0008d7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d88:	e8 ca fe ff ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c0008d8d:	59                   	pop    ecx
c0008d8e:	5e                   	pop    esi
c0008d8f:	0f b6 35 08 a3 02 c0 	movzx  esi,BYTE PTR ds:0xc002a308
c0008d96:	03 35 0c a3 02 c0    	add    esi,DWORD PTR ds:0xc002a30c
c0008d9c:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008da2:	89 f7                	mov    edi,esi
c0008da4:	c1 ff 1f             	sar    edi,0x1f
c0008da7:	29 f0                	sub    eax,esi
c0008da9:	19 fa                	sbb    edx,edi
c0008dab:	31 f6                	xor    esi,esi
c0008dad:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008db4:	74 05                	je     c0008dbb <Clock::setTimeInDatetimeLocal(datetime_t)+0x45>
c0008db6:	be 08 07 00 00       	mov    esi,0x708
c0008dbb:	31 ff                	xor    edi,edi
c0008dbd:	29 f0                	sub    eax,esi
c0008dbf:	19 fa                	sbb    edx,edi
c0008dc1:	83 ec 0c             	sub    esp,0xc
c0008dc4:	89 d7                	mov    edi,edx
c0008dc6:	89 fe                	mov    esi,edi
c0008dc8:	31 ff                	xor    edi,edi
c0008dca:	57                   	push   edi
c0008dcb:	31 ff                	xor    edi,edi
c0008dcd:	56                   	push   esi
c0008dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008dd6:	57                   	push   edi
c0008dd7:	50                   	push   eax
c0008dd8:	68 50 1e 02 c0       	push   0xc0021e50
c0008ddd:	e8 82 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008de2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0008de4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008de8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0008dec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008df0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0008df4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0008df8:	8b 41 2c             	mov    eax,DWORD PTR [ecx+0x2c]
c0008dfb:	83 c4 30             	add    esp,0x30
c0008dfe:	5b                   	pop    ebx
c0008dff:	5e                   	pop    esi
c0008e00:	5f                   	pop    edi
c0008e01:	ff e0                	jmp    eax

c0008e03 <KeSecondsToDatetime(unsigned long long)>:
c0008e03:	55                   	push   ebp
c0008e04:	57                   	push   edi
c0008e05:	56                   	push   esi
c0008e06:	53                   	push   ebx
c0008e07:	83 ec 1c             	sub    esp,0x1c
c0008e0a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008e0e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008e12:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e16:	6a 00                	push   0x0
c0008e18:	68 80 51 01 00       	push   0x15180
c0008e1d:	55                   	push   ebp
c0008e1e:	57                   	push   edi
c0008e1f:	e8 a0 75 01 00       	call   c00203c4 <__udivdi3>
c0008e24:	83 c4 10             	add    esp,0x10
c0008e27:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e31:	6a 00                	push   0x0
c0008e33:	68 80 51 01 00       	push   0x15180
c0008e38:	55                   	push   ebp
c0008e39:	57                   	push   edi
c0008e3a:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e3f:	e8 80 76 01 00       	call   c00204c4 <__umoddi3>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	99                   	cdq    
c0008e48:	f7 ff                	idiv   edi
c0008e4a:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e4f:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e52:	89 d0                	mov    eax,edx
c0008e54:	99                   	cdq    
c0008e55:	f7 ff                	idiv   edi
c0008e57:	85 db                	test   ebx,ebx
c0008e59:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e5c:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e5f:	79 11                	jns    c0008e72 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e65:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e6b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e70:	eb 07                	jmp    c0008e79 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e72:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e77:	89 d8                	mov    eax,ebx
c0008e79:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e7e:	99                   	cdq    
c0008e7f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e84:	f7 f9                	idiv   ecx
c0008e86:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e8f:	31 d2                	xor    edx,edx
c0008e91:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e99:	01 c3                	add    ebx,eax
c0008e9b:	89 d8                	mov    eax,ebx
c0008e9d:	f7 f1                	div    ecx
c0008e9f:	31 d2                	xor    edx,edx
c0008ea1:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008ea4:	89 d8                	mov    eax,ebx
c0008ea6:	f7 f7                	div    edi
c0008ea8:	31 d2                	xor    edx,edx
c0008eaa:	29 c1                	sub    ecx,eax
c0008eac:	89 d8                	mov    eax,ebx
c0008eae:	f7 f5                	div    ebp
c0008eb0:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008eb5:	29 c1                	sub    ecx,eax
c0008eb7:	31 d2                	xor    edx,edx
c0008eb9:	89 c8                	mov    eax,ecx
c0008ebb:	f7 f5                	div    ebp
c0008ebd:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec6:	31 d2                	xor    edx,edx
c0008ec8:	89 c8                	mov    eax,ecx
c0008eca:	f7 f5                	div    ebp
c0008ecc:	31 d2                	xor    edx,edx
c0008ece:	01 c3                	add    ebx,eax
c0008ed0:	89 c8                	mov    eax,ecx
c0008ed2:	f7 f7                	div    edi
c0008ed4:	bf 99 00 00 00       	mov    edi,0x99
c0008ed9:	29 c3                	sub    ebx,eax
c0008edb:	31 d2                	xor    edx,edx
c0008edd:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008ee5:	29 c3                	sub    ebx,eax
c0008ee7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008eea:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008eed:	bb 05 00 00 00       	mov    ebx,0x5
c0008ef2:	83 c1 02             	add    ecx,0x2
c0008ef5:	89 c8                	mov    eax,ecx
c0008ef7:	f7 f7                	div    edi
c0008ef9:	31 d2                	xor    edx,edx
c0008efb:	89 c7                	mov    edi,eax
c0008efd:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008f03:	83 c0 02             	add    eax,0x2
c0008f06:	f7 f3                	div    ebx
c0008f08:	89 eb                	mov    ebx,ebp
c0008f0a:	29 c3                	sub    ebx,eax
c0008f0c:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008f12:	88 1e                	mov    BYTE PTR [esi],bl
c0008f14:	19 c0                	sbb    eax,eax
c0008f16:	31 c9                	xor    ecx,ecx
c0008f18:	83 e0 0c             	and    eax,0xc
c0008f1b:	8d 54 38 f6          	lea    edx,[eax+edi*1-0xa]
c0008f1f:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008f27:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008f2b:	83 fa 01             	cmp    edx,0x1
c0008f2e:	0f 96 c1             	setbe  cl
c0008f31:	42                   	inc    edx
c0008f32:	8d 44 08 46          	lea    eax,[eax+ecx*1+0x46]
c0008f36:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0008f39:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f3d:	83 c4 1c             	add    esp,0x1c
c0008f40:	89 f0                	mov    eax,esi
c0008f42:	5b                   	pop    ebx
c0008f43:	5e                   	pop    esi
c0008f44:	5f                   	pop    edi
c0008f45:	5d                   	pop    ebp
c0008f46:	c2 04 00             	ret    0x4
c0008f49:	90                   	nop

c0008f4a <Clock::timeInDatetimeLocal()>:
c0008f4a:	53                   	push   ebx
c0008f4b:	83 ec 14             	sub    esp,0x14
c0008f4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f56:	e8 5b fc ff ff       	call   c0008bb6 <Clock::timeInSecondsLocal()>
c0008f5b:	83 c4 0c             	add    esp,0xc
c0008f5e:	52                   	push   edx
c0008f5f:	50                   	push   eax
c0008f60:	53                   	push   ebx
c0008f61:	e8 9d fe ff ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0008f66:	89 d8                	mov    eax,ebx
c0008f68:	83 c4 14             	add    esp,0x14
c0008f6b:	5b                   	pop    ebx
c0008f6c:	c2 04 00             	ret    0x4
c0008f6f:	90                   	nop

c0008f70 <Device::hibernate()>:
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <Device::wake()>:
c0008f72:	c3                   	ret    
c0008f73:	90                   	nop

c0008f74 <Device::detect()>:
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::disableLegacy()>:
c0008f76:	c3                   	ret    
c0008f77:	90                   	nop

c0008f78 <Device::powerSaving(PowerSavingLevel)>:
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <DriverlessDevice::close(int, int, void*)>:
c0008f7a:	31 c0                	xor    eax,eax
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop

c0008f7e <DriverlessDevice::detect()>:
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <DriverlessDevice::open(int, int, void*)>:
c0008f80:	83 ec 18             	sub    esp,0x18
c0008f83:	68 d0 1e 02 c0       	push   0xc0021ed0
c0008f88:	e8 e5 5e 00 00       	call   c000ee72 <KePanic(char const*)>
c0008f8d:	83 c8 ff             	or     eax,0xffffffff
c0008f90:	83 c4 1c             	add    esp,0x1c
c0008f93:	c3                   	ret    

c0008f94 <Device::~Device()>:
c0008f94:	ba 74 1f 02 c0       	mov    edx,0xc0021f74
c0008f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f9d:	89 10                	mov    DWORD PTR [eax],edx
c0008f9f:	90                   	nop
c0008fa0:	c3                   	ret    
c0008fa1:	90                   	nop

c0008fa2 <Device::~Device()>:
c0008fa2:	83 ec 0c             	sub    esp,0xc
c0008fa5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008fa9:	e8 e6 ff ff ff       	call   c0008f94 <Device::~Device()>
c0008fae:	83 c4 04             	add    esp,0x4
c0008fb1:	83 ec 08             	sub    esp,0x8
c0008fb4:	68 58 01 00 00       	push   0x158
c0008fb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fbd:	e8 de 38 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	83 c4 0c             	add    esp,0xc
c0008fc8:	c3                   	ret    
c0008fc9:	90                   	nop

c0008fca <Device::findAndLoadDriver()>:
c0008fca:	c7 44 24 04 ee 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021eee
c0008fd2:	e9 8d df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008fd7:	90                   	nop

c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fd8:	57                   	push   edi
c0008fd9:	b9 09 00 00 00       	mov    ecx,0x9
c0008fde:	56                   	push   esi
c0008fdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fe3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fe7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008ff1:	81 c7 18 01 00 00    	add    edi,0x118
c0008ff7:	fc                   	cld    
c0008ff8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008ffa:	5e                   	pop    esi
c0008ffb:	5f                   	pop    edi
c0008ffc:	c3                   	ret    
c0008ffd:	90                   	nop

c0008ffe <Device::preOpenACPI(void*, char*, char*)>:
c0008ffe:	57                   	push   edi
c0008fff:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009004:	56                   	push   esi
c0009005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009009:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000900d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009017:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000901d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009023:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009027:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009029:	b9 0e 00 00 00       	mov    ecx,0xe
c000902e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009034:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009038:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000903a:	5e                   	pop    esi
c000903b:	5f                   	pop    edi
c000903c:	c3                   	ret    
c000903d:	90                   	nop

c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000903e:	53                   	push   ebx
c000903f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009043:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000904f:	0f b6 c0             	movzx  eax,al
c0009052:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009056:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000905e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009062:	5b                   	pop    ebx
c0009063:	e9 33 00 01 00       	jmp    c001909b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009068 <Device::getParent()>:
c0009068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000906c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009072:	c3                   	ret    
c0009073:	90                   	nop

c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000907c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009081:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009085:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009089:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000908d:	e9 6b 01 01 00       	jmp    c00191fd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009092 <Device::addChild(Device*)>:
c0009092:	53                   	push   ebx
c0009093:	83 ec 08             	sub    esp,0x8
c0009096:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000909a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000909e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00090a4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00090aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00090ac:	85 d2                	test   edx,edx
c00090ae:	74 04                	je     c00090b4 <Device::addChild(Device*)+0x22>
c00090b0:	89 d3                	mov    ebx,edx
c00090b2:	eb f6                	jmp    c00090aa <Device::addChild(Device*)+0x18>
c00090b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00090b7:	83 ec 0c             	sub    esp,0xc
c00090ba:	6a 08                	push   0x8
c00090bc:	e8 6a 5a 00 00       	call   c000eb2b <malloc>
c00090c1:	89 03                	mov    DWORD PTR [ebx],eax
c00090c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090d0:	83 c4 18             	add    esp,0x18
c00090d3:	5b                   	pop    ebx
c00090d4:	c3                   	ret    
c00090d5:	90                   	nop

c00090d6 <Device::removeAllChildren()>:
c00090d6:	56                   	push   esi
c00090d7:	53                   	push   ebx
c00090d8:	52                   	push   edx
c00090d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090dd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 17                	je     c00090ff <Device::removeAllChildren()+0x29>
c00090e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090eb:	85 c0                	test   eax,eax
c00090ed:	74 0c                	je     c00090fb <Device::removeAllChildren()+0x25>
c00090ef:	83 ec 0c             	sub    esp,0xc
c00090f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f4:	50                   	push   eax
c00090f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090f8:	83 c4 10             	add    esp,0x10
c00090fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090fd:	eb e4                	jmp    c00090e3 <Device::removeAllChildren()+0xd>
c00090ff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009105:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000910b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009111:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009118:	58                   	pop    eax
c0009119:	5b                   	pop    ebx
c000911a:	5e                   	pop    esi
c000911b:	c3                   	ret    

c000911c <Device::hibernateAll()>:
c000911c:	53                   	push   ebx
c000911d:	83 ec 14             	sub    esp,0x14
c0009120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009124:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009126:	53                   	push   ebx
c0009127:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000912a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009136:	74 0f                	je     c0009147 <Device::hibernateAll()+0x2b>
c0009138:	83 ec 0c             	sub    esp,0xc
c000913b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913e:	e8 d9 ff ff ff       	call   c000911c <Device::hibernateAll()>
c0009143:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009145:	eb e9                	jmp    c0009130 <Device::hibernateAll()+0x14>
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <Device::wakeAll()>:
c000914c:	53                   	push   ebx
c000914d:	83 ec 14             	sub    esp,0x14
c0009150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009156:	53                   	push   ebx
c0009157:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000915a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009166:	74 0f                	je     c0009177 <Device::wakeAll()+0x2b>
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000916e:	e8 d9 ff ff ff       	call   c000914c <Device::wakeAll()>
c0009173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009175:	eb e9                	jmp    c0009160 <Device::wakeAll()+0x14>
c0009177:	83 c4 08             	add    esp,0x8
c000917a:	5b                   	pop    ebx
c000917b:	c3                   	ret    

c000917c <Device::detectAll()>:
c000917c:	53                   	push   ebx
c000917d:	83 ec 14             	sub    esp,0x14
c0009180:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009184:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009186:	53                   	push   ebx
c0009187:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000918a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009190:	83 c4 10             	add    esp,0x10
c0009193:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009196:	74 0f                	je     c00091a7 <Device::detectAll()+0x2b>
c0009198:	83 ec 0c             	sub    esp,0xc
c000919b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000919e:	e8 d9 ff ff ff       	call   c000917c <Device::detectAll()>
c00091a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091a5:	eb e9                	jmp    c0009190 <Device::detectAll()+0x14>
c00091a7:	83 c4 08             	add    esp,0x8
c00091aa:	5b                   	pop    ebx
c00091ab:	c3                   	ret    

c00091ac <Device::disableLegacyAll()>:
c00091ac:	c3                   	ret    
c00091ad:	90                   	nop

c00091ae <Device::loadDriversForAll()>:
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Device::powerSavingAll(PowerSavingLevel)>:
c00091b0:	56                   	push   esi
c00091b1:	53                   	push   ebx
c00091b2:	83 ec 0c             	sub    esp,0xc
c00091b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00091b9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00091bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00091bf:	56                   	push   esi
c00091c0:	53                   	push   ebx
c00091c1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00091c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091d0:	74 0f                	je     c00091e1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091d2:	52                   	push   edx
c00091d3:	52                   	push   edx
c00091d4:	56                   	push   esi
c00091d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091d8:	e8 d3 ff ff ff       	call   c00091b0 <Device::powerSavingAll(PowerSavingLevel)>
c00091dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091df:	eb e9                	jmp    c00091ca <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091e1:	58                   	pop    eax
c00091e2:	5b                   	pop    ebx
c00091e3:	5e                   	pop    esi
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop

c00091e6 <Device::setName(char const*)>:
c00091e6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091ee:	e9 4d 74 ff ff       	jmp    c0000640 <strcpy>
c00091f3:	90                   	nop

c00091f4 <Device::Device(char const*)>:
c00091f4:	83 ec 1c             	sub    esp,0x1c
c00091f7:	ba 74 1f 02 c0       	mov    edx,0xc0021f74
c00091fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009200:	89 10                	mov    DWORD PTR [eax],edx
c0009202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009206:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009214:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000921e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009222:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000922c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009230:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000923a:	83 ec 08             	sub    esp,0x8
c000923d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009245:	e8 9c ff ff ff       	call   c00091e6 <Device::setName(char const*)>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009255:	83 ec 0c             	sub    esp,0xc
c0009258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000925c:	e8 ca 58 00 00       	call   c000eb2b <malloc>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009271:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009275:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000927b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009285:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000928b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009295:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000929c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00092a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ab:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00092b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00092c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092c4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00092ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092ea:	90                   	nop
c00092eb:	83 c4 1c             	add    esp,0x1c
c00092ee:	c3                   	ret    
c00092ef:	90                   	nop

c00092f0 <Device::getName()>:
c00092f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092f4:	05 d0 00 00 00       	add    eax,0xd0
c00092f9:	c3                   	ret    

c00092fa <Device::closeAll()>:
c00092fa:	53                   	push   ebx
c00092fb:	83 ec 08             	sub    esp,0x8
c00092fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009302:	53                   	push   ebx
c0009303:	e8 e8 ff ff ff       	call   c00092f0 <Device::getName()>
c0009308:	52                   	push   edx
c0009309:	50                   	push   eax
c000930a:	68 28 1f 02 c0       	push   0xc0021f28
c000930f:	e8 50 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009314:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009316:	6a 00                	push   0x0
c0009318:	6a 00                	push   0x0
c000931a:	6a 00                	push   0x0
c000931c:	53                   	push   ebx
c000931d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009320:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009326:	83 c4 20             	add    esp,0x20
c0009329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000932c:	74 12                	je     c0009340 <Device::closeAll()+0x46>
c000932e:	83 ec 0c             	sub    esp,0xc
c0009331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009334:	e8 c1 ff ff ff       	call   c00092fa <Device::closeAll()>
c0009339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	eb e9                	jmp    c0009329 <Device::closeAll()+0x2f>
c0009340:	83 c4 08             	add    esp,0x8
c0009343:	5b                   	pop    ebx
c0009344:	c3                   	ret    
c0009345:	90                   	nop

c0009346 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009346:	83 ec 0c             	sub    esp,0xc
c0009349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000934d:	83 ec 08             	sub    esp,0x8
c0009350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009354:	50                   	push   eax
c0009355:	e8 9a fe ff ff       	call   c00091f4 <Device::Device(char const*)>
c000935a:	83 c4 10             	add    esp,0x10
c000935d:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c0009362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009366:	89 10                	mov    DWORD PTR [eax],edx
c0009368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009376:	90                   	nop
c0009377:	83 c4 0c             	add    esp,0xc
c000937a:	c3                   	ret    
c000937b:	90                   	nop

c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000937c:	57                   	push   edi
c000937d:	56                   	push   esi
c000937e:	53                   	push   ebx
c000937f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009383:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009387:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000938b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009391:	75 0c                	jne    c000939f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009393:	52                   	push   edx
c0009394:	52                   	push   edx
c0009395:	53                   	push   ebx
c0009396:	56                   	push   esi
c0009397:	e8 a0 72 01 00       	call   c002063c <LinkedList<Device>::addElement(Device*)>
c000939c:	83 c4 10             	add    esp,0x10
c000939f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093a8:	74 12                	je     c00093bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00093aa:	50                   	push   eax
c00093ab:	57                   	push   edi
c00093ac:	56                   	push   esi
c00093ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093b0:	e8 c7 ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093b7:	83 c4 10             	add    esp,0x10
c00093ba:	eb e9                	jmp    c00093a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00093bc:	5b                   	pop    ebx
c00093bd:	5e                   	pop    esi
c00093be:	5f                   	pop    edi
c00093bf:	c3                   	ret    

c00093c0 <getDevicesOfType(DeviceType)>:
c00093c0:	53                   	push   ebx
c00093c1:	83 ec 14             	sub    esp,0x14
c00093c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00093c8:	53                   	push   ebx
c00093c9:	e8 4a 73 01 00       	call   c0020718 <LinkedList<Device>::LinkedList()>
c00093ce:	83 c4 0c             	add    esp,0xc
c00093d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093d5:	53                   	push   ebx
c00093d6:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093dc:	e8 9b ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093e1:	89 d8                	mov    eax,ebx
c00093e3:	83 c4 18             	add    esp,0x18
c00093e6:	5b                   	pop    ebx
c00093e7:	c2 04 00             	ret    0x4
c00093ea:	66 90                	xchg   ax,ax

c00093ec <HardDiskController::HardDiskController(char const*)>:
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f3:	83 ec 08             	sub    esp,0x8
c00093f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fa:	50                   	push   eax
c00093fb:	e8 f4 fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009400:	83 c4 10             	add    esp,0x10
c0009403:	ba cc 1f 02 c0       	mov    edx,0xc0021fcc
c0009408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940c:	89 10                	mov    DWORD PTR [eax],edx
c000940e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009412:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000941c:	90                   	nop
c000941d:	83 c4 0c             	add    esp,0xc
c0009420:	c3                   	ret    
c0009421:	90                   	nop
c0009422:	66 90                	xchg   ax,ax

c0009424 <HardDiskController::~HardDiskController()>:
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	ba cc 1f 02 c0       	mov    edx,0xc0021fcc
c000942c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009430:	89 10                	mov    DWORD PTR [eax],edx
c0009432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009436:	83 ec 0c             	sub    esp,0xc
c0009439:	50                   	push   eax
c000943a:	e8 55 fb ff ff       	call   c0008f94 <Device::~Device()>
c000943f:	83 c4 10             	add    esp,0x10
c0009442:	90                   	nop
c0009443:	83 c4 0c             	add    esp,0xc
c0009446:	c3                   	ret    
c0009447:	90                   	nop

c0009448 <HardDiskController::~HardDiskController()>:
c0009448:	83 ec 0c             	sub    esp,0xc
c000944b:	83 ec 0c             	sub    esp,0xc
c000944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009452:	e8 cd ff ff ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	83 ec 08             	sub    esp,0x8
c000945d:	68 58 01 00 00       	push   0x158
c0009462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009466:	e8 35 34 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	83 c4 0c             	add    esp,0xc
c0009471:	c3                   	ret    

c0009472 <PhysicalDisk::eject()>:
c0009472:	83 c8 ff             	or     eax,0xffffffff
c0009475:	c3                   	ret    

c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009476:	83 ec 0c             	sub    esp,0xc
c0009479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947d:	83 ec 08             	sub    esp,0x8
c0009480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009484:	50                   	push   eax
c0009485:	e8 6a fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c000948a:	83 c4 10             	add    esp,0x10
c000948d:	ba f8 1f 02 c0       	mov    edx,0xc0021ff8
c0009492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009496:	89 10                	mov    DWORD PTR [eax],edx
c0009498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000949c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00094a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00094ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00094bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00094c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00094ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094d8:	90                   	nop
c00094d9:	83 c4 0c             	add    esp,0xc
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <PhysicalDisk::startCache()>:
c00094de:	56                   	push   esi
c00094df:	53                   	push   ebx
c00094e0:	83 ec 10             	sub    esp,0x10
c00094e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094e7:	6a 44                	push   0x44
c00094e9:	e8 3d 56 00 00       	call   c000eb2b <malloc>
c00094ee:	89 c6                	mov    esi,eax
c00094f0:	58                   	pop    eax
c00094f1:	5a                   	pop    edx
c00094f2:	53                   	push   ebx
c00094f3:	56                   	push   esi
c00094f4:	e8 a7 13 00 00       	call   c000a8a0 <VCache::VCache(PhysicalDisk*)>
c00094f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094ff:	83 c4 14             	add    esp,0x14
c0009502:	5b                   	pop    ebx
c0009503:	5e                   	pop    esi
c0009504:	c3                   	ret    
c0009505:	90                   	nop

c0009506 <PhysicalDisk::~PhysicalDisk()>:
c0009506:	83 ec 0c             	sub    esp,0xc
c0009509:	ba f8 1f 02 c0       	mov    edx,0xc0021ff8
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	89 10                	mov    DWORD PTR [eax],edx
c0009514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009518:	83 ec 0c             	sub    esp,0xc
c000951b:	50                   	push   eax
c000951c:	e8 73 fa ff ff       	call   c0008f94 <Device::~Device()>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	90                   	nop
c0009525:	83 c4 0c             	add    esp,0xc
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <PhysicalDisk::~PhysicalDisk()>:
c000952a:	83 ec 0c             	sub    esp,0xc
c000952d:	83 ec 0c             	sub    esp,0xc
c0009530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009534:	e8 cd ff ff ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0009539:	83 c4 10             	add    esp,0x10
c000953c:	83 ec 08             	sub    esp,0x8
c000953f:	68 6c 01 00 00       	push   0x16c
c0009544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009548:	e8 53 33 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000954d:	83 c4 10             	add    esp,0x10
c0009550:	83 c4 0c             	add    esp,0xc
c0009553:	c3                   	ret    

c0009554 <startGUI(void*)>:
c0009554:	55                   	push   ebp
c0009555:	89 e5                	mov    ebp,esp
c0009557:	53                   	push   ebx
c0009558:	83 ec 04             	sub    esp,0x4
c000955b:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009563:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009568:	85 c0                	test   eax,eax
c000956a:	75 01                	jne    c000956d <startGUI(void*)+0x19>
c000956c:	fb                   	sti    
c000956d:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009573:	83 ec 08             	sub    esp,0x8
c0009576:	6a 01                	push   0x1
c0009578:	68 28 20 02 c0       	push   0xc0022028
c000957d:	e8 ef b9 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c0009582:	83 c4 10             	add    esp,0x10
c0009585:	83 ec 08             	sub    esp,0x8
c0009588:	53                   	push   ebx
c0009589:	50                   	push   eax
c000958a:	e8 34 bc 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009598:	83 ec 08             	sub    esp,0x8
c000959b:	6a 01                	push   0x1
c000959d:	68 42 20 02 c0       	push   0xc0022042
c00095a2:	e8 ca b9 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	53                   	push   ebx
c00095ae:	50                   	push   eax
c00095af:	e8 0f bc 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	eb fe                	jmp    c00095b7 <startGUI(void*)+0x63>

c00095b9 <startGUIVESA(void*)>:
c00095b9:	55                   	push   ebp
c00095ba:	89 e5                	mov    ebp,esp
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 04             	sub    esp,0x4
c00095c0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00095c8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00095cd:	85 c0                	test   eax,eax
c00095cf:	75 01                	jne    c00095d2 <startGUIVESA(void*)+0x19>
c00095d1:	fb                   	sti    
c00095d2:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095d8:	83 ec 08             	sub    esp,0x8
c00095db:	6a 01                	push   0x1
c00095dd:	68 60 20 02 c0       	push   0xc0022060
c00095e2:	e8 8a b9 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c00095e7:	83 c4 10             	add    esp,0x10
c00095ea:	83 ec 08             	sub    esp,0x8
c00095ed:	53                   	push   ebx
c00095ee:	50                   	push   eax
c00095ef:	e8 cf bb 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c00095f4:	83 c4 10             	add    esp,0x10
c00095f7:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095fd:	83 ec 08             	sub    esp,0x8
c0009600:	6a 01                	push   0x1
c0009602:	68 42 20 02 c0       	push   0xc0022042
c0009607:	e8 65 b9 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	83 ec 08             	sub    esp,0x8
c0009612:	53                   	push   ebx
c0009613:	50                   	push   eax
c0009614:	e8 aa bb 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	eb fe                	jmp    c000961c <startGUIVESA(void*)+0x63>

c000961e <sendKeyToTerminal(unsigned char)>:
c000961e:	55                   	push   ebp
c000961f:	89 e5                	mov    ebp,esp
c0009621:	83 ec 28             	sub    esp,0x28
c0009624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009627:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000962a:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c000962f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009633:	83 ec 08             	sub    esp,0x8
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	e8 3b 83 00 00       	call   c0011978 <VgaText::receiveKey(unsigned char)>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009644:	83 f8 0a             	cmp    eax,0xa
c0009647:	74 16                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009649:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000964d:	83 f8 03             	cmp    eax,0x3
c0009650:	74 0d                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009652:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009656:	83 f8 1c             	cmp    eax,0x1c
c0009659:	0f 85 92 00 00 00    	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c000965f:	fa                   	cli    
c0009660:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009665:	83 c0 01             	add    eax,0x1
c0009668:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000966d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009672:	83 c0 01             	add    eax,0x1
c0009675:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000967a:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c000967f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009682:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c000968c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009690:	74 1f                	je     c00096b1 <sendKeyToTerminal(unsigned char)+0x93>
c0009692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009695:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009698:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000969b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000969e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00096a7:	e8 f4 c6 00 00       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	eb db                	jmp    c000968c <sendKeyToTerminal(unsigned char)+0x6e>
c00096b1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00096b6:	83 e8 01             	sub    eax,0x1
c00096b9:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00096be:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00096c3:	85 c0                	test   eax,eax
c00096c5:	75 18                	jne    c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096c7:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00096cc:	85 c0                	test   eax,eax
c00096ce:	74 0f                	je     c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096d0:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00096da:	e8 b1 c3 00 00       	call   c0015a90 <schedule()>
c00096df:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00096e7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00096ec:	85 c0                	test   eax,eax
c00096ee:	75 01                	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096f0:	fb                   	sti    
c00096f1:	90                   	nop
c00096f2:	c9                   	leave  
c00096f3:	c3                   	ret    

c00096f4 <sendKeyboardToken(KeyboardToken)>:
c00096f4:	55                   	push   ebp
c00096f5:	89 e5                	mov    ebp,esp
c00096f7:	83 ec 18             	sub    esp,0x18
c00096fa:	e8 a3 60 00 00       	call   c000f7a2 <KeUserIOReceived()>
c00096ff:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0009702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009705:	0f b7 c0             	movzx  eax,ax
c0009708:	83 f2 01             	xor    edx,0x1
c000970b:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c0009711:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009716:	85 c0                	test   eax,eax
c0009718:	74 24                	je     c000973e <sendKeyboardToken(KeyboardToken)+0x4a>
c000971a:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c0009720:	83 ec 04             	sub    esp,0x4
c0009723:	68 40 a3 02 c0       	push   0xc002a340
c0009728:	83 ec 08             	sub    esp,0x8
c000972b:	89 e2                	mov    edx,esp
c000972d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009730:	89 02                	mov    DWORD PTR [edx],eax
c0009732:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009735:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009739:	ff d1                	call   ecx
c000973b:	83 c4 10             	add    esp,0x10
c000973e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009742:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009745:	0f b6 c0             	movzx  eax,al
c0009748:	85 c0                	test   eax,eax
c000974a:	0f 84 da 00 00 00    	je     c000982a <sendKeyboardToken(KeyboardToken)+0x136>
c0009750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009753:	0f b7 c0             	movzx  eax,ax
c0009756:	3d 18 03 00 00       	cmp    eax,0x318
c000975b:	75 06                	jne    c0009763 <sendKeyboardToken(KeyboardToken)+0x6f>
c000975d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009766:	0f b7 c0             	movzx  eax,ax
c0009769:	3d 19 03 00 00       	cmp    eax,0x319
c000976e:	75 06                	jne    c0009776 <sendKeyboardToken(KeyboardToken)+0x82>
c0009770:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009779:	0f b7 c0             	movzx  eax,ax
c000977c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009781:	75 06                	jne    c0009789 <sendKeyboardToken(KeyboardToken)+0x95>
c0009783:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000978c:	0f b7 c0             	movzx  eax,ax
c000978f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009794:	75 06                	jne    c000979c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009796:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000979c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979f:	0f b7 c0             	movzx  eax,ax
c00097a2:	3d 1c 03 00 00       	cmp    eax,0x31c
c00097a7:	75 06                	jne    c00097af <sendKeyboardToken(KeyboardToken)+0xbb>
c00097a9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00097af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b2:	0f b7 c0             	movzx  eax,ax
c00097b5:	3d 1d 03 00 00       	cmp    eax,0x31d
c00097ba:	75 06                	jne    c00097c2 <sendKeyboardToken(KeyboardToken)+0xce>
c00097bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	0f b7 c0             	movzx  eax,ax
c00097c8:	3d 1e 03 00 00       	cmp    eax,0x31e
c00097cd:	75 06                	jne    c00097d5 <sendKeyboardToken(KeyboardToken)+0xe1>
c00097cf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d8:	0f b7 c0             	movzx  eax,ax
c00097db:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097e0:	75 06                	jne    c00097e8 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097e2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097eb:	0f b7 c0             	movzx  eax,ax
c00097ee:	3d 20 03 00 00       	cmp    eax,0x320
c00097f3:	75 06                	jne    c00097fb <sendKeyboardToken(KeyboardToken)+0x107>
c00097f5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097fe:	0f b7 c0             	movzx  eax,ax
c0009801:	3d 21 03 00 00       	cmp    eax,0x321
c0009806:	75 06                	jne    c000980e <sendKeyboardToken(KeyboardToken)+0x11a>
c0009808:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000980e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009811:	0f b7 c0             	movzx  eax,ax
c0009814:	3d 22 03 00 00       	cmp    eax,0x322
c0009819:	0f 85 f1 00 00 00    	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000981f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0009825:	e9 e6 00 00 00       	jmp    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000982a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982d:	0f b7 c0             	movzx  eax,ax
c0009830:	3d 18 03 00 00       	cmp    eax,0x318
c0009835:	75 0a                	jne    c0009841 <sendKeyboardToken(KeyboardToken)+0x14d>
c0009837:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000983d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009844:	0f b7 c0             	movzx  eax,ax
c0009847:	3d 19 03 00 00       	cmp    eax,0x319
c000984c:	75 0a                	jne    c0009858 <sendKeyboardToken(KeyboardToken)+0x164>
c000984e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009854:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985b:	0f b7 c0             	movzx  eax,ax
c000985e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009863:	75 0a                	jne    c000986f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009865:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000986b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009872:	0f b7 c0             	movzx  eax,ax
c0009875:	3d 1b 03 00 00       	cmp    eax,0x31b
c000987a:	75 0a                	jne    c0009886 <sendKeyboardToken(KeyboardToken)+0x192>
c000987c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009882:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009889:	0f b7 c0             	movzx  eax,ax
c000988c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009891:	75 0a                	jne    c000989d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009893:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009899:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a0:	0f b7 c0             	movzx  eax,ax
c00098a3:	3d 1d 03 00 00       	cmp    eax,0x31d
c00098a8:	75 0a                	jne    c00098b4 <sendKeyboardToken(KeyboardToken)+0x1c0>
c00098aa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00098b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b7:	0f b7 c0             	movzx  eax,ax
c00098ba:	3d 1e 03 00 00       	cmp    eax,0x31e
c00098bf:	75 0a                	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x1d7>
c00098c1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00098c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ce:	0f b7 c0             	movzx  eax,ax
c00098d1:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098d6:	75 0a                	jne    c00098e2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098d8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e5:	0f b7 c0             	movzx  eax,ax
c00098e8:	3d 20 03 00 00       	cmp    eax,0x320
c00098ed:	75 0a                	jne    c00098f9 <sendKeyboardToken(KeyboardToken)+0x205>
c00098ef:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	0f b7 c0             	movzx  eax,ax
c00098ff:	3d 21 03 00 00       	cmp    eax,0x321
c0009904:	75 0a                	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c0009906:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000990c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009913:	0f b7 c0             	movzx  eax,ax
c0009916:	3d 00 02 00 00       	cmp    eax,0x200
c000991b:	75 2f                	jne    c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000991d:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c0009922:	83 f0 01             	xor    eax,0x1
c0009925:	0f b6 c0             	movzx  eax,al
c0009928:	85 c0                	test   eax,eax
c000992a:	74 20                	je     c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000992c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009931:	6a 01                	push   0x1
c0009933:	6a 00                	push   0x0
c0009935:	68 54 95 00 c0       	push   0xc0009554
c000993a:	50                   	push   eax
c000993b:	e8 f8 be 00 00       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c0009940:	83 c4 10             	add    esp,0x10
c0009943:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000994a:	eb 3a                	jmp    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c000994c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000994f:	0f b7 c0             	movzx  eax,ax
c0009952:	3d 01 02 00 00       	cmp    eax,0x201
c0009957:	75 2d                	jne    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009959:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c000995e:	83 f0 01             	xor    eax,0x1
c0009961:	0f b6 c0             	movzx  eax,al
c0009964:	85 c0                	test   eax,eax
c0009966:	74 1e                	je     c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009968:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000996d:	6a 01                	push   0x1
c000996f:	6a 00                	push   0x0
c0009971:	68 b9 95 00 c0       	push   0xc00095b9
c0009976:	50                   	push   eax
c0009977:	e8 bc be 00 00       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c000997c:	83 c4 10             	add    esp,0x10
c000997f:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c0009986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009989:	0f b7 c0             	movzx  eax,ax
c000998c:	3d 25 03 00 00       	cmp    eax,0x325
c0009991:	75 06                	jne    c0009999 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009993:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000999c:	0f b7 c0             	movzx  eax,ax
c000999f:	3d 24 03 00 00       	cmp    eax,0x324
c00099a4:	75 06                	jne    c00099ac <sendKeyboardToken(KeyboardToken)+0x2b8>
c00099a6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00099ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099af:	0f b7 c0             	movzx  eax,ax
c00099b2:	3d 23 03 00 00       	cmp    eax,0x323
c00099b7:	75 06                	jne    c00099bf <sendKeyboardToken(KeyboardToken)+0x2cb>
c00099b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00099bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099c2:	0f b7 c0             	movzx  eax,ax
c00099c5:	3d 26 03 00 00       	cmp    eax,0x326
c00099ca:	75 06                	jne    c00099d2 <sendKeyboardToken(KeyboardToken)+0x2de>
c00099cc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099d5:	0f b7 c0             	movzx  eax,ax
c00099d8:	3d 27 03 00 00       	cmp    eax,0x327
c00099dd:	75 06                	jne    c00099e5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099df:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e8:	0f b7 c0             	movzx  eax,ax
c00099eb:	3d 22 03 00 00       	cmp    eax,0x322
c00099f0:	75 06                	jne    c00099f8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099f2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099f8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099fc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099ff:	83 f0 01             	xor    eax,0x1
c0009a02:	0f b6 c0             	movzx  eax,al
c0009a05:	85 c0                	test   eax,eax
c0009a07:	74 7c                	je     c0009a85 <sendKeyboardToken(KeyboardToken)+0x391>
c0009a09:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c0009a0e:	0f b6 c0             	movzx  eax,al
c0009a11:	85 c0                	test   eax,eax
c0009a13:	74 43                	je     c0009a58 <sendKeyboardToken(KeyboardToken)+0x364>
c0009a15:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a19:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0009a1d:	85 c0                	test   eax,eax
c0009a1f:	74 2b                	je     c0009a4c <sendKeyboardToken(KeyboardToken)+0x358>
c0009a21:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c0009a27:	89 d0                	mov    eax,edx
c0009a29:	c1 e0 02             	shl    eax,0x2
c0009a2c:	01 d0                	add    eax,edx
c0009a2e:	01 c0                	add    eax,eax
c0009a30:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a38:	0f b7 c0             	movzx  eax,ax
c0009a3b:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a3e:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a43:	01 d0                	add    eax,edx
c0009a45:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a4a:	eb 71                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a4c:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a56:	eb 65                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a58:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a5d:	85 c0                	test   eax,eax
c0009a5f:	74 18                	je     c0009a79 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a61:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a66:	0f b6 c0             	movzx  eax,al
c0009a69:	83 ec 0c             	sub    esp,0xc
c0009a6c:	50                   	push   eax
c0009a6d:	e8 ac fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009a72:	83 c4 10             	add    esp,0x10
c0009a75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a79:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a83:	eb 38                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a88:	0f b7 c0             	movzx  eax,ax
c0009a8b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a90:	75 2b                	jne    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a92:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a97:	85 c0                	test   eax,eax
c0009a99:	74 18                	je     c0009ab3 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a9b:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009aa0:	0f b6 c0             	movzx  eax,al
c0009aa3:	83 ec 0c             	sub    esp,0xc
c0009aa6:	50                   	push   eax
c0009aa7:	e8 72 fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009aac:	83 c4 10             	add    esp,0x10
c0009aaf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009ab3:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009abd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ac0:	83 f0 01             	xor    eax,0x1
c0009ac3:	0f b6 c0             	movzx  eax,al
c0009ac6:	85 c0                	test   eax,eax
c0009ac8:	74 5a                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009acd:	83 f0 01             	xor    eax,0x1
c0009ad0:	0f b6 c0             	movzx  eax,al
c0009ad3:	85 c0                	test   eax,eax
c0009ad5:	74 4d                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ad7:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009adc:	83 f0 01             	xor    eax,0x1
c0009adf:	0f b6 c0             	movzx  eax,al
c0009ae2:	85 c0                	test   eax,eax
c0009ae4:	74 3e                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae9:	0f b7 c0             	movzx  eax,ax
c0009aec:	83 f8 1f             	cmp    eax,0x1f
c0009aef:	76 0b                	jbe    c0009afc <sendKeyboardToken(KeyboardToken)+0x408>
c0009af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009af4:	0f b7 c0             	movzx  eax,ax
c0009af7:	83 f8 7e             	cmp    eax,0x7e
c0009afa:	76 16                	jbe    c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aff:	0f b7 c0             	movzx  eax,ax
c0009b02:	83 f8 0a             	cmp    eax,0xa
c0009b05:	74 0b                	je     c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0a:	0f b7 c0             	movzx  eax,ax
c0009b0d:	83 f8 08             	cmp    eax,0x8
c0009b10:	75 12                	jne    c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b15:	0f b6 c0             	movzx  eax,al
c0009b18:	83 ec 0c             	sub    esp,0xc
c0009b1b:	50                   	push   eax
c0009b1c:	e8 fd fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b21:	83 c4 10             	add    esp,0x10
c0009b24:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009b27:	83 f0 01             	xor    eax,0x1
c0009b2a:	0f b6 c0             	movzx  eax,al
c0009b2d:	85 c0                	test   eax,eax
c0009b2f:	74 5d                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b31:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b34:	83 f0 01             	xor    eax,0x1
c0009b37:	0f b6 c0             	movzx  eax,al
c0009b3a:	85 c0                	test   eax,eax
c0009b3c:	74 50                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b3e:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b43:	0f b6 c0             	movzx  eax,al
c0009b46:	85 c0                	test   eax,eax
c0009b48:	74 44                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b4d:	0f b7 c0             	movzx  eax,ax
c0009b50:	83 f8 3f             	cmp    eax,0x3f
c0009b53:	76 39                	jbe    c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b58:	0f b7 c0             	movzx  eax,ax
c0009b5b:	83 f8 7f             	cmp    eax,0x7f
c0009b5e:	77 2e                	ja     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b63:	88 c2                	mov    dl,al
c0009b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b68:	0f b7 c0             	movzx  eax,ax
c0009b6b:	83 f8 5f             	cmp    eax,0x5f
c0009b6e:	76 04                	jbe    c0009b74 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b70:	b0 20                	mov    al,0x20
c0009b72:	eb 02                	jmp    c0009b76 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b74:	b0 00                	mov    al,0x0
c0009b76:	89 d1                	mov    ecx,edx
c0009b78:	29 c1                	sub    ecx,eax
c0009b7a:	89 c8                	mov    eax,ecx
c0009b7c:	83 e8 40             	sub    eax,0x40
c0009b7f:	0f b6 c0             	movzx  eax,al
c0009b82:	83 ec 0c             	sub    esp,0xc
c0009b85:	50                   	push   eax
c0009b86:	e8 93 fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b8b:	83 c4 10             	add    esp,0x10
c0009b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b91:	0f b7 c0             	movzx  eax,ax
c0009b94:	3d 00 03 00 00       	cmp    eax,0x300
c0009b99:	75 12                	jne    c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b9b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b9e:	83 f0 01             	xor    eax,0x1
c0009ba1:	0f b6 c0             	movzx  eax,al
c0009ba4:	85 c0                	test   eax,eax
c0009ba6:	74 05                	je     c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009ba8:	e8 c0 74 00 00       	call   c001106d <doTerminalCycle()>
c0009bad:	90                   	nop
c0009bae:	c9                   	leave  
c0009baf:	c3                   	ret    

c0009bb0 <clearInternalKeybuffer(VgaText*)>:
c0009bb0:	55                   	push   ebp
c0009bb1:	89 e5                	mov    ebp,esp
c0009bb3:	83 ec 08             	sub    esp,0x8
c0009bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bb9:	05 02 01 00 00       	add    eax,0x102
c0009bbe:	83 ec 0c             	sub    esp,0xc
c0009bc1:	50                   	push   eax
c0009bc2:	e8 a9 69 ff ff       	call   c0000570 <strlen>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009bcd:	81 c2 02 01 00 00    	add    edx,0x102
c0009bd3:	83 ec 04             	sub    esp,0x4
c0009bd6:	50                   	push   eax
c0009bd7:	6a 00                	push   0x0
c0009bd9:	52                   	push   edx
c0009bda:	e8 11 69 ff ff       	call   c00004f0 <memset>
c0009bdf:	83 c4 10             	add    esp,0x10
c0009be2:	90                   	nop
c0009be3:	c9                   	leave  
c0009be4:	c3                   	ret    

c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009be5:	55                   	push   ebp
c0009be6:	89 e5                	mov    ebp,esp
c0009be8:	83 ec 18             	sub    esp,0x18
c0009beb:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bf0:	85 c0                	test   eax,eax
c0009bf2:	74 2a                	je     c0009c1e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bf4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bfa:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c0009c00:	83 ec 04             	sub    esp,0x4
c0009c03:	68 40 a3 02 c0       	push   0xc002a340
c0009c08:	83 ec 08             	sub    esp,0x8
c0009c0b:	89 e2                	mov    edx,esp
c0009c0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009c10:	89 02                	mov    DWORD PTR [edx],eax
c0009c12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009c15:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009c19:	ff d1                	call   ecx
c0009c1b:	83 c4 10             	add    esp,0x10
c0009c1e:	fb                   	sti    
c0009c1f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009c26:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009c2a:	0f 84 08 01 00 00    	je     c0009d38 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c33:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c39:	0f be c0             	movsx  eax,al
c0009c3c:	85 c0                	test   eax,eax
c0009c3e:	75 27                	jne    c0009c67 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c40:	fa                   	cli    
c0009c41:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c46:	83 c0 01             	add    eax,0x1
c0009c49:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009c4e:	e8 3d be 00 00       	call   c0015a90 <schedule()>
c0009c53:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009c5b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c60:	85 c0                	test   eax,eax
c0009c62:	75 cc                	jne    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c64:	fb                   	sti    
c0009c65:	eb c9                	jmp    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0009c6d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c73:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c79:	88 10                	mov    BYTE PTR [eax],dl
c0009c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c7e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c84:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c87:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8b:	83 f8 03             	cmp    eax,0x3
c0009c8e:	75 1e                	jne    c0009cae <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca0:	83 ec 08             	sub    esp,0x8
c0009ca3:	6a 02                	push   0x2
c0009ca5:	50                   	push   eax
c0009ca6:	e8 10 63 00 00       	call   c000ffbb <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cb2:	83 f8 1c             	cmp    eax,0x1c
c0009cb5:	75 1e                	jne    c0009cd5 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009cb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cc1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cc7:	83 ec 08             	sub    esp,0x8
c0009cca:	6a 09                	push   0x9
c0009ccc:	50                   	push   eax
c0009ccd:	e8 e9 62 00 00       	call   c000ffbb <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cd2:	83 c4 10             	add    esp,0x10
c0009cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cd8:	05 02 01 00 00       	add    eax,0x102
c0009cdd:	83 ec 0c             	sub    esp,0xc
c0009ce0:	50                   	push   eax
c0009ce1:	e8 8a 68 ff ff       	call   c0000570 <strlen>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cec:	81 c2 02 01 00 00    	add    edx,0x102
c0009cf2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cf5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cf8:	81 c2 02 01 00 00    	add    edx,0x102
c0009cfe:	83 ec 04             	sub    esp,0x4
c0009d01:	50                   	push   eax
c0009d02:	51                   	push   ecx
c0009d03:	52                   	push   edx
c0009d04:	e8 c7 66 ff ff       	call   c00003d0 <memmove>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009d10:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d14:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d18:	83 f8 0a             	cmp    eax,0xa
c0009d1b:	74 16                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d1d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d21:	83 f8 03             	cmp    eax,0x3
c0009d24:	74 0d                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d26:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d2a:	83 f8 1c             	cmp    eax,0x1c
c0009d2d:	0f 85 f3 fe ff ff    	jne    c0009c26 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d36:	eb 03                	jmp    c0009d3b <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d3b:	c9                   	leave  
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Keyboard::Keyboard(char const*)>:
c0009d3e:	83 ec 0c             	sub    esp,0xc
c0009d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d45:	83 ec 08             	sub    esp,0x8
c0009d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4c:	50                   	push   eax
c0009d4d:	e8 a2 f4 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009d52:	83 c4 10             	add    esp,0x10
c0009d55:	ba 84 20 02 c0       	mov    edx,0xc0022084
c0009d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5e:	89 10                	mov    DWORD PTR [eax],edx
c0009d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d64:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d6e:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d75:	90                   	nop
c0009d76:	83 c4 0c             	add    esp,0xc
c0009d79:	c3                   	ret    

c0009d7a <Keyboard::~Keyboard()>:
c0009d7a:	83 ec 0c             	sub    esp,0xc
c0009d7d:	ba 84 20 02 c0       	mov    edx,0xc0022084
c0009d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d86:	89 10                	mov    DWORD PTR [eax],edx
c0009d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	50                   	push   eax
c0009d90:	e8 ff f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	90                   	nop
c0009d99:	83 c4 0c             	add    esp,0xc
c0009d9c:	c3                   	ret    
c0009d9d:	90                   	nop

c0009d9e <Keyboard::~Keyboard()>:
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	83 ec 0c             	sub    esp,0xc
c0009da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da8:	e8 cd ff ff ff       	call   c0009d7a <Keyboard::~Keyboard()>
c0009dad:	83 c4 10             	add    esp,0x10
c0009db0:	83 ec 08             	sub    esp,0x8
c0009db3:	68 5c 01 00 00       	push   0x15c
c0009db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dbc:	e8 df 2a 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0009dc1:	83 c4 10             	add    esp,0x10
c0009dc4:	83 c4 0c             	add    esp,0xc
c0009dc7:	c3                   	ret    

c0009dc8 <LogicalDisk::close(int, int, void*)>:
c0009dc8:	83 c8 ff             	or     eax,0xffffffff
c0009dcb:	c3                   	ret    

c0009dcc <LogicalDisk::~LogicalDisk()>:
c0009dcc:	83 ec 0c             	sub    esp,0xc
c0009dcf:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c0009dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd8:	89 10                	mov    DWORD PTR [eax],edx
c0009dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	50                   	push   eax
c0009de2:	e8 ad f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	90                   	nop
c0009deb:	83 c4 0c             	add    esp,0xc
c0009dee:	c3                   	ret    
c0009def:	90                   	nop

c0009df0 <LogicalDisk::~LogicalDisk()>:
c0009df0:	83 ec 0c             	sub    esp,0xc
c0009df3:	83 ec 0c             	sub    esp,0xc
c0009df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfa:	e8 cd ff ff ff       	call   c0009dcc <LogicalDisk::~LogicalDisk()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	83 ec 08             	sub    esp,0x8
c0009e05:	68 78 01 00 00       	push   0x178
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 8d 2a 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	83 c4 0c             	add    esp,0xc
c0009e19:	c3                   	ret    

c0009e1a <LogicalDisk::open(int, int, void*)>:
c0009e1a:	83 ec 18             	sub    esp,0x18
c0009e1d:	68 b0 20 02 c0       	push   0xc00220b0
c0009e22:	e8 4b 50 00 00       	call   c000ee72 <KePanic(char const*)>
c0009e27:	83 c8 ff             	or     eax,0xffffffff
c0009e2a:	83 c4 1c             	add    esp,0x1c
c0009e2d:	c3                   	ret    

c0009e2e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e2e:	53                   	push   ebx
c0009e2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e3b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e41:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e47:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e4d:	77 10                	ja     c0009e5f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e4f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e55:	89 d3                	mov    ebx,edx
c0009e57:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e5d:	72 05                	jb     c0009e64 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e5f:	83 c8 ff             	or     eax,0xffffffff
c0009e62:	89 c2                	mov    edx,eax
c0009e64:	5b                   	pop    ebx
c0009e65:	c3                   	ret    

c0009e66 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e66:	56                   	push   esi
c0009e67:	83 c8 ff             	or     eax,0xffffffff
c0009e6a:	53                   	push   ebx
c0009e6b:	89 c2                	mov    edx,eax
c0009e6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e71:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e79:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e7f:	77 27                	ja     c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e81:	89 d8                	mov    eax,ebx
c0009e83:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e89:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e94:	89 c2                	mov    edx,eax
c0009e96:	73 10                	jae    c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e98:	89 c8                	mov    eax,ecx
c0009e9a:	89 da                	mov    edx,ebx
c0009e9c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009ea2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009ea8:	5b                   	pop    ebx
c0009ea9:	5e                   	pop    esi
c0009eaa:	c3                   	ret    
c0009eab:	90                   	nop

c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009eac:	83 ec 1c             	sub    esp,0x1c
c0009eaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009eb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ebf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ec6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed2:	83 ec 08             	sub    esp,0x8
c0009ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ed9:	50                   	push   eax
c0009eda:	e8 15 f3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c0009ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eeb:	89 10                	mov    DWORD PTR [eax],edx
c0009eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f07:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f12:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f28:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f2e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f34:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f3f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f45:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f53:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f5d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f67:	90                   	nop
c0009f68:	83 c4 1c             	add    esp,0x1c
c0009f6b:	c3                   	ret    

c0009f6c <LogicalDisk::assignDriveLetter()>:
c0009f6c:	55                   	push   ebp
c0009f6d:	57                   	push   edi
c0009f6e:	56                   	push   esi
c0009f6f:	53                   	push   ebx
c0009f70:	83 ec 14             	sub    esp,0x14
c0009f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f77:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f7d:	b0 41                	mov    al,0x41
c0009f7f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f85:	84 d2                	test   dl,dl
c0009f87:	75 02                	jne    c0009f8b <LogicalDisk::assignDriveLetter()+0x1f>
c0009f89:	b0 43                	mov    al,0x43
c0009f8b:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f91:	0f b6 ca             	movzx  ecx,dl
c0009f94:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f98:	0f be e8             	movsx  ebp,al
c0009f9b:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009fa1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009fa5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009fa9:	3c 43                	cmp    al,0x43
c0009fab:	75 10                	jne    c0009fbd <LogicalDisk::assignDriveLetter()+0x51>
c0009fad:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fb4:	75 5a                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fbb:	75 53                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fbd:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fc0:	ba 01 00 00 00       	mov    edx,0x1
c0009fc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fc8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fcb:	d3 e2                	shl    edx,cl
c0009fcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd1:	89 d7                	mov    edi,edx
c0009fd3:	89 d6                	mov    esi,edx
c0009fd5:	c1 ff 1f             	sar    edi,0x1f
c0009fd8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fdc:	21 f9                	and    ecx,edi
c0009fde:	09 d1                	or     ecx,edx
c0009fe0:	75 2e                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fe2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fe6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fea:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009ff0:	09 f2                	or     edx,esi
c0009ff2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009ff5:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009ffb:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c000a002:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a006:	09 fa                	or     edx,edi
c000a008:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c000a00e:	eb 0d                	jmp    c000a01d <LogicalDisk::assignDriveLetter()+0xb1>
c000a010:	8d 50 01             	lea    edx,[eax+0x1]
c000a013:	45                   	inc    ebp
c000a014:	88 d0                	mov    al,dl
c000a016:	80 fa 5b             	cmp    dl,0x5b
c000a019:	75 8e                	jne    c0009fa9 <LogicalDisk::assignDriveLetter()+0x3d>
c000a01b:	31 c0                	xor    eax,eax
c000a01d:	83 c4 14             	add    esp,0x14
c000a020:	5b                   	pop    ebx
c000a021:	5e                   	pop    esi
c000a022:	5f                   	pop    edi
c000a023:	5d                   	pop    ebp
c000a024:	c3                   	ret    
c000a025:	90                   	nop

c000a026 <LogicalDisk::mount()>:
c000a026:	56                   	push   esi
c000a027:	53                   	push   ebx
c000a028:	53                   	push   ebx
c000a029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a02d:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a033:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a03d:	85 db                	test   ebx,ebx
c000a03f:	74 27                	je     c000a068 <LogicalDisk::mount()+0x42>
c000a041:	51                   	push   ecx
c000a042:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a049:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a04b:	83 e8 41             	sub    eax,0x41
c000a04e:	50                   	push   eax
c000a04f:	56                   	push   esi
c000a050:	53                   	push   ebx
c000a051:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a054:	83 c4 10             	add    esp,0x10
c000a057:	84 c0                	test   al,al
c000a059:	74 08                	je     c000a063 <LogicalDisk::mount()+0x3d>
c000a05b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a061:	eb 07                	jmp    c000a06a <LogicalDisk::mount()+0x44>
c000a063:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a066:	eb d5                	jmp    c000a03d <LogicalDisk::mount()+0x17>
c000a068:	31 c0                	xor    eax,eax
c000a06a:	5a                   	pop    edx
c000a06b:	5b                   	pop    ebx
c000a06c:	5e                   	pop    esi
c000a06d:	c3                   	ret    

c000a06e <LogicalDisk::unmount()>:
c000a06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a072:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a07c:	c3                   	ret    
c000a07d:	90                   	nop

c000a07e <LogicalDisk::eject()>:
c000a07e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a082:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a088:	8b 10                	mov    edx,DWORD PTR [eax]
c000a08a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a08e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a091:	90                   	nop

c000a092 <LogicalDisk::unassignDriveLetter()>:
c000a092:	57                   	push   edi
c000a093:	56                   	push   esi
c000a094:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a098:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a09f:	85 c9                	test   ecx,ecx
c000a0a1:	75 0f                	jne    c000a0b2 <LogicalDisk::unassignDriveLetter()+0x20>
c000a0a3:	c7 44 24 0c d4 20 02 c0 	mov    DWORD PTR [esp+0xc],0xc00220d4
c000a0ab:	5e                   	pop    esi
c000a0ac:	5f                   	pop    edi
c000a0ad:	e9 c0 4d 00 00       	jmp    c000ee72 <KePanic(char const*)>
c000a0b2:	83 e9 41             	sub    ecx,0x41
c000a0b5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0bc:	b8 01 00 00 00       	mov    eax,0x1
c000a0c1:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a0cc:	d3 e0                	shl    eax,cl
c000a0ce:	89 c7                	mov    edi,eax
c000a0d0:	f7 d0                	not    eax
c000a0d2:	c1 ff 1f             	sar    edi,0x1f
c000a0d5:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0db:	89 fe                	mov    esi,edi
c000a0dd:	f7 d6                	not    esi
c000a0df:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0e5:	5e                   	pop    esi
c000a0e6:	5f                   	pop    edi
c000a0e7:	c3                   	ret    

c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0e8:	57                   	push   edi
c000a0e9:	56                   	push   esi
c000a0ea:	53                   	push   ebx
c000a0eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a101:	77 41                	ja     c000a144 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a103:	99                   	cdq    
c000a104:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a10a:	01 c8                	add    eax,ecx
c000a10c:	11 da                	adc    edx,ebx
c000a10e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a114:	19 d7                	sbb    edi,edx
c000a116:	72 33                	jb     c000a14b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a118:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a11e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a128:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a12c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a132:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a138:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a13c:	5b                   	pop    ebx
c000a13d:	5e                   	pop    esi
c000a13e:	5f                   	pop    edi
c000a13f:	e9 76 0b 00 00       	jmp    c000acba <VCache::read(unsigned long long, int, void*)>
c000a144:	b8 05 00 00 00       	mov    eax,0x5
c000a149:	eb 05                	jmp    c000a150 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a14b:	b8 07 00 00 00       	mov    eax,0x7
c000a150:	5b                   	pop    ebx
c000a151:	5e                   	pop    esi
c000a152:	5f                   	pop    edi
c000a153:	c3                   	ret    

c000a154 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a154:	57                   	push   edi
c000a155:	56                   	push   esi
c000a156:	53                   	push   ebx
c000a157:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a15b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a15f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a167:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a16d:	77 41                	ja     c000a1b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a16f:	99                   	cdq    
c000a170:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a176:	01 c8                	add    eax,ecx
c000a178:	11 da                	adc    edx,ebx
c000a17a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a180:	19 d7                	sbb    edi,edx
c000a182:	72 33                	jb     c000a1b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a184:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a18a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a190:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a194:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a198:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a19e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a1a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1a8:	5b                   	pop    ebx
c000a1a9:	5e                   	pop    esi
c000a1aa:	5f                   	pop    edi
c000a1ab:	e9 3c 09 00 00       	jmp    c000aaec <VCache::write(unsigned long long, int, void*)>
c000a1b0:	b8 05 00 00 00       	mov    eax,0x5
c000a1b5:	eb 05                	jmp    c000a1bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1b7:	b8 07 00 00 00       	mov    eax,0x7
c000a1bc:	5b                   	pop    ebx
c000a1bd:	5e                   	pop    esi
c000a1be:	5f                   	pop    edi
c000a1bf:	c3                   	ret    

c000a1c0 <Mouse::Mouse(char const*)>:
c000a1c0:	83 ec 0c             	sub    esp,0xc
c000a1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c7:	83 ec 08             	sub    esp,0x8
c000a1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ce:	50                   	push   eax
c000a1cf:	e8 20 f0 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	ba 28 21 02 c0       	mov    edx,0xc0022128
c000a1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e0:	89 10                	mov    DWORD PTR [eax],edx
c000a1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1f0:	90                   	nop
c000a1f1:	83 c4 0c             	add    esp,0xc
c000a1f4:	c3                   	ret    
c000a1f5:	90                   	nop
c000a1f6:	66 90                	xchg   ax,ax

c000a1f8 <Mouse::~Mouse()>:
c000a1f8:	83 ec 0c             	sub    esp,0xc
c000a1fb:	ba 28 21 02 c0       	mov    edx,0xc0022128
c000a200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a204:	89 10                	mov    DWORD PTR [eax],edx
c000a206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20a:	83 ec 0c             	sub    esp,0xc
c000a20d:	50                   	push   eax
c000a20e:	e8 81 ed ff ff       	call   c0008f94 <Device::~Device()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	90                   	nop
c000a217:	83 c4 0c             	add    esp,0xc
c000a21a:	c3                   	ret    
c000a21b:	90                   	nop

c000a21c <Mouse::~Mouse()>:
c000a21c:	83 ec 0c             	sub    esp,0xc
c000a21f:	83 ec 0c             	sub    esp,0xc
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	e8 cd ff ff ff       	call   c000a1f8 <Mouse::~Mouse()>
c000a22b:	83 c4 10             	add    esp,0x10
c000a22e:	83 ec 08             	sub    esp,0x8
c000a231:	68 58 01 00 00       	push   0x158
c000a236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a23a:	e8 61 26 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	83 c4 0c             	add    esp,0xc
c000a245:	c3                   	ret    

c000a246 <NIC::getMAC()>:
c000a246:	31 c0                	xor    eax,eax
c000a248:	31 d2                	xor    edx,edx
c000a24a:	c3                   	ret    
c000a24b:	90                   	nop

c000a24c <NIC::write(int, unsigned char*, int*)>:
c000a24c:	b8 01 00 00 00       	mov    eax,0x1
c000a251:	c3                   	ret    

c000a252 <NIC::NIC(char const*)>:
c000a252:	83 ec 0c             	sub    esp,0xc
c000a255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a259:	83 ec 08             	sub    esp,0x8
c000a25c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a260:	50                   	push   eax
c000a261:	e8 8e ef ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a266:	83 c4 10             	add    esp,0x10
c000a269:	ba 54 21 02 c0       	mov    edx,0xc0022154
c000a26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a272:	89 10                	mov    DWORD PTR [eax],edx
c000a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a278:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a282:	90                   	nop
c000a283:	83 c4 0c             	add    esp,0xc
c000a286:	c3                   	ret    
c000a287:	90                   	nop

c000a288 <NIC::~NIC()>:
c000a288:	83 ec 0c             	sub    esp,0xc
c000a28b:	ba 54 21 02 c0       	mov    edx,0xc0022154
c000a290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a294:	89 10                	mov    DWORD PTR [eax],edx
c000a296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a29a:	83 ec 0c             	sub    esp,0xc
c000a29d:	50                   	push   eax
c000a29e:	e8 f1 ec ff ff       	call   c0008f94 <Device::~Device()>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	90                   	nop
c000a2a7:	83 c4 0c             	add    esp,0xc
c000a2aa:	c3                   	ret    
c000a2ab:	90                   	nop

c000a2ac <NIC::~NIC()>:
c000a2ac:	83 ec 0c             	sub    esp,0xc
c000a2af:	83 ec 0c             	sub    esp,0xc
c000a2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b6:	e8 cd ff ff ff       	call   c000a288 <NIC::~NIC()>
c000a2bb:	83 c4 10             	add    esp,0x10
c000a2be:	83 ec 08             	sub    esp,0x8
c000a2c1:	68 58 01 00 00       	push   0x158
c000a2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ca:	e8 d1 25 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	83 c4 0c             	add    esp,0xc
c000a2d5:	c3                   	ret    

c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2d6:	55                   	push   ebp
c000a2d7:	57                   	push   edi
c000a2d8:	56                   	push   esi
c000a2d9:	53                   	push   ebx
c000a2da:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2e0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2e7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2ee:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2f5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a300:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a304:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a30b:	e8 e0 ef ff ff       	call   c00092f0 <Device::getName()>
c000a310:	5a                   	pop    edx
c000a311:	59                   	pop    ecx
c000a312:	50                   	push   eax
c000a313:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a317:	55                   	push   ebp
c000a318:	e8 23 63 ff ff       	call   c0000640 <strcpy>
c000a31d:	5b                   	pop    ebx
c000a31e:	58                   	pop    eax
c000a31f:	68 80 21 02 c0       	push   0xc0022180
c000a324:	55                   	push   ebp
c000a325:	e8 16 65 ff ff       	call   c0000840 <strcat>
c000a32a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a331:	e8 f5 47 00 00       	call   c000eb2b <malloc>
c000a336:	83 c4 0c             	add    esp,0xc
c000a339:	89 c3                	mov    ebx,eax
c000a33b:	57                   	push   edi
c000a33c:	56                   	push   esi
c000a33d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a341:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a345:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a34c:	55                   	push   ebp
c000a34d:	50                   	push   eax
c000a34e:	e8 59 fb ff ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a353:	83 c4 14             	add    esp,0x14
c000a356:	53                   	push   ebx
c000a357:	e8 10 fc ff ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c000a35c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a35f:	e8 c2 fc ff ff       	call   c000a026 <LogicalDisk::mount()>
c000a364:	58                   	pop    eax
c000a365:	5a                   	pop    edx
c000a366:	53                   	push   ebx
c000a367:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a36e:	e8 1f ed ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a373:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a379:	5b                   	pop    ebx
c000a37a:	5e                   	pop    esi
c000a37b:	5f                   	pop    edi
c000a37c:	5d                   	pop    ebp
c000a37d:	c3                   	ret    

c000a37e <createPartitionsForDisk(PhysicalDisk*)>:
c000a37e:	55                   	push   ebp
c000a37f:	57                   	push   edi
c000a380:	56                   	push   esi
c000a381:	53                   	push   ebx
c000a382:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a388:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a38f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a395:	3d 00 02 00 00       	cmp    eax,0x200
c000a39a:	74 27                	je     c000a3c3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a39c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a3a2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a3a8:	83 ec 10             	sub    esp,0x10
c000a3ab:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3af:	99                   	cdq    
c000a3b0:	c1 e6 0a             	shl    esi,0xa
c000a3b3:	52                   	push   edx
c000a3b4:	89 fd                	mov    ebp,edi
c000a3b6:	50                   	push   eax
c000a3b7:	55                   	push   ebp
c000a3b8:	56                   	push   esi
c000a3b9:	e8 06 60 01 00       	call   c00203c4 <__udivdi3>
c000a3be:	e9 b9 00 00 00       	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3c3:	83 ec 0c             	sub    esp,0xc
c000a3c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3c8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3cc:	56                   	push   esi
c000a3cd:	6a 01                	push   0x1
c000a3cf:	6a 00                	push   0x0
c000a3d1:	6a 00                	push   0x0
c000a3d3:	53                   	push   ebx
c000a3d4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3d7:	83 c4 20             	add    esp,0x20
c000a3da:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3e2:	75 0a                	jne    c000a3ee <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3e4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3ec:	74 2c                	je     c000a41a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3ee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3f4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a400:	83 ec 10             	sub    esp,0x10
c000a403:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a407:	89 f7                	mov    edi,esi
c000a409:	c1 e0 0a             	shl    eax,0xa
c000a40c:	c1 ff 1f             	sar    edi,0x1f
c000a40f:	57                   	push   edi
c000a410:	56                   	push   esi
c000a411:	52                   	push   edx
c000a412:	50                   	push   eax
c000a413:	e8 ac 5f 01 00       	call   c00203c4 <__udivdi3>
c000a418:	eb 62                	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a41a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a421:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a428:	89 cf                	mov    edi,ecx
c000a42a:	83 e2 7f             	and    edx,0x7f
c000a42d:	83 e7 7f             	and    edi,0x7f
c000a430:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a437:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a43a:	83 e0 7f             	and    eax,0x7f
c000a43d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a440:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a447:	83 e0 7f             	and    eax,0x7f
c000a44a:	01 d0                	add    eax,edx
c000a44c:	89 c5                	mov    ebp,eax
c000a44e:	84 c0                	test   al,al
c000a450:	74 41                	je     c000a493 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a452:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a458:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a45e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a464:	83 ec 10             	sub    esp,0x10
c000a467:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a46b:	89 f7                	mov    edi,esi
c000a46d:	c1 e0 0a             	shl    eax,0xa
c000a470:	c1 ff 1f             	sar    edi,0x1f
c000a473:	57                   	push   edi
c000a474:	56                   	push   esi
c000a475:	52                   	push   edx
c000a476:	50                   	push   eax
c000a477:	e8 48 5f 01 00       	call   c00203c4 <__udivdi3>
c000a47c:	83 c4 14             	add    esp,0x14
c000a47f:	52                   	push   edx
c000a480:	50                   	push   eax
c000a481:	6a 00                	push   0x0
c000a483:	6a 00                	push   0x0
c000a485:	53                   	push   ebx
c000a486:	e8 4b fe ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a48b:	83 c4 20             	add    esp,0x20
c000a48e:	e9 73 01 00 00       	jmp    c000a606 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a493:	89 f0                	mov    eax,esi
c000a495:	31 c9                	xor    ecx,ecx
c000a497:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a49e:	75 02                	jne    c000a4a2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a4a0:	89 cd                	mov    ebp,ecx
c000a4a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a4a9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a4b0:	c1 e2 08             	shl    edx,0x8
c000a4b3:	c1 e6 10             	shl    esi,0x10
c000a4b6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4be:	09 f2                	or     edx,esi
c000a4c0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4c8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a4cf:	83 c0 10             	add    eax,0x10
c000a4d2:	09 f2                	or     edx,esi
c000a4d4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4db:	c1 e6 18             	shl    esi,0x18
c000a4de:	09 f2                	or     edx,esi
c000a4e0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4e7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4eb:	c1 e6 10             	shl    esi,0x10
c000a4ee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4f5:	c1 e2 08             	shl    edx,0x8
c000a4f8:	09 f2                	or     edx,esi
c000a4fa:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a501:	09 f2                	or     edx,esi
c000a503:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a50a:	c1 e6 18             	shl    esi,0x18
c000a50d:	09 f2                	or     edx,esi
c000a50f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a513:	41                   	inc    ecx
c000a514:	83 f9 04             	cmp    ecx,0x4
c000a517:	0f 85 7a ff ff ff    	jne    c000a497 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a521:	83 f0 01             	xor    eax,0x1
c000a524:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a528:	75 4f                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a52e:	83 f0 01             	xor    eax,0x1
c000a531:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a535:	75 42                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a537:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a53f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a547:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a54d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a553:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a559:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a55d:	89 f7                	mov    edi,esi
c000a55f:	c1 e0 0a             	shl    eax,0xa
c000a562:	c1 ff 1f             	sar    edi,0x1f
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	52                   	push   edx
c000a568:	50                   	push   eax
c000a569:	e8 56 5e 01 00       	call   c00203c4 <__udivdi3>
c000a56e:	83 c4 10             	add    esp,0x10
c000a571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a575:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a579:	89 e8                	mov    eax,ebp
c000a57b:	0f b6 e8             	movzx  ebp,al
c000a57e:	85 ed                	test   ebp,ebp
c000a580:	74 50                	je     c000a5d2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a586:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a58a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a58e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a592:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a596:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a59a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a59e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5ae:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5b2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5b6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5ba:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5c2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5c6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5ca:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5ce:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5d2:	31 ed                	xor    ebp,ebp
c000a5d4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5d8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5dc:	89 f8                	mov    eax,edi
c000a5de:	09 f0                	or     eax,esi
c000a5e0:	74 1e                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5e6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ea:	89 d1                	mov    ecx,edx
c000a5ec:	09 c1                	or     ecx,eax
c000a5ee:	74 10                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5f0:	83 ec 0c             	sub    esp,0xc
c000a5f3:	57                   	push   edi
c000a5f4:	56                   	push   esi
c000a5f5:	52                   	push   edx
c000a5f6:	50                   	push   eax
c000a5f7:	53                   	push   ebx
c000a5f8:	e8 d9 fc ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5fd:	83 c4 20             	add    esp,0x20
c000a600:	45                   	inc    ebp
c000a601:	83 fd 04             	cmp    ebp,0x4
c000a604:	75 ce                	jne    c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a606:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a60c:	5b                   	pop    ebx
c000a60d:	5e                   	pop    esi
c000a60e:	5f                   	pop    edi
c000a60f:	5d                   	pop    ebp
c000a610:	c3                   	ret    
c000a611:	66 90                	xchg   ax,ax
c000a613:	90                   	nop

c000a614 <Serial::Serial(char const*)>:
c000a614:	83 ec 0c             	sub    esp,0xc
c000a617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61b:	83 ec 08             	sub    esp,0x8
c000a61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a622:	50                   	push   eax
c000a623:	e8 cc eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a628:	83 c4 10             	add    esp,0x10
c000a62b:	ba 94 21 02 c0       	mov    edx,0xc0022194
c000a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a634:	89 10                	mov    DWORD PTR [eax],edx
c000a636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a63a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a644:	90                   	nop
c000a645:	83 c4 0c             	add    esp,0xc
c000a648:	c3                   	ret    
c000a649:	90                   	nop
c000a64a:	66 90                	xchg   ax,ax

c000a64c <Serial::~Serial()>:
c000a64c:	83 ec 0c             	sub    esp,0xc
c000a64f:	ba 94 21 02 c0       	mov    edx,0xc0022194
c000a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a658:	89 10                	mov    DWORD PTR [eax],edx
c000a65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a65e:	83 ec 0c             	sub    esp,0xc
c000a661:	50                   	push   eax
c000a662:	e8 2d e9 ff ff       	call   c0008f94 <Device::~Device()>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	90                   	nop
c000a66b:	83 c4 0c             	add    esp,0xc
c000a66e:	c3                   	ret    
c000a66f:	90                   	nop

c000a670 <Serial::~Serial()>:
c000a670:	83 ec 0c             	sub    esp,0xc
c000a673:	83 ec 0c             	sub    esp,0xc
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	e8 cd ff ff ff       	call   c000a64c <Serial::~Serial()>
c000a67f:	83 c4 10             	add    esp,0x10
c000a682:	83 ec 08             	sub    esp,0x8
c000a685:	68 58 01 00 00       	push   0x158
c000a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a68e:	e8 0d 22 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	83 c4 0c             	add    esp,0xc
c000a699:	c3                   	ret    
c000a69a:	66 90                	xchg   ax,ax

c000a69c <Timer::Timer(char const*)>:
c000a69c:	83 ec 0c             	sub    esp,0xc
c000a69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a3:	83 ec 08             	sub    esp,0x8
c000a6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6aa:	50                   	push   eax
c000a6ab:	e8 44 eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a6b0:	83 c4 10             	add    esp,0x10
c000a6b3:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c000a6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6bc:	89 10                	mov    DWORD PTR [eax],edx
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6cc:	90                   	nop
c000a6cd:	83 c4 0c             	add    esp,0xc
c000a6d0:	c3                   	ret    
c000a6d1:	90                   	nop
c000a6d2:	66 90                	xchg   ax,ax

c000a6d4 <Timer::~Timer()>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c000a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e0:	89 10                	mov    DWORD PTR [eax],edx
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	83 ec 0c             	sub    esp,0xc
c000a6e9:	50                   	push   eax
c000a6ea:	e8 a5 e8 ff ff       	call   c0008f94 <Device::~Device()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	90                   	nop
c000a6f3:	83 c4 0c             	add    esp,0xc
c000a6f6:	c3                   	ret    
c000a6f7:	90                   	nop

c000a6f8 <Timer::~Timer()>:
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a702:	e8 cd ff ff ff       	call   c000a6d4 <Timer::~Timer()>
c000a707:	83 c4 10             	add    esp,0x10
c000a70a:	83 ec 08             	sub    esp,0x8
c000a70d:	68 5c 01 00 00       	push   0x15c
c000a712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a716:	e8 85 21 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	83 c4 0c             	add    esp,0xc
c000a721:	c3                   	ret    

c000a722 <Timer::read()>:
c000a722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a726:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a72c:	c3                   	ret    

c000a72d <setupTimer(int)>:
c000a72d:	53                   	push   ebx
c000a72e:	83 ec 14             	sub    esp,0x14
c000a731:	68 5c 01 00 00       	push   0x15c
c000a736:	e8 f0 43 00 00       	call   c000eb2b <malloc>
c000a73b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	e8 ff 54 01 00       	call   c001fc44 <PIT::PIT()>
c000a745:	58                   	pop    eax
c000a746:	5a                   	pop    edx
c000a747:	53                   	push   ebx
c000a748:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a74e:	e8 3f e9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a753:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a755:	6a 00                	push   0x0
c000a757:	6a 00                	push   0x0
c000a759:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a75d:	53                   	push   ebx
c000a75e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a761:	89 d8                	mov    eax,ebx
c000a763:	83 c4 28             	add    esp,0x28
c000a766:	5b                   	pop    ebx
c000a767:	c3                   	ret    

c000a768 <timerHandler(unsigned int)>:
c000a768:	57                   	push   edi
c000a769:	56                   	push   esi
c000a76a:	53                   	push   ebx
c000a76b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a76f:	83 ec 0c             	sub    esp,0xc
c000a772:	01 35 ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,esi
c000a778:	68 23 22 02 c0       	push   0xc0022223
c000a77d:	e8 e2 c7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a78c:	75 12                	jne    c000a7a0 <timerHandler(unsigned int)+0x38>
c000a78e:	c7 44 24 10 2b 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc002222b
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	e9 c6 c7 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000a79e:	66 90                	xchg   ax,ax
c000a7a0:	fa                   	cli    
c000a7a1:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000a7a7:	83 ec 0c             	sub    esp,0xc
c000a7aa:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7af:	e8 a8 5f 01 00       	call   c002075c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7b4:	83 c4 10             	add    esp,0x10
c000a7b7:	84 c0                	test   al,al
c000a7b9:	0f 85 a1 00 00 00    	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a7bf:	83 ec 0c             	sub    esp,0xc
c000a7c2:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7c7:	e8 ac 5f 01 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	89 c7                	mov    edi,eax
c000a7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7d4:	83 ec 0c             	sub    esp,0xc
c000a7d7:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7dc:	e8 97 5f 01 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7e1:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a7e8:	89 c3                	mov    ebx,eax
c000a7ea:	e8 91 5f 01 00       	call   c0020780 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7fb:	77 23                	ja     c000a820 <timerHandler(unsigned int)+0xb8>
c000a7fd:	83 ec 0c             	sub    esp,0xc
c000a800:	53                   	push   ebx
c000a801:	e8 9a b5 00 00       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	39 df                	cmp    edi,ebx
c000a80b:	75 27                	jne    c000a834 <timerHandler(unsigned int)+0xcc>
c000a80d:	83 ec 0c             	sub    esp,0xc
c000a810:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a815:	e8 5e 5f 01 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a81a:	89 c7                	mov    edi,eax
c000a81c:	eb 12                	jmp    c000a830 <timerHandler(unsigned int)+0xc8>
c000a81e:	66 90                	xchg   ax,ax
c000a820:	50                   	push   eax
c000a821:	50                   	push   eax
c000a822:	53                   	push   ebx
c000a823:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a828:	e8 0f 60 01 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a82d:	8d 76 00             	lea    esi,[esi+0x0]
c000a830:	83 c4 10             	add    esp,0x10
c000a833:	90                   	nop
c000a834:	83 ec 0c             	sub    esp,0xc
c000a837:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a83c:	e8 1b 5f 01 00       	call   c002075c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a841:	83 c4 10             	add    esp,0x10
c000a844:	84 c0                	test   al,al
c000a846:	75 18                	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a848:	83 ec 0c             	sub    esp,0xc
c000a84b:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a850:	e8 23 5f 01 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a855:	83 c4 10             	add    esp,0x10
c000a858:	39 f8                	cmp    eax,edi
c000a85a:	0f 85 74 ff ff ff    	jne    c000a7d4 <timerHandler(unsigned int)+0x6c>
c000a860:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a866:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a869:	85 c0                	test   eax,eax
c000a86b:	74 1b                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a86d:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a874:	74 12                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a876:	89 c1                	mov    ecx,eax
c000a878:	29 f1                	sub    ecx,esi
c000a87a:	39 f0                	cmp    eax,esi
c000a87c:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000a87f:	77 07                	ja     c000a888 <timerHandler(unsigned int)+0x120>
c000a881:	e8 0a b2 00 00       	call   c0015a90 <schedule()>
c000a886:	66 90                	xchg   ax,ax
c000a888:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000a88f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000a896:	75 04                	jne    c000a89c <timerHandler(unsigned int)+0x134>
c000a898:	fb                   	sti    
c000a899:	8d 76 00             	lea    esi,[esi+0x0]
c000a89c:	5b                   	pop    ebx
c000a89d:	5e                   	pop    esi
c000a89e:	5f                   	pop    edi
c000a89f:	c3                   	ret    

c000a8a0 <VCache::VCache(PhysicalDisk*)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	83 ec 18             	sub    esp,0x18
c000a8a4:	ba bc 22 02 c0       	mov    edx,0xc00222bc
c000a8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ad:	89 10                	mov    DWORD PTR [eax],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8be:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8db:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8e2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ed:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a900:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a907:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a912:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a922:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a931:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a939:	83 ec 0c             	sub    esp,0xc
c000a93c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a940:	e8 e6 41 00 00       	call   c000eb2b <malloc>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 c3                	mov    ebx,eax
c000a94a:	83 ec 0c             	sub    esp,0xc
c000a94d:	53                   	push   ebx
c000a94e:	e8 05 45 00 00       	call   c000ee58 <Mutex::Mutex()>
c000a953:	83 c4 10             	add    esp,0x10
c000a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a961:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a965:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a96c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a973:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a977:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a981:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a984:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a988:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a98e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a994:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a998:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a99b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9b0:	05 00 01 00 00       	add    eax,0x100
c000a9b5:	c1 e0 04             	shl    eax,0x4
c000a9b8:	83 ec 0c             	sub    esp,0xc
c000a9bb:	50                   	push   eax
c000a9bc:	e8 6a 41 00 00       	call   c000eb2b <malloc>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 c2                	mov    edx,eax
c000a9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9d1:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9ea:	89 d0                	mov    eax,edx
c000a9ec:	c1 e0 02             	shl    eax,0x2
c000a9ef:	01 d0                	add    eax,edx
c000a9f1:	c1 e0 04             	shl    eax,0x4
c000a9f4:	83 ec 0c             	sub    esp,0xc
c000a9f7:	50                   	push   eax
c000a9f8:	e8 2e 41 00 00       	call   c000eb2b <malloc>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 c2                	mov    edx,eax
c000aa02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa06:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa09:	90                   	nop
c000aa0a:	83 c4 18             	add    esp,0x18
c000aa0d:	5b                   	pop    ebx
c000aa0e:	c3                   	ret    
c000aa0f:	90                   	nop

c000aa10 <VCache::invalidateReadBuffer()>:
c000aa10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa14:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa1a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa1e:	c3                   	ret    
c000aa1f:	90                   	nop

c000aa20 <VCache::writeWriteBuffer()>:
c000aa20:	53                   	push   ebx
c000aa21:	83 ec 08             	sub    esp,0x8
c000aa24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa28:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa2c:	74 1e                	je     c000aa4c <VCache::writeWriteBuffer()+0x2c>
c000aa2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa31:	83 ec 0c             	sub    esp,0xc
c000aa34:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa3c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa3f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa42:	50                   	push   eax
c000aa43:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa46:	83 c4 20             	add    esp,0x20
c000aa49:	8d 76 00             	lea    esi,[esi+0x0]
c000aa4c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa53:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa5a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa5e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa65:	83 c4 08             	add    esp,0x8
c000aa68:	5b                   	pop    ebx
c000aa69:	c3                   	ret    
c000aa6a:	66 90                	xchg   ax,ax

c000aa6c <VCache::~VCache()>:
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	ba bc 22 02 c0       	mov    edx,0xc00222bc
c000aa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa78:	89 10                	mov    DWORD PTR [eax],edx
c000aa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa81:	0f b6 c0             	movzx  eax,al
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 10                	je     c000aa98 <VCache::~VCache()+0x2c>
c000aa88:	83 ec 0c             	sub    esp,0xc
c000aa8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8f:	e8 8c ff ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000aa94:	83 c4 10             	add    esp,0x10
c000aa97:	90                   	nop
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aa9f:	83 ec 0c             	sub    esp,0xc
c000aaa2:	50                   	push   eax
c000aaa3:	e8 93 40 00 00       	call   c000eb3b <free>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aab2:	83 ec 0c             	sub    esp,0xc
c000aab5:	50                   	push   eax
c000aab6:	e8 80 40 00 00       	call   c000eb3b <free>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	90                   	nop
c000aabf:	83 c4 0c             	add    esp,0xc
c000aac2:	c3                   	ret    
c000aac3:	90                   	nop

c000aac4 <VCache::~VCache()>:
c000aac4:	83 ec 0c             	sub    esp,0xc
c000aac7:	83 ec 0c             	sub    esp,0xc
c000aaca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aace:	e8 99 ff ff ff       	call   c000aa6c <VCache::~VCache()>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	83 ec 08             	sub    esp,0x8
c000aad9:	6a 44                	push   0x44
c000aadb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aadf:	e8 bc 1d 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	83 c4 0c             	add    esp,0xc
c000aaea:	c3                   	ret    
c000aaeb:	90                   	nop

c000aaec <VCache::write(unsigned long long, int, void*)>:
c000aaec:	55                   	push   ebp
c000aaed:	57                   	push   edi
c000aaee:	56                   	push   esi
c000aaef:	53                   	push   ebx
c000aaf0:	83 ec 1c             	sub    esp,0x1c
c000aaf3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aaf7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000aafb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000aaff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab03:	e8 e8 ac 00 00       	call   c00157f0 <KeDisablePreemption()>
c000ab08:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab0d:	50                   	push   eax
c000ab0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab11:	0f af c3             	imul   eax,ebx
c000ab14:	05 ff 0f 00 00       	add    eax,0xfff
c000ab19:	99                   	cdq    
c000ab1a:	f7 f9                	idiv   ecx
c000ab1c:	50                   	push   eax
c000ab1d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab21:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ab27:	e8 8e 84 00 00       	call   c0012fba <VAS::canLockPages(unsigned long, int)>
c000ab2c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ab38:	74 2a                	je     c000ab64 <VCache::write(unsigned long long, int, void*)+0x78>
c000ab3a:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab3f:	50                   	push   eax
c000ab40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab43:	0f af c3             	imul   eax,ebx
c000ab46:	05 ff 0f 00 00       	add    eax,0xfff
c000ab4b:	99                   	cdq    
c000ab4c:	f7 f9                	idiv   ecx
c000ab4e:	50                   	push   eax
c000ab4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab53:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ab59:	e8 56 88 00 00       	call   c00133b4 <VAS::lockPages(unsigned long, int)>
c000ab5e:	83 c4 10             	add    esp,0x10
c000ab61:	8d 76 00             	lea    esi,[esi+0x0]
c000ab64:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000ab68:	74 0e                	je     c000ab78 <VCache::write(unsigned long long, int, void*)+0x8c>
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	55                   	push   ebp
c000ab6e:	e8 9d fe ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	66 90                	xchg   ax,ax
c000ab78:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ab7c:	74 72                	je     c000abf0 <VCache::write(unsigned long long, int, void*)+0x104>
c000ab7e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000ab81:	89 c8                	mov    eax,ecx
c000ab83:	99                   	cdq    
c000ab84:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000ab87:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000ab8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ab96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab9a:	31 f0                	xor    eax,esi
c000ab9c:	31 fa                	xor    edx,edi
c000ab9e:	09 d0                	or     eax,edx
c000aba0:	75 42                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba2:	83 fb 01             	cmp    ebx,0x1
c000aba5:	75 3d                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abaa:	89 cf                	mov    edi,ecx
c000abac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000abb2:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abb6:	0f af f8             	imul   edi,eax
c000abb9:	89 c1                	mov    ecx,eax
c000abbb:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000abbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc0:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000abc3:	40                   	inc    eax
c000abc4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000abc7:	83 f8 50             	cmp    eax,0x50
c000abca:	0f 85 a8 00 00 00    	jne    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abd0:	83 ec 0c             	sub    esp,0xc
c000abd3:	55                   	push   ebp
c000abd4:	e8 47 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abd9:	83 c4 10             	add    esp,0x10
c000abdc:	e9 97 00 00 00       	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abe1:	8d 76 00             	lea    esi,[esi+0x0]
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	55                   	push   ebp
c000abe8:	e8 33 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abf3:	83 fb 4f             	cmp    ebx,0x4f
c000abf6:	7f 20                	jg     c000ac18 <VCache::write(unsigned long long, int, void*)+0x12c>
c000abf8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000abfb:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000abfe:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000ac01:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000ac05:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000ac08:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac0e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ac12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac14:	eb 62                	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ac16:	66 90                	xchg   ax,ax
c000ac18:	83 ec 0c             	sub    esp,0xc
c000ac1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac21:	53                   	push   ebx
c000ac22:	57                   	push   edi
c000ac23:	56                   	push   esi
c000ac24:	50                   	push   eax
c000ac25:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac28:	83 c4 20             	add    esp,0x20
c000ac2b:	89 c6                	mov    esi,eax
c000ac2d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac32:	74 28                	je     c000ac5c <VCache::write(unsigned long long, int, void*)+0x170>
c000ac34:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac39:	52                   	push   edx
c000ac3a:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac3e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac44:	99                   	cdq    
c000ac45:	f7 f9                	idiv   ecx
c000ac47:	50                   	push   eax
c000ac48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac4c:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ac52:	e8 9f 83 00 00       	call   c0012ff6 <VAS::unlockPages(unsigned long, int)>
c000ac57:	83 c4 10             	add    esp,0x10
c000ac5a:	66 90                	xchg   ax,ax
c000ac5c:	e8 b7 ab 00 00       	call   c0015818 <KeRestorePreemption()>
c000ac61:	85 f6                	test   esi,esi
c000ac63:	74 4b                	je     c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac65:	83 ec 0c             	sub    esp,0xc
c000ac68:	68 74 22 02 c0       	push   0xc0022274
c000ac6d:	e8 f2 c2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	eb 39                	jmp    c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac77:	90                   	nop
c000ac78:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac7d:	74 29                	je     c000aca8 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000ac7f:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac84:	50                   	push   eax
c000ac85:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac89:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac8f:	99                   	cdq    
c000ac90:	f7 f9                	idiv   ecx
c000ac92:	50                   	push   eax
c000ac93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac97:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ac9d:	e8 54 83 00 00       	call   c0012ff6 <VAS::unlockPages(unsigned long, int)>
c000aca2:	83 c4 10             	add    esp,0x10
c000aca5:	8d 76 00             	lea    esi,[esi+0x0]
c000aca8:	e8 6b ab 00 00       	call   c0015818 <KeRestorePreemption()>
c000acad:	31 f6                	xor    esi,esi
c000acaf:	90                   	nop
c000acb0:	83 c4 1c             	add    esp,0x1c
c000acb3:	89 f0                	mov    eax,esi
c000acb5:	5b                   	pop    ebx
c000acb6:	5e                   	pop    esi
c000acb7:	5f                   	pop    edi
c000acb8:	5d                   	pop    ebp
c000acb9:	c3                   	ret    

c000acba <VCache::read(unsigned long long, int, void*)>:
c000acba:	55                   	push   ebp
c000acbb:	57                   	push   edi
c000acbc:	bf 00 10 00 00       	mov    edi,0x1000
c000acc1:	56                   	push   esi
c000acc2:	53                   	push   ebx
c000acc3:	83 ec 2c             	sub    esp,0x2c
c000acc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000acca:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000acce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acd2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000acd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acda:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000acde:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ace2:	e8 09 ab 00 00       	call   c00157f0 <KeDisablePreemption()>
c000ace7:	50                   	push   eax
c000ace8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aceb:	0f af c6             	imul   eax,esi
c000acee:	05 ff 0f 00 00       	add    eax,0xfff
c000acf3:	99                   	cdq    
c000acf4:	f7 ff                	idiv   edi
c000acf6:	50                   	push   eax
c000acf7:	55                   	push   ebp
c000acf8:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000acfe:	e8 b7 82 00 00       	call   c0012fba <VAS::canLockPages(unsigned long, int)>
c000ad03:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000ad07:	83 c4 10             	add    esp,0x10
c000ad0a:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000ad0f:	74 1f                	je     c000ad30 <VCache::read(unsigned long long, int, void*)+0x76>
c000ad11:	50                   	push   eax
c000ad12:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad15:	0f af c6             	imul   eax,esi
c000ad18:	05 ff 0f 00 00       	add    eax,0xfff
c000ad1d:	99                   	cdq    
c000ad1e:	f7 ff                	idiv   edi
c000ad20:	50                   	push   eax
c000ad21:	55                   	push   ebp
c000ad22:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ad28:	e8 87 86 00 00       	call   c00133b4 <VAS::lockPages(unsigned long, int)>
c000ad2d:	83 c4 10             	add    esp,0x10
c000ad30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ad34:	74 0e                	je     c000ad44 <VCache::read(unsigned long long, int, void*)+0x8a>
c000ad36:	83 ec 0c             	sub    esp,0xc
c000ad39:	53                   	push   ebx
c000ad3a:	e8 e1 fc ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	66 90                	xchg   ax,ax
c000ad44:	83 fe 01             	cmp    esi,0x1
c000ad47:	0f 85 ef 00 00 00    	jne    c000ae3c <VCache::read(unsigned long long, int, void*)+0x182>
c000ad4d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000ad50:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000ad57:	0f 85 df 00 00 00    	jne    c000ae3c <VCache::read(unsigned long long, int, void*)+0x182>
c000ad5d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ad60:	89 fe                	mov    esi,edi
c000ad62:	f7 de                	neg    esi
c000ad64:	89 f0                	mov    eax,esi
c000ad66:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ad6a:	c1 f8 1f             	sar    eax,0x1f
c000ad6d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000ad71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ad75:	89 f0                	mov    eax,esi
c000ad77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ad7b:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000ad7f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ad83:	89 f2                	mov    edx,esi
c000ad85:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000ad8a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad8e:	74 0c                	je     c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad90:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000ad93:	75 07                	jne    c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad95:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ad98:	74 4e                	je     c000ade8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000ad9a:	66 90                	xchg   ax,ax
c000ad9c:	83 ec 0c             	sub    esp,0xc
c000ad9f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ada3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ada6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ada9:	8b 31                	mov    esi,DWORD PTR [ecx]
c000adab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000adae:	57                   	push   edi
c000adaf:	52                   	push   edx
c000adb0:	50                   	push   eax
c000adb1:	51                   	push   ecx
c000adb2:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000adb5:	83 c4 20             	add    esp,0x20
c000adb8:	89 c7                	mov    edi,eax
c000adba:	85 c0                	test   eax,eax
c000adbc:	74 2a                	je     c000ade8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000adbe:	83 ec 0c             	sub    esp,0xc
c000adc1:	68 8c 22 02 c0       	push   0xc002228c
c000adc6:	e8 99 c1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000adcb:	83 c4 10             	add    esp,0x10
c000adce:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000add3:	0f 84 b3 00 00 00    	je     c000ae8c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000add9:	51                   	push   ecx
c000adda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000addd:	05 ff 0f 00 00       	add    eax,0xfff
c000ade2:	e9 8d 00 00 00       	jmp    c000ae74 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000ade7:	90                   	nop
c000ade8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000adeb:	89 ef                	mov    edi,ebp
c000aded:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000adf3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000adf6:	8d 70 ff             	lea    esi,[eax-0x1]
c000adf9:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000adfd:	0f af f1             	imul   esi,ecx
c000ae00:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ae03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ae05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ae0a:	74 24                	je     c000ae30 <VCache::read(unsigned long long, int, void*)+0x176>
c000ae0c:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae11:	52                   	push   edx
c000ae12:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ae15:	05 ff 0f 00 00       	add    eax,0xfff
c000ae1a:	99                   	cdq    
c000ae1b:	f7 f9                	idiv   ecx
c000ae1d:	50                   	push   eax
c000ae1e:	55                   	push   ebp
c000ae1f:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ae25:	e8 cc 81 00 00       	call   c0012ff6 <VAS::unlockPages(unsigned long, int)>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae30:	e8 e3 a9 00 00       	call   c0015818 <KeRestorePreemption()>
c000ae35:	31 ff                	xor    edi,edi
c000ae37:	eb 5b                	jmp    c000ae94 <VCache::read(unsigned long long, int, void*)+0x1da>
c000ae39:	8d 76 00             	lea    esi,[esi+0x0]
c000ae3c:	83 ec 0c             	sub    esp,0xc
c000ae3f:	53                   	push   ebx
c000ae40:	e8 cb fb ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ae45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ae48:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4d:	56                   	push   esi
c000ae4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae56:	50                   	push   eax
c000ae57:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ae5a:	83 c4 20             	add    esp,0x20
c000ae5d:	89 c7                	mov    edi,eax
c000ae5f:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000ae64:	74 26                	je     c000ae8c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000ae66:	50                   	push   eax
c000ae67:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000ae6b:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000ae71:	8d 76 00             	lea    esi,[esi+0x0]
c000ae74:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae79:	99                   	cdq    
c000ae7a:	f7 f9                	idiv   ecx
c000ae7c:	50                   	push   eax
c000ae7d:	55                   	push   ebp
c000ae7e:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ae84:	e8 6d 81 00 00       	call   c0012ff6 <VAS::unlockPages(unsigned long, int)>
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	e8 87 a9 00 00       	call   c0015818 <KeRestorePreemption()>
c000ae91:	8d 76 00             	lea    esi,[esi+0x0]
c000ae94:	83 c4 2c             	add    esp,0x2c
c000ae97:	89 f8                	mov    eax,edi
c000ae99:	5b                   	pop    ebx
c000ae9a:	5e                   	pop    esi
c000ae9b:	5f                   	pop    edi
c000ae9c:	5d                   	pop    ebp
c000ae9d:	c3                   	ret    

c000ae9e <Video::putrect(int, int, int, int, unsigned int)>:
c000ae9e:	55                   	push   ebp
c000ae9f:	57                   	push   edi
c000aea0:	56                   	push   esi
c000aea1:	53                   	push   ebx
c000aea2:	83 ec 1c             	sub    esp,0x1c
c000aea5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000aea9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aead:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aeb1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000aeb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aeb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aebd:	01 df                	add    edi,ebx
c000aebf:	39 fb                	cmp    ebx,edi
c000aec1:	7d 1f                	jge    c000aee2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000aec3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aec7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000aecb:	7d 12                	jge    c000aedf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000aecd:	8b 16                	mov    edx,DWORD PTR [esi]
c000aecf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed3:	53                   	push   ebx
c000aed4:	55                   	push   ebp
c000aed5:	45                   	inc    ebp
c000aed6:	56                   	push   esi
c000aed7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000aeda:	83 c4 10             	add    esp,0x10
c000aedd:	eb e8                	jmp    c000aec7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000aedf:	43                   	inc    ebx
c000aee0:	eb dd                	jmp    c000aebf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000aee2:	83 c4 1c             	add    esp,0x1c
c000aee5:	5b                   	pop    ebx
c000aee6:	5e                   	pop    esi
c000aee7:	5f                   	pop    edi
c000aee8:	5d                   	pop    ebp
c000aee9:	c3                   	ret    

c000aeea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000aeea:	55                   	push   ebp
c000aeeb:	57                   	push   edi
c000aeec:	31 ff                	xor    edi,edi
c000aeee:	56                   	push   esi
c000aeef:	53                   	push   ebx
c000aef0:	83 ec 1c             	sub    esp,0x1c
c000aef3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000aef7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aefb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000af02:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000af07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af0b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000af0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af13:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000af16:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000af1a:	01 f9                	add    ecx,edi
c000af1c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000af20:	7d 2f                	jge    c000af51 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000af22:	31 f6                	xor    esi,esi
c000af24:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af28:	01 f2                	add    edx,esi
c000af2a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000af2e:	7d 1a                	jge    c000af4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000af30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af33:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000af36:	46                   	inc    esi
c000af37:	51                   	push   ecx
c000af38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000af3c:	52                   	push   edx
c000af3d:	55                   	push   ebp
c000af3e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000af41:	83 c4 10             	add    esp,0x10
c000af44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000af48:	eb da                	jmp    c000af24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000af4a:	47                   	inc    edi
c000af4b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000af4f:	eb c5                	jmp    c000af16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000af51:	83 c4 1c             	add    esp,0x1c
c000af54:	5b                   	pop    ebx
c000af55:	5e                   	pop    esi
c000af56:	5f                   	pop    edi
c000af57:	5d                   	pop    ebp
c000af58:	c3                   	ret    
c000af59:	90                   	nop

c000af5a <Video::blit(unsigned int*, int, int, int, int)>:
c000af5a:	55                   	push   ebp
c000af5b:	57                   	push   edi
c000af5c:	56                   	push   esi
c000af5d:	53                   	push   ebx
c000af5e:	83 ec 1c             	sub    esp,0x1c
c000af61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000af69:	85 c0                	test   eax,eax
c000af6b:	79 02                	jns    c000af6f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000af6d:	31 c0                	xor    eax,eax
c000af6f:	c1 e0 02             	shl    eax,0x2
c000af72:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000af76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000af7e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000af82:	39 d8                	cmp    eax,ebx
c000af84:	7e 49                	jle    c000afcf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000af86:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000af8c:	7c 41                	jl     c000afcf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000af8e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000af92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000af96:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000af9a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000af9e:	39 f9                	cmp    ecx,edi
c000afa0:	7e 22                	jle    c000afc4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000afa2:	83 c5 04             	add    ebp,0x4
c000afa5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000afab:	7c 14                	jl     c000afc1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000afad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000afaf:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000afb2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000afb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000afba:	56                   	push   esi
c000afbb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000afbe:	83 c4 10             	add    esp,0x10
c000afc1:	47                   	inc    edi
c000afc2:	eb d2                	jmp    c000af96 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000afc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afc8:	43                   	inc    ebx
c000afc9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000afcd:	eb ab                	jmp    c000af7a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000afcf:	83 c4 1c             	add    esp,0x1c
c000afd2:	5b                   	pop    ebx
c000afd3:	5e                   	pop    esi
c000afd4:	5f                   	pop    edi
c000afd5:	5d                   	pop    ebp
c000afd6:	c3                   	ret    
c000afd7:	90                   	nop

c000afd8 <Video::clearScreen(unsigned int)>:
c000afd8:	57                   	push   edi
c000afd9:	56                   	push   esi
c000afda:	53                   	push   ebx
c000afdb:	31 db                	xor    ebx,ebx
c000afdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000afe1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000afe7:	7e 1f                	jle    c000b008 <Video::clearScreen(unsigned int)+0x30>
c000afe9:	31 ff                	xor    edi,edi
c000afeb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000aff1:	7e 12                	jle    c000b005 <Video::clearScreen(unsigned int)+0x2d>
c000aff3:	8b 06                	mov    eax,DWORD PTR [esi]
c000aff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff9:	53                   	push   ebx
c000affa:	57                   	push   edi
c000affb:	47                   	inc    edi
c000affc:	56                   	push   esi
c000affd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b000:	83 c4 10             	add    esp,0x10
c000b003:	eb e6                	jmp    c000afeb <Video::clearScreen(unsigned int)+0x13>
c000b005:	43                   	inc    ebx
c000b006:	eb d9                	jmp    c000afe1 <Video::clearScreen(unsigned int)+0x9>
c000b008:	5b                   	pop    ebx
c000b009:	5e                   	pop    esi
c000b00a:	5f                   	pop    edi
c000b00b:	c3                   	ret    

c000b00c <Video::putpixel(int, int, unsigned int)>:
c000b00c:	c7 44 24 04 c4 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222c4
c000b014:	e9 59 3e 00 00       	jmp    c000ee72 <KePanic(char const*)>
c000b019:	90                   	nop

c000b01a <Video::readPixelApprox(int, int)>:
c000b01a:	83 ec 18             	sub    esp,0x18
c000b01d:	68 e5 22 02 c0       	push   0xc00222e5
c000b022:	e8 4b 3e 00 00       	call   c000ee72 <KePanic(char const*)>
c000b027:	31 c0                	xor    eax,eax
c000b029:	83 c4 1c             	add    esp,0x1c
c000b02c:	c3                   	ret    
c000b02d:	90                   	nop

c000b02e <Video::Video(char const*)>:
c000b02e:	83 ec 0c             	sub    esp,0xc
c000b031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b035:	83 ec 08             	sub    esp,0x8
c000b038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03c:	50                   	push   eax
c000b03d:	e8 b2 e1 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000b042:	83 c4 10             	add    esp,0x10
c000b045:	ba 88 23 02 c0       	mov    edx,0xc0022388
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	89 10                	mov    DWORD PTR [eax],edx
c000b050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b054:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b05e:	90                   	nop
c000b05f:	83 c4 0c             	add    esp,0xc
c000b062:	c3                   	ret    
c000b063:	90                   	nop

c000b064 <Video::~Video()>:
c000b064:	83 ec 0c             	sub    esp,0xc
c000b067:	ba 88 23 02 c0       	mov    edx,0xc0022388
c000b06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b070:	89 10                	mov    DWORD PTR [eax],edx
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	50                   	push   eax
c000b07a:	e8 15 df ff ff       	call   c0008f94 <Device::~Device()>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	90                   	nop
c000b083:	83 c4 0c             	add    esp,0xc
c000b086:	c3                   	ret    
c000b087:	90                   	nop

c000b088 <Video::~Video()>:
c000b088:	83 ec 0c             	sub    esp,0xc
c000b08b:	83 ec 0c             	sub    esp,0xc
c000b08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b092:	e8 cd ff ff ff       	call   c000b064 <Video::~Video()>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	68 64 01 00 00       	push   0x164
c000b0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a6:	e8 f5 17 00 00       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000b0ab:	83 c4 10             	add    esp,0x10
c000b0ae:	83 c4 0c             	add    esp,0xc
c000b0b1:	c3                   	ret    

c000b0b2 <Video::isMonochrome()>:
c000b0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000b0bc:	c3                   	ret    
c000b0bd:	90                   	nop

c000b0be <Video::getWidth()>:
c000b0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0c8:	c3                   	ret    
c000b0c9:	90                   	nop

c000b0ca <Video::getHeight()>:
c000b0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b0d4:	c3                   	ret    
c000b0d5:	90                   	nop

c000b0d6 <Video::drawCursor(int, int, unsigned int*, int)>:
c000b0d6:	55                   	push   ebp
c000b0d7:	57                   	push   edi
c000b0d8:	56                   	push   esi
c000b0d9:	53                   	push   ebx
c000b0da:	83 ec 2c             	sub    esp,0x2c
c000b0dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b0e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b0e5:	83 f8 01             	cmp    eax,0x1
c000b0e8:	19 c9                	sbb    ecx,ecx
c000b0ea:	31 db                	xor    ebx,ebx
c000b0ec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b0f0:	89 cd                	mov    ebp,ecx
c000b0f2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000b0fa:	f7 d5                	not    ebp
c000b0fc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000b102:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b106:	01 d8                	add    eax,ebx
c000b108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b10c:	56                   	push   esi
c000b10d:	e8 b8 ff ff ff       	call   c000b0ca <Video::getHeight()>
c000b112:	59                   	pop    ecx
c000b113:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b117:	7e 70                	jle    c000b189 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000b119:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b11d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000b121:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000b124:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b128:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b12c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000b133:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b137:	89 f8                	mov    eax,edi
c000b139:	83 c0 20             	add    eax,0x20
c000b13c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b140:	56                   	push   esi
c000b141:	e8 78 ff ff ff       	call   c000b0be <Video::getWidth()>
c000b146:	5a                   	pop    edx
c000b147:	39 c7                	cmp    edi,eax
c000b149:	7d 34                	jge    c000b17f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000b14b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b150:	74 05                	je     c000b157 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b152:	8b 06                	mov    eax,DWORD PTR [esi]
c000b154:	55                   	push   ebp
c000b155:	eb 0d                	jmp    c000b164 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b157:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b15c:	74 12                	je     c000b170 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b15e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b160:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b164:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b168:	57                   	push   edi
c000b169:	56                   	push   esi
c000b16a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b16d:	83 c4 10             	add    esp,0x10
c000b170:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b174:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b178:	47                   	inc    edi
c000b179:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b17d:	75 c1                	jne    c000b140 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b17f:	43                   	inc    ebx
c000b180:	83 fb 20             	cmp    ebx,0x20
c000b183:	0f 85 79 ff ff ff    	jne    c000b102 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b189:	83 c4 2c             	add    esp,0x2c
c000b18c:	5b                   	pop    ebx
c000b18d:	5e                   	pop    esi
c000b18e:	5f                   	pop    edi
c000b18f:	5d                   	pop    ebp
c000b190:	c3                   	ret    
c000b191:	90                   	nop

c000b192 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b192:	55                   	push   ebp
c000b193:	57                   	push   edi
c000b194:	56                   	push   esi
c000b195:	53                   	push   ebx
c000b196:	83 ec 48             	sub    esp,0x48
c000b199:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b19d:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b1a1:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b1a5:	c1 e0 08             	shl    eax,0x8
c000b1a8:	01 d0                	add    eax,edx
c000b1aa:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b1ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1b2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b1b6:	c1 e0 08             	shl    eax,0x8
c000b1b9:	01 d0                	add    eax,edx
c000b1bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b1bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1c3:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b1c8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b1cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b1d0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b1d7:	50                   	push   eax
c000b1d8:	e8 4e 39 00 00       	call   c000eb2b <malloc>
c000b1dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b1e9:	75 10                	jne    c000b1fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b1eb:	83 ec 0c             	sub    esp,0xc
c000b1ee:	68 10 23 02 c0       	push   0xc0022310
c000b1f3:	e8 7a 3c 00 00       	call   c000ee72 <KePanic(char const*)>
c000b1f8:	83 c4 10             	add    esp,0x10
c000b1fb:	51                   	push   ecx
c000b1fc:	51                   	push   ecx
c000b1fd:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b201:	50                   	push   eax
c000b202:	68 20 23 02 c0       	push   0xc0022320
c000b207:	e8 58 bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b20c:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b20f:	83 e0 20             	and    eax,0x20
c000b212:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b216:	85 c0                	test   eax,eax
c000b218:	5e                   	pop    esi
c000b219:	0f 94 c0             	sete   al
c000b21c:	5f                   	pop    edi
c000b21d:	0f b6 c0             	movzx  eax,al
c000b220:	be 12 00 00 00       	mov    esi,0x12
c000b225:	50                   	push   eax
c000b226:	68 2a 23 02 c0       	push   0xc002232a
c000b22b:	e8 34 bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b230:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b234:	83 c4 10             	add    esp,0x10
c000b237:	89 d0                	mov    eax,edx
c000b239:	85 d2                	test   edx,edx
c000b23b:	74 11                	je     c000b24e <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b23d:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b241:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b245:	c1 fe 03             	sar    esi,0x3
c000b248:	0f af f1             	imul   esi,ecx
c000b24b:	83 c6 12             	add    esi,0x12
c000b24e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b253:	74 07                	je     c000b25c <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b255:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b25a:	75 12                	jne    c000b26e <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b25c:	83 ec 0c             	sub    esp,0xc
c000b25f:	68 38 23 02 c0       	push   0xc0022338
c000b264:	e8 fb bc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b269:	e9 a0 02 00 00       	jmp    c000b50e <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b26e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b272:	83 f9 02             	cmp    ecx,0x2
c000b275:	74 0e                	je     c000b285 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b277:	83 f9 0a             	cmp    ecx,0xa
c000b27a:	0f 84 c8 00 00 00    	je     c000b348 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b280:	e9 72 02 00 00       	jmp    c000b4f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b285:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b28a:	75 0e                	jne    c000b29a <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b28c:	84 c0                	test   al,al
c000b28e:	75 0a                	jne    c000b29a <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b290:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b293:	83 e8 18             	sub    eax,0x18
c000b296:	a8 f7                	test   al,0xf7
c000b298:	74 0d                	je     c000b2a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b29a:	83 ec 0c             	sub    esp,0xc
c000b29d:	68 4d 23 02 c0       	push   0xc002234d
c000b2a2:	e9 58 02 00 00       	jmp    c000b4ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b2a7:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b2ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b2b4:	31 c0                	xor    eax,eax
c000b2b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b2ba:	89 c7                	mov    edi,eax
c000b2bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b2c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b2c9:	75 15                	jne    c000b2e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b2cb:	99                   	cdq    
c000b2cc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b2d0:	85 d2                	test   edx,edx
c000b2d2:	75 0c                	jne    c000b2e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b2d4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b2d8:	29 c7                	sub    edi,eax
c000b2da:	4f                   	dec    edi
c000b2db:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b2e0:	31 d2                	xor    edx,edx
c000b2e2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2e6:	75 08                	jne    c000b2f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b2e8:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b2ed:	c1 e2 18             	shl    edx,0x18
c000b2f0:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b2f5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b2f9:	c1 e1 10             	shl    ecx,0x10
c000b2fc:	8d 47 01             	lea    eax,[edi+0x1]
c000b2ff:	89 cd                	mov    ebp,ecx
c000b301:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b306:	c1 e1 08             	shl    ecx,0x8
c000b309:	09 e9                	or     ecx,ebp
c000b30b:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b30f:	09 e9                	or     ecx,ebp
c000b311:	09 d1                	or     ecx,edx
c000b313:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b317:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b31a:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b31e:	c1 fa 03             	sar    edx,0x3
c000b321:	01 d6                	add    esi,edx
c000b323:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b327:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b32b:	7e 04                	jle    c000b331 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b32d:	89 c7                	mov    edi,eax
c000b32f:	eb 93                	jmp    c000b2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b331:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b339:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b33d:	0f 8f 77 ff ff ff    	jg     c000b2ba <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b343:	e9 d3 01 00 00       	jmp    c000b51b <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b348:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b34d:	75 0e                	jne    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b34f:	85 d2                	test   edx,edx
c000b351:	75 0a                	jne    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b353:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b356:	83 e8 18             	sub    eax,0x18
c000b359:	a8 f7                	test   al,0xf7
c000b35b:	74 0d                	je     c000b36a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b35d:	83 ec 0c             	sub    esp,0xc
c000b360:	68 5b 23 02 c0       	push   0xc002235b
c000b365:	e9 95 01 00 00       	jmp    c000b4ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b36a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b372:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b37a:	31 c9                	xor    ecx,ecx
c000b37c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b380:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b384:	0f 8e 91 01 00 00    	jle    c000b51b <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b38a:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b38e:	0f 8d 87 01 00 00    	jge    c000b51b <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b394:	8d 46 01             	lea    eax,[esi+0x1]
c000b397:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b39b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b39f:	83 fd 7f             	cmp    ebp,0x7f
c000b3a2:	89 e8                	mov    eax,ebp
c000b3a4:	0f 8e 9d 00 00 00    	jle    c000b447 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b3aa:	83 e0 7f             	and    eax,0x7f
c000b3ad:	31 d2                	xor    edx,edx
c000b3af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b3b3:	40                   	inc    eax
c000b3b4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b3b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3bc:	75 0a                	jne    c000b3c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b3be:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b3c3:	89 ea                	mov    edx,ebp
c000b3c5:	c1 e2 18             	shl    edx,0x18
c000b3c8:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b3cd:	c1 e0 10             	shl    eax,0x10
c000b3d0:	89 c7                	mov    edi,eax
c000b3d2:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b3d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b3db:	c1 e0 08             	shl    eax,0x8
c000b3de:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b3e2:	09 f8                	or     eax,edi
c000b3e4:	31 f6                	xor    esi,esi
c000b3e6:	09 c5                	or     ebp,eax
c000b3e8:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b3ed:	09 d5                	or     ebp,edx
c000b3ef:	85 ff                	test   edi,edi
c000b3f1:	75 1d                	jne    c000b410 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b3f3:	89 c8                	mov    eax,ecx
c000b3f5:	99                   	cdq    
c000b3f6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b3fa:	85 d2                	test   edx,edx
c000b3fc:	75 12                	jne    c000b410 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b3fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b402:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b406:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b40a:	49                   	dec    ecx
c000b40b:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b414:	8d 51 01             	lea    edx,[ecx+0x1]
c000b417:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b41a:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b41e:	8d 46 01             	lea    eax,[esi+0x1]
c000b421:	7e 06                	jle    c000b429 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b423:	89 c6                	mov    esi,eax
c000b425:	89 d1                	mov    ecx,edx
c000b427:	eb c6                	jmp    c000b3ef <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b429:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b42d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b431:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b435:	c1 f8 03             	sar    eax,0x3
c000b438:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b43c:	89 d1                	mov    ecx,edx
c000b43e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b442:	e9 35 ff ff ff       	jmp    c000b37c <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b447:	8d 45 01             	lea    eax,[ebp+0x1]
c000b44a:	31 f6                	xor    esi,esi
c000b44c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b450:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b455:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b459:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b45e:	75 1d                	jne    c000b47d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b460:	89 c8                	mov    eax,ecx
c000b462:	99                   	cdq    
c000b463:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b467:	85 d2                	test   edx,edx
c000b469:	75 12                	jne    c000b47d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b46b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b46f:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b473:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b477:	49                   	dec    ecx
c000b478:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b47d:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b485:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b489:	75 10                	jne    c000b49b <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b48b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b48f:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b494:	c1 e7 18             	shl    edi,0x18
c000b497:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b49b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b49f:	8d 51 01             	lea    edx,[ecx+0x1]
c000b4a2:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b4a7:	c1 e0 10             	shl    eax,0x10
c000b4aa:	89 c7                	mov    edi,eax
c000b4ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4b0:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b4b5:	c1 e0 08             	shl    eax,0x8
c000b4b8:	09 f8                	or     eax,edi
c000b4ba:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b4be:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b4c2:	09 f8                	or     eax,edi
c000b4c4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b4c8:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b4cc:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b4cf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b4d3:	c1 f8 03             	sar    eax,0x3
c000b4d6:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b4da:	8d 46 01             	lea    eax,[esi+0x1]
c000b4dd:	39 f5                	cmp    ebp,esi
c000b4df:	7e 09                	jle    c000b4ea <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b4e1:	89 c6                	mov    esi,eax
c000b4e3:	89 d1                	mov    ecx,edx
c000b4e5:	e9 6f ff ff ff       	jmp    c000b459 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b4ea:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b4ee:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b4f2:	e9 45 ff ff ff       	jmp    c000b43c <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b4f7:	52                   	push   edx
c000b4f8:	52                   	push   edx
c000b4f9:	51                   	push   ecx
c000b4fa:	68 6a 23 02 c0       	push   0xc002236a
c000b4ff:	e8 60 ba ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b504:	58                   	pop    eax
c000b505:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b509:	e8 2d 36 00 00       	call   c000eb3b <free>
c000b50e:	83 c4 10             	add    esp,0x10
c000b511:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b519:	eb 14                	jmp    c000b52f <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b51b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b51f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b523:	89 18                	mov    DWORD PTR [eax],ebx
c000b525:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b529:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b52d:	89 18                	mov    DWORD PTR [eax],ebx
c000b52f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b533:	83 c4 3c             	add    esp,0x3c
c000b536:	5b                   	pop    ebx
c000b537:	5e                   	pop    esi
c000b538:	5f                   	pop    edi
c000b539:	5d                   	pop    ebp
c000b53a:	c3                   	ret    
c000b53b:	90                   	nop

c000b53c <Video::putTGA(int, int, unsigned char*, int)>:
c000b53c:	55                   	push   ebp
c000b53d:	57                   	push   edi
c000b53e:	56                   	push   esi
c000b53f:	53                   	push   ebx
c000b540:	83 ec 28             	sub    esp,0x28
c000b543:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b547:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b54b:	50                   	push   eax
c000b54c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b550:	50                   	push   eax
c000b551:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b555:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b559:	57                   	push   edi
c000b55a:	e8 33 fc ff ff       	call   c000b192 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b55f:	83 c4 20             	add    esp,0x20
c000b562:	85 c0                	test   eax,eax
c000b564:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b568:	74 3a                	je     c000b5a4 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b56a:	89 c6                	mov    esi,eax
c000b56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b570:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b574:	39 d8                	cmp    eax,ebx
c000b576:	7e 2c                	jle    c000b5a4 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b578:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b57c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b580:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b584:	39 e8                	cmp    eax,ebp
c000b586:	7e 19                	jle    c000b5a1 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b588:	83 c6 04             	add    esi,0x4
c000b58b:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b58e:	85 c0                	test   eax,eax
c000b590:	79 0c                	jns    c000b59e <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b592:	8b 17                	mov    edx,DWORD PTR [edi]
c000b594:	50                   	push   eax
c000b595:	53                   	push   ebx
c000b596:	55                   	push   ebp
c000b597:	57                   	push   edi
c000b598:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b59b:	83 c4 10             	add    esp,0x10
c000b59e:	45                   	inc    ebp
c000b59f:	eb db                	jmp    c000b57c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b5a1:	43                   	inc    ebx
c000b5a2:	eb c8                	jmp    c000b56c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b5a4:	83 c4 1c             	add    esp,0x1c
c000b5a7:	5b                   	pop    ebx
c000b5a8:	5e                   	pop    esi
c000b5a9:	5f                   	pop    edi
c000b5aa:	5d                   	pop    ebp
c000b5ab:	c3                   	ret    

c000b5ac <ACPI::close(int, int, void*)>:
c000b5ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b5b1:	c3                   	ret    
c000b5b2:	66 90                	xchg   ax,ax

c000b5b4 <loadACPITables(unsigned char*)>:
c000b5b4:	57                   	push   edi
c000b5b5:	56                   	push   esi
c000b5b6:	53                   	push   ebx
c000b5b7:	83 ec 60             	sub    esp,0x60
c000b5ba:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b5bf:	0f 84 43 02 00 00    	je     c000b808 <loadACPITables(unsigned char*)+0x254>
c000b5c5:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b5ca:	0f b6 c0             	movzx  eax,al
c000b5cd:	85 c0                	test   eax,eax
c000b5cf:	74 7b                	je     c000b64c <loadACPITables(unsigned char*)+0x98>
c000b5d1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b5d5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b5d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b5dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5e0:	83 e8 24             	sub    eax,0x24
c000b5e3:	c1 e8 03             	shr    eax,0x3
c000b5e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b5ea:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b5f2:	66 90                	xchg   ax,ax
c000b5f4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b5f8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b5fc:	0f 8d ba 00 00 00    	jge    c000b6bc <loadACPITables(unsigned char*)+0x108>
c000b602:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b606:	83 c0 24             	add    eax,0x24
c000b609:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b60d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b611:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b615:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b619:	c1 e0 03             	shl    eax,0x3
c000b61c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b620:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b624:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b627:	8b 00                	mov    eax,DWORD PTR [eax]
c000b629:	89 c1                	mov    ecx,eax
c000b62b:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b630:	8d 50 01             	lea    edx,[eax+0x1]
c000b633:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b639:	89 ca                	mov    edx,ecx
c000b63b:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b642:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b647:	eb ab                	jmp    c000b5f4 <loadACPITables(unsigned char*)+0x40>
c000b649:	8d 76 00             	lea    esi,[esi+0x0]
c000b64c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b650:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b654:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b65b:	83 e8 24             	sub    eax,0x24
c000b65e:	c1 e8 02             	shr    eax,0x2
c000b661:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b665:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b66d:	8d 76 00             	lea    esi,[esi+0x0]
c000b670:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b674:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b678:	7d 42                	jge    c000b6bc <loadACPITables(unsigned char*)+0x108>
c000b67a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b67e:	83 c0 24             	add    eax,0x24
c000b681:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b685:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b689:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b68d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b691:	c1 e0 02             	shl    eax,0x2
c000b694:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b698:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b69c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b69e:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6a3:	8d 50 01             	lea    edx,[eax+0x1]
c000b6a6:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b6ac:	89 ca                	mov    edx,ecx
c000b6ae:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b6b5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b6ba:	eb b4                	jmp    c000b670 <loadACPITables(unsigned char*)+0xbc>
c000b6bc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b6c4:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6c9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b6cd:	0f 8d 39 01 00 00    	jge    c000b80c <loadACPITables(unsigned char*)+0x258>
c000b6d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b6d7:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b6de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b6ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ee:	25 ff 0f 00 00       	and    eax,0xfff
c000b6f3:	89 c6                	mov    esi,eax
c000b6f5:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b6fb:	83 ec 0c             	sub    esp,0xc
c000b6fe:	6a 01                	push   0x1
c000b700:	e8 60 6b 00 00       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c000b705:	83 c4 10             	add    esp,0x10
c000b708:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b70c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b712:	83 ec 0c             	sub    esp,0xc
c000b715:	6a 01                	push   0x1
c000b717:	6a 01                	push   0x1
c000b719:	50                   	push   eax
c000b71a:	52                   	push   edx
c000b71b:	53                   	push   ebx
c000b71c:	e8 11 74 00 00       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b721:	83 c4 20             	add    esp,0x20
c000b724:	09 f0                	or     eax,esi
c000b726:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b72a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b72e:	c1 e0 03             	shl    eax,0x3
c000b731:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b736:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b73a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b73e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b742:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b74a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b74e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b752:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b756:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b75a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b75e:	89 c6                	mov    esi,eax
c000b760:	89 d7                	mov    edi,edx
c000b762:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b764:	89 c8                	mov    eax,ecx
c000b766:	89 fa                	mov    edx,edi
c000b768:	89 f3                	mov    ebx,esi
c000b76a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b76e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b772:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b776:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b77a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b77d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b785:	05 00 10 00 00       	add    eax,0x1000
c000b78a:	c1 e8 0c             	shr    eax,0xc
c000b78d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b795:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b799:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79d:	25 ff 0f 00 00       	and    eax,0xfff
c000b7a2:	89 c6                	mov    esi,eax
c000b7a4:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b7b1:	e8 af 6a 00 00       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c000b7b6:	83 c4 10             	add    esp,0x10
c000b7b9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b7bd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b7c3:	83 ec 0c             	sub    esp,0xc
c000b7c6:	6a 01                	push   0x1
c000b7c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b7cc:	50                   	push   eax
c000b7cd:	52                   	push   edx
c000b7ce:	53                   	push   ebx
c000b7cf:	e8 5e 73 00 00       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b7d4:	83 c4 20             	add    esp,0x20
c000b7d7:	09 f0                	or     eax,esi
c000b7d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b7dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7e1:	83 ec 0c             	sub    esp,0xc
c000b7e4:	50                   	push   eax
c000b7e5:	e8 83 6d 00 00       	call   c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c000b7ea:	83 c4 10             	add    esp,0x10
c000b7ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b7f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b7f5:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b7fc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b801:	e9 be fe ff ff       	jmp    c000b6c4 <loadACPITables(unsigned char*)+0x110>
c000b806:	66 90                	xchg   ax,ax
c000b808:	90                   	nop
c000b809:	8d 76 00             	lea    esi,[esi+0x0]
c000b80c:	83 c4 60             	add    esp,0x60
c000b80f:	5b                   	pop    ebx
c000b810:	5e                   	pop    esi
c000b811:	5f                   	pop    edi
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <findRSDT(unsigned char*)>:
c000b814:	57                   	push   edi
c000b815:	56                   	push   esi
c000b816:	53                   	push   ebx
c000b817:	83 ec 50             	sub    esp,0x50
c000b81a:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b81f:	85 c0                	test   eax,eax
c000b821:	75 0d                	jne    c000b830 <findRSDT(unsigned char*)+0x1c>
c000b823:	b8 00 00 00 00       	mov    eax,0x0
c000b828:	e9 2b 01 00 00       	jmp    c000b958 <findRSDT(unsigned char*)+0x144>
c000b82d:	8d 76 00             	lea    esi,[esi+0x0]
c000b830:	89 e0                	mov    eax,esp
c000b832:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b836:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b83a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b83e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b846:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b84a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b84e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b852:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b856:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b85a:	89 c6                	mov    esi,eax
c000b85c:	89 d7                	mov    edi,edx
c000b85e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b860:	89 c8                	mov    eax,ecx
c000b862:	89 fa                	mov    edx,edi
c000b864:	89 f3                	mov    ebx,esi
c000b866:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b86a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b86e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b872:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b876:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b87a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b882:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b88a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b892:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b896:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b89a:	25 ff 0f 00 00       	and    eax,0xfff
c000b89f:	89 c6                	mov    esi,eax
c000b8a1:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b8a7:	83 ec 0c             	sub    esp,0xc
c000b8aa:	6a 02                	push   0x2
c000b8ac:	e8 b4 69 00 00       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c000b8b1:	83 c4 10             	add    esp,0x10
c000b8b4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b8b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b8be:	83 ec 0c             	sub    esp,0xc
c000b8c1:	6a 01                	push   0x1
c000b8c3:	6a 02                	push   0x2
c000b8c5:	50                   	push   eax
c000b8c6:	52                   	push   edx
c000b8c7:	53                   	push   ebx
c000b8c8:	e8 65 72 00 00       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b8cd:	83 c4 20             	add    esp,0x20
c000b8d0:	09 f0                	or     eax,esi
c000b8d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8da:	25 ff 0f 00 00       	and    eax,0xfff
c000b8df:	89 c6                	mov    esi,eax
c000b8e1:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b8e7:	83 ec 0c             	sub    esp,0xc
c000b8ea:	6a 02                	push   0x2
c000b8ec:	e8 74 69 00 00       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c000b8f1:	83 c4 10             	add    esp,0x10
c000b8f4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b8f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b8fe:	83 ec 0c             	sub    esp,0xc
c000b901:	6a 01                	push   0x1
c000b903:	6a 02                	push   0x2
c000b905:	50                   	push   eax
c000b906:	52                   	push   edx
c000b907:	53                   	push   ebx
c000b908:	e8 25 72 00 00       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b90d:	83 c4 20             	add    esp,0x20
c000b910:	09 f0                	or     eax,esi
c000b912:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b916:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b91b:	85 c0                	test   eax,eax
c000b91d:	75 11                	jne    c000b930 <findRSDT(unsigned char*)+0x11c>
c000b91f:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b926:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b92a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b92e:	eb 24                	jmp    c000b954 <findRSDT(unsigned char*)+0x140>
c000b930:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b935:	83 f8 02             	cmp    eax,0x2
c000b938:	75 12                	jne    c000b94c <findRSDT(unsigned char*)+0x138>
c000b93a:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b941:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b945:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b949:	eb 09                	jmp    c000b954 <findRSDT(unsigned char*)+0x140>
c000b94b:	90                   	nop
c000b94c:	b8 00 00 00 00       	mov    eax,0x0
c000b951:	eb 05                	jmp    c000b958 <findRSDT(unsigned char*)+0x144>
c000b953:	90                   	nop
c000b954:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b958:	83 c4 50             	add    esp,0x50
c000b95b:	5b                   	pop    ebx
c000b95c:	5e                   	pop    esi
c000b95d:	5f                   	pop    edi
c000b95e:	c3                   	ret    
c000b95f:	90                   	nop

c000b960 <findDataTable(unsigned char*, char*)>:
c000b960:	83 ec 1c             	sub    esp,0x1c
c000b963:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b968:	75 0a                	jne    c000b974 <findDataTable(unsigned char*, char*)+0x14>
c000b96a:	b8 00 00 00 00       	mov    eax,0x0
c000b96f:	eb 5f                	jmp    c000b9d0 <findDataTable(unsigned char*, char*)+0x70>
c000b971:	8d 76 00             	lea    esi,[esi+0x0]
c000b974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b97c:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b981:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b985:	7d 41                	jge    c000b9c8 <findDataTable(unsigned char*, char*)+0x68>
c000b987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b98b:	c1 e0 03             	shl    eax,0x3
c000b98e:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b993:	83 ec 04             	sub    esp,0x4
c000b996:	6a 04                	push   0x4
c000b998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b99c:	50                   	push   eax
c000b99d:	e8 de 49 ff ff       	call   c0000380 <memcmp>
c000b9a2:	83 c4 10             	add    esp,0x10
c000b9a5:	85 c0                	test   eax,eax
c000b9a7:	0f 94 c0             	sete   al
c000b9aa:	0f b6 c0             	movzx  eax,al
c000b9ad:	85 c0                	test   eax,eax
c000b9af:	74 0f                	je     c000b9c0 <findDataTable(unsigned char*, char*)+0x60>
c000b9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b5:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b9bc:	eb 12                	jmp    c000b9d0 <findDataTable(unsigned char*, char*)+0x70>
c000b9be:	66 90                	xchg   ax,ax
c000b9c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b9c5:	eb b5                	jmp    c000b97c <findDataTable(unsigned char*, char*)+0x1c>
c000b9c7:	90                   	nop
c000b9c8:	b8 00 00 00 00       	mov    eax,0x0
c000b9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b9d0:	83 c4 1c             	add    esp,0x1c
c000b9d3:	c3                   	ret    

c000b9d4 <scanMADT()>:
c000b9d4:	53                   	push   ebx
c000b9d5:	83 ec 38             	sub    esp,0x38
c000b9d8:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000b9e2:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000b9ec:	e8 d7 c8 00 00       	call   c00182c8 <HalFindRSDP()>
c000b9f1:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000b9f6:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b9fb:	85 c0                	test   eax,eax
c000b9fd:	0f 84 11 04 00 00    	je     c000be14 <scanMADT()+0x440>
c000ba03:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000ba08:	83 ec 0c             	sub    esp,0xc
c000ba0b:	50                   	push   eax
c000ba0c:	e8 03 fe ff ff       	call   c000b814 <findRSDT(unsigned char*)>
c000ba11:	83 c4 10             	add    esp,0x10
c000ba14:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000ba19:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba1e:	85 c0                	test   eax,eax
c000ba20:	0f 84 f2 03 00 00    	je     c000be18 <scanMADT()+0x444>
c000ba26:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba2b:	83 ec 0c             	sub    esp,0xc
c000ba2e:	50                   	push   eax
c000ba2f:	e8 80 fb ff ff       	call   c000b5b4 <loadACPITables(unsigned char*)>
c000ba34:	83 c4 10             	add    esp,0x10
c000ba37:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba3c:	83 ec 08             	sub    esp,0x8
c000ba3f:	68 cc 23 02 c0       	push   0xc00223cc
c000ba44:	50                   	push   eax
c000ba45:	e8 16 ff ff ff       	call   c000b960 <findDataTable(unsigned char*, char*)>
c000ba4a:	83 c4 10             	add    esp,0x10
c000ba4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba51:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ba56:	0f 84 c0 03 00 00    	je     c000be1c <scanMADT()+0x448>
c000ba5c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ba64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba6b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ba6f:	0f 87 af 03 00 00    	ja     c000be24 <scanMADT()+0x450>
c000ba75:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ba7d:	0f 87 a1 03 00 00    	ja     c000be24 <scanMADT()+0x450>
c000ba83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba87:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba8f:	8d 50 01             	lea    edx,[eax+0x1]
c000ba92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ba9e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000baa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baa6:	8d 50 01             	lea    edx,[eax+0x1]
c000baa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bab1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bab5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000bab9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000babe:	83 f8 02             	cmp    eax,0x2
c000bac1:	0f 86 59 03 00 00    	jbe    c000be20 <scanMADT()+0x44c>
c000bac7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bacc:	85 c0                	test   eax,eax
c000bace:	75 58                	jne    c000bb28 <scanMADT()+0x154>
c000bad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad4:	8d 50 01             	lea    edx,[eax+0x1]
c000bad7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000badb:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bae1:	0f b6 d2             	movzx  edx,dl
c000bae4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bae8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000baec:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000baf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf6:	8d 50 01             	lea    edx,[eax+0x1]
c000baf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bafd:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bb03:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb06:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000bb0c:	0f b6 d2             	movzx  edx,dl
c000bb0f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb13:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb17:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000bb1d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb22:	e9 d9 02 00 00       	jmp    c000be00 <scanMADT()+0x42c>
c000bb27:	90                   	nop
c000bb28:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb2d:	83 f8 01             	cmp    eax,0x1
c000bb30:	0f 85 1a 01 00 00    	jne    c000bc50 <scanMADT()+0x27c>
c000bb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb3a:	8d 50 01             	lea    edx,[eax+0x1]
c000bb3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb41:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000bb47:	0f b6 d2             	movzx  edx,dl
c000bb4a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb4e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb52:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000bb58:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000bb5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb65:	01 d0                	add    eax,edx
c000bb67:	83 c0 2c             	add    eax,0x2c
c000bb6a:	8a 00                	mov    al,BYTE PTR [eax]
c000bb6c:	0f b6 d0             	movzx  edx,al
c000bb6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb73:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb7a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb7e:	0f b6 c0             	movzx  eax,al
c000bb81:	c1 e0 08             	shl    eax,0x8
c000bb84:	89 d1                	mov    ecx,edx
c000bb86:	09 c1                	or     ecx,eax
c000bb88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb8c:	8d 50 02             	lea    edx,[eax+0x2]
c000bb8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb93:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb97:	0f b6 c0             	movzx  eax,al
c000bb9a:	c1 e0 10             	shl    eax,0x10
c000bb9d:	09 c1                	or     ecx,eax
c000bb9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bba3:	8d 50 03             	lea    edx,[eax+0x3]
c000bba6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbaa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bbae:	0f b6 c0             	movzx  eax,al
c000bbb1:	c1 e0 18             	shl    eax,0x18
c000bbb4:	09 c1                	or     ecx,eax
c000bbb6:	89 ca                	mov    edx,ecx
c000bbb8:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bbbd:	0f b6 c0             	movzx  eax,al
c000bbc0:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000bbc7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bbcc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbd4:	01 d0                	add    eax,edx
c000bbd6:	83 c0 2c             	add    eax,0x2c
c000bbd9:	8a 00                	mov    al,BYTE PTR [eax]
c000bbdb:	0f b6 d0             	movzx  edx,al
c000bbde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbe2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbe5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbe9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbed:	0f b6 c0             	movzx  eax,al
c000bbf0:	c1 e0 08             	shl    eax,0x8
c000bbf3:	89 d1                	mov    ecx,edx
c000bbf5:	09 c1                	or     ecx,eax
c000bbf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbfb:	8d 50 02             	lea    edx,[eax+0x2]
c000bbfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc02:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc06:	0f b6 c0             	movzx  eax,al
c000bc09:	c1 e0 10             	shl    eax,0x10
c000bc0c:	09 c1                	or     ecx,eax
c000bc0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc12:	8d 50 03             	lea    edx,[eax+0x3]
c000bc15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc19:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc1d:	0f b6 c0             	movzx  eax,al
c000bc20:	c1 e0 18             	shl    eax,0x18
c000bc23:	09 c1                	or     ecx,eax
c000bc25:	89 ca                	mov    edx,ecx
c000bc27:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc2c:	0f b6 c0             	movzx  eax,al
c000bc2f:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000bc36:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bc3b:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc40:	83 c0 01             	add    eax,0x1
c000bc43:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000bc48:	e9 b3 01 00 00       	jmp    c000be00 <scanMADT()+0x42c>
c000bc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc50:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc55:	83 f8 02             	cmp    eax,0x2
c000bc58:	0f 85 ea 00 00 00    	jne    c000bd48 <scanMADT()+0x374>
c000bc5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc62:	8d 50 01             	lea    edx,[eax+0x1]
c000bc65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc6d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc71:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bc75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc79:	8d 50 01             	lea    edx,[eax+0x1]
c000bc7c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc84:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc88:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bc8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc94:	01 d0                	add    eax,edx
c000bc96:	83 c0 2c             	add    eax,0x2c
c000bc99:	8a 00                	mov    al,BYTE PTR [eax]
c000bc9b:	0f b6 d0             	movzx  edx,al
c000bc9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bca2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bca5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bca9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bcad:	0f b6 c0             	movzx  eax,al
c000bcb0:	c1 e0 08             	shl    eax,0x8
c000bcb3:	89 d1                	mov    ecx,edx
c000bcb5:	09 c1                	or     ecx,eax
c000bcb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcbb:	8d 50 02             	lea    edx,[eax+0x2]
c000bcbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcc2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bcc6:	0f b6 c0             	movzx  eax,al
c000bcc9:	c1 e0 10             	shl    eax,0x10
c000bccc:	09 c1                	or     ecx,eax
c000bcce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcd2:	8d 50 03             	lea    edx,[eax+0x3]
c000bcd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcd9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bcdd:	0f b6 c0             	movzx  eax,al
c000bce0:	c1 e0 18             	shl    eax,0x18
c000bce3:	09 c8                	or     eax,ecx
c000bce5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bce9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bcee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bcf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcf6:	01 d0                	add    eax,edx
c000bcf8:	83 c0 2c             	add    eax,0x2c
c000bcfb:	8a 00                	mov    al,BYTE PTR [eax]
c000bcfd:	0f b6 c0             	movzx  eax,al
c000bd00:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bd04:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bd07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd0b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bd0f:	0f b6 d2             	movzx  edx,dl
c000bd12:	c1 e2 08             	shl    edx,0x8
c000bd15:	09 d0                	or     eax,edx
c000bd17:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bd1c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bd21:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bd26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd2a:	88 90 e8 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb618],dl
c000bd30:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bd35:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bd3a:	66 89 84 12 c0 aa 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5540],ax
c000bd42:	e9 b9 00 00 00       	jmp    c000be00 <scanMADT()+0x42c>
c000bd47:	90                   	nop
c000bd48:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bd4d:	83 f8 04             	cmp    eax,0x4
c000bd50:	0f 85 9a 00 00 00    	jne    c000bdf0 <scanMADT()+0x41c>
c000bd56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd5a:	8d 50 01             	lea    edx,[eax+0x1]
c000bd5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd65:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bd69:	0f b6 c0             	movzx  eax,al
c000bd6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd78:	01 d0                	add    eax,edx
c000bd7a:	83 c0 2c             	add    eax,0x2c
c000bd7d:	8a 00                	mov    al,BYTE PTR [eax]
c000bd7f:	0f b6 d0             	movzx  edx,al
c000bd82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd86:	8d 48 01             	lea    ecx,[eax+0x1]
c000bd89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bd8d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bd91:	0f b6 c0             	movzx  eax,al
c000bd94:	c1 e0 08             	shl    eax,0x8
c000bd97:	09 d0                	or     eax,edx
c000bd99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd9d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bda2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bda6:	8d 50 01             	lea    edx,[eax+0x1]
c000bda9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bdb1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bdb5:	0f b6 c0             	movzx  eax,al
c000bdb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc0:	c1 e0 08             	shl    eax,0x8
c000bdc3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bdc7:	89 c1                	mov    ecx,eax
c000bdc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bdcd:	c1 e0 18             	shl    eax,0x18
c000bdd0:	89 c3                	mov    ebx,eax
c000bdd2:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bdd7:	8d 50 01             	lea    edx,[eax+0x1]
c000bdda:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000bde0:	09 d9                	or     ecx,ebx
c000bde2:	89 ca                	mov    edx,ecx
c000bde4:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000bdeb:	eb 13                	jmp    c000be00 <scanMADT()+0x42c>
c000bded:	8d 76 00             	lea    esi,[esi+0x0]
c000bdf0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bdf5:	83 f8 05             	cmp    eax,0x5
c000bdf8:	75 06                	jne    c000be00 <scanMADT()+0x42c>
c000bdfa:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bdff:	90                   	nop
c000be00:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000be05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000be09:	01 d0                	add    eax,edx
c000be0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be0f:	e9 50 fc ff ff       	jmp    c000ba64 <scanMADT()+0x90>
c000be14:	90                   	nop
c000be15:	eb 0d                	jmp    c000be24 <scanMADT()+0x450>
c000be17:	90                   	nop
c000be18:	90                   	nop
c000be19:	eb 09                	jmp    c000be24 <scanMADT()+0x450>
c000be1b:	90                   	nop
c000be1c:	90                   	nop
c000be1d:	eb 05                	jmp    c000be24 <scanMADT()+0x450>
c000be1f:	90                   	nop
c000be20:	90                   	nop
c000be21:	8d 76 00             	lea    esi,[esi+0x0]
c000be24:	83 c4 38             	add    esp,0x38
c000be27:	5b                   	pop    ebx
c000be28:	c3                   	ret    
c000be29:	90                   	nop
c000be2a:	66 90                	xchg   ax,ax

c000be2c <ACPI::ACPI()>:
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be33:	83 ec 08             	sub    esp,0x8
c000be36:	68 d1 23 02 c0       	push   0xc00223d1
c000be3b:	50                   	push   eax
c000be3c:	e8 b3 d3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000be41:	83 c4 10             	add    esp,0x10
c000be44:	ba cc 25 02 c0       	mov    edx,0xc00225cc
c000be49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4d:	89 10                	mov    DWORD PTR [eax],edx
c000be4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be53:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000be5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000be68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000be76:	e8 59 fb ff ff       	call   c000b9d4 <scanMADT()>
c000be7b:	90                   	nop
c000be7c:	83 c4 0c             	add    esp,0xc
c000be7f:	c3                   	ret    

c000be80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000be80:	83 ec 2c             	sub    esp,0x2c
c000be83:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000be87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be8b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be8f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000be93:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000be98:	88 d0                	mov    al,dl
c000be9a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be9e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bea3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000beab:	90                   	nop
c000beac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000beb0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000beb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000beba:	0f 8d b0 00 00 00    	jge    c000bf70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bec0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bec4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bec8:	83 c2 2a             	add    edx,0x2a
c000becb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000becf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bed4:	0f b7 c0             	movzx  eax,ax
c000bed7:	39 c2                	cmp    edx,eax
c000bed9:	0f 85 85 00 00 00    	jne    c000bf64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bedf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bee3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bee7:	83 c2 2a             	add    edx,0x2a
c000beea:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000beee:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bef3:	0f b6 c0             	movzx  eax,al
c000bef6:	39 c2                	cmp    edx,eax
c000bef8:	75 6a                	jne    c000bf64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000befa:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000beff:	85 c0                	test   eax,eax
c000bf01:	74 3d                	je     c000bf40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bf03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf0b:	83 c2 2a             	add    edx,0x2a
c000bf0e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bf12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf19:	39 c2                	cmp    edx,eax
c000bf1b:	74 13                	je     c000bf30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bf1d:	83 ec 0c             	sub    esp,0xc
c000bf20:	68 4c 25 02 c0       	push   0xc002254c
c000bf25:	e8 48 2f 00 00       	call   c000ee72 <KePanic(char const*)>
c000bf2a:	83 c4 10             	add    esp,0x10
c000bf2d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	68 d6 23 02 c0       	push   0xc00223d6
c000bf38:	e8 35 2f 00 00       	call   c000ee72 <KePanic(char const*)>
c000bf3d:	83 c4 10             	add    esp,0x10
c000bf40:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bf44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf4c:	83 c2 2a             	add    edx,0x2a
c000bf4f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bf53:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf55:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bf58:	89 01                	mov    DWORD PTR [ecx],eax
c000bf5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bf5d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf62:	66 90                	xchg   ax,ax
c000bf64:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bf69:	e9 3e ff ff ff       	jmp    c000beac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bf6e:	66 90                	xchg   ax,ax
c000bf70:	90                   	nop
c000bf71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf75:	83 c4 2c             	add    esp,0x2c
c000bf78:	c2 04 00             	ret    0x4
c000bf7b:	90                   	nop

c000bf7c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bf7c:	83 ec 1c             	sub    esp,0x1c
c000bf7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf83:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf87:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bf8b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bf90:	88 c8                	mov    al,cl
c000bf92:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bf96:	88 d0                	mov    al,dl
c000bf98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bf9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfaa:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bfad:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000bfb1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000bfb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bfbf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfc3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000bfc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfca:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000bfcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfd9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000bfdd:	83 c0 01             	add    eax,0x1
c000bfe0:	88 c1                	mov    cl,al
c000bfe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe6:	83 c2 2a             	add    edx,0x2a
c000bfe9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000bfed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bffe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c002:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c00a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c010:	8d 50 01             	lea    edx,[eax+0x1]
c000c013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c017:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c01d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c021:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c027:	3d 00 02 00 00       	cmp    eax,0x200
c000c02c:	75 12                	jne    c000c040 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c02e:	83 ec 0c             	sub    esp,0xc
c000c031:	68 e5 23 02 c0       	push   0xc00223e5
c000c036:	e8 37 2e 00 00       	call   c000ee72 <KePanic(char const*)>
c000c03b:	83 c4 10             	add    esp,0x10
c000c03e:	66 90                	xchg   ax,ax
c000c040:	90                   	nop
c000c041:	83 c4 1c             	add    esp,0x1c
c000c044:	c3                   	ret    
c000c045:	90                   	nop
c000c046:	66 90                	xchg   ax,ax

c000c048 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c048:	b8 00 00 00 00       	mov    eax,0x0
c000c04d:	c3                   	ret    
c000c04e:	66 90                	xchg   ax,ax

c000c050 <ACPI::detectPCI()>:
c000c050:	53                   	push   ebx
c000c051:	83 ec 28             	sub    esp,0x28
c000c054:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c059:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c05e:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c063:	83 ec 08             	sub    esp,0x8
c000c066:	68 02 24 02 c0       	push   0xc0022402
c000c06b:	50                   	push   eax
c000c06c:	e8 ef f8 ff ff       	call   c000b960 <findDataTable(unsigned char*, char*)>
c000c071:	83 c4 10             	add    esp,0x10
c000c074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c078:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c07d:	74 0d                	je     c000c08c <ACPI::detectPCI()+0x3c>
c000c07f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c084:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c089:	8d 76 00             	lea    esi,[esi+0x0]
c000c08c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c094:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c098:	8a 00                	mov    al,BYTE PTR [eax]
c000c09a:	0f b6 c0             	movzx  eax,al
c000c09d:	83 f8 01             	cmp    eax,0x1
c000c0a0:	75 0e                	jne    c000c0b0 <ACPI::detectPCI()+0x60>
c000c0a2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0a7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c0ac:	eb 2e                	jmp    c000c0dc <ACPI::detectPCI()+0x8c>
c000c0ae:	66 90                	xchg   ax,ax
c000c0b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0b4:	8a 00                	mov    al,BYTE PTR [eax]
c000c0b6:	0f b6 c0             	movzx  eax,al
c000c0b9:	83 f8 02             	cmp    eax,0x2
c000c0bc:	75 1e                	jne    c000c0dc <ACPI::detectPCI()+0x8c>
c000c0be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0c3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c0c8:	85 c0                	test   eax,eax
c000c0ca:	74 10                	je     c000c0dc <ACPI::detectPCI()+0x8c>
c000c0cc:	83 ec 0c             	sub    esp,0xc
c000c0cf:	68 7c 25 02 c0       	push   0xc002257c
c000c0d4:	e8 99 2d 00 00       	call   c000ee72 <KePanic(char const*)>
c000c0d9:	83 c4 10             	add    esp,0x10
c000c0dc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000c0e0:	83 f0 01             	xor    eax,0x1
c000c0e3:	0f b6 c0             	movzx  eax,al
c000c0e6:	85 c0                	test   eax,eax
c000c0e8:	74 46                	je     c000c130 <ACPI::detectPCI()+0xe0>
c000c0ea:	e8 41 40 ff ff       	call   c0000130 <manualPCIProbe>
c000c0ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000c0f8:	75 0e                	jne    c000c108 <ACPI::detectPCI()+0xb8>
c000c0fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0ff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c104:	eb 2a                	jmp    c000c130 <ACPI::detectPCI()+0xe0>
c000c106:	66 90                	xchg   ax,ax
c000c108:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000c10d:	75 21                	jne    c000c130 <ACPI::detectPCI()+0xe0>
c000c10f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c114:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c119:	85 c0                	test   eax,eax
c000c11b:	74 13                	je     c000c130 <ACPI::detectPCI()+0xe0>
c000c11d:	83 ec 0c             	sub    esp,0xc
c000c120:	68 7c 25 02 c0       	push   0xc002257c
c000c125:	e8 48 2d 00 00       	call   c000ee72 <KePanic(char const*)>
c000c12a:	83 c4 10             	add    esp,0x10
c000c12d:	8d 76 00             	lea    esi,[esi+0x0]
c000c130:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c135:	85 c0                	test   eax,eax
c000c137:	0f 84 87 00 00 00    	je     c000c1c4 <ACPI::detectPCI()+0x174>
c000c13d:	83 ec 0c             	sub    esp,0xc
c000c140:	68 07 24 02 c0       	push   0xc0022407
c000c145:	e8 96 06 00 00       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c155:	83 ec 0c             	sub    esp,0xc
c000c158:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c15c:	e8 ca 29 00 00       	call   c000eb2b <malloc>
c000c161:	83 c4 10             	add    esp,0x10
c000c164:	89 c3                	mov    ebx,eax
c000c166:	83 ec 0c             	sub    esp,0xc
c000c169:	53                   	push   ebx
c000c16a:	e8 01 ff 00 00       	call   c001c070 <PCI::PCI()>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17a:	83 ec 08             	sub    esp,0x8
c000c17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c181:	50                   	push   eax
c000c182:	e8 0b cf ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c18e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c190:	83 c0 08             	add    eax,0x8
c000c193:	8b 00                	mov    eax,DWORD PTR [eax]
c000c195:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c19a:	85 d2                	test   edx,edx
c000c19c:	74 0a                	je     c000c1a8 <ACPI::detectPCI()+0x158>
c000c19e:	ba 01 00 00 00       	mov    edx,0x1
c000c1a3:	eb 0b                	jmp    c000c1b0 <ACPI::detectPCI()+0x160>
c000c1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1a8:	ba 02 00 00 00       	mov    edx,0x2
c000c1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000c1b0:	6a 00                	push   0x0
c000c1b2:	6a 00                	push   0x0
c000c1b4:	52                   	push   edx
c000c1b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1b9:	ff d0                	call   eax
c000c1bb:	83 c4 10             	add    esp,0x10
c000c1be:	e9 91 00 00 00       	jmp    c000c254 <ACPI::detectPCI()+0x204>
c000c1c3:	90                   	nop
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	68 1f 24 02 c0       	push   0xc002241f
c000c1cc:	e8 0f 06 00 00       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000c1d1:	83 c4 10             	add    esp,0x10
c000c1d4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c1db:	83 ec 0c             	sub    esp,0xc
c000c1de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c1e2:	e8 44 29 00 00       	call   c000eb2b <malloc>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 c3                	mov    ebx,eax
c000c1ec:	83 ec 0c             	sub    esp,0xc
c000c1ef:	53                   	push   ebx
c000c1f0:	e8 81 0a 01 00       	call   c001cc76 <IDE::IDE()>
c000c1f5:	83 c4 10             	add    esp,0x10
c000c1f8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c1fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c200:	83 ec 08             	sub    esp,0x8
c000c203:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c207:	50                   	push   eax
c000c208:	e8 85 ce ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c20d:	83 c4 10             	add    esp,0x10
c000c210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c214:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c21e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c222:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c22b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c22f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c238:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c23c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c23e:	83 c0 08             	add    eax,0x8
c000c241:	8b 00                	mov    eax,DWORD PTR [eax]
c000c243:	6a 00                	push   0x0
c000c245:	6a 00                	push   0x0
c000c247:	6a 00                	push   0x0
c000c249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24d:	ff d0                	call   eax
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	66 90                	xchg   ax,ax
c000c254:	90                   	nop
c000c255:	83 c4 28             	add    esp,0x28
c000c258:	5b                   	pop    ebx
c000c259:	c3                   	ret    
c000c25a:	66 90                	xchg   ax,ax

c000c25c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	68 34 24 02 c0       	push   0xc0022434
c000c267:	e8 06 2c 00 00       	call   c000ee72 <KePanic(char const*)>
c000c26c:	83 c4 10             	add    esp,0x10
c000c26f:	90                   	nop
c000c270:	83 c4 0c             	add    esp,0xc
c000c273:	c3                   	ret    

c000c274 <ACPI::open(int, int, void*)>:
c000c274:	57                   	push   edi
c000c275:	56                   	push   esi
c000c276:	53                   	push   ebx
c000c277:	81 ec 70 01 00 00    	sub    esp,0x170
c000c27d:	83 ec 0c             	sub    esp,0xc
c000c280:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c287:	e8 c4 fd ff ff       	call   c000c050 <ACPI::detectPCI()>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	83 ec 0c             	sub    esp,0xc
c000c292:	68 a4 25 02 c0       	push   0xc00225a4
c000c297:	e8 44 05 00 00       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000c29c:	83 c4 10             	add    esp,0x10
c000c29f:	b8 4c 05 00 00       	mov    eax,0x54c
c000c2a4:	8a 00                	mov    al,BYTE PTR [eax]
c000c2a6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c2ad:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c2b5:	83 f8 01             	cmp    eax,0x1
c000c2b8:	75 12                	jne    c000c2cc <ACPI::open(int, int, void*)+0x58>
c000c2ba:	83 ec 0c             	sub    esp,0xc
c000c2bd:	68 45 24 02 c0       	push   0xc0022445
c000c2c2:	e8 30 82 00 00       	call   c00144f7 <Thr::loadKernelSymbolTable(char const*)>
c000c2c7:	83 c4 10             	add    esp,0x10
c000c2ca:	eb 34                	jmp    c000c300 <ACPI::open(int, int, void*)+0x8c>
c000c2cc:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c2d4:	3d bb 00 00 00       	cmp    eax,0xbb
c000c2d9:	75 15                	jne    c000c2f0 <ACPI::open(int, int, void*)+0x7c>
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	68 63 24 02 c0       	push   0xc0022463
c000c2e3:	e8 0f 82 00 00       	call   c00144f7 <Thr::loadKernelSymbolTable(char const*)>
c000c2e8:	83 c4 10             	add    esp,0x10
c000c2eb:	eb 13                	jmp    c000c300 <ACPI::open(int, int, void*)+0x8c>
c000c2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000c2f0:	83 ec 0c             	sub    esp,0xc
c000c2f3:	68 81 24 02 c0       	push   0xc0022481
c000c2f8:	e8 75 2b 00 00       	call   c000ee72 <KePanic(char const*)>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c308:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c313:	83 ec 0c             	sub    esp,0xc
c000c316:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c31d:	e8 09 28 00 00       	call   c000eb2b <malloc>
c000c322:	83 c4 10             	add    esp,0x10
c000c325:	89 c3                	mov    ebx,eax
c000c327:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c32c:	83 ec 04             	sub    esp,0x4
c000c32f:	50                   	push   eax
c000c330:	68 9b 24 02 c0       	push   0xc002249b
c000c335:	53                   	push   ebx
c000c336:	e8 f7 bd ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c345:	83 ec 08             	sub    esp,0x8
c000c348:	6a 01                	push   0x1
c000c34a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c351:	e8 fa bd ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c356:	83 c4 10             	add    esp,0x10
c000c359:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c360:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c368:	75 16                	jne    c000c380 <ACPI::open(int, int, void*)+0x10c>
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c374:	e8 35 be ff ff       	call   c00081ae <File::close()>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	eb 0a                	jmp    c000c388 <ACPI::open(int, int, void*)+0x114>
c000c37e:	66 90                	xchg   ax,ax
c000c380:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c388:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c390:	74 1e                	je     c000c3b0 <ACPI::open(int, int, void*)+0x13c>
c000c392:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c399:	8b 00                	mov    eax,DWORD PTR [eax]
c000c39b:	83 c0 08             	add    eax,0x8
c000c39e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3a0:	83 ec 0c             	sub    esp,0xc
c000c3a3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c3aa:	ff d0                	call   eax
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	90                   	nop
c000c3b0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c3b7:	83 f0 01             	xor    eax,0x1
c000c3ba:	0f b6 c0             	movzx  eax,al
c000c3bd:	85 c0                	test   eax,eax
c000c3bf:	74 2f                	je     c000c3f0 <ACPI::open(int, int, void*)+0x17c>
c000c3c1:	83 ec 0c             	sub    esp,0xc
c000c3c4:	68 b9 24 02 c0       	push   0xc00224b9
c000c3c9:	e8 12 04 00 00       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000c3ce:	83 c4 10             	add    esp,0x10
c000c3d1:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c3dc:	83 ec 0c             	sub    esp,0xc
c000c3df:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c3e6:	e8 a9 60 00 00       	call   c0012494 <Virt::setupPageSwapping(int)>
c000c3eb:	83 c4 10             	add    esp,0x10
c000c3ee:	66 90                	xchg   ax,ax
c000c3f0:	83 ec 0c             	sub    esp,0xc
c000c3f3:	68 d4 24 02 c0       	push   0xc00224d4
c000c3f8:	e8 e3 03 00 00       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000c3fd:	83 c4 10             	add    esp,0x10
c000c400:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c407:	83 ec 08             	sub    esp,0x8
c000c40a:	6a 13                	push   0x13
c000c40c:	50                   	push   eax
c000c40d:	e8 ae cf ff ff       	call   c00093c0 <getDevicesOfType(DeviceType)>
c000c412:	83 c4 0c             	add    esp,0xc
c000c415:	8d 76 00             	lea    esi,[esi+0x0]
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c422:	50                   	push   eax
c000c423:	e8 44 45 01 00       	call   c002096c <LinkedList<Device>::isEmpty()>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	83 f0 01             	xor    eax,0x1
c000c42e:	0f b6 c0             	movzx  eax,al
c000c431:	85 c0                	test   eax,eax
c000c433:	0f 84 47 01 00 00    	je     c000c580 <ACPI::open(int, int, void*)+0x30c>
c000c439:	83 ec 0c             	sub    esp,0xc
c000c43c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c443:	50                   	push   eax
c000c444:	e8 3f 45 01 00       	call   c0020988 <LinkedList<Device>::getFirstElement()>
c000c449:	83 c4 10             	add    esp,0x10
c000c44c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c453:	83 ec 0c             	sub    esp,0xc
c000c456:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c45d:	50                   	push   eax
c000c45e:	e8 2d 45 01 00       	call   c0020990 <LinkedList<Device>::removeFirst()>
c000c463:	83 c4 10             	add    esp,0x10
c000c466:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c46d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c474:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c47b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c47f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c485:	ba 09 00 00 00       	mov    edx,0x9
c000c48a:	fc                   	cld    
c000c48b:	89 c7                	mov    edi,eax
c000c48d:	89 de                	mov    esi,ebx
c000c48f:	89 d1                	mov    ecx,edx
c000c491:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c493:	83 ec 08             	sub    esp,0x8
c000c496:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c49a:	50                   	push   eax
c000c49b:	83 ec 24             	sub    esp,0x24
c000c49e:	89 e0                	mov    eax,esp
c000c4a0:	89 c3                	mov    ebx,eax
c000c4a2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c4a6:	ba 09 00 00 00       	mov    edx,0x9
c000c4ab:	89 df                	mov    edi,ebx
c000c4ad:	89 c6                	mov    esi,eax
c000c4af:	89 d1                	mov    ecx,edx
c000c4b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c4b3:	e8 a2 00 01 00       	call   c001c55a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c4b8:	83 c4 30             	add    esp,0x30
c000c4bb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c4c2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c4ca:	0f 84 48 ff ff ff    	je     c000c418 <ACPI::open(int, int, void*)+0x1a4>
c000c4d0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c4db:	83 ec 0c             	sub    esp,0xc
c000c4de:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c4e5:	e8 41 26 00 00       	call   c000eb2b <malloc>
c000c4ea:	83 c4 10             	add    esp,0x10
c000c4ed:	89 c3                	mov    ebx,eax
c000c4ef:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c4f4:	83 ec 04             	sub    esp,0x4
c000c4f7:	50                   	push   eax
c000c4f8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c4ff:	53                   	push   ebx
c000c500:	e8 2d bc ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c505:	83 c4 10             	add    esp,0x10
c000c508:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c50f:	83 ec 0c             	sub    esp,0xc
c000c512:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c519:	e8 f6 be ff ff       	call   c0008414 <File::exists()>
c000c51e:	83 c4 10             	add    esp,0x10
c000c521:	0f b6 c0             	movzx  eax,al
c000c524:	85 c0                	test   eax,eax
c000c526:	74 28                	je     c000c550 <ACPI::open(int, int, void*)+0x2dc>
c000c528:	83 ec 08             	sub    esp,0x8
c000c52b:	6a 01                	push   0x1
c000c52d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c534:	e8 38 8a 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c000c539:	83 c4 10             	add    esp,0x10
c000c53c:	83 ec 08             	sub    esp,0x8
c000c53f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c546:	50                   	push   eax
c000c547:	e8 77 8c 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	90                   	nop
c000c550:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c558:	0f 84 ba fe ff ff    	je     c000c418 <ACPI::open(int, int, void*)+0x1a4>
c000c55e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c565:	8b 00                	mov    eax,DWORD PTR [eax]
c000c567:	83 c0 08             	add    eax,0x8
c000c56a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c56c:	83 ec 0c             	sub    esp,0xc
c000c56f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c576:	ff d0                	call   eax
c000c578:	83 c4 10             	add    esp,0x10
c000c57b:	e9 98 fe ff ff       	jmp    c000c418 <ACPI::open(int, int, void*)+0x1a4>
c000c580:	83 ec 0c             	sub    esp,0xc
c000c583:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c58a:	50                   	push   eax
c000c58b:	e8 d8 43 01 00       	call   c0020968 <LinkedList<Device>::~LinkedList()>
c000c590:	83 c4 10             	add    esp,0x10
c000c593:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c599:	83 ec 08             	sub    esp,0x8
c000c59c:	6a 01                	push   0x1
c000c59e:	68 ee 24 02 c0       	push   0xc00224ee
c000c5a3:	e8 c9 89 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	83 ec 08             	sub    esp,0x8
c000c5ae:	53                   	push   ebx
c000c5af:	50                   	push   eax
c000c5b0:	e8 0e 8c 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c000c5b5:	83 c4 10             	add    esp,0x10
c000c5b8:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c5bd:	85 c0                	test   eax,eax
c000c5bf:	0f 84 27 01 00 00    	je     c000c6ec <ACPI::open(int, int, void*)+0x478>
c000c5c5:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c5ca:	85 c0                	test   eax,eax
c000c5cc:	0f 84 1a 01 00 00    	je     c000c6ec <ACPI::open(int, int, void*)+0x478>
c000c5d2:	83 ec 0c             	sub    esp,0xc
c000c5d5:	68 0b 25 02 c0       	push   0xc002250b
c000c5da:	e8 01 02 00 00       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000c5df:	83 c4 10             	add    esp,0x10
c000c5e2:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c5ed:	83 ec 0c             	sub    esp,0xc
c000c5f0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c5f7:	e8 2f 25 00 00       	call   c000eb2b <malloc>
c000c5fc:	83 c4 10             	add    esp,0x10
c000c5ff:	89 c3                	mov    ebx,eax
c000c601:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c606:	83 ec 04             	sub    esp,0x4
c000c609:	50                   	push   eax
c000c60a:	68 28 25 02 c0       	push   0xc0022528
c000c60f:	53                   	push   ebx
c000c610:	e8 1d bb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c615:	83 c4 10             	add    esp,0x10
c000c618:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c61f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c627:	74 1f                	je     c000c648 <ACPI::open(int, int, void*)+0x3d4>
c000c629:	83 ec 0c             	sub    esp,0xc
c000c62c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c633:	e8 dc bd ff ff       	call   c0008414 <File::exists()>
c000c638:	83 c4 10             	add    esp,0x10
c000c63b:	0f b6 c0             	movzx  eax,al
c000c63e:	85 c0                	test   eax,eax
c000c640:	74 06                	je     c000c648 <ACPI::open(int, int, void*)+0x3d4>
c000c642:	b0 01                	mov    al,0x1
c000c644:	eb 06                	jmp    c000c64c <ACPI::open(int, int, void*)+0x3d8>
c000c646:	66 90                	xchg   ax,ax
c000c648:	b0 00                	mov    al,0x0
c000c64a:	66 90                	xchg   ax,ax
c000c64c:	0f b6 c0             	movzx  eax,al
c000c64f:	85 c0                	test   eax,eax
c000c651:	74 25                	je     c000c678 <ACPI::open(int, int, void*)+0x404>
c000c653:	83 ec 08             	sub    esp,0x8
c000c656:	6a 01                	push   0x1
c000c658:	68 28 25 02 c0       	push   0xc0022528
c000c65d:	e8 0f 89 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	83 ec 08             	sub    esp,0x8
c000c668:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c66f:	50                   	push   eax
c000c670:	e8 4e 8b 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c000c675:	83 c4 10             	add    esp,0x10
c000c678:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c680:	74 2a                	je     c000c6ac <ACPI::open(int, int, void*)+0x438>
c000c682:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c68a:	74 20                	je     c000c6ac <ACPI::open(int, int, void*)+0x438>
c000c68c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c693:	8b 00                	mov    eax,DWORD PTR [eax]
c000c695:	83 c0 08             	add    eax,0x8
c000c698:	8b 00                	mov    eax,DWORD PTR [eax]
c000c69a:	83 ec 0c             	sub    esp,0xc
c000c69d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c6a4:	ff d0                	call   eax
c000c6a6:	83 c4 10             	add    esp,0x10
c000c6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c6ac:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c6b1:	83 ec 08             	sub    esp,0x8
c000c6b4:	68 45 25 02 c0       	push   0xc0022545
c000c6b9:	50                   	push   eax
c000c6ba:	e8 a1 f2 ff ff       	call   c000b960 <findDataTable(unsigned char*, char*)>
c000c6bf:	83 c4 10             	add    esp,0x10
c000c6c2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c6c9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c6d1:	74 19                	je     c000c6ec <ACPI::open(int, int, void*)+0x478>
c000c6d3:	83 ec 08             	sub    esp,0x8
c000c6d6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c6dd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c6e4:	e8 73 fb ff ff       	call   c000c25c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c6e9:	83 c4 10             	add    esp,0x10
c000c6ec:	b8 00 00 00 00       	mov    eax,0x0
c000c6f1:	81 c4 70 01 00 00    	add    esp,0x170
c000c6f7:	5b                   	pop    ebx
c000c6f8:	5e                   	pop    esi
c000c6f9:	5f                   	pop    edi
c000c6fa:	c3                   	ret    

c000c6fb <KeInitialiseAtexit()>:
c000c6fb:	83 ec 10             	sub    esp,0x10
c000c6fe:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c708:	6a 60                	push   0x60
c000c70a:	6a 00                	push   0x0
c000c70c:	68 00 ad 02 c0       	push   0xc002ad00
c000c711:	e8 da 3d ff ff       	call   c00004f0 <memset>
c000c716:	83 c4 1c             	add    esp,0x1c
c000c719:	c3                   	ret    

c000c71a <KeRegisterAtexit(void (*)(void*), void*)>:
c000c71a:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c71f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c723:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c72a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c72e:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c735:	40                   	inc    eax
c000c736:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c73b:	83 f8 17             	cmp    eax,0x17
c000c73e:	7e 0d                	jle    c000c74d <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c740:	c7 44 24 04 f0 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc00225f0
c000c748:	e9 25 27 00 00       	jmp    c000ee72 <KePanic(char const*)>
c000c74d:	c3                   	ret    

c000c74e <KeExecuteAtexit()>:
c000c74e:	53                   	push   ebx
c000c74f:	31 db                	xor    ebx,ebx
c000c751:	83 ec 08             	sub    esp,0x8
c000c754:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c75a:	7e 50                	jle    c000c7ac <KeExecuteAtexit()+0x5e>
c000c75c:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c763:	85 c0                	test   eax,eax
c000c765:	74 42                	je     c000c7a9 <KeExecuteAtexit()+0x5b>
c000c767:	51                   	push   ecx
c000c768:	50                   	push   eax
c000c769:	53                   	push   ebx
c000c76a:	68 09 26 02 c0       	push   0xc0022609
c000c76f:	e8 f0 a7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c774:	58                   	pop    eax
c000c775:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c77c:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c783:	c7 04 24 2b 26 02 c0 	mov    DWORD PTR [esp],0xc002262b
c000c78a:	e8 d5 a7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c78f:	c7 04 24 bb 29 02 c0 	mov    DWORD PTR [esp],0xc00229bb
c000c796:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c7a1:	e8 be a7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	43                   	inc    ebx
c000c7aa:	eb a8                	jmp    c000c754 <KeExecuteAtexit()+0x6>
c000c7ac:	83 c4 08             	add    esp,0x8
c000c7af:	5b                   	pop    ebx
c000c7b0:	c3                   	ret    

c000c7b1 <KeDisplaySplashScreen()>:
c000c7b1:	53                   	push   ebx
c000c7b2:	bb 01 00 00 00       	mov    ebx,0x1
c000c7b7:	83 ec 08             	sub    esp,0x8
c000c7ba:	43                   	inc    ebx
c000c7bb:	0f be 83 2e 26 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdd9d2]
c000c7c2:	85 c0                	test   eax,eax
c000c7c4:	74 15                	je     c000c7db <KeDisplaySplashScreen()+0x2a>
c000c7c6:	83 ec 0c             	sub    esp,0xc
c000c7c9:	6a 01                	push   0x1
c000c7cb:	53                   	push   ebx
c000c7cc:	6a 00                	push   0x0
c000c7ce:	6a 0f                	push   0xf
c000c7d0:	50                   	push   eax
c000c7d1:	e8 7a d4 00 00       	call   c0019c50 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c7d6:	83 c4 20             	add    esp,0x20
c000c7d9:	eb df                	jmp    c000c7ba <KeDisplaySplashScreen()+0x9>
c000c7db:	83 c4 08             	add    esp,0x8
c000c7de:	5b                   	pop    ebx
c000c7df:	c3                   	ret    

c000c7e0 <KeSetBootMessage(char const*)>:
c000c7e0:	57                   	push   edi
c000c7e1:	56                   	push   esi
c000c7e2:	53                   	push   ebx
c000c7e3:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c7e9:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c7f0:	68 9e 00 00 00       	push   0x9e
c000c7f5:	6a 00                	push   0x0
c000c7f7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c7fb:	56                   	push   esi
c000c7fc:	e8 ef 3c ff ff       	call   c00004f0 <memset>
c000c801:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c804:	e8 67 3d ff ff       	call   c0000570 <strlen>
c000c809:	ba 50 00 00 00       	mov    edx,0x50
c000c80e:	83 c4 10             	add    esp,0x10
c000c811:	29 c2                	sub    edx,eax
c000c813:	31 c9                	xor    ecx,ecx
c000c815:	83 e2 fe             	and    edx,0xfffffffe
c000c818:	01 f2                	add    edx,esi
c000c81a:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c81f:	84 c0                	test   al,al
c000c821:	74 0a                	je     c000c82d <KeSetBootMessage(char const*)+0x4d>
c000c823:	80 cc 07             	or     ah,0x7
c000c826:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c82a:	41                   	inc    ecx
c000c82b:	eb ed                	jmp    c000c81a <KeSetBootMessage(char const*)+0x3a>
c000c82d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c832:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c837:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c839:	50                   	push   eax
c000c83a:	50                   	push   eax
c000c83b:	53                   	push   ebx
c000c83c:	68 43 26 02 c0       	push   0xc0022643
c000c841:	e8 1e a7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c846:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c84c:	5b                   	pop    ebx
c000c84d:	5e                   	pop    esi
c000c84e:	5f                   	pop    edi
c000c84f:	c3                   	ret    

c000c850 <__cxa_atexit>:
c000c850:	31 c0                	xor    eax,eax
c000c852:	c3                   	ret    

c000c853 <__cxa_finalize>:
c000c853:	c3                   	ret    

c000c854 <__stack_chk_fail>:
c000c854:	55                   	push   ebp
c000c855:	89 e5                	mov    ebp,esp
c000c857:	83 ec 10             	sub    esp,0x10
c000c85a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c85d:	68 51 26 02 c0       	push   0xc0022651
c000c862:	e8 fd a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c867:	58                   	pop    eax
c000c868:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c86b:	5a                   	pop    edx
c000c86c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c86f:	68 51 26 02 c0       	push   0xc0022651
c000c874:	e8 eb a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c879:	c7 04 24 59 26 02 c0 	mov    DWORD PTR [esp],0xc0022659
c000c880:	e8 ed 25 00 00       	call   c000ee72 <KePanic(char const*)>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	c9                   	leave  
c000c889:	c3                   	ret    

c000c88a <__cxa_pure_virtual>:
c000c88a:	83 ec 18             	sub    esp,0x18
c000c88d:	68 71 26 02 c0       	push   0xc0022671
c000c892:	e8 db 25 00 00       	call   c000ee72 <KePanic(char const*)>
c000c897:	83 c4 1c             	add    esp,0x1c
c000c89a:	c3                   	ret    

c000c89b <operator new[](unsigned long)>:
c000c89b:	e9 8b 22 00 00       	jmp    c000eb2b <malloc>

c000c8a0 <operator delete(void*, unsigned long)>:
c000c8a0:	e9 a6 22 00 00       	jmp    c000eb4b <rfree>

c000c8a5 <operator delete[](void*)>:
c000c8a5:	e9 a1 22 00 00       	jmp    c000eb4b <rfree>

c000c8aa <operator delete[](void*, unsigned long)>:
c000c8aa:	e9 9c 22 00 00       	jmp    c000eb4b <rfree>
c000c8af:	90                   	nop

c000c8b0 <CUnlockScheduler>:
c000c8b0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000c8b8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c8bd:	85 c0                	test   eax,eax
c000c8bf:	75 03                	jne    c000c8c4 <CUnlockScheduler+0x14>
c000c8c1:	fb                   	sti    
c000c8c2:	66 90                	xchg   ax,ax
c000c8c4:	90                   	nop
c000c8c5:	c3                   	ret    
c000c8c6:	66 90                	xchg   ax,ax

c000c8c8 <CLockScheduler>:
c000c8c8:	fa                   	cli    
c000c8c9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c8ce:	83 c0 01             	add    eax,0x1
c000c8d1:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000c8d6:	90                   	nop
c000c8d7:	c3                   	ret    

c000c8d8 <CPrintf>:
c000c8d8:	83 ec 0c             	sub    esp,0xc
c000c8db:	83 ec 08             	sub    esp,0x8
c000c8de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8e2:	68 84 26 02 c0       	push   0xc0022684
c000c8e7:	e8 78 a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	90                   	nop
c000c8f0:	83 c4 0c             	add    esp,0xc
c000c8f3:	c3                   	ret    

c000c8f4 <CmOpen(char const*)>:
c000c8f4:	57                   	push   edi
c000c8f5:	56                   	push   esi
c000c8f6:	53                   	push   ebx
c000c8f7:	83 ec 1c             	sub    esp,0x1c
c000c8fa:	6a 30                	push   0x30
c000c8fc:	e8 2a 22 00 00       	call   c000eb2b <malloc>
c000c901:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c908:	89 c3                	mov    ebx,eax
c000c90a:	e8 1c 22 00 00       	call   c000eb2b <malloc>
c000c90f:	83 c4 0c             	add    esp,0xc
c000c912:	89 c6                	mov    esi,eax
c000c914:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000c91a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c91e:	50                   	push   eax
c000c91f:	e8 0e b8 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c924:	83 c4 0c             	add    esp,0xc
c000c927:	89 33                	mov    DWORD PTR [ebx],esi
c000c929:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c92d:	50                   	push   eax
c000c92e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c932:	50                   	push   eax
c000c933:	56                   	push   esi
c000c934:	e8 19 bb ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000c939:	5a                   	pop    edx
c000c93a:	59                   	pop    ecx
c000c93b:	6a 01                	push   0x1
c000c93d:	ff 33                	push   DWORD PTR [ebx]
c000c93f:	e8 0c b8 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c944:	5e                   	pop    esi
c000c945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c949:	e8 dd 21 00 00       	call   c000eb2b <malloc>
c000c94e:	5a                   	pop    edx
c000c94f:	89 c7                	mov    edi,eax
c000c951:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c955:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c957:	8b 10                	mov    edx,DWORD PTR [eax]
c000c959:	56                   	push   esi
c000c95a:	57                   	push   edi
c000c95b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c95f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c963:	50                   	push   eax
c000c964:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c967:	83 c4 14             	add    esp,0x14
c000c96a:	ff 33                	push   DWORD PTR [ebx]
c000c96c:	e8 3d b8 ff ff       	call   c00081ae <File::close()>
c000c971:	59                   	pop    ecx
c000c972:	58                   	pop    eax
c000c973:	6a 13                	push   0x13
c000c975:	ff 33                	push   DWORD PTR [ebx]
c000c977:	e8 d4 b7 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c97c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c97e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c980:	89 34 24             	mov    DWORD PTR [esp],esi
c000c983:	57                   	push   edi
c000c984:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c988:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c98c:	50                   	push   eax
c000c98d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c990:	83 c4 14             	add    esp,0x14
c000c993:	57                   	push   edi
c000c994:	e8 a2 21 00 00       	call   c000eb3b <free>
c000c999:	83 c4 10             	add    esp,0x10
c000c99c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c99f:	75 10                	jne    c000c9b1 <CmOpen(char const*)+0xbd>
c000c9a1:	83 ec 0c             	sub    esp,0xc
c000c9a4:	68 87 26 02 c0       	push   0xc0022687
c000c9a9:	e8 c4 24 00 00       	call   c000ee72 <KePanic(char const*)>
c000c9ae:	83 c4 10             	add    esp,0x10
c000c9b1:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c9b4:	50                   	push   eax
c000c9b5:	6a 00                	push   0x0
c000c9b7:	6a 00                	push   0x0
c000c9b9:	ff 33                	push   DWORD PTR [ebx]
c000c9bb:	e8 4e b8 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c9c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9c4:	89 34 24             	mov    DWORD PTR [esp],esi
c000c9c7:	57                   	push   edi
c000c9c8:	6a 00                	push   0x0
c000c9ca:	6a 2b                	push   0x2b
c000c9cc:	50                   	push   eax
c000c9cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c9d0:	83 c4 1c             	add    esp,0x1c
c000c9d3:	6a 00                	push   0x0
c000c9d5:	6a 00                	push   0x0
c000c9d7:	ff 33                	push   DWORD PTR [ebx]
c000c9d9:	e8 30 b8 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c9de:	83 c4 0c             	add    esp,0xc
c000c9e1:	6a 08                	push   0x8
c000c9e3:	68 98 26 02 c0       	push   0xc0022698
c000c9e8:	57                   	push   edi
c000c9e9:	e8 92 39 ff ff       	call   c0000380 <memcmp>
c000c9ee:	83 c4 10             	add    esp,0x10
c000c9f1:	85 c0                	test   eax,eax
c000c9f3:	74 10                	je     c000ca05 <CmOpen(char const*)+0x111>
c000c9f5:	83 ec 0c             	sub    esp,0xc
c000c9f8:	68 a1 26 02 c0       	push   0xc00226a1
c000c9fd:	e8 70 24 00 00       	call   c000ee72 <KePanic(char const*)>
c000ca02:	83 c4 10             	add    esp,0x10
c000ca05:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000ca09:	89 d8                	mov    eax,ebx
c000ca0b:	83 c4 10             	add    esp,0x10
c000ca0e:	5b                   	pop    ebx
c000ca0f:	5e                   	pop    esi
c000ca10:	5f                   	pop    edi
c000ca11:	c3                   	ret    

c000ca12 <CmClose(Reghive_Tag*)>:
c000ca12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca16:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ca1a:	74 0b                	je     c000ca27 <CmClose(Reghive_Tag*)+0x15>
c000ca1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca22:	e9 87 b7 ff ff       	jmp    c00081ae <File::close()>
c000ca27:	c3                   	ret    

c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000ca28:	53                   	push   ebx
c000ca29:	83 ec 18             	sub    esp,0x18
c000ca2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca30:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca34:	74 29                	je     c000ca5f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000ca36:	50                   	push   eax
c000ca37:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000ca3c:	99                   	cdq    
c000ca3d:	52                   	push   edx
c000ca3e:	50                   	push   eax
c000ca3f:	ff 33                	push   DWORD PTR [ebx]
c000ca41:	e8 c8 b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000ca46:	5a                   	pop    edx
c000ca47:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca49:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca4d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca4f:	51                   	push   ecx
c000ca50:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ca54:	6a 00                	push   0x0
c000ca56:	6a 2b                	push   0x2b
c000ca58:	50                   	push   eax
c000ca59:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca5c:	83 c4 20             	add    esp,0x20
c000ca5f:	83 c4 18             	add    esp,0x18
c000ca62:	5b                   	pop    ebx
c000ca63:	c3                   	ret    

c000ca64 <CmGetString(Reghive_Tag*, int, char*)>:
c000ca64:	55                   	push   ebp
c000ca65:	57                   	push   edi
c000ca66:	56                   	push   esi
c000ca67:	53                   	push   ebx
c000ca68:	31 db                	xor    ebx,ebx
c000ca6a:	83 ec 70             	sub    esp,0x70
c000ca6d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000ca74:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000ca78:	50                   	push   eax
c000ca79:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000ca80:	55                   	push   ebp
c000ca81:	e8 a2 ff ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ca86:	83 c4 10             	add    esp,0x10
c000ca89:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000ca8e:	c1 e0 08             	shl    eax,0x8
c000ca91:	89 c2                	mov    edx,eax
c000ca93:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000ca98:	09 d0                	or     eax,edx
c000ca9a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000ca9f:	c1 e0 08             	shl    eax,0x8
c000caa2:	09 d0                	or     eax,edx
c000caa4:	74 25                	je     c000cacb <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000caa6:	6b fb 0d             	imul   edi,ebx,0xd
c000caa9:	52                   	push   edx
c000caaa:	8d 54 24 39          	lea    edx,[esp+0x39]
c000caae:	52                   	push   edx
c000caaf:	50                   	push   eax
c000cab0:	55                   	push   ebp
c000cab1:	e8 72 ff ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cab6:	8d 74 24 49          	lea    esi,[esp+0x49]
c000caba:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000cac1:	b9 27 00 00 00       	mov    ecx,0x27
c000cac6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	83 c3 03             	add    ebx,0x3
c000cace:	83 fb 15             	cmp    ebx,0x15
c000cad1:	75 b6                	jne    c000ca89 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000cad3:	83 c4 6c             	add    esp,0x6c
c000cad6:	5b                   	pop    ebx
c000cad7:	5e                   	pop    esi
c000cad8:	5f                   	pop    edi
c000cad9:	5d                   	pop    ebp
c000cada:	c3                   	ret    

c000cadb <CmEnterDirectory(Reghive_Tag*, int)>:
c000cadb:	83 ec 40             	sub    esp,0x40
c000cade:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cae2:	50                   	push   eax
c000cae3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cae7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000caeb:	e8 38 ff ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000caf0:	83 c4 10             	add    esp,0x10
c000caf3:	83 c8 ff             	or     eax,0xffffffff
c000caf6:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000cafb:	75 19                	jne    c000cb16 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000cafd:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000cb02:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cb07:	c1 e0 08             	shl    eax,0x8
c000cb0a:	09 c2                	or     edx,eax
c000cb0c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000cb11:	c1 e0 10             	shl    eax,0x10
c000cb14:	09 d0                	or     eax,edx
c000cb16:	83 c4 3c             	add    esp,0x3c
c000cb19:	c3                   	ret    

c000cb1a <CmGetNext(Reghive_Tag*, int)>:
c000cb1a:	83 ec 40             	sub    esp,0x40
c000cb1d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cb21:	50                   	push   eax
c000cb22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb26:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb2a:	e8 f9 fe ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb2f:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000cb34:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000cb39:	c1 e0 08             	shl    eax,0x8
c000cb3c:	09 c2                	or     edx,eax
c000cb3e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000cb43:	83 c4 4c             	add    esp,0x4c
c000cb46:	c1 e0 10             	shl    eax,0x10
c000cb49:	09 d0                	or     eax,edx
c000cb4b:	c3                   	ret    

c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000cb4c:	53                   	push   ebx
c000cb4d:	83 ec 18             	sub    esp,0x18
c000cb50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cb54:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cb58:	74 29                	je     c000cb83 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cb5a:	50                   	push   eax
c000cb5b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000cb60:	99                   	cdq    
c000cb61:	52                   	push   edx
c000cb62:	50                   	push   eax
c000cb63:	ff 33                	push   DWORD PTR [ebx]
c000cb65:	e8 a4 b6 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cb6a:	5a                   	pop    edx
c000cb6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb6d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cb71:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb73:	51                   	push   ecx
c000cb74:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000cb78:	6a 00                	push   0x0
c000cb7a:	6a 2b                	push   0x2b
c000cb7c:	50                   	push   eax
c000cb7d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cb80:	83 c4 20             	add    esp,0x20
c000cb83:	83 c4 18             	add    esp,0x18
c000cb86:	5b                   	pop    ebx
c000cb87:	c3                   	ret    

c000cb88 <CmFreeExtent(Reghive_Tag*, int)>:
c000cb88:	53                   	push   ebx
c000cb89:	83 ec 3c             	sub    esp,0x3c
c000cb8c:	6a 2b                	push   0x2b
c000cb8e:	6a 00                	push   0x0
c000cb90:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000cb94:	53                   	push   ebx
c000cb95:	e8 56 39 ff ff       	call   c00004f0 <memset>
c000cb9a:	83 c4 0c             	add    esp,0xc
c000cb9d:	53                   	push   ebx
c000cb9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cba2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cba6:	e8 a1 ff ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cbab:	83 c4 48             	add    esp,0x48
c000cbae:	5b                   	pop    ebx
c000cbaf:	c3                   	ret    

c000cbb0 <CmUpdateHeader(Reghive_Tag*)>:
c000cbb0:	83 ec 0c             	sub    esp,0xc
c000cbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cbbb:	74 10                	je     c000cbcd <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000cbbd:	52                   	push   edx
c000cbbe:	8d 50 05             	lea    edx,[eax+0x5]
c000cbc1:	52                   	push   edx
c000cbc2:	6a 00                	push   0x0
c000cbc4:	50                   	push   eax
c000cbc5:	e8 82 ff ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cbca:	83 c4 10             	add    esp,0x10
c000cbcd:	83 c4 0c             	add    esp,0xc
c000cbd0:	c3                   	ret    

c000cbd1 <CmExpand(Reghive_Tag*, int)>:
c000cbd1:	57                   	push   edi
c000cbd2:	56                   	push   esi
c000cbd3:	83 ce ff             	or     esi,0xffffffff
c000cbd6:	53                   	push   ebx
c000cbd7:	83 ec 30             	sub    esp,0x30
c000cbda:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000cbde:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cbe2:	74 5f                	je     c000cc43 <CmExpand(Reghive_Tag*, int)+0x72>
c000cbe4:	31 d2                	xor    edx,edx
c000cbe6:	31 f6                	xor    esi,esi
c000cbe8:	50                   	push   eax
c000cbe9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000cbed:	52                   	push   edx
c000cbee:	50                   	push   eax
c000cbef:	ff 33                	push   DWORD PTR [ebx]
c000cbf1:	e8 18 b6 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cbf6:	83 c4 0c             	add    esp,0xc
c000cbf9:	6a 2b                	push   0x2b
c000cbfb:	6a 00                	push   0x0
c000cbfd:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000cc01:	57                   	push   edi
c000cc02:	e8 e9 38 ff ff       	call   c00004f0 <memset>
c000cc07:	83 c4 10             	add    esp,0x10
c000cc0a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cc0e:	7d 1b                	jge    c000cc2b <CmExpand(Reghive_Tag*, int)+0x5a>
c000cc10:	83 ec 0c             	sub    esp,0xc
c000cc13:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc15:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000cc19:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc1b:	46                   	inc    esi
c000cc1c:	51                   	push   ecx
c000cc1d:	57                   	push   edi
c000cc1e:	6a 00                	push   0x0
c000cc20:	6a 2b                	push   0x2b
c000cc22:	50                   	push   eax
c000cc23:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cc26:	83 c4 20             	add    esp,0x20
c000cc29:	eb df                	jmp    c000cc0a <CmExpand(Reghive_Tag*, int)+0x39>
c000cc2b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000cc2f:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000cc32:	83 ec 0c             	sub    esp,0xc
c000cc35:	01 f2                	add    edx,esi
c000cc37:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000cc3a:	53                   	push   ebx
c000cc3b:	e8 70 ff ff ff       	call   c000cbb0 <CmUpdateHeader(Reghive_Tag*)>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	83 c4 30             	add    esp,0x30
c000cc46:	89 f0                	mov    eax,esi
c000cc48:	5b                   	pop    ebx
c000cc49:	5e                   	pop    esi
c000cc4a:	5f                   	pop    edi
c000cc4b:	c3                   	ret    

c000cc4c <CmFindUnusedExtent(Reghive_Tag*)>:
c000cc4c:	55                   	push   ebp
c000cc4d:	57                   	push   edi
c000cc4e:	56                   	push   esi
c000cc4f:	53                   	push   ebx
c000cc50:	83 cb ff             	or     ebx,0xffffffff
c000cc53:	83 ec 1c             	sub    esp,0x1c
c000cc56:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cc5a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cc5e:	74 68                	je     c000ccc8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cc60:	be 2b 00 00 00       	mov    esi,0x2b
c000cc65:	51                   	push   ecx
c000cc66:	31 ff                	xor    edi,edi
c000cc68:	6a 00                	push   0x0
c000cc6a:	31 db                	xor    ebx,ebx
c000cc6c:	6a 00                	push   0x0
c000cc6e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cc71:	e8 98 b5 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cc76:	83 c4 10             	add    esp,0x10
c000cc79:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cc7c:	76 3b                	jbe    c000ccb9 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000cc7e:	83 ec 0c             	sub    esp,0xc
c000cc81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc84:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cc88:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc8a:	51                   	push   ecx
c000cc8b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cc8f:	51                   	push   ecx
c000cc90:	6a 00                	push   0x0
c000cc92:	6a 01                	push   0x1
c000cc94:	50                   	push   eax
c000cc95:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc98:	83 c4 20             	add    esp,0x20
c000cc9b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cca0:	74 26                	je     c000ccc8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cca2:	43                   	inc    ebx
c000cca3:	52                   	push   edx
c000cca4:	57                   	push   edi
c000cca5:	56                   	push   esi
c000cca6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cca9:	e8 60 b5 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000ccae:	83 c6 2b             	add    esi,0x2b
c000ccb1:	83 d7 00             	adc    edi,0x0
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	eb c0                	jmp    c000cc79 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000ccb9:	50                   	push   eax
c000ccba:	50                   	push   eax
c000ccbb:	6a 40                	push   0x40
c000ccbd:	55                   	push   ebp
c000ccbe:	e8 0e ff ff ff       	call   c000cbd1 <CmExpand(Reghive_Tag*, int)>
c000ccc3:	83 c4 10             	add    esp,0x10
c000ccc6:	89 c3                	mov    ebx,eax
c000ccc8:	83 c4 1c             	add    esp,0x1c
c000cccb:	89 d8                	mov    eax,ebx
c000cccd:	5b                   	pop    ebx
c000ccce:	5e                   	pop    esi
c000cccf:	5f                   	pop    edi
c000ccd0:	5d                   	pop    ebp
c000ccd1:	c3                   	ret    

c000ccd2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000ccd2:	55                   	push   ebp
c000ccd3:	57                   	push   edi
c000ccd4:	56                   	push   esi
c000ccd5:	53                   	push   ebx
c000ccd6:	81 ec 88 00 00 00    	sub    esp,0x88
c000ccdc:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cce3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ccea:	e8 5d ff ff ff       	call   c000cc4c <CmFindUnusedExtent(Reghive_Tag*)>
c000ccef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ccf3:	83 c4 0c             	add    esp,0xc
c000ccf6:	6a 2b                	push   0x2b
c000ccf8:	6a 00                	push   0x0
c000ccfa:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000ccfe:	55                   	push   ebp
c000ccff:	e8 ec 37 ff ff       	call   c00004f0 <memset>
c000cd04:	83 c4 10             	add    esp,0x10
c000cd07:	85 db                	test   ebx,ebx
c000cd09:	74 12                	je     c000cd1d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cd0b:	51                   	push   ecx
c000cd0c:	55                   	push   ebp
c000cd0d:	53                   	push   ebx
c000cd0e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd15:	e8 0e fd ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd1a:	83 c4 10             	add    esp,0x10
c000cd1d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cd21:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cd28:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cd2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cd2f:	85 db                	test   ebx,ebx
c000cd31:	74 49                	je     c000cd7c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cd33:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cd38:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cd3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd41:	c1 e0 08             	shl    eax,0x8
c000cd44:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cd4a:	09 c8                	or     eax,ecx
c000cd4c:	74 11                	je     c000cd5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cd4e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cd52:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cd56:	c1 e8 10             	shr    eax,0x10
c000cd59:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cd5d:	eb 0f                	jmp    c000cd6e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cd5f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cd64:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cd69:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cd6e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cd72:	c1 ea 08             	shr    edx,0x8
c000cd75:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cd7a:	eb 0f                	jmp    c000cd8b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cd7c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cd81:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cd86:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cd8b:	52                   	push   edx
c000cd8c:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cd90:	50                   	push   eax
c000cd91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd95:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd9c:	e8 ab fd ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cda1:	83 c4 10             	add    esp,0x10
c000cda4:	85 db                	test   ebx,ebx
c000cda6:	74 12                	je     c000cdba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cda8:	50                   	push   eax
c000cda9:	55                   	push   ebp
c000cdaa:	53                   	push   ebx
c000cdab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cdb2:	e8 95 fd ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cdb7:	83 c4 10             	add    esp,0x10
c000cdba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdbe:	83 c4 7c             	add    esp,0x7c
c000cdc1:	5b                   	pop    ebx
c000cdc2:	5e                   	pop    esi
c000cdc3:	5f                   	pop    edi
c000cdc4:	5d                   	pop    ebp
c000cdc5:	c3                   	ret    

c000cdc6 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cdc6:	55                   	push   ebp
c000cdc7:	57                   	push   edi
c000cdc8:	56                   	push   esi
c000cdc9:	53                   	push   ebx
c000cdca:	bb 27 00 00 00       	mov    ebx,0x27
c000cdcf:	81 ec 88 00 00 00    	sub    esp,0x88
c000cdd5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cddc:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cde3:	e8 88 37 ff ff       	call   c0000570 <strlen>
c000cde8:	8d 48 26             	lea    ecx,[eax+0x26]
c000cdeb:	89 c8                	mov    eax,ecx
c000cded:	99                   	cdq    
c000cdee:	f7 fb                	idiv   ebx
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cdfd:	7e 10                	jle    c000ce0f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cdff:	83 ec 0c             	sub    esp,0xc
c000ce02:	68 b2 26 02 c0       	push   0xc00226b2
c000ce07:	e8 66 20 00 00       	call   c000ee72 <KePanic(char const*)>
c000ce0c:	83 c4 10             	add    esp,0x10
c000ce0f:	31 ff                	xor    edi,edi
c000ce11:	50                   	push   eax
c000ce12:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000ce16:	53                   	push   ebx
c000ce17:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ce1e:	56                   	push   esi
c000ce1f:	e8 04 fc ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce24:	83 c4 10             	add    esp,0x10
c000ce27:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000ce2b:	89 d0                	mov    eax,edx
c000ce2d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000ce31:	c1 e0 08             	shl    eax,0x8
c000ce34:	09 c2                	or     edx,eax
c000ce36:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000ce3a:	c1 e2 08             	shl    edx,0x8
c000ce3d:	09 c2                	or     edx,eax
c000ce3f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ce43:	7e 76                	jle    c000cebb <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000ce45:	85 d2                	test   edx,edx
c000ce47:	75 25                	jne    c000ce6e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000ce49:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000ce4e:	8d 44 24 45          	lea    eax,[esp+0x45]
c000ce52:	50                   	push   eax
c000ce53:	6a 00                	push   0x0
c000ce55:	6a 00                	push   0x0
c000ce57:	56                   	push   esi
c000ce58:	e8 75 fe ff ff       	call   c000ccd2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 c2                	mov    edx,eax
c000ce62:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000ce65:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000ce68:	c1 f8 10             	sar    eax,0x10
c000ce6b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000ce6e:	55                   	push   ebp
c000ce6f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000ce73:	55                   	push   ebp
c000ce74:	52                   	push   edx
c000ce75:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ce79:	56                   	push   esi
c000ce7a:	e8 a9 fb ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce7f:	83 c4 0c             	add    esp,0xc
c000ce82:	6a 27                	push   0x27
c000ce84:	6a 00                	push   0x0
c000ce86:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ce8a:	51                   	push   ecx
c000ce8b:	e8 60 36 ff ff       	call   c00004f0 <memset>
c000ce90:	83 c4 0c             	add    esp,0xc
c000ce93:	6b c7 27             	imul   eax,edi,0x27
c000ce96:	6a 27                	push   0x27
c000ce98:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000ce9f:	50                   	push   eax
c000cea0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cea4:	51                   	push   ecx
c000cea5:	e8 d6 37 ff ff       	call   c0000680 <strncpy>
c000ceaa:	83 c4 0c             	add    esp,0xc
c000cead:	55                   	push   ebp
c000ceae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ceb2:	52                   	push   edx
c000ceb3:	56                   	push   esi
c000ceb4:	e8 93 fc ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ceb9:	eb 19                	jmp    c000ced4 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000cebb:	85 d2                	test   edx,edx
c000cebd:	74 18                	je     c000ced7 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cebf:	51                   	push   ecx
c000cec0:	51                   	push   ecx
c000cec1:	52                   	push   edx
c000cec2:	56                   	push   esi
c000cec3:	e8 c0 fc ff ff       	call   c000cb88 <CmFreeExtent(Reghive_Tag*, int)>
c000cec8:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cecc:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000ced0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000ced4:	83 c4 10             	add    esp,0x10
c000ced7:	47                   	inc    edi
c000ced8:	83 c3 03             	add    ebx,0x3
c000cedb:	83 ff 07             	cmp    edi,0x7
c000cede:	0f 85 43 ff ff ff    	jne    c000ce27 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cee4:	50                   	push   eax
c000cee5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cee9:	50                   	push   eax
c000ceea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cef1:	56                   	push   esi
c000cef2:	e8 55 fc ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cef7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cefd:	5b                   	pop    ebx
c000cefe:	5e                   	pop    esi
c000ceff:	5f                   	pop    edi
c000cf00:	5d                   	pop    ebp
c000cf01:	c3                   	ret    

c000cf02 <CmGetMatch(char*, char*, bool, bool*)>:
c000cf02:	56                   	push   esi
c000cf03:	53                   	push   ebx
c000cf04:	50                   	push   eax
c000cf05:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cf09:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cf0e:	74 25                	je     c000cf35 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cf10:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cf13:	31 db                	xor    ebx,ebx
c000cf15:	50                   	push   eax
c000cf16:	50                   	push   eax
c000cf17:	8d 04 9d 00 4a 02 c0 	lea    eax,[ebx*4-0x3ffdb600]
c000cf1e:	50                   	push   eax
c000cf1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf23:	e8 28 38 ff ff       	call   c0000750 <strcmp>
c000cf28:	83 c4 10             	add    esp,0x10
c000cf2b:	85 c0                	test   eax,eax
c000cf2d:	74 2e                	je     c000cf5d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cf2f:	43                   	inc    ebx
c000cf30:	83 fb 3f             	cmp    ebx,0x3f
c000cf33:	75 e0                	jne    c000cf15 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cf35:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cf38:	31 db                	xor    ebx,ebx
c000cf3a:	8d 04 9d 00 4a 02 c0 	lea    eax,[ebx*4-0x3ffdb600]
c000cf41:	51                   	push   ecx
c000cf42:	51                   	push   ecx
c000cf43:	50                   	push   eax
c000cf44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cf48:	e8 03 38 ff ff       	call   c0000750 <strcmp>
c000cf4d:	83 c4 10             	add    esp,0x10
c000cf50:	85 c0                	test   eax,eax
c000cf52:	74 09                	je     c000cf5d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cf54:	43                   	inc    ebx
c000cf55:	83 fb 3f             	cmp    ebx,0x3f
c000cf58:	75 e0                	jne    c000cf3a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cf5a:	83 cb ff             	or     ebx,0xffffffff
c000cf5d:	89 d8                	mov    eax,ebx
c000cf5f:	5a                   	pop    edx
c000cf60:	5b                   	pop    ebx
c000cf61:	5e                   	pop    esi
c000cf62:	c3                   	ret    

c000cf63 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cf63:	55                   	push   ebp
c000cf64:	31 c0                	xor    eax,eax
c000cf66:	57                   	push   edi
c000cf67:	56                   	push   esi
c000cf68:	53                   	push   ebx
c000cf69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cf6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf71:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cf73:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cf77:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cf7e:	83 fd 1f             	cmp    ebp,0x1f
c000cf81:	7f 0b                	jg     c000cf8e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cf83:	0f b6 c2             	movzx  eax,dl
c000cf86:	d3 e0                	shl    eax,cl
c000cf88:	09 07                	or     DWORD PTR [edi],eax
c000cf8a:	b0 01                	mov    al,0x1
c000cf8c:	01 33                	add    DWORD PTR [ebx],esi
c000cf8e:	5b                   	pop    ebx
c000cf8f:	5e                   	pop    esi
c000cf90:	5f                   	pop    edi
c000cf91:	5d                   	pop    ebp
c000cf92:	c3                   	ret    

c000cf93 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cf93:	57                   	push   edi
c000cf94:	56                   	push   esi
c000cf95:	53                   	push   ebx
c000cf96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf9a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cf9e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cfa2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cfa6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cfa8:	7c 17                	jl     c000cfc1 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cfaa:	8b 17                	mov    edx,DWORD PTR [edi]
c000cfac:	b8 01 00 00 00       	mov    eax,0x1
c000cfb1:	d3 e0                	shl    eax,cl
c000cfb3:	48                   	dec    eax
c000cfb4:	21 d0                	and    eax,edx
c000cfb6:	d3 ea                	shr    edx,cl
c000cfb8:	89 17                	mov    DWORD PTR [edi],edx
c000cfba:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cfbc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cfbf:	eb 05                	jmp    c000cfc6 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cfc1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cfc4:	31 c0                	xor    eax,eax
c000cfc6:	5b                   	pop    ebx
c000cfc7:	5e                   	pop    esi
c000cfc8:	5f                   	pop    edi
c000cfc9:	c3                   	ret    

c000cfca <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cfca:	83 ec 40             	sub    esp,0x40
c000cfcd:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cfd1:	50                   	push   eax
c000cfd2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cfd6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cfda:	e8 49 fa ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cfdf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cfe3:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cfe7:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cfeb:	89 10                	mov    DWORD PTR [eax],edx
c000cfed:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cff0:	83 c4 4c             	add    esp,0x4c
c000cff3:	c3                   	ret    

c000cff4 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cff4:	55                   	push   ebp
c000cff5:	57                   	push   edi
c000cff6:	56                   	push   esi
c000cff7:	53                   	push   ebx
c000cff8:	83 ec 40             	sub    esp,0x40
c000cffb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cfff:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d003:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d007:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d00b:	53                   	push   ebx
c000d00c:	56                   	push   esi
c000d00d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d011:	e8 12 fa ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d016:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d01a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d01e:	83 c4 0c             	add    esp,0xc
c000d021:	53                   	push   ebx
c000d022:	56                   	push   esi
c000d023:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d027:	e8 20 fb ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d02c:	83 c4 4c             	add    esp,0x4c
c000d02f:	5b                   	pop    ebx
c000d030:	5e                   	pop    esi
c000d031:	5f                   	pop    edi
c000d032:	5d                   	pop    ebp
c000d033:	c3                   	ret    

c000d034 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d034:	55                   	push   ebp
c000d035:	57                   	push   edi
c000d036:	56                   	push   esi
c000d037:	31 f6                	xor    esi,esi
c000d039:	53                   	push   ebx
c000d03a:	31 db                	xor    ebx,ebx
c000d03c:	83 ec 40             	sub    esp,0x40
c000d03f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d047:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d04f:	6a 12                	push   0x12
c000d051:	68 ee 00 00 00       	push   0xee
c000d056:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d05a:	e8 91 34 ff ff       	call   c00004f0 <memset>
c000d05f:	83 c4 10             	add    esp,0x10
c000d062:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000d066:	6a 08                	push   0x8
c000d068:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d06c:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000d070:	50                   	push   eax
c000d071:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d075:	55                   	push   ebp
c000d076:	57                   	push   edi
c000d077:	e8 e7 fe ff ff       	call   c000cf63 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d07c:	83 c4 10             	add    esp,0x10
c000d07f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d083:	50                   	push   eax
c000d084:	6a 06                	push   0x6
c000d086:	55                   	push   ebp
c000d087:	57                   	push   edi
c000d088:	e8 06 ff ff ff       	call   c000cf93 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d095:	74 07                	je     c000d09e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000d097:	46                   	inc    esi
c000d098:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000d09c:	eb e1                	jmp    c000d07f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000d09e:	43                   	inc    ebx
c000d09f:	83 fb 12             	cmp    ebx,0x12
c000d0a2:	75 c2                	jne    c000d066 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000d0a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d0a8:	31 db                	xor    ebx,ebx
c000d0aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d0ad:	50                   	push   eax
c000d0ae:	50                   	push   eax
c000d0af:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000d0b4:	43                   	inc    ebx
c000d0b5:	8d 04 85 00 4a 02 c0 	lea    eax,[eax*4-0x3ffdb600]
c000d0bc:	50                   	push   eax
c000d0bd:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d0c1:	e8 7a 37 ff ff       	call   c0000840 <strcat>
c000d0c6:	83 c4 10             	add    esp,0x10
c000d0c9:	83 fb 18             	cmp    ebx,0x18
c000d0cc:	75 df                	jne    c000d0ad <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000d0ce:	83 c4 3c             	add    esp,0x3c
c000d0d1:	31 c0                	xor    eax,eax
c000d0d3:	5b                   	pop    ebx
c000d0d4:	5e                   	pop    esi
c000d0d5:	5f                   	pop    edi
c000d0d6:	5d                   	pop    ebp
c000d0d7:	c3                   	ret    

c000d0d8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000d0d8:	83 ec 40             	sub    esp,0x40
c000d0db:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d0df:	50                   	push   eax
c000d0e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0e8:	e8 3b f9 ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0ed:	58                   	pop    eax
c000d0ee:	5a                   	pop    edx
c000d0ef:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000d0f3:	8d 44 24 15          	lea    eax,[esp+0x15]
c000d0f7:	50                   	push   eax
c000d0f8:	e8 37 ff ff ff       	call   c000d034 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000d0fd:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000d102:	83 c4 4c             	add    esp,0x4c
c000d105:	c3                   	ret    

c000d106 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000d106:	55                   	push   ebp
c000d107:	57                   	push   edi
c000d108:	56                   	push   esi
c000d109:	53                   	push   ebx
c000d10a:	31 db                	xor    ebx,ebx
c000d10c:	83 ec 70             	sub    esp,0x70
c000d10f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000d116:	6a 30                	push   0x30
c000d118:	6a 00                	push   0x0
c000d11a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000d11e:	56                   	push   esi
c000d11f:	e8 cc 33 ff ff       	call   c00004f0 <memset>
c000d124:	83 c4 10             	add    esp,0x10
c000d127:	83 ec 0c             	sub    esp,0xc
c000d12a:	57                   	push   edi
c000d12b:	e8 40 34 ff ff       	call   c0000570 <strlen>
c000d130:	83 c4 10             	add    esp,0x10
c000d133:	39 d8                	cmp    eax,ebx
c000d135:	76 16                	jbe    c000d14d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000d137:	83 ec 0c             	sub    esp,0xc
c000d13a:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000d13e:	50                   	push   eax
c000d13f:	e8 ec 37 ff ff       	call   c0000930 <toupper>
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000d14a:	43                   	inc    ebx
c000d14b:	eb da                	jmp    c000d127 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000d14d:	31 f6                	xor    esi,esi
c000d14f:	52                   	push   edx
c000d150:	31 ff                	xor    edi,edi
c000d152:	6a 18                	push   0x18
c000d154:	6a 3f                	push   0x3f
c000d156:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d15a:	50                   	push   eax
c000d15b:	e8 90 33 ff ff       	call   c00004f0 <memset>
c000d160:	83 c4 10             	add    esp,0x10
c000d163:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000d167:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000d16b:	84 c0                	test   al,al
c000d16d:	0f 84 b0 00 00 00    	je     c000d223 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d173:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000d177:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000d17c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000d180:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000d185:	8d 6e 01             	lea    ebp,[esi+0x1]
c000d188:	83 ec 0c             	sub    esp,0xc
c000d18b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000d18f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000d193:	53                   	push   ebx
c000d194:	e8 d7 33 ff ff       	call   c0000570 <strlen>
c000d199:	83 c4 10             	add    esp,0x10
c000d19c:	85 c0                	test   eax,eax
c000d19e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d1a2:	74 0b                	je     c000d1af <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d1a4:	50                   	push   eax
c000d1a5:	6a 01                	push   0x1
c000d1a7:	53                   	push   ebx
c000d1a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d1ac:	50                   	push   eax
c000d1ad:	eb 0a                	jmp    c000d1b9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d1af:	50                   	push   eax
c000d1b0:	6a 00                	push   0x0
c000d1b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d1b6:	50                   	push   eax
c000d1b7:	6a 00                	push   0x0
c000d1b9:	e8 44 fd ff ff       	call   c000cf02 <CmGetMatch(char*, char*, bool, bool*)>
c000d1be:	83 c4 10             	add    esp,0x10
c000d1c1:	83 f8 ff             	cmp    eax,0xffffffff
c000d1c4:	75 1a                	jne    c000d1e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d1c6:	83 ec 0c             	sub    esp,0xc
c000d1c9:	68 c7 26 02 c0       	push   0xc00226c7
c000d1ce:	e8 9f 1c 00 00       	call   c000ee72 <KePanic(char const*)>
c000d1d3:	83 c4 10             	add    esp,0x10
c000d1d6:	b8 02 00 00 00       	mov    eax,0x2
c000d1db:	e9 bc 00 00 00       	jmp    c000d29c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d1e0:	83 ff 18             	cmp    edi,0x18
c000d1e3:	75 1a                	jne    c000d1ff <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d1e5:	83 ec 0c             	sub    esp,0xc
c000d1e8:	68 dc 26 02 c0       	push   0xc00226dc
c000d1ed:	e8 80 1c 00 00       	call   c000ee72 <KePanic(char const*)>
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	b8 01 00 00 00       	mov    eax,0x1
c000d1fa:	e9 9d 00 00 00       	jmp    c000d29c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d1ff:	47                   	inc    edi
c000d200:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d205:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d209:	74 02                	je     c000d20d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d20b:	89 ee                	mov    esi,ebp
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	53                   	push   ebx
c000d211:	e8 5a 33 ff ff       	call   c0000570 <strlen>
c000d216:	83 c4 10             	add    esp,0x10
c000d219:	85 c0                	test   eax,eax
c000d21b:	74 06                	je     c000d223 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d21d:	46                   	inc    esi
c000d21e:	e9 40 ff ff ff       	jmp    c000d163 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d223:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d22b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d233:	31 f6                	xor    esi,esi
c000d235:	50                   	push   eax
c000d236:	31 ff                	xor    edi,edi
c000d238:	6a 12                	push   0x12
c000d23a:	68 ee 00 00 00       	push   0xee
c000d23f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d246:	e8 a5 32 ff ff       	call   c00004f0 <memset>
c000d24b:	83 c4 10             	add    esp,0x10
c000d24e:	83 fe 17             	cmp    esi,0x17
c000d251:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d255:	7e 26                	jle    c000d27d <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d257:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d25b:	50                   	push   eax
c000d25c:	6a 08                	push   0x8
c000d25e:	55                   	push   ebp
c000d25f:	53                   	push   ebx
c000d260:	e8 2e fd ff ff       	call   c000cf93 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d265:	83 c4 10             	add    esp,0x10
c000d268:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d26d:	74 26                	je     c000d295 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d26f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d276:	4e                   	dec    esi
c000d277:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d27a:	47                   	inc    edi
c000d27b:	eb 1c                	jmp    c000d299 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d27d:	6a 06                	push   0x6
c000d27f:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d284:	50                   	push   eax
c000d285:	55                   	push   ebp
c000d286:	53                   	push   ebx
c000d287:	e8 d7 fc ff ff       	call   c000cf63 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d28c:	83 c4 10             	add    esp,0x10
c000d28f:	84 c0                	test   al,al
c000d291:	75 06                	jne    c000d299 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d293:	eb c2                	jmp    c000d257 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d295:	31 c0                	xor    eax,eax
c000d297:	eb 03                	jmp    c000d29c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d299:	46                   	inc    esi
c000d29a:	eb b2                	jmp    c000d24e <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d29c:	83 c4 6c             	add    esp,0x6c
c000d29f:	5b                   	pop    ebx
c000d2a0:	5e                   	pop    esi
c000d2a1:	5f                   	pop    edi
c000d2a2:	5d                   	pop    ebp
c000d2a3:	c3                   	ret    

c000d2a4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d2a4:	53                   	push   ebx
c000d2a5:	83 ec 3c             	sub    esp,0x3c
c000d2a8:	6a 2b                	push   0x2b
c000d2aa:	6a 00                	push   0x0
c000d2ac:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d2b0:	53                   	push   ebx
c000d2b1:	e8 3a 32 ff ff       	call   c00004f0 <memset>
c000d2b6:	58                   	pop    eax
c000d2b7:	5a                   	pop    edx
c000d2b8:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d2bc:	50                   	push   eax
c000d2bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d2c1:	e8 40 fe ff ff       	call   c000d106 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d2c6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d2cb:	83 c4 0c             	add    esp,0xc
c000d2ce:	6a 15                	push   0x15
c000d2d0:	6a 00                	push   0x0
c000d2d2:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d2d6:	50                   	push   eax
c000d2d7:	e8 14 32 ff ff       	call   c00004f0 <memset>
c000d2dc:	53                   	push   ebx
c000d2dd:	6a 00                	push   0x0
c000d2df:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d2e3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d2e7:	e8 e6 f9 ff ff       	call   c000ccd2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d2ec:	83 c4 58             	add    esp,0x58
c000d2ef:	5b                   	pop    ebx
c000d2f0:	c3                   	ret    

c000d2f1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d2f1:	56                   	push   esi
c000d2f2:	53                   	push   ebx
c000d2f3:	83 ec 48             	sub    esp,0x48
c000d2f6:	6a 12                	push   0x12
c000d2f8:	68 ff 00 00 00       	push   0xff
c000d2fd:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d301:	56                   	push   esi
c000d302:	e8 e9 31 ff ff       	call   c00004f0 <memset>
c000d307:	5a                   	pop    edx
c000d308:	59                   	pop    ecx
c000d309:	56                   	push   esi
c000d30a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d30e:	e8 f3 fd ff ff       	call   c000d106 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d31a:	85 db                	test   ebx,ebx
c000d31c:	74 42                	je     c000d360 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d31e:	50                   	push   eax
c000d31f:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d323:	50                   	push   eax
c000d324:	53                   	push   ebx
c000d325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d329:	e8 fa f6 ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d32e:	83 c4 0c             	add    esp,0xc
c000d331:	6a 12                	push   0x12
c000d333:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d337:	50                   	push   eax
c000d338:	56                   	push   esi
c000d339:	e8 42 30 ff ff       	call   c0000380 <memcmp>
c000d33e:	83 c4 10             	add    esp,0x10
c000d341:	85 c0                	test   eax,eax
c000d343:	74 1e                	je     c000d363 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d345:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d34a:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d34f:	c1 e3 08             	shl    ebx,0x8
c000d352:	09 d8                	or     eax,ebx
c000d354:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d359:	c1 e3 10             	shl    ebx,0x10
c000d35c:	09 c3                	or     ebx,eax
c000d35e:	eb ba                	jmp    c000d31a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d360:	83 cb ff             	or     ebx,0xffffffff
c000d363:	89 d8                	mov    eax,ebx
c000d365:	83 c4 44             	add    esp,0x44
c000d368:	5b                   	pop    ebx
c000d369:	5e                   	pop    esi
c000d36a:	c3                   	ret    

c000d36b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d36b:	57                   	push   edi
c000d36c:	56                   	push   esi
c000d36d:	53                   	push   ebx
c000d36e:	83 ec 34             	sub    esp,0x34
c000d371:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d375:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d379:	6a 2b                	push   0x2b
c000d37b:	6a 00                	push   0x0
c000d37d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d381:	53                   	push   ebx
c000d382:	e8 69 31 ff ff       	call   c00004f0 <memset>
c000d387:	58                   	pop    eax
c000d388:	5a                   	pop    edx
c000d389:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d38d:	50                   	push   eax
c000d38e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d392:	e8 6f fd ff ff       	call   c000d106 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d397:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d39b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d39f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d3a3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d3a7:	53                   	push   ebx
c000d3a8:	6a 00                	push   0x0
c000d3aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d3ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d3b2:	e8 1b f9 ff ff       	call   c000ccd2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d3b7:	83 c4 50             	add    esp,0x50
c000d3ba:	5b                   	pop    ebx
c000d3bb:	5e                   	pop    esi
c000d3bc:	5f                   	pop    edi
c000d3bd:	c3                   	ret    

c000d3be <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d3be:	55                   	push   ebp
c000d3bf:	57                   	push   edi
c000d3c0:	56                   	push   esi
c000d3c1:	53                   	push   ebx
c000d3c2:	83 ec 40             	sub    esp,0x40
c000d3c5:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d3c9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d3cd:	6a 2b                	push   0x2b
c000d3cf:	6a 00                	push   0x0
c000d3d1:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d3d5:	56                   	push   esi
c000d3d6:	e8 15 31 ff ff       	call   c00004f0 <memset>
c000d3db:	5f                   	pop    edi
c000d3dc:	89 ef                	mov    edi,ebp
c000d3de:	58                   	pop    eax
c000d3df:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d3e3:	50                   	push   eax
c000d3e4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d3e8:	e8 19 fd ff ff       	call   c000d106 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d3ed:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d3f2:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d3f7:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d3fc:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d401:	83 c4 10             	add    esp,0x10
c000d404:	85 ed                	test   ebp,ebp
c000d406:	74 14                	je     c000d41c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d408:	51                   	push   ecx
c000d409:	51                   	push   ecx
c000d40a:	57                   	push   edi
c000d40b:	53                   	push   ebx
c000d40c:	e8 09 f7 ff ff       	call   c000cb1a <CmGetNext(Reghive_Tag*, int)>
c000d411:	83 c4 10             	add    esp,0x10
c000d414:	85 c0                	test   eax,eax
c000d416:	74 04                	je     c000d41c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d418:	89 c7                	mov    edi,eax
c000d41a:	eb e8                	jmp    c000d404 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d41c:	56                   	push   esi
c000d41d:	6a 00                	push   0x0
c000d41f:	57                   	push   edi
c000d420:	53                   	push   ebx
c000d421:	e8 ac f8 ff ff       	call   c000ccd2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d426:	83 c4 0c             	add    esp,0xc
c000d429:	89 c7                	mov    edi,eax
c000d42b:	56                   	push   esi
c000d42c:	50                   	push   eax
c000d42d:	53                   	push   ebx
c000d42e:	e8 f5 f5 ff ff       	call   c000ca28 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d433:	58                   	pop    eax
c000d434:	5a                   	pop    edx
c000d435:	6a 6c                	push   0x6c
c000d437:	6a 00                	push   0x0
c000d439:	6a 00                	push   0x0
c000d43b:	68 ed 26 02 c0       	push   0xc00226ed
c000d440:	57                   	push   edi
c000d441:	53                   	push   ebx
c000d442:	e8 24 ff ff ff       	call   c000d36b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d447:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d44b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d44f:	c1 e8 10             	shr    eax,0x10
c000d452:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d456:	83 c4 1c             	add    esp,0x1c
c000d459:	56                   	push   esi
c000d45a:	57                   	push   edi
c000d45b:	53                   	push   ebx
c000d45c:	e8 eb f6 ff ff       	call   c000cb4c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d461:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d466:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d46b:	c1 e0 08             	shl    eax,0x8
c000d46e:	09 c2                	or     edx,eax
c000d470:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d475:	83 c4 4c             	add    esp,0x4c
c000d478:	c1 e0 10             	shl    eax,0x10
c000d47b:	5b                   	pop    ebx
c000d47c:	09 d0                	or     eax,edx
c000d47e:	5e                   	pop    esi
c000d47f:	5f                   	pop    edi
c000d480:	5d                   	pop    ebp
c000d481:	c3                   	ret    

c000d482 <zStrtok(char*, char const*)>:
c000d482:	55                   	push   ebp
c000d483:	57                   	push   edi
c000d484:	56                   	push   esi
c000d485:	53                   	push   ebx
c000d486:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d48a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d48e:	85 db                	test   ebx,ebx
c000d490:	74 2f                	je     c000d4c1 <zStrtok(char*, char const*)+0x3f>
c000d492:	85 c0                	test   eax,eax
c000d494:	75 09                	jne    c000d49f <zStrtok(char*, char const*)+0x1d>
c000d496:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d49b:	85 c0                	test   eax,eax
c000d49d:	74 50                	je     c000d4ef <zStrtok(char*, char const*)+0x6d>
c000d49f:	31 c9                	xor    ecx,ecx
c000d4a1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d4a5:	74 03                	je     c000d4aa <zStrtok(char*, char const*)+0x28>
c000d4a7:	41                   	inc    ecx
c000d4a8:	eb f7                	jmp    c000d4a1 <zStrtok(char*, char const*)+0x1f>
c000d4aa:	31 d2                	xor    edx,edx
c000d4ac:	39 ca                	cmp    edx,ecx
c000d4ae:	74 15                	je     c000d4c5 <zStrtok(char*, char const*)+0x43>
c000d4b0:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d4b4:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d4b7:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d4ba:	39 ee                	cmp    esi,ebp
c000d4bc:	74 13                	je     c000d4d1 <zStrtok(char*, char const*)+0x4f>
c000d4be:	42                   	inc    edx
c000d4bf:	eb eb                	jmp    c000d4ac <zStrtok(char*, char const*)+0x2a>
c000d4c1:	31 c0                	xor    eax,eax
c000d4c3:	eb 2a                	jmp    c000d4ef <zStrtok(char*, char const*)+0x6d>
c000d4c5:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d4cf:	eb 1e                	jmp    c000d4ef <zStrtok(char*, char const*)+0x6d>
c000d4d1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d4d4:	39 ce                	cmp    esi,ecx
c000d4d6:	75 0a                	jne    c000d4e2 <zStrtok(char*, char const*)+0x60>
c000d4d8:	40                   	inc    eax
c000d4d9:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d4de:	89 d8                	mov    eax,ebx
c000d4e0:	eb 0d                	jmp    c000d4ef <zStrtok(char*, char const*)+0x6d>
c000d4e2:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d4e6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d4e9:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d4ef:	5b                   	pop    ebx
c000d4f0:	5e                   	pop    esi
c000d4f1:	5f                   	pop    edi
c000d4f2:	5d                   	pop    ebp
c000d4f3:	c3                   	ret    

c000d4f4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d4f4:	57                   	push   edi
c000d4f5:	56                   	push   esi
c000d4f6:	53                   	push   ebx
c000d4f7:	81 ec 08 01 00 00    	sub    esp,0x108
c000d4fd:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d504:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d50b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d50f:	53                   	push   ebx
c000d510:	e8 2b 31 ff ff       	call   c0000640 <strcpy>
c000d515:	59                   	pop    ecx
c000d516:	5e                   	pop    esi
c000d517:	68 6e 38 02 c0       	push   0xc002386e
c000d51c:	53                   	push   ebx
c000d51d:	bb 01 00 00 00       	mov    ebx,0x1
c000d522:	e8 5b ff ff ff       	call   c000d482 <zStrtok(char*, char const*)>
c000d527:	83 c4 10             	add    esp,0x10
c000d52a:	85 c0                	test   eax,eax
c000d52c:	74 3b                	je     c000d569 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d52e:	52                   	push   edx
c000d52f:	50                   	push   eax
c000d530:	6a 01                	push   0x1
c000d532:	57                   	push   edi
c000d533:	e8 b9 fd ff ff       	call   c000d2f1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d538:	59                   	pop    ecx
c000d539:	89 c3                	mov    ebx,eax
c000d53b:	5e                   	pop    esi
c000d53c:	68 6e 38 02 c0       	push   0xc002386e
c000d541:	6a 00                	push   0x0
c000d543:	e8 3a ff ff ff       	call   c000d482 <zStrtok(char*, char const*)>
c000d548:	83 c4 10             	add    esp,0x10
c000d54b:	89 c6                	mov    esi,eax
c000d54d:	85 c0                	test   eax,eax
c000d54f:	74 18                	je     c000d569 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d551:	52                   	push   edx
c000d552:	52                   	push   edx
c000d553:	53                   	push   ebx
c000d554:	57                   	push   edi
c000d555:	e8 81 f5 ff ff       	call   c000cadb <CmEnterDirectory(Reghive_Tag*, int)>
c000d55a:	83 c4 10             	add    esp,0x10
c000d55d:	89 c3                	mov    ebx,eax
c000d55f:	83 f8 ff             	cmp    eax,0xffffffff
c000d562:	74 05                	je     c000d569 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d564:	50                   	push   eax
c000d565:	56                   	push   esi
c000d566:	53                   	push   ebx
c000d567:	eb c9                	jmp    c000d532 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d569:	81 c4 00 01 00 00    	add    esp,0x100
c000d56f:	89 d8                	mov    eax,ebx
c000d571:	5b                   	pop    ebx
c000d572:	5e                   	pop    esi
c000d573:	5f                   	pop    edi
c000d574:	c3                   	ret    

c000d575 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d575:	55                   	push   ebp
c000d576:	57                   	push   edi
c000d577:	56                   	push   esi
c000d578:	53                   	push   ebx
c000d579:	83 ec 5c             	sub    esp,0x5c
c000d57c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d580:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d584:	85 db                	test   ebx,ebx
c000d586:	0f 8e 84 00 00 00    	jle    c000d610 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d58c:	31 ed                	xor    ebp,ebp
c000d58e:	57                   	push   edi
c000d58f:	6a 32                	push   0x32
c000d591:	6a 00                	push   0x0
c000d593:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d597:	57                   	push   edi
c000d598:	e8 53 2f ff ff       	call   c00004f0 <memset>
c000d59d:	83 c4 0c             	add    esp,0xc
c000d5a0:	57                   	push   edi
c000d5a1:	53                   	push   ebx
c000d5a2:	56                   	push   esi
c000d5a3:	e8 30 fb ff ff       	call   c000d0d8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d5a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d5ac:	83 c4 10             	add    esp,0x10
c000d5af:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d5b3:	7d 13                	jge    c000d5c8 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d5b5:	83 ec 0c             	sub    esp,0xc
c000d5b8:	45                   	inc    ebp
c000d5b9:	68 60 3d 02 c0       	push   0xc0023d60
c000d5be:	e8 a1 99 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d5c3:	83 c4 10             	add    esp,0x10
c000d5c6:	eb e7                	jmp    c000d5af <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d5c8:	51                   	push   ecx
c000d5c9:	57                   	push   edi
c000d5ca:	53                   	push   ebx
c000d5cb:	68 f3 26 02 c0       	push   0xc00226f3
c000d5d0:	e8 8f 99 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d5d5:	83 c4 10             	add    esp,0x10
c000d5d8:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d5dd:	75 1e                	jne    c000d5fd <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d5df:	52                   	push   edx
c000d5e0:	52                   	push   edx
c000d5e1:	53                   	push   ebx
c000d5e2:	56                   	push   esi
c000d5e3:	e8 f3 f4 ff ff       	call   c000cadb <CmEnterDirectory(Reghive_Tag*, int)>
c000d5e8:	83 c4 0c             	add    esp,0xc
c000d5eb:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d5ef:	8d 51 04             	lea    edx,[ecx+0x4]
c000d5f2:	52                   	push   edx
c000d5f3:	50                   	push   eax
c000d5f4:	56                   	push   esi
c000d5f5:	e8 7b ff ff ff       	call   c000d575 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d5fa:	83 c4 10             	add    esp,0x10
c000d5fd:	50                   	push   eax
c000d5fe:	50                   	push   eax
c000d5ff:	53                   	push   ebx
c000d600:	56                   	push   esi
c000d601:	e8 14 f5 ff ff       	call   c000cb1a <CmGetNext(Reghive_Tag*, int)>
c000d606:	83 c4 10             	add    esp,0x10
c000d609:	89 c3                	mov    ebx,eax
c000d60b:	e9 74 ff ff ff       	jmp    c000d584 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d610:	83 c4 5c             	add    esp,0x5c
c000d613:	5b                   	pop    ebx
c000d614:	5e                   	pop    esi
c000d615:	5f                   	pop    edi
c000d616:	5d                   	pop    ebp
c000d617:	c3                   	ret    

c000d618 <CmSplitFinalSlashInPlace(char*)>:
c000d618:	53                   	push   ebx
c000d619:	83 ec 14             	sub    esp,0x14
c000d61c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d620:	53                   	push   ebx
c000d621:	e8 4a 2f ff ff       	call   c0000570 <strlen>
c000d626:	83 c4 10             	add    esp,0x10
c000d629:	48                   	dec    eax
c000d62a:	85 c0                	test   eax,eax
c000d62c:	74 15                	je     c000d643 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d62e:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d631:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d635:	75 09                	jne    c000d640 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d637:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d63a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d63e:	eb 05                	jmp    c000d645 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d640:	48                   	dec    eax
c000d641:	eb e7                	jmp    c000d62a <CmSplitFinalSlashInPlace(char*)+0x12>
c000d643:	31 c0                	xor    eax,eax
c000d645:	83 c4 08             	add    esp,0x8
c000d648:	5b                   	pop    ebx
c000d649:	c3                   	ret    
c000d64a:	66 90                	xchg   ax,ax

c000d64c <Krnl::handlePowerButton()>:
c000d64c:	83 ec 0c             	sub    esp,0xc
c000d64f:	e8 59 21 00 00       	call   c000f7ad <KeHandlePowerButton()>
c000d654:	90                   	nop
c000d655:	83 c4 0c             	add    esp,0xc
c000d658:	c3                   	ret    
c000d659:	8d 76 00             	lea    esi,[esi+0x0]

c000d65c <Krnl::handleSleepButton()>:
c000d65c:	83 ec 0c             	sub    esp,0xc
c000d65f:	e8 61 21 00 00       	call   c000f7c5 <KeHandleSleepButton()>
c000d664:	90                   	nop
c000d665:	83 c4 0c             	add    esp,0xc
c000d668:	c3                   	ret    
c000d669:	90                   	nop

c000d66a <Computer::close(int, int, void*)>:
c000d66a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d66f:	c3                   	ret    

c000d670 <Computer::open(int, int, void*)>:
c000d670:	56                   	push   esi
c000d671:	53                   	push   ebx
c000d672:	83 ec 04             	sub    esp,0x4
c000d675:	f6 05 90 cd 02 c0 04 	test   BYTE PTR ds:0xc002cd90,0x4
c000d67c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d680:	0f 94 05 e0 50 02 c0 	sete   BYTE PTR ds:0xc00250e0
c000d687:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d68d:	74 10                	je     c000d69f <Computer::open(int, int, void*)+0x2f>
c000d68f:	83 ec 0c             	sub    esp,0xc
c000d692:	68 00 27 02 c0       	push   0xc0022700
c000d697:	e8 d6 17 00 00       	call   c000ee72 <KePanic(char const*)>
c000d69c:	83 c4 10             	add    esp,0x10
c000d69f:	83 ec 0c             	sub    esp,0xc
c000d6a2:	68 b8 27 02 c0       	push   0xc00227b8
c000d6a7:	e8 34 f1 ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d6ac:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d6b3:	e8 73 14 00 00       	call   c000eb2b <malloc>
c000d6b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6bb:	89 c6                	mov    esi,eax
c000d6bd:	e8 6a e7 ff ff       	call   c000be2c <ACPI::ACPI()>
c000d6c2:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d6c8:	58                   	pop    eax
c000d6c9:	5a                   	pop    edx
c000d6ca:	56                   	push   esi
c000d6cb:	53                   	push   ebx
c000d6cc:	e8 c1 b9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d6d1:	c7 04 24 d0 27 02 c0 	mov    DWORD PTR [esp],0xc00227d0
c000d6d8:	e8 03 f1 ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d6dd:	e8 21 ab 00 00       	call   c0018203 <HalEnableNMI()>
c000d6e2:	e8 51 9d 00 00       	call   c0017438 <HalDetectFeatures()>
c000d6e7:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d6ee:	e8 38 14 00 00       	call   c000eb2b <malloc>
c000d6f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6f6:	89 c6                	mov    esi,eax
c000d6f8:	e8 41 b6 00 00       	call   c0018d3e <CPU::CPU()>
c000d6fd:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d703:	59                   	pop    ecx
c000d704:	58                   	pop    eax
c000d705:	56                   	push   esi
c000d706:	53                   	push   ebx
c000d707:	e8 86 b9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d70c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d710:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d716:	8b 10                	mov    edx,DWORD PTR [eax]
c000d718:	51                   	push   ecx
c000d719:	6a 00                	push   0x0
c000d71b:	6a 00                	push   0x0
c000d71d:	50                   	push   eax
c000d71e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d721:	83 c4 14             	add    esp,0x14
c000d724:	68 2c 27 02 c0       	push   0xc002272c
c000d729:	e8 b2 f0 ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d72e:	e8 66 b2 00 00       	call   c0018999 <HalInitialiseCoprocessor()>
c000d733:	c7 04 24 ea 27 02 c0 	mov    DWORD PTR [esp],0xc00227ea
c000d73a:	e8 a1 f0 ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d73f:	c7 04 24 56 d7 00 c0 	mov    DWORD PTR [esp],0xc000d756
c000d746:	e8 21 82 00 00       	call   c001596c <setupMultitasking(void (*)())>
c000d74b:	83 c4 14             	add    esp,0x14
c000d74e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d753:	5b                   	pop    ebx
c000d754:	5e                   	pop    esi
c000d755:	c3                   	ret    

c000d756 <KeFirstTask()>:
c000d756:	53                   	push   ebx
c000d757:	83 ec 14             	sub    esp,0x14
c000d75a:	fb                   	sti    
c000d75b:	68 05 28 02 c0       	push   0xc0022805
c000d760:	e8 7b f0 ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d765:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d76c:	e8 ba 13 00 00       	call   c000eb2b <malloc>
c000d771:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d778:	89 c3                	mov    ebx,eax
c000d77a:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000d77f:	50                   	push   eax
c000d780:	68 1e 28 02 c0       	push   0xc002281e
c000d785:	6a 01                	push   0x1
c000d787:	53                   	push   ebx
c000d788:	e8 6b 7e 00 00       	call   c00155f8 <Process::Process(bool, char const*, Process*, char**)>
c000d78d:	83 c4 20             	add    esp,0x20
c000d790:	68 ff 00 00 00       	push   0xff
c000d795:	6a 00                	push   0x0
c000d797:	68 55 e4 00 c0       	push   0xc000e455
c000d79c:	53                   	push   ebx
c000d79d:	e8 96 80 00 00       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c000d7a2:	8b 15 d8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d8
c000d7a8:	6a 7a                	push   0x7a
c000d7aa:	6a 00                	push   0x0
c000d7ac:	68 28 61 01 c0       	push   0xc0016128
c000d7b1:	52                   	push   edx
c000d7b2:	e8 81 80 00 00       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c000d7b7:	83 c4 14             	add    esp,0x14
c000d7ba:	a3 90 d6 02 c0       	mov    ds:0xc002d690,eax
c000d7bf:	68 50 27 02 c0       	push   0xc0022750
c000d7c4:	e8 17 f0 ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d7c9:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d7d0:	e8 fc 20 00 00       	call   c000f8d1 <KeInitRand()>
c000d7d5:	e8 1c 8d 00 00       	call   c00164f6 <Vm::initialise8086()>
c000d7da:	e8 11 a6 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d7df:	c7 04 24 d4 24 02 c0 	mov    DWORD PTR [esp],0xc00224d4
c000d7e6:	e8 f5 ef ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d7eb:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d7f0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d7f6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7f8:	6a 00                	push   0x0
c000d7fa:	6a 00                	push   0x0
c000d7fc:	6a 00                	push   0x0
c000d7fe:	50                   	push   eax
c000d7ff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d802:	83 c4 14             	add    esp,0x14
c000d805:	68 50 27 02 c0       	push   0xc0022750
c000d80a:	e8 d1 ef ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d80f:	e8 c1 9d ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d814:	e8 f5 05 00 00       	call   c000de0e <KeLoadSystemEnv()>
c000d819:	e8 bf 1f 00 00       	call   c000f7dd <KeSetupPowerManager()>
c000d81e:	c7 04 24 74 27 02 c0 	mov    DWORD PTR [esp],0xc0022774
c000d825:	e8 b6 ef ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d82a:	59                   	pop    ecx
c000d82b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d830:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d836:	53                   	push   ebx
c000d837:	e8 72 b9 ff ff       	call   c00091ae <Device::loadDriversForAll()>
c000d83c:	c7 04 24 2b 28 02 c0 	mov    DWORD PTR [esp],0xc002282b
c000d843:	e8 98 ef ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c000d848:	58                   	pop    eax
c000d849:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d84f:	5a                   	pop    edx
c000d850:	6a 01                	push   0x1
c000d852:	68 3c 28 02 c0       	push   0xc002283c
c000d857:	e8 15 77 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c000d85c:	59                   	pop    ecx
c000d85d:	5a                   	pop    edx
c000d85e:	53                   	push   ebx
c000d85f:	50                   	push   eax
c000d860:	e8 5e 79 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c000d865:	83 c4 10             	add    esp,0x10
c000d868:	83 ec 0c             	sub    esp,0xc
c000d86b:	6a 02                	push   0x2
c000d86d:	e8 de 82 00 00       	call   c0015b50 <blockTask(TaskState)>
c000d872:	83 c4 10             	add    esp,0x10
c000d875:	eb f1                	jmp    c000d868 <KeFirstTask()+0x112>
c000d877:	90                   	nop

c000d878 <Computer::Computer()>:
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d87f:	83 ec 08             	sub    esp,0x8
c000d882:	68 58 28 02 c0       	push   0xc0022858
c000d887:	50                   	push   eax
c000d888:	e8 67 b9 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000d88d:	83 c4 10             	add    esp,0x10
c000d890:	ba 6c 28 02 c0       	mov    edx,0xc002286c
c000d895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d899:	89 10                	mov    DWORD PTR [eax],edx
c000d89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ad:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d8b7:	90                   	nop
c000d8b8:	83 c4 0c             	add    esp,0xc
c000d8bb:	c3                   	ret    

c000d8bc <KePrepareShutdown()>:
c000d8bc:	83 ec 0c             	sub    esp,0xc
c000d8bf:	e8 8a ee ff ff       	call   c000c74e <KeExecuteAtexit()>
c000d8c4:	83 ec 0c             	sub    esp,0xc
c000d8c7:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d8cc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d8d2:	50                   	push   eax
c000d8d3:	e8 22 ba ff ff       	call   c00092fa <Device::closeAll()>
c000d8d8:	83 c4 1c             	add    esp,0x1c
c000d8db:	c3                   	ret    

c000d8dc <KeShutdown()>:
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	e8 d8 ff ff ff       	call   c000d8bc <KePrepareShutdown()>
c000d8e4:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d8e9:	85 c0                	test   eax,eax
c000d8eb:	74 02                	je     c000d8ef <KeShutdown()+0x13>
c000d8ed:	ff d0                	call   eax
c000d8ef:	83 ec 0c             	sub    esp,0xc
c000d8f2:	68 94 27 02 c0       	push   0xc0022794
c000d8f7:	e8 76 15 00 00       	call   c000ee72 <KePanic(char const*)>
c000d8fc:	83 c4 1c             	add    esp,0x1c
c000d8ff:	c3                   	ret    

c000d900 <KeSleep()>:
c000d900:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d905:	85 c0                	test   eax,eax
c000d907:	74 02                	je     c000d90b <KeSleep()+0xb>
c000d909:	ff e0                	jmp    eax
c000d90b:	c3                   	ret    

c000d90c <KeRestart()>:
c000d90c:	83 ec 0c             	sub    esp,0xc
c000d90f:	e8 a8 ff ff ff       	call   c000d8bc <KePrepareShutdown()>
c000d914:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000d919:	85 c0                	test   eax,eax
c000d91b:	74 02                	je     c000d91f <KeRestart()+0x13>
c000d91d:	ff d0                	call   eax
c000d91f:	e4 64                	in     al,0x64
c000d921:	a8 02                	test   al,0x2
c000d923:	75 fa                	jne    c000d91f <KeRestart()+0x13>
c000d925:	b0 fe                	mov    al,0xfe
c000d927:	e6 64                	out    0x64,al
c000d929:	83 c4 0c             	add    esp,0xc
c000d92c:	c3                   	ret    

c000d92d <KeCalculateCRC32(unsigned char*, int)>:
c000d92d:	53                   	push   ebx
c000d92e:	83 c8 ff             	or     eax,0xffffffff
c000d931:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d935:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d939:	01 cb                	add    ebx,ecx
c000d93b:	39 d9                	cmp    ecx,ebx
c000d93d:	74 15                	je     c000d954 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d93f:	41                   	inc    ecx
c000d940:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d943:	31 c2                	xor    edx,eax
c000d945:	c1 e8 08             	shr    eax,0x8
c000d948:	0f b6 d2             	movzx  edx,dl
c000d94b:	33 04 95 00 4b 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdb500]
c000d952:	eb e7                	jmp    c000d93b <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d954:	f7 d0                	not    eax
c000d956:	5b                   	pop    ebx
c000d957:	c3                   	ret    

c000d958 <EnvVarContainer::getEnv(char const*)>:
c000d958:	57                   	push   edi
c000d959:	56                   	push   esi
c000d95a:	53                   	push   ebx
c000d95b:	31 db                	xor    ebx,ebx
c000d95d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d961:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d963:	7e 2b                	jle    c000d990 <EnvVarContainer::getEnv(char const*)+0x38>
c000d965:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d96c:	50                   	push   eax
c000d96d:	50                   	push   eax
c000d96e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d971:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d974:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d978:	e8 d3 2d ff ff       	call   c0000750 <strcmp>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	85 c0                	test   eax,eax
c000d982:	75 09                	jne    c000d98d <EnvVarContainer::getEnv(char const*)+0x35>
c000d984:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d987:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d98b:	eb 05                	jmp    c000d992 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d98d:	43                   	inc    ebx
c000d98e:	eb d1                	jmp    c000d961 <EnvVarContainer::getEnv(char const*)+0x9>
c000d990:	31 c0                	xor    eax,eax
c000d992:	5b                   	pop    ebx
c000d993:	5e                   	pop    esi
c000d994:	5f                   	pop    edi
c000d995:	c3                   	ret    

c000d996 <EnvVarContainer::setEnv(char const*, char const*)>:
c000d996:	55                   	push   ebp
c000d997:	57                   	push   edi
c000d998:	56                   	push   esi
c000d999:	53                   	push   ebx
c000d99a:	83 ec 28             	sub    esp,0x28
c000d99d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9a1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d9a5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d9a9:	56                   	push   esi
c000d9aa:	e8 c1 2b ff ff       	call   c0000570 <strlen>
c000d9af:	40                   	inc    eax
c000d9b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9b3:	e8 73 11 00 00       	call   c000eb2b <malloc>
c000d9b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d9bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9bf:	e8 ac 2b ff ff       	call   c0000570 <strlen>
c000d9c4:	40                   	inc    eax
c000d9c5:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9c8:	e8 5e 11 00 00       	call   c000eb2b <malloc>
c000d9cd:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9d4:	e8 97 2b ff ff       	call   c0000570 <strlen>
c000d9d9:	83 c4 0c             	add    esp,0xc
c000d9dc:	40                   	inc    eax
c000d9dd:	50                   	push   eax
c000d9de:	6a 00                	push   0x0
c000d9e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9e4:	e8 07 2b ff ff       	call   c00004f0 <memset>
c000d9e9:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9ec:	e8 7f 2b ff ff       	call   c0000570 <strlen>
c000d9f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d9f5:	8d 48 01             	lea    ecx,[eax+0x1]
c000d9f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d9fd:	89 de                	mov    esi,ebx
c000d9ff:	e8 6c 2b ff ff       	call   c0000570 <strlen>
c000da04:	83 c4 0c             	add    esp,0xc
c000da07:	40                   	inc    eax
c000da08:	50                   	push   eax
c000da09:	6a 00                	push   0x0
c000da0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da0f:	e8 dc 2a ff ff       	call   c00004f0 <memset>
c000da14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da17:	e8 54 2b ff ff       	call   c0000570 <strlen>
c000da1c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000da20:	8d 48 01             	lea    ecx,[eax+0x1]
c000da23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da28:	40                   	inc    eax
c000da29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000da2c:	c1 e0 03             	shl    eax,0x3
c000da2f:	5a                   	pop    edx
c000da30:	59                   	pop    ecx
c000da31:	50                   	push   eax
c000da32:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da35:	e8 dd 10 00 00       	call   c000eb17 <realloc>
c000da3a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da3e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da41:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000da44:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da48:	b9 08 00 00 00       	mov    ecx,0x8
c000da4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da4f:	83 c4 2c             	add    esp,0x2c
c000da52:	5b                   	pop    ebx
c000da53:	5e                   	pop    esi
c000da54:	5f                   	pop    edi
c000da55:	5d                   	pop    ebp
c000da56:	c3                   	ret    
c000da57:	90                   	nop

c000da58 <EnvVarContainer::deleteEnv(char const*)>:
c000da58:	c3                   	ret    
c000da59:	90                   	nop

c000da5a <EnvVarContainer::loadFrom(char const*, char const*)>:
c000da5a:	55                   	push   ebp
c000da5b:	57                   	push   edi
c000da5c:	56                   	push   esi
c000da5d:	53                   	push   ebx
c000da5e:	81 ec 38 01 00 00    	sub    esp,0x138
c000da64:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000da6b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000da72:	68 14 01 00 00       	push   0x114
c000da77:	e8 af 10 00 00       	call   c000eb2b <malloc>
c000da7c:	83 c4 0c             	add    esp,0xc
c000da7f:	89 c3                	mov    ebx,eax
c000da81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000da84:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000da8b:	50                   	push   eax
c000da8c:	e8 a1 a6 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000da91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da94:	e8 7b a9 ff ff       	call   c0008414 <File::exists()>
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	84 c0                	test   al,al
c000da9e:	75 31                	jne    c000dad1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000daa0:	50                   	push   eax
c000daa1:	50                   	push   eax
c000daa2:	6a 12                	push   0x12
c000daa4:	53                   	push   ebx
c000daa5:	e8 a6 a6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000daaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daac:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000daaf:	89 34 24             	mov    DWORD PTR [esp],esi
c000dab2:	e8 b9 2a ff ff       	call   c0000570 <strlen>
c000dab7:	5a                   	pop    edx
c000dab8:	31 d2                	xor    edx,edx
c000daba:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000dabe:	51                   	push   ecx
c000dabf:	56                   	push   esi
c000dac0:	52                   	push   edx
c000dac1:	50                   	push   eax
c000dac2:	53                   	push   ebx
c000dac3:	ff d7                	call   edi
c000dac5:	83 c4 14             	add    esp,0x14
c000dac8:	53                   	push   ebx
c000dac9:	e8 e0 a6 ff ff       	call   c00081ae <File::close()>
c000dace:	83 c4 10             	add    esp,0x10
c000dad1:	56                   	push   esi
c000dad2:	31 f6                	xor    esi,esi
c000dad4:	68 00 01 00 00       	push   0x100
c000dad9:	6a 00                	push   0x0
c000dadb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dadf:	50                   	push   eax
c000dae0:	e8 0b 2a ff ff       	call   c00004f0 <memset>
c000dae5:	5f                   	pop    edi
c000dae6:	58                   	pop    eax
c000dae7:	6a 01                	push   0x1
c000dae9:	53                   	push   ebx
c000daea:	e8 61 a6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000daef:	83 c4 10             	add    esp,0x10
c000daf2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dafa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db02:	83 ec 0c             	sub    esp,0xc
c000db05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db07:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000db0b:	51                   	push   ecx
c000db0c:	8d 54 24 23          	lea    edx,[esp+0x23]
c000db10:	52                   	push   edx
c000db11:	6a 00                	push   0x0
c000db13:	6a 01                	push   0x1
c000db15:	53                   	push   ebx
c000db16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000db19:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000db1e:	83 c4 20             	add    esp,0x20
c000db21:	89 c2                	mov    edx,eax
c000db23:	85 c0                	test   eax,eax
c000db25:	0f 84 36 01 00 00    	je     c000dc61 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000db2b:	83 f8 0d             	cmp    eax,0xd
c000db2e:	0f 84 22 01 00 00    	je     c000dc56 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000db34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000db39:	0f 84 f0 00 00 00    	je     c000dc2f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000db3f:	83 f8 0a             	cmp    eax,0xa
c000db42:	74 13                	je     c000db57 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000db44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000db49:	74 0c                	je     c000db57 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000db4b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000db51:	0f 8e f6 00 00 00    	jle    c000dc4d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000db57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db5b:	83 ec 0c             	sub    esp,0xc
c000db5e:	8d 78 01             	lea    edi,[eax+0x1]
c000db61:	57                   	push   edi
c000db62:	e8 c4 0f 00 00       	call   c000eb2b <malloc>
c000db67:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000db6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000db6f:	8d 56 04             	lea    edx,[esi+0x4]
c000db72:	89 14 24             	mov    DWORD PTR [esp],edx
c000db75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db79:	e8 ad 0f 00 00       	call   c000eb2b <malloc>
c000db7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000db82:	83 c4 0c             	add    esp,0xc
c000db85:	57                   	push   edi
c000db86:	6a 00                	push   0x0
c000db88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db8c:	e8 5f 29 ff ff       	call   c00004f0 <memset>
c000db91:	8d 74 24 30          	lea    esi,[esp+0x30]
c000db95:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000db99:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000db9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db9f:	83 c4 0c             	add    esp,0xc
c000dba2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dba6:	52                   	push   edx
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dbad:	e8 3e 29 ff ff       	call   c00004f0 <memset>
c000dbb2:	8d 74 24 30          	lea    esi,[esp+0x30]
c000dbb6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000dbba:	89 34 24             	mov    DWORD PTR [esp],esi
c000dbbd:	e8 ae 29 ff ff       	call   c0000570 <strlen>
c000dbc2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000dbc6:	89 c1                	mov    ecx,eax
c000dbc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dbcd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dbd0:	40                   	inc    eax
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000dbd7:	85 d2                	test   edx,edx
c000dbd9:	75 0c                	jne    c000dbe7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000dbdb:	83 ec 0c             	sub    esp,0xc
c000dbde:	6a 08                	push   0x8
c000dbe0:	e8 46 0f 00 00       	call   c000eb2b <malloc>
c000dbe5:	eb 0c                	jmp    c000dbf3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000dbe7:	c1 e0 03             	shl    eax,0x3
c000dbea:	51                   	push   ecx
c000dbeb:	51                   	push   ecx
c000dbec:	50                   	push   eax
c000dbed:	52                   	push   edx
c000dbee:	e8 24 0f 00 00       	call   c000eb17 <realloc>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000dbf9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000dbfc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000dbff:	8d 74 24 18          	lea    esi,[esp+0x18]
c000dc03:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000dc07:	b9 08 00 00 00       	mov    ecx,0x8
c000dc0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc0e:	31 f6                	xor    esi,esi
c000dc10:	50                   	push   eax
c000dc11:	68 00 01 00 00       	push   0x100
c000dc16:	6a 00                	push   0x0
c000dc18:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc1c:	50                   	push   eax
c000dc1d:	e8 ce 28 ff ff       	call   c00004f0 <memset>
c000dc22:	83 c4 10             	add    esp,0x10
c000dc25:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc2d:	eb 27                	jmp    c000dc56 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dc2f:	83 f8 3d             	cmp    eax,0x3d
c000dc32:	74 1e                	je     c000dc52 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000dc34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000dc3a:	7f 07                	jg     c000dc43 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000dc3c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000dc40:	46                   	inc    esi
c000dc41:	eb 13                	jmp    c000dc56 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dc43:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000dc4b:	eb 09                	jmp    c000dc56 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dc4d:	83 f8 3d             	cmp    eax,0x3d
c000dc50:	75 ea                	jne    c000dc3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dc52:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dc56:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dc5b:	0f 85 99 fe ff ff    	jne    c000dafa <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dc61:	83 ec 0c             	sub    esp,0xc
c000dc64:	53                   	push   ebx
c000dc65:	e8 44 a5 ff ff       	call   c00081ae <File::close()>
c000dc6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dc72:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dc78:	5b                   	pop    ebx
c000dc79:	5e                   	pop    esi
c000dc7a:	5f                   	pop    edi
c000dc7b:	5d                   	pop    ebp
c000dc7c:	c3                   	ret    
c000dc7d:	90                   	nop

c000dc7e <EnvVarContainer::__loadSystem()>:
c000dc7e:	83 ec 10             	sub    esp,0x10
c000dc81:	68 00 4f 02 c0       	push   0xc0024f00
c000dc86:	68 90 28 02 c0       	push   0xc0022890
c000dc8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8f:	e8 c6 fd ff ff       	call   c000da5a <EnvVarContainer::loadFrom(char const*, char const*)>
c000dc94:	83 c4 1c             	add    esp,0x1c
c000dc97:	c3                   	ret    

c000dc98 <EnvVarContainer::__loadUser()>:
c000dc98:	c3                   	ret    
c000dc99:	90                   	nop

c000dc9a <EnvVarContainer::EnvVarContainer(Process*)>:
c000dc9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc9e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dcaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dcba:	90                   	nop
c000dcbb:	c3                   	ret    

c000dcbc <EnvVarContainer::~EnvVarContainer()>:
c000dcbc:	83 ec 0c             	sub    esp,0xc
c000dcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcc6:	85 c0                	test   eax,eax
c000dcc8:	74 1d                	je     c000dce7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcce:	8b 00                	mov    eax,DWORD PTR [eax]
c000dcd0:	85 c0                	test   eax,eax
c000dcd2:	74 13                	je     c000dce7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcdb:	83 ec 0c             	sub    esp,0xc
c000dcde:	50                   	push   eax
c000dcdf:	e8 57 0e 00 00       	call   c000eb3b <free>
c000dce4:	83 c4 10             	add    esp,0x10
c000dce7:	90                   	nop
c000dce8:	83 c4 0c             	add    esp,0xc
c000dceb:	c3                   	ret    

c000dcec <KeGetEnv(Process*, char const*)>:
c000dcec:	53                   	push   ebx
c000dced:	83 ec 08             	sub    esp,0x8
c000dcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dcf8:	39 05 d8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d8,eax
c000dcfe:	74 04                	je     c000dd04 <KeGetEnv(Process*, char const*)+0x18>
c000dd00:	85 c0                	test   eax,eax
c000dd02:	75 0b                	jne    c000dd0f <KeGetEnv(Process*, char const*)+0x23>
c000dd04:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dd09:	85 c0                	test   eax,eax
c000dd0b:	75 19                	jne    c000dd26 <KeGetEnv(Process*, char const*)+0x3a>
c000dd0d:	eb 27                	jmp    c000dd36 <KeGetEnv(Process*, char const*)+0x4a>
c000dd0f:	52                   	push   edx
c000dd10:	52                   	push   edx
c000dd11:	53                   	push   ebx
c000dd12:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dd18:	e8 3b fc ff ff       	call   c000d958 <EnvVarContainer::getEnv(char const*)>
c000dd1d:	83 c4 10             	add    esp,0x10
c000dd20:	85 c0                	test   eax,eax
c000dd22:	75 28                	jne    c000dd4c <KeGetEnv(Process*, char const*)+0x60>
c000dd24:	eb de                	jmp    c000dd04 <KeGetEnv(Process*, char const*)+0x18>
c000dd26:	52                   	push   edx
c000dd27:	52                   	push   edx
c000dd28:	53                   	push   ebx
c000dd29:	50                   	push   eax
c000dd2a:	e8 29 fc ff ff       	call   c000d958 <EnvVarContainer::getEnv(char const*)>
c000dd2f:	83 c4 10             	add    esp,0x10
c000dd32:	85 c0                	test   eax,eax
c000dd34:	75 16                	jne    c000dd4c <KeGetEnv(Process*, char const*)+0x60>
c000dd36:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dd3a:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dd3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd43:	83 c4 08             	add    esp,0x8
c000dd46:	5b                   	pop    ebx
c000dd47:	e9 0c fc ff ff       	jmp    c000d958 <EnvVarContainer::getEnv(char const*)>
c000dd4c:	83 c4 08             	add    esp,0x8
c000dd4f:	5b                   	pop    ebx
c000dd50:	c3                   	ret    

c000dd51 <KeSetEnvSystem(char const*, char const*)>:
c000dd51:	83 ec 10             	sub    esp,0x10
c000dd54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd5c:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000dd62:	e8 2f fc ff ff       	call   c000d996 <EnvVarContainer::setEnv(char const*, char const*)>
c000dd67:	83 c4 1c             	add    esp,0x1c
c000dd6a:	c3                   	ret    

c000dd6b <KeSetEnvUser(char const*, char const*)>:
c000dd6b:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dd70:	85 c0                	test   eax,eax
c000dd72:	74 15                	je     c000dd89 <KeSetEnvUser(char const*, char const*)+0x1e>
c000dd74:	83 ec 10             	sub    esp,0x10
c000dd77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd7f:	50                   	push   eax
c000dd80:	e8 11 fc ff ff       	call   c000d996 <EnvVarContainer::setEnv(char const*, char const*)>
c000dd85:	83 c4 1c             	add    esp,0x1c
c000dd88:	c3                   	ret    
c000dd89:	c3                   	ret    

c000dd8a <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dd8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd8e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dd94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd98:	e9 f9 fb ff ff       	jmp    c000d996 <EnvVarContainer::setEnv(char const*, char const*)>

c000dd9d <KeDeleteEnvSystem(char const*)>:
c000dd9d:	c3                   	ret    

c000dd9e <KeDeleteEnvUser(char const*)>:
c000dd9e:	c3                   	ret    

c000dd9f <KeDeleteEnvProcess(Process*, char const*)>:
c000dd9f:	c3                   	ret    

c000dda0 <KeNewProcessEnv(Process*)>:
c000dda0:	83 ec 28             	sub    esp,0x28
c000dda3:	6a 0c                	push   0xc
c000dda5:	e8 81 0d 00 00       	call   c000eb2b <malloc>
c000ddaa:	5a                   	pop    edx
c000ddab:	59                   	pop    ecx
c000ddac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ddb0:	50                   	push   eax
c000ddb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ddb5:	e8 e0 fe ff ff       	call   c000dc9a <EnvVarContainer::EnvVarContainer(Process*)>
c000ddba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddbe:	83 c4 2c             	add    esp,0x2c
c000ddc1:	c3                   	ret    

c000ddc2 <KeCopyProcessEnv(Process*, Process*)>:
c000ddc2:	57                   	push   edi
c000ddc3:	56                   	push   esi
c000ddc4:	53                   	push   ebx
c000ddc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc9:	83 ec 0c             	sub    esp,0xc
c000ddcc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ddd2:	6a 0c                	push   0xc
c000ddd4:	e8 52 0d 00 00       	call   c000eb2b <malloc>
c000ddd9:	89 c3                	mov    ebx,eax
c000dddb:	58                   	pop    eax
c000dddc:	5a                   	pop    edx
c000dddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dde1:	53                   	push   ebx
c000dde2:	e8 b3 fe ff ff       	call   c000dc9a <EnvVarContainer::EnvVarContainer(Process*)>
c000dde7:	8b 07                	mov    eax,DWORD PTR [edi]
c000dde9:	89 03                	mov    DWORD PTR [ebx],eax
c000ddeb:	c1 e0 03             	shl    eax,0x3
c000ddee:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddf1:	e8 35 0d 00 00       	call   c000eb2b <malloc>
c000ddf6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ddf9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ddfb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ddfe:	c1 e1 03             	shl    ecx,0x3
c000de01:	89 c7                	mov    edi,eax
c000de03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de05:	83 c4 10             	add    esp,0x10
c000de08:	89 d8                	mov    eax,ebx
c000de0a:	5b                   	pop    ebx
c000de0b:	5e                   	pop    esi
c000de0c:	5f                   	pop    edi
c000de0d:	c3                   	ret    

c000de0e <KeLoadSystemEnv()>:
c000de0e:	53                   	push   ebx
c000de0f:	83 ec 14             	sub    esp,0x14
c000de12:	6a 0c                	push   0xc
c000de14:	e8 12 0d 00 00       	call   c000eb2b <malloc>
c000de19:	89 c3                	mov    ebx,eax
c000de1b:	58                   	pop    eax
c000de1c:	5a                   	pop    edx
c000de1d:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000de23:	53                   	push   ebx
c000de24:	e8 71 fe ff ff       	call   c000dc9a <EnvVarContainer::EnvVarContainer(Process*)>
c000de29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000de2c:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000de32:	e8 47 fe ff ff       	call   c000dc7e <EnvVarContainer::__loadSystem()>
c000de37:	83 c4 18             	add    esp,0x18
c000de3a:	5b                   	pop    ebx
c000de3b:	c3                   	ret    

c000de3c <KeLoadUserEnv()>:
c000de3c:	53                   	push   ebx
c000de3d:	83 ec 14             	sub    esp,0x14
c000de40:	6a 0c                	push   0xc
c000de42:	e8 e4 0c 00 00       	call   c000eb2b <malloc>
c000de47:	89 c3                	mov    ebx,eax
c000de49:	58                   	pop    eax
c000de4a:	5a                   	pop    edx
c000de4b:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000de51:	53                   	push   ebx
c000de52:	e8 43 fe ff ff       	call   c000dc9a <EnvVarContainer::EnvVarContainer(Process*)>
c000de57:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000de5d:	83 c4 18             	add    esp,0x18
c000de60:	5b                   	pop    ebx
c000de61:	c3                   	ret    

c000de62 <KeFlushEnv()>:
c000de62:	c3                   	ret    

c000de63 <KeGetProcessTotalEnvCount(Process*)>:
c000de63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de67:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000de6d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000de73:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000de78:	8b 00                	mov    eax,DWORD PTR [eax]
c000de7a:	03 01                	add    eax,DWORD PTR [ecx]
c000de7c:	85 d2                	test   edx,edx
c000de7e:	74 02                	je     c000de82 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000de80:	03 02                	add    eax,DWORD PTR [edx]
c000de82:	c3                   	ret    

c000de83 <KeGetProcessEnvPair(Process*, int)>:
c000de83:	57                   	push   edi
c000de84:	56                   	push   esi
c000de85:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000de8b:	53                   	push   ebx
c000de8c:	85 f6                	test   esi,esi
c000de8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000de96:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000de9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dea0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dea2:	75 16                	jne    c000deba <KeGetProcessEnvPair(Process*, int)+0x37>
c000dea4:	39 c2                	cmp    edx,eax
c000dea6:	7c 16                	jl     c000debe <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dea8:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000deae:	8b 31                	mov    esi,DWORD PTR [ecx]
c000deb0:	01 c6                	add    esi,eax
c000deb2:	39 d6                	cmp    esi,edx
c000deb4:	7e 3c                	jle    c000def2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000deb6:	29 c2                	sub    edx,eax
c000deb8:	eb 04                	jmp    c000debe <KeGetProcessEnvPair(Process*, int)+0x3b>
c000deba:	39 c2                	cmp    edx,eax
c000debc:	7d 05                	jge    c000dec3 <KeGetProcessEnvPair(Process*, int)+0x40>
c000debe:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dec1:	eb 20                	jmp    c000dee3 <KeGetProcessEnvPair(Process*, int)+0x60>
c000dec3:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dec5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dec8:	39 d1                	cmp    ecx,edx
c000deca:	7e 04                	jle    c000ded0 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000decc:	29 c2                	sub    edx,eax
c000dece:	eb 10                	jmp    c000dee0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000ded0:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000ded6:	03 0e                	add    ecx,DWORD PTR [esi]
c000ded8:	39 d1                	cmp    ecx,edx
c000deda:	7e 16                	jle    c000def2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dedc:	29 c2                	sub    edx,eax
c000dede:	29 fa                	sub    edx,edi
c000dee0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dee3:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dee6:	8b 02                	mov    eax,DWORD PTR [edx]
c000dee8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000deeb:	89 03                	mov    DWORD PTR [ebx],eax
c000deed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000def0:	eb 1d                	jmp    c000df0f <KeGetProcessEnvPair(Process*, int)+0x8c>
c000def2:	83 ec 0c             	sub    esp,0xc
c000def5:	68 b2 28 02 c0       	push   0xc00228b2
c000defa:	e8 73 0f 00 00       	call   c000ee72 <KePanic(char const*)>
c000deff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000df05:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000df0c:	83 c4 10             	add    esp,0x10
c000df0f:	89 d8                	mov    eax,ebx
c000df11:	5b                   	pop    ebx
c000df12:	5e                   	pop    esi
c000df13:	5f                   	pop    edi
c000df14:	c2 04 00             	ret    0x4
c000df17:	90                   	nop

c000df18 <KeSetupInterrupts()>:
c000df18:	83 ec 10             	sub    esp,0x10
c000df1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df23:	90                   	nop
c000df24:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000df2c:	7f 5a                	jg     c000df88 <KeSetupInterrupts()+0x70>
c000df2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000df36:	66 90                	xchg   ax,ax
c000df38:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000df3d:	7f 41                	jg     c000df80 <KeSetupInterrupts()+0x68>
c000df3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df43:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000df4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df4e:	01 d0                	add    eax,edx
c000df50:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000df5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df5f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000df66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df6a:	01 d0                	add    eax,edx
c000df6c:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000df77:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000df7c:	eb ba                	jmp    c000df38 <KeSetupInterrupts()+0x20>
c000df7e:	66 90                	xchg   ax,ax
c000df80:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000df85:	eb 9d                	jmp    c000df24 <KeSetupInterrupts()+0xc>
c000df87:	90                   	nop
c000df88:	90                   	nop
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	c3                   	ret    
c000df8d:	8d 76 00             	lea    esi,[esi+0x0]

c000df90 <int_handler>:
c000df90:	83 ec 2c             	sub    esp,0x2c
c000df93:	90                   	nop
c000df94:	a0 94 cd 02 c0       	mov    al,ds:0xc002cd94
c000df99:	0f b6 c0             	movzx  eax,al
c000df9c:	85 c0                	test   eax,eax
c000df9e:	74 04                	je     c000dfa4 <int_handler+0x14>
c000dfa0:	fa                   	cli    
c000dfa1:	f4                   	hlt    
c000dfa2:	eb f0                	jmp    c000df94 <int_handler+0x4>
c000dfa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfa8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dfab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfaf:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000dfb4:	7e 1a                	jle    c000dfd0 <int_handler+0x40>
c000dfb6:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dfbb:	7f 13                	jg     c000dfd0 <int_handler+0x40>
c000dfbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfc1:	83 e8 20             	sub    eax,0x20
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	50                   	push   eax
c000dfc8:	e8 43 ad 00 00       	call   c0018d10 <HalEndOfInterrupt(int)>
c000dfcd:	83 c4 10             	add    esp,0x10
c000dfd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfd4:	c1 e0 04             	shl    eax,0x4
c000dfd7:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000dfdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfe0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfe4:	c1 e0 04             	shl    eax,0x4
c000dfe7:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dfec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dff8:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000dffd:	0f 8f ad 00 00 00    	jg     c000e0b0 <int_handler+0x120>
c000e003:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e007:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e00e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e012:	01 d0                	add    eax,edx
c000e014:	8b 00                	mov    eax,DWORD PTR [eax]
c000e016:	85 c0                	test   eax,eax
c000e018:	0f 84 86 00 00 00    	je     c000e0a4 <int_handler+0x114>
c000e01e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e022:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e025:	83 f8 60             	cmp    eax,0x60
c000e028:	75 46                	jne    c000e070 <int_handler+0xe0>
c000e02a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e02e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e035:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e039:	01 d0                	add    eax,edx
c000e03b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e03d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e041:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e048:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e04c:	01 ca                	add    edx,ecx
c000e04e:	8b 12                	mov    edx,DWORD PTR [edx]
c000e050:	83 ec 08             	sub    esp,0x8
c000e053:	52                   	push   edx
c000e054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e058:	ff d0                	call   eax
c000e05a:	83 c4 10             	add    esp,0x10
c000e05d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e061:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e069:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e06d:	eb 4d                	jmp    c000e0bc <int_handler+0x12c>
c000e06f:	90                   	nop
c000e070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e074:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e07b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e07f:	01 d0                	add    eax,edx
c000e081:	8b 00                	mov    eax,DWORD PTR [eax]
c000e083:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e087:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e08e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e092:	01 ca                	add    edx,ecx
c000e094:	8b 12                	mov    edx,DWORD PTR [edx]
c000e096:	83 ec 08             	sub    esp,0x8
c000e099:	52                   	push   edx
c000e09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e09e:	ff d0                	call   eax
c000e0a0:	83 c4 10             	add    esp,0x10
c000e0a3:	90                   	nop
c000e0a4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e0a9:	e9 4a ff ff ff       	jmp    c000dff8 <int_handler+0x68>
c000e0ae:	66 90                	xchg   ax,ax
c000e0b0:	b8 00 00 00 00       	mov    eax,0x0
c000e0b5:	ba 00 00 00 00       	mov    edx,0x0
c000e0ba:	66 90                	xchg   ax,ax
c000e0bc:	83 c4 2c             	add    esp,0x2c
c000e0bf:	c3                   	ret    

c000e0c0 <KeDisplayProgramFault(char const*)>:
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	83 ec 0c             	sub    esp,0xc
c000e0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ca:	e8 95 8e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e0dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e0e2:	85 c0                	test   eax,eax
c000e0e4:	74 22                	je     c000e108 <KeDisplayProgramFault(char const*)+0x48>
c000e0e6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e0eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e0f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e0f6:	6a 04                	push   0x4
c000e0f8:	6a 0f                	push   0xf
c000e0fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0fe:	50                   	push   eax
c000e0ff:	e8 9a 35 00 00       	call   c001169e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e104:	83 c4 10             	add    esp,0x10
c000e107:	90                   	nop
c000e108:	90                   	nop
c000e109:	83 c4 0c             	add    esp,0xc
c000e10c:	c3                   	ret    
c000e10d:	8d 76 00             	lea    esi,[esi+0x0]

c000e110 <KeGeneralProtectionFault(void*, void*)>:
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	83 ec 08             	sub    esp,0x8
c000e116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e11e:	e8 8f a1 00 00       	call   c00182b2 <HalHandleGeneralProtectionFault(void*, void*)>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	0f b6 c0             	movzx  eax,al
c000e129:	85 c0                	test   eax,eax
c000e12b:	75 2f                	jne    c000e15c <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e12d:	83 ec 0c             	sub    esp,0xc
c000e130:	68 cc 28 02 c0       	push   0xc00228cc
c000e135:	e8 86 ff ff ff       	call   c000e0c0 <KeDisplayProgramFault(char const*)>
c000e13a:	83 c4 10             	add    esp,0x10
c000e13d:	83 ec 0c             	sub    esp,0xc
c000e140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e144:	e8 03 a3 00 00       	call   c001844c <HalDisplayDebugInfo(void*)>
c000e149:	83 c4 10             	add    esp,0x10
c000e14c:	83 ec 0c             	sub    esp,0xc
c000e14f:	6a 00                	push   0x0
c000e151:	e8 fa 81 00 00       	call   c0016350 <Thr::terminateFromIRQ(int)>
c000e156:	83 c4 10             	add    esp,0x10
c000e159:	eb 05                	jmp    c000e160 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e15b:	90                   	nop
c000e15c:	90                   	nop
c000e15d:	8d 76 00             	lea    esi,[esi+0x0]
c000e160:	83 c4 0c             	add    esp,0xc
c000e163:	c3                   	ret    

c000e164 <KePageFault(void*, void*)>:
c000e164:	83 ec 0c             	sub    esp,0xc
c000e167:	83 ec 0c             	sub    esp,0xc
c000e16a:	68 e5 28 02 c0       	push   0xc00228e5
c000e16f:	e8 f0 8d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e174:	83 c4 10             	add    esp,0x10
c000e177:	83 ec 08             	sub    esp,0x8
c000e17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e182:	e8 d6 a1 00 00       	call   c001835d <HalHandlePageFault(void*, void*)>
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	0f b6 c0             	movzx  eax,al
c000e18d:	85 c0                	test   eax,eax
c000e18f:	75 2f                	jne    c000e1c0 <KePageFault(void*, void*)+0x5c>
c000e191:	83 ec 0c             	sub    esp,0xc
c000e194:	68 f2 28 02 c0       	push   0xc00228f2
c000e199:	e8 22 ff ff ff       	call   c000e0c0 <KeDisplayProgramFault(char const*)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	83 ec 0c             	sub    esp,0xc
c000e1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1a8:	e8 9f a2 00 00       	call   c001844c <HalDisplayDebugInfo(void*)>
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	83 ec 0c             	sub    esp,0xc
c000e1b3:	6a 00                	push   0x0
c000e1b5:	e8 96 81 00 00       	call   c0016350 <Thr::terminateFromIRQ(int)>
c000e1ba:	83 c4 10             	add    esp,0x10
c000e1bd:	eb 05                	jmp    c000e1c4 <KePageFault(void*, void*)+0x60>
c000e1bf:	90                   	nop
c000e1c0:	90                   	nop
c000e1c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1c4:	83 c4 0c             	add    esp,0xc
c000e1c7:	c3                   	ret    

c000e1c8 <KeNonMaskableInterrupt(void*, void*)>:
c000e1c8:	83 ec 0c             	sub    esp,0xc
c000e1cb:	e8 0a a6 00 00       	call   c00187da <HalReceivedNMI()>
c000e1d0:	90                   	nop
c000e1d1:	83 c4 0c             	add    esp,0xc
c000e1d4:	c3                   	ret    
c000e1d5:	8d 76 00             	lea    esi,[esi+0x0]

c000e1d8 <KeOtherFault(void*, void*)>:
c000e1d8:	83 ec 0c             	sub    esp,0xc
c000e1db:	83 ec 0c             	sub    esp,0xc
c000e1de:	68 00 29 02 c0       	push   0xc0022900
c000e1e3:	e8 d8 fe ff ff       	call   c000e0c0 <KeDisplayProgramFault(char const*)>
c000e1e8:	83 c4 10             	add    esp,0x10
c000e1eb:	83 ec 0c             	sub    esp,0xc
c000e1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f2:	e8 55 a2 00 00       	call   c001844c <HalDisplayDebugInfo(void*)>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	83 ec 0c             	sub    esp,0xc
c000e1fd:	6a 00                	push   0x0
c000e1ff:	e8 4c 81 00 00       	call   c0016350 <Thr::terminateFromIRQ(int)>
c000e204:	83 c4 10             	add    esp,0x10
c000e207:	90                   	nop
c000e208:	83 c4 0c             	add    esp,0xc
c000e20b:	c3                   	ret    

c000e20c <KeOpcodeFault(void*, void*)>:
c000e20c:	55                   	push   ebp
c000e20d:	89 e5                	mov    ebp,esp
c000e20f:	83 ec 08             	sub    esp,0x8
c000e212:	83 ec 08             	sub    esp,0x8
c000e215:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e218:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e21b:	e8 ea a1 00 00       	call   c001840a <HalHandleOpcodeFault(void*, void*)>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	0f b6 c0             	movzx  eax,al
c000e226:	85 c0                	test   eax,eax
c000e228:	75 2e                	jne    c000e258 <KeOpcodeFault(void*, void*)+0x4c>
c000e22a:	83 ec 0c             	sub    esp,0xc
c000e22d:	68 28 29 02 c0       	push   0xc0022928
c000e232:	e8 89 fe ff ff       	call   c000e0c0 <KeDisplayProgramFault(char const*)>
c000e237:	83 c4 10             	add    esp,0x10
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e240:	e8 07 a2 00 00       	call   c001844c <HalDisplayDebugInfo(void*)>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	6a 00                	push   0x0
c000e24d:	e8 fe 80 00 00       	call   c0016350 <Thr::terminateFromIRQ(int)>
c000e252:	83 c4 10             	add    esp,0x10
c000e255:	eb 05                	jmp    c000e25c <KeOpcodeFault(void*, void*)+0x50>
c000e257:	90                   	nop
c000e258:	90                   	nop
c000e259:	8d 76 00             	lea    esi,[esi+0x0]
c000e25c:	c9                   	leave  
c000e25d:	c3                   	ret    
c000e25e:	66 90                	xchg   ax,ax

c000e260 <KeDoubleFault(void*, void*)>:
c000e260:	55                   	push   ebp
c000e261:	89 e5                	mov    ebp,esp
c000e263:	83 ec 08             	sub    esp,0x8
c000e266:	83 ec 0c             	sub    esp,0xc
c000e269:	68 35 29 02 c0       	push   0xc0022935
c000e26e:	e8 ff 0b 00 00       	call   c000ee72 <KePanic(char const*)>
c000e273:	83 c4 10             	add    esp,0x10
c000e276:	90                   	nop
c000e277:	c9                   	leave  
c000e278:	c3                   	ret    
c000e279:	90                   	nop

c000e27a <GDTEntry::setBase(unsigned int)>:
c000e27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e27e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e282:	89 c1                	mov    ecx,eax
c000e284:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e288:	c1 e9 10             	shr    ecx,0x10
c000e28b:	c1 e8 18             	shr    eax,0x18
c000e28e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e291:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e294:	c3                   	ret    
c000e295:	90                   	nop

c000e296 <GDTEntry::setLimit(unsigned int)>:
c000e296:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e29a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e29e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e2a1:	66 89 01             	mov    WORD PTR [ecx],ax
c000e2a4:	83 e2 f0             	and    edx,0xfffffff0
c000e2a7:	c1 e8 10             	shr    eax,0x10
c000e2aa:	83 e0 0f             	and    eax,0xf
c000e2ad:	09 d0                	or     eax,edx
c000e2af:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e2b2:	c3                   	ret    
c000e2b3:	90                   	nop

c000e2b4 <GDT::GDT()>:
c000e2b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2c8:	90                   	nop
c000e2c9:	c3                   	ret    

c000e2ca <GDT::addEntry(GDTEntry)>:
c000e2ca:	53                   	push   ebx
c000e2cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e2cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2d3:	8b 02                	mov    eax,DWORD PTR [edx]
c000e2d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2d9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e2dd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e2e1:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2e4:	c1 e0 03             	shl    eax,0x3
c000e2e7:	89 0a                	mov    DWORD PTR [edx],ecx
c000e2e9:	5b                   	pop    ebx
c000e2ea:	c3                   	ret    
c000e2eb:	90                   	nop

c000e2ec <GDT::getNumberOfEntries()>:
c000e2ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2f2:	c3                   	ret    
c000e2f3:	90                   	nop

c000e2f4 <GDT::flush()>:
c000e2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2fa:	83 c0 04             	add    eax,0x4
c000e2fd:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e304:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e309:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e310:	e9 45 20 ff ff       	jmp    c000035a <loadGDT>
c000e315:	90                   	nop

c000e316 <GDT::setup()>:
c000e316:	57                   	push   edi
c000e317:	56                   	push   esi
c000e318:	53                   	push   ebx
c000e319:	83 ec 30             	sub    esp,0x30
c000e31c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e320:	6a 00                	push   0x0
c000e322:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e326:	56                   	push   esi
c000e327:	e8 4e ff ff ff       	call   c000e27a <GDTEntry::setBase(unsigned int)>
c000e32c:	6a 00                	push   0x0
c000e32e:	56                   	push   esi
c000e32f:	e8 62 ff ff ff       	call   c000e296 <GDTEntry::setLimit(unsigned int)>
c000e334:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e33c:	6a 00                	push   0x0
c000e33e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e342:	56                   	push   esi
c000e343:	e8 32 ff ff ff       	call   c000e27a <GDTEntry::setBase(unsigned int)>
c000e348:	68 ff ff ff 00       	push   0xffffff
c000e34d:	56                   	push   esi
c000e34e:	e8 43 ff ff ff       	call   c000e296 <GDTEntry::setLimit(unsigned int)>
c000e353:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e35b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e35f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e363:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e368:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e36d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e371:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e375:	89 f8                	mov    eax,edi
c000e377:	89 fa                	mov    edx,edi
c000e379:	80 e4 f7             	and    ah,0xf7
c000e37c:	80 ce 60             	or     dh,0x60
c000e37f:	89 c7                	mov    edi,eax
c000e381:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e385:	80 cc 60             	or     ah,0x60
c000e388:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e38c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e390:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e398:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e39c:	83 c4 20             	add    esp,0x20
c000e39f:	6a 00                	push   0x0
c000e3a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e3a5:	50                   	push   eax
c000e3a6:	e8 cf fe ff ff       	call   c000e27a <GDTEntry::setBase(unsigned int)>
c000e3ab:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e3af:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e3b3:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e3b7:	83 e0 3f             	and    eax,0x3f
c000e3ba:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e3be:	6a 00                	push   0x0
c000e3c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e3c4:	50                   	push   eax
c000e3c5:	e8 b0 fe ff ff       	call   c000e27a <GDTEntry::setBase(unsigned int)>
c000e3ca:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e3ce:	83 e0 3f             	and    eax,0x3f
c000e3d1:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e3d5:	83 c4 0c             	add    esp,0xc
c000e3d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3e0:	53                   	push   ebx
c000e3e1:	e8 e4 fe ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c000e3e6:	83 c4 0c             	add    esp,0xc
c000e3e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3f1:	53                   	push   ebx
c000e3f2:	e8 d3 fe ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c000e3f7:	83 c4 0c             	add    esp,0xc
c000e3fa:	57                   	push   edi
c000e3fb:	56                   	push   esi
c000e3fc:	53                   	push   ebx
c000e3fd:	e8 c8 fe ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c000e402:	83 c4 0c             	add    esp,0xc
c000e405:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e409:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e40d:	53                   	push   ebx
c000e40e:	e8 b7 fe ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c000e413:	83 c4 0c             	add    esp,0xc
c000e416:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e41a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e41e:	53                   	push   ebx
c000e41f:	e8 a6 fe ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c000e424:	83 c4 0c             	add    esp,0xc
c000e427:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e42b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e42f:	53                   	push   ebx
c000e430:	e8 95 fe ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c000e435:	83 c4 0c             	add    esp,0xc
c000e438:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e43c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e440:	53                   	push   ebx
c000e441:	e8 84 fe ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c000e446:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e449:	e8 a6 fe ff ff       	call   c000e2f4 <GDT::flush()>
c000e44e:	83 c4 40             	add    esp,0x40
c000e451:	5b                   	pop    ebx
c000e452:	5e                   	pop    esi
c000e453:	5f                   	pop    edi
c000e454:	c3                   	ret    

c000e455 <idleFunction(void*)>:
c000e455:	83 ec 0c             	sub    esp,0xc
c000e458:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e45f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e466:	75 01                	jne    c000e469 <idleFunction(void*)+0x14>
c000e468:	fb                   	sti    
c000e469:	e8 07 a4 00 00       	call   c0018875 <HalSystemIdle()>
c000e46e:	e8 23 26 01 00       	call   c0020a96 <idleCommon()>
c000e473:	eb f4                	jmp    c000e469 <idleFunction(void*)+0x14>
c000e475:	66 90                	xchg   ax,ax
c000e477:	90                   	nop

c000e478 <IDTEntry::IDTEntry(bool)>:
c000e478:	53                   	push   ebx
c000e479:	83 ec 04             	sub    esp,0x4
c000e47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e480:	88 04 24             	mov    BYTE PTR [esp],al
c000e483:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e487:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e491:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e495:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e499:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e49c:	83 e2 f0             	and    edx,0xfffffff0
c000e49f:	83 ca 0e             	or     edx,0xe
c000e4a2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e4a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4a9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e4ac:	83 e2 ef             	and    edx,0xffffffef
c000e4af:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e4b2:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e4b6:	85 c0                	test   eax,eax
c000e4b8:	74 06                	je     c000e4c0 <IDTEntry::IDTEntry(bool)+0x48>
c000e4ba:	b2 03                	mov    dl,0x3
c000e4bc:	eb 06                	jmp    c000e4c4 <IDTEntry::IDTEntry(bool)+0x4c>
c000e4be:	66 90                	xchg   ax,ax
c000e4c0:	b2 00                	mov    dl,0x0
c000e4c2:	66 90                	xchg   ax,ax
c000e4c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4c8:	83 e2 03             	and    edx,0x3
c000e4cb:	89 d3                	mov    ebx,edx
c000e4cd:	c1 e3 05             	shl    ebx,0x5
c000e4d0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e4d3:	83 e2 9f             	and    edx,0xffffff9f
c000e4d6:	88 d1                	mov    cl,dl
c000e4d8:	88 da                	mov    dl,bl
c000e4da:	09 ca                	or     edx,ecx
c000e4dc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e4df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4e3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e4e6:	83 ca 80             	or     edx,0xffffff80
c000e4e9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e4ec:	90                   	nop
c000e4ed:	83 c4 04             	add    esp,0x4
c000e4f0:	5b                   	pop    ebx
c000e4f1:	c3                   	ret    

c000e4f2 <IDTEntry::setOffset(unsigned int)>:
c000e4f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e4f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4fa:	66 89 02             	mov    WORD PTR [edx],ax
c000e4fd:	c1 e8 10             	shr    eax,0x10
c000e500:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e504:	c3                   	ret    
c000e505:	90                   	nop
c000e506:	66 90                	xchg   ax,ax

c000e508 <IDT::IDT()>:
c000e508:	90                   	nop
c000e509:	c3                   	ret    

c000e50a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e50a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e50e:	83 c0 30             	add    eax,0x30
c000e511:	c3                   	ret    

c000e512 <IDT::addEntry(IDTEntry, int)>:
c000e512:	53                   	push   ebx
c000e513:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e517:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e51b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e51f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e523:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e526:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e52a:	5b                   	pop    ebx
c000e52b:	c3                   	ret    

c000e52c <IDT::addEntry(int, void (*)(), bool)>:
c000e52c:	53                   	push   ebx
c000e52d:	83 ec 10             	sub    esp,0x10
c000e530:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e535:	50                   	push   eax
c000e536:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e53a:	53                   	push   ebx
c000e53b:	e8 38 ff ff ff       	call   c000e478 <IDTEntry::IDTEntry(bool)>
c000e540:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e544:	53                   	push   ebx
c000e545:	e8 a8 ff ff ff       	call   c000e4f2 <IDTEntry::setOffset(unsigned int)>
c000e54a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e552:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e556:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e55a:	e8 b3 ff ff ff       	call   c000e512 <IDT::addEntry(IDTEntry, int)>
c000e55f:	83 c4 30             	add    esp,0x30
c000e562:	5b                   	pop    ebx
c000e563:	c3                   	ret    

c000e564 <IDT::flush()>:
c000e564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e568:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e571:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e576:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e57d:	c3                   	ret    

c000e57e <IDT::setup()>:
c000e57e:	57                   	push   edi
c000e57f:	56                   	push   esi
c000e580:	53                   	push   ebx
c000e581:	83 ec 10             	sub    esp,0x10
c000e584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e588:	6a 00                	push   0x0
c000e58a:	68 40 fd 01 c0       	push   0xc001fd40
c000e58f:	6a 00                	push   0x0
c000e591:	53                   	push   ebx
c000e592:	e8 95 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e597:	6a 00                	push   0x0
c000e599:	68 50 fd 01 c0       	push   0xc001fd50
c000e59e:	6a 01                	push   0x1
c000e5a0:	53                   	push   ebx
c000e5a1:	e8 86 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e5a6:	83 c4 20             	add    esp,0x20
c000e5a9:	6a 00                	push   0x0
c000e5ab:	68 5a fd 01 c0       	push   0xc001fd5a
c000e5b0:	6a 02                	push   0x2
c000e5b2:	53                   	push   ebx
c000e5b3:	e8 74 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e5b8:	6a 00                	push   0x0
c000e5ba:	68 64 fd 01 c0       	push   0xc001fd64
c000e5bf:	6a 03                	push   0x3
c000e5c1:	53                   	push   ebx
c000e5c2:	e8 65 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e5c7:	83 c4 20             	add    esp,0x20
c000e5ca:	6a 00                	push   0x0
c000e5cc:	68 6e fd 01 c0       	push   0xc001fd6e
c000e5d1:	6a 04                	push   0x4
c000e5d3:	53                   	push   ebx
c000e5d4:	e8 53 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e5d9:	6a 00                	push   0x0
c000e5db:	68 78 fd 01 c0       	push   0xc001fd78
c000e5e0:	6a 05                	push   0x5
c000e5e2:	53                   	push   ebx
c000e5e3:	e8 44 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e5e8:	83 c4 20             	add    esp,0x20
c000e5eb:	6a 00                	push   0x0
c000e5ed:	68 82 fd 01 c0       	push   0xc001fd82
c000e5f2:	6a 06                	push   0x6
c000e5f4:	53                   	push   ebx
c000e5f5:	e8 32 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e5fa:	6a 00                	push   0x0
c000e5fc:	68 8c fd 01 c0       	push   0xc001fd8c
c000e601:	6a 07                	push   0x7
c000e603:	53                   	push   ebx
c000e604:	e8 23 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e609:	83 c4 20             	add    esp,0x20
c000e60c:	6a 00                	push   0x0
c000e60e:	68 96 fd 01 c0       	push   0xc001fd96
c000e613:	6a 08                	push   0x8
c000e615:	53                   	push   ebx
c000e616:	e8 11 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e61b:	6a 00                	push   0x0
c000e61d:	68 9e fd 01 c0       	push   0xc001fd9e
c000e622:	6a 09                	push   0x9
c000e624:	53                   	push   ebx
c000e625:	e8 02 ff ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e62a:	83 c4 20             	add    esp,0x20
c000e62d:	6a 00                	push   0x0
c000e62f:	68 a8 fd 01 c0       	push   0xc001fda8
c000e634:	6a 0a                	push   0xa
c000e636:	53                   	push   ebx
c000e637:	e8 f0 fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e63c:	6a 00                	push   0x0
c000e63e:	68 b0 fd 01 c0       	push   0xc001fdb0
c000e643:	6a 0b                	push   0xb
c000e645:	53                   	push   ebx
c000e646:	e8 e1 fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e64b:	83 c4 20             	add    esp,0x20
c000e64e:	6a 00                	push   0x0
c000e650:	68 b8 fd 01 c0       	push   0xc001fdb8
c000e655:	6a 0c                	push   0xc
c000e657:	53                   	push   ebx
c000e658:	e8 cf fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e65d:	6a 00                	push   0x0
c000e65f:	68 c0 fd 01 c0       	push   0xc001fdc0
c000e664:	6a 0d                	push   0xd
c000e666:	53                   	push   ebx
c000e667:	e8 c0 fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e66c:	83 c4 20             	add    esp,0x20
c000e66f:	6a 00                	push   0x0
c000e671:	68 da fd 01 c0       	push   0xc001fdda
c000e676:	6a 0e                	push   0xe
c000e678:	53                   	push   ebx
c000e679:	e8 ae fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e67e:	6a 00                	push   0x0
c000e680:	68 e2 fd 01 c0       	push   0xc001fde2
c000e685:	6a 0f                	push   0xf
c000e687:	53                   	push   ebx
c000e688:	e8 9f fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e68d:	83 c4 20             	add    esp,0x20
c000e690:	6a 00                	push   0x0
c000e692:	68 ec fd 01 c0       	push   0xc001fdec
c000e697:	6a 10                	push   0x10
c000e699:	53                   	push   ebx
c000e69a:	e8 8d fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e69f:	6a 00                	push   0x0
c000e6a1:	68 f6 fd 01 c0       	push   0xc001fdf6
c000e6a6:	6a 11                	push   0x11
c000e6a8:	53                   	push   ebx
c000e6a9:	e8 7e fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e6ae:	83 c4 20             	add    esp,0x20
c000e6b1:	6a 00                	push   0x0
c000e6b3:	68 00 fe 01 c0       	push   0xc001fe00
c000e6b8:	6a 12                	push   0x12
c000e6ba:	53                   	push   ebx
c000e6bb:	e8 6c fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e6c0:	6a 01                	push   0x1
c000e6c2:	68 9a fe 01 c0       	push   0xc001fe9a
c000e6c7:	6a 60                	push   0x60
c000e6c9:	53                   	push   ebx
c000e6ca:	e8 5d fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e6cf:	83 c4 20             	add    esp,0x20
c000e6d2:	6a 00                	push   0x0
c000e6d4:	68 a1 fe 01 c0       	push   0xc001fea1
c000e6d9:	6a 20                	push   0x20
c000e6db:	53                   	push   ebx
c000e6dc:	e8 4b fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e6e1:	6a 00                	push   0x0
c000e6e3:	68 8c fe 01 c0       	push   0xc001fe8c
c000e6e8:	6a 21                	push   0x21
c000e6ea:	53                   	push   ebx
c000e6eb:	e8 3c fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e6f0:	83 c4 20             	add    esp,0x20
c000e6f3:	6a 00                	push   0x0
c000e6f5:	68 93 fe 01 c0       	push   0xc001fe93
c000e6fa:	6a 22                	push   0x22
c000e6fc:	53                   	push   ebx
c000e6fd:	e8 2a fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e702:	6a 00                	push   0x0
c000e704:	68 0a fe 01 c0       	push   0xc001fe0a
c000e709:	6a 23                	push   0x23
c000e70b:	53                   	push   ebx
c000e70c:	e8 1b fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e711:	83 c4 20             	add    esp,0x20
c000e714:	6a 00                	push   0x0
c000e716:	68 14 fe 01 c0       	push   0xc001fe14
c000e71b:	6a 24                	push   0x24
c000e71d:	53                   	push   ebx
c000e71e:	e8 09 fe ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e723:	6a 00                	push   0x0
c000e725:	68 1e fe 01 c0       	push   0xc001fe1e
c000e72a:	6a 25                	push   0x25
c000e72c:	53                   	push   ebx
c000e72d:	e8 fa fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e732:	83 c4 20             	add    esp,0x20
c000e735:	6a 00                	push   0x0
c000e737:	68 28 fe 01 c0       	push   0xc001fe28
c000e73c:	6a 26                	push   0x26
c000e73e:	53                   	push   ebx
c000e73f:	e8 e8 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e744:	6a 00                	push   0x0
c000e746:	68 32 fe 01 c0       	push   0xc001fe32
c000e74b:	6a 27                	push   0x27
c000e74d:	53                   	push   ebx
c000e74e:	e8 d9 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e753:	83 c4 20             	add    esp,0x20
c000e756:	6a 00                	push   0x0
c000e758:	68 3c fe 01 c0       	push   0xc001fe3c
c000e75d:	6a 28                	push   0x28
c000e75f:	53                   	push   ebx
c000e760:	e8 c7 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e765:	6a 00                	push   0x0
c000e767:	68 46 fe 01 c0       	push   0xc001fe46
c000e76c:	6a 29                	push   0x29
c000e76e:	53                   	push   ebx
c000e76f:	e8 b8 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e774:	83 c4 20             	add    esp,0x20
c000e777:	6a 00                	push   0x0
c000e779:	68 50 fe 01 c0       	push   0xc001fe50
c000e77e:	6a 2a                	push   0x2a
c000e780:	53                   	push   ebx
c000e781:	e8 a6 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e786:	6a 00                	push   0x0
c000e788:	68 5a fe 01 c0       	push   0xc001fe5a
c000e78d:	6a 2b                	push   0x2b
c000e78f:	53                   	push   ebx
c000e790:	e8 97 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e795:	83 c4 20             	add    esp,0x20
c000e798:	6a 00                	push   0x0
c000e79a:	68 64 fe 01 c0       	push   0xc001fe64
c000e79f:	6a 2c                	push   0x2c
c000e7a1:	53                   	push   ebx
c000e7a2:	e8 85 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e7a7:	6a 00                	push   0x0
c000e7a9:	68 6e fe 01 c0       	push   0xc001fe6e
c000e7ae:	6a 2d                	push   0x2d
c000e7b0:	53                   	push   ebx
c000e7b1:	e8 76 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e7b6:	83 c4 20             	add    esp,0x20
c000e7b9:	6a 00                	push   0x0
c000e7bb:	68 78 fe 01 c0       	push   0xc001fe78
c000e7c0:	6a 2e                	push   0x2e
c000e7c2:	53                   	push   ebx
c000e7c3:	e8 64 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e7c8:	6a 00                	push   0x0
c000e7ca:	68 82 fe 01 c0       	push   0xc001fe82
c000e7cf:	6a 2f                	push   0x2f
c000e7d1:	53                   	push   ebx
c000e7d2:	e8 55 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e7d7:	83 c4 20             	add    esp,0x20
c000e7da:	6a 00                	push   0x0
c000e7dc:	68 dc ff 01 c0       	push   0xc001ffdc
c000e7e1:	6a 30                	push   0x30
c000e7e3:	53                   	push   ebx
c000e7e4:	e8 43 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e7e9:	6a 00                	push   0x0
c000e7eb:	68 e6 ff 01 c0       	push   0xc001ffe6
c000e7f0:	6a 31                	push   0x31
c000e7f2:	53                   	push   ebx
c000e7f3:	e8 34 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e7f8:	83 c4 20             	add    esp,0x20
c000e7fb:	6a 00                	push   0x0
c000e7fd:	68 f0 ff 01 c0       	push   0xc001fff0
c000e802:	6a 32                	push   0x32
c000e804:	53                   	push   ebx
c000e805:	e8 22 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e80a:	6a 00                	push   0x0
c000e80c:	68 fa ff 01 c0       	push   0xc001fffa
c000e811:	6a 33                	push   0x33
c000e813:	53                   	push   ebx
c000e814:	e8 13 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e819:	83 c4 20             	add    esp,0x20
c000e81c:	6a 00                	push   0x0
c000e81e:	68 04 00 02 c0       	push   0xc0020004
c000e823:	6a 34                	push   0x34
c000e825:	53                   	push   ebx
c000e826:	e8 01 fd ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e82b:	6a 00                	push   0x0
c000e82d:	68 0e 00 02 c0       	push   0xc002000e
c000e832:	6a 35                	push   0x35
c000e834:	53                   	push   ebx
c000e835:	e8 f2 fc ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e83a:	83 c4 20             	add    esp,0x20
c000e83d:	6a 00                	push   0x0
c000e83f:	68 18 00 02 c0       	push   0xc0020018
c000e844:	6a 36                	push   0x36
c000e846:	53                   	push   ebx
c000e847:	e8 e0 fc ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e84c:	6a 00                	push   0x0
c000e84e:	68 22 00 02 c0       	push   0xc0020022
c000e853:	6a 37                	push   0x37
c000e855:	53                   	push   ebx
c000e856:	e8 d1 fc ff ff       	call   c000e52c <IDT::addEntry(int, void (*)(), bool)>
c000e85b:	83 c4 1c             	add    esp,0x1c
c000e85e:	6a 03                	push   0x3
c000e860:	6a 02                	push   0x2
c000e862:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e868:	e8 df 41 00 00       	call   c0012a4c <VAS::allocatePages(int, int)>
c000e86d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e874:	89 c6                	mov    esi,eax
c000e876:	e8 b0 02 00 00       	call   c000eb2b <malloc>
c000e87b:	81 c6 00 20 00 00    	add    esi,0x2000
c000e881:	89 04 24             	mov    DWORD PTR [esp],eax
c000e884:	89 c7                	mov    edi,eax
c000e886:	e8 7d 32 00 00       	call   c0011b08 <TSS::TSS()>
c000e88b:	83 c4 0c             	add    esp,0xc
c000e88e:	68 96 fd 01 c0       	push   0xc001fd96
c000e893:	56                   	push   esi
c000e894:	57                   	push   edi
c000e895:	e8 b2 32 00 00       	call   c0011b4c <TSS::setup(unsigned long, unsigned long)>
c000e89a:	89 c6                	mov    esi,eax
c000e89c:	58                   	pop    eax
c000e89d:	5a                   	pop    edx
c000e89e:	6a 00                	push   0x0
c000e8a0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e8a4:	50                   	push   eax
c000e8a5:	e8 ce fb ff ff       	call   c000e478 <IDTEntry::IDTEntry(bool)>
c000e8aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8ae:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e8b3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e8ba:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e8c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e8c4:	80 ce 05             	or     dh,0x5
c000e8c7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e8ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e8ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8d2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e8d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e8d8:	e8 87 fc ff ff       	call   c000e564 <IDT::flush()>
c000e8dd:	83 c4 20             	add    esp,0x20
c000e8e0:	5b                   	pop    ebx
c000e8e1:	5e                   	pop    esi
c000e8e2:	5f                   	pop    edi
c000e8e3:	c3                   	ret    

c000e8e4 <CPU::current()>:
c000e8e4:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e8e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e8ef:	c3                   	ret    

c000e8f0 <operator new(unsigned long)>:
c000e8f0:	e9 36 02 00 00       	jmp    c000eb2b <malloc>

c000e8f5 <operator delete(void*)>:
c000e8f5:	e9 51 02 00 00       	jmp    c000eb4b <rfree>

c000e8fa <disableIRQs()>:
c000e8fa:	fa                   	cli    
c000e8fb:	c3                   	ret    

c000e8fc <enableIRQs()>:
c000e8fc:	fb                   	sti    
c000e8fd:	c3                   	ret    

c000e8fe <lockScheduler()>:
c000e8fe:	fa                   	cli    
c000e8ff:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e905:	c3                   	ret    

c000e906 <unlockScheduler()>:
c000e906:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e90d:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e914:	75 01                	jne    c000e917 <unlockScheduler()+0x11>
c000e916:	fb                   	sti    
c000e917:	c3                   	ret    

c000e918 <lockStuff()>:
c000e918:	fa                   	cli    
c000e919:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e91f:	ff 05 ac d6 02 c0    	inc    DWORD PTR ds:0xc002d6ac
c000e925:	c3                   	ret    

c000e926 <unlockStuff()>:
c000e926:	83 ec 0c             	sub    esp,0xc
c000e929:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000e92e:	48                   	dec    eax
c000e92f:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000e934:	75 18                	jne    c000e94e <unlockStuff()+0x28>
c000e936:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c000e93d:	74 0f                	je     c000e94e <unlockStuff()+0x28>
c000e93f:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000e949:	e8 42 71 00 00       	call   c0015a90 <schedule()>
c000e94e:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e955:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e95c:	75 01                	jne    c000e95f <unlockStuff()+0x39>
c000e95e:	fb                   	sti    
c000e95f:	83 c4 0c             	add    esp,0xc
c000e962:	c3                   	ret    

c000e963 <Virt::getAKernelVAS()>:
c000e963:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c000e968:	c3                   	ret    

c000e969 <__not_memcpy>:
c000e969:	57                   	push   edi
c000e96a:	56                   	push   esi
c000e96b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e96f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e973:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e977:	89 c7                	mov    edi,eax
c000e979:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e97b:	5e                   	pop    esi
c000e97c:	5f                   	pop    edi
c000e97d:	c3                   	ret    

c000e97e <sbrk>:
c000e97e:	55                   	push   ebp
c000e97f:	57                   	push   edi
c000e980:	56                   	push   esi
c000e981:	53                   	push   ebx
c000e982:	83 ec 1c             	sub    esp,0x1c
c000e985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e989:	85 c0                	test   eax,eax
c000e98b:	74 61                	je     c000e9ee <sbrk+0x70>
c000e98d:	78 66                	js     c000e9f5 <sbrk+0x77>
c000e98f:	8b 15 50 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024f50
c000e995:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e999:	05 ff 0f 00 00       	add    eax,0xfff
c000e99e:	89 c5                	mov    ebp,eax
c000e9a0:	78 6b                	js     c000ea0d <sbrk+0x8f>
c000e9a2:	c1 fd 0c             	sar    ebp,0xc
c000e9a5:	bb 00 00 00 00       	mov    ebx,0x0
c000e9aa:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e9b0:	8b 3d 50 4f 02 c0    	mov    edi,DWORD PTR ds:0xc0024f50
c000e9b6:	e8 ab 06 00 00       	call   c000f066 <Phys::allocatePage()>
c000e9bb:	68 01 04 00 00       	push   0x401
c000e9c0:	57                   	push   edi
c000e9c1:	50                   	push   eax
c000e9c2:	56                   	push   esi
c000e9c3:	e8 80 3f 00 00       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e9c8:	81 05 50 4f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024f50,0x1000
c000e9d2:	83 c3 01             	add    ebx,0x1
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	39 dd                	cmp    ebp,ebx
c000e9da:	75 ce                	jne    c000e9aa <sbrk+0x2c>
c000e9dc:	0f 20 d8             	mov    eax,cr3
c000e9df:	0f 22 d8             	mov    cr3,eax
c000e9e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e6:	83 c4 1c             	add    esp,0x1c
c000e9e9:	5b                   	pop    ebx
c000e9ea:	5e                   	pop    esi
c000e9eb:	5f                   	pop    edi
c000e9ec:	5d                   	pop    ebp
c000e9ed:	c3                   	ret    
c000e9ee:	a1 50 4f 02 c0       	mov    eax,ds:0xc0024f50
c000e9f3:	eb f1                	jmp    c000e9e6 <sbrk+0x68>
c000e9f5:	83 ec 08             	sub    esp,0x8
c000e9f8:	50                   	push   eax
c000e9f9:	68 44 29 02 c0       	push   0xc0022944
c000e9fe:	e8 61 85 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ea03:	83 c4 10             	add    esp,0x10
c000ea06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ea0b:	eb d9                	jmp    c000e9e6 <sbrk+0x68>
c000ea0d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000ea13:	eb 8d                	jmp    c000e9a2 <sbrk+0x24>

c000ea15 <sbrk_thunk>:
c000ea15:	83 ec 0c             	sub    esp,0xc
c000ea18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1c:	3d ff bf 00 00       	cmp    eax,0xbfff
c000ea21:	7f 10                	jg     c000ea33 <sbrk_thunk+0x1e>
c000ea23:	83 ec 0c             	sub    esp,0xc
c000ea26:	50                   	push   eax
c000ea27:	e8 52 ff ff ff       	call   c000e97e <sbrk>
c000ea2c:	83 c4 10             	add    esp,0x10
c000ea2f:	83 c4 0c             	add    esp,0xc
c000ea32:	c3                   	ret    
c000ea33:	83 ec 08             	sub    esp,0x8
c000ea36:	50                   	push   eax
c000ea37:	68 74 29 02 c0       	push   0xc0022974
c000ea3c:	e8 23 85 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ea41:	83 c4 10             	add    esp,0x10
c000ea44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ea49:	eb e4                	jmp    c000ea2f <sbrk_thunk+0x1a>

c000ea4b <mmap>:
c000ea4b:	55                   	push   ebp
c000ea4c:	57                   	push   edi
c000ea4d:	56                   	push   esi
c000ea4e:	53                   	push   ebx
c000ea4f:	83 ec 18             	sub    esp,0x18
c000ea52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea56:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000ea5c:	89 fb                	mov    ebx,edi
c000ea5e:	c1 eb 0c             	shr    ebx,0xc
c000ea61:	53                   	push   ebx
c000ea62:	e8 fe 37 00 00       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c000ea67:	89 c5                	mov    ebp,eax
c000ea69:	83 c4 10             	add    esp,0x10
c000ea6c:	85 db                	test   ebx,ebx
c000ea6e:	7e 2f                	jle    c000ea9f <mmap+0x54>
c000ea70:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000ea76:	01 c7                	add    edi,eax
c000ea78:	89 c3                	mov    ebx,eax
c000ea7a:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000ea80:	e8 e1 05 00 00       	call   c000f066 <Phys::allocatePage()>
c000ea85:	68 01 04 00 00       	push   0x401
c000ea8a:	53                   	push   ebx
c000ea8b:	50                   	push   eax
c000ea8c:	56                   	push   esi
c000ea8d:	e8 b6 3e 00 00       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea92:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea98:	83 c4 10             	add    esp,0x10
c000ea9b:	39 fb                	cmp    ebx,edi
c000ea9d:	75 db                	jne    c000ea7a <mmap+0x2f>
c000ea9f:	89 e8                	mov    eax,ebp
c000eaa1:	83 c4 0c             	add    esp,0xc
c000eaa4:	5b                   	pop    ebx
c000eaa5:	5e                   	pop    esi
c000eaa6:	5f                   	pop    edi
c000eaa7:	5d                   	pop    ebp
c000eaa8:	c3                   	ret    

c000eaa9 <munmap>:
c000eaa9:	83 ec 18             	sub    esp,0x18
c000eaac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eab0:	e8 b8 3a 00 00       	call   c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c000eab5:	b8 00 00 00 00       	mov    eax,0x0
c000eaba:	83 c4 1c             	add    esp,0x1c
c000eabd:	c3                   	ret    

c000eabe <liballoc_lock()>:
c000eabe:	fa                   	cli    
c000eabf:	83 05 b0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6b0,0x1
c000eac6:	b8 00 00 00 00       	mov    eax,0x0
c000eacb:	c3                   	ret    

c000eacc <liballoc_unlock()>:
c000eacc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ead4:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000eadb:	75 01                	jne    c000eade <liballoc_unlock()+0x12>
c000eadd:	fb                   	sti    
c000eade:	b8 00 00 00 00       	mov    eax,0x0
c000eae3:	c3                   	ret    

c000eae4 <liballoc_alloc(int)>:
c000eae4:	83 ec 10             	sub    esp,0x10
c000eae7:	6a 01                	push   0x1
c000eae9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaed:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000eaf3:	e8 54 3f 00 00       	call   c0012a4c <VAS::allocatePages(int, int)>
c000eaf8:	83 c4 1c             	add    esp,0x1c
c000eafb:	c3                   	ret    

c000eafc <liballoc_free(void*, int)>:
c000eafc:	83 ec 14             	sub    esp,0x14
c000eaff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb03:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000eb09:	e8 9c 3b 00 00       	call   c00126aa <VAS::freeAllocatedPages(unsigned long)>
c000eb0e:	b8 00 00 00 00       	mov    eax,0x0
c000eb13:	83 c4 1c             	add    esp,0x1c
c000eb16:	c3                   	ret    

c000eb17 <realloc>:
c000eb17:	83 ec 14             	sub    esp,0x14
c000eb1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb22:	e8 30 2c ff ff       	call   c0001757 <dlrealloc>
c000eb27:	83 c4 1c             	add    esp,0x1c
c000eb2a:	c3                   	ret    

c000eb2b <malloc>:
c000eb2b:	83 ec 18             	sub    esp,0x18
c000eb2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb32:	e8 e3 26 ff ff       	call   c000121a <dlmalloc>
c000eb37:	83 c4 1c             	add    esp,0x1c
c000eb3a:	c3                   	ret    

c000eb3b <free>:
c000eb3b:	83 ec 18             	sub    esp,0x18
c000eb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb42:	e8 0c 22 ff ff       	call   c0000d53 <dlfree>
c000eb47:	83 c4 1c             	add    esp,0x1c
c000eb4a:	c3                   	ret    

c000eb4b <rfree>:
c000eb4b:	83 ec 18             	sub    esp,0x18
c000eb4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb52:	e8 fc 21 ff ff       	call   c0000d53 <dlfree>
c000eb57:	83 c4 1c             	add    esp,0x1c
c000eb5a:	c3                   	ret    

c000eb5b <calloc>:
c000eb5b:	56                   	push   esi
c000eb5c:	53                   	push   ebx
c000eb5d:	83 ec 10             	sub    esp,0x10
c000eb60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000eb64:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000eb69:	53                   	push   ebx
c000eb6a:	e8 bc ff ff ff       	call   c000eb2b <malloc>
c000eb6f:	89 c6                	mov    esi,eax
c000eb71:	83 c4 0c             	add    esp,0xc
c000eb74:	53                   	push   ebx
c000eb75:	6a 00                	push   0x0
c000eb77:	50                   	push   eax
c000eb78:	e8 73 19 ff ff       	call   c00004f0 <memset>
c000eb7d:	89 f0                	mov    eax,esi
c000eb7f:	83 c4 14             	add    esp,0x14
c000eb82:	5b                   	pop    ebx
c000eb83:	5e                   	pop    esi
c000eb84:	c3                   	ret    
c000eb85:	66 90                	xchg   ax,ax
c000eb87:	90                   	nop

c000eb88 <KeMailboxTryPost(Mailbox*, void*)>:
c000eb88:	83 ec 10             	sub    esp,0x10
c000eb8b:	fa                   	cli    
c000eb8c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb91:	83 c0 01             	add    eax,0x1
c000eb94:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eb99:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eba5:	85 c0                	test   eax,eax
c000eba7:	75 23                	jne    c000ebcc <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000eba9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebb1:	89 10                	mov    DWORD PTR [eax],edx
c000ebb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebba:	8d 50 01             	lea    edx,[eax+0x1]
c000ebbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebc1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ebc4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ebc9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebcc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ebd4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ebd9:	85 c0                	test   eax,eax
c000ebdb:	75 03                	jne    c000ebe0 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000ebdd:	fb                   	sti    
c000ebde:	66 90                	xchg   ax,ax
c000ebe0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebe4:	83 c4 10             	add    esp,0x10
c000ebe7:	c3                   	ret    

c000ebe8 <KeMailboxTryGet(Mailbox*, void**)>:
c000ebe8:	83 ec 10             	sub    esp,0x10
c000ebeb:	fa                   	cli    
c000ebec:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ebf1:	83 c0 01             	add    eax,0x1
c000ebf4:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ebf9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ebfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ec02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec05:	83 f8 01             	cmp    eax,0x1
c000ec08:	75 22                	jne    c000ec2c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ec0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ec0e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec14:	89 10                	mov    DWORD PTR [eax],edx
c000ec16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ec1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec1d:	8d 50 ff             	lea    edx,[eax-0x1]
c000ec20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ec24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec27:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ec2c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ec34:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ec39:	85 c0                	test   eax,eax
c000ec3b:	75 03                	jne    c000ec40 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000ec3d:	fb                   	sti    
c000ec3e:	66 90                	xchg   ax,ax
c000ec40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec44:	83 c4 10             	add    esp,0x10
c000ec47:	c3                   	ret    

c000ec48 <KeMailboxCreate()>:
c000ec48:	83 ec 1c             	sub    esp,0x1c
c000ec4b:	83 ec 0c             	sub    esp,0xc
c000ec4e:	6a 08                	push   0x8
c000ec50:	e8 d6 fe ff ff       	call   c000eb2b <malloc>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ec71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec75:	83 c4 1c             	add    esp,0x1c
c000ec78:	c3                   	ret    
c000ec79:	8d 76 00             	lea    esi,[esi+0x0]

c000ec7c <KeMailboxPost(Mailbox*, void*)>:
c000ec7c:	83 ec 1c             	sub    esp,0x1c
c000ec7f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ec84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec8c:	e8 f7 fe ff ff       	call   c000eb88 <KeMailboxTryPost(Mailbox*, void*)>
c000ec91:	83 c4 08             	add    esp,0x8
c000ec94:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec98:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec9c:	83 f0 01             	xor    eax,0x1
c000ec9f:	0f b6 c0             	movzx  eax,al
c000eca2:	85 c0                	test   eax,eax
c000eca4:	74 26                	je     c000eccc <KeMailboxPost(Mailbox*, void*)+0x50>
c000eca6:	fa                   	cli    
c000eca7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ecac:	83 c0 01             	add    eax,0x1
c000ecaf:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ecb4:	e8 d7 6d 00 00       	call   c0015a90 <schedule()>
c000ecb9:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ecc1:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ecc6:	85 c0                	test   eax,eax
c000ecc8:	75 02                	jne    c000eccc <KeMailboxPost(Mailbox*, void*)+0x50>
c000ecca:	fb                   	sti    
c000eccb:	90                   	nop
c000eccc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ecd1:	85 c0                	test   eax,eax
c000ecd3:	75 03                	jne    c000ecd8 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ecd5:	eb ad                	jmp    c000ec84 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ecd7:	90                   	nop
c000ecd8:	90                   	nop
c000ecd9:	83 c4 1c             	add    esp,0x1c
c000ecdc:	c3                   	ret    
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]

c000ece0 <KeMailboxGet(Mailbox*, void**)>:
c000ece0:	83 ec 1c             	sub    esp,0x1c
c000ece3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ece8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ecec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ecf0:	e8 f3 fe ff ff       	call   c000ebe8 <KeMailboxTryGet(Mailbox*, void**)>
c000ecf5:	83 c4 08             	add    esp,0x8
c000ecf8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ed00:	83 f0 01             	xor    eax,0x1
c000ed03:	0f b6 c0             	movzx  eax,al
c000ed06:	85 c0                	test   eax,eax
c000ed08:	74 26                	je     c000ed30 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ed0a:	fa                   	cli    
c000ed0b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ed10:	83 c0 01             	add    eax,0x1
c000ed13:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ed18:	e8 73 6d 00 00       	call   c0015a90 <schedule()>
c000ed1d:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ed25:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ed2a:	85 c0                	test   eax,eax
c000ed2c:	75 02                	jne    c000ed30 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ed2e:	fb                   	sti    
c000ed2f:	90                   	nop
c000ed30:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ed35:	85 c0                	test   eax,eax
c000ed37:	75 03                	jne    c000ed3c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000ed39:	eb ad                	jmp    c000ece8 <KeMailboxGet(Mailbox*, void**)+0x8>
c000ed3b:	90                   	nop
c000ed3c:	90                   	nop
c000ed3d:	83 c4 1c             	add    esp,0x1c
c000ed40:	c3                   	ret    
c000ed41:	8d 76 00             	lea    esi,[esi+0x0]

c000ed44 <KeMailboxDestroy(Mailbox*)>:
c000ed44:	83 ec 0c             	sub    esp,0xc
c000ed47:	83 ec 0c             	sub    esp,0xc
c000ed4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed4e:	e8 e8 fd ff ff       	call   c000eb3b <free>
c000ed53:	83 c4 10             	add    esp,0x10
c000ed56:	90                   	nop
c000ed57:	83 c4 0c             	add    esp,0xc
c000ed5a:	c3                   	ret    

c000ed5b <KeEntryPoint>:
c000ed5b:	57                   	push   edi
c000ed5c:	bf f9 03 00 00       	mov    edi,0x3f9
c000ed61:	56                   	push   esi
c000ed62:	89 fa                	mov    edx,edi
c000ed64:	53                   	push   ebx
c000ed65:	31 f6                	xor    esi,esi
c000ed67:	83 ec 2c             	sub    esp,0x2c
c000ed6a:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ed6f:	a3 90 cd 02 c0       	mov    ds:0xc002cd90,eax
c000ed74:	89 f0                	mov    eax,esi
c000ed76:	ee                   	out    dx,al
c000ed77:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ed7c:	b0 80                	mov    al,0x80
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	ee                   	out    dx,al
c000ed81:	b1 03                	mov    cl,0x3
c000ed83:	ba f8 03 00 00       	mov    edx,0x3f8
c000ed88:	88 c8                	mov    al,cl
c000ed8a:	ee                   	out    dx,al
c000ed8b:	89 f0                	mov    eax,esi
c000ed8d:	89 fa                	mov    edx,edi
c000ed8f:	ee                   	out    dx,al
c000ed90:	88 c8                	mov    al,cl
c000ed92:	89 da                	mov    edx,ebx
c000ed94:	ee                   	out    dx,al
c000ed95:	b0 c7                	mov    al,0xc7
c000ed97:	ba fa 03 00 00       	mov    edx,0x3fa
c000ed9c:	ee                   	out    dx,al
c000ed9d:	b0 0b                	mov    al,0xb
c000ed9f:	ba fc 03 00 00       	mov    edx,0x3fc
c000eda4:	ee                   	out    dx,al
c000eda5:	68 83 29 02 c0       	push   0xc0022983
c000edaa:	e8 b5 81 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000edaf:	e8 fd d9 ff ff       	call   c000c7b1 <KeDisplaySplashScreen()>
c000edb4:	a1 24 05 00 00       	mov    eax,ds:0x524
c000edb9:	05 ff 0f 00 00       	add    eax,0xfff
c000edbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000edc3:	89 04 24             	mov    DWORD PTR [esp],eax
c000edc6:	e8 2c 04 00 00       	call   c000f1f7 <Phys::physicalMemorySetup(unsigned int)>
c000edcb:	e8 73 36 00 00       	call   c0012443 <Virt::virtualMemorySetup()>
c000edd0:	e8 26 d9 ff ff       	call   c000c6fb <KeInitialiseAtexit()>
c000edd5:	c7 04 24 9a 29 02 c0 	mov    DWORD PTR [esp],0xc002299a
c000eddc:	e8 83 81 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ede1:	58                   	pop    eax
c000ede2:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ede6:	53                   	push   ebx
c000ede7:	e8 3e 39 00 00       	call   c001272a <VAS::VAS()>
c000edec:	c7 04 24 aa 29 02 c0 	mov    DWORD PTR [esp],0xc00229aa
c000edf3:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c000edf9:	e8 66 81 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000edfe:	e8 db 17 01 00       	call   c00205de <_init>
c000ee03:	c7 04 24 be 29 02 c0 	mov    DWORD PTR [esp],0xc00229be
c000ee0a:	e8 55 81 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ee0f:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ee16:	e8 10 fd ff ff       	call   c000eb2b <malloc>
c000ee1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee1e:	89 c6                	mov    esi,eax
c000ee20:	e8 53 ea ff ff       	call   c000d878 <Computer::Computer()>
c000ee25:	5a                   	pop    edx
c000ee26:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000ee2c:	59                   	pop    ecx
c000ee2d:	56                   	push   esi
c000ee2e:	68 cd 29 02 c0       	push   0xc00229cd
c000ee33:	e8 2c 81 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ee38:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000ee3d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee3f:	53                   	push   ebx
c000ee40:	6a 00                	push   0x0
c000ee42:	6a 00                	push   0x0
c000ee44:	50                   	push   eax
c000ee45:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ee48:	83 c4 14             	add    esp,0x14
c000ee4b:	53                   	push   ebx
c000ee4c:	e8 8f 39 00 00       	call   c00127e0 <VAS::~VAS()>
c000ee51:	83 c4 30             	add    esp,0x30
c000ee54:	5b                   	pop    ebx
c000ee55:	5e                   	pop    esi
c000ee56:	5f                   	pop    edi
c000ee57:	c3                   	ret    

c000ee58 <Mutex::Mutex()>:
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee5f:	83 ec 08             	sub    esp,0x8
c000ee62:	6a 01                	push   0x1
c000ee64:	50                   	push   eax
c000ee65:	e8 56 0c 00 00       	call   c000fac0 <Semaphore::Semaphore(int)>
c000ee6a:	83 c4 10             	add    esp,0x10
c000ee6d:	90                   	nop
c000ee6e:	83 c4 0c             	add    esp,0xc
c000ee71:	c3                   	ret    

c000ee72 <KePanic(char const*)>:
c000ee72:	c6 05 94 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd94,0x1
c000ee79:	e9 9f 9b 00 00       	jmp    c0018a1d <HalPanic(char const*)>

c000ee7e <Phys::allocateDMA(unsigned long)>:
c000ee7e:	55                   	push   ebp
c000ee7f:	31 ed                	xor    ebp,ebp
c000ee81:	57                   	push   edi
c000ee82:	56                   	push   esi
c000ee83:	53                   	push   ebx
c000ee84:	31 db                	xor    ebx,ebx
c000ee86:	83 ec 1c             	sub    esp,0x1c
c000ee89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee8d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee95:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000ee9b:	31 c0                	xor    eax,eax
c000ee9d:	c1 ef 0c             	shr    edi,0xc
c000eea0:	eb 1b                	jmp    c000eebd <Phys::allocateDMA(unsigned long)+0x3f>
c000eea2:	85 c0                	test   eax,eax
c000eea4:	75 06                	jne    c000eeac <Phys::allocateDMA(unsigned long)+0x2e>
c000eea6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eeaa:	89 dd                	mov    ebp,ebx
c000eeac:	8d 70 01             	lea    esi,[eax+0x1]
c000eeaf:	39 f7                	cmp    edi,esi
c000eeb1:	74 37                	je     c000eeea <Phys::allocateDMA(unsigned long)+0x6c>
c000eeb3:	89 f0                	mov    eax,esi
c000eeb5:	83 c3 01             	add    ebx,0x1
c000eeb8:	83 fb 0f             	cmp    ebx,0xf
c000eebb:	7f 13                	jg     c000eed0 <Phys::allocateDMA(unsigned long)+0x52>
c000eebd:	80 bb b0 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3250],0x0
c000eec4:	74 dc                	je     c000eea2 <Phys::allocateDMA(unsigned long)+0x24>
c000eec6:	31 c0                	xor    eax,eax
c000eec8:	83 c3 01             	add    ebx,0x1
c000eecb:	83 fb 0f             	cmp    ebx,0xf
c000eece:	7e ed                	jle    c000eebd <Phys::allocateDMA(unsigned long)+0x3f>
c000eed0:	83 ec 0c             	sub    esp,0xc
c000eed3:	68 e4 29 02 c0       	push   0xc00229e4
c000eed8:	e8 95 ff ff ff       	call   c000ee72 <KePanic(char const*)>
c000eedd:	83 c4 10             	add    esp,0x10
c000eee0:	31 c0                	xor    eax,eax
c000eee2:	83 c4 1c             	add    esp,0x1c
c000eee5:	5b                   	pop    ebx
c000eee6:	5e                   	pop    esi
c000eee7:	5f                   	pop    edi
c000eee8:	5d                   	pop    ebp
c000eee9:	c3                   	ret    
c000eeea:	89 e9                	mov    ecx,ebp
c000eeec:	c1 f9 04             	sar    ecx,0x4
c000eeef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eef3:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000eef7:	89 ca                	mov    edx,ecx
c000eef9:	83 ea 01             	sub    edx,0x1
c000eefc:	79 03                	jns    c000ef01 <Phys::allocateDMA(unsigned long)+0x83>
c000eefe:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ef01:	c1 fa 04             	sar    edx,0x4
c000ef04:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000ef08:	74 08                	je     c000ef12 <Phys::allocateDMA(unsigned long)+0x94>
c000ef0a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ef0e:	31 c0                	xor    eax,eax
c000ef10:	eb b6                	jmp    c000eec8 <Phys::allocateDMA(unsigned long)+0x4a>
c000ef12:	85 f6                	test   esi,esi
c000ef14:	74 17                	je     c000ef2d <Phys::allocateDMA(unsigned long)+0xaf>
c000ef16:	8d 95 b0 cd 02 c0    	lea    edx,[ebp-0x3ffd3250]
c000ef1c:	8d 84 05 b1 cd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd324f]
c000ef23:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ef26:	83 c2 01             	add    edx,0x1
c000ef29:	39 d0                	cmp    eax,edx
c000ef2b:	75 f6                	jne    c000ef23 <Phys::allocateDMA(unsigned long)+0xa5>
c000ef2d:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ef32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef36:	01 f8                	add    eax,edi
c000ef38:	85 d2                	test   edx,edx
c000ef3a:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ef3f:	74 17                	je     c000ef58 <Phys::allocateDMA(unsigned long)+0xda>
c000ef41:	83 ec 0c             	sub    esp,0xc
c000ef44:	68 e4 29 02 c0       	push   0xc00229e4
c000ef49:	e8 24 ff ff ff       	call   c000ee72 <KePanic(char const*)>
c000ef4e:	83 c4 10             	add    esp,0x10
c000ef51:	89 f0                	mov    eax,esi
c000ef53:	e9 5d ff ff ff       	jmp    c000eeb5 <Phys::allocateDMA(unsigned long)+0x37>
c000ef58:	c1 e5 0c             	shl    ebp,0xc
c000ef5b:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000ef61:	e9 7c ff ff ff       	jmp    c000eee2 <Phys::allocateDMA(unsigned long)+0x64>

c000ef66 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ef66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef6a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ef70:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ef75:	c1 ea 0c             	shr    edx,0xc
c000ef78:	29 d0                	sub    eax,edx
c000ef7a:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ef7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef83:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ef88:	c1 e8 0c             	shr    eax,0xc
c000ef8b:	85 d2                	test   edx,edx
c000ef8d:	74 11                	je     c000efa0 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ef8f:	05 b0 cd 02 c0       	add    eax,0xc002cdb0
c000ef94:	01 c2                	add    edx,eax
c000ef96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ef99:	83 c0 01             	add    eax,0x1
c000ef9c:	39 d0                	cmp    eax,edx
c000ef9e:	75 f6                	jne    c000ef96 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000efa0:	c3                   	ret    

c000efa1 <Phys::setPageState(unsigned long, bool)>:
c000efa1:	57                   	push   edi
c000efa2:	56                   	push   esi
c000efa3:	8b 35 54 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024f54
c000efa9:	53                   	push   ebx
c000efaa:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000efaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000efb7:	0f b6 c0             	movzx  eax,al
c000efba:	89 ca                	mov    edx,ecx
c000efbc:	83 e1 07             	and    ecx,0x7
c000efbf:	c1 ea 03             	shr    edx,0x3
c000efc2:	d3 c3                	rol    ebx,cl
c000efc4:	01 d6                	add    esi,edx
c000efc6:	d3 e0                	shl    eax,cl
c000efc8:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000efcb:	21 fb                	and    ebx,edi
c000efcd:	88 1e                	mov    BYTE PTR [esi],bl
c000efcf:	8b 1d 54 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024f54
c000efd5:	01 da                	add    edx,ebx
c000efd7:	8a 0a                	mov    cl,BYTE PTR [edx]
c000efd9:	09 c8                	or     eax,ecx
c000efdb:	88 02                	mov    BYTE PTR [edx],al
c000efdd:	5b                   	pop    ebx
c000efde:	5e                   	pop    esi
c000efdf:	5f                   	pop    edi
c000efe0:	c3                   	ret    

c000efe1 <Phys::getPageState(unsigned long)>:
c000efe1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efe5:	8b 15 54 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024f54
c000efeb:	89 c8                	mov    eax,ecx
c000efed:	83 e1 07             	and    ecx,0x7
c000eff0:	c1 e8 03             	shr    eax,0x3
c000eff3:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000eff7:	d3 f8                	sar    eax,cl
c000eff9:	83 e0 01             	and    eax,0x1
c000effc:	c3                   	ret    

c000effd <Phys::freePage(unsigned long)>:
c000effd:	53                   	push   ebx
c000effe:	83 ec 08             	sub    esp,0x8
c000f001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f005:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000f00b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000f011:	76 41                	jbe    c000f054 <Phys::freePage(unsigned long)+0x57>
c000f013:	c1 e8 0c             	shr    eax,0xc
c000f016:	50                   	push   eax
c000f017:	89 c3                	mov    ebx,eax
c000f019:	e8 c3 ff ff ff       	call   c000efe1 <Phys::getPageState(unsigned long)>
c000f01e:	5a                   	pop    edx
c000f01f:	84 c0                	test   al,al
c000f021:	74 20                	je     c000f043 <Phys::freePage(unsigned long)+0x46>
c000f023:	83 ec 08             	sub    esp,0x8
c000f026:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000f02b:	6a 00                	push   0x0
c000f02d:	83 e8 01             	sub    eax,0x1
c000f030:	53                   	push   ebx
c000f031:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000f036:	e8 66 ff ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f03b:	83 c4 10             	add    esp,0x10
c000f03e:	83 c4 08             	add    esp,0x8
c000f041:	5b                   	pop    ebx
c000f042:	c3                   	ret    
c000f043:	c7 44 24 10 e9 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022ae9
c000f04b:	83 c4 08             	add    esp,0x8
c000f04e:	5b                   	pop    ebx
c000f04f:	e9 1e fe ff ff       	jmp    c000ee72 <KePanic(char const*)>
c000f054:	68 00 10 00 00       	push   0x1000
c000f059:	50                   	push   eax
c000f05a:	e8 07 ff ff ff       	call   c000ef66 <Phys::freeDMA(unsigned long, unsigned long)>
c000f05f:	59                   	pop    ecx
c000f060:	5b                   	pop    ebx
c000f061:	83 c4 08             	add    esp,0x8
c000f064:	5b                   	pop    ebx
c000f065:	c3                   	ret    

c000f066 <Phys::allocatePage()>:
c000f066:	56                   	push   esi
c000f067:	53                   	push   ebx
c000f068:	83 ec 14             	sub    esp,0x14
c000f06b:	8b 35 9c cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd9c
c000f071:	89 f3                	mov    ebx,esi
c000f073:	eb 0a                	jmp    c000f07f <Phys::allocatePage()+0x19>
c000f075:	89 1d 9c cd 02 c0    	mov    DWORD PTR ds:0xc002cd9c,ebx
c000f07b:	39 de                	cmp    esi,ebx
c000f07d:	74 26                	je     c000f0a5 <Phys::allocatePage()+0x3f>
c000f07f:	53                   	push   ebx
c000f080:	e8 5c ff ff ff       	call   c000efe1 <Phys::getPageState(unsigned long)>
c000f085:	59                   	pop    ecx
c000f086:	84 c0                	test   al,al
c000f088:	74 67                	je     c000f0f1 <Phys::allocatePage()+0x8b>
c000f08a:	83 c3 01             	add    ebx,0x1
c000f08d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f093:	75 e0                	jne    c000f075 <Phys::allocatePage()+0xf>
c000f095:	31 db                	xor    ebx,ebx
c000f097:	c7 05 9c cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd9c,0x0
c000f0a1:	39 de                	cmp    esi,ebx
c000f0a3:	75 da                	jne    c000f07f <Phys::allocatePage()+0x19>
c000f0a5:	83 ec 0c             	sub    esp,0xc
c000f0a8:	a0 c0 cd 02 c0       	mov    al,ds:0xc002cdc0
c000f0ad:	83 f0 01             	xor    eax,0x1
c000f0b0:	a2 c0 cd 02 c0       	mov    ds:0xc002cdc0,al
c000f0b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f0bd:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000f0c3:	51                   	push   ecx
c000f0c4:	e8 c7 43 00 00       	call   c0013490 <VAS::scanForEviction()>
c000f0c9:	83 c4 10             	add    esp,0x10
c000f0cc:	85 c0                	test   eax,eax
c000f0ce:	75 48                	jne    c000f118 <Phys::allocatePage()+0xb2>
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	68 0c 2a 02 c0       	push   0xc0022a0c
c000f0d8:	e8 95 fd ff ff       	call   c000ee72 <KePanic(char const*)>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	8b 1d 9c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd9c
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 f5 fe ff ff       	call   c000efe1 <Phys::getPageState(unsigned long)>
c000f0ec:	59                   	pop    ecx
c000f0ed:	84 c0                	test   al,al
c000f0ef:	75 99                	jne    c000f08a <Phys::allocatePage()+0x24>
c000f0f1:	6a 01                	push   0x1
c000f0f3:	53                   	push   ebx
c000f0f4:	e8 a8 fe ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f0f9:	8b 1d a8 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cda8
c000f0ff:	a1 9c cd 02 c0       	mov    eax,ds:0xc002cd9c
c000f104:	83 c3 01             	add    ebx,0x1
c000f107:	5e                   	pop    esi
c000f108:	89 1d a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,ebx
c000f10e:	c1 e0 0c             	shl    eax,0xc
c000f111:	5a                   	pop    edx
c000f112:	83 c4 14             	add    esp,0x14
c000f115:	5b                   	pop    ebx
c000f116:	5e                   	pop    esi
c000f117:	c3                   	ret    
c000f118:	83 ec 08             	sub    esp,0x8
c000f11b:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000f121:	6a 01                	push   0x1
c000f123:	83 c2 01             	add    edx,0x1
c000f126:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f12a:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000f130:	89 c2                	mov    edx,eax
c000f132:	c1 ea 0c             	shr    edx,0xc
c000f135:	52                   	push   edx
c000f136:	e8 66 fe ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f13b:	83 c4 10             	add    esp,0x10
c000f13e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f142:	eb ce                	jmp    c000f112 <Phys::allocatePage()+0xac>

c000f144 <Phys::allocateContiguousPages(int)>:
c000f144:	57                   	push   edi
c000f145:	56                   	push   esi
c000f146:	53                   	push   ebx
c000f147:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f14b:	fa                   	cli    
c000f14c:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c000f152:	83 ec 0c             	sub    esp,0xc
c000f155:	83 c2 01             	add    edx,0x1
c000f158:	68 3c 2a 02 c0       	push   0xc0022a3c
c000f15d:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c000f163:	31 db                	xor    ebx,ebx
c000f165:	e8 fa 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f16a:	83 c4 10             	add    esp,0x10
c000f16d:	85 db                	test   ebx,ebx
c000f16f:	75 11                	jne    c000f182 <Phys::allocateContiguousPages(int)+0x3e>
c000f171:	e8 f0 fe ff ff       	call   c000f066 <Phys::allocatePage()>
c000f176:	83 ff 01             	cmp    edi,0x1
c000f179:	89 c6                	mov    esi,eax
c000f17b:	74 21                	je     c000f19e <Phys::allocateContiguousPages(int)+0x5a>
c000f17d:	bb 01 00 00 00       	mov    ebx,0x1
c000f182:	e8 df fe ff ff       	call   c000f066 <Phys::allocatePage()>
c000f187:	89 da                	mov    edx,ebx
c000f189:	c1 e2 0c             	shl    edx,0xc
c000f18c:	01 f2                	add    edx,esi
c000f18e:	39 c2                	cmp    edx,eax
c000f190:	74 24                	je     c000f1b6 <Phys::allocateContiguousPages(int)+0x72>
c000f192:	bb 01 00 00 00       	mov    ebx,0x1
c000f197:	89 c6                	mov    esi,eax
c000f199:	83 ff 01             	cmp    edi,0x1
c000f19c:	75 e4                	jne    c000f182 <Phys::allocateContiguousPages(int)+0x3e>
c000f19e:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f1a6:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f1ab:	85 c0                	test   eax,eax
c000f1ad:	75 01                	jne    c000f1b0 <Phys::allocateContiguousPages(int)+0x6c>
c000f1af:	fb                   	sti    
c000f1b0:	89 f0                	mov    eax,esi
c000f1b2:	5b                   	pop    ebx
c000f1b3:	5e                   	pop    esi
c000f1b4:	5f                   	pop    edi
c000f1b5:	c3                   	ret    
c000f1b6:	83 c3 01             	add    ebx,0x1
c000f1b9:	39 fb                	cmp    ebx,edi
c000f1bb:	75 b0                	jne    c000f16d <Phys::allocateContiguousPages(int)+0x29>
c000f1bd:	eb df                	jmp    c000f19e <Phys::allocateContiguousPages(int)+0x5a>

c000f1bf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f1bf:	56                   	push   esi
c000f1c0:	53                   	push   ebx
c000f1c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1c5:	39 1d a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,ebx
c000f1cb:	73 06                	jae    c000f1d3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f1cd:	89 1d a0 cd 02 c0    	mov    DWORD PTR ds:0xc002cda0,ebx
c000f1d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1d7:	c1 eb 0c             	shr    ebx,0xc
c000f1da:	c1 e8 0c             	shr    eax,0xc
c000f1dd:	39 d8                	cmp    eax,ebx
c000f1df:	73 13                	jae    c000f1f4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f1e1:	6a 00                	push   0x0
c000f1e3:	8d 70 01             	lea    esi,[eax+0x1]
c000f1e6:	50                   	push   eax
c000f1e7:	e8 b5 fd ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f1ec:	5a                   	pop    edx
c000f1ed:	89 f0                	mov    eax,esi
c000f1ef:	59                   	pop    ecx
c000f1f0:	39 f3                	cmp    ebx,esi
c000f1f2:	75 ed                	jne    c000f1e1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f1f4:	5b                   	pop    ebx
c000f1f5:	5e                   	pop    esi
c000f1f6:	c3                   	ret    

c000f1f7 <Phys::physicalMemorySetup(unsigned int)>:
c000f1f7:	55                   	push   ebp
c000f1f8:	57                   	push   edi
c000f1f9:	56                   	push   esi
c000f1fa:	53                   	push   ebx
c000f1fb:	83 ec 40             	sub    esp,0x40
c000f1fe:	6a 10                	push   0x10
c000f200:	6a 00                	push   0x0
c000f202:	68 b0 cd 02 c0       	push   0xc002cdb0
c000f207:	e8 e4 12 ff ff       	call   c00004f0 <memset>
c000f20c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f210:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f215:	05 00 10 00 00       	add    eax,0x1000
c000f21a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f21e:	5b                   	pop    ebx
c000f21f:	31 db                	xor    ebx,ebx
c000f221:	5e                   	pop    esi
c000f222:	50                   	push   eax
c000f223:	68 ff 2a 02 c0       	push   0xc0022aff
c000f228:	e8 37 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f22d:	83 c4 10             	add    esp,0x10
c000f230:	83 ec 08             	sub    esp,0x8
c000f233:	6a 01                	push   0x1
c000f235:	53                   	push   ebx
c000f236:	83 c3 01             	add    ebx,0x1
c000f239:	e8 63 fd ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f23e:	83 c4 10             	add    esp,0x10
c000f241:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f247:	75 e7                	jne    c000f230 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f249:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f250:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f257:	c1 e0 08             	shl    eax,0x8
c000f25a:	09 c2                	or     edx,eax
c000f25c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f260:	0f 84 98 01 00 00    	je     c000f3fe <Phys::physicalMemorySetup(unsigned int)+0x207>
c000f266:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f26a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f272:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f277:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f27b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f283:	eb 1c                	jmp    c000f2a1 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000f285:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f289:	83 c3 18             	add    ebx,0x18
c000f28c:	83 c6 01             	add    esi,0x1
c000f28f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f297:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f29b:	0f 84 6d 01 00 00    	je     c000f40e <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f2a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f2a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f2a7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f2b2:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f2b4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f2b7:	01 f0                	add    eax,esi
c000f2b9:	55                   	push   ebp
c000f2ba:	11 fa                	adc    edx,edi
c000f2bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f2c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2c8:	51                   	push   ecx
c000f2c9:	56                   	push   esi
c000f2ca:	68 9c 2a 02 c0       	push   0xc0022a9c
c000f2cf:	e8 90 7c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f2d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f2d8:	83 c4 10             	add    esp,0x10
c000f2db:	09 f8                	or     eax,edi
c000f2dd:	0f 85 2b 01 00 00    	jne    c000f40e <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f2e3:	83 fd 01             	cmp    ebp,0x1
c000f2e6:	75 9d                	jne    c000f285 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f2e8:	ba 00 00 08 00       	mov    edx,0x80000
c000f2ed:	89 c1                	mov    ecx,eax
c000f2ef:	39 f2                	cmp    edx,esi
c000f2f1:	19 f9                	sbb    ecx,edi
c000f2f3:	0f 82 ab 00 00 00    	jb     c000f3a4 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f2f9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f2fd:	89 c1                	mov    ecx,eax
c000f2ff:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f303:	0f 83 9b 00 00 00    	jae    c000f3a4 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f309:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f30e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f312:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f316:	39 fa                	cmp    edx,edi
c000f318:	19 e8                	sbb    eax,ebp
c000f31a:	0f 82 b0 01 00 00    	jb     c000f4d0 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000f320:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f324:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f328:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f32e:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f333:	83 d5 ff             	adc    ebp,0xffffffff
c000f336:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f33a:	31 c0                	xor    eax,eax
c000f33c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f340:	39 fa                	cmp    edx,edi
c000f342:	89 c1                	mov    ecx,eax
c000f344:	19 e9                	sbb    ecx,ebp
c000f346:	0f 83 39 ff ff ff    	jae    c000f285 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f34c:	be 00 00 08 00       	mov    esi,0x80000
c000f351:	83 ec 04             	sub    esp,0x4
c000f354:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f358:	57                   	push   edi
c000f359:	56                   	push   esi
c000f35a:	68 c0 2a 02 c0       	push   0xc0022ac0
c000f35f:	e8 00 7c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f364:	5d                   	pop    ebp
c000f365:	58                   	pop    eax
c000f366:	57                   	push   edi
c000f367:	56                   	push   esi
c000f368:	e8 52 fe ff ff       	call   c000f1bf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f36d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f371:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f375:	83 c4 0c             	add    esp,0xc
c000f378:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f37c:	8b 15 ac cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cdac
c000f382:	01 d0                	add    eax,edx
c000f384:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f38b:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f390:	52                   	push   edx
c000f391:	50                   	push   eax
c000f392:	68 25 2b 02 c0       	push   0xc0022b25
c000f397:	e8 c8 7b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f39c:	83 c4 10             	add    esp,0x10
c000f39f:	e9 e1 fe ff ff       	jmp    c000f285 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f3a4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f3a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3b0:	39 ea                	cmp    edx,ebp
c000f3b2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f3b6:	0f 82 c9 fe ff ff    	jb     c000f285 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f3bc:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f3c1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f3c5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f3c9:	0f 83 b6 fe ff ff    	jae    c000f285 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f3cf:	39 ee                	cmp    esi,ebp
c000f3d1:	89 f8                	mov    eax,edi
c000f3d3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f3d7:	0f 83 74 ff ff ff    	jae    c000f351 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f3dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f3e5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f3e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f3ed:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f3f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f3f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3f9:	e9 53 ff ff ff       	jmp    c000f351 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f3fe:	83 ec 0c             	sub    esp,0xc
c000f401:	68 17 2b 02 c0       	push   0xc0022b17
c000f406:	e8 67 fa ff ff       	call   c000ee72 <KePanic(char const*)>
c000f40b:	83 c4 10             	add    esp,0x10
c000f40e:	83 ec 08             	sub    esp,0x8
c000f411:	bb 60 00 00 00       	mov    ebx,0x60
c000f416:	6a 00                	push   0x0
c000f418:	6a 06                	push   0x6
c000f41a:	e8 82 fb ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f41f:	58                   	pop    eax
c000f420:	5a                   	pop    edx
c000f421:	6a 00                	push   0x0
c000f423:	6a 07                	push   0x7
c000f425:	e8 77 fb ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f42a:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c000f430:	83 c4 10             	add    esp,0x10
c000f433:	83 c1 02             	add    ecx,0x2
c000f436:	89 0d ac cd 02 c0    	mov    DWORD PTR ds:0xc002cdac,ecx
c000f43c:	83 ec 08             	sub    esp,0x8
c000f43f:	6a 00                	push   0x0
c000f441:	53                   	push   ebx
c000f442:	83 c3 01             	add    ebx,0x1
c000f445:	e8 57 fb ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f44a:	83 c4 10             	add    esp,0x10
c000f44d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f453:	75 e7                	jne    c000f43c <Phys::physicalMemorySetup(unsigned int)+0x245>
c000f455:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f45a:	bb 40 01 00 00       	mov    ebx,0x140
c000f45f:	83 c0 20             	add    eax,0x20
c000f462:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f467:	eb 26                	jmp    c000f48f <Phys::physicalMemorySetup(unsigned int)+0x298>
c000f469:	83 ec 08             	sub    esp,0x8
c000f46c:	6a 00                	push   0x0
c000f46e:	53                   	push   ebx
c000f46f:	83 c3 01             	add    ebx,0x1
c000f472:	e8 2a fb ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f477:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f47c:	83 c4 10             	add    esp,0x10
c000f47f:	83 c0 01             	add    eax,0x1
c000f482:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f488:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f48d:	74 07                	je     c000f496 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000f48f:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f494:	7e d3                	jle    c000f469 <Phys::physicalMemorySetup(unsigned int)+0x272>
c000f496:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f49b:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f4a0:	7f 26                	jg     c000f4c8 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000f4a2:	83 ec 08             	sub    esp,0x8
c000f4a5:	6a 00                	push   0x0
c000f4a7:	53                   	push   ebx
c000f4a8:	83 c3 01             	add    ebx,0x1
c000f4ab:	e8 f1 fa ff ff       	call   c000efa1 <Phys::setPageState(unsigned long, bool)>
c000f4b0:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	83 c0 01             	add    eax,0x1
c000f4bb:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f4c1:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f4c6:	75 d3                	jne    c000f49b <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000f4c8:	83 c4 3c             	add    esp,0x3c
c000f4cb:	5b                   	pop    ebx
c000f4cc:	5e                   	pop    esi
c000f4cd:	5f                   	pop    edi
c000f4ce:	5d                   	pop    ebp
c000f4cf:	c3                   	ret    
c000f4d0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f4d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f4e0:	e9 3b fe ff ff       	jmp    c000f320 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000f4e5:	90                   	nop

c000f4e6 <Pipe::isAtty()>:
c000f4e6:	31 c0                	xor    eax,eax
c000f4e8:	c3                   	ret    
c000f4e9:	90                   	nop

c000f4ea <Pipe::~Pipe()>:
c000f4ea:	83 ec 0c             	sub    esp,0xc
c000f4ed:	ba 84 2b 02 c0       	mov    edx,0xc0022b84
c000f4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f6:	89 10                	mov    DWORD PTR [eax],edx
c000f4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	50                   	push   eax
c000f500:	e8 e5 2a 00 00       	call   c0011fea <UnixFile::~UnixFile()>
c000f505:	83 c4 10             	add    esp,0x10
c000f508:	90                   	nop
c000f509:	83 c4 0c             	add    esp,0xc
c000f50c:	c3                   	ret    
c000f50d:	90                   	nop

c000f50e <Pipe::~Pipe()>:
c000f50e:	83 ec 0c             	sub    esp,0xc
c000f511:	83 ec 0c             	sub    esp,0xc
c000f514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f518:	e8 cd ff ff ff       	call   c000f4ea <Pipe::~Pipe()>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	83 ec 08             	sub    esp,0x8
c000f523:	6a 20                	push   0x20
c000f525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f529:	e8 72 d3 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c000f52e:	83 c4 10             	add    esp,0x10
c000f531:	83 c4 0c             	add    esp,0xc
c000f534:	c3                   	ret    
c000f535:	90                   	nop

c000f536 <Pipe::write(unsigned long long, void*, int*)>:
c000f536:	55                   	push   ebp
c000f537:	57                   	push   edi
c000f538:	56                   	push   esi
c000f539:	53                   	push   ebx
c000f53a:	83 ec 1c             	sub    esp,0x1c
c000f53d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f541:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f545:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f548:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f54c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f54f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f553:	89 d8                	mov    eax,ebx
c000f555:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f558:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f55c:	89 d6                	mov    esi,edx
c000f55e:	89 d7                	mov    edi,edx
c000f560:	c1 ff 1f             	sar    edi,0x1f
c000f563:	03 34 24             	add    esi,DWORD PTR [esp]
c000f566:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f56a:	c1 f8 1f             	sar    eax,0x1f
c000f56d:	39 f3                	cmp    ebx,esi
c000f56f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f573:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f577:	19 f8                	sbb    eax,edi
c000f579:	b8 01 00 00 00       	mov    eax,0x1
c000f57e:	72 6e                	jb     c000f5ee <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000f580:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f583:	01 d0                	add    eax,edx
c000f585:	99                   	cdq    
c000f586:	f7 fb                	idiv   ebx
c000f588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f58c:	29 d3                	sub    ebx,edx
c000f58e:	89 d7                	mov    edi,edx
c000f590:	89 de                	mov    esi,ebx
c000f592:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f595:	c1 fb 1f             	sar    ebx,0x1f
c000f598:	39 f2                	cmp    edx,esi
c000f59a:	19 d8                	sbb    eax,ebx
c000f59c:	b8 00 00 00 00       	mov    eax,0x0
c000f5a1:	72 04                	jb     c000f5a7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000f5a3:	89 d0                	mov    eax,edx
c000f5a5:	29 f0                	sub    eax,esi
c000f5a7:	89 d3                	mov    ebx,edx
c000f5a9:	29 c3                	sub    ebx,eax
c000f5ab:	74 0b                	je     c000f5b8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000f5ad:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000f5b0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f5b4:	89 d9                	mov    ecx,ebx
c000f5b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5b8:	85 c0                	test   eax,eax
c000f5ba:	74 0d                	je     c000f5c9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000f5bc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f5c0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f5c3:	89 de                	mov    esi,ebx
c000f5c5:	89 c1                	mov    ecx,eax
c000f5c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5c9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f5cc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f5d1:	75 10                	jne    c000f5e3 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000f5d3:	83 ec 0c             	sub    esp,0xc
c000f5d6:	68 41 2b 02 c0       	push   0xc0022b41
c000f5db:	e8 92 f8 ff ff       	call   c000ee72 <KePanic(char const*)>
c000f5e0:	83 c4 10             	add    esp,0x10
c000f5e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f5e7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f5ea:	89 08                	mov    DWORD PTR [eax],ecx
c000f5ec:	31 c0                	xor    eax,eax
c000f5ee:	83 c4 1c             	add    esp,0x1c
c000f5f1:	5b                   	pop    ebx
c000f5f2:	5e                   	pop    esi
c000f5f3:	5f                   	pop    edi
c000f5f4:	5d                   	pop    ebp
c000f5f5:	c3                   	ret    

c000f5f6 <Pipe::read(unsigned long long, void*, int*)>:
c000f5f6:	55                   	push   ebp
c000f5f7:	57                   	push   edi
c000f5f8:	56                   	push   esi
c000f5f9:	53                   	push   ebx
c000f5fa:	83 ec 1c             	sub    esp,0x1c
c000f5fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f601:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f605:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f609:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f60c:	89 c8                	mov    eax,ecx
c000f60e:	99                   	cdq    
c000f60f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f613:	74 27                	je     c000f63c <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f615:	39 f9                	cmp    ecx,edi
c000f617:	89 d1                	mov    ecx,edx
c000f619:	19 f1                	sbb    ecx,esi
c000f61b:	73 1f                	jae    c000f63c <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f61d:	fa                   	cli    
c000f61e:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000f624:	e8 67 64 00 00       	call   c0015a90 <schedule()>
c000f629:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f630:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f637:	75 d0                	jne    c000f609 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f639:	fb                   	sti    
c000f63a:	eb cd                	jmp    c000f609 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f63c:	39 f8                	cmp    eax,edi
c000f63e:	89 d1                	mov    ecx,edx
c000f640:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f643:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f647:	19 f1                	sbb    ecx,esi
c000f649:	73 07                	jae    c000f652 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c000f64b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f64e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f652:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f655:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f658:	29 f7                	sub    edi,esi
c000f65a:	89 f8                	mov    eax,edi
c000f65c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f660:	99                   	cdq    
c000f661:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000f664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f668:	19 d0                	sbb    eax,edx
c000f66a:	73 07                	jae    c000f673 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c000f66c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f66f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f673:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000f676:	89 ea                	mov    edx,ebp
c000f678:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000f67c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f681:	74 0d                	je     c000f690 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c000f683:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f686:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f68a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f68e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f690:	85 d2                	test   edx,edx
c000f692:	74 11                	je     c000f6a5 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c000f694:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f698:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f69b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f69f:	89 d1                	mov    ecx,edx
c000f6a1:	89 c7                	mov    edi,eax
c000f6a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f6a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f6a8:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f6ab:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f6ae:	99                   	cdq    
c000f6af:	89 f7                	mov    edi,esi
c000f6b1:	03 04 24             	add    eax,DWORD PTR [esp]
c000f6b4:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000f6b8:	c1 ff 1f             	sar    edi,0x1f
c000f6bb:	57                   	push   edi
c000f6bc:	56                   	push   esi
c000f6bd:	52                   	push   edx
c000f6be:	50                   	push   eax
c000f6bf:	e8 00 0e 01 00       	call   c00204c4 <__umoddi3>
c000f6c4:	83 c4 10             	add    esp,0x10
c000f6c7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f6ca:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f6cf:	75 10                	jne    c000f6e1 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c000f6d1:	83 ec 0c             	sub    esp,0xc
c000f6d4:	68 5e 2b 02 c0       	push   0xc0022b5e
c000f6d9:	e8 94 f7 ff ff       	call   c000ee72 <KePanic(char const*)>
c000f6de:	83 c4 10             	add    esp,0x10
c000f6e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f6e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f6e8:	89 10                	mov    DWORD PTR [eax],edx
c000f6ea:	83 c4 1c             	add    esp,0x1c
c000f6ed:	31 c0                	xor    eax,eax
c000f6ef:	5b                   	pop    ebx
c000f6f0:	5e                   	pop    esi
c000f6f1:	5f                   	pop    edi
c000f6f2:	5d                   	pop    ebp
c000f6f3:	c3                   	ret    

c000f6f4 <Pipe::Pipe(int)>:
c000f6f4:	83 ec 0c             	sub    esp,0xc
c000f6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6fb:	83 ec 08             	sub    esp,0x8
c000f6fe:	6a 00                	push   0x0
c000f700:	50                   	push   eax
c000f701:	e8 fe 26 00 00       	call   c0011e04 <UnixFile::UnixFile(int)>
c000f706:	83 c4 10             	add    esp,0x10
c000f709:	ba 84 2b 02 c0       	mov    edx,0xc0022b84
c000f70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f712:	89 10                	mov    DWORD PTR [eax],edx
c000f714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f718:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f71c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f723:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f72e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f735:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f739:	83 ec 0c             	sub    esp,0xc
c000f73c:	50                   	push   eax
c000f73d:	e8 e9 f3 ff ff       	call   c000eb2b <malloc>
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	89 c2                	mov    edx,eax
c000f747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f74b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f752:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f756:	90                   	nop
c000f757:	83 c4 0c             	add    esp,0xc
c000f75a:	c3                   	ret    

c000f75b <KePowerThread(void*)>:
c000f75b:	83 ec 0c             	sub    esp,0xc
c000f75e:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f765:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f76c:	75 01                	jne    c000f76f <KePowerThread(void*)+0x14>
c000f76e:	fb                   	sti    
c000f76f:	83 ec 0c             	sub    esp,0xc
c000f772:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f779:	6a 0a                	push   0xa
c000f77b:	e8 0c 65 00 00       	call   c0015c8c <sleep(unsigned int)>
c000f780:	83 05 24 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce24,0xa
c000f787:	83 c4 10             	add    esp,0x10
c000f78a:	eb e3                	jmp    c000f76f <KePowerThread(void*)+0x14>

c000f78c <KeChangePowerSettings(PowerSettings)>:
c000f78c:	57                   	push   edi
c000f78d:	b9 09 00 00 00       	mov    ecx,0x9
c000f792:	56                   	push   esi
c000f793:	bf 00 ce 02 c0       	mov    edi,0xc002ce00
c000f798:	fc                   	cld    
c000f799:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f79d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f79f:	5e                   	pop    esi
c000f7a0:	5f                   	pop    edi
c000f7a1:	c3                   	ret    

c000f7a2 <KeUserIOReceived()>:
c000f7a2:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f7ac:	c3                   	ret    

c000f7ad <KeHandlePowerButton()>:
c000f7ad:	a1 00 ce 02 c0       	mov    eax,ds:0xc002ce00
c000f7b2:	83 f8 02             	cmp    eax,0x2
c000f7b5:	75 05                	jne    c000f7bc <KeHandlePowerButton()+0xf>
c000f7b7:	e9 20 e1 ff ff       	jmp    c000d8dc <KeShutdown()>
c000f7bc:	48                   	dec    eax
c000f7bd:	75 05                	jne    c000f7c4 <KeHandlePowerButton()+0x17>
c000f7bf:	e9 3c e1 ff ff       	jmp    c000d900 <KeSleep()>
c000f7c4:	c3                   	ret    

c000f7c5 <KeHandleSleepButton()>:
c000f7c5:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c000f7ca:	83 f8 02             	cmp    eax,0x2
c000f7cd:	75 05                	jne    c000f7d4 <KeHandleSleepButton()+0xf>
c000f7cf:	e9 08 e1 ff ff       	jmp    c000d8dc <KeShutdown()>
c000f7d4:	48                   	dec    eax
c000f7d5:	75 05                	jne    c000f7dc <KeHandleSleepButton()+0x17>
c000f7d7:	e9 24 e1 ff ff       	jmp    c000d900 <KeSleep()>
c000f7dc:	c3                   	ret    

c000f7dd <KeSetupPowerManager()>:
c000f7dd:	83 ec 0c             	sub    esp,0xc
c000f7e0:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f7ea:	68 f0 00 00 00       	push   0xf0
c000f7ef:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f7f6:	6a 00                	push   0x0
c000f7f8:	68 5b f7 00 c0       	push   0xc000f75b
c000f7fd:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000f803:	e8 30 60 00 00       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c000f808:	c7 05 00 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce00,0x2
c000f812:	c7 05 04 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce04,0x1
c000f81c:	c7 05 08 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce08,0x3
c000f826:	c7 05 0c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce0c,0x0
c000f830:	c7 05 18 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce18,0x0
c000f83a:	c7 05 10 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce10,0x0
c000f844:	c7 05 1c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce1c,0x0
c000f84e:	c7 05 14 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x3c
c000f858:	c7 05 20 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x3c
c000f862:	83 c4 1c             	add    esp,0x1c
c000f865:	c3                   	ret    

c000f866 <KeRand()>:
c000f866:	69 05 28 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce28,0x2875
c000f870:	69 0d 2c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce2c,0xa2e7b175
c000f87a:	53                   	push   ebx
c000f87b:	01 c1                	add    ecx,eax
c000f87d:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f882:	f7 25 28 ce 02 c0    	mul    DWORD PTR ds:0xc002ce28
c000f888:	01 ca                	add    edx,ecx
c000f88a:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f88f:	83 d2 00             	adc    edx,0x0
c000f892:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f897:	0f b7 da             	movzx  ebx,dx
c000f89a:	89 da                	mov    edx,ebx
c000f89c:	89 1d 2c ce 02 c0    	mov    DWORD PTR ds:0xc002ce2c,ebx
c000f8a2:	0f ac d0 0e          	shrd   eax,edx,0xe
c000f8a6:	5b                   	pop    ebx
c000f8a7:	c3                   	ret    

c000f8a8 <KeSeedRand(unsigned int)>:
c000f8a8:	53                   	push   ebx
c000f8a9:	83 ec 08             	sub    esp,0x8
c000f8ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8b0:	e8 58 94 00 00       	call   c0018d0d <HalGetRand()>
c000f8b5:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c000f8bf:	31 d8                	xor    eax,ebx
c000f8c1:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f8c6:	e8 9b ff ff ff       	call   c000f866 <KeRand()>
c000f8cb:	83 c4 08             	add    esp,0x8
c000f8ce:	5b                   	pop    ebx
c000f8cf:	eb 95                	jmp    c000f866 <KeRand()>

c000f8d1 <KeInitRand()>:
c000f8d1:	83 ec 0c             	sub    esp,0xc
c000f8d4:	e8 58 92 00 00       	call   c0018b31 <HalQueryPerformanceCounter()>
c000f8d9:	0f 20 da             	mov    edx,cr3
c000f8dc:	0f 22 da             	mov    cr3,edx
c000f8df:	0f 20 da             	mov    edx,cr3
c000f8e2:	0f 22 da             	mov    cr3,edx
c000f8e5:	0f 20 da             	mov    edx,cr3
c000f8e8:	0f 22 da             	mov    cr3,edx
c000f8eb:	0f 20 da             	mov    edx,cr3
c000f8ee:	0f 22 da             	mov    cr3,edx
c000f8f1:	83 ec 0c             	sub    esp,0xc
c000f8f4:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f8f9:	50                   	push   eax
c000f8fa:	e8 a9 ff ff ff       	call   c000f8a8 <KeSeedRand(unsigned int)>
c000f8ff:	83 c4 1c             	add    esp,0x1c
c000f902:	c3                   	ret    
c000f903:	90                   	nop

c000f904 <KeResolveCompatibilitySymbol(char*)>:
c000f904:	83 ec 0c             	sub    esp,0xc
c000f907:	83 ec 08             	sub    esp,0x8
c000f90a:	68 98 2b 02 c0       	push   0xc0022b98
c000f90f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f913:	e8 38 0e ff ff       	call   c0000750 <strcmp>
c000f918:	83 c4 10             	add    esp,0x10
c000f91b:	85 c0                	test   eax,eax
c000f91d:	0f 94 c0             	sete   al
c000f920:	0f b6 c0             	movzx  eax,al
c000f923:	85 c0                	test   eax,eax
c000f925:	74 0d                	je     c000f934 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f927:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c000f92c:	e9 8b 01 00 00       	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f931:	8d 76 00             	lea    esi,[esi+0x0]
c000f934:	83 ec 08             	sub    esp,0x8
c000f937:	68 a1 2b 02 c0       	push   0xc0022ba1
c000f93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f940:	e8 0b 0e ff ff       	call   c0000750 <strcmp>
c000f945:	83 c4 10             	add    esp,0x10
c000f948:	85 c0                	test   eax,eax
c000f94a:	0f 94 c0             	sete   al
c000f94d:	0f b6 c0             	movzx  eax,al
c000f950:	85 c0                	test   eax,eax
c000f952:	74 0c                	je     c000f960 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f954:	b8 c4 03 02 c0       	mov    eax,0xc00203c4
c000f959:	e9 5e 01 00 00       	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f95e:	66 90                	xchg   ax,ax
c000f960:	83 ec 08             	sub    esp,0x8
c000f963:	68 ab 2b 02 c0       	push   0xc0022bab
c000f968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f96c:	e8 df 0d ff ff       	call   c0000750 <strcmp>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	85 c0                	test   eax,eax
c000f976:	0f 94 c0             	sete   al
c000f979:	0f b6 c0             	movzx  eax,al
c000f97c:	85 c0                	test   eax,eax
c000f97e:	74 0c                	je     c000f98c <KeResolveCompatibilitySymbol(char*)+0x88>
c000f980:	b8 f8 00 02 c0       	mov    eax,0xc00200f8
c000f985:	e9 32 01 00 00       	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f98a:	66 90                	xchg   ax,ax
c000f98c:	83 ec 08             	sub    esp,0x8
c000f98f:	68 b4 2b 02 c0       	push   0xc0022bb4
c000f994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f998:	e8 b3 0d ff ff       	call   c0000750 <strcmp>
c000f99d:	83 c4 10             	add    esp,0x10
c000f9a0:	85 c0                	test   eax,eax
c000f9a2:	0f 94 c0             	sete   al
c000f9a5:	0f b6 c0             	movzx  eax,al
c000f9a8:	85 c0                	test   eax,eax
c000f9aa:	74 0c                	je     c000f9b8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f9ac:	b8 72 ee 00 c0       	mov    eax,0xc000ee72
c000f9b1:	e9 06 01 00 00       	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f9b6:	66 90                	xchg   ax,ax
c000f9b8:	83 ec 08             	sub    esp,0x8
c000f9bb:	68 c7 2b 02 c0       	push   0xc0022bc7
c000f9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9c4:	e8 87 0d ff ff       	call   c0000750 <strcmp>
c000f9c9:	83 c4 10             	add    esp,0x10
c000f9cc:	85 c0                	test   eax,eax
c000f9ce:	0f 94 c0             	sete   al
c000f9d1:	0f b6 c0             	movzx  eax,al
c000f9d4:	85 c0                	test   eax,eax
c000f9d6:	74 0c                	je     c000f9e4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f9d8:	b8 e0 c7 00 c0       	mov    eax,0xc000c7e0
c000f9dd:	e9 da 00 00 00       	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f9e2:	66 90                	xchg   ax,ax
c000f9e4:	83 ec 08             	sub    esp,0x8
c000f9e7:	68 e4 2b 02 c0       	push   0xc0022be4
c000f9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9f0:	e8 5b 0d ff ff       	call   c0000750 <strcmp>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	85 c0                	test   eax,eax
c000f9fa:	0f 94 c0             	sete   al
c000f9fd:	0f b6 c0             	movzx  eax,al
c000fa00:	85 c0                	test   eax,eax
c000fa02:	74 0c                	je     c000fa10 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000fa04:	b8 c4 04 02 c0       	mov    eax,0xc00204c4
c000fa09:	e9 ae 00 00 00       	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000fa0e:	66 90                	xchg   ax,ax
c000fa10:	83 ec 08             	sub    esp,0x8
c000fa13:	68 ee 2b 02 c0       	push   0xc0022bee
c000fa18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa1c:	e8 2f 0d ff ff       	call   c0000750 <strcmp>
c000fa21:	83 c4 10             	add    esp,0x10
c000fa24:	85 c0                	test   eax,eax
c000fa26:	0f 94 c0             	sete   al
c000fa29:	0f b6 c0             	movzx  eax,al
c000fa2c:	85 c0                	test   eax,eax
c000fa2e:	74 0c                	je     c000fa3c <KeResolveCompatibilitySymbol(char*)+0x138>
c000fa30:	b8 44 02 02 c0       	mov    eax,0xc0020244
c000fa35:	e9 82 00 00 00       	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000fa3a:	66 90                	xchg   ax,ax
c000fa3c:	83 ec 08             	sub    esp,0x8
c000fa3f:	68 f7 2b 02 c0       	push   0xc0022bf7
c000fa44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa48:	e8 03 0d ff ff       	call   c0000750 <strcmp>
c000fa4d:	83 c4 10             	add    esp,0x10
c000fa50:	85 c0                	test   eax,eax
c000fa52:	0f 94 c0             	sete   al
c000fa55:	0f b6 c0             	movzx  eax,al
c000fa58:	85 c0                	test   eax,eax
c000fa5a:	74 08                	je     c000fa64 <KeResolveCompatibilitySymbol(char*)+0x160>
c000fa5c:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000fa61:	eb 59                	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000fa63:	90                   	nop
c000fa64:	83 ec 08             	sub    esp,0x8
c000fa67:	68 0f 2c 02 c0       	push   0xc0022c0f
c000fa6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa70:	e8 db 0c ff ff       	call   c0000750 <strcmp>
c000fa75:	83 c4 10             	add    esp,0x10
c000fa78:	85 c0                	test   eax,eax
c000fa7a:	0f 94 c0             	sete   al
c000fa7d:	0f b6 c0             	movzx  eax,al
c000fa80:	85 c0                	test   eax,eax
c000fa82:	74 08                	je     c000fa8c <KeResolveCompatibilitySymbol(char*)+0x188>
c000fa84:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000fa89:	eb 31                	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000fa8b:	90                   	nop
c000fa8c:	83 ec 08             	sub    esp,0x8
c000fa8f:	68 1c 2c 02 c0       	push   0xc0022c1c
c000fa94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa98:	e8 b3 0c ff ff       	call   c0000750 <strcmp>
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	85 c0                	test   eax,eax
c000faa2:	0f 94 c0             	sete   al
c000faa5:	0f b6 c0             	movzx  eax,al
c000faa8:	85 c0                	test   eax,eax
c000faaa:	74 08                	je     c000fab4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000faac:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c000fab1:	eb 09                	jmp    c000fabc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000fab3:	90                   	nop
c000fab4:	b8 00 00 00 00       	mov    eax,0x0
c000fab9:	8d 76 00             	lea    esi,[esi+0x0]
c000fabc:	83 c4 0c             	add    esp,0xc
c000fabf:	c3                   	ret    

c000fac0 <Semaphore::Semaphore(int)>:
c000fac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fac4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fac8:	89 10                	mov    DWORD PTR [eax],edx
c000faca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000face:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000fad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fad9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fae4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000faeb:	90                   	nop
c000faec:	c3                   	ret    
c000faed:	90                   	nop
c000faee:	66 90                	xchg   ax,ax

c000faf0 <Semaphore::tryAcquire()>:
c000faf0:	83 ec 0c             	sub    esp,0xc
c000faf3:	fa                   	cli    
c000faf4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000faf9:	83 c0 01             	add    eax,0x1
c000fafc:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fb01:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb06:	83 c0 01             	add    eax,0x1
c000fb09:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb12:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb19:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb1b:	39 c2                	cmp    edx,eax
c000fb1d:	7d 59                	jge    c000fb78 <Semaphore::tryAcquire()+0x88>
c000fb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb26:	8d 50 01             	lea    edx,[eax+0x1]
c000fb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb2d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fb30:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb35:	83 e8 01             	sub    eax,0x1
c000fb38:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb3d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb42:	85 c0                	test   eax,eax
c000fb44:	75 1a                	jne    c000fb60 <Semaphore::tryAcquire()+0x70>
c000fb46:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fb4b:	85 c0                	test   eax,eax
c000fb4d:	74 11                	je     c000fb60 <Semaphore::tryAcquire()+0x70>
c000fb4f:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fb59:	e8 32 5f 00 00       	call   c0015a90 <schedule()>
c000fb5e:	66 90                	xchg   ax,ax
c000fb60:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fb68:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb6d:	85 c0                	test   eax,eax
c000fb6f:	75 03                	jne    c000fb74 <Semaphore::tryAcquire()+0x84>
c000fb71:	fb                   	sti    
c000fb72:	66 90                	xchg   ax,ax
c000fb74:	b0 01                	mov    al,0x1
c000fb76:	eb 48                	jmp    c000fbc0 <Semaphore::tryAcquire()+0xd0>
c000fb78:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb7d:	83 e8 01             	sub    eax,0x1
c000fb80:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb85:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb8a:	85 c0                	test   eax,eax
c000fb8c:	75 1a                	jne    c000fba8 <Semaphore::tryAcquire()+0xb8>
c000fb8e:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fb93:	85 c0                	test   eax,eax
c000fb95:	74 11                	je     c000fba8 <Semaphore::tryAcquire()+0xb8>
c000fb97:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fba1:	e8 ea 5e 00 00       	call   c0015a90 <schedule()>
c000fba6:	66 90                	xchg   ax,ax
c000fba8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fbb0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	75 03                	jne    c000fbbc <Semaphore::tryAcquire()+0xcc>
c000fbb9:	fb                   	sti    
c000fbba:	66 90                	xchg   ax,ax
c000fbbc:	b0 00                	mov    al,0x0
c000fbbe:	66 90                	xchg   ax,ax
c000fbc0:	83 c4 0c             	add    esp,0xc
c000fbc3:	c3                   	ret    

c000fbc4 <Semaphore::assertLocked(char const*)>:
c000fbc4:	83 ec 0c             	sub    esp,0xc
c000fbc7:	fa                   	cli    
c000fbc8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fbcd:	83 c0 01             	add    eax,0x1
c000fbd0:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fbd5:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fbda:	83 c0 01             	add    eax,0x1
c000fbdd:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbe6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbed:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbef:	39 c2                	cmp    edx,eax
c000fbf1:	7d 11                	jge    c000fc04 <Semaphore::assertLocked(char const*)+0x40>
c000fbf3:	83 ec 0c             	sub    esp,0xc
c000fbf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fbfa:	e8 73 f2 ff ff       	call   c000ee72 <KePanic(char const*)>
c000fbff:	83 c4 10             	add    esp,0x10
c000fc02:	66 90                	xchg   ax,ax
c000fc04:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc09:	83 e8 01             	sub    eax,0x1
c000fc0c:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fc11:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc16:	85 c0                	test   eax,eax
c000fc18:	75 1a                	jne    c000fc34 <Semaphore::assertLocked(char const*)+0x70>
c000fc1a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fc1f:	85 c0                	test   eax,eax
c000fc21:	74 11                	je     c000fc34 <Semaphore::assertLocked(char const*)+0x70>
c000fc23:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fc2d:	e8 5e 5e 00 00       	call   c0015a90 <schedule()>
c000fc32:	66 90                	xchg   ax,ax
c000fc34:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fc3c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc41:	85 c0                	test   eax,eax
c000fc43:	75 03                	jne    c000fc48 <Semaphore::assertLocked(char const*)+0x84>
c000fc45:	fb                   	sti    
c000fc46:	66 90                	xchg   ax,ax
c000fc48:	90                   	nop
c000fc49:	83 c4 0c             	add    esp,0xc
c000fc4c:	c3                   	ret    
c000fc4d:	90                   	nop
c000fc4e:	66 90                	xchg   ax,ax

c000fc50 <Semaphore::acquire(int)>:
c000fc50:	83 ec 1c             	sub    esp,0x1c
c000fc53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fc58:	0f 84 9a 00 00 00    	je     c000fcf8 <Semaphore::acquire(int)+0xa8>
c000fc5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fc66:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fc6b:	90                   	nop
c000fc6c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fc71:	85 c0                	test   eax,eax
c000fc73:	74 77                	je     c000fcec <Semaphore::acquire(int)+0x9c>
c000fc75:	83 ec 0c             	sub    esp,0xc
c000fc78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc7c:	e8 6f fe ff ff       	call   c000faf0 <Semaphore::tryAcquire()>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	83 f0 01             	xor    eax,0x1
c000fc87:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fc8b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fc8f:	83 f0 01             	xor    eax,0x1
c000fc92:	0f b6 c0             	movzx  eax,al
c000fc95:	85 c0                	test   eax,eax
c000fc97:	75 4f                	jne    c000fce8 <Semaphore::acquire(int)+0x98>
c000fc99:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fc9e:	7f 2c                	jg     c000fccc <Semaphore::acquire(int)+0x7c>
c000fca0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fca4:	89 d0                	mov    eax,edx
c000fca6:	c1 e0 02             	shl    eax,0x2
c000fca9:	01 d0                	add    eax,edx
c000fcab:	01 c0                	add    eax,eax
c000fcad:	83 ec 0c             	sub    esp,0xc
c000fcb0:	50                   	push   eax
c000fcb1:	e8 c2 5f 00 00       	call   c0015c78 <milliTenthSleep(unsigned int)>
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcbd:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fcc1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fcc9:	eb a1                	jmp    c000fc6c <Semaphore::acquire(int)+0x1c>
c000fccb:	90                   	nop
c000fccc:	83 ec 0c             	sub    esp,0xc
c000fccf:	68 90 01 00 00       	push   0x190
c000fcd4:	e8 9f 5f 00 00       	call   c0015c78 <milliTenthSleep(unsigned int)>
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fce1:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fce6:	eb 84                	jmp    c000fc6c <Semaphore::acquire(int)+0x1c>
c000fce8:	90                   	nop
c000fce9:	8d 76 00             	lea    esi,[esi+0x0]
c000fcec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcf0:	e9 fb 00 00 00       	jmp    c000fdf0 <Semaphore::acquire(int)+0x1a0>
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	fa                   	cli    
c000fcf9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fcfe:	83 c0 01             	add    eax,0x1
c000fd01:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fd06:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fd0b:	83 c0 01             	add    eax,0x1
c000fd0e:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd17:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fd1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd20:	39 c2                	cmp    edx,eax
c000fd22:	7d 14                	jge    c000fd38 <Semaphore::acquire(int)+0xe8>
c000fd24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd2b:	8d 50 01             	lea    edx,[eax+0x1]
c000fd2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fd35:	eb 6d                	jmp    c000fda4 <Semaphore::acquire(int)+0x154>
c000fd37:	90                   	nop
c000fd38:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fd3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fd46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd4d:	85 c0                	test   eax,eax
c000fd4f:	75 13                	jne    c000fd64 <Semaphore::acquire(int)+0x114>
c000fd51:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fd56:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd5f:	eb 17                	jmp    c000fd78 <Semaphore::acquire(int)+0x128>
c000fd61:	8d 76 00             	lea    esi,[esi+0x0]
c000fd64:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd70:	8b 12                	mov    edx,DWORD PTR [edx]
c000fd72:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fd75:	8d 76 00             	lea    esi,[esi+0x0]
c000fd78:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fd7d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd83:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	68 2c 2c 02 c0       	push   0xc0022c2c
c000fd8e:	e8 d1 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fd93:	83 c4 10             	add    esp,0x10
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	6a 05                	push   0x5
c000fd9b:	e8 b0 5d 00 00       	call   c0015b50 <blockTask(TaskState)>
c000fda0:	83 c4 10             	add    esp,0x10
c000fda3:	90                   	nop
c000fda4:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fda9:	83 e8 01             	sub    eax,0x1
c000fdac:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fdb1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fdb6:	85 c0                	test   eax,eax
c000fdb8:	75 1a                	jne    c000fdd4 <Semaphore::acquire(int)+0x184>
c000fdba:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fdbf:	85 c0                	test   eax,eax
c000fdc1:	74 11                	je     c000fdd4 <Semaphore::acquire(int)+0x184>
c000fdc3:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fdcd:	e8 be 5c 00 00       	call   c0015a90 <schedule()>
c000fdd2:	66 90                	xchg   ax,ax
c000fdd4:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fddc:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fde1:	85 c0                	test   eax,eax
c000fde3:	75 03                	jne    c000fde8 <Semaphore::acquire(int)+0x198>
c000fde5:	fb                   	sti    
c000fde6:	66 90                	xchg   ax,ax
c000fde8:	b8 00 00 00 00       	mov    eax,0x0
c000fded:	8d 76 00             	lea    esi,[esi+0x0]
c000fdf0:	83 c4 1c             	add    esp,0x1c
c000fdf3:	c3                   	ret    

c000fdf4 <Semaphore::acquire()>:
c000fdf4:	83 ec 0c             	sub    esp,0xc
c000fdf7:	83 ec 08             	sub    esp,0x8
c000fdfa:	6a 00                	push   0x0
c000fdfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe00:	e8 4b fe ff ff       	call   c000fc50 <Semaphore::acquire(int)>
c000fe05:	83 c4 10             	add    esp,0x10
c000fe08:	90                   	nop
c000fe09:	83 c4 0c             	add    esp,0xc
c000fe0c:	c3                   	ret    
c000fe0d:	90                   	nop
c000fe0e:	66 90                	xchg   ax,ax

c000fe10 <Semaphore::release()>:
c000fe10:	83 ec 1c             	sub    esp,0x1c
c000fe13:	fa                   	cli    
c000fe14:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fe19:	83 c0 01             	add    eax,0x1
c000fe1c:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fe21:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fe26:	83 c0 01             	add    eax,0x1
c000fe29:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fe2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe35:	85 c0                	test   eax,eax
c000fe37:	74 2b                	je     c000fe64 <Semaphore::release()+0x54>
c000fe39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe48:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fe4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fe52:	83 ec 0c             	sub    esp,0xc
c000fe55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe59:	e8 42 5f 00 00       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c000fe5e:	83 c4 10             	add    esp,0x10
c000fe61:	eb 15                	jmp    c000fe78 <Semaphore::release()+0x68>
c000fe63:	90                   	nop
c000fe64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe6b:	8d 50 ff             	lea    edx,[eax-0x1]
c000fe6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe72:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fe75:	8d 76 00             	lea    esi,[esi+0x0]
c000fe78:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fe7d:	83 e8 01             	sub    eax,0x1
c000fe80:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fe85:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fe8a:	85 c0                	test   eax,eax
c000fe8c:	75 1a                	jne    c000fea8 <Semaphore::release()+0x98>
c000fe8e:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fe93:	85 c0                	test   eax,eax
c000fe95:	74 11                	je     c000fea8 <Semaphore::release()+0x98>
c000fe97:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fea1:	e8 ea 5b 00 00       	call   c0015a90 <schedule()>
c000fea6:	66 90                	xchg   ax,ax
c000fea8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000feb0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000feb5:	85 c0                	test   eax,eax
c000feb7:	75 03                	jne    c000febc <Semaphore::release()+0xac>
c000feb9:	fb                   	sti    
c000feba:	66 90                	xchg   ax,ax
c000febc:	90                   	nop
c000febd:	83 c4 1c             	add    esp,0x1c
c000fec0:	c3                   	ret    

c000fec1 <KiSigKill(int)>:
c000fec1:	83 ec 0c             	sub    esp,0xc
c000fec4:	6a 00                	push   0x0
c000fec6:	6a 00                	push   0x0
c000fec8:	6a ff                	push   0xffffffff
c000feca:	6a 01                	push   0x1
c000fecc:	e8 81 61 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fed1:	83 c4 1c             	add    esp,0x1c
c000fed4:	c3                   	ret    

c000fed5 <KiDefaultSignalHandlerIgnore(int)>:
c000fed5:	c3                   	ret    

c000fed6 <KiDefaultSignalHandlerPause(int)>:
c000fed6:	57                   	push   edi
c000fed7:	b9 07 00 00 00       	mov    ecx,0x7
c000fedc:	56                   	push   esi
c000fedd:	be 87 2c 02 c0       	mov    esi,0xc0022c87
c000fee2:	83 ec 24             	sub    esp,0x24
c000fee5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fee9:	fc                   	cld    
c000feea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000feec:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fef0:	50                   	push   eax
c000fef1:	6a 00                	push   0x0
c000fef3:	6a 00                	push   0x0
c000fef5:	6a 27                	push   0x27
c000fef7:	e8 56 61 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fefc:	83 c4 34             	add    esp,0x34
c000feff:	5e                   	pop    esi
c000ff00:	5f                   	pop    edi
c000ff01:	c3                   	ret    

c000ff02 <KiDefaultSignalHandlerResume(int)>:
c000ff02:	57                   	push   edi
c000ff03:	b9 1d 00 00 00       	mov    ecx,0x1d
c000ff08:	56                   	push   esi
c000ff09:	be a3 2c 02 c0       	mov    esi,0xc0022ca3
c000ff0e:	83 ec 24             	sub    esp,0x24
c000ff11:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000ff15:	fc                   	cld    
c000ff16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff18:	8d 44 24 03          	lea    eax,[esp+0x3]
c000ff1c:	50                   	push   eax
c000ff1d:	6a 00                	push   0x0
c000ff1f:	6a 00                	push   0x0
c000ff21:	6a 27                	push   0x27
c000ff23:	e8 2a 61 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000ff28:	83 c4 34             	add    esp,0x34
c000ff2b:	5e                   	pop    esi
c000ff2c:	5f                   	pop    edi
c000ff2d:	c3                   	ret    

c000ff2e <KeDeinitSignals(SigHandlerBlock*)>:
c000ff2e:	e9 08 ec ff ff       	jmp    c000eb3b <free>

c000ff33 <KeInitSignals()>:
c000ff33:	53                   	push   ebx
c000ff34:	83 ec 14             	sub    esp,0x14
c000ff37:	68 c8 00 00 00       	push   0xc8
c000ff3c:	e8 ea eb ff ff       	call   c000eb2b <malloc>
c000ff41:	83 c4 0c             	add    esp,0xc
c000ff44:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000ff4e:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000ff58:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000ff5f:	89 c3                	mov    ebx,eax
c000ff61:	6a 20                	push   0x20
c000ff63:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000ff69:	6a 00                	push   0x0
c000ff6b:	50                   	push   eax
c000ff6c:	e8 7f 05 ff ff       	call   c00004f0 <memset>
c000ff71:	83 c4 0c             	add    esp,0xc
c000ff74:	6a 44                	push   0x44
c000ff76:	6a 00                	push   0x0
c000ff78:	53                   	push   ebx
c000ff79:	e8 72 05 ff ff       	call   c00004f0 <memset>
c000ff7e:	89 d8                	mov    eax,ebx
c000ff80:	83 c4 18             	add    esp,0x18
c000ff83:	5b                   	pop    ebx
c000ff84:	c3                   	ret    

c000ff85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000ff85:	53                   	push   ebx
c000ff86:	b8 01 00 00 00       	mov    eax,0x1
c000ff8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff93:	83 f9 10             	cmp    ecx,0x10
c000ff96:	7f 21                	jg     c000ffb9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000ff98:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000ff9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9f:	89 03                	mov    DWORD PTR [ebx],eax
c000ffa1:	b8 01 00 00 00       	mov    eax,0x1
c000ffa6:	d3 e0                	shl    eax,cl
c000ffa8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ffac:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000ffaf:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000ffb7:	31 c0                	xor    eax,eax
c000ffb9:	5b                   	pop    ebx
c000ffba:	c3                   	ret    

c000ffbb <KeRaiseSignal(SigHandlerBlock*, int)>:
c000ffbb:	55                   	push   ebp
c000ffbc:	57                   	push   edi
c000ffbd:	bf 08 00 00 00       	mov    edi,0x8
c000ffc2:	56                   	push   esi
c000ffc3:	53                   	push   ebx
c000ffc4:	83 ec 18             	sub    esp,0x18
c000ffc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000ffcb:	68 c0 2c 02 c0       	push   0xc0022cc0
c000ffd0:	e8 8f 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ffd5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ffdc:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000ffe2:	83 c4 10             	add    esp,0x10
c000ffe5:	31 c9                	xor    ecx,ecx
c000ffe7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000ffeb:	99                   	cdq    
c000ffec:	f7 ff                	idiv   edi
c000ffee:	8d 42 24             	lea    eax,[edx+0x24]
c000fff1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fff5:	85 f6                	test   esi,esi
c000fff7:	75 1a                	jne    c0010013 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fff9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fffd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010001:	50                   	push   eax
c0010002:	50                   	push   eax
c0010003:	52                   	push   edx
c0010004:	68 d1 2c 02 c0       	push   0xc0022cd1
c0010009:	e8 56 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001000e:	83 c4 10             	add    esp,0x10
c0010011:	eb 1b                	jmp    c001002e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010013:	41                   	inc    ecx
c0010014:	83 f9 08             	cmp    ecx,0x8
c0010017:	75 ce                	jne    c000ffe7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010019:	83 ec 0c             	sub    esp,0xc
c001001c:	be 01 00 00 00       	mov    esi,0x1
c0010021:	68 f2 2c 02 c0       	push   0xc0022cf2
c0010026:	e8 39 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001002b:	83 c4 10             	add    esp,0x10
c001002e:	83 c4 0c             	add    esp,0xc
c0010031:	89 f0                	mov    eax,esi
c0010033:	5b                   	pop    ebx
c0010034:	5e                   	pop    esi
c0010035:	5f                   	pop    edi
c0010036:	5d                   	pop    ebp
c0010037:	c3                   	ret    

c0010038 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010038:	55                   	push   ebp
c0010039:	57                   	push   edi
c001003a:	56                   	push   esi
c001003b:	53                   	push   ebx
c001003c:	51                   	push   ecx
c001003d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010041:	85 db                	test   ebx,ebx
c0010043:	0f 84 bc 00 00 00    	je     c0010105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010049:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010050:	0f 84 af 00 00 00    	je     c0010105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010056:	31 c9                	xor    ecx,ecx
c0010058:	bf 08 00 00 00       	mov    edi,0x8
c001005d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010063:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010066:	99                   	cdq    
c0010067:	f7 ff                	idiv   edi
c0010069:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010070:	85 ed                	test   ebp,ebp
c0010072:	0f 84 9e 00 00 00    	je     c0010116 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0010078:	89 e9                	mov    ecx,ebp
c001007a:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010080:	bf 01 00 00 00       	mov    edi,0x1
c0010085:	89 04 24             	mov    DWORD PTR [esp],eax
c0010088:	d3 e7                	shl    edi,cl
c001008a:	31 c9                	xor    ecx,ecx
c001008c:	b8 01 00 00 00       	mov    eax,0x1
c0010091:	d3 e0                	shl    eax,cl
c0010093:	85 04 24             	test   DWORD PTR [esp],eax
c0010096:	74 06                	je     c001009e <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0010098:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001009c:	75 67                	jne    c0010105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001009e:	41                   	inc    ecx
c001009f:	83 f9 11             	cmp    ecx,0x11
c00100a2:	75 e8                	jne    c001008c <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00100a4:	46                   	inc    esi
c00100a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00100a8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00100ae:	09 f8                	or     eax,edi
c00100b0:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00100bb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00100c1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00100c8:	31 c0                	xor    eax,eax
c00100ca:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00100d2:	74 09                	je     c00100dd <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00100d4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00100db:	eb 06                	jmp    c00100e3 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00100dd:	40                   	inc    eax
c00100de:	83 f8 08             	cmp    eax,0x8
c00100e1:	75 e7                	jne    c00100ca <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00100e3:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00100e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00100ea:	83 fd 09             	cmp    ebp,0x9
c00100ed:	89 2a                	mov    DWORD PTR [edx],ebp
c00100ef:	75 07                	jne    c00100f8 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00100f1:	b8 c1 fe 00 c0       	mov    eax,0xc000fec1
c00100f6:	eb 31                	jmp    c0010129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00100f8:	83 f8 01             	cmp    eax,0x1
c00100fb:	75 0c                	jne    c0010109 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00100fd:	f7 d7                	not    edi
c00100ff:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010105:	31 c0                	xor    eax,eax
c0010107:	eb 20                	jmp    c0010129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010109:	85 c0                	test   eax,eax
c001010b:	75 1c                	jne    c0010129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001010d:	8b 04 ad 60 4f 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdb0a0]
c0010114:	eb 13                	jmp    c0010129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010116:	46                   	inc    esi
c0010117:	41                   	inc    ecx
c0010118:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001011e:	83 f9 08             	cmp    ecx,0x8
c0010121:	0f 85 36 ff ff ff    	jne    c001005d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0010127:	eb dc                	jmp    c0010105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010129:	5a                   	pop    edx
c001012a:	5b                   	pop    ebx
c001012b:	5e                   	pop    esi
c001012c:	5f                   	pop    edi
c001012d:	5d                   	pop    ebp
c001012e:	c3                   	ret    

c001012f <KiCheckSignalZ>:
c001012f:	83 ec 10             	sub    esp,0x10
c0010132:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010136:	50                   	push   eax
c0010137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001013c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001013f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010145:	e8 ee fe ff ff       	call   c0010038 <KeCheckSignal(SigHandlerBlock*, int*)>
c001014a:	5a                   	pop    edx
c001014b:	31 d2                	xor    edx,edx
c001014d:	59                   	pop    ecx
c001014e:	85 c0                	test   eax,eax
c0010150:	74 19                	je     c001016b <KiCheckSignalZ+0x3c>
c0010152:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010158:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001015b:	89 02                	mov    DWORD PTR [edx],eax
c001015d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010168:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001016b:	89 d0                	mov    eax,edx
c001016d:	83 c4 10             	add    esp,0x10
c0010170:	c3                   	ret    

c0010171 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010171:	56                   	push   esi
c0010172:	53                   	push   ebx
c0010173:	bb 01 00 00 00       	mov    ebx,0x1
c0010178:	52                   	push   edx
c0010179:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001017d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010181:	d3 e3                	shl    ebx,cl
c0010183:	83 f9 10             	cmp    ecx,0x10
c0010186:	7f 08                	jg     c0010190 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010188:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001018e:	75 10                	jne    c00101a0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010190:	83 ec 0c             	sub    esp,0xc
c0010193:	68 03 2d 02 c0       	push   0xc0022d03
c0010198:	e8 d5 ec ff ff       	call   c000ee72 <KePanic(char const*)>
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	f7 d3                	not    ebx
c00101a2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00101a8:	58                   	pop    eax
c00101a9:	5b                   	pop    ebx
c00101aa:	5e                   	pop    esi
c00101ab:	c3                   	ret    

c00101ac <KiFinishSignalZ>:
c00101ac:	53                   	push   ebx
c00101ad:	83 ec 10             	sub    esp,0x10
c00101b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101b4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00101b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00101bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00101bf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00101c5:	e8 a7 ff ff ff       	call   c0010171 <KeCompleteSignal(SigHandlerBlock*, int)>
c00101ca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00101d0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00101d7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00101de:	83 c4 18             	add    esp,0x18
c00101e1:	5b                   	pop    ebx
c00101e2:	c3                   	ret    

c00101e3 <SysSeekDir(regs*)>:
c00101e3:	31 c0                	xor    eax,eax
c00101e5:	31 d2                	xor    edx,edx
c00101e7:	c3                   	ret    

c00101e8 <SysTellDir(regs*)>:
c00101e8:	31 c0                	xor    eax,eax
c00101ea:	31 d2                	xor    edx,edx
c00101ec:	c3                   	ret    

c00101ed <SysVerify(regs*)>:
c00101ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f1:	31 d2                	xor    edx,edx
c00101f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00101f6:	c3                   	ret    

c00101f7 <SysGetArgc(regs*)>:
c00101f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00101fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00101ff:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010205:	89 c2                	mov    edx,eax
c0010207:	c1 fa 1f             	sar    edx,0x1f
c001020a:	c3                   	ret    

c001020b <SysTTYName(regs*)>:
c001020b:	b8 01 00 00 00       	mov    eax,0x1
c0010210:	31 d2                	xor    edx,edx
c0010212:	c3                   	ret    

c0010213 <SysFormatDisk(regs*)>:
c0010213:	56                   	push   esi
c0010214:	53                   	push   ebx
c0010215:	83 ec 04             	sub    esp,0x4
c0010218:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001021c:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c0010222:	eb 28                	jmp    c001024c <SysFormatDisk(regs*)+0x39>
c0010224:	83 ec 0c             	sub    esp,0xc
c0010227:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001022a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001022d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001022f:	51                   	push   ecx
c0010230:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010233:	51                   	push   ecx
c0010234:	50                   	push   eax
c0010235:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001023c:	50                   	push   eax
c001023d:	53                   	push   ebx
c001023e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010241:	83 c4 20             	add    esp,0x20
c0010244:	83 f8 08             	cmp    eax,0x8
c0010247:	75 14                	jne    c001025d <SysFormatDisk(regs*)+0x4a>
c0010249:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001024c:	85 db                	test   ebx,ebx
c001024e:	75 d4                	jne    c0010224 <SysFormatDisk(regs*)+0x11>
c0010250:	83 c4 04             	add    esp,0x4
c0010253:	b8 03 00 00 00       	mov    eax,0x3
c0010258:	31 d2                	xor    edx,edx
c001025a:	5b                   	pop    ebx
c001025b:	5e                   	pop    esi
c001025c:	c3                   	ret    
c001025d:	85 c0                	test   eax,eax
c001025f:	74 1f                	je     c0010280 <SysFormatDisk(regs*)+0x6d>
c0010261:	83 f8 09             	cmp    eax,0x9
c0010264:	74 0d                	je     c0010273 <SysFormatDisk(regs*)+0x60>
c0010266:	83 c4 04             	add    esp,0x4
c0010269:	b8 02 00 00 00       	mov    eax,0x2
c001026e:	31 d2                	xor    edx,edx
c0010270:	5b                   	pop    ebx
c0010271:	5e                   	pop    esi
c0010272:	c3                   	ret    
c0010273:	83 c4 04             	add    esp,0x4
c0010276:	b8 01 00 00 00       	mov    eax,0x1
c001027b:	31 d2                	xor    edx,edx
c001027d:	5b                   	pop    ebx
c001027e:	5e                   	pop    esi
c001027f:	c3                   	ret    
c0010280:	83 c4 04             	add    esp,0x4
c0010283:	31 c0                	xor    eax,eax
c0010285:	31 d2                	xor    edx,edx
c0010287:	5b                   	pop    ebx
c0010288:	5e                   	pop    esi
c0010289:	c3                   	ret    

c001028a <SysSetDiskVolumeLabel(regs*)>:
c001028a:	56                   	push   esi
c001028b:	53                   	push   ebx
c001028c:	83 ec 04             	sub    esp,0x4
c001028f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010293:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010296:	83 f8 19             	cmp    eax,0x19
c0010299:	77 33                	ja     c00102ce <SysSetDiskVolumeLabel(regs*)+0x44>
c001029b:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c00102a2:	85 c9                	test   ecx,ecx
c00102a4:	74 28                	je     c00102ce <SysSetDiskVolumeLabel(regs*)+0x44>
c00102a6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00102a9:	85 db                	test   ebx,ebx
c00102ab:	74 21                	je     c00102ce <SysSetDiskVolumeLabel(regs*)+0x44>
c00102ad:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00102b3:	85 d2                	test   edx,edx
c00102b5:	74 17                	je     c00102ce <SysSetDiskVolumeLabel(regs*)+0x44>
c00102b7:	8b 32                	mov    esi,DWORD PTR [edx]
c00102b9:	53                   	push   ebx
c00102ba:	50                   	push   eax
c00102bb:	51                   	push   ecx
c00102bc:	52                   	push   edx
c00102bd:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00102c0:	83 c4 10             	add    esp,0x10
c00102c3:	89 c2                	mov    edx,eax
c00102c5:	83 c4 04             	add    esp,0x4
c00102c8:	c1 fa 1f             	sar    edx,0x1f
c00102cb:	5b                   	pop    ebx
c00102cc:	5e                   	pop    esi
c00102cd:	c3                   	ret    
c00102ce:	83 c4 04             	add    esp,0x4
c00102d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00102d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102db:	5b                   	pop    ebx
c00102dc:	5e                   	pop    esi
c00102dd:	c3                   	ret    

c00102de <SysGetDiskVolumeLabel(regs*)>:
c00102de:	57                   	push   edi
c00102df:	56                   	push   esi
c00102e0:	53                   	push   ebx
c00102e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00102e8:	83 fa 19             	cmp    edx,0x19
c00102eb:	77 3c                	ja     c0010329 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00102ed:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c00102f4:	85 c9                	test   ecx,ecx
c00102f6:	74 31                	je     c0010329 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00102f8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00102fb:	85 db                	test   ebx,ebx
c00102fd:	74 2a                	je     c0010329 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00102ff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010302:	85 f6                	test   esi,esi
c0010304:	74 23                	je     c0010329 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010306:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001030c:	85 c0                	test   eax,eax
c001030e:	74 19                	je     c0010329 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	8b 38                	mov    edi,DWORD PTR [eax]
c0010315:	56                   	push   esi
c0010316:	53                   	push   ebx
c0010317:	52                   	push   edx
c0010318:	51                   	push   ecx
c0010319:	50                   	push   eax
c001031a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001031d:	83 c4 20             	add    esp,0x20
c0010320:	89 c2                	mov    edx,eax
c0010322:	5b                   	pop    ebx
c0010323:	c1 fa 1f             	sar    edx,0x1f
c0010326:	5e                   	pop    esi
c0010327:	5f                   	pop    edi
c0010328:	c3                   	ret    
c0010329:	5b                   	pop    ebx
c001032a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001032f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010334:	5e                   	pop    esi
c0010335:	5f                   	pop    edi
c0010336:	c3                   	ret    

c0010337 <SysRealpath(regs*)>:
c0010337:	83 ec 0c             	sub    esp,0xc
c001033a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010341:	85 d2                	test   edx,edx
c0010343:	74 07                	je     c001034c <SysRealpath(regs*)+0x15>
c0010345:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010348:	85 c0                	test   eax,eax
c001034a:	75 0b                	jne    c0010357 <SysRealpath(regs*)+0x20>
c001034c:	b8 01 00 00 00       	mov    eax,0x1
c0010351:	31 d2                	xor    edx,edx
c0010353:	83 c4 0c             	add    esp,0xc
c0010356:	c3                   	ret    
c0010357:	6a 00                	push   0x0
c0010359:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001035f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010362:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010368:	51                   	push   ecx
c0010369:	52                   	push   edx
c001036a:	50                   	push   eax
c001036b:	e8 aa 7a ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010370:	83 c4 10             	add    esp,0x10
c0010373:	31 c0                	xor    eax,eax
c0010375:	31 d2                	xor    edx,edx
c0010377:	83 c4 0c             	add    esp,0xc
c001037a:	c3                   	ret    

c001037b <SysReadDir(regs*)>:
c001037b:	53                   	push   ebx
c001037c:	83 ec 18             	sub    esp,0x18
c001037f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010383:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010386:	83 f8 02             	cmp    eax,0x2
c0010389:	76 61                	jbe    c00103ec <SysReadDir(regs*)+0x71>
c001038b:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010392:	77 49                	ja     c00103dd <SysReadDir(regs*)+0x62>
c0010394:	83 ec 0c             	sub    esp,0xc
c0010397:	50                   	push   eax
c0010398:	e8 5c 1d 00 00       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c001039d:	83 c4 10             	add    esp,0x10
c00103a0:	85 c0                	test   eax,eax
c00103a2:	74 39                	je     c00103dd <SysReadDir(regs*)+0x62>
c00103a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	8b 10                	mov    edx,DWORD PTR [eax]
c00103b1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00103b5:	51                   	push   ecx
c00103b6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00103b9:	51                   	push   ecx
c00103ba:	6a 00                	push   0x0
c00103bc:	68 10 01 00 00       	push   0x110
c00103c1:	50                   	push   eax
c00103c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00103c5:	83 c4 20             	add    esp,0x20
c00103c8:	85 c0                	test   eax,eax
c00103ca:	74 29                	je     c00103f5 <SysReadDir(regs*)+0x7a>
c00103cc:	83 f8 07             	cmp    eax,0x7
c00103cf:	74 1b                	je     c00103ec <SysReadDir(regs*)+0x71>
c00103d1:	b8 02 00 00 00       	mov    eax,0x2
c00103d6:	31 d2                	xor    edx,edx
c00103d8:	83 c4 18             	add    esp,0x18
c00103db:	5b                   	pop    ebx
c00103dc:	c3                   	ret    
c00103dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103e7:	83 c4 18             	add    esp,0x18
c00103ea:	5b                   	pop    ebx
c00103eb:	c3                   	ret    
c00103ec:	b8 01 00 00 00       	mov    eax,0x1
c00103f1:	31 d2                	xor    edx,edx
c00103f3:	eb e3                	jmp    c00103d8 <SysReadDir(regs*)+0x5d>
c00103f5:	31 c0                	xor    eax,eax
c00103f7:	31 d2                	xor    edx,edx
c00103f9:	eb dd                	jmp    c00103d8 <SysReadDir(regs*)+0x5d>

c00103fb <SysIsATTY(regs*)>:
c00103fb:	83 ec 0c             	sub    esp,0xc
c00103fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010402:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010405:	83 f8 02             	cmp    eax,0x2
c0010408:	76 07                	jbe    c0010411 <SysIsATTY(regs*)+0x16>
c001040a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001040f:	75 26                	jne    c0010437 <SysIsATTY(regs*)+0x3c>
c0010411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010416:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010419:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001041f:	85 c0                	test   eax,eax
c0010421:	74 24                	je     c0010447 <SysIsATTY(regs*)+0x4c>
c0010423:	83 ec 0c             	sub    esp,0xc
c0010426:	8b 10                	mov    edx,DWORD PTR [eax]
c0010428:	50                   	push   eax
c0010429:	ff 12                	call   DWORD PTR [edx]
c001042b:	31 d2                	xor    edx,edx
c001042d:	0f b6 c0             	movzx  eax,al
c0010430:	83 c4 10             	add    esp,0x10
c0010433:	83 c4 0c             	add    esp,0xc
c0010436:	c3                   	ret    
c0010437:	83 ec 0c             	sub    esp,0xc
c001043a:	50                   	push   eax
c001043b:	e8 b9 1c 00 00       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c0010440:	83 c4 10             	add    esp,0x10
c0010443:	85 c0                	test   eax,eax
c0010445:	75 dc                	jne    c0010423 <SysIsATTY(regs*)+0x28>
c0010447:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001044c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010451:	83 c4 0c             	add    esp,0xc
c0010454:	c3                   	ret    

c0010455 <SysSeek(regs*)>:
c0010455:	53                   	push   ebx
c0010456:	83 ec 08             	sub    esp,0x8
c0010459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001045d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010460:	8d 50 fd             	lea    edx,[eax-0x3]
c0010463:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010469:	77 39                	ja     c00104a4 <SysSeek(regs*)+0x4f>
c001046b:	83 ec 0c             	sub    esp,0xc
c001046e:	50                   	push   eax
c001046f:	e8 85 1c 00 00       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	85 c0                	test   eax,eax
c0010479:	74 29                	je     c00104a4 <SysSeek(regs*)+0x4f>
c001047b:	83 ec 04             	sub    esp,0x4
c001047e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010481:	31 db                	xor    ebx,ebx
c0010483:	53                   	push   ebx
c0010484:	51                   	push   ecx
c0010485:	50                   	push   eax
c0010486:	e8 83 7d ff ff       	call   c000820e <File::seek(unsigned long long)>
c001048b:	83 c4 10             	add    esp,0x10
c001048e:	85 c0                	test   eax,eax
c0010490:	0f 95 c0             	setne  al
c0010493:	31 d2                	xor    edx,edx
c0010495:	0f b6 c0             	movzx  eax,al
c0010498:	f7 d8                	neg    eax
c001049a:	83 d2 00             	adc    edx,0x0
c001049d:	83 c4 08             	add    esp,0x8
c00104a0:	f7 da                	neg    edx
c00104a2:	5b                   	pop    ebx
c00104a3:	c3                   	ret    
c00104a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104ae:	83 c4 08             	add    esp,0x8
c00104b1:	5b                   	pop    ebx
c00104b2:	c3                   	ret    

c00104b3 <SysTell(regs*)>:
c00104b3:	53                   	push   ebx
c00104b4:	83 ec 08             	sub    esp,0x8
c00104b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104be:	83 f8 02             	cmp    eax,0x2
c00104c1:	76 56                	jbe    c0010519 <SysTell(regs*)+0x66>
c00104c3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00104c8:	76 19                	jbe    c00104e3 <SysTell(regs*)+0x30>
c00104ca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00104cd:	31 d2                	xor    edx,edx
c00104cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104dc:	31 c0                	xor    eax,eax
c00104de:	83 c4 08             	add    esp,0x8
c00104e1:	5b                   	pop    ebx
c00104e2:	c3                   	ret    
c00104e3:	83 ec 0c             	sub    esp,0xc
c00104e6:	50                   	push   eax
c00104e7:	e8 0d 1c 00 00       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c00104ec:	83 c4 10             	add    esp,0x10
c00104ef:	85 c0                	test   eax,eax
c00104f1:	74 26                	je     c0010519 <SysTell(regs*)+0x66>
c00104f3:	83 ec 08             	sub    esp,0x8
c00104f6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00104f9:	52                   	push   edx
c00104fa:	50                   	push   eax
c00104fb:	e8 ba 7d ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	85 c0                	test   eax,eax
c0010505:	0f 95 c0             	setne  al
c0010508:	31 d2                	xor    edx,edx
c001050a:	0f b6 c0             	movzx  eax,al
c001050d:	f7 d8                	neg    eax
c001050f:	83 d2 00             	adc    edx,0x0
c0010512:	83 c4 08             	add    esp,0x8
c0010515:	f7 da                	neg    edx
c0010517:	5b                   	pop    ebx
c0010518:	c3                   	ret    
c0010519:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001051e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010523:	83 c4 08             	add    esp,0x8
c0010526:	5b                   	pop    ebx
c0010527:	c3                   	ret    

c0010528 <SysSize(regs*)>:
c0010528:	53                   	push   ebx
c0010529:	83 ec 18             	sub    esp,0x18
c001052c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010530:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010533:	83 f8 02             	cmp    eax,0x2
c0010536:	76 5b                	jbe    c0010593 <SysSize(regs*)+0x6b>
c0010538:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001053d:	76 19                	jbe    c0010558 <SysSize(regs*)+0x30>
c001053f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010542:	31 d2                	xor    edx,edx
c0010544:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001054a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010551:	31 c0                	xor    eax,eax
c0010553:	83 c4 18             	add    esp,0x18
c0010556:	5b                   	pop    ebx
c0010557:	c3                   	ret    
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	50                   	push   eax
c001055c:	e8 98 1b 00 00       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	85 c0                	test   eax,eax
c0010566:	74 2b                	je     c0010593 <SysSize(regs*)+0x6b>
c0010568:	83 ec 04             	sub    esp,0x4
c001056b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001056f:	52                   	push   edx
c0010570:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010573:	52                   	push   edx
c0010574:	50                   	push   eax
c0010575:	e8 d8 7e ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	85 c0                	test   eax,eax
c001057f:	0f 95 c0             	setne  al
c0010582:	31 d2                	xor    edx,edx
c0010584:	0f b6 c0             	movzx  eax,al
c0010587:	f7 d8                	neg    eax
c0010589:	83 d2 00             	adc    edx,0x0
c001058c:	83 c4 18             	add    esp,0x18
c001058f:	f7 da                	neg    edx
c0010591:	5b                   	pop    ebx
c0010592:	c3                   	ret    
c0010593:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010598:	ba ff ff ff ff       	mov    edx,0xffffffff
c001059d:	83 c4 18             	add    esp,0x18
c00105a0:	5b                   	pop    ebx
c00105a1:	c3                   	ret    

c00105a2 <SysSizeFromFilename(regs*)>:
c00105a2:	55                   	push   ebp
c00105a3:	57                   	push   edi
c00105a4:	56                   	push   esi
c00105a5:	53                   	push   ebx
c00105a6:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00105ac:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00105b3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00105b6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00105b9:	85 f6                	test   esi,esi
c00105bb:	74 34                	je     c00105f1 <SysSizeFromFilename(regs*)+0x4f>
c00105bd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00105c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00105c6:	83 f8 02             	cmp    eax,0x2
c00105c9:	76 2d                	jbe    c00105f8 <SysSizeFromFilename(regs*)+0x56>
c00105cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00105d0:	76 3b                	jbe    c001060d <SysSizeFromFilename(regs*)+0x6b>
c00105d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00105d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105e2:	81 c4 4c 02 00 00    	add    esp,0x24c
c00105e8:	31 c0                	xor    eax,eax
c00105ea:	5b                   	pop    ebx
c00105eb:	31 d2                	xor    edx,edx
c00105ed:	5e                   	pop    esi
c00105ee:	5f                   	pop    edi
c00105ef:	5d                   	pop    ebp
c00105f0:	c3                   	ret    
c00105f1:	89 f8                	mov    eax,edi
c00105f3:	83 f8 02             	cmp    eax,0x2
c00105f6:	77 d3                	ja     c00105cb <SysSizeFromFilename(regs*)+0x29>
c00105f8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00105fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010603:	5b                   	pop    ebx
c0010604:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010609:	5e                   	pop    esi
c001060a:	5f                   	pop    edi
c001060b:	5d                   	pop    ebp
c001060c:	c3                   	ret    
c001060d:	83 ec 0c             	sub    esp,0xc
c0010610:	68 14 01 00 00       	push   0x114
c0010615:	e8 11 e5 ff ff       	call   c000eb2b <malloc>
c001061a:	6a 01                	push   0x1
c001061c:	89 c5                	mov    ebp,eax
c001061e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010623:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010626:	50                   	push   eax
c0010627:	57                   	push   edi
c0010628:	55                   	push   ebp
c0010629:	e8 06 7a ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001062e:	83 c4 20             	add    esp,0x20
c0010631:	85 ed                	test   ebp,ebp
c0010633:	74 c3                	je     c00105f8 <SysSizeFromFilename(regs*)+0x56>
c0010635:	83 ec 04             	sub    esp,0x4
c0010638:	8d 44 24 13          	lea    eax,[esp+0x13]
c001063c:	50                   	push   eax
c001063d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010640:	51                   	push   ecx
c0010641:	55                   	push   ebp
c0010642:	e8 0b 7e ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010647:	89 c3                	mov    ebx,eax
c0010649:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001064c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001064f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010652:	83 c4 10             	add    esp,0x10
c0010655:	85 db                	test   ebx,ebx
c0010657:	75 9f                	jne    c00105f8 <SysSizeFromFilename(regs*)+0x56>
c0010659:	6a 00                	push   0x0
c001065b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010660:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010663:	05 0c 01 00 00       	add    eax,0x10c
c0010668:	50                   	push   eax
c0010669:	57                   	push   edi
c001066a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010671:	53                   	push   ebx
c0010672:	e8 a3 77 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010677:	58                   	pop    eax
c0010678:	5a                   	pop    edx
c0010679:	8d 44 24 18          	lea    eax,[esp+0x18]
c001067d:	50                   	push   eax
c001067e:	53                   	push   ebx
c001067f:	e8 1d 72 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	83 f8 01             	cmp    eax,0x1
c001068a:	74 1a                	je     c00106a6 <SysSizeFromFilename(regs*)+0x104>
c001068c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010691:	74 26                	je     c00106b9 <SysSizeFromFilename(regs*)+0x117>
c0010693:	85 f6                	test   esi,esi
c0010695:	0f 84 47 ff ff ff    	je     c00105e2 <SysSizeFromFilename(regs*)+0x40>
c001069b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00106a1:	e9 3c ff ff ff       	jmp    c00105e2 <SysSizeFromFilename(regs*)+0x40>
c00106a6:	85 f6                	test   esi,esi
c00106a8:	0f 84 34 ff ff ff    	je     c00105e2 <SysSizeFromFilename(regs*)+0x40>
c00106ae:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00106b4:	e9 29 ff ff ff       	jmp    c00105e2 <SysSizeFromFilename(regs*)+0x40>
c00106b9:	85 f6                	test   esi,esi
c00106bb:	0f 84 21 ff ff ff    	je     c00105e2 <SysSizeFromFilename(regs*)+0x40>
c00106c1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00106c7:	e9 16 ff ff ff       	jmp    c00105e2 <SysSizeFromFilename(regs*)+0x40>

c00106cc <SysSizeFromFilenameNoSymlink(regs*)>:
c00106cc:	55                   	push   ebp
c00106cd:	57                   	push   edi
c00106ce:	56                   	push   esi
c00106cf:	53                   	push   ebx
c00106d0:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00106d6:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00106dd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00106e0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00106e3:	85 f6                	test   esi,esi
c00106e5:	74 34                	je     c001071b <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00106e7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00106ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106f0:	83 f8 02             	cmp    eax,0x2
c00106f3:	76 2d                	jbe    c0010722 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00106f5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00106fa:	76 3b                	jbe    c0010737 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00106fc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00106ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010705:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001070c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010712:	31 c0                	xor    eax,eax
c0010714:	5b                   	pop    ebx
c0010715:	31 d2                	xor    edx,edx
c0010717:	5e                   	pop    esi
c0010718:	5f                   	pop    edi
c0010719:	5d                   	pop    ebp
c001071a:	c3                   	ret    
c001071b:	89 f8                	mov    eax,edi
c001071d:	83 f8 02             	cmp    eax,0x2
c0010720:	77 d3                	ja     c00106f5 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0010722:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010728:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001072d:	5b                   	pop    ebx
c001072e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010733:	5e                   	pop    esi
c0010734:	5f                   	pop    edi
c0010735:	5d                   	pop    ebp
c0010736:	c3                   	ret    
c0010737:	83 ec 0c             	sub    esp,0xc
c001073a:	68 14 01 00 00       	push   0x114
c001073f:	e8 e7 e3 ff ff       	call   c000eb2b <malloc>
c0010744:	6a 00                	push   0x0
c0010746:	89 c5                	mov    ebp,eax
c0010748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001074d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010750:	50                   	push   eax
c0010751:	57                   	push   edi
c0010752:	55                   	push   ebp
c0010753:	e8 dc 78 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010758:	83 c4 20             	add    esp,0x20
c001075b:	85 ed                	test   ebp,ebp
c001075d:	74 c3                	je     c0010722 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001075f:	83 ec 04             	sub    esp,0x4
c0010762:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010766:	50                   	push   eax
c0010767:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001076a:	51                   	push   ecx
c001076b:	55                   	push   ebp
c001076c:	e8 e1 7c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010771:	89 c3                	mov    ebx,eax
c0010773:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010776:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010779:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001077c:	83 c4 10             	add    esp,0x10
c001077f:	85 db                	test   ebx,ebx
c0010781:	75 9f                	jne    c0010722 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010783:	6a 00                	push   0x0
c0010785:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001078a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001078d:	05 0c 01 00 00       	add    eax,0x10c
c0010792:	50                   	push   eax
c0010793:	57                   	push   edi
c0010794:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001079b:	53                   	push   ebx
c001079c:	e8 79 76 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00107a1:	58                   	pop    eax
c00107a2:	5a                   	pop    edx
c00107a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00107a7:	50                   	push   eax
c00107a8:	53                   	push   ebx
c00107a9:	e8 f3 70 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00107ae:	83 c4 10             	add    esp,0x10
c00107b1:	83 f8 01             	cmp    eax,0x1
c00107b4:	74 1a                	je     c00107d0 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c00107b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00107bb:	74 26                	je     c00107e3 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c00107bd:	85 f6                	test   esi,esi
c00107bf:	0f 84 47 ff ff ff    	je     c001070c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00107c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00107cb:	e9 3c ff ff ff       	jmp    c001070c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00107d0:	85 f6                	test   esi,esi
c00107d2:	0f 84 34 ff ff ff    	je     c001070c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00107d8:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00107de:	e9 29 ff ff ff       	jmp    c001070c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00107e3:	85 f6                	test   esi,esi
c00107e5:	0f 84 21 ff ff ff    	je     c001070c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00107eb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00107f1:	e9 16 ff ff ff       	jmp    c001070c <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00107f6 <SysClose(regs*)>:
c00107f6:	53                   	push   ebx
c00107f7:	83 ec 08             	sub    esp,0x8
c00107fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010801:	83 f8 02             	cmp    eax,0x2
c0010804:	76 41                	jbe    c0010847 <SysClose(regs*)+0x51>
c0010806:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001080c:	83 fa 01             	cmp    edx,0x1
c001080f:	76 2d                	jbe    c001083e <SysClose(regs*)+0x48>
c0010811:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010816:	77 2f                	ja     c0010847 <SysClose(regs*)+0x51>
c0010818:	83 ec 0c             	sub    esp,0xc
c001081b:	50                   	push   eax
c001081c:	e8 d8 18 00 00       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c0010821:	83 c4 10             	add    esp,0x10
c0010824:	89 c3                	mov    ebx,eax
c0010826:	85 c0                	test   eax,eax
c0010828:	74 1d                	je     c0010847 <SysClose(regs*)+0x51>
c001082a:	83 ec 0c             	sub    esp,0xc
c001082d:	50                   	push   eax
c001082e:	e8 7b 79 ff ff       	call   c00081ae <File::close()>
c0010833:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010835:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010838:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001083b:	83 c4 10             	add    esp,0x10
c001083e:	31 c0                	xor    eax,eax
c0010840:	31 d2                	xor    edx,edx
c0010842:	83 c4 08             	add    esp,0x8
c0010845:	5b                   	pop    ebx
c0010846:	c3                   	ret    
c0010847:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001084c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010851:	83 c4 08             	add    esp,0x8
c0010854:	5b                   	pop    ebx
c0010855:	c3                   	ret    

c0010856 <SysOpenDir(regs*)>:
c0010856:	56                   	push   esi
c0010857:	53                   	push   ebx
c0010858:	83 ec 04             	sub    esp,0x4
c001085b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001085f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010862:	85 c9                	test   ecx,ecx
c0010864:	74 5d                	je     c00108c3 <SysOpenDir(regs*)+0x6d>
c0010866:	83 ec 0c             	sub    esp,0xc
c0010869:	68 14 01 00 00       	push   0x114
c001086e:	e8 b8 e2 ff ff       	call   c000eb2b <malloc>
c0010873:	83 c4 0c             	add    esp,0xc
c0010876:	89 c6                	mov    esi,eax
c0010878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001087d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010880:	50                   	push   eax
c0010881:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010884:	52                   	push   edx
c0010885:	56                   	push   esi
c0010886:	e8 87 7d ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c001088b:	83 c4 10             	add    esp,0x10
c001088e:	85 f6                	test   esi,esi
c0010890:	74 31                	je     c00108c3 <SysOpenDir(regs*)+0x6d>
c0010892:	83 ec 0c             	sub    esp,0xc
c0010895:	56                   	push   esi
c0010896:	e8 3f 7e ff ff       	call   c00086da <Directory::open()>
c001089b:	83 c4 10             	add    esp,0x10
c001089e:	85 c0                	test   eax,eax
c00108a0:	75 21                	jne    c00108c3 <SysOpenDir(regs*)+0x6d>
c00108a2:	83 ec 0c             	sub    esp,0xc
c00108a5:	56                   	push   esi
c00108a6:	e8 51 15 00 00       	call   c0011dfc <UnixFile::getFileDescriptor()>
c00108ab:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00108ae:	83 c4 10             	add    esp,0x10
c00108b1:	89 02                	mov    DWORD PTR [edx],eax
c00108b3:	c1 f8 1f             	sar    eax,0x1f
c00108b6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00108b9:	83 c4 04             	add    esp,0x4
c00108bc:	31 c0                	xor    eax,eax
c00108be:	31 d2                	xor    edx,edx
c00108c0:	5b                   	pop    ebx
c00108c1:	5e                   	pop    esi
c00108c2:	c3                   	ret    
c00108c3:	83 c4 04             	add    esp,0x4
c00108c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108d0:	5b                   	pop    ebx
c00108d1:	5e                   	pop    esi
c00108d2:	c3                   	ret    

c00108d3 <SysMakeDir(regs*)>:
c00108d3:	56                   	push   esi
c00108d4:	53                   	push   ebx
c00108d5:	83 ec 10             	sub    esp,0x10
c00108d8:	68 14 01 00 00       	push   0x114
c00108dd:	e8 49 e2 ff ff       	call   c000eb2b <malloc>
c00108e2:	83 c4 0c             	add    esp,0xc
c00108e5:	89 c3                	mov    ebx,eax
c00108e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108ef:	50                   	push   eax
c00108f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00108f4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00108f7:	52                   	push   edx
c00108f8:	53                   	push   ebx
c00108f9:	e8 14 7d ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	85 db                	test   ebx,ebx
c0010903:	74 2c                	je     c0010931 <SysMakeDir(regs*)+0x5e>
c0010905:	83 ec 0c             	sub    esp,0xc
c0010908:	53                   	push   ebx
c0010909:	e8 ac 7f ff ff       	call   c00088ba <Directory::create()>
c001090e:	89 c6                	mov    esi,eax
c0010910:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010915:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	31 c0                	xor    eax,eax
c001091d:	85 f6                	test   esi,esi
c001091f:	0f 95 c0             	setne  al
c0010922:	31 d2                	xor    edx,edx
c0010924:	f7 d8                	neg    eax
c0010926:	83 d2 00             	adc    edx,0x0
c0010929:	83 c4 04             	add    esp,0x4
c001092c:	f7 da                	neg    edx
c001092e:	5b                   	pop    ebx
c001092f:	5e                   	pop    esi
c0010930:	c3                   	ret    
c0010931:	83 c4 04             	add    esp,0x4
c0010934:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010939:	ba ff ff ff ff       	mov    edx,0xffffffff
c001093e:	5b                   	pop    ebx
c001093f:	5e                   	pop    esi
c0010940:	c3                   	ret    

c0010941 <SysCloseDir(regs*)>:
c0010941:	53                   	push   ebx
c0010942:	83 ec 08             	sub    esp,0x8
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001094c:	8d 50 fd             	lea    edx,[eax-0x3]
c001094f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010955:	77 2f                	ja     c0010986 <SysCloseDir(regs*)+0x45>
c0010957:	83 ec 0c             	sub    esp,0xc
c001095a:	50                   	push   eax
c001095b:	e8 99 17 00 00       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	89 c3                	mov    ebx,eax
c0010965:	85 c0                	test   eax,eax
c0010967:	74 1d                	je     c0010986 <SysCloseDir(regs*)+0x45>
c0010969:	83 ec 0c             	sub    esp,0xc
c001096c:	50                   	push   eax
c001096d:	e8 c4 7d ff ff       	call   c0008736 <Directory::close()>
c0010972:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010977:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001097a:	83 c4 10             	add    esp,0x10
c001097d:	31 c0                	xor    eax,eax
c001097f:	31 d2                	xor    edx,edx
c0010981:	83 c4 08             	add    esp,0x8
c0010984:	5b                   	pop    ebx
c0010985:	c3                   	ret    
c0010986:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001098b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010990:	83 c4 08             	add    esp,0x8
c0010993:	5b                   	pop    ebx
c0010994:	c3                   	ret    

c0010995 <SysWait(regs*)>:
c0010995:	83 ec 10             	sub    esp,0x10
c0010998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001099c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001099f:	52                   	push   edx
c00109a0:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00109a3:	51                   	push   ecx
c00109a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109a7:	50                   	push   eax
c00109a8:	e8 df 51 00 00       	call   c0015b8c <waitTask(int, int*, int)>
c00109ad:	83 c4 1c             	add    esp,0x1c
c00109b0:	89 c2                	mov    edx,eax
c00109b2:	c1 fa 1f             	sar    edx,0x1f
c00109b5:	c3                   	ret    

c00109b6 <SysNotImpl(regs*)>:
c00109b6:	83 ec 18             	sub    esp,0x18
c00109b9:	68 14 2d 02 c0       	push   0xc0022d14
c00109be:	e8 af e4 ff ff       	call   c000ee72 <KePanic(char const*)>
c00109c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109cd:	83 c4 1c             	add    esp,0x1c
c00109d0:	c3                   	ret    

c00109d1 <SysPanic(regs*)>:
c00109d1:	83 ec 18             	sub    esp,0x18
c00109d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109db:	50                   	push   eax
c00109dc:	e8 91 e4 ff ff       	call   c000ee72 <KePanic(char const*)>
c00109e1:	b8 01 00 00 00       	mov    eax,0x1
c00109e6:	31 d2                	xor    edx,edx
c00109e8:	83 c4 1c             	add    esp,0x1c
c00109eb:	c3                   	ret    

c00109ec <SysRmdir(regs*)>:
c00109ec:	56                   	push   esi
c00109ed:	53                   	push   ebx
c00109ee:	83 ec 20             	sub    esp,0x20
c00109f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00109f5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00109f8:	68 14 01 00 00       	push   0x114
c00109fd:	e8 29 e1 ff ff       	call   c000eb2b <malloc>
c0010a02:	6a 00                	push   0x0
c0010a04:	89 c3                	mov    ebx,eax
c0010a06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a0e:	50                   	push   eax
c0010a0f:	56                   	push   esi
c0010a10:	53                   	push   ebx
c0010a11:	e8 1e 76 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010a16:	83 c4 14             	add    esp,0x14
c0010a19:	53                   	push   ebx
c0010a1a:	e8 ff 78 ff ff       	call   c000831e <File::unlink()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	85 db                	test   ebx,ebx
c0010a24:	74 14                	je     c0010a3a <SysRmdir(regs*)+0x4e>
c0010a26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	53                   	push   ebx
c0010a30:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a33:	83 c4 10             	add    esp,0x10
c0010a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a3a:	85 c0                	test   eax,eax
c0010a3c:	0f 95 c0             	setne  al
c0010a3f:	31 d2                	xor    edx,edx
c0010a41:	0f b6 c0             	movzx  eax,al
c0010a44:	f7 d8                	neg    eax
c0010a46:	83 d2 00             	adc    edx,0x0
c0010a49:	83 c4 14             	add    esp,0x14
c0010a4c:	f7 da                	neg    edx
c0010a4e:	5b                   	pop    ebx
c0010a4f:	5e                   	pop    esi
c0010a50:	c3                   	ret    

c0010a51 <SysUnlink(regs*)>:
c0010a51:	56                   	push   esi
c0010a52:	53                   	push   ebx
c0010a53:	83 ec 20             	sub    esp,0x20
c0010a56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a5a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010a5d:	68 14 01 00 00       	push   0x114
c0010a62:	e8 c4 e0 ff ff       	call   c000eb2b <malloc>
c0010a67:	6a 00                	push   0x0
c0010a69:	89 c3                	mov    ebx,eax
c0010a6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a73:	50                   	push   eax
c0010a74:	56                   	push   esi
c0010a75:	53                   	push   ebx
c0010a76:	e8 b9 75 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010a7b:	83 c4 14             	add    esp,0x14
c0010a7e:	53                   	push   ebx
c0010a7f:	e8 9a 78 ff ff       	call   c000831e <File::unlink()>
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	85 db                	test   ebx,ebx
c0010a89:	74 14                	je     c0010a9f <SysUnlink(regs*)+0x4e>
c0010a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a91:	83 ec 0c             	sub    esp,0xc
c0010a94:	53                   	push   ebx
c0010a95:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a9f:	85 c0                	test   eax,eax
c0010aa1:	0f 95 c0             	setne  al
c0010aa4:	31 d2                	xor    edx,edx
c0010aa6:	0f b6 c0             	movzx  eax,al
c0010aa9:	f7 d8                	neg    eax
c0010aab:	83 d2 00             	adc    edx,0x0
c0010aae:	83 c4 14             	add    esp,0x14
c0010ab1:	f7 da                	neg    edx
c0010ab3:	5b                   	pop    ebx
c0010ab4:	5e                   	pop    esi
c0010ab5:	c3                   	ret    

c0010ab6 <SysGetArgv(regs*)>:
c0010ab6:	83 ec 0c             	sub    esp,0xc
c0010ab9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010abd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010ac0:	85 c0                	test   eax,eax
c0010ac2:	78 2c                	js     c0010af0 <SysGetArgv(regs*)+0x3a>
c0010ac4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010aca:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010acd:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010ad3:	7d 1b                	jge    c0010af0 <SysGetArgv(regs*)+0x3a>
c0010ad5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010adc:	85 c0                	test   eax,eax
c0010ade:	74 18                	je     c0010af8 <SysGetArgv(regs*)+0x42>
c0010ae0:	83 ec 08             	sub    esp,0x8
c0010ae3:	50                   	push   eax
c0010ae4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010ae7:	50                   	push   eax
c0010ae8:	e8 53 fb fe ff       	call   c0000640 <strcpy>
c0010aed:	83 c4 10             	add    esp,0x10
c0010af0:	31 c0                	xor    eax,eax
c0010af2:	31 d2                	xor    edx,edx
c0010af4:	83 c4 0c             	add    esp,0xc
c0010af7:	c3                   	ret    
c0010af8:	b8 01 00 00 00       	mov    eax,0x1
c0010afd:	31 d2                	xor    edx,edx
c0010aff:	83 c4 0c             	add    esp,0xc
c0010b02:	c3                   	ret    

c0010b03 <SysUSleep(regs*)>:
c0010b03:	83 ec 1c             	sub    esp,0x1c
c0010b06:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b0a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010b0d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010b10:	6a 00                	push   0x0
c0010b12:	6a 64                	push   0x64
c0010b14:	52                   	push   edx
c0010b15:	50                   	push   eax
c0010b16:	e8 a9 f8 00 00       	call   c00203c4 <__udivdi3>
c0010b1b:	83 c4 14             	add    esp,0x14
c0010b1e:	50                   	push   eax
c0010b1f:	e8 54 51 00 00       	call   c0015c78 <milliTenthSleep(unsigned int)>
c0010b24:	31 c0                	xor    eax,eax
c0010b26:	31 d2                	xor    edx,edx
c0010b28:	83 c4 1c             	add    esp,0x1c
c0010b2b:	c3                   	ret    

c0010b2c <SysSpawn(regs*)>:
c0010b2c:	56                   	push   esi
c0010b2d:	53                   	push   ebx
c0010b2e:	83 ec 04             	sub    esp,0x4
c0010b31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b35:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010b38:	85 f6                	test   esi,esi
c0010b3a:	75 0a                	jne    c0010b46 <SysSpawn(regs*)+0x1a>
c0010b3c:	83 c4 04             	add    esp,0x4
c0010b3f:	31 c0                	xor    eax,eax
c0010b41:	31 d2                	xor    edx,edx
c0010b43:	5b                   	pop    ebx
c0010b44:	5e                   	pop    esi
c0010b45:	c3                   	ret    
c0010b46:	83 ec 0c             	sub    esp,0xc
c0010b49:	68 24 07 00 00       	push   0x724
c0010b4e:	e8 d8 df ff ff       	call   c000eb2b <malloc>
c0010b53:	83 c4 10             	add    esp,0x10
c0010b56:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010b59:	89 c6                	mov    esi,eax
c0010b5b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b5e:	85 c9                	test   ecx,ecx
c0010b60:	74 39                	je     c0010b9b <SysSpawn(regs*)+0x6f>
c0010b62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b6a:	52                   	push   edx
c0010b6b:	50                   	push   eax
c0010b6c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b6f:	50                   	push   eax
c0010b70:	56                   	push   esi
c0010b71:	e8 5a 48 00 00       	call   c00153d0 <Process::Process(char const*, Process*, char**)>
c0010b76:	83 c4 10             	add    esp,0x10
c0010b79:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010b80:	75 ba                	jne    c0010b3c <SysSpawn(regs*)+0x10>
c0010b82:	83 ec 0c             	sub    esp,0xc
c0010b85:	56                   	push   esi
c0010b86:	e8 c1 4d 00 00       	call   c001594c <Process::createUserThread()>
c0010b8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	89 c2                	mov    edx,eax
c0010b92:	83 c4 04             	add    esp,0x4
c0010b95:	c1 fa 1f             	sar    edx,0x1f
c0010b98:	5b                   	pop    ebx
c0010b99:	5e                   	pop    esi
c0010b9a:	c3                   	ret    
c0010b9b:	31 c0                	xor    eax,eax
c0010b9d:	eb cb                	jmp    c0010b6a <SysSpawn(regs*)+0x3e>

c0010b9f <SysGetEnv(regs*)>:
c0010b9f:	57                   	push   edi
c0010ba0:	56                   	push   esi
c0010ba1:	53                   	push   ebx
c0010ba2:	83 ec 1c             	sub    esp,0x1c
c0010ba5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ba9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bae:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010bb1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010bb4:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010bb7:	51                   	push   ecx
c0010bb8:	e8 a6 d2 ff ff       	call   c000de63 <KeGetProcessTotalEnvCount(Process*)>
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	39 c7                	cmp    edi,eax
c0010bc2:	7c 14                	jl     c0010bd8 <SysGetEnv(regs*)+0x39>
c0010bc4:	85 f6                	test   esi,esi
c0010bc6:	75 0b                	jne    c0010bd3 <SysGetEnv(regs*)+0x34>
c0010bc8:	83 c4 10             	add    esp,0x10
c0010bcb:	31 c0                	xor    eax,eax
c0010bcd:	5b                   	pop    ebx
c0010bce:	31 d2                	xor    edx,edx
c0010bd0:	5e                   	pop    esi
c0010bd1:	5f                   	pop    edi
c0010bd2:	c3                   	ret    
c0010bd3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010bd6:	eb f0                	jmp    c0010bc8 <SysGetEnv(regs*)+0x29>
c0010bd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010bdc:	83 ec 04             	sub    esp,0x4
c0010bdf:	57                   	push   edi
c0010be0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010be6:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010be9:	57                   	push   edi
c0010bea:	50                   	push   eax
c0010beb:	e8 93 d2 ff ff       	call   c000de83 <KeGetProcessEnvPair(Process*, int)>
c0010bf0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010bf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bf7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010bfb:	83 c4 0c             	add    esp,0xc
c0010bfe:	85 d2                	test   edx,edx
c0010c00:	75 23                	jne    c0010c25 <SysGetEnv(regs*)+0x86>
c0010c02:	83 ec 0c             	sub    esp,0xc
c0010c05:	50                   	push   eax
c0010c06:	e8 65 f9 fe ff       	call   c0000570 <strlen>
c0010c0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c0e:	89 c3                	mov    ebx,eax
c0010c10:	e8 5b f9 fe ff       	call   c0000570 <strlen>
c0010c15:	83 c4 10             	add    esp,0x10
c0010c18:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	31 d2                	xor    edx,edx
c0010c21:	5b                   	pop    ebx
c0010c22:	5e                   	pop    esi
c0010c23:	5f                   	pop    edi
c0010c24:	c3                   	ret    
c0010c25:	83 ec 08             	sub    esp,0x8
c0010c28:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c2b:	50                   	push   eax
c0010c2c:	56                   	push   esi
c0010c2d:	e8 0e fa fe ff       	call   c0000640 <strcpy>
c0010c32:	58                   	pop    eax
c0010c33:	5a                   	pop    edx
c0010c34:	68 2e 2d 02 c0       	push   0xc0022d2e
c0010c39:	56                   	push   esi
c0010c3a:	e8 01 fc fe ff       	call   c0000840 <strcat>
c0010c3f:	59                   	pop    ecx
c0010c40:	5b                   	pop    ebx
c0010c41:	57                   	push   edi
c0010c42:	56                   	push   esi
c0010c43:	e8 f8 fb fe ff       	call   c0000840 <strcat>
c0010c48:	83 c4 10             	add    esp,0x10
c0010c4b:	e9 78 ff ff ff       	jmp    c0010bc8 <SysGetEnv(regs*)+0x29>

c0010c50 <SysSetFatAttrib(regs*)>:
c0010c50:	57                   	push   edi
c0010c51:	56                   	push   esi
c0010c52:	53                   	push   ebx
c0010c53:	83 ec 1c             	sub    esp,0x1c
c0010c56:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010c5a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010c5d:	68 14 01 00 00       	push   0x114
c0010c62:	e8 c4 de ff ff       	call   c000eb2b <malloc>
c0010c67:	83 c4 0c             	add    esp,0xc
c0010c6a:	89 c3                	mov    ebx,eax
c0010c6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c74:	50                   	push   eax
c0010c75:	57                   	push   edi
c0010c76:	53                   	push   ebx
c0010c77:	e8 b6 74 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0010c7c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c7f:	83 c4 0c             	add    esp,0xc
c0010c82:	0f b6 d4             	movzx  edx,ah
c0010c85:	0f b6 c0             	movzx  eax,al
c0010c88:	52                   	push   edx
c0010c89:	50                   	push   eax
c0010c8a:	53                   	push   ebx
c0010c8b:	e8 28 77 ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	85 db                	test   ebx,ebx
c0010c95:	74 14                	je     c0010cab <SysSetFatAttrib(regs*)+0x5b>
c0010c97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c9b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010c9d:	83 ec 0c             	sub    esp,0xc
c0010ca0:	53                   	push   ebx
c0010ca1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ca4:	83 c4 10             	add    esp,0x10
c0010ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cab:	85 c0                	test   eax,eax
c0010cad:	0f 95 c0             	setne  al
c0010cb0:	31 d2                	xor    edx,edx
c0010cb2:	0f b6 c0             	movzx  eax,al
c0010cb5:	f7 d8                	neg    eax
c0010cb7:	83 d2 00             	adc    edx,0x0
c0010cba:	83 c4 10             	add    esp,0x10
c0010cbd:	f7 da                	neg    edx
c0010cbf:	5b                   	pop    ebx
c0010cc0:	5e                   	pop    esi
c0010cc1:	5f                   	pop    edi
c0010cc2:	c3                   	ret    

c0010cc3 <SysShutdown(regs*)>:
c0010cc3:	83 ec 1c             	sub    esp,0x1c
c0010cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cca:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010ccd:	85 c9                	test   ecx,ecx
c0010ccf:	74 18                	je     c0010ce9 <SysShutdown(regs*)+0x26>
c0010cd1:	83 f9 01             	cmp    ecx,0x1
c0010cd4:	74 26                	je     c0010cfc <SysShutdown(regs*)+0x39>
c0010cd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ce0:	83 f9 02             	cmp    ecx,0x2
c0010ce3:	74 24                	je     c0010d09 <SysShutdown(regs*)+0x46>
c0010ce5:	83 c4 1c             	add    esp,0x1c
c0010ce8:	c3                   	ret    
c0010ce9:	e8 ee cb ff ff       	call   c000d8dc <KeShutdown()>
c0010cee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cf3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cf8:	83 c4 1c             	add    esp,0x1c
c0010cfb:	c3                   	ret    
c0010cfc:	e8 ff cb ff ff       	call   c000d900 <KeSleep()>
c0010d01:	31 c0                	xor    eax,eax
c0010d03:	31 d2                	xor    edx,edx
c0010d05:	83 c4 1c             	add    esp,0x1c
c0010d08:	c3                   	ret    
c0010d09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010d11:	e8 f6 cb ff ff       	call   c000d90c <KeRestart()>
c0010d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d1e:	eb c5                	jmp    c0010ce5 <SysShutdown(regs*)+0x22>

c0010d20 <SysPipe(regs*)>:
c0010d20:	57                   	push   edi
c0010d21:	56                   	push   esi
c0010d22:	53                   	push   ebx
c0010d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d2d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d30:	6a 20                	push   0x20
c0010d32:	e8 f4 dd ff ff       	call   c000eb2b <malloc>
c0010d37:	89 c3                	mov    ebx,eax
c0010d39:	58                   	pop    eax
c0010d3a:	5a                   	pop    edx
c0010d3b:	68 00 50 00 00       	push   0x5000
c0010d40:	53                   	push   ebx
c0010d41:	e8 ae e9 ff ff       	call   c000f6f4 <Pipe::Pipe(int)>
c0010d46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d49:	e8 ae 10 00 00       	call   c0011dfc <UnixFile::getFileDescriptor()>
c0010d4e:	89 07                	mov    DWORD PTR [edi],eax
c0010d50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d53:	e8 a4 10 00 00       	call   c0011dfc <UnixFile::getFileDescriptor()>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	89 06                	mov    DWORD PTR [esi],eax
c0010d5d:	31 d2                	xor    edx,edx
c0010d5f:	5b                   	pop    ebx
c0010d60:	31 c0                	xor    eax,eax
c0010d62:	5e                   	pop    esi
c0010d63:	5f                   	pop    edi
c0010d64:	c3                   	ret    

c0010d65 <SysGetUnixTime(regs*)>:
c0010d65:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0010d6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d74:	e9 3d 7e ff ff       	jmp    c0008bb6 <Clock::timeInSecondsLocal()>

c0010d79 <string_ends_with(char const*, char const*)>:
c0010d79:	57                   	push   edi
c0010d7a:	56                   	push   esi
c0010d7b:	53                   	push   ebx
c0010d7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	53                   	push   ebx
c0010d88:	e8 e3 f7 fe ff       	call   c0000570 <strlen>
c0010d8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d90:	89 c6                	mov    esi,eax
c0010d92:	e8 d9 f7 fe ff       	call   c0000570 <strlen>
c0010d97:	83 c4 10             	add    esp,0x10
c0010d9a:	39 c6                	cmp    esi,eax
c0010d9c:	7d 06                	jge    c0010da4 <string_ends_with(char const*, char const*)+0x2b>
c0010d9e:	5b                   	pop    ebx
c0010d9f:	31 c0                	xor    eax,eax
c0010da1:	5e                   	pop    esi
c0010da2:	5f                   	pop    edi
c0010da3:	c3                   	ret    
c0010da4:	83 ec 08             	sub    esp,0x8
c0010da7:	29 c6                	sub    esi,eax
c0010da9:	57                   	push   edi
c0010daa:	01 f3                	add    ebx,esi
c0010dac:	53                   	push   ebx
c0010dad:	e8 9e f9 fe ff       	call   c0000750 <strcmp>
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	85 c0                	test   eax,eax
c0010db7:	5b                   	pop    ebx
c0010db8:	0f 94 c0             	sete   al
c0010dbb:	5e                   	pop    esi
c0010dbc:	0f b6 c0             	movzx  eax,al
c0010dbf:	5f                   	pop    edi
c0010dc0:	c3                   	ret    

c0010dc1 <SysOpen(regs*)>:
c0010dc1:	56                   	push   esi
c0010dc2:	53                   	push   ebx
c0010dc3:	81 ec 04 01 00 00    	sub    esp,0x104
c0010dc9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010dd0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dd3:	85 c0                	test   eax,eax
c0010dd5:	0f 84 bc 01 00 00    	je     c0010f97 <SysOpen(regs*)+0x1d6>
c0010ddb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dde:	85 c0                	test   eax,eax
c0010de0:	0f 84 b1 01 00 00    	je     c0010f97 <SysOpen(regs*)+0x1d6>
c0010de6:	6a 00                	push   0x0
c0010de8:	68 30 2d 02 c0       	push   0xc0022d30
c0010ded:	50                   	push   eax
c0010dee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010df2:	56                   	push   esi
c0010df3:	e8 22 70 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010df8:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dfb:	e8 70 f7 fe ff       	call   c0000570 <strlen>
c0010e00:	83 c4 10             	add    esp,0x10
c0010e03:	83 e8 01             	sub    eax,0x1
c0010e06:	74 21                	je     c0010e29 <SysOpen(regs*)+0x68>
c0010e08:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010e0c:	eb 12                	jmp    c0010e20 <SysOpen(regs*)+0x5f>
c0010e0e:	83 fa 3a             	cmp    edx,0x3a
c0010e11:	74 12                	je     c0010e25 <SysOpen(regs*)+0x64>
c0010e13:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e17:	83 e8 01             	sub    eax,0x1
c0010e1a:	74 0d                	je     c0010e29 <SysOpen(regs*)+0x68>
c0010e1c:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010e20:	83 fa 2e             	cmp    edx,0x2e
c0010e23:	75 e9                	jne    c0010e0e <SysOpen(regs*)+0x4d>
c0010e25:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e29:	83 ec 08             	sub    esp,0x8
c0010e2c:	68 34 2d 02 c0       	push   0xc0022d34
c0010e31:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e34:	50                   	push   eax
c0010e35:	e8 3f ff ff ff       	call   c0010d79 <string_ends_with(char const*, char const*)>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	85 c0                	test   eax,eax
c0010e3f:	74 1d                	je     c0010e5e <SysOpen(regs*)+0x9d>
c0010e41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e44:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010e4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e51:	81 c4 04 01 00 00    	add    esp,0x104
c0010e57:	31 c0                	xor    eax,eax
c0010e59:	31 d2                	xor    edx,edx
c0010e5b:	5b                   	pop    ebx
c0010e5c:	5e                   	pop    esi
c0010e5d:	c3                   	ret    
c0010e5e:	83 ec 08             	sub    esp,0x8
c0010e61:	68 39 2d 02 c0       	push   0xc0022d39
c0010e66:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e69:	50                   	push   eax
c0010e6a:	e8 0a ff ff ff       	call   c0010d79 <string_ends_with(char const*, char const*)>
c0010e6f:	83 c4 10             	add    esp,0x10
c0010e72:	85 c0                	test   eax,eax
c0010e74:	75 cb                	jne    c0010e41 <SysOpen(regs*)+0x80>
c0010e76:	83 ec 08             	sub    esp,0x8
c0010e79:	68 35 2d 02 c0       	push   0xc0022d35
c0010e7e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e81:	50                   	push   eax
c0010e82:	e8 c9 f8 fe ff       	call   c0000750 <strcmp>
c0010e87:	83 c4 10             	add    esp,0x10
c0010e8a:	85 c0                	test   eax,eax
c0010e8c:	74 b3                	je     c0010e41 <SysOpen(regs*)+0x80>
c0010e8e:	83 ec 08             	sub    esp,0x8
c0010e91:	68 34 2d 02 c0       	push   0xc0022d34
c0010e96:	56                   	push   esi
c0010e97:	e8 dd fe ff ff       	call   c0010d79 <string_ends_with(char const*, char const*)>
c0010e9c:	83 c4 10             	add    esp,0x10
c0010e9f:	85 c0                	test   eax,eax
c0010ea1:	75 9e                	jne    c0010e41 <SysOpen(regs*)+0x80>
c0010ea3:	83 ec 08             	sub    esp,0x8
c0010ea6:	68 3e 2d 02 c0       	push   0xc0022d3e
c0010eab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eae:	50                   	push   eax
c0010eaf:	e8 c5 fe ff ff       	call   c0010d79 <string_ends_with(char const*, char const*)>
c0010eb4:	83 c4 10             	add    esp,0x10
c0010eb7:	85 c0                	test   eax,eax
c0010eb9:	0f 85 eb 00 00 00    	jne    c0010faa <SysOpen(regs*)+0x1e9>
c0010ebf:	83 ec 08             	sub    esp,0x8
c0010ec2:	68 43 2d 02 c0       	push   0xc0022d43
c0010ec7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eca:	50                   	push   eax
c0010ecb:	e8 a9 fe ff ff       	call   c0010d79 <string_ends_with(char const*, char const*)>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	85 c0                	test   eax,eax
c0010ed5:	0f 85 cf 00 00 00    	jne    c0010faa <SysOpen(regs*)+0x1e9>
c0010edb:	83 ec 08             	sub    esp,0x8
c0010ede:	68 3f 2d 02 c0       	push   0xc0022d3f
c0010ee3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ee6:	51                   	push   ecx
c0010ee7:	e8 64 f8 fe ff       	call   c0000750 <strcmp>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	85 c0                	test   eax,eax
c0010ef1:	0f 84 b3 00 00 00    	je     c0010faa <SysOpen(regs*)+0x1e9>
c0010ef7:	83 ec 08             	sub    esp,0x8
c0010efa:	68 3e 2d 02 c0       	push   0xc0022d3e
c0010eff:	56                   	push   esi
c0010f00:	e8 74 fe ff ff       	call   c0010d79 <string_ends_with(char const*, char const*)>
c0010f05:	83 c4 10             	add    esp,0x10
c0010f08:	85 c0                	test   eax,eax
c0010f0a:	0f 85 9a 00 00 00    	jne    c0010faa <SysOpen(regs*)+0x1e9>
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	68 14 01 00 00       	push   0x114
c0010f18:	e8 0e dc ff ff       	call   c000eb2b <malloc>
c0010f1d:	83 c4 0c             	add    esp,0xc
c0010f20:	89 c6                	mov    esi,eax
c0010f22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f2a:	50                   	push   eax
c0010f2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f2e:	52                   	push   edx
c0010f2f:	56                   	push   esi
c0010f30:	e8 fd 71 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	85 f6                	test   esi,esi
c0010f3a:	74 5b                	je     c0010f97 <SysOpen(regs*)+0x1d6>
c0010f3c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f3f:	0f b6 c2             	movzx  eax,dl
c0010f42:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010f45:	89 d0                	mov    eax,edx
c0010f47:	83 e0 01             	and    eax,0x1
c0010f4a:	f6 c2 02             	test   dl,0x2
c0010f4d:	74 03                	je     c0010f52 <SysOpen(regs*)+0x191>
c0010f4f:	83 c8 02             	or     eax,0x2
c0010f52:	f6 c2 04             	test   dl,0x4
c0010f55:	74 03                	je     c0010f5a <SysOpen(regs*)+0x199>
c0010f57:	83 c8 04             	or     eax,0x4
c0010f5a:	f6 c2 08             	test   dl,0x8
c0010f5d:	74 03                	je     c0010f62 <SysOpen(regs*)+0x1a1>
c0010f5f:	83 c8 0a             	or     eax,0xa
c0010f62:	80 e2 10             	and    dl,0x10
c0010f65:	74 03                	je     c0010f6a <SysOpen(regs*)+0x1a9>
c0010f67:	83 c8 12             	or     eax,0x12
c0010f6a:	83 ec 08             	sub    esp,0x8
c0010f6d:	50                   	push   eax
c0010f6e:	56                   	push   esi
c0010f6f:	e8 dc 71 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	85 c0                	test   eax,eax
c0010f79:	75 1c                	jne    c0010f97 <SysOpen(regs*)+0x1d6>
c0010f7b:	83 ec 0c             	sub    esp,0xc
c0010f7e:	56                   	push   esi
c0010f7f:	e8 78 0e 00 00       	call   c0011dfc <UnixFile::getFileDescriptor()>
c0010f84:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	89 02                	mov    DWORD PTR [edx],eax
c0010f8c:	c1 f8 1f             	sar    eax,0x1f
c0010f8f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f92:	e9 ba fe ff ff       	jmp    c0010e51 <SysOpen(regs*)+0x90>
c0010f97:	81 c4 04 01 00 00    	add    esp,0x104
c0010f9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fa2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fa7:	5b                   	pop    ebx
c0010fa8:	5e                   	pop    esi
c0010fa9:	c3                   	ret    
c0010faa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fad:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010fb3:	e9 92 fe ff ff       	jmp    c0010e4a <SysOpen(regs*)+0x89>

c0010fb8 <KeSystemCall(regs*, void*)>:
c0010fb8:	53                   	push   ebx
c0010fb9:	83 ec 08             	sub    esp,0x8
c0010fbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010fc3:	83 f8 40             	cmp    eax,0x40
c0010fc6:	77 16                	ja     c0010fde <KeSystemCall(regs*, void*)+0x26>
c0010fc8:	8b 14 85 c0 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb040]
c0010fcf:	85 d2                	test   edx,edx
c0010fd1:	74 0b                	je     c0010fde <KeSystemCall(regs*, void*)+0x26>
c0010fd3:	83 ec 0c             	sub    esp,0xc
c0010fd6:	53                   	push   ebx
c0010fd7:	ff d2                	call   edx
c0010fd9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010fdc:	eb 0d                	jmp    c0010feb <KeSystemCall(regs*, void*)+0x33>
c0010fde:	52                   	push   edx
c0010fdf:	52                   	push   edx
c0010fe0:	50                   	push   eax
c0010fe1:	68 48 2d 02 c0       	push   0xc0022d48
c0010fe6:	e8 79 5f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010feb:	83 c4 10             	add    esp,0x10
c0010fee:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010ff3:	31 d2                	xor    edx,edx
c0010ff5:	83 c4 08             	add    esp,0x8
c0010ff8:	5b                   	pop    ebx
c0010ff9:	c3                   	ret    

c0010ffa <VgaText::isAtty()>:
c0010ffa:	b0 01                	mov    al,0x1
c0010ffc:	c3                   	ret    
c0010ffd:	90                   	nop

c0010ffe <VgaText::~VgaText()>:
c0010ffe:	83 ec 0c             	sub    esp,0xc
c0011001:	ba b4 2d 02 c0       	mov    edx,0xc0022db4
c0011006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100a:	89 10                	mov    DWORD PTR [eax],edx
c001100c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011010:	83 ec 0c             	sub    esp,0xc
c0011013:	50                   	push   eax
c0011014:	e8 d1 0f 00 00       	call   c0011fea <UnixFile::~UnixFile()>
c0011019:	83 c4 10             	add    esp,0x10
c001101c:	90                   	nop
c001101d:	83 c4 0c             	add    esp,0xc
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <VgaText::~VgaText()>:
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	83 ec 0c             	sub    esp,0xc
c0011028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102c:	e8 cd ff ff ff       	call   c0010ffe <VgaText::~VgaText()>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	83 ec 08             	sub    esp,0x8
c0011037:	68 84 01 00 00       	push   0x184
c001103c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011040:	e8 5b b8 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 c4 0c             	add    esp,0xc
c001104b:	c3                   	ret    

c001104c <VgaText::read(unsigned long long, void*, int*)>:
c001104c:	83 ec 10             	sub    esp,0x10
c001104f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011053:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105b:	e8 85 8b ff ff       	call   c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>
c0011060:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011064:	89 02                	mov    DWORD PTR [edx],eax
c0011066:	31 c0                	xor    eax,eax
c0011068:	83 c4 1c             	add    esp,0x1c
c001106b:	c3                   	ret    

c001106c <setTerminalScrollLock(bool)>:
c001106c:	c3                   	ret    

c001106d <doTerminalCycle()>:
c001106d:	c3                   	ret    

c001106e <addToTerminalCycle(VgaText*)>:
c001106e:	c3                   	ret    

c001106f <scrollTerminalScrollLock(int)>:
c001106f:	c3                   	ret    

c0011070 <VgaText::updateTitle()>:
c0011070:	c3                   	ret    
c0011071:	90                   	nop

c0011072 <VgaText::load()>:
c0011072:	c3                   	ret    
c0011073:	90                   	nop

c0011074 <VgaText::updateCursor()>:
c0011074:	83 ec 14             	sub    esp,0x14
c0011077:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001107b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001107e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011081:	e8 2e 8c 00 00       	call   c0019cb4 <HalConsoleCursorUpdate(int, int)>
c0011086:	83 c4 1c             	add    esp,0x1c
c0011089:	c3                   	ret    

c001108a <VgaText::doANSI_SGR(int)>:
c001108a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001108e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011092:	85 d2                	test   edx,edx
c0011094:	75 0b                	jne    c00110a1 <VgaText::doANSI_SGR(int)+0x17>
c0011096:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011099:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001109c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001109f:	eb 59                	jmp    c00110fa <VgaText::doANSI_SGR(int)+0x70>
c00110a1:	83 fa 07             	cmp    edx,0x7
c00110a4:	75 0b                	jne    c00110b1 <VgaText::doANSI_SGR(int)+0x27>
c00110a6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00110a9:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00110ac:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00110af:	eb 49                	jmp    c00110fa <VgaText::doANSI_SGR(int)+0x70>
c00110b1:	83 fa 1b             	cmp    edx,0x1b
c00110b4:	74 e0                	je     c0011096 <VgaText::doANSI_SGR(int)+0xc>
c00110b6:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00110b9:	83 f9 07             	cmp    ecx,0x7
c00110bc:	77 09                	ja     c00110c7 <VgaText::doANSI_SGR(int)+0x3d>
c00110be:	8b 14 8d 00 51 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaf00]
c00110c5:	eb 20                	jmp    c00110e7 <VgaText::doANSI_SGR(int)+0x5d>
c00110c7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00110ca:	83 f9 07             	cmp    ecx,0x7
c00110cd:	77 09                	ja     c00110d8 <VgaText::doANSI_SGR(int)+0x4e>
c00110cf:	8b 14 8d 00 51 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaf00]
c00110d6:	eb 22                	jmp    c00110fa <VgaText::doANSI_SGR(int)+0x70>
c00110d8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00110db:	83 f9 07             	cmp    ecx,0x7
c00110de:	77 0b                	ja     c00110eb <VgaText::doANSI_SGR(int)+0x61>
c00110e0:	8b 14 95 b8 4f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb048]
c00110e7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00110ea:	c3                   	ret    
c00110eb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00110ee:	83 f9 07             	cmp    ecx,0x7
c00110f1:	77 0a                	ja     c00110fd <VgaText::doANSI_SGR(int)+0x73>
c00110f3:	8b 14 95 90 4f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb070]
c00110fa:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00110fd:	c3                   	ret    

c00110fe <VgaText::setDefaultBgColour(VgaColour)>:
c00110fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011102:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011106:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011109:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001110c:	c3                   	ret    
c001110d:	90                   	nop

c001110e <VgaText::setDefaultFgColour(VgaColour)>:
c001110e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011116:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011119:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001111c:	c3                   	ret    
c001111d:	90                   	nop

c001111e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001111e:	53                   	push   ebx
c001111f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011123:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011127:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001112b:	51                   	push   ecx
c001112c:	e8 cd ff ff ff       	call   c00110fe <VgaText::setDefaultBgColour(VgaColour)>
c0011131:	58                   	pop    eax
c0011132:	5a                   	pop    edx
c0011133:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011137:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001113b:	5b                   	pop    ebx
c001113c:	eb d0                	jmp    c001110e <VgaText::setDefaultFgColour(VgaColour)>

c001113e <VgaText::setTitleTextColour(VgaColour)>:
c001113e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011146:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0011149:	c3                   	ret    

c001114a <VgaText::setTitleColour(VgaColour)>:
c001114a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001114e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011152:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011155:	c3                   	ret    

c0011156 <VgaText::setTitle(char*)>:
c0011156:	c3                   	ret    
c0011157:	90                   	nop

c0011158 <VgaText::combineColours(unsigned char, unsigned char)>:
c0011158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001115c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0011161:	83 e0 0f             	and    eax,0xf
c0011164:	c1 e2 04             	shl    edx,0x4
c0011167:	09 d0                	or     eax,edx
c0011169:	c3                   	ret    

c001116a <VgaText::scrollScreen()>:
c001116a:	55                   	push   ebp
c001116b:	57                   	push   edi
c001116c:	56                   	push   esi
c001116d:	be 01 00 00 00       	mov    esi,0x1
c0011172:	53                   	push   ebx
c0011173:	83 ec 0c             	sub    esp,0xc
c0011176:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001117a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001117d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011183:	31 ff                	xor    edi,edi
c0011185:	01 e9                	add    ecx,ebp
c0011187:	8a 01                	mov    al,BYTE PTR [ecx]
c0011189:	83 fe 18             	cmp    esi,0x18
c001118c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011192:	75 20                	jne    c00111b4 <VgaText::scrollScreen()+0x4a>
c0011194:	f7 c7 01 00 00 00    	test   edi,0x1
c001119a:	74 15                	je     c00111b1 <VgaText::scrollScreen()+0x47>
c001119c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00111a0:	50                   	push   eax
c00111a1:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00111a5:	50                   	push   eax
c00111a6:	e8 ad ff ff ff       	call   c0011158 <VgaText::combineColours(unsigned char, unsigned char)>
c00111ab:	5a                   	pop    edx
c00111ac:	5a                   	pop    edx
c00111ad:	88 01                	mov    BYTE PTR [ecx],al
c00111af:	eb 03                	jmp    c00111b4 <VgaText::scrollScreen()+0x4a>
c00111b1:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00111b4:	47                   	inc    edi
c00111b5:	41                   	inc    ecx
c00111b6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00111bc:	75 c9                	jne    c0011187 <VgaText::scrollScreen()+0x1d>
c00111be:	46                   	inc    esi
c00111bf:	83 fe 19             	cmp    esi,0x19
c00111c2:	75 b9                	jne    c001117d <VgaText::scrollScreen()+0x13>
c00111c4:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c00111ca:	75 1f                	jne    c00111eb <VgaText::scrollScreen()+0x81>
c00111cc:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00111d0:	74 05                	je     c00111d7 <VgaText::scrollScreen()+0x6d>
c00111d2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00111d5:	eb 14                	jmp    c00111eb <VgaText::scrollScreen()+0x81>
c00111d7:	50                   	push   eax
c00111d8:	50                   	push   eax
c00111d9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00111dd:	50                   	push   eax
c00111de:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00111e2:	50                   	push   eax
c00111e3:	e8 60 89 00 00       	call   c0019b48 <HalConsoleScroll(int, int)>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00111ef:	83 c4 0c             	add    esp,0xc
c00111f2:	5b                   	pop    ebx
c00111f3:	5e                   	pop    esi
c00111f4:	5f                   	pop    edi
c00111f5:	5d                   	pop    ebp
c00111f6:	e9 79 fe ff ff       	jmp    c0011074 <VgaText::updateCursor()>
c00111fb:	90                   	nop

c00111fc <VgaText::combineCharAndColour(char, unsigned char)>:
c00111fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011201:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011206:	c1 e0 08             	shl    eax,0x8
c0011209:	09 d0                	or     eax,edx
c001120b:	c3                   	ret    

c001120c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001120c:	55                   	push   ebp
c001120d:	57                   	push   edi
c001120e:	56                   	push   esi
c001120f:	53                   	push   ebx
c0011210:	83 ec 1c             	sub    esp,0x1c
c0011213:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011217:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001121b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001121f:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0011222:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011226:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001122a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001122e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011232:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0011236:	85 ed                	test   ebp,ebp
c0011238:	75 14                	jne    c001124e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001123a:	c7 44 24 30 5c 2d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022d5c
c0011242:	83 c4 1c             	add    esp,0x1c
c0011245:	5b                   	pop    ebx
c0011246:	5e                   	pop    esi
c0011247:	5f                   	pop    edi
c0011248:	5d                   	pop    ebp
c0011249:	e9 24 dc ff ff       	jmp    c000ee72 <KePanic(char const*)>
c001124e:	50                   	push   eax
c001124f:	50                   	push   eax
c0011250:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011255:	50                   	push   eax
c0011256:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001125b:	50                   	push   eax
c001125c:	e8 f7 fe ff ff       	call   c0011158 <VgaText::combineColours(unsigned char, unsigned char)>
c0011261:	5a                   	pop    edx
c0011262:	0f be c9             	movsx  ecx,cl
c0011265:	5a                   	pop    edx
c0011266:	0f b6 c0             	movzx  eax,al
c0011269:	50                   	push   eax
c001126a:	51                   	push   ecx
c001126b:	e8 8c ff ff ff       	call   c00111fc <VgaText::combineCharAndColour(char, unsigned char)>
c0011270:	6b d6 50             	imul   edx,esi,0x50
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	01 da                	add    edx,ebx
c0011278:	0f b7 d2             	movzx  edx,dx
c001127b:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0011280:	39 3d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,edi
c0011286:	75 28                	jne    c00112b0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0011288:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001128c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0011290:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011294:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011298:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001129c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112a0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00112a4:	83 c4 1c             	add    esp,0x1c
c00112a7:	5b                   	pop    ebx
c00112a8:	5e                   	pop    esi
c00112a9:	5f                   	pop    edi
c00112aa:	5d                   	pop    ebp
c00112ab:	e9 a0 89 00 00       	jmp    c0019c50 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00112b0:	83 c4 1c             	add    esp,0x1c
c00112b3:	5b                   	pop    ebx
c00112b4:	5e                   	pop    esi
c00112b5:	5f                   	pop    edi
c00112b6:	5d                   	pop    ebp
c00112b7:	c3                   	ret    

c00112b8 <VgaText::getCursorX()>:
c00112b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112bc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00112bf:	c3                   	ret    

c00112c0 <VgaText::getCursorY()>:
c00112c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112c4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00112c7:	c3                   	ret    

c00112c8 <VgaText::setCursor(int, int)>:
c00112c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112d0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00112d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00112d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00112da:	e9 95 fd ff ff       	jmp    c0011074 <VgaText::updateCursor()>

c00112df <setActiveTerminal(VgaText*)>:
c00112df:	53                   	push   ebx
c00112e0:	83 ec 08             	sub    esp,0x8
c00112e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112e7:	85 db                	test   ebx,ebx
c00112e9:	75 11                	jne    c00112fc <setActiveTerminal(VgaText*)+0x1d>
c00112eb:	c7 44 24 10 6c 2d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022d6c
c00112f3:	83 c4 08             	add    esp,0x8
c00112f6:	5b                   	pop    ebx
c00112f7:	e9 76 db ff ff       	jmp    c000ee72 <KePanic(char const*)>
c00112fc:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0011301:	85 c0                	test   eax,eax
c0011303:	74 0c                	je     c0011311 <setActiveTerminal(VgaText*)+0x32>
c0011305:	83 ec 0c             	sub    esp,0xc
c0011308:	50                   	push   eax
c0011309:	e8 66 fd ff ff       	call   c0011074 <VgaText::updateCursor()>
c001130e:	83 c4 10             	add    esp,0x10
c0011311:	89 1d 34 ce 02 c0    	mov    DWORD PTR ds:0xc002ce34,ebx
c0011317:	50                   	push   eax
c0011318:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001131b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001131e:	53                   	push   ebx
c001131f:	e8 a4 ff ff ff       	call   c00112c8 <VgaText::setCursor(int, int)>
c0011324:	83 c4 18             	add    esp,0x18
c0011327:	5b                   	pop    ebx
c0011328:	c3                   	ret    
c0011329:	90                   	nop

c001132a <VgaText::clearScreen()>:
c001132a:	57                   	push   edi
c001132b:	56                   	push   esi
c001132c:	31 f6                	xor    esi,esi
c001132e:	53                   	push   ebx
c001132f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011333:	52                   	push   edx
c0011334:	6a 00                	push   0x0
c0011336:	6a 00                	push   0x0
c0011338:	53                   	push   ebx
c0011339:	e8 8a ff ff ff       	call   c00112c8 <VgaText::setCursor(int, int)>
c001133e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001134b:	7e 20                	jle    c001136d <VgaText::clearScreen()+0x43>
c001134d:	31 ff                	xor    edi,edi
c001134f:	50                   	push   eax
c0011350:	50                   	push   eax
c0011351:	56                   	push   esi
c0011352:	57                   	push   edi
c0011353:	47                   	inc    edi
c0011354:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011357:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001135a:	6a 20                	push   0x20
c001135c:	53                   	push   ebx
c001135d:	e8 aa fe ff ff       	call   c001120c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011362:	83 c4 20             	add    esp,0x20
c0011365:	83 ff 50             	cmp    edi,0x50
c0011368:	75 e5                	jne    c001134f <VgaText::clearScreen()+0x25>
c001136a:	46                   	inc    esi
c001136b:	eb db                	jmp    c0011348 <VgaText::clearScreen()+0x1e>
c001136d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011374:	5b                   	pop    ebx
c0011375:	5e                   	pop    esi
c0011376:	5f                   	pop    edi
c0011377:	c3                   	ret    

c0011378 <VgaText::setCursorX(int)>:
c0011378:	83 ec 10             	sub    esp,0x10
c001137b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001137f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011386:	50                   	push   eax
c0011387:	e8 3c ff ff ff       	call   c00112c8 <VgaText::setCursor(int, int)>
c001138c:	83 c4 1c             	add    esp,0x1c
c001138f:	c3                   	ret    

c0011390 <VgaText::setCursorY(int)>:
c0011390:	83 ec 10             	sub    esp,0x10
c0011393:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001139b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001139e:	50                   	push   eax
c001139f:	e8 24 ff ff ff       	call   c00112c8 <VgaText::setCursor(int, int)>
c00113a4:	83 c4 1c             	add    esp,0x1c
c00113a7:	c3                   	ret    

c00113a8 <VgaText::incrementCursor(bool)>:
c00113a8:	56                   	push   esi
c00113a9:	53                   	push   ebx
c00113aa:	51                   	push   ecx
c00113ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00113b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00113b6:	40                   	inc    eax
c00113b7:	83 f8 50             	cmp    eax,0x50
c00113ba:	74 05                	je     c00113c1 <VgaText::incrementCursor(bool)+0x19>
c00113bc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00113bf:	eb 24                	jmp    c00113e5 <VgaText::incrementCursor(bool)+0x3d>
c00113c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00113c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00113cb:	8d 50 01             	lea    edx,[eax+0x1]
c00113ce:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00113d1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00113d4:	75 0f                	jne    c00113e5 <VgaText::incrementCursor(bool)+0x3d>
c00113d6:	83 ec 0c             	sub    esp,0xc
c00113d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00113dc:	53                   	push   ebx
c00113dd:	e8 88 fd ff ff       	call   c001116a <VgaText::scrollScreen()>
c00113e2:	83 c4 10             	add    esp,0x10
c00113e5:	89 f0                	mov    eax,esi
c00113e7:	84 c0                	test   al,al
c00113e9:	74 0c                	je     c00113f7 <VgaText::incrementCursor(bool)+0x4f>
c00113eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00113ef:	5a                   	pop    edx
c00113f0:	5b                   	pop    ebx
c00113f1:	5e                   	pop    esi
c00113f2:	e9 7d fc ff ff       	jmp    c0011074 <VgaText::updateCursor()>
c00113f7:	58                   	pop    eax
c00113f8:	5b                   	pop    ebx
c00113f9:	5e                   	pop    esi
c00113fa:	c3                   	ret    
c00113fb:	90                   	nop

c00113fc <VgaText::decrementCursor(bool)>:
c00113fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011400:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011404:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011407:	85 c0                	test   eax,eax
c0011409:	74 04                	je     c001140f <VgaText::decrementCursor(bool)+0x13>
c001140b:	48                   	dec    eax
c001140c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001140f:	84 c9                	test   cl,cl
c0011411:	74 09                	je     c001141c <VgaText::decrementCursor(bool)+0x20>
c0011413:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011417:	e9 58 fc ff ff       	jmp    c0011074 <VgaText::updateCursor()>
c001141c:	c3                   	ret    
c001141d:	90                   	nop

c001141e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001141e:	53                   	push   ebx
c001141f:	83 ec 08             	sub    esp,0x8
c0011422:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011427:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001142b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001142f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011433:	83 f8 07             	cmp    eax,0x7
c0011436:	75 21                	jne    c0011459 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011438:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011440:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011448:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011450:	83 c4 08             	add    esp,0x8
c0011453:	5b                   	pop    ebx
c0011454:	e9 79 75 ff ff       	jmp    c00089d2 <KeBeep(int, int, bool)>
c0011459:	83 f8 0d             	cmp    eax,0xd
c001145c:	75 09                	jne    c0011467 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001145e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011465:	eb 2d                	jmp    c0011494 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011467:	83 f8 0a             	cmp    eax,0xa
c001146a:	75 31                	jne    c001149d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001146c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001146f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011476:	8d 50 01             	lea    edx,[eax+0x1]
c0011479:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001147c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001147f:	75 0f                	jne    c0011490 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011481:	83 ec 0c             	sub    esp,0xc
c0011484:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011487:	53                   	push   ebx
c0011488:	e8 dd fc ff ff       	call   c001116a <VgaText::scrollScreen()>
c001148d:	83 c4 10             	add    esp,0x10
c0011490:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011494:	83 c4 08             	add    esp,0x8
c0011497:	5b                   	pop    ebx
c0011498:	e9 d7 fb ff ff       	jmp    c0011074 <VgaText::updateCursor()>
c001149d:	83 f8 08             	cmp    eax,0x8
c00114a0:	75 25                	jne    c00114c7 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00114a2:	50                   	push   eax
c00114a3:	50                   	push   eax
c00114a4:	6a 01                	push   0x1
c00114a6:	53                   	push   ebx
c00114a7:	e8 50 ff ff ff       	call   c00113fc <VgaText::decrementCursor(bool)>
c00114ac:	5a                   	pop    edx
c00114ad:	59                   	pop    ecx
c00114ae:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00114b1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00114b4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00114b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00114ba:	6a 20                	push   0x20
c00114bc:	53                   	push   ebx
c00114bd:	e8 4a fd ff ff       	call   c001120c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00114c2:	83 c4 28             	add    esp,0x28
c00114c5:	5b                   	pop    ebx
c00114c6:	c3                   	ret    
c00114c7:	83 ec 08             	sub    esp,0x8
c00114ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00114cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00114d0:	51                   	push   ecx
c00114d1:	52                   	push   edx
c00114d2:	50                   	push   eax
c00114d3:	53                   	push   ebx
c00114d4:	e8 33 fd ff ff       	call   c001120c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00114d9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00114dd:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00114e5:	83 c4 28             	add    esp,0x28
c00114e8:	5b                   	pop    ebx
c00114e9:	e9 ba fe ff ff       	jmp    c00113a8 <VgaText::incrementCursor(bool)>

c00114ee <VgaText::putchar(char)>:
c00114ee:	57                   	push   edi
c00114ef:	56                   	push   esi
c00114f0:	53                   	push   ebx
c00114f1:	83 ec 10             	sub    esp,0x10
c00114f4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114fc:	89 f8                	mov    eax,edi
c00114fe:	0f be c0             	movsx  eax,al
c0011501:	83 f8 5b             	cmp    eax,0x5b
c0011504:	75 18                	jne    c001151e <VgaText::putchar(char)+0x30>
c0011506:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001150a:	74 20                	je     c001152c <VgaText::putchar(char)+0x3e>
c001150c:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011512:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011519:	e9 c1 00 00 00       	jmp    c00115df <VgaText::putchar(char)+0xf1>
c001151e:	83 f8 1b             	cmp    eax,0x1b
c0011521:	75 09                	jne    c001152c <VgaText::putchar(char)+0x3e>
c0011523:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011527:	e9 b3 00 00 00       	jmp    c00115df <VgaText::putchar(char)+0xf1>
c001152c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001152f:	84 c9                	test   cl,cl
c0011531:	0f 84 98 00 00 00    	je     c00115cf <VgaText::putchar(char)+0xe1>
c0011537:	8d 77 c0             	lea    esi,[edi-0x40]
c001153a:	89 f2                	mov    edx,esi
c001153c:	80 fa 3e             	cmp    dl,0x3e
c001153f:	77 78                	ja     c00115b9 <VgaText::putchar(char)+0xcb>
c0011541:	83 f8 6d             	cmp    eax,0x6d
c0011544:	75 47                	jne    c001158d <VgaText::putchar(char)+0x9f>
c0011546:	31 f6                	xor    esi,esi
c0011548:	31 d2                	xor    edx,edx
c001154a:	31 c0                	xor    eax,eax
c001154c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001154f:	7e 2d                	jle    c001157e <VgaText::putchar(char)+0x90>
c0011551:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011556:	83 fa 3b             	cmp    edx,0x3b
c0011559:	75 17                	jne    c0011572 <VgaText::putchar(char)+0x84>
c001155b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001155f:	50                   	push   eax
c0011560:	53                   	push   ebx
c0011561:	e8 24 fb ff ff       	call   c001108a <VgaText::doANSI_SGR(int)>
c0011566:	59                   	pop    ecx
c0011567:	31 d2                	xor    edx,edx
c0011569:	5f                   	pop    edi
c001156a:	31 c0                	xor    eax,eax
c001156c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011570:	eb 09                	jmp    c001157b <VgaText::putchar(char)+0x8d>
c0011572:	6b c0 0a             	imul   eax,eax,0xa
c0011575:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011579:	88 ca                	mov    dl,cl
c001157b:	46                   	inc    esi
c001157c:	eb ce                	jmp    c001154c <VgaText::putchar(char)+0x5e>
c001157e:	84 d2                	test   dl,dl
c0011580:	74 2f                	je     c00115b1 <VgaText::putchar(char)+0xc3>
c0011582:	50                   	push   eax
c0011583:	53                   	push   ebx
c0011584:	e8 01 fb ff ff       	call   c001108a <VgaText::doANSI_SGR(int)>
c0011589:	58                   	pop    eax
c001158a:	5a                   	pop    edx
c001158b:	eb 24                	jmp    c00115b1 <VgaText::putchar(char)+0xc3>
c001158d:	83 f8 4a             	cmp    eax,0x4a
c0011590:	75 1f                	jne    c00115b1 <VgaText::putchar(char)+0xc3>
c0011592:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011596:	75 19                	jne    c00115b1 <VgaText::putchar(char)+0xc3>
c0011598:	83 ec 0c             	sub    esp,0xc
c001159b:	53                   	push   ebx
c001159c:	e8 89 fd ff ff       	call   c001132a <VgaText::clearScreen()>
c00115a1:	83 c4 0c             	add    esp,0xc
c00115a4:	6a 00                	push   0x0
c00115a6:	6a 00                	push   0x0
c00115a8:	53                   	push   ebx
c00115a9:	e8 1a fd ff ff       	call   c00112c8 <VgaText::setCursor(int, int)>
c00115ae:	83 c4 10             	add    esp,0x10
c00115b1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00115b7:	eb 26                	jmp    c00115df <VgaText::putchar(char)+0xf1>
c00115b9:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00115bc:	83 f8 0e             	cmp    eax,0xe
c00115bf:	7f 1e                	jg     c00115df <VgaText::putchar(char)+0xf1>
c00115c1:	8d 48 01             	lea    ecx,[eax+0x1]
c00115c4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00115c7:	89 f9                	mov    ecx,edi
c00115c9:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00115cd:	eb 10                	jmp    c00115df <VgaText::putchar(char)+0xf1>
c00115cf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00115d2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00115d5:	50                   	push   eax
c00115d6:	53                   	push   ebx
c00115d7:	e8 42 fe ff ff       	call   c001141e <VgaText::putchar(char, VgaColour, VgaColour)>
c00115dc:	83 c4 10             	add    esp,0x10
c00115df:	83 c4 10             	add    esp,0x10
c00115e2:	5b                   	pop    ebx
c00115e3:	5e                   	pop    esi
c00115e4:	5f                   	pop    edi
c00115e5:	c3                   	ret    

c00115e6 <VgaText::putx(unsigned int)>:
c00115e6:	57                   	push   edi
c00115e7:	b9 11 00 00 00       	mov    ecx,0x11
c00115ec:	56                   	push   esi
c00115ed:	be 8f 17 02 c0       	mov    esi,0xc002178f
c00115f2:	53                   	push   ebx
c00115f3:	83 ec 20             	sub    esp,0x20
c00115f6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00115fa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00115fe:	fc                   	cld    
c00115ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011601:	be 08 00 00 00       	mov    esi,0x8
c0011606:	50                   	push   eax
c0011607:	50                   	push   eax
c0011608:	89 d8                	mov    eax,ebx
c001160a:	c1 e3 04             	shl    ebx,0x4
c001160d:	c1 e8 1c             	shr    eax,0x1c
c0011610:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011615:	50                   	push   eax
c0011616:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001161a:	e8 cf fe ff ff       	call   c00114ee <VgaText::putchar(char)>
c001161f:	83 c4 10             	add    esp,0x10
c0011622:	4e                   	dec    esi
c0011623:	75 e1                	jne    c0011606 <VgaText::putx(unsigned int)+0x20>
c0011625:	83 c4 20             	add    esp,0x20
c0011628:	5b                   	pop    ebx
c0011629:	5e                   	pop    esi
c001162a:	5f                   	pop    edi
c001162b:	c3                   	ret    

c001162c <VgaText::puts(char const*)>:
c001162c:	53                   	push   ebx
c001162d:	83 ec 08             	sub    esp,0x8
c0011630:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011634:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011637:	85 c0                	test   eax,eax
c0011639:	74 12                	je     c001164d <VgaText::puts(char const*)+0x21>
c001163b:	43                   	inc    ebx
c001163c:	51                   	push   ecx
c001163d:	51                   	push   ecx
c001163e:	50                   	push   eax
c001163f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011643:	e8 a6 fe ff ff       	call   c00114ee <VgaText::putchar(char)>
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	eb e7                	jmp    c0011634 <VgaText::puts(char const*)+0x8>
c001164d:	83 c4 08             	add    esp,0x8
c0011650:	5b                   	pop    ebx
c0011651:	c3                   	ret    

c0011652 <VgaText::write(unsigned long long, void*, int*)>:
c0011652:	55                   	push   ebp
c0011653:	57                   	push   edi
c0011654:	56                   	push   esi
c0011655:	53                   	push   ebx
c0011656:	83 ec 0c             	sub    esp,0xc
c0011659:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001165d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011661:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011665:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001166c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001166f:	39 eb                	cmp    ebx,ebp
c0011671:	74 13                	je     c0011686 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011673:	43                   	inc    ebx
c0011674:	50                   	push   eax
c0011675:	50                   	push   eax
c0011676:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001167a:	50                   	push   eax
c001167b:	56                   	push   esi
c001167c:	e8 6d fe ff ff       	call   c00114ee <VgaText::putchar(char)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	eb e9                	jmp    c001166f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011686:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001168d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011691:	89 38                	mov    DWORD PTR [eax],edi
c0011693:	83 c4 0c             	add    esp,0xc
c0011696:	31 c0                	xor    eax,eax
c0011698:	5b                   	pop    ebx
c0011699:	5e                   	pop    esi
c001169a:	5f                   	pop    edi
c001169b:	5d                   	pop    ebp
c001169c:	c3                   	ret    
c001169d:	90                   	nop

c001169e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001169e:	55                   	push   ebp
c001169f:	57                   	push   edi
c00116a0:	56                   	push   esi
c00116a1:	53                   	push   ebx
c00116a2:	83 ec 1c             	sub    esp,0x1c
c00116a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00116ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116b1:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00116b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00116b8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00116bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116c0:	85 db                	test   ebx,ebx
c00116c2:	75 14                	jne    c00116d8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00116c4:	c7 44 24 30 7a 2d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022d7a
c00116cc:	83 c4 1c             	add    esp,0x1c
c00116cf:	5b                   	pop    ebx
c00116d0:	5e                   	pop    esi
c00116d1:	5f                   	pop    edi
c00116d2:	5d                   	pop    ebp
c00116d3:	e9 9a d7 ff ff       	jmp    c000ee72 <KePanic(char const*)>
c00116d8:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00116df:	50                   	push   eax
c00116e0:	50                   	push   eax
c00116e1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00116e6:	50                   	push   eax
c00116e7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00116ec:	50                   	push   eax
c00116ed:	e8 66 fa ff ff       	call   c0011158 <VgaText::combineColours(unsigned char, unsigned char)>
c00116f2:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00116fc:	0f b6 e8             	movzx  ebp,al
c00116ff:	0f b7 c9             	movzx  ecx,cx
c0011702:	01 c9                	add    ecx,ecx
c0011704:	01 cb                	add    ebx,ecx
c0011706:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011709:	85 c0                	test   eax,eax
c001170b:	0f 84 ef 00 00 00    	je     c0011800 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0011711:	83 f8 0d             	cmp    eax,0xd
c0011714:	75 0c                	jne    c0011722 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0011716:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001171d:	e9 d8 00 00 00       	jmp    c00117fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011722:	83 f8 0a             	cmp    eax,0xa
c0011725:	75 44                	jne    c001176b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0011727:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001172a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011731:	8d 48 01             	lea    ecx,[eax+0x1]
c0011734:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0011737:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c001173a:	75 0f                	jne    c001174b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c001173c:	83 ec 0c             	sub    esp,0xc
c001173f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0011742:	57                   	push   edi
c0011743:	e8 22 fa ff ff       	call   c001116a <VgaText::scrollScreen()>
c0011748:	83 c4 10             	add    esp,0x10
c001174b:	83 ec 0c             	sub    esp,0xc
c001174e:	57                   	push   edi
c001174f:	e8 20 f9 ff ff       	call   c0011074 <VgaText::updateCursor()>
c0011754:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011758:	83 c4 10             	add    esp,0x10
c001175b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001175e:	0f b7 db             	movzx  ebx,bx
c0011761:	01 db                	add    ebx,ebx
c0011763:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011766:	e9 8f 00 00 00       	jmp    c00117fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001176b:	83 f8 08             	cmp    eax,0x8
c001176e:	75 34                	jne    c00117a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0011770:	51                   	push   ecx
c0011771:	51                   	push   ecx
c0011772:	6a 01                	push   0x1
c0011774:	57                   	push   edi
c0011775:	e8 82 fc ff ff       	call   c00113fc <VgaText::decrementCursor(bool)>
c001177a:	5b                   	pop    ebx
c001177b:	58                   	pop    eax
c001177c:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001177f:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0011782:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0011785:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0011788:	6a 20                	push   0x20
c001178a:	57                   	push   edi
c001178b:	e8 7c fa ff ff       	call   c001120c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011790:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011794:	83 c4 20             	add    esp,0x20
c0011797:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001179a:	0f b7 db             	movzx  ebx,bx
c001179d:	01 db                	add    ebx,ebx
c001179f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00117a2:	eb 56                	jmp    c00117fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00117a4:	52                   	push   edx
c00117a5:	52                   	push   edx
c00117a6:	55                   	push   ebp
c00117a7:	50                   	push   eax
c00117a8:	e8 4f fa ff ff       	call   c00111fc <VgaText::combineCharAndColour(char, unsigned char)>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	66 89 03             	mov    WORD PTR [ebx],ax
c00117b3:	39 3d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,edi
c00117b9:	75 1d                	jne    c00117d8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00117bb:	83 ec 0c             	sub    esp,0xc
c00117be:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00117c1:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00117c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117cc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00117cf:	50                   	push   eax
c00117d0:	e8 7b 84 00 00       	call   c0019c50 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00117d5:	83 c4 20             	add    esp,0x20
c00117d8:	83 c3 02             	add    ebx,0x2
c00117db:	50                   	push   eax
c00117dc:	50                   	push   eax
c00117dd:	6a 00                	push   0x0
c00117df:	57                   	push   edi
c00117e0:	e8 c3 fb ff ff       	call   c00113a8 <VgaText::incrementCursor(bool)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00117ec:	75 0c                	jne    c00117fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00117ee:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00117f2:	0f b7 db             	movzx  ebx,bx
c00117f5:	01 db                	add    ebx,ebx
c00117f7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00117fa:	46                   	inc    esi
c00117fb:	e9 06 ff ff ff       	jmp    c0011706 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0011800:	83 ec 0c             	sub    esp,0xc
c0011803:	57                   	push   edi
c0011804:	e8 6b f8 ff ff       	call   c0011074 <VgaText::updateCursor()>
c0011809:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0011810:	83 c4 2c             	add    esp,0x2c
c0011813:	5b                   	pop    ebx
c0011814:	5e                   	pop    esi
c0011815:	5f                   	pop    edi
c0011816:	5d                   	pop    ebp
c0011817:	c3                   	ret    

c0011818 <VgaText::VgaText(char const*)>:
c0011818:	56                   	push   esi
c0011819:	53                   	push   ebx
c001181a:	83 ec 04             	sub    esp,0x4
c001181d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011821:	83 ec 08             	sub    esp,0x8
c0011824:	6a 00                	push   0x0
c0011826:	50                   	push   eax
c0011827:	e8 d8 05 00 00       	call   c0011e04 <UnixFile::UnixFile(int)>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	ba b4 2d 02 c0       	mov    edx,0xc0022db4
c0011834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011838:	89 10                	mov    DWORD PTR [eax],edx
c001183a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001183e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011849:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011854:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011864:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001186b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011885:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001188c:	83 ec 0c             	sub    esp,0xc
c001188f:	68 8a 2d 02 c0       	push   0xc0022d8a
c0011894:	e8 cb 56 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011899:	83 c4 10             	add    esp,0x10
c001189c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00118a7:	83 ec 0c             	sub    esp,0xc
c00118aa:	6a 01                	push   0x1
c00118ac:	e8 b4 09 00 00       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c00118b1:	83 c4 10             	add    esp,0x10
c00118b4:	89 c2                	mov    edx,eax
c00118b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00118bd:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c00118c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118ca:	89 c6                	mov    esi,eax
c00118cc:	e8 95 d7 ff ff       	call   c000f066 <Phys::allocatePage()>
c00118d1:	68 05 0c 00 00       	push   0xc05
c00118d6:	56                   	push   esi
c00118d7:	50                   	push   eax
c00118d8:	53                   	push   ebx
c00118d9:	e8 6a 10 00 00       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118e8:	83 ec 04             	sub    esp,0x4
c00118eb:	68 a0 0f 00 00       	push   0xfa0
c00118f0:	6a 00                	push   0x0
c00118f2:	50                   	push   eax
c00118f3:	e8 f8 eb fe ff       	call   c00004f0 <memset>
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	83 ec 04             	sub    esp,0x4
c00118fe:	6a 00                	push   0x0
c0011900:	6a 07                	push   0x7
c0011902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011906:	e8 13 f8 ff ff       	call   c001111e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	83 ec 04             	sub    esp,0x4
c0011911:	6a 00                	push   0x0
c0011913:	6a 00                	push   0x0
c0011915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011919:	e8 aa f9 ff ff       	call   c00112c8 <VgaText::setCursor(int, int)>
c001191e:	83 c4 10             	add    esp,0x10
c0011921:	83 ec 0c             	sub    esp,0xc
c0011924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011928:	e8 fd f9 ff ff       	call   c001132a <VgaText::clearScreen()>
c001192d:	83 c4 10             	add    esp,0x10
c0011930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011934:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001193c:	05 82 00 00 00       	add    eax,0x82
c0011941:	83 ec 04             	sub    esp,0x4
c0011944:	68 80 00 00 00       	push   0x80
c0011949:	6a 00                	push   0x0
c001194b:	50                   	push   eax
c001194c:	e8 9f eb fe ff       	call   c00004f0 <memset>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011958:	05 02 01 00 00       	add    eax,0x102
c001195d:	83 ec 04             	sub    esp,0x4
c0011960:	68 80 00 00 00       	push   0x80
c0011965:	6a 00                	push   0x0
c0011967:	50                   	push   eax
c0011968:	e8 83 eb fe ff       	call   c00004f0 <memset>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	90                   	nop
c0011971:	83 c4 04             	add    esp,0x4
c0011974:	5b                   	pop    ebx
c0011975:	5e                   	pop    esi
c0011976:	c3                   	ret    
c0011977:	90                   	nop

c0011978 <VgaText::receiveKey(unsigned char)>:
c0011978:	55                   	push   ebp
c0011979:	57                   	push   edi
c001197a:	56                   	push   esi
c001197b:	53                   	push   ebx
c001197c:	83 ec 2c             	sub    esp,0x2c
c001197f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0011983:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011987:	89 ef                	mov    edi,ebp
c0011989:	81 e7 ff 00 00 00    	and    edi,0xff
c001198f:	0f 84 66 01 00 00    	je     c0011afb <VgaText::receiveKey(unsigned char)+0x183>
c0011995:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001199b:	83 ff 08             	cmp    edi,0x8
c001199e:	75 73                	jne    c0011a13 <VgaText::receiveKey(unsigned char)+0x9b>
c00119a0:	83 ec 0c             	sub    esp,0xc
c00119a3:	56                   	push   esi
c00119a4:	e8 c7 eb fe ff       	call   c0000570 <strlen>
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	85 c0                	test   eax,eax
c00119ae:	0f 84 02 01 00 00    	je     c0011ab6 <VgaText::receiveKey(unsigned char)+0x13e>
c00119b4:	50                   	push   eax
c00119b5:	50                   	push   eax
c00119b6:	6a 08                	push   0x8
c00119b8:	53                   	push   ebx
c00119b9:	e8 30 fb ff ff       	call   c00114ee <VgaText::putchar(char)>
c00119be:	89 34 24             	mov    DWORD PTR [esp],esi
c00119c1:	e8 aa eb fe ff       	call   c0000570 <strlen>
c00119c6:	83 c4 10             	add    esp,0x10
c00119c9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00119d1:	83 fa 0d             	cmp    edx,0xd
c00119d4:	89 d0                	mov    eax,edx
c00119d6:	0f 95 c1             	setne  cl
c00119d9:	83 fa 1f             	cmp    edx,0x1f
c00119dc:	0f 9e c2             	setle  dl
c00119df:	0f b6 d2             	movzx  edx,dl
c00119e2:	85 ca                	test   edx,ecx
c00119e4:	74 17                	je     c00119fd <VgaText::receiveKey(unsigned char)+0x85>
c00119e6:	83 e8 08             	sub    eax,0x8
c00119e9:	3c 02                	cmp    al,0x2
c00119eb:	76 10                	jbe    c00119fd <VgaText::receiveKey(unsigned char)+0x85>
c00119ed:	55                   	push   ebp
c00119ee:	55                   	push   ebp
c00119ef:	68 9d 2d 02 c0       	push   0xc0022d9d
c00119f4:	53                   	push   ebx
c00119f5:	e8 32 fc ff ff       	call   c001162c <VgaText::puts(char const*)>
c00119fa:	83 c4 10             	add    esp,0x10
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	56                   	push   esi
c0011a01:	e8 6a eb fe ff       	call   c0000570 <strlen>
c0011a06:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011a0e:	e9 a0 00 00 00       	jmp    c0011ab3 <VgaText::receiveKey(unsigned char)+0x13b>
c0011a13:	83 ec 0c             	sub    esp,0xc
c0011a16:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0011a1c:	50                   	push   eax
c0011a1d:	e8 4e eb fe ff       	call   c0000570 <strlen>
c0011a22:	89 34 24             	mov    DWORD PTR [esp],esi
c0011a25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011a29:	e8 42 eb fe ff       	call   c0000570 <strlen>
c0011a2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a32:	83 c4 10             	add    esp,0x10
c0011a35:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011a39:	3d 80 00 00 00       	cmp    eax,0x80
c0011a3e:	0f 87 b7 00 00 00    	ja     c0011afb <VgaText::receiveKey(unsigned char)+0x183>
c0011a44:	8d 45 ff             	lea    eax,[ebp-0x1]
c0011a47:	8d 55 f7             	lea    edx,[ebp-0x9]
c0011a4a:	3c 1e                	cmp    al,0x1e
c0011a4c:	0f 96 c0             	setbe  al
c0011a4f:	80 fa 01             	cmp    dl,0x1
c0011a52:	0f 97 c2             	seta   dl
c0011a55:	0f b6 d2             	movzx  edx,dl
c0011a58:	85 c2                	test   edx,eax
c0011a5a:	74 2e                	je     c0011a8a <VgaText::receiveKey(unsigned char)+0x112>
c0011a5c:	83 ff 0d             	cmp    edi,0xd
c0011a5f:	74 29                	je     c0011a8a <VgaText::receiveKey(unsigned char)+0x112>
c0011a61:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011a64:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011a67:	68 a3 2d 02 c0       	push   0xc0022da3
c0011a6c:	53                   	push   ebx
c0011a6d:	e8 2c fc ff ff       	call   c001169e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a72:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011a75:	8d 45 40             	lea    eax,[ebp+0x40]
c0011a78:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011a7b:	0f b6 c0             	movzx  eax,al
c0011a7e:	50                   	push   eax
c0011a7f:	53                   	push   ebx
c0011a80:	e8 99 f9 ff ff       	call   c001141e <VgaText::putchar(char, VgaColour, VgaColour)>
c0011a85:	83 c4 20             	add    esp,0x20
c0011a88:	eb 11                	jmp    c0011a9b <VgaText::receiveKey(unsigned char)+0x123>
c0011a8a:	89 e8                	mov    eax,ebp
c0011a8c:	51                   	push   ecx
c0011a8d:	0f be c0             	movsx  eax,al
c0011a90:	51                   	push   ecx
c0011a91:	50                   	push   eax
c0011a92:	53                   	push   ebx
c0011a93:	e8 56 fa ff ff       	call   c00114ee <VgaText::putchar(char)>
c0011a98:	83 c4 10             	add    esp,0x10
c0011a9b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011aa0:	89 e8                	mov    eax,ebp
c0011aa2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011aa6:	52                   	push   edx
c0011aa7:	52                   	push   edx
c0011aa8:	8d 44 24 26          	lea    eax,[esp+0x26]
c0011aac:	50                   	push   eax
c0011aad:	56                   	push   esi
c0011aae:	e8 8d ed fe ff       	call   c0000840 <strcat>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0011abc:	b0 01                	mov    al,0x1
c0011abe:	83 ff 1c             	cmp    edi,0x1c
c0011ac1:	77 0e                	ja     c0011ad1 <VgaText::receiveKey(unsigned char)+0x159>
c0011ac3:	b8 08 04 00 10       	mov    eax,0x10000408
c0011ac8:	89 f9                	mov    ecx,edi
c0011aca:	d3 e8                	shr    eax,cl
c0011acc:	f7 d0                	not    eax
c0011ace:	83 e0 01             	and    eax,0x1
c0011ad1:	84 c0                	test   al,al
c0011ad3:	74 04                	je     c0011ad9 <VgaText::receiveKey(unsigned char)+0x161>
c0011ad5:	84 d2                	test   dl,dl
c0011ad7:	74 22                	je     c0011afb <VgaText::receiveKey(unsigned char)+0x183>
c0011ad9:	81 c3 02 01 00 00    	add    ebx,0x102
c0011adf:	50                   	push   eax
c0011ae0:	50                   	push   eax
c0011ae1:	56                   	push   esi
c0011ae2:	53                   	push   ebx
c0011ae3:	e8 58 ed fe ff       	call   c0000840 <strcat>
c0011ae8:	83 c4 0c             	add    esp,0xc
c0011aeb:	68 80 00 00 00       	push   0x80
c0011af0:	6a 00                	push   0x0
c0011af2:	56                   	push   esi
c0011af3:	e8 f8 e9 fe ff       	call   c00004f0 <memset>
c0011af8:	83 c4 10             	add    esp,0x10
c0011afb:	83 c4 2c             	add    esp,0x2c
c0011afe:	5b                   	pop    ebx
c0011aff:	5e                   	pop    esi
c0011b00:	5f                   	pop    edi
c0011b01:	5d                   	pop    ebp
c0011b02:	c3                   	ret    
c0011b03:	90                   	nop

c0011b04 <VgaText::doUpdate()>:
c0011b04:	c3                   	ret    
c0011b05:	66 90                	xchg   ax,ax
c0011b07:	90                   	nop

c0011b08 <TSS::TSS()>:
c0011b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b13:	90                   	nop
c0011b14:	c3                   	ret    
c0011b15:	90                   	nop
c0011b16:	66 90                	xchg   ax,ax

c0011b18 <TSS::setESP(unsigned long)>:
c0011b18:	55                   	push   ebp
c0011b19:	89 e5                	mov    ebp,esp
c0011b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b21:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011b24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011b27:	90                   	nop
c0011b28:	5d                   	pop    ebp
c0011b29:	c3                   	ret    
c0011b2a:	66 90                	xchg   ax,ax

c0011b2c <TSS::flush()>:
c0011b2c:	55                   	push   ebp
c0011b2d:	89 e5                	mov    ebp,esp
c0011b2f:	83 ec 10             	sub    esp,0x10
c0011b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b37:	83 c8 03             	or     eax,0x3
c0011b3a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011b3e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011b42:	66 89 d0             	mov    ax,dx
c0011b45:	0f 00 d8             	ltr    ax
c0011b48:	90                   	nop
c0011b49:	c9                   	leave  
c0011b4a:	c3                   	ret    
c0011b4b:	90                   	nop

c0011b4c <TSS::setup(unsigned long, unsigned long)>:
c0011b4c:	55                   	push   ebp
c0011b4d:	89 e5                	mov    ebp,esp
c0011b4f:	83 ec 18             	sub    esp,0x18
c0011b52:	83 ec 0c             	sub    esp,0xc
c0011b55:	6a 68                	push   0x68
c0011b57:	e8 cf cf ff ff       	call   c000eb2b <malloc>
c0011b5c:	83 c4 10             	add    esp,0x10
c0011b5f:	89 c2                	mov    edx,eax
c0011b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b6d:	83 ec 08             	sub    esp,0x8
c0011b70:	50                   	push   eax
c0011b71:	68 c8 2d 02 c0       	push   0xc0022dc8
c0011b76:	e8 e9 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b7b:	83 c4 10             	add    esp,0x10
c0011b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b84:	83 ec 04             	sub    esp,0x4
c0011b87:	6a 68                	push   0x68
c0011b89:	6a 00                	push   0x0
c0011b8b:	50                   	push   eax
c0011b8c:	e8 5f e9 fe ff       	call   c00004f0 <memset>
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b9a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ba6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011baf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011bb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bbe:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bca:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bd6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011be2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011beb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bee:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bfa:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c06:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011c09:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011c0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011c15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c1e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011c25:	83 ec 0c             	sub    esp,0xc
c0011c28:	68 df 2d 02 c0       	push   0xc0022ddf
c0011c2d:	e8 32 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c3b:	0f 20 da             	mov    edx,cr3
c0011c3e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011c41:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c44:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011c47:	83 ec 0c             	sub    esp,0xc
c0011c4a:	68 e2 2d 02 c0       	push   0xc0022de2
c0011c4f:	e8 10 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011c54:	83 c4 10             	add    esp,0x10
c0011c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c5d:	83 ec 08             	sub    esp,0x8
c0011c60:	50                   	push   eax
c0011c61:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011c64:	50                   	push   eax
c0011c65:	e8 10 c6 ff ff       	call   c000e27a <GDTEntry::setBase(unsigned int)>
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	83 ec 08             	sub    esp,0x8
c0011c70:	6a 68                	push   0x68
c0011c72:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011c75:	50                   	push   eax
c0011c76:	e8 1b c6 ff ff       	call   c000e296 <GDTEntry::setLimit(unsigned int)>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011c82:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011c85:	83 e0 0f             	and    eax,0xf
c0011c88:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011c8b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011c8e:	83 c8 40             	or     eax,0x40
c0011c91:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011c94:	83 ec 0c             	sub    esp,0xc
c0011c97:	68 e5 2d 02 c0       	push   0xc0022de5
c0011c9c:	e8 c3 52 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011ca1:	83 c4 10             	add    esp,0x10
c0011ca4:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011ca9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011caf:	83 ec 08             	sub    esp,0x8
c0011cb2:	50                   	push   eax
c0011cb3:	68 e8 2d 02 c0       	push   0xc0022de8
c0011cb8:	e8 a7 52 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011cbd:	83 c4 10             	add    esp,0x10
c0011cc0:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011cc5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ccb:	05 64 01 00 00       	add    eax,0x164
c0011cd0:	83 ec 04             	sub    esp,0x4
c0011cd3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011cd6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011cd9:	50                   	push   eax
c0011cda:	e8 eb c5 ff ff       	call   c000e2ca <GDT::addEntry(GDTEntry)>
c0011cdf:	83 c4 10             	add    esp,0x10
c0011ce2:	89 c2                	mov    edx,eax
c0011ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ce7:	89 10                	mov    DWORD PTR [eax],edx
c0011ce9:	83 ec 0c             	sub    esp,0xc
c0011cec:	68 fd 2d 02 c0       	push   0xc0022dfd
c0011cf1:	e8 6e 52 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011cfe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d04:	05 64 01 00 00       	add    eax,0x164
c0011d09:	83 ec 0c             	sub    esp,0xc
c0011d0c:	50                   	push   eax
c0011d0d:	e8 e2 c5 ff ff       	call   c000e2f4 <GDT::flush()>
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	83 ec 0c             	sub    esp,0xc
c0011d18:	68 00 2e 02 c0       	push   0xc0022e00
c0011d1d:	e8 42 52 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011d22:	83 c4 10             	add    esp,0x10
c0011d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2a:	c9                   	leave  
c0011d2b:	c3                   	ret    

c0011d2c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d37:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011d3c:	75 08                	jne    c0011d46 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011d3e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011d44:	eb 38                	jmp    c0011d7e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011d46:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011d4b:	75 17                	jne    c0011d64 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011d4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011d5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d61:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011d64:	89 c1                	mov    ecx,eax
c0011d66:	83 e1 fd             	and    ecx,0xfffffffd
c0011d69:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011d6f:	74 cd                	je     c0011d3e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011d71:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011d76:	83 e0 ef             	and    eax,0xffffffef
c0011d79:	83 f8 08             	cmp    eax,0x8
c0011d7c:	76 c0                	jbe    c0011d3e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011d7e:	31 c0                	xor    eax,eax
c0011d80:	c3                   	ret    
c0011d81:	90                   	nop

c0011d82 <ReservedFilename::isAtty()>:
c0011d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d86:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011d89:	31 c0                	xor    eax,eax
c0011d8b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011d91:	74 09                	je     c0011d9c <ReservedFilename::isAtty()+0x1a>
c0011d93:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011d99:	0f 94 c0             	sete   al
c0011d9c:	c3                   	ret    
c0011d9d:	90                   	nop

c0011d9e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011da6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011da9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011dad:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011db2:	75 08                	jne    c0011dbc <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011db4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011dba:	eb 3d                	jmp    c0011df9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011dbc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011dc1:	75 17                	jne    c0011dda <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dcb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011dd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dd7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011dda:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ddf:	75 04                	jne    c0011de5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011de1:	89 0a                	mov    DWORD PTR [edx],ecx
c0011de3:	eb 14                	jmp    c0011df9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011de5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011dea:	74 c8                	je     c0011db4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011dec:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011df1:	83 e0 ef             	and    eax,0xffffffef
c0011df4:	83 f8 08             	cmp    eax,0x8
c0011df7:	76 bb                	jbe    c0011db4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011df9:	31 c0                	xor    eax,eax
c0011dfb:	c3                   	ret    

c0011dfc <UnixFile::getFileDescriptor()>:
c0011dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e03:	c3                   	ret    

c0011e04 <UnixFile::UnixFile(int)>:
c0011e04:	53                   	push   ebx
c0011e05:	83 ec 28             	sub    esp,0x28
c0011e08:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c0011e0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e11:	89 10                	mov    DWORD PTR [eax],edx
c0011e13:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011e1b:	0f 8f 90 01 00 00    	jg     c0011fb1 <UnixFile::UnixFile(int)+0x1ad>
c0011e21:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c0011e26:	8d 50 01             	lea    edx,[eax+0x1]
c0011e29:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c0011e2f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e33:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e36:	83 ec 08             	sub    esp,0x8
c0011e39:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e3d:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e42:	e8 b7 ec 00 00       	call   c0020afe <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	a0 b4 ce 02 c0       	mov    al,ds:0xc002ceb4
c0011e4f:	83 f0 01             	xor    eax,0x1
c0011e52:	0f b6 c0             	movzx  eax,al
c0011e55:	85 c0                	test   eax,eax
c0011e57:	0f 84 55 01 00 00    	je     c0011fb2 <UnixFile::UnixFile(int)+0x1ae>
c0011e5d:	c6 05 b4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ceb4,0x1
c0011e64:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011e6c:	83 ec 0c             	sub    esp,0xc
c0011e6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e73:	e8 b3 cc ff ff       	call   c000eb2b <malloc>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	89 c3                	mov    ebx,eax
c0011e7d:	83 ec 08             	sub    esp,0x8
c0011e80:	68 03 ff ff 0f       	push   0xfffff03
c0011e85:	53                   	push   ebx
c0011e86:	e8 2d 01 00 00       	call   c0011fb8 <ReservedFilename::ReservedFilename(int)>
c0011e8b:	83 c4 10             	add    esp,0x10
c0011e8e:	89 1d ac ce 02 c0    	mov    DWORD PTR ds:0xc002ceac,ebx
c0011e94:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011e9c:	83 ec 0c             	sub    esp,0xc
c0011e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ea3:	e8 83 cc ff ff       	call   c000eb2b <malloc>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	89 c3                	mov    ebx,eax
c0011ead:	83 ec 08             	sub    esp,0x8
c0011eb0:	68 01 ff ff 0f       	push   0xfffff01
c0011eb5:	53                   	push   ebx
c0011eb6:	e8 fd 00 00 00       	call   c0011fb8 <ReservedFilename::ReservedFilename(int)>
c0011ebb:	83 c4 10             	add    esp,0x10
c0011ebe:	89 1d b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,ebx
c0011ec4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011ecc:	83 ec 0c             	sub    esp,0xc
c0011ecf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ed3:	e8 53 cc ff ff       	call   c000eb2b <malloc>
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	89 c3                	mov    ebx,eax
c0011edd:	83 ec 08             	sub    esp,0x8
c0011ee0:	68 00 ff ff 0f       	push   0xfffff00
c0011ee5:	53                   	push   ebx
c0011ee6:	e8 cd 00 00 00       	call   c0011fb8 <ReservedFilename::ReservedFilename(int)>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	89 1d a4 ce 02 c0    	mov    DWORD PTR ds:0xc002cea4,ebx
c0011ef4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011f03:	e8 23 cc ff ff       	call   c000eb2b <malloc>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	89 c3                	mov    ebx,eax
c0011f0d:	83 ec 08             	sub    esp,0x8
c0011f10:	68 02 ff ff 0f       	push   0xfffff02
c0011f15:	53                   	push   ebx
c0011f16:	e8 9d 00 00 00       	call   c0011fb8 <ReservedFilename::ReservedFilename(int)>
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	89 1d a8 ce 02 c0    	mov    DWORD PTR ds:0xc002cea8,ebx
c0011f24:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f2c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011f31:	7f 7f                	jg     c0011fb2 <UnixFile::UnixFile(int)+0x1ae>
c0011f33:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f42:	e8 e4 cb ff ff       	call   c000eb2b <malloc>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	89 c3                	mov    ebx,eax
c0011f4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f50:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011f55:	83 ec 08             	sub    esp,0x8
c0011f58:	50                   	push   eax
c0011f59:	53                   	push   ebx
c0011f5a:	e8 59 00 00 00       	call   c0011fb8 <ReservedFilename::ReservedFilename(int)>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f66:	89 1c 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],ebx
c0011f6d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011f75:	83 ec 0c             	sub    esp,0xc
c0011f78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011f7c:	e8 aa cb ff ff       	call   c000eb2b <malloc>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	89 c3                	mov    ebx,eax
c0011f86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f8a:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011f8f:	83 ec 08             	sub    esp,0x8
c0011f92:	50                   	push   eax
c0011f93:	53                   	push   ebx
c0011f94:	e8 1f 00 00 00       	call   c0011fb8 <ReservedFilename::ReservedFilename(int)>
c0011f99:	83 c4 10             	add    esp,0x10
c0011f9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fa0:	89 1c 85 40 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31c0],ebx
c0011fa7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011fac:	e9 7b ff ff ff       	jmp    c0011f2c <UnixFile::UnixFile(int)+0x128>
c0011fb1:	90                   	nop
c0011fb2:	83 c4 28             	add    esp,0x28
c0011fb5:	5b                   	pop    ebx
c0011fb6:	c3                   	ret    
c0011fb7:	90                   	nop

c0011fb8 <ReservedFilename::ReservedFilename(int)>:
c0011fb8:	83 ec 0c             	sub    esp,0xc
c0011fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fbf:	83 ec 08             	sub    esp,0x8
c0011fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fc6:	50                   	push   eax
c0011fc7:	e8 38 fe ff ff       	call   c0011e04 <UnixFile::UnixFile(int)>
c0011fcc:	83 c4 10             	add    esp,0x10
c0011fcf:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c0011fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fd8:	89 10                	mov    DWORD PTR [eax],edx
c0011fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011fe2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011fe5:	90                   	nop
c0011fe6:	83 c4 0c             	add    esp,0xc
c0011fe9:	c3                   	ret    

c0011fea <UnixFile::~UnixFile()>:
c0011fea:	83 ec 1c             	sub    esp,0x1c
c0011fed:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c0011ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ff6:	89 10                	mov    DWORD PTR [eax],edx
c0011ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fff:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012004:	7f 76                	jg     c001207c <UnixFile::~UnixFile()+0x92>
c0012006:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001200e:	83 ec 0c             	sub    esp,0xc
c0012011:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012016:	e8 b7 eb 00 00       	call   c0020bd2 <LinkedList<UnixFile>::getFirstElement()>
c001201b:	83 c4 10             	add    esp,0x10
c001201e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012022:	83 ec 0c             	sub    esp,0xc
c0012025:	68 b8 ce 02 c0       	push   0xc002ceb8
c001202a:	e8 ab eb 00 00       	call   c0020bda <LinkedList<UnixFile>::removeFirst()>
c001202f:	83 c4 10             	add    esp,0x10
c0012032:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012036:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001203a:	74 43                	je     c001207f <UnixFile::~UnixFile()+0x95>
c001203c:	83 ec 08             	sub    esp,0x8
c001203f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012043:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012048:	e8 b1 ea 00 00       	call   c0020afe <LinkedList<UnixFile>::addElement(UnixFile*)>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012054:	8d 50 01             	lea    edx,[eax+0x1]
c0012057:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001205b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012060:	0f 94 c0             	sete   al
c0012063:	0f b6 c0             	movzx  eax,al
c0012066:	85 c0                	test   eax,eax
c0012068:	74 a4                	je     c001200e <UnixFile::~UnixFile()+0x24>
c001206a:	83 ec 0c             	sub    esp,0xc
c001206d:	68 04 2e 02 c0       	push   0xc0022e04
c0012072:	e8 fb cd ff ff       	call   c000ee72 <KePanic(char const*)>
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	eb 92                	jmp    c001200e <UnixFile::~UnixFile()+0x24>
c001207c:	90                   	nop
c001207d:	eb 01                	jmp    c0012080 <UnixFile::~UnixFile()+0x96>
c001207f:	90                   	nop
c0012080:	90                   	nop
c0012081:	83 c4 1c             	add    esp,0x1c
c0012084:	c3                   	ret    
c0012085:	90                   	nop

c0012086 <UnixFile::~UnixFile()>:
c0012086:	83 ec 0c             	sub    esp,0xc
c0012089:	83 ec 0c             	sub    esp,0xc
c001208c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012090:	e8 55 ff ff ff       	call   c0011fea <UnixFile::~UnixFile()>
c0012095:	83 c4 10             	add    esp,0x10
c0012098:	83 ec 08             	sub    esp,0x8
c001209b:	6a 0c                	push   0xc
c001209d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120a1:	e8 fa a7 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c00120a6:	83 c4 10             	add    esp,0x10
c00120a9:	83 c4 0c             	add    esp,0xc
c00120ac:	c3                   	ret    
c00120ad:	90                   	nop

c00120ae <ReservedFilename::~ReservedFilename()>:
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c00120b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ba:	89 10                	mov    DWORD PTR [eax],edx
c00120bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120c0:	83 ec 0c             	sub    esp,0xc
c00120c3:	50                   	push   eax
c00120c4:	e8 21 ff ff ff       	call   c0011fea <UnixFile::~UnixFile()>
c00120c9:	83 c4 10             	add    esp,0x10
c00120cc:	90                   	nop
c00120cd:	83 c4 0c             	add    esp,0xc
c00120d0:	c3                   	ret    
c00120d1:	90                   	nop

c00120d2 <ReservedFilename::~ReservedFilename()>:
c00120d2:	83 ec 0c             	sub    esp,0xc
c00120d5:	83 ec 0c             	sub    esp,0xc
c00120d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120dc:	e8 cd ff ff ff       	call   c00120ae <ReservedFilename::~ReservedFilename()>
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	83 ec 08             	sub    esp,0x8
c00120e7:	6a 0c                	push   0xc
c00120e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ed:	e8 ae a7 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c00120f2:	83 c4 10             	add    esp,0x10
c00120f5:	83 c4 0c             	add    esp,0xc
c00120f8:	c3                   	ret    

c00120f9 <KeGetFileFromDescriptor(int)>:
c00120f9:	53                   	push   ebx
c00120fa:	83 ec 10             	sub    esp,0x10
c00120fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012101:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0012107:	53                   	push   ebx
c0012108:	68 24 2e 02 c0       	push   0xc0022e24
c001210d:	e8 52 4e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012112:	83 c4 10             	add    esp,0x10
c0012115:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001211b:	7f 30                	jg     c001214d <KeGetFileFromDescriptor(int)+0x54>
c001211d:	83 ec 0c             	sub    esp,0xc
c0012120:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012125:	e8 a8 ea 00 00       	call   c0020bd2 <LinkedList<UnixFile>::getFirstElement()>
c001212a:	83 c4 10             	add    esp,0x10
c001212d:	8d 50 ff             	lea    edx,[eax-0x1]
c0012130:	83 fa fd             	cmp    edx,0xfffffffd
c0012133:	76 04                	jbe    c0012139 <KeGetFileFromDescriptor(int)+0x40>
c0012135:	31 c0                	xor    eax,eax
c0012137:	eb 6e                	jmp    c00121a7 <KeGetFileFromDescriptor(int)+0xae>
c0012139:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001213c:	74 69                	je     c00121a7 <KeGetFileFromDescriptor(int)+0xae>
c001213e:	52                   	push   edx
c001213f:	52                   	push   edx
c0012140:	50                   	push   eax
c0012141:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012146:	e8 31 eb 00 00       	call   c0020c7c <LinkedList<UnixFile>::getNext(UnixFile*)>
c001214b:	eb dd                	jmp    c001212a <KeGetFileFromDescriptor(int)+0x31>
c001214d:	a1 ac ce 02 c0       	mov    eax,ds:0xc002ceac
c0012152:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0012158:	74 4d                	je     c00121a7 <KeGetFileFromDescriptor(int)+0xae>
c001215a:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c001215f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012165:	74 40                	je     c00121a7 <KeGetFileFromDescriptor(int)+0xae>
c0012167:	a1 a8 ce 02 c0       	mov    eax,ds:0xc002cea8
c001216c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0012172:	74 33                	je     c00121a7 <KeGetFileFromDescriptor(int)+0xae>
c0012174:	a1 a4 ce 02 c0       	mov    eax,ds:0xc002cea4
c0012179:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001217f:	74 26                	je     c00121a7 <KeGetFileFromDescriptor(int)+0xae>
c0012181:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0012187:	83 f8 08             	cmp    eax,0x8
c001218a:	77 09                	ja     c0012195 <KeGetFileFromDescriptor(int)+0x9c>
c001218c:	8b 04 85 80 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3180]
c0012193:	eb 12                	jmp    c00121a7 <KeGetFileFromDescriptor(int)+0xae>
c0012195:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001219b:	83 fb 08             	cmp    ebx,0x8
c001219e:	77 95                	ja     c0012135 <KeGetFileFromDescriptor(int)+0x3c>
c00121a0:	8b 04 9d 40 ce 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd31c0]
c00121a7:	83 c4 08             	add    esp,0x8
c00121aa:	5b                   	pop    ebx
c00121ab:	c3                   	ret    

c00121ac <__static_initialization_and_destruction_0(int, int)>:
c00121ac:	83 ec 0c             	sub    esp,0xc
c00121af:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00121b4:	75 34                	jne    c00121ea <__static_initialization_and_destruction_0(int, int)+0x3e>
c00121b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00121be:	75 2a                	jne    c00121ea <__static_initialization_and_destruction_0(int, int)+0x3e>
c00121c0:	83 ec 0c             	sub    esp,0xc
c00121c3:	68 b8 ce 02 c0       	push   0xc002ceb8
c00121c8:	e8 ef e8 00 00       	call   c0020abc <LinkedList<UnixFile>::LinkedList()>
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	83 ec 04             	sub    esp,0x4
c00121d3:	68 b0 49 02 c0       	push   0xc00249b0
c00121d8:	68 b8 ce 02 c0       	push   0xc002ceb8
c00121dd:	68 ba 0a 02 c0       	push   0xc0020aba
c00121e2:	e8 69 a6 ff ff       	call   c000c850 <__cxa_atexit>
c00121e7:	83 c4 10             	add    esp,0x10
c00121ea:	90                   	nop
c00121eb:	83 c4 0c             	add    esp,0xc
c00121ee:	c3                   	ret    

c00121ef <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00121ef:	83 ec 0c             	sub    esp,0xc
c00121f2:	83 ec 08             	sub    esp,0x8
c00121f5:	68 ff ff 00 00       	push   0xffff
c00121fa:	6a 01                	push   0x1
c00121fc:	e8 ab ff ff ff       	call   c00121ac <__static_initialization_and_destruction_0(int, int)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	83 c4 0c             	add    esp,0xc
c0012207:	c3                   	ret    

c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012208:	53                   	push   ebx
c0012209:	8b 15 48 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025148
c001220f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012213:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012217:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c001221d:	89 d8                	mov    eax,ebx
c001221f:	d1 e8                	shr    eax,1
c0012221:	01 d0                	add    eax,edx
c0012223:	80 e3 01             	and    bl,0x1
c0012226:	8a 10                	mov    dl,BYTE PTR [eax]
c0012228:	75 09                	jne    c0012233 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001222a:	83 e2 f0             	and    edx,0xfffffff0
c001222d:	09 ca                	or     edx,ecx
c001222f:	88 10                	mov    BYTE PTR [eax],dl
c0012231:	5b                   	pop    ebx
c0012232:	c3                   	ret    
c0012233:	83 e2 0f             	and    edx,0xf
c0012236:	0f b6 c9             	movzx  ecx,cl
c0012239:	c1 e1 04             	shl    ecx,0x4
c001223c:	09 ca                	or     edx,ecx
c001223e:	88 10                	mov    BYTE PTR [eax],dl
c0012240:	5b                   	pop    ebx
c0012241:	c3                   	ret    

c0012242 <Virt::getPageState(unsigned long)>:
c0012242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012246:	8b 0d 48 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025148
c001224c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0012252:	89 d0                	mov    eax,edx
c0012254:	d1 e8                	shr    eax,1
c0012256:	80 e2 01             	and    dl,0x1
c0012259:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001225c:	74 03                	je     c0012261 <Virt::getPageState(unsigned long)+0x1f>
c001225e:	c1 e8 04             	shr    eax,0x4
c0012261:	83 e0 0f             	and    eax,0xf
c0012264:	c3                   	ret    

c0012265 <Virt::allocateKernelVirtualPages(int)>:
c0012265:	55                   	push   ebp
c0012266:	31 ed                	xor    ebp,ebp
c0012268:	57                   	push   edi
c0012269:	31 ff                	xor    edi,edi
c001226b:	56                   	push   esi
c001226c:	53                   	push   ebx
c001226d:	31 db                	xor    ebx,ebx
c001226f:	83 ec 0c             	sub    esp,0xc
c0012272:	8b 35 44 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025144
c0012278:	56                   	push   esi
c0012279:	e8 c4 ff ff ff       	call   c0012242 <Virt::getPageState(unsigned long)>
c001227e:	5a                   	pop    edx
c001227f:	84 c0                	test   al,al
c0012281:	75 41                	jne    c00122c4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0012283:	85 db                	test   ebx,ebx
c0012285:	75 02                	jne    c0012289 <Virt::allocateKernelVirtualPages(int)+0x24>
c0012287:	89 f5                	mov    ebp,esi
c0012289:	83 c3 01             	add    ebx,0x1
c001228c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012290:	74 5f                	je     c00122f1 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0012292:	83 c6 01             	add    esi,0x1
c0012295:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001229b:	76 34                	jbe    c00122d1 <Virt::allocateKernelVirtualPages(int)+0x6c>
c001229d:	c7 05 44 51 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025144,0xc8000
c00122a7:	f7 c7 01 00 00 00    	test   edi,0x1
c00122ad:	75 2a                	jne    c00122d9 <Virt::allocateKernelVirtualPages(int)+0x74>
c00122af:	be 00 80 0c 00       	mov    esi,0xc8000
c00122b4:	bf 01 00 00 00       	mov    edi,0x1
c00122b9:	56                   	push   esi
c00122ba:	e8 83 ff ff ff       	call   c0012242 <Virt::getPageState(unsigned long)>
c00122bf:	5a                   	pop    edx
c00122c0:	84 c0                	test   al,al
c00122c2:	74 bf                	je     c0012283 <Virt::allocateKernelVirtualPages(int)+0x1e>
c00122c4:	31 db                	xor    ebx,ebx
c00122c6:	83 c6 01             	add    esi,0x1
c00122c9:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00122cf:	77 cc                	ja     c001229d <Virt::allocateKernelVirtualPages(int)+0x38>
c00122d1:	89 35 44 51 02 c0    	mov    DWORD PTR ds:0xc0025144,esi
c00122d7:	eb 9f                	jmp    c0012278 <Virt::allocateKernelVirtualPages(int)+0x13>
c00122d9:	83 ec 0c             	sub    esp,0xc
c00122dc:	68 80 2e 02 c0       	push   0xc0022e80
c00122e1:	e8 8c cb ff ff       	call   c000ee72 <KePanic(char const*)>
c00122e6:	8b 35 44 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025144
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	eb 87                	jmp    c0012278 <Virt::allocateKernelVirtualPages(int)+0x13>
c00122f1:	89 2d 44 51 02 c0    	mov    DWORD PTR ds:0xc0025144,ebp
c00122f7:	83 fb 01             	cmp    ebx,0x1
c00122fa:	74 6f                	je     c001236b <Virt::allocateKernelVirtualPages(int)+0x106>
c00122fc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012300:	85 c9                	test   ecx,ecx
c0012302:	74 49                	je     c001234d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012304:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012308:	89 e8                	mov    eax,ebp
c001230a:	31 db                	xor    ebx,ebx
c001230c:	8d 79 ff             	lea    edi,[ecx-0x1]
c001230f:	eb 18                	jmp    c0012329 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0012311:	6a 01                	push   0x1
c0012313:	83 c3 01             	add    ebx,0x1
c0012316:	50                   	push   eax
c0012317:	e8 ec fe ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001231c:	58                   	pop    eax
c001231d:	5a                   	pop    edx
c001231e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012322:	74 29                	je     c001234d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012324:	a1 44 51 02 c0       	mov    eax,ds:0xc0025144
c0012329:	8d 50 01             	lea    edx,[eax+0x1]
c001232c:	85 db                	test   ebx,ebx
c001232e:	89 15 44 51 02 c0    	mov    DWORD PTR ds:0xc0025144,edx
c0012334:	74 24                	je     c001235a <Virt::allocateKernelVirtualPages(int)+0xf5>
c0012336:	39 df                	cmp    edi,ebx
c0012338:	75 d7                	jne    c0012311 <Virt::allocateKernelVirtualPages(int)+0xac>
c001233a:	6a 03                	push   0x3
c001233c:	83 c3 01             	add    ebx,0x1
c001233f:	50                   	push   eax
c0012340:	e8 c3 fe ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012345:	59                   	pop    ecx
c0012346:	5e                   	pop    esi
c0012347:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001234b:	75 d7                	jne    c0012324 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001234d:	83 c4 0c             	add    esp,0xc
c0012350:	89 e8                	mov    eax,ebp
c0012352:	5b                   	pop    ebx
c0012353:	c1 e0 0c             	shl    eax,0xc
c0012356:	5e                   	pop    esi
c0012357:	5f                   	pop    edi
c0012358:	5d                   	pop    ebp
c0012359:	c3                   	ret    
c001235a:	6a 02                	push   0x2
c001235c:	bb 01 00 00 00       	mov    ebx,0x1
c0012361:	50                   	push   eax
c0012362:	e8 a1 fe ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012367:	58                   	pop    eax
c0012368:	5a                   	pop    edx
c0012369:	eb b9                	jmp    c0012324 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001236b:	6a 04                	push   0x4
c001236d:	8d 45 01             	lea    eax,[ebp+0x1]
c0012370:	55                   	push   ebp
c0012371:	a3 44 51 02 c0       	mov    ds:0xc0025144,eax
c0012376:	e8 8d fe ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001237b:	5b                   	pop    ebx
c001237c:	89 e8                	mov    eax,ebp
c001237e:	5e                   	pop    esi
c001237f:	c1 e0 0c             	shl    eax,0xc
c0012382:	83 c4 0c             	add    esp,0xc
c0012385:	5b                   	pop    ebx
c0012386:	5e                   	pop    esi
c0012387:	5f                   	pop    edi
c0012388:	5d                   	pop    ebp
c0012389:	c3                   	ret    

c001238a <Virt::freeSwapfilePage(unsigned long)>:
c001238a:	53                   	push   ebx
c001238b:	8b 15 cc ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cecc
c0012391:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012395:	b8 01 00 00 00       	mov    eax,0x1
c001239a:	89 cb                	mov    ebx,ecx
c001239c:	d3 e0                	shl    eax,cl
c001239e:	c1 eb 05             	shr    ebx,0x5
c00123a1:	f7 d0                	not    eax
c00123a3:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00123a6:	21 c1                	and    ecx,eax
c00123a8:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00123ab:	5b                   	pop    ebx
c00123ac:	c3                   	ret    

c00123ad <Virt::swapIDToSector(unsigned long)>:
c00123ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123b1:	8b 15 4c 51 02 c0    	mov    edx,DWORD PTR ds:0xc002514c
c00123b7:	8b 0d 54 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025154
c00123bd:	0f af c2             	imul   eax,edx
c00123c0:	01 c8                	add    eax,ecx
c00123c2:	c3                   	ret    

c00123c3 <Virt::allocateSwapfilePage()>:
c00123c3:	55                   	push   ebp
c00123c4:	31 d2                	xor    edx,edx
c00123c6:	57                   	push   edi
c00123c7:	56                   	push   esi
c00123c8:	53                   	push   ebx
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	8b 0d 4c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002514c
c00123d2:	a1 50 51 02 c0       	mov    eax,ds:0xc0025150
c00123d7:	f7 f1                	div    ecx
c00123d9:	39 0d 50 51 02 c0    	cmp    DWORD PTR ds:0xc0025150,ecx
c00123df:	72 2f                	jb     c0012410 <Virt::allocateSwapfilePage()+0x4d>
c00123e1:	8b 35 cc ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cecc
c00123e7:	8b 16                	mov    edx,DWORD PTR [esi]
c00123e9:	f6 c2 01             	test   dl,0x1
c00123ec:	74 3e                	je     c001242c <Virt::allocateSwapfilePage()+0x69>
c00123ee:	31 c9                	xor    ecx,ecx
c00123f0:	bf 01 00 00 00       	mov    edi,0x1
c00123f5:	eb 12                	jmp    c0012409 <Virt::allocateSwapfilePage()+0x46>
c00123f7:	89 fd                	mov    ebp,edi
c00123f9:	89 ca                	mov    edx,ecx
c00123fb:	d3 e5                	shl    ebp,cl
c00123fd:	c1 ea 05             	shr    edx,0x5
c0012400:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012403:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012405:	85 ea                	test   edx,ebp
c0012407:	74 2c                	je     c0012435 <Virt::allocateSwapfilePage()+0x72>
c0012409:	83 c1 01             	add    ecx,0x1
c001240c:	39 c8                	cmp    eax,ecx
c001240e:	77 e7                	ja     c00123f7 <Virt::allocateSwapfilePage()+0x34>
c0012410:	83 ec 0c             	sub    esp,0xc
c0012413:	68 03 34 02 c0       	push   0xc0023403
c0012418:	e8 55 ca ff ff       	call   c000ee72 <KePanic(char const*)>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	31 c9                	xor    ecx,ecx
c0012422:	83 c4 0c             	add    esp,0xc
c0012425:	89 c8                	mov    eax,ecx
c0012427:	5b                   	pop    ebx
c0012428:	5e                   	pop    esi
c0012429:	5f                   	pop    edi
c001242a:	5d                   	pop    ebp
c001242b:	c3                   	ret    
c001242c:	89 f3                	mov    ebx,esi
c001242e:	bd 01 00 00 00       	mov    ebp,0x1
c0012433:	31 c9                	xor    ecx,ecx
c0012435:	09 ea                	or     edx,ebp
c0012437:	89 c8                	mov    eax,ecx
c0012439:	89 13                	mov    DWORD PTR [ebx],edx
c001243b:	83 c4 0c             	add    esp,0xc
c001243e:	5b                   	pop    ebx
c001243f:	5e                   	pop    esi
c0012440:	5f                   	pop    edi
c0012441:	5d                   	pop    ebp
c0012442:	c3                   	ret    

c0012443 <Virt::virtualMemorySetup()>:
c0012443:	53                   	push   ebx
c0012444:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012449:	6a 0f                	push   0xf
c001244b:	53                   	push   ebx
c001244c:	83 c3 01             	add    ebx,0x1
c001244f:	e8 b4 fd ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012454:	58                   	pop    eax
c0012455:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001245b:	5a                   	pop    edx
c001245c:	75 eb                	jne    c0012449 <Virt::virtualMemorySetup()+0x6>
c001245e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012463:	6a 00                	push   0x0
c0012465:	53                   	push   ebx
c0012466:	83 c3 01             	add    ebx,0x1
c0012469:	e8 9a fd ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001246e:	59                   	pop    ecx
c001246f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012475:	58                   	pop    eax
c0012476:	75 eb                	jne    c0012463 <Virt::virtualMemorySetup()+0x20>
c0012478:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001247d:	6a 0f                	push   0xf
c001247f:	53                   	push   ebx
c0012480:	83 c3 01             	add    ebx,0x1
c0012483:	e8 80 fd ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012488:	58                   	pop    eax
c0012489:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001248f:	5a                   	pop    edx
c0012490:	75 eb                	jne    c001247d <Virt::virtualMemorySetup()+0x3a>
c0012492:	5b                   	pop    ebx
c0012493:	c3                   	ret    

c0012494 <Virt::setupPageSwapping(int)>:
c0012494:	53                   	push   ebx
c0012495:	83 ec 0c             	sub    esp,0xc
c0012498:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001249c:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c00124a1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00124a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00124a9:	53                   	push   ebx
c00124aa:	c1 e3 0b             	shl    ebx,0xb
c00124ad:	68 1a 34 02 c0       	push   0xc002341a
c00124b2:	50                   	push   eax
c00124b3:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00124b6:	89 1d 50 51 02 c0    	mov    DWORD PTR ds:0xc0025150,ebx
c00124bc:	c6 05 58 51 02 c0 43 	mov    BYTE PTR ds:0xc0025158,0x43
c00124c3:	c1 eb 08             	shr    ebx,0x8
c00124c6:	a3 54 51 02 c0       	mov    ds:0xc0025154,eax
c00124cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124ce:	c7 05 4c 51 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002514c,0x8
c00124d8:	e8 4e c6 ff ff       	call   c000eb2b <malloc>
c00124dd:	83 c4 0c             	add    esp,0xc
c00124e0:	89 c1                	mov    ecx,eax
c00124e2:	a3 cc ce 02 c0       	mov    ds:0xc002cecc,eax
c00124e7:	31 d2                	xor    edx,edx
c00124e9:	a1 50 51 02 c0       	mov    eax,ds:0xc0025150
c00124ee:	f7 35 4c 51 02 c0    	div    DWORD PTR ds:0xc002514c
c00124f4:	c1 e8 05             	shr    eax,0x5
c00124f7:	50                   	push   eax
c00124f8:	6a 00                	push   0x0
c00124fa:	51                   	push   ecx
c00124fb:	e8 f0 df fe ff       	call   c00004f0 <memset>
c0012500:	83 c4 18             	add    esp,0x18
c0012503:	5b                   	pop    ebx
c0012504:	c3                   	ret    
c0012505:	90                   	nop

c0012506 <VAS::setCPUSpecific(unsigned long)>:
c0012506:	c3                   	ret    
c0012507:	90                   	nop

c0012508 <VAS::VAS(VAS*)>:
c0012508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001250c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012517:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001251e:	90                   	nop
c001251f:	c3                   	ret    

c0012520 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012524:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012529:	89 c2                	mov    edx,eax
c001252b:	c1 e8 0a             	shr    eax,0xa
c001252e:	c1 ea 16             	shr    edx,0x16
c0012531:	83 f9 01             	cmp    ecx,0x1
c0012534:	19 c9                	sbb    ecx,ecx
c0012536:	c1 e2 0c             	shl    edx,0xc
c0012539:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001253f:	25 fc 0f 00 00       	and    eax,0xffc
c0012544:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001254b:	01 d0                	add    eax,edx
c001254d:	c3                   	ret    

c001254e <VAS::getPageTableEntry(unsigned long)>:
c001254e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012552:	89 ca                	mov    edx,ecx
c0012554:	c1 e9 0a             	shr    ecx,0xa
c0012557:	c1 ea 16             	shr    edx,0x16
c001255a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012560:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012566:	c1 e0 0c             	shl    eax,0xc
c0012569:	8d 04 08             	lea    eax,[eax+ecx*1]
c001256c:	c3                   	ret    

c001256d <Virt::freeKernelVirtualPages(unsigned long)>:
c001256d:	55                   	push   ebp
c001256e:	57                   	push   edi
c001256f:	bf 01 00 00 00       	mov    edi,0x1
c0012574:	56                   	push   esi
c0012575:	53                   	push   ebx
c0012576:	83 ec 1c             	sub    esp,0x1c
c0012579:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001257d:	c1 ee 0c             	shr    esi,0xc
c0012580:	eb 48                	jmp    c00125ca <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012582:	83 ec 08             	sub    esp,0x8
c0012585:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001258a:	55                   	push   ebp
c001258b:	50                   	push   eax
c001258c:	e8 bd ff ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0012591:	83 c4 10             	add    esp,0x10
c0012594:	8b 10                	mov    edx,DWORD PTR [eax]
c0012596:	f6 c6 04             	test   dh,0x4
c0012599:	75 70                	jne    c001260b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001259b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00125a1:	83 fb 04             	cmp    ebx,0x4
c00125a4:	0f 84 8a 00 00 00    	je     c0012634 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00125aa:	83 fb 02             	cmp    ebx,0x2
c00125ad:	0f 84 9a 00 00 00    	je     c001264d <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00125b3:	83 fb 03             	cmp    ebx,0x3
c00125b6:	0f 84 be 00 00 00    	je     c001267a <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00125bc:	83 fb 01             	cmp    ebx,0x1
c00125bf:	0f 84 a2 00 00 00    	je     c0012667 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00125c5:	83 c6 01             	add    esi,0x1
c00125c8:	31 ff                	xor    edi,edi
c00125ca:	56                   	push   esi
c00125cb:	89 f5                	mov    ebp,esi
c00125cd:	e8 70 fc ff ff       	call   c0012242 <Virt::getPageState(unsigned long)>
c00125d2:	c1 e5 0c             	shl    ebp,0xc
c00125d5:	0f b6 d8             	movzx  ebx,al
c00125d8:	5a                   	pop    edx
c00125d9:	85 db                	test   ebx,ebx
c00125db:	75 a5                	jne    c0012582 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00125dd:	83 ec 0c             	sub    esp,0xc
c00125e0:	68 31 34 02 c0       	push   0xc0023431
c00125e5:	e8 88 c8 ff ff       	call   c000ee72 <KePanic(char const*)>
c00125ea:	5a                   	pop    edx
c00125eb:	59                   	pop    ecx
c00125ec:	55                   	push   ebp
c00125ed:	8b 2d d0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002ced0
c00125f3:	55                   	push   ebp
c00125f4:	e8 55 ff ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c00125f9:	83 c4 10             	add    esp,0x10
c00125fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00125fe:	f6 c6 04             	test   dh,0x4
c0012601:	75 08                	jne    c001260b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012603:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012609:	eb ba                	jmp    c00125c5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001260f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012615:	83 ec 0c             	sub    esp,0xc
c0012618:	52                   	push   edx
c0012619:	e8 df c9 ff ff       	call   c000effd <Phys::freePage(unsigned long)>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	83 fb 04             	cmp    ebx,0x4
c0012624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012628:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001262e:	0f 85 76 ff ff ff    	jne    c00125aa <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012634:	83 e7 01             	and    edi,0x1
c0012637:	75 46                	jne    c001267f <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012639:	c7 44 24 30 a0 2e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022ea0
c0012641:	83 c4 1c             	add    esp,0x1c
c0012644:	5b                   	pop    ebx
c0012645:	5e                   	pop    esi
c0012646:	5f                   	pop    edi
c0012647:	5d                   	pop    ebp
c0012648:	e9 25 c8 ff ff       	jmp    c000ee72 <KePanic(char const*)>
c001264d:	83 e7 01             	and    edi,0x1
c0012650:	75 15                	jne    c0012667 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	68 4d 34 02 c0       	push   0xc002344d
c001265a:	e8 13 c8 ff ff       	call   c000ee72 <KePanic(char const*)>
c001265f:	83 c4 10             	add    esp,0x10
c0012662:	e9 5e ff ff ff       	jmp    c00125c5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012667:	83 ec 08             	sub    esp,0x8
c001266a:	6a 00                	push   0x0
c001266c:	56                   	push   esi
c001266d:	e8 96 fb ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012672:	83 c4 10             	add    esp,0x10
c0012675:	e9 4b ff ff ff       	jmp    c00125c5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001267a:	83 e7 01             	and    edi,0x1
c001267d:	75 16                	jne    c0012695 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001267f:	83 ec 08             	sub    esp,0x8
c0012682:	6a 00                	push   0x0
c0012684:	56                   	push   esi
c0012685:	e8 7e fb ff ff       	call   c0012208 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	83 c4 1c             	add    esp,0x1c
c0012690:	5b                   	pop    ebx
c0012691:	5e                   	pop    esi
c0012692:	5f                   	pop    edi
c0012693:	5d                   	pop    ebp
c0012694:	c3                   	ret    
c0012695:	c7 44 24 30 69 34 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023469
c001269d:	83 c4 1c             	add    esp,0x1c
c00126a0:	5b                   	pop    ebx
c00126a1:	5e                   	pop    esi
c00126a2:	5f                   	pop    edi
c00126a3:	5d                   	pop    ebp
c00126a4:	e9 c9 c7 ff ff       	jmp    c000ee72 <KePanic(char const*)>
c00126a9:	90                   	nop

c00126aa <VAS::freeAllocatedPages(unsigned long)>:
c00126aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126b2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00126b6:	74 09                	je     c00126c1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00126b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126bc:	e9 ac fe ff ff       	jmp    c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c00126c1:	c7 44 24 04 c4 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022ec4
c00126c9:	e9 96 48 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00126ce <VAS::virtualToPhysical(unsigned long)>:
c00126ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126d2:	50                   	push   eax
c00126d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126d7:	52                   	push   edx
c00126d8:	e8 71 fe ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c00126dd:	59                   	pop    ecx
c00126de:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e0:	5a                   	pop    edx
c00126e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126e6:	c3                   	ret    
c00126e7:	90                   	nop

c00126e8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00126e8:	55                   	push   ebp
c00126e9:	57                   	push   edi
c00126ea:	56                   	push   esi
c00126eb:	53                   	push   ebx
c00126ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00126f0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00126f4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00126f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00126fc:	85 db                	test   ebx,ebx
c00126fe:	7e 24                	jle    c0012724 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012700:	c1 e3 0c             	shl    ebx,0xc
c0012703:	01 f3                	add    ebx,esi
c0012705:	56                   	push   esi
c0012706:	81 c6 00 10 00 00    	add    esi,0x1000
c001270c:	55                   	push   ebp
c001270d:	e8 3c fe ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0012712:	5a                   	pop    edx
c0012713:	59                   	pop    ecx
c0012714:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012716:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001271a:	21 f9                	and    ecx,edi
c001271c:	09 d1                	or     ecx,edx
c001271e:	39 f3                	cmp    ebx,esi
c0012720:	89 08                	mov    DWORD PTR [eax],ecx
c0012722:	75 e1                	jne    c0012705 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012724:	5b                   	pop    ebx
c0012725:	5e                   	pop    esi
c0012726:	5f                   	pop    edi
c0012727:	5d                   	pop    ebp
c0012728:	c3                   	ret    
c0012729:	90                   	nop

c001272a <VAS::VAS()>:
c001272a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001272e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012739:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012744:	a3 d0 ce 02 c0       	mov    ds:0xc002ced0,eax
c0012749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001274d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012755:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001275c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012763:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c0012768:	b8 00 60 02 c0       	mov    eax,0xc0026000
c001276d:	29 c2                	sub    edx,eax
c001276f:	89 d0                	mov    eax,edx
c0012771:	05 ff 0f 00 00       	add    eax,0xfff
c0012776:	c1 e8 0c             	shr    eax,0xc
c0012779:	89 c2                	mov    edx,eax
c001277b:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012780:	6a 04                	push   0x4
c0012782:	6a ff                	push   0xffffffff
c0012784:	52                   	push   edx
c0012785:	50                   	push   eax
c0012786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001278a:	e8 59 ff ff ff       	call   c00126e8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001278f:	83 c4 14             	add    esp,0x14
c0012792:	90                   	nop
c0012793:	c3                   	ret    

c0012794 <VAS::setToWriteCombining(unsigned long, int)>:
c0012794:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c0012799:	50                   	push   eax
c001279a:	6a ff                	push   0xffffffff
c001279c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127a0:	52                   	push   edx
c00127a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127a5:	51                   	push   ecx
c00127a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127aa:	50                   	push   eax
c00127ab:	e8 38 ff ff ff       	call   c00126e8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00127b0:	83 c4 14             	add    esp,0x14
c00127b3:	c3                   	ret    

c00127b4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00127b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00127bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127bf:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00127c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00127c7:	83 f8 01             	cmp    eax,0x1
c00127ca:	19 c0                	sbb    eax,eax
c00127cc:	83 ca 03             	or     edx,0x3
c00127cf:	83 e0 fc             	and    eax,0xfffffffc
c00127d2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00127d9:	0f 20 d8             	mov    eax,cr3
c00127dc:	0f 22 d8             	mov    cr3,eax
c00127df:	c3                   	ret    

c00127e0 <VAS::~VAS()>:
c00127e0:	83 ec 2c             	sub    esp,0x2c
c00127e3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127eb:	fa                   	cli    
c00127ec:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00127f1:	83 c0 01             	add    eax,0x1
c00127f4:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00127f9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00127fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012800:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012803:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012809:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001280d:	6a 01                	push   0x1
c001280f:	50                   	push   eax
c0012810:	e8 9f ff ff ff       	call   c00127b4 <VAS::mapOtherVASIn(bool, VAS*)>
c0012815:	83 c4 0c             	add    esp,0xc
c0012818:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012820:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012828:	0f 8f d8 00 00 00    	jg     c0012906 <VAS::~VAS()+0x126>
c001282e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012832:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012839:	c1 e2 02             	shl    edx,0x2
c001283c:	01 d0                	add    eax,edx
c001283e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012848:	83 e0 01             	and    eax,0x1
c001284b:	0f 84 ab 00 00 00    	je     c00128fc <VAS::~VAS()+0x11c>
c0012851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012859:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012861:	7f 74                	jg     c00128d7 <VAS::~VAS()+0xf7>
c0012863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012867:	c1 e0 0a             	shl    eax,0xa
c001286a:	89 c2                	mov    edx,eax
c001286c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012870:	01 d0                	add    eax,edx
c0012872:	c1 e0 0c             	shl    eax,0xc
c0012875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001287e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012880:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012883:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012889:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001288d:	6a 01                	push   0x1
c001288f:	50                   	push   eax
c0012890:	e8 8b fc ff ff       	call   c0012520 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012895:	83 c4 0c             	add    esp,0xc
c0012898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001289c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00128a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00128a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128aa:	25 01 04 00 00       	and    eax,0x401
c00128af:	3d 01 04 00 00       	cmp    eax,0x401
c00128b4:	75 1a                	jne    c00128d0 <VAS::~VAS()+0xf0>
c00128b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128bf:	83 ec 0c             	sub    esp,0xc
c00128c2:	50                   	push   eax
c00128c3:	e8 35 c7 ff ff       	call   c000effd <Phys::freePage(unsigned long)>
c00128c8:	83 c4 10             	add    esp,0x10
c00128cb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00128d0:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00128d5:	eb 82                	jmp    c0012859 <VAS::~VAS()+0x79>
c00128d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128db:	25 00 04 00 00       	and    eax,0x400
c00128e0:	74 1a                	je     c00128fc <VAS::~VAS()+0x11c>
c00128e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128eb:	83 ec 0c             	sub    esp,0xc
c00128ee:	50                   	push   eax
c00128ef:	e8 09 c7 ff ff       	call   c000effd <Phys::freePage(unsigned long)>
c00128f4:	83 c4 10             	add    esp,0x10
c00128f7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00128fc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012901:	e9 1a ff ff ff       	jmp    c0012820 <VAS::~VAS()+0x40>
c0012906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001290a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001290d:	83 ec 0c             	sub    esp,0xc
c0012910:	50                   	push   eax
c0012911:	e8 57 fc ff ff       	call   c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c0012916:	83 c4 10             	add    esp,0x10
c0012919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001291d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012920:	83 ec 0c             	sub    esp,0xc
c0012923:	50                   	push   eax
c0012924:	e8 d4 c6 ff ff       	call   c000effd <Phys::freePage(unsigned long)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012931:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0012939:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001293e:	85 c0                	test   eax,eax
c0012940:	75 01                	jne    c0012943 <VAS::~VAS()+0x163>
c0012942:	fb                   	sti    
c0012943:	90                   	nop
c0012944:	83 c4 2c             	add    esp,0x2c
c0012947:	c3                   	ret    

c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012948:	55                   	push   ebp
c0012949:	57                   	push   edi
c001294a:	56                   	push   esi
c001294b:	53                   	push   ebx
c001294c:	83 ec 1c             	sub    esp,0x1c
c001294f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012953:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012957:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001295d:	77 08                	ja     c0012967 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001295f:	0f 20 d8             	mov    eax,cr3
c0012962:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012965:	75 49                	jne    c00129b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0012967:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001296b:	09 d8                	or     eax,ebx
c001296d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012972:	75 59                	jne    c00129cd <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0012974:	89 de                	mov    esi,ebx
c0012976:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012979:	c1 ee 16             	shr    esi,0x16
c001297c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012983:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012987:	74 56                	je     c00129df <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0012989:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001298d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012991:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012997:	c1 eb 0a             	shr    ebx,0xa
c001299a:	c1 e6 0c             	shl    esi,0xc
c001299d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00129a3:	09 d0                	or     eax,edx
c00129a5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00129a8:	83 c4 1c             	add    esp,0x1c
c00129ab:	5b                   	pop    ebx
c00129ac:	5e                   	pop    esi
c00129ad:	5f                   	pop    edi
c00129ae:	5d                   	pop    ebp
c00129af:	c3                   	ret    
c00129b0:	83 ec 0c             	sub    esp,0xc
c00129b3:	68 e8 2e 02 c0       	push   0xc0022ee8
c00129b8:	e8 a7 45 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00129bd:	83 c4 10             	add    esp,0x10
c00129c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129c4:	09 d8                	or     eax,ebx
c00129c6:	a9 ff 0f 00 00       	test   eax,0xfff
c00129cb:	74 a7                	je     c0012974 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00129cd:	83 ec 0c             	sub    esp,0xc
c00129d0:	68 50 2f 02 c0       	push   0xc0022f50
c00129d5:	e8 98 c4 ff ff       	call   c000ee72 <KePanic(char const*)>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	eb 95                	jmp    c0012974 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00129df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129e3:	e8 7e c6 ff ff       	call   c000f066 <Phys::allocatePage()>
c00129e8:	83 ec 0c             	sub    esp,0xc
c00129eb:	89 c5                	mov    ebp,eax
c00129ed:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c00129f3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00129f7:	6a 01                	push   0x1
c00129f9:	e8 67 f8 ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c00129fe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012a05:	6a 01                	push   0x1
c0012a07:	50                   	push   eax
c0012a08:	55                   	push   ebp
c0012a09:	81 cd 07 04 00 00    	or     ebp,0x407
c0012a0f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012a13:	51                   	push   ecx
c0012a14:	e8 19 01 00 00       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a19:	83 c4 1c             	add    esp,0x1c
c0012a1c:	68 00 10 00 00       	push   0x1000
c0012a21:	6a 00                	push   0x0
c0012a23:	50                   	push   eax
c0012a24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012a28:	e8 c3 da fe ff       	call   c00004f0 <memset>
c0012a2d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012a31:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012a34:	e8 34 fb ff ff       	call   c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c0012a39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012a3d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012a46:	e9 3e ff ff ff       	jmp    c0012989 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012a4b:	90                   	nop

c0012a4c <VAS::allocatePages(int, int)>:
c0012a4c:	55                   	push   ebp
c0012a4d:	57                   	push   edi
c0012a4e:	56                   	push   esi
c0012a4f:	53                   	push   ebx
c0012a50:	83 ec 1c             	sub    esp,0x1c
c0012a53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012a5b:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012a5f:	75 71                	jne    c0012ad2 <VAS::allocatePages(int, int)+0x86>
c0012a61:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012a64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a68:	85 c0                	test   eax,eax
c0012a6a:	74 4d                	je     c0012ab9 <VAS::allocatePages(int, int)+0x6d>
c0012a6c:	89 dd                	mov    ebp,ebx
c0012a6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a72:	c1 e5 0c             	shl    ebp,0xc
c0012a75:	01 c5                	add    ebp,eax
c0012a77:	85 db                	test   ebx,ebx
c0012a79:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012a7c:	7e 29                	jle    c0012aa7 <VAS::allocatePages(int, int)+0x5b>
c0012a7e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a86:	81 cf 00 04 00 00    	or     edi,0x400
c0012a8c:	e8 d5 c5 ff ff       	call   c000f066 <Phys::allocatePage()>
c0012a91:	57                   	push   edi
c0012a92:	53                   	push   ebx
c0012a93:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012a99:	50                   	push   eax
c0012a9a:	56                   	push   esi
c0012a9b:	e8 a8 fe ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012aa0:	83 c4 10             	add    esp,0x10
c0012aa3:	39 dd                	cmp    ebp,ebx
c0012aa5:	75 e5                	jne    c0012a8c <VAS::allocatePages(int, int)+0x40>
c0012aa7:	0f 20 d8             	mov    eax,cr3
c0012aaa:	0f 22 d8             	mov    cr3,eax
c0012aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ab1:	83 c4 1c             	add    esp,0x1c
c0012ab4:	5b                   	pop    ebx
c0012ab5:	5e                   	pop    esi
c0012ab6:	5f                   	pop    edi
c0012ab7:	5d                   	pop    ebp
c0012ab8:	c3                   	ret    
c0012ab9:	83 ec 0c             	sub    esp,0xc
c0012abc:	68 74 2f 02 c0       	push   0xc0022f74
c0012ac1:	e8 ac c3 ff ff       	call   c000ee72 <KePanic(char const*)>
c0012ac6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012ac9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012acd:	83 c4 10             	add    esp,0x10
c0012ad0:	eb 9a                	jmp    c0012a6c <VAS::allocatePages(int, int)+0x20>
c0012ad2:	83 ec 0c             	sub    esp,0xc
c0012ad5:	53                   	push   ebx
c0012ad6:	e8 8a f7 ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c0012adb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012adf:	83 c4 10             	add    esp,0x10
c0012ae2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012ae7:	77 37                	ja     c0012b20 <VAS::allocatePages(int, int)+0xd4>
c0012ae9:	85 db                	test   ebx,ebx
c0012aeb:	7e ba                	jle    c0012aa7 <VAS::allocatePages(int, int)+0x5b>
c0012aed:	c1 e3 0c             	shl    ebx,0xc
c0012af0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012af4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012af8:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0012afb:	81 cf 00 04 00 00    	or     edi,0x400
c0012b01:	89 c3                	mov    ebx,eax
c0012b03:	e8 5e c5 ff ff       	call   c000f066 <Phys::allocatePage()>
c0012b08:	57                   	push   edi
c0012b09:	53                   	push   ebx
c0012b0a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012b10:	50                   	push   eax
c0012b11:	56                   	push   esi
c0012b12:	e8 31 fe ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	39 dd                	cmp    ebp,ebx
c0012b1c:	75 e5                	jne    c0012b03 <VAS::allocatePages(int, int)+0xb7>
c0012b1e:	eb 87                	jmp    c0012aa7 <VAS::allocatePages(int, int)+0x5b>
c0012b20:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012b24:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012b29:	09 c2                	or     edx,eax
c0012b2b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0012b2f:	eb b8                	jmp    c0012ae9 <VAS::allocatePages(int, int)+0x9d>
c0012b31:	90                   	nop

c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012b32:	55                   	push   ebp
c0012b33:	57                   	push   edi
c0012b34:	56                   	push   esi
c0012b35:	53                   	push   ebx
c0012b36:	83 ec 0c             	sub    esp,0xc
c0012b39:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b3d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012b41:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b45:	85 db                	test   ebx,ebx
c0012b47:	7e 2f                	jle    c0012b78 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0012b49:	c1 e3 0c             	shl    ebx,0xc
c0012b4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b54:	01 d3                	add    ebx,edx
c0012b56:	55                   	push   ebp
c0012b57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012b5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b5f:	29 c2                	sub    edx,eax
c0012b61:	01 f2                	add    edx,esi
c0012b63:	52                   	push   edx
c0012b64:	56                   	push   esi
c0012b65:	81 c6 00 10 00 00    	add    esi,0x1000
c0012b6b:	57                   	push   edi
c0012b6c:	e8 d7 fd ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	39 de                	cmp    esi,ebx
c0012b76:	75 de                	jne    c0012b56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0012b78:	0f 20 d8             	mov    eax,cr3
c0012b7b:	0f 22 d8             	mov    cr3,eax
c0012b7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b82:	83 c4 0c             	add    esp,0xc
c0012b85:	5b                   	pop    ebx
c0012b86:	5e                   	pop    esi
c0012b87:	5f                   	pop    edi
c0012b88:	5d                   	pop    ebp
c0012b89:	c3                   	ret    

c0012b8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012b8a:	55                   	push   ebp
c0012b8b:	57                   	push   edi
c0012b8c:	56                   	push   esi
c0012b8d:	53                   	push   ebx
c0012b8e:	83 ec 1c             	sub    esp,0x1c
c0012b91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012b95:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012b99:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012b9d:	09 f8                	or     eax,edi
c0012b9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012ba3:	a9 ff 0f 00 00       	test   eax,0xfff
c0012ba8:	75 4f                	jne    c0012bf9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012baa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012bae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bb1:	c1 eb 16             	shr    ebx,0x16
c0012bb4:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0012bbb:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0012bbf:	74 52                	je     c0012c13 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0012bc1:	0f b6 f2             	movzx  esi,dl
c0012bc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012bc8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012bcc:	c1 e8 0a             	shr    eax,0xa
c0012bcf:	83 fe 01             	cmp    esi,0x1
c0012bd2:	19 d2                	sbb    edx,edx
c0012bd4:	c1 e3 0c             	shl    ebx,0xc
c0012bd7:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012bdd:	25 fc 0f 00 00       	and    eax,0xffc
c0012be2:	01 d8                	add    eax,ebx
c0012be4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012be8:	09 d9                	or     ecx,ebx
c0012bea:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012bf1:	83 c4 1c             	add    esp,0x1c
c0012bf4:	5b                   	pop    ebx
c0012bf5:	5e                   	pop    esi
c0012bf6:	5f                   	pop    edi
c0012bf7:	5d                   	pop    ebp
c0012bf8:	c3                   	ret    
c0012bf9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012bfd:	83 ec 0c             	sub    esp,0xc
c0012c00:	68 a0 2f 02 c0       	push   0xc0022fa0
c0012c05:	e8 68 c2 ff ff       	call   c000ee72 <KePanic(char const*)>
c0012c0a:	83 c4 10             	add    esp,0x10
c0012c0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c11:	eb 97                	jmp    c0012baa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0012c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c17:	e8 4a c4 ff ff       	call   c000f066 <Phys::allocatePage()>
c0012c1c:	83 ec 0c             	sub    esp,0xc
c0012c1f:	89 c5                	mov    ebp,eax
c0012c21:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c0012c27:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012c2b:	6a 01                	push   0x1
c0012c2d:	e8 33 f6 ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c0012c32:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012c39:	6a 01                	push   0x1
c0012c3b:	50                   	push   eax
c0012c3c:	55                   	push   ebp
c0012c3d:	81 cd 07 04 00 00    	or     ebp,0x407
c0012c43:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c47:	51                   	push   ecx
c0012c48:	e8 e5 fe ff ff       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c4d:	83 c4 1c             	add    esp,0x1c
c0012c50:	68 00 10 00 00       	push   0x1000
c0012c55:	6a 00                	push   0x0
c0012c57:	50                   	push   eax
c0012c58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c5c:	e8 8f d8 fe ff       	call   c00004f0 <memset>
c0012c61:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012c65:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012c68:	e8 00 f9 ff ff       	call   c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c0012c6d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c70:	83 c4 10             	add    esp,0x10
c0012c73:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0012c76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c7a:	e9 42 ff ff ff       	jmp    c0012bc1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0012c7f:	90                   	nop

c0012c80 <VAS::VAS(bool)>:
c0012c80:	53                   	push   ebx
c0012c81:	83 ec 28             	sub    esp,0x28
c0012c84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012c8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c90:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c9b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012ca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012caa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012cad:	e8 b4 c3 ff ff       	call   c000f066 <Phys::allocatePage()>
c0012cb2:	89 c2                	mov    edx,eax
c0012cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012cbb:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0012cc1:	83 ec 0c             	sub    esp,0xc
c0012cc4:	6a 01                	push   0x1
c0012cc6:	e8 9a f5 ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c0012ccb:	83 c4 10             	add    esp,0x10
c0012cce:	89 c2                	mov    edx,eax
c0012cd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cd4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012cd7:	83 ec 0c             	sub    esp,0xc
c0012cda:	6a 03                	push   0x3
c0012cdc:	6a 01                	push   0x1
c0012cde:	52                   	push   edx
c0012cdf:	50                   	push   eax
c0012ce0:	53                   	push   ebx
c0012ce1:	e8 4c fe ff ff       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ce6:	83 c4 20             	add    esp,0x20
c0012ce9:	89 c2                	mov    edx,eax
c0012ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012cf2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012cfa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012d02:	7f 1d                	jg     c0012d21 <VAS::VAS(bool)+0xa1>
c0012d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d0f:	c1 e2 02             	shl    edx,0x2
c0012d12:	01 d0                	add    eax,edx
c0012d14:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012d1a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012d1f:	eb d9                	jmp    c0012cfa <VAS::VAS(bool)+0x7a>
c0012d21:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012d29:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012d31:	7f 59                	jg     c0012d8c <VAS::VAS(bool)+0x10c>
c0012d33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d37:	2d 00 02 00 00       	sub    eax,0x200
c0012d3c:	c1 e0 0c             	shl    eax,0xc
c0012d3f:	89 c2                	mov    edx,eax
c0012d41:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012d46:	89 d1                	mov    ecx,edx
c0012d48:	09 c1                	or     ecx,eax
c0012d4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012d55:	c1 e2 02             	shl    edx,0x2
c0012d58:	01 d0                	add    eax,edx
c0012d5a:	83 c9 05             	or     ecx,0x5
c0012d5d:	89 ca                	mov    edx,ecx
c0012d5f:	89 10                	mov    DWORD PTR [eax],edx
c0012d61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d65:	2d 40 03 00 00       	sub    eax,0x340
c0012d6a:	83 f8 7f             	cmp    eax,0x7f
c0012d6d:	77 16                	ja     c0012d85 <VAS::VAS(bool)+0x105>
c0012d6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012d7a:	c1 e2 02             	shl    edx,0x2
c0012d7d:	01 d0                	add    eax,edx
c0012d7f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012d85:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012d8a:	eb 9d                	jmp    c0012d29 <VAS::VAS(bool)+0xa9>
c0012d8c:	8b 15 68 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d768
c0012d92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d99:	05 20 0c 00 00       	add    eax,0xc20
c0012d9e:	81 ca 03 40 00 00    	or     edx,0x4003
c0012da4:	89 10                	mov    DWORD PTR [eax],edx
c0012da6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012daa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012dad:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012db2:	09 c2                	or     edx,eax
c0012db4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012db8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012dbb:	05 fc 0f 00 00       	add    eax,0xffc
c0012dc0:	83 ca 03             	or     edx,0x3
c0012dc3:	89 10                	mov    DWORD PTR [eax],edx
c0012dc5:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012dca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	50                   	push   eax
c0012dd4:	e8 17 65 ff ff       	call   c00092f0 <Device::getName()>
c0012dd9:	83 c4 10             	add    esp,0x10
c0012ddc:	83 ec 08             	sub    esp,0x8
c0012ddf:	68 83 34 02 c0       	push   0xc0023483
c0012de4:	50                   	push   eax
c0012de5:	e8 66 d9 fe ff       	call   c0000750 <strcmp>
c0012dea:	83 c4 10             	add    esp,0x10
c0012ded:	85 c0                	test   eax,eax
c0012def:	0f 94 c0             	sete   al
c0012df2:	0f b6 c0             	movzx  eax,al
c0012df5:	85 c0                	test   eax,eax
c0012df7:	74 68                	je     c0012e61 <VAS::VAS(bool)+0x1e1>
c0012df9:	fa                   	cli    
c0012dfa:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012dff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012e05:	05 68 09 00 00       	add    eax,0x968
c0012e0a:	83 ec 0c             	sub    esp,0xc
c0012e0d:	50                   	push   eax
c0012e0e:	e8 f7 b6 ff ff       	call   c000e50a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012e1b:	89 c3                	mov    ebx,eax
c0012e1d:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012e22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012e28:	05 68 09 00 00       	add    eax,0x968
c0012e2d:	83 ec 0c             	sub    esp,0xc
c0012e30:	50                   	push   eax
c0012e31:	e8 d4 b6 ff ff       	call   c000e50a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	83 ec 08             	sub    esp,0x8
c0012e3c:	50                   	push   eax
c0012e3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e41:	e8 08 f7 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0012e46:	83 c4 10             	add    esp,0x10
c0012e49:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012e50:	6a 11                	push   0x11
c0012e52:	53                   	push   ebx
c0012e53:	50                   	push   eax
c0012e54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e58:	e8 eb fa ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	fb                   	sti    
c0012e61:	90                   	nop
c0012e62:	83 c4 28             	add    esp,0x28
c0012e65:	5b                   	pop    ebx
c0012e66:	c3                   	ret    
c0012e67:	90                   	nop

c0012e68 <VAS::evict(unsigned long)>:
c0012e68:	55                   	push   ebp
c0012e69:	57                   	push   edi
c0012e6a:	56                   	push   esi
c0012e6b:	53                   	push   ebx
c0012e6c:	83 ec 24             	sub    esp,0x24
c0012e6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e73:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012e77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e7b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012e80:	50                   	push   eax
c0012e81:	68 91 34 02 c0       	push   0xc0023491
c0012e86:	e8 d9 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e8b:	e8 33 f5 ff ff       	call   c00123c3 <Virt::allocateSwapfilePage()>
c0012e90:	83 c4 10             	add    esp,0x10
c0012e93:	89 c7                	mov    edi,eax
c0012e95:	a1 4c 51 02 c0       	mov    eax,ds:0xc002514c
c0012e9a:	85 c0                	test   eax,eax
c0012e9c:	7e 40                	jle    c0012ede <VAS::evict(unsigned long)+0x76>
c0012e9e:	89 ee                	mov    esi,ebp
c0012ea0:	31 db                	xor    ebx,ebx
c0012ea2:	83 ec 0c             	sub    esp,0xc
c0012ea5:	57                   	push   edi
c0012ea6:	e8 02 f5 ff ff       	call   c00123ad <Virt::swapIDToSector(unsigned long)>
c0012eab:	89 34 24             	mov    DWORD PTR [esp],esi
c0012eae:	01 d8                	add    eax,ebx
c0012eb0:	6a 01                	push   0x1
c0012eb2:	31 d2                	xor    edx,edx
c0012eb4:	83 c3 01             	add    ebx,0x1
c0012eb7:	52                   	push   edx
c0012eb8:	81 c6 00 02 00 00    	add    esi,0x200
c0012ebe:	50                   	push   eax
c0012ebf:	0f be 05 58 51 02 c0 	movsx  eax,BYTE PTR ds:0xc0025158
c0012ec6:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0012ecd:	50                   	push   eax
c0012ece:	e8 81 72 ff ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ed3:	83 c4 20             	add    esp,0x20
c0012ed6:	39 1d 4c 51 02 c0    	cmp    DWORD PTR ds:0xc002514c,ebx
c0012edc:	7f c4                	jg     c0012ea2 <VAS::evict(unsigned long)+0x3a>
c0012ede:	83 ec 08             	sub    esp,0x8
c0012ee1:	c1 e7 0c             	shl    edi,0xc
c0012ee4:	55                   	push   ebp
c0012ee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ee9:	50                   	push   eax
c0012eea:	e8 5f f6 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0012eef:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ef1:	89 d3                	mov    ebx,edx
c0012ef3:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ef9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012eff:	09 d7                	or     edi,edx
c0012f01:	89 38                	mov    DWORD PTR [eax],edi
c0012f03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f06:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0012f0c:	83 c2 01             	add    edx,0x1
c0012f0f:	89 15 c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,edx
c0012f15:	e8 e3 c0 ff ff       	call   c000effd <Phys::freePage(unsigned long)>
c0012f1a:	0f 20 d8             	mov    eax,cr3
c0012f1d:	0f 22 d8             	mov    cr3,eax
c0012f20:	8b 0d c8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cec8
c0012f26:	51                   	push   ecx
c0012f27:	55                   	push   ebp
c0012f28:	53                   	push   ebx
c0012f29:	68 c4 2f 02 c0       	push   0xc0022fc4
c0012f2e:	e8 31 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f33:	83 c4 18             	add    esp,0x18
c0012f36:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c0012f3b:	50                   	push   eax
c0012f3c:	8d 50 01             	lea    edx,[eax+0x1]
c0012f3f:	68 a6 34 02 c0       	push   0xc00234a6
c0012f44:	89 15 c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edx
c0012f4a:	e8 15 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f4f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f54:	c7 44 24 40 b8 34 02 c0 	mov    DWORD PTR [esp+0x40],0xc00234b8
c0012f5c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012f60:	83 c4 2c             	add    esp,0x2c
c0012f63:	5b                   	pop    ebx
c0012f64:	5e                   	pop    esi
c0012f65:	5f                   	pop    edi
c0012f66:	5d                   	pop    ebp
c0012f67:	e9 f8 3f ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012f6c <VAS::canLockPage(unsigned long)>:
c0012f6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f70:	50                   	push   eax
c0012f71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f75:	52                   	push   edx
c0012f76:	e8 d3 f5 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0012f7b:	59                   	pop    ecx
c0012f7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f7e:	5a                   	pop    edx
c0012f7f:	c1 e8 0b             	shr    eax,0xb
c0012f82:	83 e0 01             	and    eax,0x1
c0012f85:	c3                   	ret    

c0012f86 <VAS::unlockPage(unsigned long)>:
c0012f86:	83 ec 0c             	sub    esp,0xc
c0012f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f8d:	50                   	push   eax
c0012f8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f92:	52                   	push   edx
c0012f93:	e8 b6 f5 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0012f98:	59                   	pop    ecx
c0012f99:	5a                   	pop    edx
c0012f9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f9c:	f6 c6 08             	test   dh,0x8
c0012f9f:	75 09                	jne    c0012faa <VAS::unlockPage(unsigned long)+0x24>
c0012fa1:	80 ce 08             	or     dh,0x8
c0012fa4:	89 10                	mov    DWORD PTR [eax],edx
c0012fa6:	83 c4 0c             	add    esp,0xc
c0012fa9:	c3                   	ret    
c0012faa:	c7 44 24 10 f8 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022ff8
c0012fb2:	83 c4 0c             	add    esp,0xc
c0012fb5:	e9 b8 be ff ff       	jmp    c000ee72 <KePanic(char const*)>

c0012fba <VAS::canLockPages(unsigned long, int)>:
c0012fba:	55                   	push   ebp
c0012fbb:	57                   	push   edi
c0012fbc:	56                   	push   esi
c0012fbd:	53                   	push   ebx
c0012fbe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012fc2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012fc6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fca:	85 ff                	test   edi,edi
c0012fcc:	7e 23                	jle    c0012ff1 <VAS::canLockPages(unsigned long, int)+0x37>
c0012fce:	31 f6                	xor    esi,esi
c0012fd0:	eb 0d                	jmp    c0012fdf <VAS::canLockPages(unsigned long, int)+0x25>
c0012fd2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012fd8:	83 c6 01             	add    esi,0x1
c0012fdb:	39 f7                	cmp    edi,esi
c0012fdd:	74 0d                	je     c0012fec <VAS::canLockPages(unsigned long, int)+0x32>
c0012fdf:	53                   	push   ebx
c0012fe0:	55                   	push   ebp
c0012fe1:	e8 86 ff ff ff       	call   c0012f6c <VAS::canLockPage(unsigned long)>
c0012fe6:	5a                   	pop    edx
c0012fe7:	84 c0                	test   al,al
c0012fe9:	59                   	pop    ecx
c0012fea:	75 e6                	jne    c0012fd2 <VAS::canLockPages(unsigned long, int)+0x18>
c0012fec:	5b                   	pop    ebx
c0012fed:	5e                   	pop    esi
c0012fee:	5f                   	pop    edi
c0012fef:	5d                   	pop    ebp
c0012ff0:	c3                   	ret    
c0012ff1:	b0 01                	mov    al,0x1
c0012ff3:	eb f7                	jmp    c0012fec <VAS::canLockPages(unsigned long, int)+0x32>
c0012ff5:	90                   	nop

c0012ff6 <VAS::unlockPages(unsigned long, int)>:
c0012ff6:	55                   	push   ebp
c0012ff7:	57                   	push   edi
c0012ff8:	56                   	push   esi
c0012ff9:	53                   	push   ebx
c0012ffa:	83 ec 0c             	sub    esp,0xc
c0012ffd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013001:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013005:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013009:	85 ff                	test   edi,edi
c001300b:	7e 1c                	jle    c0013029 <VAS::unlockPages(unsigned long, int)+0x33>
c001300d:	31 f6                	xor    esi,esi
c001300f:	83 ec 08             	sub    esp,0x8
c0013012:	83 c6 01             	add    esi,0x1
c0013015:	53                   	push   ebx
c0013016:	81 c3 00 10 00 00    	add    ebx,0x1000
c001301c:	55                   	push   ebp
c001301d:	e8 64 ff ff ff       	call   c0012f86 <VAS::unlockPage(unsigned long)>
c0013022:	83 c4 10             	add    esp,0x10
c0013025:	39 f7                	cmp    edi,esi
c0013027:	75 e6                	jne    c001300f <VAS::unlockPages(unsigned long, int)+0x19>
c0013029:	83 c4 0c             	add    esp,0xc
c001302c:	5b                   	pop    ebx
c001302d:	5e                   	pop    esi
c001302e:	5f                   	pop    edi
c001302f:	5d                   	pop    ebp
c0013030:	c3                   	ret    
c0013031:	90                   	nop

c0013032 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013032:	55                   	push   ebp
c0013033:	57                   	push   edi
c0013034:	56                   	push   esi
c0013035:	53                   	push   ebx
c0013036:	81 ec 0c 10 00 00    	sub    esp,0x100c
c001303c:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0013043:	89 f3                	mov    ebx,esi
c0013045:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001304b:	53                   	push   ebx
c001304c:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0013053:	50                   	push   eax
c0013054:	e8 f5 f4 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0013059:	5a                   	pop    edx
c001305a:	89 c5                	mov    ebp,eax
c001305c:	59                   	pop    ecx
c001305d:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0013063:	0f 87 cb 00 00 00    	ja     c0013134 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0013069:	83 ec 08             	sub    esp,0x8
c001306c:	56                   	push   esi
c001306d:	68 28 30 02 c0       	push   0xc0023028
c0013072:	e8 ed 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013077:	5e                   	pop    esi
c0013078:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c001307d:	5f                   	pop    edi
c001307e:	50                   	push   eax
c001307f:	68 58 30 02 c0       	push   0xc0023058
c0013084:	e8 db 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013089:	58                   	pop    eax
c001308a:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0013090:	5a                   	pop    edx
c0013091:	51                   	push   ecx
c0013092:	68 7c 30 02 c0       	push   0xc002307c
c0013097:	e8 c8 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	85 db                	test   ebx,ebx
c00130a1:	74 5b                	je     c00130fe <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00130a3:	85 ed                	test   ebp,ebp
c00130a5:	74 21                	je     c00130c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c00130a7:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00130aa:	f7 c6 00 02 00 00    	test   esi,0x200
c00130b0:	0f 85 c5 00 00 00    	jne    c001317b <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00130b6:	89 f0                	mov    eax,esi
c00130b8:	25 01 04 00 00       	and    eax,0x401
c00130bd:	3d 00 04 00 00       	cmp    eax,0x400
c00130c2:	0f 84 39 01 00 00    	je     c0013201 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00130c8:	83 ec 08             	sub    esp,0x8
c00130cb:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00130d0:	50                   	push   eax
c00130d1:	68 70 32 02 c0       	push   0xc0023270
c00130d6:	e8 89 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130db:	5a                   	pop    edx
c00130dc:	8b 1d b0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6b0
c00130e2:	59                   	pop    ecx
c00130e3:	53                   	push   ebx
c00130e4:	68 94 32 02 c0       	push   0xc0023294
c00130e9:	e8 76 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130ee:	83 c4 10             	add    esp,0x10
c00130f1:	31 c0                	xor    eax,eax
c00130f3:	81 c4 0c 10 00 00    	add    esp,0x100c
c00130f9:	5b                   	pop    ebx
c00130fa:	5e                   	pop    esi
c00130fb:	5f                   	pop    edi
c00130fc:	5d                   	pop    ebp
c00130fd:	c3                   	ret    
c00130fe:	83 ec 08             	sub    esp,0x8
c0013101:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0013106:	50                   	push   eax
c0013107:	68 a0 30 02 c0       	push   0xc00230a0
c001310c:	e8 53 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013111:	58                   	pop    eax
c0013112:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0013118:	5a                   	pop    edx
c0013119:	51                   	push   ecx
c001311a:	68 c4 30 02 c0       	push   0xc00230c4
c001311f:	e8 40 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	31 c0                	xor    eax,eax
c0013129:	81 c4 0c 10 00 00    	add    esp,0x100c
c001312f:	5b                   	pop    ebx
c0013130:	5e                   	pop    esi
c0013131:	5f                   	pop    edi
c0013132:	5d                   	pop    ebp
c0013133:	c3                   	ret    
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	68 cd 34 02 c0       	push   0xc00234cd
c001313c:	e8 31 bd ff ff       	call   c000ee72 <KePanic(char const*)>
c0013141:	5f                   	pop    edi
c0013142:	58                   	pop    eax
c0013143:	56                   	push   esi
c0013144:	68 28 30 02 c0       	push   0xc0023028
c0013149:	e8 16 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001314e:	58                   	pop    eax
c001314f:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c0013155:	5a                   	pop    edx
c0013156:	51                   	push   ecx
c0013157:	68 58 30 02 c0       	push   0xc0023058
c001315c:	e8 03 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013161:	5e                   	pop    esi
c0013162:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013167:	5f                   	pop    edi
c0013168:	50                   	push   eax
c0013169:	68 7c 30 02 c0       	push   0xc002307c
c001316e:	e8 f1 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013173:	83 c4 10             	add    esp,0x10
c0013176:	e9 28 ff ff ff       	jmp    c00130a3 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c001317b:	83 ec 0c             	sub    esp,0xc
c001317e:	68 e8 30 02 c0       	push   0xc00230e8
c0013183:	e8 dc 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013188:	e8 d9 be ff ff       	call   c000f066 <Phys::allocatePage()>
c001318d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013190:	83 ca 01             	or     edx,0x1
c0013193:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013196:	0f 20 da             	mov    edx,cr3
c0013199:	0f 22 da             	mov    cr3,edx
c001319c:	ba 00 10 00 00       	mov    edx,0x1000
c00131a1:	89 de                	mov    esi,ebx
c00131a3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00131a7:	89 d1                	mov    ecx,edx
c00131a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00131ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00131ae:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00131b4:	09 c8                	or     eax,ecx
c00131b6:	83 c8 02             	or     eax,0x2
c00131b9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00131bc:	0f 20 d8             	mov    eax,cr3
c00131bf:	0f 22 d8             	mov    cr3,eax
c00131c2:	8d 74 24 10          	lea    esi,[esp+0x10]
c00131c6:	89 df                	mov    edi,ebx
c00131c8:	89 d1                	mov    ecx,edx
c00131ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00131cc:	8b 35 8c d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d68c
c00131d2:	59                   	pop    ecx
c00131d3:	5b                   	pop    ebx
c00131d4:	56                   	push   esi
c00131d5:	68 08 31 02 c0       	push   0xc0023108
c00131da:	e8 85 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131df:	5f                   	pop    edi
c00131e0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00131e5:	5d                   	pop    ebp
c00131e6:	50                   	push   eax
c00131e7:	68 2c 31 02 c0       	push   0xc002312c
c00131ec:	e8 73 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131f1:	83 c4 10             	add    esp,0x10
c00131f4:	b0 01                	mov    al,0x1
c00131f6:	81 c4 0c 10 00 00    	add    esp,0x100c
c00131fc:	5b                   	pop    ebx
c00131fd:	5e                   	pop    esi
c00131fe:	5f                   	pop    edi
c00131ff:	5d                   	pop    ebp
c0013200:	c3                   	ret    
c0013201:	83 ec 08             	sub    esp,0x8
c0013204:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013209:	c1 ee 0c             	shr    esi,0xc
c001320c:	50                   	push   eax
c001320d:	68 50 31 02 c0       	push   0xc0023150
c0013212:	e8 4d 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013217:	e8 4a be ff ff       	call   c000f066 <Phys::allocatePage()>
c001321c:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0013222:	89 c7                	mov    edi,eax
c0013224:	58                   	pop    eax
c0013225:	5a                   	pop    edx
c0013226:	51                   	push   ecx
c0013227:	68 74 31 02 c0       	push   0xc0023174
c001322c:	e8 33 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013231:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001323d:	09 fa                	or     edx,edi
c001323f:	81 ca 01 08 00 00    	or     edx,0x801
c0013245:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013248:	8b 3d 4c 51 02 c0    	mov    edi,DWORD PTR ds:0xc002514c
c001324e:	85 ff                	test   edi,edi
c0013250:	7e 65                	jle    c00132b7 <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c0013252:	89 dd                	mov    ebp,ebx
c0013254:	31 ff                	xor    edi,edi
c0013256:	83 ec 08             	sub    esp,0x8
c0013259:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001325e:	50                   	push   eax
c001325f:	68 28 32 02 c0       	push   0xc0023228
c0013264:	e8 fb 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013269:	89 34 24             	mov    DWORD PTR [esp],esi
c001326c:	e8 3c f1 ff ff       	call   c00123ad <Virt::swapIDToSector(unsigned long)>
c0013271:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013274:	01 f8                	add    eax,edi
c0013276:	6a 01                	push   0x1
c0013278:	31 d2                	xor    edx,edx
c001327a:	83 c7 01             	add    edi,0x1
c001327d:	52                   	push   edx
c001327e:	81 c5 00 02 00 00    	add    ebp,0x200
c0013284:	50                   	push   eax
c0013285:	0f be 05 58 51 02 c0 	movsx  eax,BYTE PTR ds:0xc0025158
c001328c:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0013293:	50                   	push   eax
c0013294:	e8 4f 6e ff ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0013299:	83 c4 18             	add    esp,0x18
c001329c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00132a1:	50                   	push   eax
c00132a2:	68 4c 32 02 c0       	push   0xc002324c
c00132a7:	e8 b8 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00132ac:	83 c4 10             	add    esp,0x10
c00132af:	39 3d 4c 51 02 c0    	cmp    DWORD PTR ds:0xc002514c,edi
c00132b5:	7f 9f                	jg     c0013256 <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c00132b7:	83 ec 08             	sub    esp,0x8
c00132ba:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00132bf:	50                   	push   eax
c00132c0:	68 98 31 02 c0       	push   0xc0023198
c00132c5:	e8 9a 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00132ca:	83 c4 0c             	add    esp,0xc
c00132cd:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00132d2:	83 e8 01             	sub    eax,0x1
c00132d5:	50                   	push   eax
c00132d6:	a3 c8 ce 02 c0       	mov    ds:0xc002cec8,eax
c00132db:	53                   	push   ebx
c00132dc:	68 df 34 02 c0       	push   0xc00234df
c00132e1:	e8 7e 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00132e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00132e9:	e8 9c f0 ff ff       	call   c001238a <Virt::freeSwapfilePage(unsigned long)>
c00132ee:	58                   	pop    eax
c00132ef:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00132f5:	5a                   	pop    edx
c00132f6:	51                   	push   ecx
c00132f7:	68 bc 31 02 c0       	push   0xc00231bc
c00132fc:	e8 63 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013301:	0f 20 d8             	mov    eax,cr3
c0013304:	0f 22 d8             	mov    cr3,eax
c0013307:	c7 04 24 f4 34 02 c0 	mov    DWORD PTR [esp],0xc00234f4
c001330e:	e8 51 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013313:	5b                   	pop    ebx
c0013314:	8b 3d 8c d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d68c
c001331a:	5e                   	pop    esi
c001331b:	57                   	push   edi
c001331c:	68 e0 31 02 c0       	push   0xc00231e0
c0013321:	e8 3e 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013326:	5d                   	pop    ebp
c0013327:	58                   	pop    eax
c0013328:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001332d:	50                   	push   eax
c001332e:	68 04 32 02 c0       	push   0xc0023204
c0013333:	e8 2c 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013338:	83 c4 10             	add    esp,0x10
c001333b:	b0 01                	mov    al,0x1
c001333d:	e9 b1 fd ff ff       	jmp    c00130f3 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c0013342 <VAS::lockPage(unsigned long)>:
c0013342:	56                   	push   esi
c0013343:	53                   	push   ebx
c0013344:	83 ec 04             	sub    esp,0x4
c0013347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001334b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001334f:	50                   	push   eax
c0013350:	56                   	push   esi
c0013351:	e8 f8 f1 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0013356:	5a                   	pop    edx
c0013357:	89 c3                	mov    ebx,eax
c0013359:	59                   	pop    ecx
c001335a:	8b 00                	mov    eax,DWORD PTR [eax]
c001335c:	a8 01                	test   al,0x1
c001335e:	74 10                	je     c0013370 <VAS::lockPage(unsigned long)+0x2e>
c0013360:	f6 c4 08             	test   ah,0x8
c0013363:	74 28                	je     c001338d <VAS::lockPage(unsigned long)+0x4b>
c0013365:	80 e4 f7             	and    ah,0xf7
c0013368:	89 03                	mov    DWORD PTR [ebx],eax
c001336a:	83 c4 04             	add    esp,0x4
c001336d:	5b                   	pop    ebx
c001336e:	5e                   	pop    esi
c001336f:	c3                   	ret    
c0013370:	83 ec 08             	sub    esp,0x8
c0013373:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013378:	50                   	push   eax
c0013379:	56                   	push   esi
c001337a:	e8 b3 fc ff ff       	call   c0013032 <VAS::tryLoadBackOffDisk(unsigned long)>
c001337f:	83 c4 10             	add    esp,0x10
c0013382:	84 c0                	test   al,al
c0013384:	74 19                	je     c001339f <VAS::lockPage(unsigned long)+0x5d>
c0013386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013388:	f6 c4 08             	test   ah,0x8
c001338b:	75 d8                	jne    c0013365 <VAS::lockPage(unsigned long)+0x23>
c001338d:	c7 44 24 10 f8 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022ff8
c0013395:	83 c4 04             	add    esp,0x4
c0013398:	5b                   	pop    ebx
c0013399:	5e                   	pop    esi
c001339a:	e9 d3 ba ff ff       	jmp    c000ee72 <KePanic(char const*)>
c001339f:	83 ec 0c             	sub    esp,0xc
c00133a2:	68 b8 32 02 c0       	push   0xc00232b8
c00133a7:	e8 c6 ba ff ff       	call   c000ee72 <KePanic(char const*)>
c00133ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	eb ad                	jmp    c0013360 <VAS::lockPage(unsigned long)+0x1e>
c00133b3:	90                   	nop

c00133b4 <VAS::lockPages(unsigned long, int)>:
c00133b4:	55                   	push   ebp
c00133b5:	57                   	push   edi
c00133b6:	56                   	push   esi
c00133b7:	53                   	push   ebx
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00133bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00133c3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00133c7:	85 ff                	test   edi,edi
c00133c9:	7e 1c                	jle    c00133e7 <VAS::lockPages(unsigned long, int)+0x33>
c00133cb:	31 f6                	xor    esi,esi
c00133cd:	83 ec 08             	sub    esp,0x8
c00133d0:	83 c6 01             	add    esi,0x1
c00133d3:	53                   	push   ebx
c00133d4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00133da:	55                   	push   ebp
c00133db:	e8 62 ff ff ff       	call   c0013342 <VAS::lockPage(unsigned long)>
c00133e0:	83 c4 10             	add    esp,0x10
c00133e3:	39 f7                	cmp    edi,esi
c00133e5:	75 e6                	jne    c00133cd <VAS::lockPages(unsigned long, int)+0x19>
c00133e7:	83 c4 0c             	add    esp,0xc
c00133ea:	5b                   	pop    ebx
c00133eb:	5e                   	pop    esi
c00133ec:	5f                   	pop    edi
c00133ed:	5d                   	pop    ebp
c00133ee:	c3                   	ret    
c00133ef:	90                   	nop

c00133f0 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00133f0:	55                   	push   ebp
c00133f1:	57                   	push   edi
c00133f2:	56                   	push   esi
c00133f3:	53                   	push   ebx
c00133f4:	83 ec 28             	sub    esp,0x28
c00133f7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00133fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00133ff:	50                   	push   eax
c0013400:	e8 60 ee ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c0013405:	83 c4 0c             	add    esp,0xc
c0013408:	89 c5                	mov    ebp,eax
c001340a:	6a 07                	push   0x7
c001340c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013410:	52                   	push   edx
c0013411:	56                   	push   esi
c0013412:	e8 35 f6 ff ff       	call   c0012a4c <VAS::allocatePages(int, int)>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	89 c7                	mov    edi,eax
c001341c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013420:	85 c9                	test   ecx,ecx
c0013422:	74 2f                	je     c0013453 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013424:	31 db                	xor    ebx,ebx
c0013426:	e8 3b bc ff ff       	call   c000f066 <Phys::allocatePage()>
c001342b:	83 c3 01             	add    ebx,0x1
c001342e:	6a 03                	push   0x3
c0013430:	55                   	push   ebp
c0013431:	50                   	push   eax
c0013432:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013436:	56                   	push   esi
c0013437:	e8 0c f5 ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001343c:	6a 07                	push   0x7
c001343e:	57                   	push   edi
c001343f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013443:	50                   	push   eax
c0013444:	56                   	push   esi
c0013445:	e8 fe f4 ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001344a:	83 c4 20             	add    esp,0x20
c001344d:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0013451:	75 d3                	jne    c0013426 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013453:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013457:	89 28                	mov    DWORD PTR [eax],ebp
c0013459:	83 c4 1c             	add    esp,0x1c
c001345c:	89 f8                	mov    eax,edi
c001345e:	5b                   	pop    ebx
c001345f:	5e                   	pop    esi
c0013460:	5f                   	pop    edi
c0013461:	5d                   	pop    ebp
c0013462:	c3                   	ret    
c0013463:	90                   	nop

c0013464 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013464:	53                   	push   ebx
c0013465:	83 ec 14             	sub    esp,0x14
c0013468:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001346c:	68 e8 32 02 c0       	push   0xc00232e8
c0013471:	e8 ee 3a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013476:	c7 04 24 48 33 02 c0 	mov    DWORD PTR [esp],0xc0023348
c001347d:	e8 e2 3a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013482:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013486:	83 c4 18             	add    esp,0x18
c0013489:	5b                   	pop    ebx
c001348a:	e9 de f0 ff ff       	jmp    c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c001348f:	90                   	nop

c0013490 <VAS::scanForEviction()>:
c0013490:	57                   	push   edi
c0013491:	56                   	push   esi
c0013492:	31 f6                	xor    esi,esi
c0013494:	53                   	push   ebx
c0013495:	83 ec 18             	sub    esp,0x18
c0013498:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001349c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00134a1:	50                   	push   eax
c00134a2:	68 c4 33 02 c0       	push   0xc00233c4
c00134a7:	e8 b8 3a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00134ac:	c7 04 24 fb 34 02 c0 	mov    DWORD PTR [esp],0xc00234fb
c00134b3:	e8 ac 3a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00134b8:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00134c4:	75 0e                	jne    c00134d4 <VAS::scanForEviction()+0x44>
c00134c6:	89 da                	mov    edx,ebx
c00134c8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00134cb:	c1 ea 16             	shr    edx,0x16
c00134ce:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00134d2:	74 5b                	je     c001352f <VAS::scanForEviction()+0x9f>
c00134d4:	83 ec 08             	sub    esp,0x8
c00134d7:	53                   	push   ebx
c00134d8:	57                   	push   edi
c00134d9:	e8 70 f0 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00134e3:	89 d1                	mov    ecx,edx
c00134e5:	c1 e9 0c             	shr    ecx,0xc
c00134e8:	74 10                	je     c00134fa <VAS::scanForEviction()+0x6a>
c00134ea:	89 d1                	mov    ecx,edx
c00134ec:	81 e1 01 08 00 00    	and    ecx,0x801
c00134f2:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00134f8:	74 40                	je     c001353a <VAS::scanForEviction()+0xaa>
c00134fa:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013500:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013506:	76 2d                	jbe    c0013535 <VAS::scanForEviction()+0xa5>
c0013508:	83 c6 01             	add    esi,0x1
c001350b:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0013512:	83 fe 03             	cmp    esi,0x3
c0013515:	74 32                	je     c0013549 <VAS::scanForEviction()+0xb9>
c0013517:	31 db                	xor    ebx,ebx
c0013519:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001351f:	75 b3                	jne    c00134d4 <VAS::scanForEviction()+0x44>
c0013521:	89 da                	mov    edx,ebx
c0013523:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013526:	c1 ea 16             	shr    edx,0x16
c0013529:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001352d:	75 a5                	jne    c00134d4 <VAS::scanForEviction()+0x44>
c001352f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013535:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013538:	eb 84                	jmp    c00134be <VAS::scanForEviction()+0x2e>
c001353a:	f6 c2 20             	test   dl,0x20
c001353d:	74 13                	je     c0013552 <VAS::scanForEviction()+0xc2>
c001353f:	83 e2 df             	and    edx,0xffffffdf
c0013542:	89 10                	mov    DWORD PTR [eax],edx
c0013544:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013547:	eb b1                	jmp    c00134fa <VAS::scanForEviction()+0x6a>
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	31 c0                	xor    eax,eax
c001354e:	5b                   	pop    ebx
c001354f:	5e                   	pop    esi
c0013550:	5f                   	pop    edi
c0013551:	c3                   	ret    
c0013552:	83 ec 08             	sub    esp,0x8
c0013555:	89 d0                	mov    eax,edx
c0013557:	25 00 f0 ff ff       	and    eax,0xfffff000
c001355c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013560:	53                   	push   ebx
c0013561:	68 17 35 02 c0       	push   0xc0023517
c0013566:	e8 f9 39 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001356b:	58                   	pop    eax
c001356c:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001356f:	5a                   	pop    edx
c0013570:	51                   	push   ecx
c0013571:	57                   	push   edi
c0013572:	e8 f1 f8 ff ff       	call   c0012e68 <VAS::evict(unsigned long)>
c0013577:	5b                   	pop    ebx
c0013578:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001357b:	5e                   	pop    esi
c001357c:	50                   	push   eax
c001357d:	68 2b 35 02 c0       	push   0xc002352b
c0013582:	e8 dd 39 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013587:	58                   	pop    eax
c0013588:	5a                   	pop    edx
c0013589:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001358d:	50                   	push   eax
c001358e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013592:	68 3e 35 02 c0       	push   0xc002353e
c0013597:	e8 c8 39 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001359c:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001359f:	81 c1 00 10 00 00    	add    ecx,0x1000
c00135a5:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00135a8:	8b 3d b0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6b0
c00135ae:	5b                   	pop    ebx
c00135af:	5e                   	pop    esi
c00135b0:	57                   	push   edi
c00135b1:	68 e4 33 02 c0       	push   0xc00233e4
c00135b6:	e8 a9 39 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00135bb:	83 c4 10             	add    esp,0x10
c00135be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	5b                   	pop    ebx
c00135c6:	5e                   	pop    esi
c00135c7:	5f                   	pop    edi
c00135c8:	c3                   	ret    

c00135c9 <mapVASFirstTime>:
c00135c9:	55                   	push   ebp
c00135ca:	57                   	push   edi
c00135cb:	56                   	push   esi
c00135cc:	53                   	push   ebx
c00135cd:	83 ec 0c             	sub    esp,0xc
c00135d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00135d8:	83 fa 01             	cmp    edx,0x1
c00135db:	0f 84 cb 00 00 00    	je     c00136ac <mapVASFirstTime+0xe3>
c00135e1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00135e4:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00135e7:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00135ec:	c1 e5 15             	shl    ebp,0x15
c00135ef:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00135f4:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00135fa:	29 eb                	sub    ebx,ebp
c00135fc:	29 ef                	sub    edi,ebp
c00135fe:	e8 63 ba ff ff       	call   c000f066 <Phys::allocatePage()>
c0013603:	83 ec 0c             	sub    esp,0xc
c0013606:	68 03 04 00 00       	push   0x403
c001360b:	6a 01                	push   0x1
c001360d:	53                   	push   ebx
c001360e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013614:	50                   	push   eax
c0013615:	56                   	push   esi
c0013616:	e8 17 f5 ff ff       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001361b:	83 c4 20             	add    esp,0x20
c001361e:	39 fb                	cmp    ebx,edi
c0013620:	75 dc                	jne    c00135fe <mapVASFirstTime+0x35>
c0013622:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0013627:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001362c:	29 eb                	sub    ebx,ebp
c001362e:	29 ef                	sub    edi,ebp
c0013630:	e8 31 ba ff ff       	call   c000f066 <Phys::allocatePage()>
c0013635:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013639:	83 fa 01             	cmp    edx,0x1
c001363c:	19 d2                	sbb    edx,edx
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	83 e2 04             	and    edx,0x4
c0013644:	81 c2 03 04 00 00    	add    edx,0x403
c001364a:	52                   	push   edx
c001364b:	6a 01                	push   0x1
c001364d:	53                   	push   ebx
c001364e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013654:	50                   	push   eax
c0013655:	56                   	push   esi
c0013656:	e8 d7 f4 ff ff       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001365b:	83 c4 20             	add    esp,0x20
c001365e:	39 df                	cmp    edi,ebx
c0013660:	75 ce                	jne    c0013630 <mapVASFirstTime+0x67>
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c001366a:	6a 04                	push   0x4
c001366c:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c0013672:	6a ff                	push   0xffffffff
c0013674:	c1 eb 0c             	shr    ebx,0xc
c0013677:	53                   	push   ebx
c0013678:	68 00 60 02 c0       	push   0xc0026000
c001367d:	56                   	push   esi
c001367e:	e8 65 f0 ff ff       	call   c00126e8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013683:	83 c4 14             	add    esp,0x14
c0013686:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001368b:	6a 04                	push   0x4
c001368d:	6a ff                	push   0xffffffff
c001368f:	53                   	push   ebx
c0013690:	68 00 60 02 c0       	push   0xc0026000
c0013695:	50                   	push   eax
c0013696:	e8 4d f0 ff ff       	call   c00126e8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001369b:	0f 20 d8             	mov    eax,cr3
c001369e:	0f 22 d8             	mov    cr3,eax
c00136a1:	83 c4 20             	add    esp,0x20
c00136a4:	83 c4 0c             	add    esp,0xc
c00136a7:	5b                   	pop    ebx
c00136a8:	5e                   	pop    esi
c00136a9:	5f                   	pop    edi
c00136aa:	5d                   	pop    ebp
c00136ab:	c3                   	ret    
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	68 4b 35 02 c0       	push   0xc002354b
c00136b4:	e8 ab 38 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00136b9:	83 c4 10             	add    esp,0x10
c00136bc:	83 c4 0c             	add    esp,0xc
c00136bf:	5b                   	pop    ebx
c00136c0:	5e                   	pop    esi
c00136c1:	5f                   	pop    edi
c00136c2:	5d                   	pop    ebp
c00136c3:	c3                   	ret    

c00136c4 <SysEject(regs*)>:
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	83 ca ff             	or     edx,0xffffffff
c00136ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ce:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00136d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00136d6:	83 e9 41             	sub    ecx,0x41
c00136d9:	83 f9 19             	cmp    ecx,0x19
c00136dc:	77 18                	ja     c00136f6 <SysEject(regs*)+0x32>
c00136de:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00136e5:	85 c9                	test   ecx,ecx
c00136e7:	74 0d                	je     c00136f6 <SysEject(regs*)+0x32>
c00136e9:	83 ec 0c             	sub    esp,0xc
c00136ec:	51                   	push   ecx
c00136ed:	e8 8c 69 ff ff       	call   c000a07e <LogicalDisk::eject()>
c00136f2:	83 c4 10             	add    esp,0x10
c00136f5:	99                   	cdq    
c00136f6:	83 c4 0c             	add    esp,0xc
c00136f9:	c3                   	ret    

c00136fa <SysExit(regs*)>:
c00136fa:	83 ec 18             	sub    esp,0x18
c00136fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013701:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013704:	e8 37 2b 00 00       	call   c0016240 <terminateTask(int)>
c0013709:	83 c8 ff             	or     eax,0xffffffff
c001370c:	83 c4 1c             	add    esp,0x1c
c001370f:	89 c2                	mov    edx,eax
c0013711:	c3                   	ret    

c0013712 <SysGetCwd(regs*)>:
c0013712:	83 ec 10             	sub    esp,0x10
c0013715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013719:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001371c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001371f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013724:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013727:	e8 9a 46 ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c001372c:	83 c4 1c             	add    esp,0x1c
c001372f:	99                   	cdq    
c0013730:	c3                   	ret    

c0013731 <SysGetPID(regs*)>:
c0013731:	83 ec 14             	sub    esp,0x14
c0013734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013739:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001373c:	ff 30                	push   DWORD PTR [eax]
c001373e:	68 64 35 02 c0       	push   0xc0023564
c0013743:	e8 1c 38 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001374d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013750:	8b 00                	mov    eax,DWORD PTR [eax]
c0013752:	83 c4 1c             	add    esp,0x1c
c0013755:	99                   	cdq    
c0013756:	c3                   	ret    

c0013757 <SysGetRAMData(regs*)>:
c0013757:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c001375d:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013762:	03 05 a8 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cda8
c0013768:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001376e:	99                   	cdq    
c001376f:	f7 f9                	idiv   ecx
c0013771:	c1 e0 18             	shl    eax,0x18
c0013774:	09 c8                	or     eax,ecx
c0013776:	99                   	cdq    
c0013777:	c3                   	ret    

c0013778 <SysGetVGAPtr(regs*)>:
c0013778:	55                   	push   ebp
c0013779:	57                   	push   edi
c001377a:	56                   	push   esi
c001377b:	53                   	push   ebx
c001377c:	83 ec 0c             	sub    esp,0xc
c001377f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013783:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013786:	83 f8 ff             	cmp    eax,0xffffffff
c0013789:	74 1b                	je     c00137a6 <SysGetVGAPtr(regs*)+0x2e>
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	50                   	push   eax
c001378f:	e8 5c 25 00 00       	call   c0015cf0 <Thr::processFromPID(int)>
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	89 c1                	mov    ecx,eax
c0013799:	31 d2                	xor    edx,edx
c001379b:	b8 01 00 00 00       	mov    eax,0x1
c00137a0:	85 c9                	test   ecx,ecx
c00137a2:	75 0a                	jne    c00137ae <SysGetVGAPtr(regs*)+0x36>
c00137a4:	eb 61                	jmp    c0013807 <SysGetVGAPtr(regs*)+0x8f>
c00137a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137ab:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00137ae:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00137b4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00137b8:	74 0c                	je     c00137c6 <SysGetVGAPtr(regs*)+0x4e>
c00137ba:	83 ec 0c             	sub    esp,0xc
c00137bd:	55                   	push   ebp
c00137be:	e8 1c db ff ff       	call   c00112df <setActiveTerminal(VgaText*)>
c00137c3:	83 c4 10             	add    esp,0x10
c00137c6:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00137c9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00137cc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00137d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137d3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00137d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00137d9:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00137df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00137e2:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00137e5:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00137eb:	50                   	push   eax
c00137ec:	50                   	push   eax
c00137ed:	68 73 35 02 c0       	push   0xc0023573
c00137f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00137f5:	05 a8 0f 00 00       	add    eax,0xfa8
c00137fa:	50                   	push   eax
c00137fb:	e8 40 ce fe ff       	call   c0000640 <strcpy>
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	31 c0                	xor    eax,eax
c0013805:	31 d2                	xor    edx,edx
c0013807:	83 c4 0c             	add    esp,0xc
c001380a:	5b                   	pop    ebx
c001380b:	5e                   	pop    esi
c001380c:	5f                   	pop    edi
c001380d:	5d                   	pop    ebp
c001380e:	c3                   	ret    
c001380f:	90                   	nop

c0013810 <SysKill(regs*)>:
c0013810:	53                   	push   ebx
c0013811:	83 ec 08             	sub    esp,0x8
c0013814:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013818:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001381c:	75 16                	jne    c0013834 <SysKill(regs*)+0x24>
c001381e:	83 ec 0c             	sub    esp,0xc
c0013821:	68 7d 35 02 c0       	push   0xc002357d
c0013826:	e8 47 b6 ff ff       	call   c000ee72 <KePanic(char const*)>
c001382b:	83 c4 10             	add    esp,0x10
c001382e:	e9 89 00 00 00       	jmp    c00138bc <SysKill(regs*)+0xac>
c0013833:	90                   	nop
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	68 cc d6 02 c0       	push   0xc002d6cc
c001383c:	e8 37 cf 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013841:	8d 76 00             	lea    esi,[esi+0x0]
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	85 c0                	test   eax,eax
c0013849:	74 19                	je     c0013864 <SysKill(regs*)+0x54>
c001384b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001384e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013851:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013853:	74 33                	je     c0013888 <SysKill(regs*)+0x78>
c0013855:	52                   	push   edx
c0013856:	52                   	push   edx
c0013857:	50                   	push   eax
c0013858:	68 cc d6 02 c0       	push   0xc002d6cc
c001385d:	e8 22 d4 00 00       	call   c0020c84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013862:	eb e0                	jmp    c0013844 <SysKill(regs*)+0x34>
c0013864:	83 ec 0c             	sub    esp,0xc
c0013867:	68 c0 d6 02 c0       	push   0xc002d6c0
c001386c:	e8 07 cf 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013871:	8d 76 00             	lea    esi,[esi+0x0]
c0013874:	83 c4 10             	add    esp,0x10
c0013877:	85 c0                	test   eax,eax
c0013879:	74 41                	je     c00138bc <SysKill(regs*)+0xac>
c001387b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001387e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013881:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013883:	75 27                	jne    c00138ac <SysKill(regs*)+0x9c>
c0013885:	8d 76 00             	lea    esi,[esi+0x0]
c0013888:	51                   	push   ecx
c0013889:	51                   	push   ecx
c001388a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001388d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013892:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013895:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001389b:	e8 1b c7 ff ff       	call   c000ffbb <KeRaiseSignal(SigHandlerBlock*, int)>
c00138a0:	83 c4 10             	add    esp,0x10
c00138a3:	31 c0                	xor    eax,eax
c00138a5:	31 d2                	xor    edx,edx
c00138a7:	eb 1b                	jmp    c00138c4 <SysKill(regs*)+0xb4>
c00138a9:	8d 76 00             	lea    esi,[esi+0x0]
c00138ac:	52                   	push   edx
c00138ad:	52                   	push   edx
c00138ae:	50                   	push   eax
c00138af:	68 c0 d6 02 c0       	push   0xc002d6c0
c00138b4:	e8 cb d3 00 00       	call   c0020c84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00138b9:	eb b9                	jmp    c0013874 <SysKill(regs*)+0x64>
c00138bb:	90                   	nop
c00138bc:	83 c8 ff             	or     eax,0xffffffff
c00138bf:	89 c2                	mov    edx,eax
c00138c1:	8d 76 00             	lea    esi,[esi+0x0]
c00138c4:	83 c4 08             	add    esp,0x8
c00138c7:	5b                   	pop    ebx
c00138c8:	c3                   	ret    

c00138c9 <SysLoadDLL(regs*)>:
c00138c9:	56                   	push   esi
c00138ca:	53                   	push   ebx
c00138cb:	31 d2                	xor    edx,edx
c00138cd:	51                   	push   ecx
c00138ce:	b8 01 00 00 00       	mov    eax,0x1
c00138d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00138d7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00138db:	0f 84 8c 00 00 00    	je     c001396d <SysLoadDLL(regs*)+0xa4>
c00138e1:	83 ec 0c             	sub    esp,0xc
c00138e4:	68 14 01 00 00       	push   0x114
c00138e9:	e8 3d b2 ff ff       	call   c000eb2b <malloc>
c00138ee:	83 c4 0c             	add    esp,0xc
c00138f1:	89 c3                	mov    ebx,eax
c00138f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138f8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00138fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00138fe:	53                   	push   ebx
c00138ff:	e8 2e 48 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	31 d2                	xor    edx,edx
c0013909:	b8 02 00 00 00       	mov    eax,0x2
c001390e:	85 db                	test   ebx,ebx
c0013910:	74 5b                	je     c001396d <SysLoadDLL(regs*)+0xa4>
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	53                   	push   ebx
c0013916:	e8 f9 4a ff ff       	call   c0008414 <File::exists()>
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	84 c0                	test   al,al
c0013920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013922:	75 11                	jne    c0013935 <SysLoadDLL(regs*)+0x6c>
c0013924:	83 ec 0c             	sub    esp,0xc
c0013927:	53                   	push   ebx
c0013928:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	b8 03 00 00 00       	mov    eax,0x3
c0013933:	eb 36                	jmp    c001396b <SysLoadDLL(regs*)+0xa2>
c0013935:	83 ec 0c             	sub    esp,0xc
c0013938:	53                   	push   ebx
c0013939:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001393c:	58                   	pop    eax
c001393d:	5a                   	pop    edx
c001393e:	6a 00                	push   0x0
c0013940:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013943:	e8 29 16 00 00       	call   c0014f71 <Thr::loadDLL(char const*, bool)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	89 c1                	mov    ecx,eax
c001394d:	31 d2                	xor    edx,edx
c001394f:	b8 04 00 00 00       	mov    eax,0x4
c0013954:	85 c9                	test   ecx,ecx
c0013956:	74 15                	je     c001396d <SysLoadDLL(regs*)+0xa4>
c0013958:	53                   	push   ebx
c0013959:	53                   	push   ebx
c001395a:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0013960:	51                   	push   ecx
c0013961:	e8 5d 18 00 00       	call   c00151c3 <Thr::executeDLL(unsigned long, void*)>
c0013966:	83 c4 10             	add    esp,0x10
c0013969:	31 c0                	xor    eax,eax
c001396b:	31 d2                	xor    edx,edx
c001396d:	59                   	pop    ecx
c001396e:	5b                   	pop    ebx
c001396f:	5e                   	pop    esi
c0013970:	c3                   	ret    

c0013971 <SysRead(regs*)>:
c0013971:	57                   	push   edi
c0013972:	56                   	push   esi
c0013973:	53                   	push   ebx
c0013974:	83 ec 10             	sub    esp,0x10
c0013977:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001397b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001397e:	83 f8 02             	cmp    eax,0x2
c0013981:	77 10                	ja     c0013993 <SysRead(regs*)+0x22>
c0013983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001398b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013991:	eb 0e                	jmp    c00139a1 <SysRead(regs*)+0x30>
c0013993:	83 ec 0c             	sub    esp,0xc
c0013996:	50                   	push   eax
c0013997:	e8 5d e7 ff ff       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c001399c:	83 c4 10             	add    esp,0x10
c001399f:	89 c1                	mov    ecx,eax
c00139a1:	83 c8 ff             	or     eax,0xffffffff
c00139a4:	85 c9                	test   ecx,ecx
c00139a6:	89 c2                	mov    edx,eax
c00139a8:	74 28                	je     c00139d2 <SysRead(regs*)+0x61>
c00139aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139b2:	31 ff                	xor    edi,edi
c00139b4:	83 ec 0c             	sub    esp,0xc
c00139b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139bd:	52                   	push   edx
c00139be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139c1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00139c4:	57                   	push   edi
c00139c5:	56                   	push   esi
c00139c6:	51                   	push   ecx
c00139c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00139ce:	83 c4 20             	add    esp,0x20
c00139d1:	99                   	cdq    
c00139d2:	83 c4 10             	add    esp,0x10
c00139d5:	5b                   	pop    ebx
c00139d6:	5e                   	pop    esi
c00139d7:	5f                   	pop    edi
c00139d8:	c3                   	ret    

c00139d9 <SysRegisterSignal(regs*)>:
c00139d9:	83 ec 18             	sub    esp,0x18
c00139dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139e0:	6a 00                	push   0x0
c00139e2:	6a 00                	push   0x0
c00139e4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00139e7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139f2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00139f8:	e8 88 c5 ff ff       	call   c000ff85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00139fd:	83 c4 2c             	add    esp,0x2c
c0013a00:	99                   	cdq    
c0013a01:	c3                   	ret    

c0013a02 <SysRegistryGetTypeFromPath(regs*)>:
c0013a02:	53                   	push   ebx
c0013a03:	81 ec 40 01 00 00    	sub    esp,0x140
c0013a09:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013a10:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a13:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a16:	e8 d9 9a ff ff       	call   c000d4f4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013a1b:	83 c4 10             	add    esp,0x10
c0013a1e:	89 c1                	mov    ecx,eax
c0013a20:	85 c0                	test   eax,eax
c0013a22:	74 15                	je     c0013a39 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0013a24:	50                   	push   eax
c0013a25:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013a29:	50                   	push   eax
c0013a2a:	51                   	push   ecx
c0013a2b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a2e:	e8 a5 96 ff ff       	call   c000d0d8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	99                   	cdq    
c0013a37:	eb 05                	jmp    c0013a3e <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0013a39:	83 c8 ff             	or     eax,0xffffffff
c0013a3c:	89 c2                	mov    edx,eax
c0013a3e:	81 c4 38 01 00 00    	add    esp,0x138
c0013a44:	5b                   	pop    ebx
c0013a45:	c3                   	ret    

c0013a46 <SysRegistryReadExtent(regs*)>:
c0013a46:	83 ec 1c             	sub    esp,0x1c
c0013a49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a4d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013a50:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013a53:	85 c0                	test   eax,eax
c0013a55:	79 1f                	jns    c0013a76 <SysRegistryReadExtent(regs*)+0x30>
c0013a57:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013a5c:	52                   	push   edx
c0013a5d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013a61:	52                   	push   edx
c0013a62:	50                   	push   eax
c0013a63:	51                   	push   ecx
c0013a64:	e8 61 95 ff ff       	call   c000cfca <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013a69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a71:	83 c4 10             	add    esp,0x10
c0013a74:	eb 14                	jmp    c0013a8a <SysRegistryReadExtent(regs*)+0x44>
c0013a76:	83 ec 04             	sub    esp,0x4
c0013a79:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013a7c:	50                   	push   eax
c0013a7d:	51                   	push   ecx
c0013a7e:	e8 e1 8f ff ff       	call   c000ca64 <CmGetString(Reghive_Tag*, int, char*)>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	31 c0                	xor    eax,eax
c0013a88:	31 d2                	xor    edx,edx
c0013a8a:	83 c4 1c             	add    esp,0x1c
c0013a8d:	c3                   	ret    

c0013a8e <SysRegistryPathToExtentLookup(regs*)>:
c0013a8e:	83 ec 14             	sub    esp,0x14
c0013a91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a95:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013a98:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a9b:	e8 54 9a ff ff       	call   c000d4f4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013aa0:	83 c4 1c             	add    esp,0x1c
c0013aa3:	99                   	cdq    
c0013aa4:	c3                   	ret    

c0013aa5 <SysRegistryEnterDirectory(regs*)>:
c0013aa5:	83 ec 14             	sub    esp,0x14
c0013aa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013aac:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013aaf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ab2:	e8 24 90 ff ff       	call   c000cadb <CmEnterDirectory(Reghive_Tag*, int)>
c0013ab7:	83 c4 1c             	add    esp,0x1c
c0013aba:	99                   	cdq    
c0013abb:	c3                   	ret    

c0013abc <SysRegistryGetNext(regs*)>:
c0013abc:	83 ec 14             	sub    esp,0x14
c0013abf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ac3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013ac6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ac9:	e8 4c 90 ff ff       	call   c000cb1a <CmGetNext(Reghive_Tag*, int)>
c0013ace:	83 c4 1c             	add    esp,0x1c
c0013ad1:	99                   	cdq    
c0013ad2:	c3                   	ret    

c0013ad3 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013ad3:	57                   	push   edi
c0013ad4:	56                   	push   esi
c0013ad5:	53                   	push   ebx
c0013ad6:	81 ec 34 01 00 00    	sub    esp,0x134
c0013adc:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013ae3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ae7:	57                   	push   edi
c0013ae8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013aeb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013aee:	e8 e5 95 ff ff       	call   c000d0d8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013af3:	89 c3                	mov    ebx,eax
c0013af5:	58                   	pop    eax
c0013af6:	5a                   	pop    edx
c0013af7:	57                   	push   edi
c0013af8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013afb:	e8 40 cb fe ff       	call   c0000640 <strcpy>
c0013b00:	89 d8                	mov    eax,ebx
c0013b02:	81 c4 40 01 00 00    	add    esp,0x140
c0013b08:	99                   	cdq    
c0013b09:	5b                   	pop    ebx
c0013b0a:	5e                   	pop    esi
c0013b0b:	5f                   	pop    edi
c0013b0c:	c3                   	ret    

c0013b0d <SysRegistryOpen(regs*)>:
c0013b0d:	83 ec 18             	sub    esp,0x18
c0013b10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b14:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013b17:	e8 d8 8d ff ff       	call   c000c8f4 <CmOpen(char const*)>
c0013b1c:	83 c4 1c             	add    esp,0x1c
c0013b1f:	99                   	cdq    
c0013b20:	c3                   	ret    

c0013b21 <SysRegistryClose(regs*)>:
c0013b21:	83 ec 18             	sub    esp,0x18
c0013b24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b28:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b2b:	e8 e2 8e ff ff       	call   c000ca12 <CmClose(Reghive_Tag*)>
c0013b30:	31 c0                	xor    eax,eax
c0013b32:	31 d2                	xor    edx,edx
c0013b34:	83 c4 1c             	add    esp,0x1c
c0013b37:	c3                   	ret    

c0013b38 <SysRegistryEasyReadString(regs*)>:
c0013b38:	57                   	push   edi
c0013b39:	56                   	push   esi
c0013b3a:	53                   	push   ebx
c0013b3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b3f:	83 ec 0c             	sub    esp,0xc
c0013b42:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013b45:	e8 aa 8d ff ff       	call   c000c8f4 <CmOpen(char const*)>
c0013b4a:	5a                   	pop    edx
c0013b4b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b4e:	59                   	pop    ecx
c0013b4f:	89 c3                	mov    ebx,eax
c0013b51:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b54:	50                   	push   eax
c0013b55:	e8 9a 99 ff ff       	call   c000d4f4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	89 c1                	mov    ecx,eax
c0013b5f:	b8 01 00 00 00       	mov    eax,0x1
c0013b64:	85 c9                	test   ecx,ecx
c0013b66:	7e 16                	jle    c0013b7e <SysRegistryEasyReadString(regs*)+0x46>
c0013b68:	50                   	push   eax
c0013b69:	57                   	push   edi
c0013b6a:	51                   	push   ecx
c0013b6b:	53                   	push   ebx
c0013b6c:	e8 f3 8e ff ff       	call   c000ca64 <CmGetString(Reghive_Tag*, int, char*)>
c0013b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b74:	e8 99 8e ff ff       	call   c000ca12 <CmClose(Reghive_Tag*)>
c0013b79:	83 c4 10             	add    esp,0x10
c0013b7c:	31 c0                	xor    eax,eax
c0013b7e:	5b                   	pop    ebx
c0013b7f:	31 d2                	xor    edx,edx
c0013b81:	5e                   	pop    esi
c0013b82:	5f                   	pop    edi
c0013b83:	c3                   	ret    

c0013b84 <SysRegistryEasyReadInteger(regs*)>:
c0013b84:	56                   	push   esi
c0013b85:	53                   	push   ebx
c0013b86:	83 ec 10             	sub    esp,0x10
c0013b89:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b8d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013b90:	e8 5f 8d ff ff       	call   c000c8f4 <CmOpen(char const*)>
c0013b95:	5a                   	pop    edx
c0013b96:	89 c3                	mov    ebx,eax
c0013b98:	59                   	pop    ecx
c0013b99:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b9c:	50                   	push   eax
c0013b9d:	e8 52 99 ff ff       	call   c000d4f4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	89 c1                	mov    ecx,eax
c0013ba7:	b8 01 00 00 00       	mov    eax,0x1
c0013bac:	85 c9                	test   ecx,ecx
c0013bae:	7e 18                	jle    c0013bc8 <SysRegistryEasyReadInteger(regs*)+0x44>
c0013bb0:	50                   	push   eax
c0013bb1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013bb4:	51                   	push   ecx
c0013bb5:	53                   	push   ebx
c0013bb6:	e8 0f 94 ff ff       	call   c000cfca <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013bbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bbe:	e8 4f 8e ff ff       	call   c000ca12 <CmClose(Reghive_Tag*)>
c0013bc3:	83 c4 10             	add    esp,0x10
c0013bc6:	31 c0                	xor    eax,eax
c0013bc8:	59                   	pop    ecx
c0013bc9:	31 d2                	xor    edx,edx
c0013bcb:	5b                   	pop    ebx
c0013bcc:	5e                   	pop    esi
c0013bcd:	c3                   	ret    

c0013bce <SysSbrk(regs*)>:
c0013bce:	56                   	push   esi
c0013bcf:	53                   	push   ebx
c0013bd0:	50                   	push   eax
c0013bd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bdd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013be0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013be6:	85 db                	test   ebx,ebx
c0013be8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013beb:	74 02                	je     c0013bef <SysSbrk(regs*)+0x21>
c0013bed:	79 06                	jns    c0013bf5 <SysSbrk(regs*)+0x27>
c0013bef:	89 f0                	mov    eax,esi
c0013bf1:	31 d2                	xor    edx,edx
c0013bf3:	eb 2a                	jmp    c0013c1f <SysSbrk(regs*)+0x51>
c0013bf5:	83 c8 ff             	or     eax,0xffffffff
c0013bf8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013bfe:	89 c2                	mov    edx,eax
c0013c00:	77 1d                	ja     c0013c1f <SysSbrk(regs*)+0x51>
c0013c02:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013c08:	50                   	push   eax
c0013c09:	c1 ea 0c             	shr    edx,0xc
c0013c0c:	68 07 0c 00 00       	push   0xc07
c0013c11:	52                   	push   edx
c0013c12:	51                   	push   ecx
c0013c13:	e8 34 ee ff ff       	call   c0012a4c <VAS::allocatePages(int, int)>
c0013c18:	89 f0                	mov    eax,esi
c0013c1a:	31 d2                	xor    edx,edx
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	59                   	pop    ecx
c0013c20:	5b                   	pop    ebx
c0013c21:	5e                   	pop    esi
c0013c22:	c3                   	ret    

c0013c23 <SysSetCwd(regs*)>:
c0013c23:	83 ec 14             	sub    esp,0x14
c0013c26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c2a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c32:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c35:	e8 79 48 ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c0013c3a:	83 c4 1c             	add    esp,0x1c
c0013c3d:	99                   	cdq    
c0013c3e:	c3                   	ret    

c0013c3f <SysSetTime(regs*)>:
c0013c3f:	55                   	push   ebp
c0013c40:	31 d2                	xor    edx,edx
c0013c42:	57                   	push   edi
c0013c43:	56                   	push   esi
c0013c44:	be 18 00 00 00       	mov    esi,0x18
c0013c49:	53                   	push   ebx
c0013c4a:	bb 3c 00 00 00       	mov    ebx,0x3c
c0013c4f:	83 ec 20             	sub    esp,0x20
c0013c52:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013c56:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013c59:	f7 f3                	div    ebx
c0013c5b:	89 d7                	mov    edi,edx
c0013c5d:	31 d2                	xor    edx,edx
c0013c5f:	f7 f3                	div    ebx
c0013c61:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013c64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013c68:	bb 10 0e 00 00       	mov    ebx,0xe10
c0013c6d:	31 d2                	xor    edx,edx
c0013c6f:	f7 f3                	div    ebx
c0013c71:	31 d2                	xor    edx,edx
c0013c73:	f7 f6                	div    esi
c0013c75:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c78:	89 d5                	mov    ebp,edx
c0013c7a:	89 c3                	mov    ebx,eax
c0013c7c:	be 0c 00 00 00       	mov    esi,0xc
c0013c81:	83 e3 1f             	and    ebx,0x1f
c0013c84:	c1 e8 05             	shr    eax,0x5
c0013c87:	43                   	inc    ebx
c0013c88:	31 d2                	xor    edx,edx
c0013c8a:	f7 f6                	div    esi
c0013c8c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c90:	57                   	push   edi
c0013c91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c95:	55                   	push   ebp
c0013c96:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0013c9a:	56                   	push   esi
c0013c9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c9f:	53                   	push   ebx
c0013ca0:	68 9e 35 02 c0       	push   0xc002359e
c0013ca5:	e8 ba 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013caa:	83 c4 1c             	add    esp,0x1c
c0013cad:	57                   	push   edi
c0013cae:	c1 e7 10             	shl    edi,0x10
c0013cb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013cb5:	55                   	push   ebp
c0013cb6:	56                   	push   esi
c0013cb7:	c1 e6 10             	shl    esi,0x10
c0013cba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cbe:	53                   	push   ebx
c0013cbf:	68 c0 35 02 c0       	push   0xc00235c0
c0013cc4:	e8 9b 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013cc9:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0013cce:	31 d2                	xor    edx,edx
c0013cd0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0013cd6:	31 c0                	xor    eax,eax
c0013cd8:	88 d8                	mov    al,bl
c0013cda:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0013cde:	0f b7 d8             	movzx  ebx,ax
c0013ce1:	09 f3                	or     ebx,esi
c0013ce3:	89 d8                	mov    eax,ebx
c0013ce5:	89 eb                	mov    ebx,ebp
c0013ce7:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0013ceb:	88 da                	mov    dl,bl
c0013ced:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0013cf1:	83 c4 1c             	add    esp,0x1c
c0013cf4:	89 d6                	mov    esi,edx
c0013cf6:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0013cfc:	09 fe                	or     esi,edi
c0013cfe:	56                   	push   esi
c0013cff:	50                   	push   eax
c0013d00:	51                   	push   ecx
c0013d01:	e8 70 50 ff ff       	call   c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013d06:	83 c4 2c             	add    esp,0x2c
c0013d09:	83 f0 01             	xor    eax,0x1
c0013d0c:	5b                   	pop    ebx
c0013d0d:	0f b6 c0             	movzx  eax,al
c0013d10:	5e                   	pop    esi
c0013d11:	31 d2                	xor    edx,edx
c0013d13:	5f                   	pop    edi
c0013d14:	5d                   	pop    ebp
c0013d15:	c3                   	ret    

c0013d16 <SysSymlink(regs*)>:
c0013d16:	56                   	push   esi
c0013d17:	83 c8 ff             	or     eax,0xffffffff
c0013d1a:	53                   	push   ebx
c0013d1b:	89 c2                	mov    edx,eax
c0013d1d:	81 ec 34 02 00 00    	sub    esp,0x234
c0013d23:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013d2a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013d2e:	74 50                	je     c0013d80 <SysSymlink(regs*)+0x6a>
c0013d30:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0013d33:	85 c9                	test   ecx,ecx
c0013d35:	74 49                	je     c0013d80 <SysSymlink(regs*)+0x6a>
c0013d37:	6a 01                	push   0x1
c0013d39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d3e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d41:	05 0c 01 00 00       	add    eax,0x10c
c0013d46:	50                   	push   eax
c0013d47:	51                   	push   ecx
c0013d48:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013d4c:	56                   	push   esi
c0013d4d:	e8 c8 40 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013d52:	6a 01                	push   0x1
c0013d54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d5c:	05 0c 01 00 00       	add    eax,0x10c
c0013d61:	50                   	push   eax
c0013d62:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d65:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0013d6c:	53                   	push   ebx
c0013d6d:	e8 a8 40 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013d72:	83 c4 18             	add    esp,0x18
c0013d75:	56                   	push   esi
c0013d76:	53                   	push   ebx
c0013d77:	e8 cc 3c ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	99                   	cdq    
c0013d80:	81 c4 34 02 00 00    	add    esp,0x234
c0013d86:	5b                   	pop    ebx
c0013d87:	5e                   	pop    esi
c0013d88:	c3                   	ret    

c0013d89 <SysTimezone(regs*)>:
c0013d89:	83 ec 0c             	sub    esp,0xc
c0013d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d90:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013d94:	75 17                	jne    c0013dad <SysTimezone(regs*)+0x24>
c0013d96:	83 ec 0c             	sub    esp,0xc
c0013d99:	68 e2 35 02 c0       	push   0xc00235e2
c0013d9e:	e8 c1 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013da3:	83 c8 ff             	or     eax,0xffffffff
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	89 c2                	mov    edx,eax
c0013dab:	eb 17                	jmp    c0013dc4 <SysTimezone(regs*)+0x3b>
c0013dad:	83 ec 0c             	sub    esp,0xc
c0013db0:	68 f7 35 02 c0       	push   0xc00235f7
c0013db5:	e8 aa 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	b8 01 00 00 00       	mov    eax,0x1
c0013dc2:	31 d2                	xor    edx,edx
c0013dc4:	83 c4 0c             	add    esp,0xc
c0013dc7:	c3                   	ret    

c0013dc8 <SysTruncate(regs*)>:
c0013dc8:	55                   	push   ebp
c0013dc9:	57                   	push   edi
c0013dca:	31 ff                	xor    edi,edi
c0013dcc:	56                   	push   esi
c0013dcd:	53                   	push   ebx
c0013dce:	83 ec 0c             	sub    esp,0xc
c0013dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013dd8:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013ddb:	89 ce                	mov    esi,ecx
c0013ddd:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013de1:	0f 84 9a 00 00 00    	je     c0013e81 <SysTruncate(regs*)+0xb9>
c0013de7:	83 ec 0c             	sub    esp,0xc
c0013dea:	68 14 01 00 00       	push   0x114
c0013def:	e8 37 ad ff ff       	call   c000eb2b <malloc>
c0013df4:	83 c4 0c             	add    esp,0xc
c0013df7:	89 c3                	mov    ebx,eax
c0013df9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dfe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e01:	55                   	push   ebp
c0013e02:	53                   	push   ebx
c0013e03:	e8 2a 43 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0013e08:	83 c4 10             	add    esp,0x10
c0013e0b:	31 d2                	xor    edx,edx
c0013e0d:	b8 03 00 00 00       	mov    eax,0x3
c0013e12:	85 db                	test   ebx,ebx
c0013e14:	0f 84 a2 00 00 00    	je     c0013ebc <SysTruncate(regs*)+0xf4>
c0013e1a:	51                   	push   ecx
c0013e1b:	51                   	push   ecx
c0013e1c:	6a 02                	push   0x2
c0013e1e:	53                   	push   ebx
c0013e1f:	e8 2c 43 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0013e24:	83 c4 10             	add    esp,0x10
c0013e27:	85 c0                	test   eax,eax
c0013e29:	74 13                	je     c0013e3e <SysTruncate(regs*)+0x76>
c0013e2b:	83 ec 0c             	sub    esp,0xc
c0013e2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e30:	53                   	push   ebx
c0013e31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e34:	83 c4 10             	add    esp,0x10
c0013e37:	b8 04 00 00 00       	mov    eax,0x4
c0013e3c:	eb 7c                	jmp    c0013eba <SysTruncate(regs*)+0xf2>
c0013e3e:	52                   	push   edx
c0013e3f:	57                   	push   edi
c0013e40:	56                   	push   esi
c0013e41:	53                   	push   ebx
c0013e42:	e8 1d 44 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	85 c0                	test   eax,eax
c0013e4c:	74 1b                	je     c0013e69 <SysTruncate(regs*)+0xa1>
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	53                   	push   ebx
c0013e52:	e8 57 43 ff ff       	call   c00081ae <File::close()>
c0013e57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e5f:	83 c4 10             	add    esp,0x10
c0013e62:	b8 05 00 00 00       	mov    eax,0x5
c0013e67:	eb 51                	jmp    c0013eba <SysTruncate(regs*)+0xf2>
c0013e69:	83 ec 0c             	sub    esp,0xc
c0013e6c:	53                   	push   ebx
c0013e6d:	e8 3c 43 ff ff       	call   c00081ae <File::close()>
c0013e72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	31 c0                	xor    eax,eax
c0013e7f:	eb 39                	jmp    c0013eba <SysTruncate(regs*)+0xf2>
c0013e81:	31 d2                	xor    edx,edx
c0013e83:	b8 01 00 00 00       	mov    eax,0x1
c0013e88:	83 fd 02             	cmp    ebp,0x2
c0013e8b:	7e 2f                	jle    c0013ebc <SysTruncate(regs*)+0xf4>
c0013e8d:	83 ec 0c             	sub    esp,0xc
c0013e90:	51                   	push   ecx
c0013e91:	e8 63 e2 ff ff       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c0013e96:	83 c4 10             	add    esp,0x10
c0013e99:	89 c1                	mov    ecx,eax
c0013e9b:	31 d2                	xor    edx,edx
c0013e9d:	b8 02 00 00 00       	mov    eax,0x2
c0013ea2:	85 c9                	test   ecx,ecx
c0013ea4:	74 16                	je     c0013ebc <SysTruncate(regs*)+0xf4>
c0013ea6:	50                   	push   eax
c0013ea7:	57                   	push   edi
c0013ea8:	56                   	push   esi
c0013ea9:	51                   	push   ecx
c0013eaa:	e8 b5 43 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	85 c0                	test   eax,eax
c0013eb4:	0f 95 c0             	setne  al
c0013eb7:	0f b6 c0             	movzx  eax,al
c0013eba:	31 d2                	xor    edx,edx
c0013ebc:	83 c4 0c             	add    esp,0xc
c0013ebf:	5b                   	pop    ebx
c0013ec0:	5e                   	pop    esi
c0013ec1:	5f                   	pop    edi
c0013ec2:	5d                   	pop    ebp
c0013ec3:	c3                   	ret    

c0013ec4 <SysWrite(regs*)>:
c0013ec4:	57                   	push   edi
c0013ec5:	56                   	push   esi
c0013ec6:	53                   	push   ebx
c0013ec7:	83 ec 10             	sub    esp,0x10
c0013eca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ece:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ed1:	83 f8 02             	cmp    eax,0x2
c0013ed4:	77 10                	ja     c0013ee6 <SysWrite(regs*)+0x22>
c0013ed6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013edb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ede:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ee4:	eb 0e                	jmp    c0013ef4 <SysWrite(regs*)+0x30>
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	50                   	push   eax
c0013eea:	e8 0a e2 ff ff       	call   c00120f9 <KeGetFileFromDescriptor(int)>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	89 c1                	mov    ecx,eax
c0013ef4:	83 c8 ff             	or     eax,0xffffffff
c0013ef7:	85 c9                	test   ecx,ecx
c0013ef9:	89 c2                	mov    edx,eax
c0013efb:	74 28                	je     c0013f25 <SysWrite(regs*)+0x61>
c0013efd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f05:	31 ff                	xor    edi,edi
c0013f07:	83 ec 0c             	sub    esp,0xc
c0013f0a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f0c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013f10:	52                   	push   edx
c0013f11:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f14:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013f17:	57                   	push   edi
c0013f18:	56                   	push   esi
c0013f19:	51                   	push   ecx
c0013f1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013f1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013f21:	83 c4 20             	add    esp,0x20
c0013f24:	99                   	cdq    
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	5b                   	pop    ebx
c0013f29:	5e                   	pop    esi
c0013f2a:	5f                   	pop    edi
c0013f2b:	c3                   	ret    

c0013f2c <SysWsbe(regs*)>:
c0013f2c:	55                   	push   ebp
c0013f2d:	57                   	push   edi
c0013f2e:	56                   	push   esi
c0013f2f:	53                   	push   ebx
c0013f30:	83 ec 3c             	sub    esp,0x3c
c0013f33:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013f37:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013f3e:	75 2d                	jne    c0013f6d <SysWsbe(regs*)+0x41>
c0013f40:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013f47:	75 24                	jne    c0013f6d <SysWsbe(regs*)+0x41>
c0013f49:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013f50:	75 1b                	jne    c0013f6d <SysWsbe(regs*)+0x41>
c0013f52:	6a 01                	push   0x1
c0013f54:	6a 00                	push   0x0
c0013f56:	68 b9 95 00 c0       	push   0xc00095b9
c0013f5b:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0013f61:	e8 d2 18 00 00       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	31 c0                	xor    eax,eax
c0013f6b:	eb 52                	jmp    c0013fbf <SysWsbe(regs*)+0x93>
c0013f6d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013f71:	be 36 36 02 c0       	mov    esi,0xc0023636
c0013f76:	b9 0b 00 00 00       	mov    ecx,0xb
c0013f7b:	fc                   	cld    
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013f81:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013f85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f8d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013f93:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f95:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013f98:	57                   	push   edi
c0013f99:	e8 d2 c5 fe ff       	call   c0000570 <strlen>
c0013f9e:	5a                   	pop    edx
c0013f9f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013fa3:	52                   	push   edx
c0013fa4:	31 d2                	xor    edx,edx
c0013fa6:	57                   	push   edi
c0013fa7:	52                   	push   edx
c0013fa8:	50                   	push   eax
c0013fa9:	56                   	push   esi
c0013faa:	ff d5                	call   ebp
c0013fac:	83 c4 14             	add    esp,0x14
c0013faf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013fb2:	e8 89 22 00 00       	call   c0016240 <terminateTask(int)>
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013fbf:	83 c4 3c             	add    esp,0x3c
c0013fc2:	31 d2                	xor    edx,edx
c0013fc4:	5b                   	pop    ebx
c0013fc5:	5e                   	pop    esi
c0013fc6:	5f                   	pop    edi
c0013fc7:	5d                   	pop    ebp
c0013fc8:	c3                   	ret    

c0013fc9 <SysYield(regs*)>:
c0013fc9:	83 ec 0c             	sub    esp,0xc
c0013fcc:	fa                   	cli    
c0013fcd:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013fd3:	e8 b8 1a 00 00       	call   c0015a90 <schedule()>
c0013fd8:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013fdf:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013fe6:	75 01                	jne    c0013fe9 <SysYield(regs*)+0x20>
c0013fe8:	fb                   	sti    
c0013fe9:	31 c0                	xor    eax,eax
c0013feb:	31 d2                	xor    edx,edx
c0013fed:	83 c4 0c             	add    esp,0xc
c0013ff0:	c3                   	ret    

c0013ff1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013ff1:	55                   	push   ebp
c0013ff2:	57                   	push   edi
c0013ff3:	56                   	push   esi
c0013ff4:	53                   	push   ebx
c0013ff5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013ffb:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014003:	0f 95 c0             	setne  al
c0014006:	31 d2                	xor    edx,edx
c0014008:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014010:	0f 94 c2             	sete   dl
c0014013:	85 c2                	test   edx,eax
c0014015:	74 34                	je     c001404b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014017:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014022:	74 27                	je     c001404b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014024:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001402b:	05 00 10 00 00       	add    eax,0x1000
c0014030:	89 c1                	mov    ecx,eax
c0014032:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014037:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001403d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014044:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001404b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001405b:	6a 01                	push   0x1
c001405d:	e8 03 e2 ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c0014062:	83 c4 10             	add    esp,0x10
c0014065:	89 c3                	mov    ebx,eax
c0014067:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001406d:	0f 86 26 01 00 00    	jbe    c0014199 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0014073:	c1 ee 0c             	shr    esi,0xc
c0014076:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001407d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014081:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014089:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014090:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014094:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001409b:	29 ef                	sub    edi,ebp
c001409d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00140a1:	0f 83 f9 00 00 00    	jae    c00141a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c00140a7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00140ad:	76 05                	jbe    c00140b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00140af:	bf 00 10 00 00       	mov    edi,0x1000
c00140b4:	83 ec 0c             	sub    esp,0xc
c00140b7:	31 d2                	xor    edx,edx
c00140b9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00140c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00140c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140c6:	50                   	push   eax
c00140c7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00140cb:	56                   	push   esi
c00140cc:	52                   	push   edx
c00140cd:	57                   	push   edi
c00140ce:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00140d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140d8:	83 c4 20             	add    esp,0x20
c00140db:	85 c0                	test   eax,eax
c00140dd:	75 06                	jne    c00140e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00140df:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00140e3:	74 13                	je     c00140f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00140e5:	83 ec 0c             	sub    esp,0xc
c00140e8:	53                   	push   ebx
c00140e9:	e8 7f e4 ff ff       	call   c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c00140ee:	83 c4 10             	add    esp,0x10
c00140f1:	31 c0                	xor    eax,eax
c00140f3:	e9 80 01 00 00       	jmp    c0014278 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c00140f8:	fa                   	cli    
c00140f9:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00140ff:	e8 62 af ff ff       	call   c000f066 <Phys::allocatePage()>
c0014104:	6a 07                	push   0x7
c0014106:	89 c7                	mov    edi,eax
c0014108:	53                   	push   ebx
c0014109:	50                   	push   eax
c001410a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001410f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014112:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014118:	e8 2b e8 ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001411d:	83 c4 0c             	add    esp,0xc
c0014120:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014127:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001412d:	6a 00                	push   0x0
c001412f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014134:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014137:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001413d:	e8 72 e6 ff ff       	call   c00127b4 <VAS::mapOtherVASIn(bool, VAS*)>
c0014142:	58                   	pop    eax
c0014143:	5a                   	pop    edx
c0014144:	68 07 0c 00 00       	push   0xc07
c0014149:	55                   	push   ebp
c001414a:	57                   	push   edi
c001414b:	89 df                	mov    edi,ebx
c001414d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014154:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001415a:	6a 00                	push   0x0
c001415c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014161:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014164:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001416a:	e8 1b ea ff ff       	call   c0012b8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001416f:	b9 00 10 00 00       	mov    ecx,0x1000
c0014174:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014176:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001417d:	83 c4 20             	add    esp,0x20
c0014180:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0014187:	75 01                	jne    c001418a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0014189:	fb                   	sti    
c001418a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014190:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014194:	e9 f0 fe ff ff       	jmp    c0014089 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014199:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00141a0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00141a7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00141ad:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00141b3:	0f 86 b1 00 00 00    	jbe    c001426a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00141b9:	fa                   	cli    
c00141ba:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00141c0:	c1 ee 0c             	shr    esi,0xc
c00141c3:	51                   	push   ecx
c00141c4:	31 ff                	xor    edi,edi
c00141c6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00141cd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141d3:	6a 00                	push   0x0
c00141d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141e3:	e8 cc e5 ff ff       	call   c00127b4 <VAS::mapOtherVASIn(bool, VAS*)>
c00141e8:	83 c4 10             	add    esp,0x10
c00141eb:	e8 76 ae ff ff       	call   c000f066 <Phys::allocatePage()>
c00141f0:	47                   	inc    edi
c00141f1:	6a 07                	push   0x7
c00141f3:	53                   	push   ebx
c00141f4:	50                   	push   eax
c00141f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00141ff:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014202:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014208:	e8 3b e7 ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001420d:	58                   	pop    eax
c001420e:	5a                   	pop    edx
c001420f:	68 07 0c 00 00       	push   0xc07
c0014214:	55                   	push   ebp
c0014215:	81 c5 00 10 00 00    	add    ebp,0x1000
c001421b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001421f:	50                   	push   eax
c0014220:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014227:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001422d:	6a 00                	push   0x0
c001422f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014234:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014237:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001423d:	e8 48 e9 ff ff       	call   c0012b8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014242:	83 c4 1c             	add    esp,0x1c
c0014245:	68 00 10 00 00       	push   0x1000
c001424a:	6a 00                	push   0x0
c001424c:	53                   	push   ebx
c001424d:	e8 9e c2 fe ff       	call   c00004f0 <memset>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	39 fe                	cmp    esi,edi
c0014257:	77 92                	ja     c00141eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0014259:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0014260:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0014267:	75 01                	jne    c001426a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0014269:	fb                   	sti    
c001426a:	83 ec 0c             	sub    esp,0xc
c001426d:	53                   	push   ebx
c001426e:	e8 fa e2 ff ff       	call   c001256d <Virt::freeKernelVirtualPages(unsigned long)>
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	b0 01                	mov    al,0x1
c0014278:	81 c4 2c 10 00 00    	add    esp,0x102c
c001427e:	5b                   	pop    ebx
c001427f:	5e                   	pop    esi
c0014280:	5f                   	pop    edi
c0014281:	5d                   	pop    ebp
c0014282:	c3                   	ret    

c0014283 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014283:	55                   	push   ebp
c0014284:	57                   	push   edi
c0014285:	56                   	push   esi
c0014286:	53                   	push   ebx
c0014287:	83 ec 48             	sub    esp,0x48
c001428a:	68 14 01 00 00       	push   0x114
c001428f:	e8 97 a8 ff ff       	call   c000eb2b <malloc>
c0014294:	83 c4 0c             	add    esp,0xc
c0014297:	89 c6                	mov    esi,eax
c0014299:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001429d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00142a1:	50                   	push   eax
c00142a2:	e8 8b 3e ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00142a7:	58                   	pop    eax
c00142a8:	5a                   	pop    edx
c00142a9:	6a 01                	push   0x1
c00142ab:	56                   	push   esi
c00142ac:	e8 9f 3e ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00142b1:	83 c4 10             	add    esp,0x10
c00142b4:	85 c0                	test   eax,eax
c00142b6:	0f 85 43 01 00 00    	jne    c00143ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00142bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00142c4:	83 ec 0c             	sub    esp,0xc
c00142c7:	6a 34                	push   0x34
c00142c9:	e8 5d a8 ff ff       	call   c000eb2b <malloc>
c00142ce:	89 c3                	mov    ebx,eax
c00142d0:	58                   	pop    eax
c00142d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00142d3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00142d7:	57                   	push   edi
c00142d8:	53                   	push   ebx
c00142d9:	6a 00                	push   0x0
c00142db:	6a 34                	push   0x34
c00142dd:	56                   	push   esi
c00142de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00142e1:	83 c4 20             	add    esp,0x20
c00142e4:	85 c0                	test   eax,eax
c00142e6:	0f 85 13 01 00 00    	jne    c00143ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00142ec:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00142f2:	0f 85 07 01 00 00    	jne    c00143ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00142f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00142fb:	85 c0                	test   eax,eax
c00142fd:	0f 84 fc 00 00 00    	je     c00143ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014303:	31 d2                	xor    edx,edx
c0014305:	55                   	push   ebp
c0014306:	52                   	push   edx
c0014307:	50                   	push   eax
c0014308:	56                   	push   esi
c0014309:	e8 00 3f ff ff       	call   c000820e <File::seek(unsigned long long)>
c001430e:	83 c4 10             	add    esp,0x10
c0014311:	85 c0                	test   eax,eax
c0014313:	0f 85 e6 00 00 00    	jne    c00143ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014319:	83 ec 0c             	sub    esp,0xc
c001431c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001431f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014327:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001432b:	0f af c2             	imul   eax,edx
c001432e:	50                   	push   eax
c001432f:	e8 f7 a7 ff ff       	call   c000eb2b <malloc>
c0014334:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001433a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001433d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014341:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014345:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014349:	0f af c2             	imul   eax,edx
c001434c:	99                   	cdq    
c001434d:	52                   	push   edx
c001434e:	50                   	push   eax
c001434f:	56                   	push   esi
c0014350:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014353:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014356:	83 c4 20             	add    esp,0x20
c0014359:	85 c0                	test   eax,eax
c001435b:	0f 84 9e 00 00 00    	je     c00143ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014361:	31 d2                	xor    edx,edx
c0014363:	51                   	push   ecx
c0014364:	52                   	push   edx
c0014365:	50                   	push   eax
c0014366:	56                   	push   esi
c0014367:	e8 a2 3e ff ff       	call   c000820e <File::seek(unsigned long long)>
c001436c:	83 c4 10             	add    esp,0x10
c001436f:	85 c0                	test   eax,eax
c0014371:	0f 85 88 00 00 00    	jne    c00143ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014377:	83 ec 0c             	sub    esp,0xc
c001437a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001437e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014382:	31 ed                	xor    ebp,ebp
c0014384:	0f af c2             	imul   eax,edx
c0014387:	50                   	push   eax
c0014388:	e8 9e a7 ff ff       	call   c000eb2b <malloc>
c001438d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001438f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014393:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001439a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001439e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00143a2:	0f af c2             	imul   eax,edx
c00143a5:	99                   	cdq    
c00143a6:	52                   	push   edx
c00143a7:	50                   	push   eax
c00143a8:	56                   	push   esi
c00143a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143ac:	83 c4 20             	add    esp,0x20
c00143af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143b7:	0f b7 fd             	movzx  edi,bp
c00143ba:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00143be:	73 7d                	jae    c001443d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00143c0:	c1 e7 05             	shl    edi,0x5
c00143c3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00143c7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00143ca:	75 6b                	jne    c0014437 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00143cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00143cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143d3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00143d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00143da:	52                   	push   edx
c00143db:	31 d2                	xor    edx,edx
c00143dd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00143e0:	52                   	push   edx
c00143e1:	50                   	push   eax
c00143e2:	56                   	push   esi
c00143e3:	e8 26 3e ff ff       	call   c000820e <File::seek(unsigned long long)>
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	85 c0                	test   eax,eax
c00143ed:	74 17                	je     c0014406 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00143ef:	83 ec 0c             	sub    esp,0xc
c00143f2:	68 62 36 02 c0       	push   0xc0023662
c00143f7:	e8 68 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	31 c0                	xor    eax,eax
c0014401:	e9 87 00 00 00       	jmp    c001448d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001440c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001440f:	50                   	push   eax
c0014410:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014414:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014418:	56                   	push   esi
c0014419:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001441d:	e8 cf fb ff ff       	call   c0013ff1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014422:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014426:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001442a:	83 c4 20             	add    esp,0x20
c001442d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014431:	73 04                	jae    c0014437 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014433:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014437:	45                   	inc    ebp
c0014438:	e9 7a ff ff ff       	jmp    c00143b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001443d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014449:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001444f:	83 ec 0c             	sub    esp,0xc
c0014452:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014458:	25 00 f0 ff ff       	and    eax,0xfffff000
c001445d:	05 00 10 00 00       	add    eax,0x1000
c0014462:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014469:	e8 cd a6 ff ff       	call   c000eb3b <free>
c001446e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014471:	e8 c5 a6 ff ff       	call   c000eb3b <free>
c0014476:	58                   	pop    eax
c0014477:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001447b:	e8 bb a6 ff ff       	call   c000eb3b <free>
c0014480:	89 34 24             	mov    DWORD PTR [esp],esi
c0014483:	e8 26 3d ff ff       	call   c00081ae <File::close()>
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	b0 01                	mov    al,0x1
c001448d:	83 c4 3c             	add    esp,0x3c
c0014490:	5b                   	pop    ebx
c0014491:	5e                   	pop    esi
c0014492:	5f                   	pop    edi
c0014493:	5d                   	pop    ebp
c0014494:	c3                   	ret    

c0014495 <Thr::runtimeReferenceHelper()>:
c0014495:	83 ec 18             	sub    esp,0x18
c0014498:	68 6a 36 02 c0       	push   0xc002366a
c001449d:	e8 c2 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144a2:	fa                   	cli    
c00144a3:	83 c4 10             	add    esp,0x10
c00144a6:	eb fe                	jmp    c00144a6 <Thr::runtimeReferenceHelper()+0x11>

c00144a8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00144a8:	57                   	push   edi
c00144a9:	56                   	push   esi
c00144aa:	53                   	push   ebx
c00144ab:	31 db                	xor    ebx,ebx
c00144ad:	39 1d 80 d6 02 c0    	cmp    DWORD PTR ds:0xc002d680,ebx
c00144b3:	7e 3c                	jle    c00144f1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00144b5:	8b 34 9d 00 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2a00]
c00144bc:	31 ff                	xor    edi,edi
c00144be:	39 3c 9d 00 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2b00],edi
c00144c5:	7e 27                	jle    c00144ee <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00144c7:	50                   	push   eax
c00144c8:	50                   	push   eax
c00144c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00144cf:	03 04 9d 80 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a80]
c00144d6:	50                   	push   eax
c00144d7:	e8 74 c2 fe ff       	call   c0000750 <strcmp>
c00144dc:	83 c4 10             	add    esp,0x10
c00144df:	85 c0                	test   eax,eax
c00144e1:	75 05                	jne    c00144e8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00144e3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00144e6:	eb 0b                	jmp    c00144f3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00144e8:	83 c6 10             	add    esi,0x10
c00144eb:	47                   	inc    edi
c00144ec:	eb d0                	jmp    c00144be <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00144ee:	43                   	inc    ebx
c00144ef:	eb bc                	jmp    c00144ad <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00144f1:	31 c0                	xor    eax,eax
c00144f3:	5b                   	pop    ebx
c00144f4:	5e                   	pop    esi
c00144f5:	5f                   	pop    edi
c00144f6:	c3                   	ret    

c00144f7 <Thr::loadKernelSymbolTable(char const*)>:
c00144f7:	55                   	push   ebp
c00144f8:	57                   	push   edi
c00144f9:	56                   	push   esi
c00144fa:	53                   	push   ebx
c00144fb:	83 ec 68             	sub    esp,0x68
c00144fe:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c0014504:	68 14 01 00 00       	push   0x114
c0014509:	e8 1d a6 ff ff       	call   c000eb2b <malloc>
c001450e:	83 c4 0c             	add    esp,0xc
c0014511:	89 c3                	mov    ebx,eax
c0014513:	56                   	push   esi
c0014514:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014518:	50                   	push   eax
c0014519:	e8 14 3c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001451e:	5e                   	pop    esi
c001451f:	5f                   	pop    edi
c0014520:	6a 01                	push   0x1
c0014522:	53                   	push   ebx
c0014523:	e8 28 3c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014528:	83 c4 10             	add    esp,0x10
c001452b:	85 c0                	test   eax,eax
c001452d:	74 0a                	je     c0014539 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001452f:	83 ec 0c             	sub    esp,0xc
c0014532:	68 8c 36 02 c0       	push   0xc002368c
c0014537:	eb 34                	jmp    c001456d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014539:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014541:	83 ec 0c             	sub    esp,0xc
c0014544:	6a 34                	push   0x34
c0014546:	e8 e0 a5 ff ff       	call   c000eb2b <malloc>
c001454b:	59                   	pop    ecx
c001454c:	89 c7                	mov    edi,eax
c001454e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014552:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014554:	56                   	push   esi
c0014555:	57                   	push   edi
c0014556:	6a 00                	push   0x0
c0014558:	6a 34                	push   0x34
c001455a:	53                   	push   ebx
c001455b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001455e:	83 c4 20             	add    esp,0x20
c0014561:	85 c0                	test   eax,eax
c0014563:	74 17                	je     c001457c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014565:	83 ec 0c             	sub    esp,0xc
c0014568:	68 a3 36 02 c0       	push   0xc00236a3
c001456d:	e8 00 a9 ff ff       	call   c000ee72 <KePanic(char const*)>
c0014572:	83 c4 10             	add    esp,0x10
c0014575:	31 c0                	xor    eax,eax
c0014577:	e9 31 02 00 00       	jmp    c00147ad <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001457c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014582:	75 e1                	jne    c0014565 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014584:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014587:	85 c0                	test   eax,eax
c0014589:	74 da                	je     c0014565 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001458b:	52                   	push   edx
c001458c:	31 d2                	xor    edx,edx
c001458e:	52                   	push   edx
c001458f:	50                   	push   eax
c0014590:	53                   	push   ebx
c0014591:	e8 78 3c ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014596:	83 c4 10             	add    esp,0x10
c0014599:	85 c0                	test   eax,eax
c001459b:	75 c8                	jne    c0014565 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001459d:	83 ec 0c             	sub    esp,0xc
c00145a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00145a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00145a8:	31 ed                	xor    ebp,ebp
c00145aa:	0f af c2             	imul   eax,edx
c00145ad:	50                   	push   eax
c00145ae:	e8 78 a5 ff ff       	call   c000eb2b <malloc>
c00145b3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00145b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00145bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00145c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00145c8:	0f af c2             	imul   eax,edx
c00145cb:	99                   	cdq    
c00145cc:	52                   	push   edx
c00145cd:	50                   	push   eax
c00145ce:	53                   	push   ebx
c00145cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145d2:	83 c4 20             	add    esp,0x20
c00145d5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00145dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00145e5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00145ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145f5:	0f b7 f5             	movzx  esi,bp
c00145f8:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00145fc:	0f 83 a7 00 00 00    	jae    c00146a9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014602:	6b f6 28             	imul   esi,esi,0x28
c0014605:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014609:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001460c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014610:	50                   	push   eax
c0014611:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014615:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014619:	8b 16                	mov    edx,DWORD PTR [esi]
c001461b:	6b c0 28             	imul   eax,eax,0x28
c001461e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014622:	89 d0                	mov    eax,edx
c0014624:	31 d2                	xor    edx,edx
c0014626:	52                   	push   edx
c0014627:	50                   	push   eax
c0014628:	53                   	push   ebx
c0014629:	e8 e0 3b ff ff       	call   c000820e <File::seek(unsigned long long)>
c001462e:	83 c4 0c             	add    esp,0xc
c0014631:	6a 20                	push   0x20
c0014633:	6a 00                	push   0x0
c0014635:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014639:	52                   	push   edx
c001463a:	e8 b1 be fe ff       	call   c00004f0 <memset>
c001463f:	58                   	pop    eax
c0014640:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014642:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014646:	51                   	push   ecx
c0014647:	8d 54 24 40          	lea    edx,[esp+0x40]
c001464b:	52                   	push   edx
c001464c:	6a 00                	push   0x0
c001464e:	6a 1f                	push   0x1f
c0014650:	53                   	push   ebx
c0014651:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014654:	83 c4 18             	add    esp,0x18
c0014657:	68 ba 36 02 c0       	push   0xc00236ba
c001465c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014660:	52                   	push   edx
c0014661:	e8 ea c0 fe ff       	call   c0000750 <strcmp>
c0014666:	83 c4 10             	add    esp,0x10
c0014669:	85 c0                	test   eax,eax
c001466b:	75 0f                	jne    c001467c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001466d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014670:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014674:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001467c:	50                   	push   eax
c001467d:	50                   	push   eax
c001467e:	68 c2 36 02 c0       	push   0xc00236c2
c0014683:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014687:	50                   	push   eax
c0014688:	e8 c3 c0 fe ff       	call   c0000750 <strcmp>
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	85 c0                	test   eax,eax
c0014692:	75 0f                	jne    c00146a3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014694:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014697:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001469b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001469f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146a3:	45                   	inc    ebp
c00146a4:	e9 4c ff ff ff       	jmp    c00145f5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00146a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00146ae:	75 10                	jne    c00146c0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00146b0:	83 ec 0c             	sub    esp,0xc
c00146b3:	68 ca 36 02 c0       	push   0xc00236ca
c00146b8:	e8 b5 a7 ff ff       	call   c000ee72 <KePanic(char const*)>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00146c5:	75 10                	jne    c00146d7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	68 ca 36 02 c0       	push   0xc00236ca
c00146cf:	e8 9e a7 ff ff       	call   c000ee72 <KePanic(char const*)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	31 d2                	xor    edx,edx
c00146d9:	50                   	push   eax
c00146da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146de:	52                   	push   edx
c00146df:	50                   	push   eax
c00146e0:	53                   	push   ebx
c00146e1:	e8 28 3b ff ff       	call   c000820e <File::seek(unsigned long long)>
c00146e6:	5a                   	pop    edx
c00146e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146eb:	e8 3b a4 ff ff       	call   c000eb2b <malloc>
c00146f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146f8:	31 c9                	xor    ecx,ecx
c00146fa:	5e                   	pop    esi
c00146fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146fd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014701:	55                   	push   ebp
c0014702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014706:	51                   	push   ecx
c0014707:	52                   	push   edx
c0014708:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001470c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014710:	53                   	push   ebx
c0014711:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014714:	83 c4 14             	add    esp,0x14
c0014717:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001471b:	e8 0b a4 ff ff       	call   c000eb2b <malloc>
c0014720:	89 c6                	mov    esi,eax
c0014722:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014724:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014727:	56                   	push   esi
c0014728:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001472c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014730:	51                   	push   ecx
c0014731:	52                   	push   edx
c0014732:	53                   	push   ebx
c0014733:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014736:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001473a:	8b 15 80 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d680
c0014740:	83 c4 1c             	add    esp,0x1c
c0014743:	c1 e8 04             	shr    eax,0x4
c0014746:	89 04 95 00 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b00],eax
c001474d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014751:	31 d2                	xor    edx,edx
c0014753:	52                   	push   edx
c0014754:	50                   	push   eax
c0014755:	53                   	push   ebx
c0014756:	e8 b3 3a ff ff       	call   c000820e <File::seek(unsigned long long)>
c001475b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001475d:	31 d2                	xor    edx,edx
c001475f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014762:	56                   	push   esi
c0014763:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014767:	52                   	push   edx
c0014768:	50                   	push   eax
c0014769:	53                   	push   ebx
c001476a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001476d:	83 c4 14             	add    esp,0x14
c0014770:	53                   	push   ebx
c0014771:	e8 38 3a ff ff       	call   c00081ae <File::close()>
c0014776:	5d                   	pop    ebp
c0014777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001477b:	e8 bb a3 ff ff       	call   c000eb3b <free>
c0014780:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014783:	e8 b3 a3 ff ff       	call   c000eb3b <free>
c0014788:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c001478d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014791:	8d 50 01             	lea    edx,[eax+0x1]
c0014794:	89 0c 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],ecx
c001479b:	89 34 85 80 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a80],esi
c00147a2:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c00147a8:	83 c4 10             	add    esp,0x10
c00147ab:	b0 01                	mov    al,0x1
c00147ad:	83 c4 5c             	add    esp,0x5c
c00147b0:	5b                   	pop    ebx
c00147b1:	5e                   	pop    esi
c00147b2:	5f                   	pop    edi
c00147b3:	5d                   	pop    ebp
c00147b4:	c3                   	ret    

c00147b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00147b5:	55                   	push   ebp
c00147b6:	57                   	push   edi
c00147b7:	56                   	push   esi
c00147b8:	53                   	push   ebx
c00147b9:	81 ec 68 03 00 00    	sub    esp,0x368
c00147bf:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00147c6:	8b 1d d8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6d8
c00147cc:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00147d0:	68 14 01 00 00       	push   0x114
c00147d5:	e8 51 a3 ff ff       	call   c000eb2b <malloc>
c00147da:	83 c4 0c             	add    esp,0xc
c00147dd:	89 c5                	mov    ebp,eax
c00147df:	53                   	push   ebx
c00147e0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00147e7:	50                   	push   eax
c00147e8:	e8 45 39 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00147ed:	5e                   	pop    esi
c00147ee:	5f                   	pop    edi
c00147ef:	6a 01                	push   0x1
c00147f1:	55                   	push   ebp
c00147f2:	e8 59 39 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00147f7:	83 c4 10             	add    esp,0x10
c00147fa:	85 c0                	test   eax,eax
c00147fc:	0f 85 aa 06 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014802:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001480a:	83 ec 0c             	sub    esp,0xc
c001480d:	6a 34                	push   0x34
c001480f:	e8 17 a3 ff ff       	call   c000eb2b <malloc>
c0014814:	5b                   	pop    ebx
c0014815:	89 c7                	mov    edi,eax
c0014817:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001481b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001481e:	53                   	push   ebx
c001481f:	57                   	push   edi
c0014820:	6a 00                	push   0x0
c0014822:	6a 34                	push   0x34
c0014824:	55                   	push   ebp
c0014825:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014828:	83 c4 20             	add    esp,0x20
c001482b:	85 c0                	test   eax,eax
c001482d:	0f 85 79 06 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014833:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014839:	0f 85 6d 06 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001483f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014842:	85 c0                	test   eax,eax
c0014844:	0f 84 62 06 00 00    	je     c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001484a:	31 d2                	xor    edx,edx
c001484c:	51                   	push   ecx
c001484d:	52                   	push   edx
c001484e:	50                   	push   eax
c001484f:	55                   	push   ebp
c0014850:	e8 b9 39 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014855:	83 c4 10             	add    esp,0x10
c0014858:	85 c0                	test   eax,eax
c001485a:	0f 85 4c 06 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014860:	83 ec 0c             	sub    esp,0xc
c0014863:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014866:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001486a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001486e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014872:	0f af c2             	imul   eax,edx
c0014875:	50                   	push   eax
c0014876:	e8 b0 a2 ff ff       	call   c000eb2b <malloc>
c001487b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001487e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014885:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014889:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001488d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014891:	0f af c2             	imul   eax,edx
c0014894:	99                   	cdq    
c0014895:	52                   	push   edx
c0014896:	50                   	push   eax
c0014897:	55                   	push   ebp
c0014898:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001489b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001489e:	83 c4 20             	add    esp,0x20
c00148a1:	85 c0                	test   eax,eax
c00148a3:	0f 84 03 06 00 00    	je     c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148a9:	52                   	push   edx
c00148aa:	31 d2                	xor    edx,edx
c00148ac:	52                   	push   edx
c00148ad:	50                   	push   eax
c00148ae:	55                   	push   ebp
c00148af:	e8 5a 39 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00148b4:	83 c4 10             	add    esp,0x10
c00148b7:	85 c0                	test   eax,eax
c00148b9:	0f 85 ed 05 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148bf:	83 ec 0c             	sub    esp,0xc
c00148c2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00148c6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00148ca:	31 f6                	xor    esi,esi
c00148cc:	0f af c2             	imul   eax,edx
c00148cf:	50                   	push   eax
c00148d0:	e8 56 a2 ff ff       	call   c000eb2b <malloc>
c00148d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00148d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00148dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00148e3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00148e7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00148eb:	0f af c2             	imul   eax,edx
c00148ee:	99                   	cdq    
c00148ef:	52                   	push   edx
c00148f0:	50                   	push   eax
c00148f1:	55                   	push   ebp
c00148f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148f5:	83 c4 20             	add    esp,0x20
c00148f8:	0f b7 de             	movzx  ebx,si
c00148fb:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00148ff:	0f 83 87 00 00 00    	jae    c001498c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014905:	c1 e3 05             	shl    ebx,0x5
c0014908:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001490c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001490f:	75 75                	jne    c0014986 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014911:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014914:	31 d2                	xor    edx,edx
c0014916:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001491a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001491d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014921:	50                   	push   eax
c0014922:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014925:	52                   	push   edx
c0014926:	50                   	push   eax
c0014927:	55                   	push   ebp
c0014928:	e8 e1 38 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	85 c0                	test   eax,eax
c0014932:	0f 85 74 05 00 00    	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014938:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001493f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014942:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014946:	31 d2                	xor    edx,edx
c0014948:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001494c:	83 ec 0c             	sub    esp,0xc
c001494f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014953:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001495a:	50                   	push   eax
c001495b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001495f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014963:	52                   	push   edx
c0014964:	50                   	push   eax
c0014965:	55                   	push   ebp
c0014966:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014969:	83 c4 1c             	add    esp,0x1c
c001496c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001496f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014972:	50                   	push   eax
c0014973:	6a 00                	push   0x0
c0014975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014979:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001497d:	50                   	push   eax
c001497e:	e8 6d bb fe ff       	call   c00004f0 <memset>
c0014983:	83 c4 10             	add    esp,0x10
c0014986:	46                   	inc    esi
c0014987:	e9 6c ff ff ff       	jmp    c00148f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001498c:	53                   	push   ebx
c001498d:	31 db                	xor    ebx,ebx
c001498f:	68 00 01 00 00       	push   0x100
c0014994:	6a 00                	push   0x0
c0014996:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001499a:	50                   	push   eax
c001499b:	e8 50 bb fe ff       	call   c00004f0 <memset>
c00149a0:	83 c4 0c             	add    esp,0xc
c00149a3:	68 00 01 00 00       	push   0x100
c00149a8:	6a 00                	push   0x0
c00149aa:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00149b1:	50                   	push   eax
c00149b2:	e8 39 bb fe ff       	call   c00004f0 <memset>
c00149b7:	83 c4 10             	add    esp,0x10
c00149ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00149c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00149ca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00149d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00149da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00149e2:	0f b7 f3             	movzx  esi,bx
c00149e5:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00149e9:	0f 83 2d 01 00 00    	jae    c0014b1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00149ef:	6b f6 28             	imul   esi,esi,0x28
c00149f2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00149f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00149f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149fd:	52                   	push   edx
c00149fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a02:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014a06:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a08:	6b d2 28             	imul   edx,edx,0x28
c0014a0b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014a0f:	31 d2                	xor    edx,edx
c0014a11:	52                   	push   edx
c0014a12:	50                   	push   eax
c0014a13:	55                   	push   ebp
c0014a14:	e8 f5 37 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014a19:	83 c4 0c             	add    esp,0xc
c0014a1c:	6a 20                	push   0x20
c0014a1e:	6a 00                	push   0x0
c0014a20:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014a27:	51                   	push   ecx
c0014a28:	e8 c3 ba fe ff       	call   c00004f0 <memset>
c0014a2d:	59                   	pop    ecx
c0014a2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a31:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014a35:	52                   	push   edx
c0014a36:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014a3d:	51                   	push   ecx
c0014a3e:	6a 00                	push   0x0
c0014a40:	6a 1f                	push   0x1f
c0014a42:	55                   	push   ebp
c0014a43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a46:	83 c4 1c             	add    esp,0x1c
c0014a49:	6a 09                	push   0x9
c0014a4b:	68 e4 36 02 c0       	push   0xc00236e4
c0014a50:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014a57:	51                   	push   ecx
c0014a58:	e8 23 b9 fe ff       	call   c0000380 <memcmp>
c0014a5d:	83 c4 10             	add    esp,0x10
c0014a60:	85 c0                	test   eax,eax
c0014a62:	75 21                	jne    c0014a85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014a6c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014a70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014a74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a77:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014a7e:	89 d0                	mov    eax,edx
c0014a80:	40                   	inc    eax
c0014a81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a85:	50                   	push   eax
c0014a86:	6a 09                	push   0x9
c0014a88:	68 ee 36 02 c0       	push   0xc00236ee
c0014a8d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a94:	50                   	push   eax
c0014a95:	e8 e6 b8 fe ff       	call   c0000380 <memcmp>
c0014a9a:	83 c4 10             	add    esp,0x10
c0014a9d:	85 c0                	test   eax,eax
c0014a9f:	75 21                	jne    c0014ac2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014aa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aa5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014aa9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014aad:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014ab1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ab4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014abb:	89 d0                	mov    eax,edx
c0014abd:	40                   	inc    eax
c0014abe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ac2:	50                   	push   eax
c0014ac3:	50                   	push   eax
c0014ac4:	68 ba 36 02 c0       	push   0xc00236ba
c0014ac9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ad0:	50                   	push   eax
c0014ad1:	e8 7a bc fe ff       	call   c0000750 <strcmp>
c0014ad6:	83 c4 10             	add    esp,0x10
c0014ad9:	85 c0                	test   eax,eax
c0014adb:	75 0f                	jne    c0014aec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014add:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ae0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ae4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aec:	50                   	push   eax
c0014aed:	50                   	push   eax
c0014aee:	68 c2 36 02 c0       	push   0xc00236c2
c0014af3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014afa:	50                   	push   eax
c0014afb:	e8 50 bc fe ff       	call   c0000750 <strcmp>
c0014b00:	83 c4 10             	add    esp,0x10
c0014b03:	85 c0                	test   eax,eax
c0014b05:	75 0f                	jne    c0014b16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014b07:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014b0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b16:	43                   	inc    ebx
c0014b17:	e9 c6 fe ff ff       	jmp    c00149e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014b1c:	31 d2                	xor    edx,edx
c0014b1e:	50                   	push   eax
c0014b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b23:	52                   	push   edx
c0014b24:	50                   	push   eax
c0014b25:	55                   	push   ebp
c0014b26:	e8 e3 36 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014b2b:	58                   	pop    eax
c0014b2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b30:	e8 f6 9f ff ff       	call   c000eb2b <malloc>
c0014b35:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b38:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014b3c:	31 d2                	xor    edx,edx
c0014b3e:	58                   	pop    eax
c0014b3f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014b43:	53                   	push   ebx
c0014b44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014b48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014b4c:	52                   	push   edx
c0014b4d:	50                   	push   eax
c0014b4e:	55                   	push   ebp
c0014b4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b52:	83 c4 14             	add    esp,0x14
c0014b55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b59:	e8 cd 9f ff ff       	call   c000eb2b <malloc>
c0014b5e:	31 d2                	xor    edx,edx
c0014b60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014b64:	83 c4 0c             	add    esp,0xc
c0014b67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014b6b:	52                   	push   edx
c0014b6c:	50                   	push   eax
c0014b6d:	55                   	push   ebp
c0014b6e:	e8 9b 36 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014b73:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b76:	31 d2                	xor    edx,edx
c0014b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014b83:	52                   	push   edx
c0014b84:	50                   	push   eax
c0014b85:	55                   	push   ebp
c0014b86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b89:	83 c4 20             	add    esp,0x20
c0014b8c:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014b91:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014b99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014b9d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ba1:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014ba5:	0f 84 05 03 00 00    	je     c0014eb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014bab:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014bb2:	31 d2                	xor    edx,edx
c0014bb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bb8:	c1 e8 03             	shr    eax,0x3
c0014bbb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014bbf:	51                   	push   ecx
c0014bc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bc4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014bc8:	52                   	push   edx
c0014bc9:	50                   	push   eax
c0014bca:	55                   	push   ebp
c0014bcb:	e8 3e 36 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014bd0:	5b                   	pop    ebx
c0014bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bd5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014bdc:	e8 4a 9f ff ff       	call   c000eb2b <malloc>
c0014be1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014be4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014be8:	31 d2                	xor    edx,edx
c0014bea:	5e                   	pop    esi
c0014beb:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014bef:	50                   	push   eax
c0014bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bf4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014bf8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014bff:	52                   	push   edx
c0014c00:	50                   	push   eax
c0014c01:	55                   	push   ebp
c0014c02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c05:	83 c4 20             	add    esp,0x20
c0014c08:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014c10:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014c14:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014c18:	0f 8d 76 02 00 00    	jge    c0014e94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014c1e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014c22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c26:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014c2b:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014c2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c36:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014c3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c3e:	c1 e8 08             	shr    eax,0x8
c0014c41:	89 c6                	mov    esi,eax
c0014c43:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c47:	c1 e6 04             	shl    esi,0x4
c0014c4a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014c4e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014c51:	85 db                	test   ebx,ebx
c0014c53:	0f 85 b3 00 00 00    	jne    c0014d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014c59:	83 ec 0c             	sub    esp,0xc
c0014c5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014c60:	03 06                	add    eax,DWORD PTR [esi]
c0014c62:	50                   	push   eax
c0014c63:	e8 40 f8 ff ff       	call   c00144a8 <Thr::getAddressOfKernelSymbol(char const*)>
c0014c68:	83 c4 10             	add    esp,0x10
c0014c6b:	89 c3                	mov    ebx,eax
c0014c6d:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014c72:	85 c0                	test   eax,eax
c0014c74:	0f 85 92 00 00 00    	jne    c0014d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014c7a:	83 ec 0c             	sub    esp,0xc
c0014c7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014c81:	03 06                	add    eax,DWORD PTR [esi]
c0014c83:	50                   	push   eax
c0014c84:	e8 7b ac ff ff       	call   c000f904 <KeResolveCompatibilitySymbol(char*)>
c0014c89:	83 c4 10             	add    esp,0x10
c0014c8c:	89 c3                	mov    ebx,eax
c0014c8e:	85 c0                	test   eax,eax
c0014c90:	75 7a                	jne    c0014d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014c92:	51                   	push   ecx
c0014c93:	51                   	push   ecx
c0014c94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c98:	03 06                	add    eax,DWORD PTR [esi]
c0014c9a:	50                   	push   eax
c0014c9b:	68 f8 36 02 c0       	push   0xc00236f8
c0014ca0:	e8 bf 22 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014ca5:	58                   	pop    eax
c0014ca6:	5a                   	pop    edx
c0014ca7:	68 12 37 02 c0       	push   0xc0023712
c0014cac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cb3:	50                   	push   eax
c0014cb4:	e8 87 b9 fe ff       	call   c0000640 <strcpy>
c0014cb9:	59                   	pop    ecx
c0014cba:	58                   	pop    eax
c0014cbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014cbf:	03 06                	add    eax,DWORD PTR [esi]
c0014cc1:	50                   	push   eax
c0014cc2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cc9:	50                   	push   eax
c0014cca:	e8 71 bb fe ff       	call   c0000840 <strcat>
c0014ccf:	58                   	pop    eax
c0014cd0:	5a                   	pop    edx
c0014cd1:	68 ac 37 02 c0       	push   0xc00237ac
c0014cd6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cdd:	50                   	push   eax
c0014cde:	e8 5d bb fe ff       	call   c0000840 <strcat>
c0014ce3:	83 c4 10             	add    esp,0x10
c0014ce6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014ceb:	0f 84 5d 01 00 00    	je     c0014e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014cf1:	83 ec 0c             	sub    esp,0xc
c0014cf4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cfb:	50                   	push   eax
c0014cfc:	e8 71 a1 ff ff       	call   c000ee72 <KePanic(char const*)>
c0014d01:	83 c4 10             	add    esp,0x10
c0014d04:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014d08:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014d0c:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014d11:	83 f8 01             	cmp    eax,0x1
c0014d14:	0f 85 8f 00 00 00    	jne    c0014da9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014d1a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014d21:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014d25:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014d29:	01 ce                	add    esi,ecx
c0014d2b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014d33:	0f 94 c0             	sete   al
c0014d36:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014d3e:	0f 94 c2             	sete   dl
c0014d41:	09 c2                	or     edx,eax
c0014d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d45:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014d4a:	0f b6 d2             	movzx  edx,dl
c0014d4d:	74 41                	je     c0014d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014d4f:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014d52:	85 d2                	test   edx,edx
c0014d54:	75 15                	jne    c0014d6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014d56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d5a:	66 83 f8 0c          	cmp    ax,0xc
c0014d5e:	76 05                	jbe    c0014d65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014d60:	b8 0c 00 00 00       	mov    eax,0xc
c0014d65:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014d69:	76 37                	jbe    c0014da2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014d6b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014d6f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014d74:	0f 84 d4 00 00 00    	je     c0014e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014d7a:	83 ec 0c             	sub    esp,0xc
c0014d7d:	68 29 37 02 c0       	push   0xc0023729
c0014d82:	e8 eb a0 ff ff       	call   c000ee72 <KePanic(char const*)>
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014d8e:	eb 12                	jmp    c0014da2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014d90:	01 c1                	add    ecx,eax
c0014d92:	85 d2                	test   edx,edx
c0014d94:	75 0c                	jne    c0014da2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014d96:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d9a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014d9e:	77 02                	ja     c0014da2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014da0:	01 d9                	add    ecx,ebx
c0014da2:	89 0e                	mov    DWORD PTR [esi],ecx
c0014da4:	e9 e2 00 00 00       	jmp    c0014e8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014da9:	83 f8 02             	cmp    eax,0x2
c0014dac:	75 77                	jne    c0014e25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014dae:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014db5:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014db9:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014dbd:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014dc5:	74 21                	je     c0014de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014dc7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014dcf:	74 17                	je     c0014de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014dd1:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014dd5:	b8 0a 00 00 00       	mov    eax,0xa
c0014dda:	83 fa 0e             	cmp    edx,0xe
c0014ddd:	77 03                	ja     c0014de2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014ddf:	8d 42 fc             	lea    eax,[edx-0x4]
c0014de2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014de6:	76 17                	jbe    c0014dff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014de8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014ded:	74 5f                	je     c0014e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014def:	83 ec 0c             	sub    esp,0xc
c0014df2:	68 45 37 02 c0       	push   0xc0023745
c0014df7:	e8 76 a0 ff ff       	call   c000ee72 <KePanic(char const*)>
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e01:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014e06:	74 13                	je     c0014e1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014e08:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e0c:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014e13:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014e17:	01 d0                	add    eax,edx
c0014e19:	eb 04                	jmp    c0014e1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014e1b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014e1f:	01 c3                	add    ebx,eax
c0014e21:	89 1e                	mov    DWORD PTR [esi],ebx
c0014e23:	eb 66                	jmp    c0014e8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014e25:	52                   	push   edx
c0014e26:	52                   	push   edx
c0014e27:	50                   	push   eax
c0014e28:	68 61 37 02 c0       	push   0xc0023761
c0014e2d:	e8 32 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014e32:	83 c4 10             	add    esp,0x10
c0014e35:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014e3a:	74 12                	je     c0014e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014e3c:	83 ec 0c             	sub    esp,0xc
c0014e3f:	68 6c 37 02 c0       	push   0xc002376c
c0014e44:	e8 29 a0 ff ff       	call   c000ee72 <KePanic(char const*)>
c0014e49:	83 c4 10             	add    esp,0x10
c0014e4c:	eb 3d                	jmp    c0014e8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014e4e:	83 ec 0c             	sub    esp,0xc
c0014e51:	55                   	push   ebp
c0014e52:	e8 57 33 ff ff       	call   c00081ae <File::close()>
c0014e57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e5a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e60:	59                   	pop    ecx
c0014e61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e65:	e8 d1 9c ff ff       	call   c000eb3b <free>
c0014e6a:	5b                   	pop    ebx
c0014e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e6f:	e8 c7 9c ff ff       	call   c000eb3b <free>
c0014e74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e77:	e8 bf 9c ff ff       	call   c000eb3b <free>
c0014e7c:	5e                   	pop    esi
c0014e7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e81:	e8 b5 9c ff ff       	call   c000eb3b <free>
c0014e86:	83 c4 10             	add    esp,0x10
c0014e89:	eb 21                	jmp    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014e8b:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014e8f:	e9 7c fd ff ff       	jmp    c0014c10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014e94:	83 ec 0c             	sub    esp,0xc
c0014e97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e9b:	e8 9b 9c ff ff       	call   c000eb3b <free>
c0014ea0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014ea4:	83 c4 10             	add    esp,0x10
c0014ea7:	e9 f1 fc ff ff       	jmp    c0014b9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014eac:	31 c0                	xor    eax,eax
c0014eae:	eb 33                	jmp    c0014ee3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	55                   	push   ebp
c0014eb4:	e8 f5 32 ff ff       	call   c00081ae <File::close()>
c0014eb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ebc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ebf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ec2:	58                   	pop    eax
c0014ec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ec7:	e8 6f 9c ff ff       	call   c000eb3b <free>
c0014ecc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ecf:	e8 67 9c ff ff       	call   c000eb3b <free>
c0014ed4:	5a                   	pop    edx
c0014ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ed9:	e8 5d 9c ff ff       	call   c000eb3b <free>
c0014ede:	83 c4 10             	add    esp,0x10
c0014ee1:	b0 01                	mov    al,0x1
c0014ee3:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014ee9:	5b                   	pop    ebx
c0014eea:	5e                   	pop    esi
c0014eeb:	5f                   	pop    edi
c0014eec:	5d                   	pop    ebp
c0014eed:	c3                   	ret    

c0014eee <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014eee:	56                   	push   esi
c0014eef:	31 d2                	xor    edx,edx
c0014ef1:	53                   	push   ebx
c0014ef2:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014ef8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014efc:	39 d3                	cmp    ebx,edx
c0014efe:	7e 1b                	jle    c0014f1b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014f00:	8b 04 95 00 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2f00]
c0014f07:	39 c8                	cmp    eax,ecx
c0014f09:	77 0d                	ja     c0014f18 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014f0b:	8b 34 95 00 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3100]
c0014f12:	01 c6                	add    esi,eax
c0014f14:	39 ce                	cmp    esi,ecx
c0014f16:	77 05                	ja     c0014f1d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014f18:	42                   	inc    edx
c0014f19:	eb e1                	jmp    c0014efc <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014f1b:	31 c0                	xor    eax,eax
c0014f1d:	5b                   	pop    ebx
c0014f1e:	5e                   	pop    esi
c0014f1f:	c3                   	ret    

c0014f20 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014f20:	53                   	push   ebx
c0014f21:	31 c0                	xor    eax,eax
c0014f23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014f27:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014f2d:	39 c3                	cmp    ebx,eax
c0014f2f:	7e 22                	jle    c0014f53 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014f31:	8b 14 85 00 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f00]
c0014f38:	39 ca                	cmp    edx,ecx
c0014f3a:	77 14                	ja     c0014f50 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014f3c:	03 14 85 00 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3100]
c0014f43:	39 ca                	cmp    edx,ecx
c0014f45:	76 09                	jbe    c0014f50 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014f47:	8b 04 85 00 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d00]
c0014f4e:	eb 05                	jmp    c0014f55 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014f50:	40                   	inc    eax
c0014f51:	eb da                	jmp    c0014f2d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014f53:	31 c0                	xor    eax,eax
c0014f55:	5b                   	pop    ebx
c0014f56:	c3                   	ret    

c0014f57 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014f57:	53                   	push   ebx
c0014f58:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014f5c:	53                   	push   ebx
c0014f5d:	e8 8c ff ff ff       	call   c0014eee <Thr::getDriverBaseFromAddress(unsigned long)>
c0014f62:	5a                   	pop    edx
c0014f63:	31 d2                	xor    edx,edx
c0014f65:	85 c0                	test   eax,eax
c0014f67:	74 04                	je     c0014f6d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014f69:	89 da                	mov    edx,ebx
c0014f6b:	29 c2                	sub    edx,eax
c0014f6d:	89 d0                	mov    eax,edx
c0014f6f:	5b                   	pop    ebx
c0014f70:	c3                   	ret    

c0014f71 <Thr::loadDLL(char const*, bool)>:
c0014f71:	55                   	push   ebp
c0014f72:	57                   	push   edi
c0014f73:	56                   	push   esi
c0014f74:	53                   	push   ebx
c0014f75:	81 ec 34 01 00 00    	sub    esp,0x134
c0014f7b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014f82:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014f89:	56                   	push   esi
c0014f8a:	68 84 37 02 c0       	push   0xc0023784
c0014f8f:	e8 d0 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014f94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014f9b:	e8 8b 9b ff ff       	call   c000eb2b <malloc>
c0014fa0:	83 c4 0c             	add    esp,0xc
c0014fa3:	89 c3                	mov    ebx,eax
c0014fa5:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0014fab:	56                   	push   esi
c0014fac:	50                   	push   eax
c0014fad:	e8 80 31 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	85 db                	test   ebx,ebx
c0014fb7:	75 3c                	jne    c0014ff5 <Thr::loadDLL(char const*, bool)+0x84>
c0014fb9:	89 f8                	mov    eax,edi
c0014fbb:	84 c0                	test   al,al
c0014fbd:	0f 84 f3 01 00 00    	je     c00151b6 <Thr::loadDLL(char const*, bool)+0x245>
c0014fc3:	55                   	push   ebp
c0014fc4:	55                   	push   ebp
c0014fc5:	68 95 37 02 c0       	push   0xc0023795
c0014fca:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014fce:	55                   	push   ebp
c0014fcf:	e8 6c b6 fe ff       	call   c0000640 <strcpy>
c0014fd4:	58                   	pop    eax
c0014fd5:	5a                   	pop    edx
c0014fd6:	56                   	push   esi
c0014fd7:	55                   	push   ebp
c0014fd8:	e8 63 b8 fe ff       	call   c0000840 <strcat>
c0014fdd:	59                   	pop    ecx
c0014fde:	58                   	pop    eax
c0014fdf:	68 ac 37 02 c0       	push   0xc00237ac
c0014fe4:	55                   	push   ebp
c0014fe5:	e8 56 b8 fe ff       	call   c0000840 <strcat>
c0014fea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fed:	e8 80 9e ff ff       	call   c000ee72 <KePanic(char const*)>
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	51                   	push   ecx
c0014ff6:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014ffa:	50                   	push   eax
c0014ffb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014fff:	50                   	push   eax
c0015000:	53                   	push   ebx
c0015001:	e8 4c 34 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0015006:	83 c4 10             	add    esp,0x10
c0015009:	89 c5                	mov    ebp,eax
c001500b:	85 db                	test   ebx,ebx
c001500d:	74 0c                	je     c001501b <Thr::loadDLL(char const*, bool)+0xaa>
c001500f:	83 ec 0c             	sub    esp,0xc
c0015012:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015014:	53                   	push   ebx
c0015015:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	83 ec 0c             	sub    esp,0xc
c001501e:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0015023:	50                   	push   eax
c0015024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001502c:	55                   	push   ebp
c001502d:	68 ae 37 02 c0       	push   0xc00237ae
c0015032:	e8 2d 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015037:	83 c4 20             	add    esp,0x20
c001503a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001503f:	75 0a                	jne    c001504b <Thr::loadDLL(char const*, bool)+0xda>
c0015041:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015045:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015049:	75 3c                	jne    c0015087 <Thr::loadDLL(char const*, bool)+0x116>
c001504b:	89 f8                	mov    eax,edi
c001504d:	84 c0                	test   al,al
c001504f:	0f 84 49 01 00 00    	je     c001519e <Thr::loadDLL(char const*, bool)+0x22d>
c0015055:	51                   	push   ecx
c0015056:	51                   	push   ecx
c0015057:	68 cf 37 02 c0       	push   0xc00237cf
c001505c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015060:	53                   	push   ebx
c0015061:	e8 da b5 fe ff       	call   c0000640 <strcpy>
c0015066:	5d                   	pop    ebp
c0015067:	58                   	pop    eax
c0015068:	56                   	push   esi
c0015069:	53                   	push   ebx
c001506a:	e8 d1 b7 fe ff       	call   c0000840 <strcat>
c001506f:	58                   	pop    eax
c0015070:	5a                   	pop    edx
c0015071:	68 ac 37 02 c0       	push   0xc00237ac
c0015076:	53                   	push   ebx
c0015077:	e8 c4 b7 fe ff       	call   c0000840 <strcat>
c001507c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001507f:	e8 ee 9d ff ff       	call   c000ee72 <KePanic(char const*)>
c0015084:	83 c4 10             	add    esp,0x10
c0015087:	52                   	push   edx
c0015088:	6a 03                	push   0x3
c001508a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001508e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015092:	05 ff 0f 00 00       	add    eax,0xfff
c0015097:	83 d2 00             	adc    edx,0x0
c001509a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001509e:	50                   	push   eax
c001509f:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c00150a5:	e8 a2 d9 ff ff       	call   c0012a4c <VAS::allocatePages(int, int)>
c00150aa:	59                   	pop    ecx
c00150ab:	89 c3                	mov    ebx,eax
c00150ad:	5d                   	pop    ebp
c00150ae:	50                   	push   eax
c00150af:	68 0a 2b 02 c0       	push   0xc0022b0a
c00150b4:	e8 ab 1e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00150b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00150bc:	e8 af b4 fe ff       	call   c0000570 <strlen>
c00150c1:	8b 2d e0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002cee0
c00150c7:	40                   	inc    eax
c00150c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00150cb:	e8 5b 9a ff ff       	call   c000eb2b <malloc>
c00150d0:	89 04 ad 00 d3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd2d00],eax
c00150d7:	58                   	pop    eax
c00150d8:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c00150dd:	5a                   	pop    edx
c00150de:	56                   	push   esi
c00150df:	ff 34 85 00 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d00]
c00150e6:	e8 55 b5 fe ff       	call   c0000640 <strcpy>
c00150eb:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c00150f0:	8d 50 01             	lea    edx,[eax+0x1]
c00150f3:	89 1c 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],ebx
c00150fa:	89 15 e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,edx
c0015100:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015104:	83 c4 0c             	add    esp,0xc
c0015107:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c001510e:	6a 01                	push   0x1
c0015110:	53                   	push   ebx
c0015111:	56                   	push   esi
c0015112:	e8 9e f6 ff ff       	call   c00147b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	0f b6 c0             	movzx  eax,al
c001511d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015121:	85 c0                	test   eax,eax
c0015123:	0f 85 89 00 00 00    	jne    c00151b2 <Thr::loadDLL(char const*, bool)+0x241>
c0015129:	89 f8                	mov    eax,edi
c001512b:	84 c0                	test   al,al
c001512d:	74 73                	je     c00151a2 <Thr::loadDLL(char const*, bool)+0x231>
c001512f:	83 ec 0c             	sub    esp,0xc
c0015132:	68 e8 37 02 c0       	push   0xc00237e8
c0015137:	e8 36 9d ff ff       	call   c000ee72 <KePanic(char const*)>
c001513c:	83 c4 10             	add    esp,0x10
c001513f:	eb 61                	jmp    c00151a2 <Thr::loadDLL(char const*, bool)+0x231>
c0015141:	50                   	push   eax
c0015142:	50                   	push   eax
c0015143:	89 e8                	mov    eax,ebp
c0015145:	c1 e0 0c             	shl    eax,0xc
c0015148:	01 d8                	add    eax,ebx
c001514a:	50                   	push   eax
c001514b:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0015151:	e8 f8 d3 ff ff       	call   c001254e <VAS::getPageTableEntry(unsigned long)>
c0015156:	83 c4 10             	add    esp,0x10
c0015159:	8b 00                	mov    eax,DWORD PTR [eax]
c001515b:	a8 60                	test   al,0x60
c001515d:	75 11                	jne    c0015170 <Thr::loadDLL(char const*, bool)+0x1ff>
c001515f:	83 ec 0c             	sub    esp,0xc
c0015162:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015167:	50                   	push   eax
c0015168:	e8 90 9e ff ff       	call   c000effd <Phys::freePage(unsigned long)>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	45                   	inc    ebp
c0015171:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015175:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015179:	05 ff 0f 00 00       	add    eax,0xfff
c001517e:	bf 00 00 00 00       	mov    edi,0x0
c0015183:	83 d2 00             	adc    edx,0x0
c0015186:	0f ac d0 0c          	shrd   eax,edx,0xc
c001518a:	c1 ea 0c             	shr    edx,0xc
c001518d:	39 c5                	cmp    ebp,eax
c001518f:	89 d1                	mov    ecx,edx
c0015191:	89 f8                	mov    eax,edi
c0015193:	19 c8                	sbb    eax,ecx
c0015195:	72 aa                	jb     c0015141 <Thr::loadDLL(char const*, bool)+0x1d0>
c0015197:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001519c:	75 18                	jne    c00151b6 <Thr::loadDLL(char const*, bool)+0x245>
c001519e:	31 db                	xor    ebx,ebx
c00151a0:	eb 14                	jmp    c00151b6 <Thr::loadDLL(char const*, bool)+0x245>
c00151a2:	83 ec 0c             	sub    esp,0xc
c00151a5:	68 07 38 02 c0       	push   0xc0023807
c00151aa:	e8 c3 9c ff ff       	call   c000ee72 <KePanic(char const*)>
c00151af:	83 c4 10             	add    esp,0x10
c00151b2:	31 ed                	xor    ebp,ebp
c00151b4:	eb bb                	jmp    c0015171 <Thr::loadDLL(char const*, bool)+0x200>
c00151b6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00151bc:	89 d8                	mov    eax,ebx
c00151be:	5b                   	pop    ebx
c00151bf:	5e                   	pop    esi
c00151c0:	5f                   	pop    edi
c00151c1:	5d                   	pop    ebp
c00151c2:	c3                   	ret    

c00151c3 <Thr::executeDLL(unsigned long, void*)>:
c00151c3:	56                   	push   esi
c00151c4:	53                   	push   ebx
c00151c5:	52                   	push   edx
c00151c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00151ce:	85 db                	test   ebx,ebx
c00151d0:	75 10                	jne    c00151e2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00151d2:	83 ec 0c             	sub    esp,0xc
c00151d5:	68 23 38 02 c0       	push   0xc0023823
c00151da:	e8 93 9c ff ff       	call   c000ee72 <KePanic(char const*)>
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	50                   	push   eax
c00151e3:	50                   	push   eax
c00151e4:	53                   	push   ebx
c00151e5:	68 4d 38 02 c0       	push   0xc002384d
c00151ea:	e8 75 1d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00151ef:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00151f3:	89 d8                	mov    eax,ebx
c00151f5:	83 c4 14             	add    esp,0x14
c00151f8:	5b                   	pop    ebx
c00151f9:	5e                   	pop    esi
c00151fa:	ff e0                	jmp    eax

c00151fc <KeProcessExec(Process*, char const*)>:
c00151fc:	56                   	push   esi
c00151fd:	53                   	push   ebx
c00151fe:	83 ec 04             	sub    esp,0x4
c0015201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015205:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c001520b:	85 f6                	test   esi,esi
c001520d:	74 16                	je     c0015225 <KeProcessExec(Process*, char const*)+0x29>
c001520f:	83 ec 0c             	sub    esp,0xc
c0015212:	56                   	push   esi
c0015213:	e8 c8 d5 ff ff       	call   c00127e0 <VAS::~VAS()>
c0015218:	58                   	pop    eax
c0015219:	5a                   	pop    edx
c001521a:	6a 14                	push   0x14
c001521c:	56                   	push   esi
c001521d:	e8 7e 76 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0015222:	83 c4 10             	add    esp,0x10
c0015225:	83 ec 0c             	sub    esp,0xc
c0015228:	6a 14                	push   0x14
c001522a:	e8 fc 98 ff ff       	call   c000eb2b <malloc>
c001522f:	89 c6                	mov    esi,eax
c0015231:	58                   	pop    eax
c0015232:	5a                   	pop    edx
c0015233:	6a 00                	push   0x0
c0015235:	56                   	push   esi
c0015236:	e8 45 da ff ff       	call   c0012c80 <VAS::VAS(bool)>
c001523b:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0015241:	59                   	pop    ecx
c0015242:	5e                   	pop    esi
c0015243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015247:	50                   	push   eax
c0015248:	53                   	push   ebx
c0015249:	e8 35 f0 ff ff       	call   c0014283 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001524e:	83 c4 14             	add    esp,0x14
c0015251:	31 c0                	xor    eax,eax
c0015253:	5b                   	pop    ebx
c0015254:	5e                   	pop    esi
c0015255:	c3                   	ret    
c0015256:	66 90                	xchg   ax,ax

c0015258 <userModeEntryPoint(void*)>:
c0015258:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015260:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015265:	85 c0                	test   eax,eax
c0015267:	75 03                	jne    c001526c <userModeEntryPoint(void*)+0x14>
c0015269:	fb                   	sti    
c001526a:	66 90                	xchg   ax,ax
c001526c:	fb                   	sti    
c001526d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015272:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015275:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001527b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001527f:	e9 bb af fe ff       	jmp    c000023f <goToUsermode>

c0015284 <changeTSS>:
c0015284:	83 ec 14             	sub    esp,0x14
c0015287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001528c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001528f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015294:	c1 e2 15             	shl    edx,0x15
c0015297:	29 d0                	sub    eax,edx
c0015299:	50                   	push   eax
c001529a:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001529f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152a5:	05 68 11 00 00       	add    eax,0x1168
c00152aa:	50                   	push   eax
c00152ab:	e8 68 c8 ff ff       	call   c0011b18 <TSS::setESP(unsigned long)>
c00152b0:	83 c4 1c             	add    esp,0x1c
c00152b3:	c3                   	ret    

c00152b4 <switchToThread(ThreadControlBlock*)>:
c00152b4:	57                   	push   edi
c00152b5:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c00152bb:	56                   	push   esi
c00152bc:	85 c9                	test   ecx,ecx
c00152be:	53                   	push   ebx
c00152bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152c3:	0f 85 8b 00 00 00    	jne    c0015354 <switchToThread(ThreadControlBlock*)+0xa0>
c00152c9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00152cd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00152d3:	74 7b                	je     c0015350 <switchToThread(ThreadControlBlock*)+0x9c>
c00152d5:	b8 00 04 00 00       	mov    eax,0x400
c00152da:	29 d0                	sub    eax,edx
c00152dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00152df:	d1 f8                	sar    eax,1
c00152e1:	01 d0                	add    eax,edx
c00152e3:	90                   	nop
c00152e4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00152e7:	e8 45 38 00 00       	call   c0018b31 <HalQueryPerformanceCounter()>
c00152ec:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c00152f1:	89 15 f4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f4,edx
c00152f7:	89 c6                	mov    esi,eax
c00152f9:	89 d7                	mov    edi,edx
c00152fb:	2b 35 e0 d6 02 c0    	sub    esi,DWORD PTR ds:0xc002d6e0
c0015301:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0015306:	1b 3d e4 d6 02 c0    	sbb    edi,DWORD PTR ds:0xc002d6e4
c001530c:	89 35 e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,esi
c0015312:	89 3d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edi
c0015318:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001531e:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c0015324:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015327:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001532a:	01 c6                	add    esi,eax
c001532c:	11 d7                	adc    edi,edx
c001532e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015331:	83 ec 0c             	sub    esp,0xc
c0015334:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015337:	53                   	push   ebx
c0015338:	e8 3a af fe ff       	call   c0000277 <switchToThreadASM>
c001533d:	0f 20 c0             	mov    eax,cr0
c0015340:	83 c8 08             	or     eax,0x8
c0015343:	0f 22 c0             	mov    cr0,eax
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	5b                   	pop    ebx
c001534a:	5e                   	pop    esi
c001534b:	5f                   	pop    edi
c001534c:	c3                   	ret    
c001534d:	8d 76 00             	lea    esi,[esi+0x0]
c0015350:	31 c0                	xor    eax,eax
c0015352:	eb 90                	jmp    c00152e4 <switchToThread(ThreadControlBlock*)+0x30>
c0015354:	5b                   	pop    ebx
c0015355:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c001535f:	5e                   	pop    esi
c0015360:	5f                   	pop    edi
c0015361:	c3                   	ret    
c0015362:	66 90                	xchg   ax,ax

c0015364 <Process::addArgs(char**)>:
c0015364:	57                   	push   edi
c0015365:	56                   	push   esi
c0015366:	53                   	push   ebx
c0015367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001536b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001536f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015379:	85 ff                	test   edi,edi
c001537b:	74 4f                	je     c00153cc <Process::addArgs(char**)+0x68>
c001537d:	8b 07                	mov    eax,DWORD PTR [edi]
c001537f:	85 c0                	test   eax,eax
c0015381:	74 49                	je     c00153cc <Process::addArgs(char**)+0x68>
c0015383:	31 db                	xor    ebx,ebx
c0015385:	8d 76 00             	lea    esi,[esi+0x0]
c0015388:	83 ec 0c             	sub    esp,0xc
c001538b:	50                   	push   eax
c001538c:	e8 df b1 fe ff       	call   c0000570 <strlen>
c0015391:	83 c0 01             	add    eax,0x1
c0015394:	89 04 24             	mov    DWORD PTR [esp],eax
c0015397:	e8 8f 97 ff ff       	call   c000eb2b <malloc>
c001539c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00153a3:	5a                   	pop    edx
c00153a4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00153a7:	59                   	pop    ecx
c00153a8:	83 c3 01             	add    ebx,0x1
c00153ab:	52                   	push   edx
c00153ac:	50                   	push   eax
c00153ad:	e8 8e b2 fe ff       	call   c0000640 <strcpy>
c00153b2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00153b8:	83 c4 10             	add    esp,0x10
c00153bb:	83 c1 01             	add    ecx,0x1
c00153be:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00153c4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00153c7:	85 c0                	test   eax,eax
c00153c9:	75 bd                	jne    c0015388 <Process::addArgs(char**)+0x24>
c00153cb:	90                   	nop
c00153cc:	5b                   	pop    ebx
c00153cd:	5e                   	pop    esi
c00153ce:	5f                   	pop    edi
c00153cf:	c3                   	ret    

c00153d0 <Process::Process(char const*, Process*, char**)>:
c00153d0:	56                   	push   esi
c00153d1:	53                   	push   ebx
c00153d2:	83 ec 14             	sub    esp,0x14
c00153d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153d9:	05 0c 02 00 00       	add    eax,0x20c
c00153de:	bb 07 00 00 00       	mov    ebx,0x7
c00153e3:	89 c6                	mov    esi,eax
c00153e5:	8d 76 00             	lea    esi,[esi+0x0]
c00153e8:	85 db                	test   ebx,ebx
c00153ea:	78 14                	js     c0015400 <Process::Process(char const*, Process*, char**)+0x30>
c00153ec:	83 ec 0c             	sub    esp,0xc
c00153ef:	56                   	push   esi
c00153f0:	e8 9b b8 00 00       	call   c0020c90 <ThreadControlBlock::ThreadControlBlock()>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	83 c6 5f             	add    esi,0x5f
c00153fb:	83 eb 01             	sub    ebx,0x1
c00153fe:	eb e8                	jmp    c00153e8 <Process::Process(char const*, Process*, char**)+0x18>
c0015400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015404:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001540b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001540f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015416:	83 ec 0c             	sub    esp,0xc
c0015419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001541d:	e8 7e 89 ff ff       	call   c000dda0 <KeNewProcessEnv(Process*)>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	89 c2                	mov    edx,eax
c0015427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001542b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015435:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001543e:	a1 5c 51 02 c0       	mov    eax,ds:0xc002515c
c0015443:	8d 50 01             	lea    edx,[eax+0x1]
c0015446:	89 15 5c 51 02 c0    	mov    DWORD PTR ds:0xc002515c,edx
c001544c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015450:	89 02                	mov    DWORD PTR [edx],eax
c0015452:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001545a:	83 ec 0c             	sub    esp,0xc
c001545d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015461:	e8 c5 96 ff ff       	call   c000eb2b <malloc>
c0015466:	83 c4 10             	add    esp,0x10
c0015469:	89 c3                	mov    ebx,eax
c001546b:	83 ec 08             	sub    esp,0x8
c001546e:	6a 00                	push   0x0
c0015470:	53                   	push   ebx
c0015471:	e8 0a d8 ff ff       	call   c0012c80 <VAS::VAS(bool)>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001547d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015487:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015499:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001549f:	e8 8f aa ff ff       	call   c000ff33 <KeInitSignals()>
c00154a4:	89 c2                	mov    edx,eax
c00154a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154aa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00154b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154ba:	85 c0                	test   eax,eax
c00154bc:	74 42                	je     c0015500 <Process::Process(char const*, Process*, char**)+0x130>
c00154be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154c2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154c8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00154ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154d2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00154d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00154e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154ec:	05 0c 01 00 00       	add    eax,0x10c
c00154f1:	83 ec 08             	sub    esp,0x8
c00154f4:	52                   	push   edx
c00154f5:	50                   	push   eax
c00154f6:	e8 45 b1 fe ff       	call   c0000640 <strcpy>
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	eb 7c                	jmp    c001557c <Process::Process(char const*, Process*, char**)+0x1ac>
c0015500:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015508:	83 ec 0c             	sub    esp,0xc
c001550b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001550f:	e8 17 96 ff ff       	call   c000eb2b <malloc>
c0015514:	83 c4 10             	add    esp,0x10
c0015517:	89 c3                	mov    ebx,eax
c0015519:	83 ec 08             	sub    esp,0x8
c001551c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015520:	53                   	push   ebx
c0015521:	e8 f2 c2 ff ff       	call   c0011818 <VgaText::VgaText(char const*)>
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001552d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015537:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001553d:	83 ec 0c             	sub    esp,0xc
c0015540:	50                   	push   eax
c0015541:	e8 28 bb ff ff       	call   c001106e <addToTerminalCycle(VgaText*)>
c0015546:	83 c4 10             	add    esp,0x10
c0015549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001554d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015553:	83 ec 0c             	sub    esp,0xc
c0015556:	50                   	push   eax
c0015557:	e8 83 bd ff ff       	call   c00112df <setActiveTerminal(VgaText*)>
c001555c:	83 c4 10             	add    esp,0x10
c001555f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015563:	05 0c 01 00 00       	add    eax,0x10c
c0015568:	83 ec 08             	sub    esp,0x8
c001556b:	68 6c 38 02 c0       	push   0xc002386c
c0015570:	50                   	push   eax
c0015571:	e8 ca b0 fe ff       	call   c0000640 <strcpy>
c0015576:	83 c4 10             	add    esp,0x10
c0015579:	8d 76 00             	lea    esi,[esi+0x0]
c001557c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015580:	83 c0 0c             	add    eax,0xc
c0015583:	83 ec 08             	sub    esp,0x8
c0015586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001558a:	50                   	push   eax
c001558b:	e8 b0 b0 fe ff       	call   c0000640 <strcpy>
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	83 ec 08             	sub    esp,0x8
c0015596:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001559a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001559e:	e8 c1 fd ff ff       	call   c0015364 <Process::addArgs(char**)>
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	83 ec 08             	sub    esp,0x8
c00155a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155b1:	e8 cd ec ff ff       	call   c0014283 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00155bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00155c1:	83 f0 01             	xor    eax,0x1
c00155c4:	88 c2                	mov    dl,al
c00155c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ca:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00155d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00155d6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00155db:	52                   	push   edx
c00155dc:	50                   	push   eax
c00155dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155e1:	68 c4 38 02 c0       	push   0xc00238c4
c00155e6:	e8 79 19 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00155eb:	83 c4 10             	add    esp,0x10
c00155ee:	90                   	nop
c00155ef:	83 c4 14             	add    esp,0x14
c00155f2:	5b                   	pop    ebx
c00155f3:	5e                   	pop    esi
c00155f4:	c3                   	ret    
c00155f5:	90                   	nop
c00155f6:	66 90                	xchg   ax,ax

c00155f8 <Process::Process(bool, char const*, Process*, char**)>:
c00155f8:	56                   	push   esi
c00155f9:	53                   	push   ebx
c00155fa:	83 ec 24             	sub    esp,0x24
c00155fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015601:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015609:	05 0c 02 00 00       	add    eax,0x20c
c001560e:	bb 07 00 00 00       	mov    ebx,0x7
c0015613:	89 c6                	mov    esi,eax
c0015615:	8d 76 00             	lea    esi,[esi+0x0]
c0015618:	85 db                	test   ebx,ebx
c001561a:	78 14                	js     c0015630 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001561c:	83 ec 0c             	sub    esp,0xc
c001561f:	56                   	push   esi
c0015620:	e8 6b b6 00 00       	call   c0020c90 <ThreadControlBlock::ThreadControlBlock()>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	83 c6 5f             	add    esi,0x5f
c001562b:	83 eb 01             	sub    ebx,0x1
c001562e:	eb e8                	jmp    c0015618 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015630:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015634:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001563b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001563f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015646:	83 ec 0c             	sub    esp,0xc
c0015649:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001564d:	e8 4e 87 ff ff       	call   c000dda0 <KeNewProcessEnv(Process*)>
c0015652:	83 c4 10             	add    esp,0x10
c0015655:	89 c2                	mov    edx,eax
c0015657:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001565b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015665:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001566e:	a1 5c 51 02 c0       	mov    eax,ds:0xc002515c
c0015673:	8d 50 01             	lea    edx,[eax+0x1]
c0015676:	89 15 5c 51 02 c0    	mov    DWORD PTR ds:0xc002515c,edx
c001567c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015680:	89 02                	mov    DWORD PTR [edx],eax
c0015682:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001568a:	83 ec 0c             	sub    esp,0xc
c001568d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015691:	e8 95 94 ff ff       	call   c000eb2b <malloc>
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	89 c3                	mov    ebx,eax
c001569b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00156a0:	83 ec 08             	sub    esp,0x8
c00156a3:	50                   	push   eax
c00156a4:	53                   	push   ebx
c00156a5:	e8 d6 d5 ff ff       	call   c0012c80 <VAS::VAS(bool)>
c00156aa:	83 c4 10             	add    esp,0x10
c00156ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156b1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156bb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00156cd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156d3:	e8 5b a8 ff ff       	call   c000ff33 <KeInitSignals()>
c00156d8:	89 c2                	mov    edx,eax
c00156da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156de:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156ee:	85 c0                	test   eax,eax
c00156f0:	74 42                	je     c0015734 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00156f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156f6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156fc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015706:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001570c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015710:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015716:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001571c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015720:	05 0c 01 00 00       	add    eax,0x10c
c0015725:	83 ec 08             	sub    esp,0x8
c0015728:	52                   	push   edx
c0015729:	50                   	push   eax
c001572a:	e8 11 af fe ff       	call   c0000640 <strcpy>
c001572f:	83 c4 10             	add    esp,0x10
c0015732:	eb 7c                	jmp    c00157b0 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0015734:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015743:	e8 e3 93 ff ff       	call   c000eb2b <malloc>
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	89 c3                	mov    ebx,eax
c001574d:	83 ec 08             	sub    esp,0x8
c0015750:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015754:	53                   	push   ebx
c0015755:	e8 be c0 ff ff       	call   c0011818 <VgaText::VgaText(char const*)>
c001575a:	83 c4 10             	add    esp,0x10
c001575d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015761:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015767:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001576b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015771:	83 ec 0c             	sub    esp,0xc
c0015774:	50                   	push   eax
c0015775:	e8 f4 b8 ff ff       	call   c001106e <addToTerminalCycle(VgaText*)>
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015781:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015787:	83 ec 0c             	sub    esp,0xc
c001578a:	50                   	push   eax
c001578b:	e8 4f bb ff ff       	call   c00112df <setActiveTerminal(VgaText*)>
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015797:	05 0c 01 00 00       	add    eax,0x10c
c001579c:	83 ec 08             	sub    esp,0x8
c001579f:	68 6c 38 02 c0       	push   0xc002386c
c00157a4:	50                   	push   eax
c00157a5:	e8 96 ae fe ff       	call   c0000640 <strcpy>
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	8d 76 00             	lea    esi,[esi+0x0]
c00157b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b4:	83 c0 0c             	add    eax,0xc
c00157b7:	83 ec 08             	sub    esp,0x8
c00157ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157be:	50                   	push   eax
c00157bf:	e8 7c ae fe ff       	call   c0000640 <strcpy>
c00157c4:	83 c4 10             	add    esp,0x10
c00157c7:	83 ec 08             	sub    esp,0x8
c00157ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157d2:	e8 8d fb ff ff       	call   c0015364 <Process::addArgs(char**)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	90                   	nop
c00157db:	83 c4 24             	add    esp,0x24
c00157de:	5b                   	pop    ebx
c00157df:	5e                   	pop    esi
c00157e0:	c3                   	ret    
c00157e1:	8d 76 00             	lea    esi,[esi+0x0]

c00157e4 <taskStartupFunction>:
c00157e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157e9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00157ec:	c3                   	ret    
c00157ed:	8d 76 00             	lea    esi,[esi+0x0]

c00157f0 <KeDisablePreemption()>:
c00157f0:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00157f5:	85 c0                	test   eax,eax
c00157f7:	75 13                	jne    c001580c <KeDisablePreemption()+0x1c>
c00157f9:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c00157ff:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c0015806:	88 15 88 d6 02 c0    	mov    BYTE PTR ds:0xc002d688,dl
c001580c:	83 c0 01             	add    eax,0x1
c001580f:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c0015814:	c3                   	ret    
c0015815:	8d 76 00             	lea    esi,[esi+0x0]

c0015818 <KeRestorePreemption()>:
c0015818:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c001581d:	83 e8 01             	sub    eax,0x1
c0015820:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c0015825:	75 0d                	jne    c0015834 <KeRestorePreemption()+0x1c>
c0015827:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c001582c:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c0015831:	8d 76 00             	lea    esi,[esi+0x0]
c0015834:	c3                   	ret    
c0015835:	90                   	nop
c0015836:	66 90                	xchg   ax,ax

c0015838 <Process::createThread(void (*)(void*), void*, int)>:
c0015838:	57                   	push   edi
c0015839:	31 c9                	xor    ecx,ecx
c001583b:	56                   	push   esi
c001583c:	53                   	push   ebx
c001583d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015841:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015848:	89 f2                	mov    edx,esi
c001584a:	66 90                	xchg   ax,ax
c001584c:	0f b7 c2             	movzx  eax,dx
c001584f:	80 e2 01             	and    dl,0x1
c0015852:	74 14                	je     c0015868 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015854:	d1 f8                	sar    eax,1
c0015856:	83 c1 01             	add    ecx,0x1
c0015859:	89 c2                	mov    edx,eax
c001585b:	83 f9 10             	cmp    ecx,0x10
c001585e:	75 ec                	jne    c001584c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015860:	31 db                	xor    ebx,ebx
c0015862:	89 d8                	mov    eax,ebx
c0015864:	5b                   	pop    ebx
c0015865:	5e                   	pop    esi
c0015866:	5f                   	pop    edi
c0015867:	c3                   	ret    
c0015868:	b8 01 00 00 00       	mov    eax,0x1
c001586d:	d3 e0                	shl    eax,cl
c001586f:	09 c6                	or     esi,eax
c0015871:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015874:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001587b:	01 c0                	add    eax,eax
c001587d:	01 c8                	add    eax,ecx
c001587f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015882:	01 d8                	add    eax,ebx
c0015884:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001588b:	75 0b                	jne    c0015898 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001588d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015897:	90                   	nop
c0015898:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001589e:	83 ec 0c             	sub    esp,0xc
c00158a1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00158a4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00158a7:	01 c0                	add    eax,eax
c00158a9:	01 c8                	add    eax,ecx
c00158ab:	8d 3c 80             	lea    edi,[eax+eax*4]
c00158ae:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00158b1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00158b7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00158bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158c1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00158c7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00158cd:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00158d3:	89 ca                	mov    edx,ecx
c00158d5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00158dc:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c00158e6:	f7 da                	neg    edx
c00158e8:	c1 e2 15             	shl    edx,0x15
c00158eb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00158f1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00158f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00158fb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015905:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001590b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001590f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015915:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001591f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015929:	68 00 01 00 00       	push   0x100
c001592e:	e8 f8 91 ff ff       	call   c000eb2b <malloc>
c0015933:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015936:	58                   	pop    eax
c0015937:	5a                   	pop    edx
c0015938:	53                   	push   ebx
c0015939:	68 cc d6 02 c0       	push   0xc002d6cc
c001593e:	e8 f9 ae 00 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	89 d8                	mov    eax,ebx
c0015948:	5b                   	pop    ebx
c0015949:	5e                   	pop    esi
c001594a:	5f                   	pop    edi
c001594b:	c3                   	ret    

c001594c <Process::createUserThread()>:
c001594c:	83 ec 0c             	sub    esp,0xc
c001594f:	68 80 00 00 00       	push   0x80
c0015954:	6a 00                	push   0x0
c0015956:	68 58 52 01 c0       	push   0xc0015258
c001595b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001595f:	50                   	push   eax
c0015960:	e8 d3 fe ff ff       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c0015965:	83 c4 1c             	add    esp,0x1c
c0015968:	c3                   	ret    
c0015969:	8d 76 00             	lea    esi,[esi+0x0]

c001596c <setupMultitasking(void (*)())>:
c001596c:	56                   	push   esi
c001596d:	53                   	push   ebx
c001596e:	83 ec 04             	sub    esp,0x4
c0015971:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015975:	eb 11                	jmp    c0015988 <setupMultitasking(void (*)())+0x1c>
c0015977:	90                   	nop
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015980:	e8 fb ad 00 00       	call   c0020780 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015990:	e8 c7 ad 00 00       	call   c002075c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015995:	83 c4 10             	add    esp,0x10
c0015998:	84 c0                	test   al,al
c001599a:	74 dc                	je     c0015978 <setupMultitasking(void (*)())+0xc>
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	68 24 07 00 00       	push   0x724
c00159a4:	e8 82 91 ff ff       	call   c000eb2b <malloc>
c00159a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00159b0:	89 c3                	mov    ebx,eax
c00159b2:	6a 00                	push   0x0
c00159b4:	68 70 38 02 c0       	push   0xc0023870
c00159b9:	6a 01                	push   0x1
c00159bb:	50                   	push   eax
c00159bc:	e8 37 fc ff ff       	call   c00155f8 <Process::Process(bool, char const*, Process*, char**)>
c00159c1:	83 c4 14             	add    esp,0x14
c00159c4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00159ca:	89 1d d8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d8,ebx
c00159d0:	50                   	push   eax
c00159d1:	e8 09 b9 ff ff       	call   c00112df <setActiveTerminal(VgaText*)>
c00159d6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00159dd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00159e7:	83 c8 01             	or     eax,0x1
c00159ea:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00159f1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00159f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00159fa:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a04:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a0a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a10:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a1a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015a24:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a2e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a34:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a3e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a44:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a4e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a55:	e8 d1 90 ff ff       	call   c000eb2b <malloc>
c0015a5a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a60:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015a66:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a6c:	5a                   	pop    edx
c0015a6d:	59                   	pop    ecx
c0015a6e:	68 6c 38 02 c0       	push   0xc002386c
c0015a73:	50                   	push   eax
c0015a74:	e8 c7 ab fe ff       	call   c0000640 <strcpy>
c0015a79:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015a80:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015a84:	83 c4 14             	add    esp,0x14
c0015a87:	5b                   	pop    ebx
c0015a88:	5e                   	pop    esi
c0015a89:	e9 db a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015a8e:	66 90                	xchg   ax,ax

c0015a90 <schedule()>:
c0015a90:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c0015a96:	85 d2                	test   edx,edx
c0015a98:	74 0e                	je     c0015aa8 <schedule()+0x18>
c0015a9a:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c0015aa4:	c3                   	ret    
c0015aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0015aa8:	53                   	push   ebx
c0015aa9:	83 ec 14             	sub    esp,0x14
c0015aac:	68 cc d6 02 c0       	push   0xc002d6cc
c0015ab1:	e8 a6 ac 00 00       	call   c002075c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	84 c0                	test   al,al
c0015abb:	75 3f                	jne    c0015afc <schedule()+0x6c>
c0015abd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ac2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015ac5:	83 fa 01             	cmp    edx,0x1
c0015ac8:	74 3a                	je     c0015b04 <schedule()+0x74>
c0015aca:	66 90                	xchg   ax,ax
c0015acc:	83 ec 0c             	sub    esp,0xc
c0015acf:	68 cc d6 02 c0       	push   0xc002d6cc
c0015ad4:	e8 9f ac 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ad9:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015ae0:	89 c3                	mov    ebx,eax
c0015ae2:	e8 99 ac 00 00       	call   c0020780 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ae7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015aee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015af1:	e8 be f7 ff ff       	call   c00152b4 <switchToThread(ThreadControlBlock*)>
c0015af6:	83 c4 10             	add    esp,0x10
c0015af9:	8d 76 00             	lea    esi,[esi+0x0]
c0015afc:	83 c4 08             	add    esp,0x8
c0015aff:	5b                   	pop    ebx
c0015b00:	c3                   	ret    
c0015b01:	8d 76 00             	lea    esi,[esi+0x0]
c0015b04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b0b:	83 ec 08             	sub    esp,0x8
c0015b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b13:	50                   	push   eax
c0015b14:	68 cc d6 02 c0       	push   0xc002d6cc
c0015b19:	e8 1e ad 00 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	eb a9                	jmp    c0015acc <schedule()+0x3c>
c0015b23:	90                   	nop

c0015b24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015b24:	83 ec 0c             	sub    esp,0xc
c0015b27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015b33:	e8 58 ff ff ff       	call   c0015a90 <schedule()>
c0015b38:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015b40:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015b45:	85 c0                	test   eax,eax
c0015b47:	75 03                	jne    c0015b4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0015b49:	fb                   	sti    
c0015b4a:	66 90                	xchg   ax,ax
c0015b4c:	83 c4 0c             	add    esp,0xc
c0015b4f:	c3                   	ret    

c0015b50 <blockTask(TaskState)>:
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	fa                   	cli    
c0015b54:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015b59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b5d:	83 c0 01             	add    eax,0x1
c0015b60:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015b65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015b6d:	e8 1e ff ff ff       	call   c0015a90 <schedule()>
c0015b72:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015b7a:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015b80:	85 d2                	test   edx,edx
c0015b82:	75 04                	jne    c0015b88 <blockTask(TaskState)+0x38>
c0015b84:	fb                   	sti    
c0015b85:	8d 76 00             	lea    esi,[esi+0x0]
c0015b88:	83 c4 0c             	add    esp,0xc
c0015b8b:	c3                   	ret    

c0015b8c <waitTask(int, int*, int)>:
c0015b8c:	83 ec 18             	sub    esp,0x18
c0015b8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015b98:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015b9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ba4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015ba7:	6a 07                	push   0x7
c0015ba9:	e8 a2 ff ff ff       	call   c0015b50 <blockTask(TaskState)>
c0015bae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bb3:	83 c4 10             	add    esp,0x10
c0015bb6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015bb9:	85 d2                	test   edx,edx
c0015bbb:	74 0b                	je     c0015bc8 <waitTask(int, int*, int)+0x3c>
c0015bbd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015bc0:	89 02                	mov    DWORD PTR [edx],eax
c0015bc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc7:	90                   	nop
c0015bc8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015bcb:	83 c4 0c             	add    esp,0xc
c0015bce:	c3                   	ret    
c0015bcf:	90                   	nop

c0015bd0 <milliTenthSleepUntil(unsigned int)>:
c0015bd0:	83 ec 0c             	sub    esp,0xc
c0015bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bd7:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c0015bdd:	76 05                	jbe    c0015be4 <milliTenthSleepUntil(unsigned int)+0x14>
c0015bdf:	90                   	nop
c0015be0:	83 c4 0c             	add    esp,0xc
c0015be3:	c3                   	ret    
c0015be4:	fa                   	cli    
c0015be5:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015beb:	83 ec 08             	sub    esp,0x8
c0015bee:	83 c1 01             	add    ecx,0x1
c0015bf1:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c0015bf7:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015bfd:	83 c2 01             	add    edx,0x1
c0015c00:	89 15 ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,edx
c0015c06:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015c0c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015c0f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c15:	51                   	push   ecx
c0015c16:	68 c0 d6 02 c0       	push   0xc002d6c0
c0015c1b:	e8 1c ac 00 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c20:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015c27:	e8 24 ff ff ff       	call   c0015b50 <blockTask(TaskState)>
c0015c2c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	83 e8 01             	sub    eax,0x1
c0015c37:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015c3c:	85 c0                	test   eax,eax
c0015c3e:	75 0c                	jne    c0015c4c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015c40:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c0015c46:	85 d2                	test   edx,edx
c0015c48:	75 1a                	jne    c0015c64 <milliTenthSleepUntil(unsigned int)+0x94>
c0015c4a:	66 90                	xchg   ax,ax
c0015c4c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015c54:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015c59:	85 c0                	test   eax,eax
c0015c5b:	75 83                	jne    c0015be0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015c5d:	fb                   	sti    
c0015c5e:	83 c4 0c             	add    esp,0xc
c0015c61:	c3                   	ret    
c0015c62:	66 90                	xchg   ax,ax
c0015c64:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015c6e:	e8 1d fe ff ff       	call   c0015a90 <schedule()>
c0015c73:	eb d7                	jmp    c0015c4c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015c75:	8d 76 00             	lea    esi,[esi+0x0]

c0015c78 <milliTenthSleep(unsigned int)>:
c0015c78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c7c:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c0015c81:	01 c2                	add    edx,eax
c0015c83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015c87:	e9 44 ff ff ff       	jmp    c0015bd0 <milliTenthSleepUntil(unsigned int)>

c0015c8c <sleep(unsigned int)>:
c0015c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c90:	8d 04 80             	lea    eax,[eax+eax*4]
c0015c93:	8d 04 80             	lea    eax,[eax+eax*4]
c0015c96:	8d 04 80             	lea    eax,[eax+eax*4]
c0015c99:	8d 04 80             	lea    eax,[eax+eax*4]
c0015c9c:	c1 e0 04             	shl    eax,0x4
c0015c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ca3:	eb d3                	jmp    c0015c78 <milliTenthSleep(unsigned int)>
c0015ca5:	8d 76 00             	lea    esi,[esi+0x0]

c0015ca8 <taskReturned>:
c0015ca8:	83 ec 18             	sub    esp,0x18
c0015cab:	68 f8 38 02 c0       	push   0xc00238f8
c0015cb0:	e8 bd 91 ff ff       	call   c000ee72 <KePanic(char const*)>
c0015cb5:	83 c4 10             	add    esp,0x10
c0015cb8:	83 ec 0c             	sub    esp,0xc
c0015cbb:	6a 02                	push   0x2
c0015cbd:	e8 8e fe ff ff       	call   c0015b50 <blockTask(TaskState)>
c0015cc2:	fa                   	cli    
c0015cc3:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015cc8:	83 c0 01             	add    eax,0x1
c0015ccb:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015cd0:	e8 bb fd ff ff       	call   c0015a90 <schedule()>
c0015cd5:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015cdd:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015ce3:	83 c4 10             	add    esp,0x10
c0015ce6:	85 d2                	test   edx,edx
c0015ce8:	75 ce                	jne    c0015cb8 <taskReturned+0x10>
c0015cea:	fb                   	sti    
c0015ceb:	eb cb                	jmp    c0015cb8 <taskReturned+0x10>
c0015ced:	8d 76 00             	lea    esi,[esi+0x0]

c0015cf0 <Thr::processFromPID(int)>:
c0015cf0:	57                   	push   edi
c0015cf1:	56                   	push   esi
c0015cf2:	53                   	push   ebx
c0015cf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cf7:	fa                   	cli    
c0015cf8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015cfd:	83 ec 0c             	sub    esp,0xc
c0015d00:	83 c0 01             	add    eax,0x1
c0015d03:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d08:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015d0d:	e8 66 aa 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	89 c7                	mov    edi,eax
c0015d17:	eb 17                	jmp    c0015d30 <Thr::processFromPID(int)+0x40>
c0015d19:	8d 76 00             	lea    esi,[esi+0x0]
c0015d1c:	83 ec 0c             	sub    esp,0xc
c0015d1f:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d24:	e8 4f aa 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	39 f8                	cmp    eax,edi
c0015d2e:	74 50                	je     c0015d80 <Thr::processFromPID(int)+0x90>
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d38:	e8 3b aa 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d3d:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015d44:	89 c3                	mov    ebx,eax
c0015d46:	e8 35 aa 00 00       	call   c0020780 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d4b:	59                   	pop    ecx
c0015d4c:	58                   	pop    eax
c0015d4d:	53                   	push   ebx
c0015d4e:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d53:	e8 e4 aa 00 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d58:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d5b:	83 c4 10             	add    esp,0x10
c0015d5e:	39 30                	cmp    DWORD PTR [eax],esi
c0015d60:	75 ba                	jne    c0015d1c <Thr::processFromPID(int)+0x2c>
c0015d62:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015d6a:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015d70:	85 d2                	test   edx,edx
c0015d72:	74 08                	je     c0015d7c <Thr::processFromPID(int)+0x8c>
c0015d74:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d77:	5b                   	pop    ebx
c0015d78:	5e                   	pop    esi
c0015d79:	5f                   	pop    edi
c0015d7a:	c3                   	ret    
c0015d7b:	90                   	nop
c0015d7c:	fb                   	sti    
c0015d7d:	eb f5                	jmp    c0015d74 <Thr::processFromPID(int)+0x84>
c0015d7f:	90                   	nop
c0015d80:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015d88:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015d8d:	85 c0                	test   eax,eax
c0015d8f:	75 07                	jne    c0015d98 <Thr::processFromPID(int)+0xa8>
c0015d91:	fb                   	sti    
c0015d92:	31 c0                	xor    eax,eax
c0015d94:	5b                   	pop    ebx
c0015d95:	5e                   	pop    esi
c0015d96:	5f                   	pop    edi
c0015d97:	c3                   	ret    
c0015d98:	5b                   	pop    ebx
c0015d99:	31 c0                	xor    eax,eax
c0015d9b:	5e                   	pop    esi
c0015d9c:	5f                   	pop    edi
c0015d9d:	c3                   	ret    
c0015d9e:	66 90                	xchg   ax,ax

c0015da0 <unblockTask(ThreadControlBlock*)>:
c0015da0:	53                   	push   ebx
c0015da1:	83 ec 08             	sub    esp,0x8
c0015da4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015da8:	fa                   	cli    
c0015da9:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015daf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015db2:	83 c2 01             	add    edx,0x1
c0015db5:	85 c0                	test   eax,eax
c0015db7:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c0015dbd:	74 6d                	je     c0015e2c <unblockTask(ThreadControlBlock*)+0x8c>
c0015dbf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015dc2:	83 f8 01             	cmp    eax,0x1
c0015dc5:	74 39                	je     c0015e00 <unblockTask(ThreadControlBlock*)+0x60>
c0015dc7:	83 ec 0c             	sub    esp,0xc
c0015dca:	68 cc d6 02 c0       	push   0xc002d6cc
c0015dcf:	e8 a4 a9 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015dd4:	83 c4 10             	add    esp,0x10
c0015dd7:	85 c0                	test   eax,eax
c0015dd9:	75 1d                	jne    c0015df8 <unblockTask(ThreadControlBlock*)+0x58>
c0015ddb:	eb 63                	jmp    c0015e40 <unblockTask(ThreadControlBlock*)+0xa0>
c0015ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0015de0:	83 ec 08             	sub    esp,0x8
c0015de3:	50                   	push   eax
c0015de4:	68 cc d6 02 c0       	push   0xc002d6cc
c0015de9:	e8 96 ae 00 00       	call   c0020c84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015dee:	83 c4 10             	add    esp,0x10
c0015df1:	85 c0                	test   eax,eax
c0015df3:	74 4b                	je     c0015e40 <unblockTask(ThreadControlBlock*)+0xa0>
c0015df5:	8d 76 00             	lea    esi,[esi+0x0]
c0015df8:	39 c3                	cmp    ebx,eax
c0015dfa:	75 e4                	jne    c0015de0 <unblockTask(ThreadControlBlock*)+0x40>
c0015dfc:	eb 12                	jmp    c0015e10 <unblockTask(ThreadControlBlock*)+0x70>
c0015dfe:	66 90                	xchg   ax,ax
c0015e00:	83 ec 0c             	sub    esp,0xc
c0015e03:	68 8e 38 02 c0       	push   0xc002388e
c0015e08:	e8 57 11 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015e0d:	83 c4 10             	add    esp,0x10
c0015e10:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015e18:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015e1d:	85 c0                	test   eax,eax
c0015e1f:	75 03                	jne    c0015e24 <unblockTask(ThreadControlBlock*)+0x84>
c0015e21:	fb                   	sti    
c0015e22:	66 90                	xchg   ax,ax
c0015e24:	83 c4 08             	add    esp,0x8
c0015e27:	5b                   	pop    ebx
c0015e28:	c3                   	ret    
c0015e29:	8d 76 00             	lea    esi,[esi+0x0]
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	68 77 38 02 c0       	push   0xc0023877
c0015e34:	e8 2b 11 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015e39:	83 c4 10             	add    esp,0x10
c0015e3c:	eb d2                	jmp    c0015e10 <unblockTask(ThreadControlBlock*)+0x70>
c0015e3e:	66 90                	xchg   ax,ax
c0015e40:	83 ec 08             	sub    esp,0x8
c0015e43:	53                   	push   ebx
c0015e44:	68 cc d6 02 c0       	push   0xc002d6cc
c0015e49:	e8 ee a9 00 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e4e:	83 c4 10             	add    esp,0x10
c0015e51:	eb bd                	jmp    c0015e10 <unblockTask(ThreadControlBlock*)+0x70>
c0015e53:	90                   	nop

c0015e54 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015e54:	55                   	push   ebp
c0015e55:	57                   	push   edi
c0015e56:	56                   	push   esi
c0015e57:	53                   	push   ebx
c0015e58:	83 ec 1c             	sub    esp,0x1c
c0015e5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015e5f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e62:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015e68:	85 ed                	test   ebp,ebp
c0015e6a:	7e 28                	jle    c0015e94 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015e6c:	31 f6                	xor    esi,esi
c0015e6e:	66 90                	xchg   ax,ax
c0015e70:	83 ec 0c             	sub    esp,0xc
c0015e73:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015e7a:	83 c6 01             	add    esi,0x1
c0015e7d:	57                   	push   edi
c0015e7e:	e8 b8 8c ff ff       	call   c000eb3b <free>
c0015e83:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e86:	83 c4 10             	add    esp,0x10
c0015e89:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015e8f:	7f df                	jg     c0015e70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015e91:	8d 76 00             	lea    esi,[esi+0x0]
c0015e94:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015e9e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015ea3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015ea6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015ea9:	d3 c0                	rol    eax,cl
c0015eab:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015eb2:	21 c8                	and    eax,ecx
c0015eb4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015ebb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015ebe:	89 f7                	mov    edi,esi
c0015ec0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015ec8:	0f 85 72 01 00 00    	jne    c0016040 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015ece:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015ed4:	85 ed                	test   ebp,ebp
c0015ed6:	74 1c                	je     c0015ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	55                   	push   ebp
c0015edc:	e8 db 7d ff ff       	call   c000dcbc <EnvVarContainer::~EnvVarContainer()>
c0015ee1:	59                   	pop    ecx
c0015ee2:	5e                   	pop    esi
c0015ee3:	6a 0c                	push   0xc
c0015ee5:	55                   	push   ebp
c0015ee6:	e8 b5 69 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0015eeb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015eee:	83 c4 10             	add    esp,0x10
c0015ef1:	89 f7                	mov    edi,esi
c0015ef3:	90                   	nop
c0015ef4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015efa:	85 c0                	test   eax,eax
c0015efc:	0f 84 b2 00 00 00    	je     c0015fb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015f02:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015f05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015f09:	31 c9                	xor    ecx,ecx
c0015f0b:	eb 17                	jmp    c0015f24 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f10:	83 c1 01             	add    ecx,0x1
c0015f13:	83 f9 10             	cmp    ecx,0x10
c0015f16:	0f 84 98 00 00 00    	je     c0015fb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015f1c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015f22:	66 90                	xchg   ax,ax
c0015f24:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015f2b:	d3 fa                	sar    edx,cl
c0015f2d:	80 e2 01             	and    dl,0x1
c0015f30:	74 de                	je     c0015f10 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015f32:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015f35:	01 d2                	add    edx,edx
c0015f37:	01 ca                	add    edx,ecx
c0015f39:	8d 14 92             	lea    edx,[edx+edx*4]
c0015f3c:	01 d0                	add    eax,edx
c0015f3e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015f44:	83 fd 07             	cmp    ebp,0x7
c0015f47:	75 c7                	jne    c0015f10 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015f49:	05 40 02 00 00       	add    eax,0x240
c0015f4e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015f51:	83 fd ff             	cmp    ebp,0xffffffff
c0015f54:	0f 8c ee 00 00 00    	jl     c0016048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015f5a:	0f 84 ac 01 00 00    	je     c001610c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015f60:	85 ed                	test   ebp,ebp
c0015f62:	0f 84 90 01 00 00    	je     c00160f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015f68:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015f6a:	75 a4                	jne    c0015f10 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015f6c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015f72:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015f76:	01 d0                	add    eax,edx
c0015f78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015f7c:	83 ec 0c             	sub    esp,0xc
c0015f7f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015f85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f88:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015f8e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015f95:	50                   	push   eax
c0015f96:	e8 05 fe ff ff       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c0015f9b:	83 c4 10             	add    esp,0x10
c0015f9e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015fa1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fa5:	89 f7                	mov    edi,esi
c0015fa7:	83 c1 01             	add    ecx,0x1
c0015faa:	83 f9 10             	cmp    ecx,0x10
c0015fad:	0f 85 69 ff ff ff    	jne    c0015f1c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015fb3:	90                   	nop
c0015fb4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015fba:	85 c0                	test   eax,eax
c0015fbc:	74 62                	je     c0016020 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015fbe:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015fc4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015fca:	74 54                	je     c0016020 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015fcc:	83 ec 0c             	sub    esp,0xc
c0015fcf:	68 cc d6 02 c0       	push   0xc002d6cc
c0015fd4:	e8 9f a7 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fd9:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015fe0:	89 c7                	mov    edi,eax
c0015fe2:	e8 75 a7 00 00       	call   c002075c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	84 c0                	test   al,al
c0015fec:	0f 84 ce 00 00 00    	je     c00160c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015ff2:	66 90                	xchg   ax,ax
c0015ff4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ff7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ffd:	85 d2                	test   edx,edx
c0015fff:	74 0f                	je     c0016010 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016001:	83 ec 0c             	sub    esp,0xc
c0016004:	8b 02                	mov    eax,DWORD PTR [edx]
c0016006:	52                   	push   edx
c0016007:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001600a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001600d:	83 c4 10             	add    esp,0x10
c0016010:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001601a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001601d:	8d 76 00             	lea    esi,[esi+0x0]
c0016020:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016026:	85 db                	test   ebx,ebx
c0016028:	74 16                	je     c0016040 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001602a:	83 ec 0c             	sub    esp,0xc
c001602d:	53                   	push   ebx
c001602e:	e8 ad c7 ff ff       	call   c00127e0 <VAS::~VAS()>
c0016033:	58                   	pop    eax
c0016034:	5a                   	pop    edx
c0016035:	6a 14                	push   0x14
c0016037:	53                   	push   ebx
c0016038:	e8 63 68 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c001603d:	83 c4 10             	add    esp,0x10
c0016040:	83 c4 1c             	add    esp,0x1c
c0016043:	5b                   	pop    ebx
c0016044:	5e                   	pop    esi
c0016045:	5f                   	pop    edi
c0016046:	5d                   	pop    ebp
c0016047:	c3                   	ret    
c0016048:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001604c:	83 ec 0c             	sub    esp,0xc
c001604f:	68 2c 39 02 c0       	push   0xc002392c
c0016054:	e8 19 8e ff ff       	call   c000ee72 <KePanic(char const*)>
c0016059:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001605c:	83 c4 10             	add    esp,0x10
c001605f:	89 f7                	mov    edi,esi
c0016061:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016065:	e9 a6 fe ff ff       	jmp    c0015f10 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001606a:	66 90                	xchg   ax,ax
c001606c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016072:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016078:	75 1e                	jne    c0016098 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001607a:	83 ec 0c             	sub    esp,0xc
c001607d:	68 94 39 02 c0       	push   0xc0023994
c0016082:	e8 dd 0e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016087:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001608e:	e8 bd fa ff ff       	call   c0015b50 <blockTask(TaskState)>
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	66 90                	xchg   ax,ax
c0016098:	83 ec 08             	sub    esp,0x8
c001609b:	56                   	push   esi
c001609c:	68 cc d6 02 c0       	push   0xc002d6cc
c00160a1:	e8 96 a7 00 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160a6:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c00160ad:	e8 c6 a6 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	39 f8                	cmp    eax,edi
c00160b7:	0f 84 37 ff ff ff    	je     c0015ff4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00160bd:	8d 76 00             	lea    esi,[esi+0x0]
c00160c0:	83 ec 0c             	sub    esp,0xc
c00160c3:	68 cc d6 02 c0       	push   0xc002d6cc
c00160c8:	e8 ab a6 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160cd:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c00160d4:	89 c6                	mov    esi,eax
c00160d6:	e8 a5 a6 00 00       	call   c0020780 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160db:	83 c4 10             	add    esp,0x10
c00160de:	39 f3                	cmp    ebx,esi
c00160e0:	74 b6                	je     c0016098 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00160e2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00160e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160e8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00160ee:	75 a8                	jne    c0016098 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00160f0:	e9 77 ff ff ff       	jmp    c001606c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00160f5:	8d 76 00             	lea    esi,[esi+0x0]
c00160f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00160fc:	83 ec 0c             	sub    esp,0xc
c00160ff:	68 60 39 02 c0       	push   0xc0023960
c0016104:	e9 4b ff ff ff       	jmp    c0016054 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016109:	8d 76 00             	lea    esi,[esi+0x0]
c001610c:	8b 36                	mov    esi,DWORD PTR [esi]
c001610e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016112:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016115:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016118:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001611e:	01 d7                	add    edi,edx
c0016120:	89 f8                	mov    eax,edi
c0016122:	e9 51 fe ff ff       	jmp    c0015f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016127:	90                   	nop

c0016128 <cleanerTaskFunction(void*)>:
c0016128:	53                   	push   ebx
c0016129:	83 ec 08             	sub    esp,0x8
c001612c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0016134:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016139:	85 c0                	test   eax,eax
c001613b:	75 03                	jne    c0016140 <cleanerTaskFunction(void*)+0x18>
c001613d:	fb                   	sti    
c001613e:	66 90                	xchg   ax,ax
c0016140:	fa                   	cli    
c0016141:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016146:	83 c0 01             	add    eax,0x1
c0016149:	80 3d 94 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d694,0x0
c0016150:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0016155:	0f 85 c9 00 00 00    	jne    c0016224 <cleanerTaskFunction(void*)+0xfc>
c001615b:	83 ec 0c             	sub    esp,0xc
c001615e:	6a 02                	push   0x2
c0016160:	e8 bf f9 ff ff       	call   c0015b24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016165:	83 c4 10             	add    esp,0x10
c0016168:	c6 05 94 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d694,0x0
c001616f:	fa                   	cli    
c0016170:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0016176:	8b 1d ac d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6ac
c001617c:	83 c1 01             	add    ecx,0x1
c001617f:	83 c3 01             	add    ebx,0x1
c0016182:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0016188:	89 1d ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,ebx
c001618e:	fa                   	cli    
c001618f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016194:	83 c0 01             	add    eax,0x1
c0016197:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c001619c:	eb 2a                	jmp    c00161c8 <cleanerTaskFunction(void*)+0xa0>
c001619e:	66 90                	xchg   ax,ax
c00161a0:	83 ec 0c             	sub    esp,0xc
c00161a3:	68 b4 d6 02 c0       	push   0xc002d6b4
c00161a8:	e8 cb a5 00 00       	call   c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161ad:	c7 04 24 b4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6b4
c00161b4:	89 c3                	mov    ebx,eax
c00161b6:	e8 c5 a5 00 00       	call   c0020780 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161be:	e8 91 fc ff ff       	call   c0015e54 <cleanupTerminatedTask(ThreadControlBlock*)>
c00161c3:	83 c4 10             	add    esp,0x10
c00161c6:	66 90                	xchg   ax,ax
c00161c8:	83 ec 0c             	sub    esp,0xc
c00161cb:	68 b4 d6 02 c0       	push   0xc002d6b4
c00161d0:	e8 87 a5 00 00       	call   c002075c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161d5:	83 c4 10             	add    esp,0x10
c00161d8:	84 c0                	test   al,al
c00161da:	74 c4                	je     c00161a0 <cleanerTaskFunction(void*)+0x78>
c00161dc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00161e4:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c00161ea:	85 d2                	test   edx,edx
c00161ec:	75 02                	jne    c00161f0 <cleanerTaskFunction(void*)+0xc8>
c00161ee:	fb                   	sti    
c00161ef:	90                   	nop
c00161f0:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00161f5:	83 e8 01             	sub    eax,0x1
c00161f8:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00161fd:	0f 85 29 ff ff ff    	jne    c001612c <cleanerTaskFunction(void*)+0x4>
c0016203:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0016208:	85 c0                	test   eax,eax
c001620a:	0f 84 1c ff ff ff    	je     c001612c <cleanerTaskFunction(void*)+0x4>
c0016210:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c001621a:	e8 71 f8 ff ff       	call   c0015a90 <schedule()>
c001621f:	e9 08 ff ff ff       	jmp    c001612c <cleanerTaskFunction(void*)+0x4>
c0016224:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001622c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016231:	85 c0                	test   eax,eax
c0016233:	0f 85 2f ff ff ff    	jne    c0016168 <cleanerTaskFunction(void*)+0x40>
c0016239:	fb                   	sti    
c001623a:	e9 29 ff ff ff       	jmp    c0016168 <cleanerTaskFunction(void*)+0x40>
c001623f:	90                   	nop

c0016240 <terminateTask(int)>:
c0016240:	83 ec 14             	sub    esp,0x14
c0016243:	fa                   	cli    
c0016244:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016249:	83 c0 01             	add    eax,0x1
c001624c:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0016251:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0016256:	83 c0 01             	add    eax,0x1
c0016259:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c001625e:	fa                   	cli    
c001625f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016264:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016268:	83 c0 01             	add    eax,0x1
c001626b:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0016270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016275:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016280:	50                   	push   eax
c0016281:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016286:	e8 b1 a5 00 00       	call   c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001628b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016290:	83 c4 10             	add    esp,0x10
c0016293:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001629a:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c001629f:	85 c0                	test   eax,eax
c00162a1:	0f 84 81 00 00 00    	je     c0016328 <terminateTask(int)+0xe8>
c00162a7:	83 ec 0c             	sub    esp,0xc
c00162aa:	c6 05 94 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d694,0x1
c00162b1:	50                   	push   eax
c00162b2:	e8 e9 fa ff ff       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	66 90                	xchg   ax,ax
c00162bc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00162c4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00162c9:	85 c0                	test   eax,eax
c00162cb:	75 03                	jne    c00162d0 <terminateTask(int)+0x90>
c00162cd:	fb                   	sti    
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00162d5:	83 e8 01             	sub    eax,0x1
c00162d8:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00162dd:	75 09                	jne    c00162e8 <terminateTask(int)+0xa8>
c00162df:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c00162e6:	75 54                	jne    c001633c <terminateTask(int)+0xfc>
c00162e8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00162f0:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00162f6:	85 c9                	test   ecx,ecx
c00162f8:	75 06                	jne    c0016300 <terminateTask(int)+0xc0>
c00162fa:	66 90                	xchg   ax,ax
c00162fc:	fb                   	sti    
c00162fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016300:	fa                   	cli    
c0016301:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016306:	83 c0 01             	add    eax,0x1
c0016309:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c001630e:	e8 7d f7 ff ff       	call   c0015a90 <schedule()>
c0016313:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001631b:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0016321:	85 d2                	test   edx,edx
c0016323:	75 db                	jne    c0016300 <terminateTask(int)+0xc0>
c0016325:	eb d5                	jmp    c00162fc <terminateTask(int)+0xbc>
c0016327:	90                   	nop
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	68 a5 38 02 c0       	push   0xc00238a5
c0016330:	e8 2f 0c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	eb 82                	jmp    c00162bc <terminateTask(int)+0x7c>
c001633a:	66 90                	xchg   ax,ax
c001633c:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0016346:	e8 45 f7 ff ff       	call   c0015a90 <schedule()>
c001634b:	eb 9b                	jmp    c00162e8 <terminateTask(int)+0xa8>
c001634d:	8d 76 00             	lea    esi,[esi+0x0]

c0016350 <Thr::terminateFromIRQ(int)>:
c0016350:	83 ec 18             	sub    esp,0x18
c0016353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016357:	50                   	push   eax
c0016358:	e8 e3 fe ff ff       	call   c0016240 <terminateTask(int)>
c001635d:	8d 76 00             	lea    esi,[esi+0x0]

c0016360 <__static_initialization_and_destruction_0(int, int)>:
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016368:	0f 85 8e 00 00 00    	jne    c00163fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001636e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016376:	0f 85 80 00 00 00    	jne    c00163fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001637c:	83 ec 0c             	sub    esp,0xc
c001637f:	68 cc d6 02 c0       	push   0xc002d6cc
c0016384:	e8 53 a9 00 00       	call   c0020cdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	83 ec 04             	sub    esp,0x4
c001638f:	68 b0 49 02 c0       	push   0xc00249b0
c0016394:	68 cc d6 02 c0       	push   0xc002d6cc
c0016399:	68 8c 0c 02 c0       	push   0xc0020c8c
c001639e:	e8 ad 64 ff ff       	call   c000c850 <__cxa_atexit>
c00163a3:	83 c4 10             	add    esp,0x10
c00163a6:	83 ec 0c             	sub    esp,0xc
c00163a9:	68 c0 d6 02 c0       	push   0xc002d6c0
c00163ae:	e8 29 a9 00 00       	call   c0020cdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	83 ec 04             	sub    esp,0x4
c00163b9:	68 b0 49 02 c0       	push   0xc00249b0
c00163be:	68 c0 d6 02 c0       	push   0xc002d6c0
c00163c3:	68 8c 0c 02 c0       	push   0xc0020c8c
c00163c8:	e8 83 64 ff ff       	call   c000c850 <__cxa_atexit>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	83 ec 0c             	sub    esp,0xc
c00163d3:	68 b4 d6 02 c0       	push   0xc002d6b4
c00163d8:	e8 ff a8 00 00       	call   c0020cdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00163dd:	83 c4 10             	add    esp,0x10
c00163e0:	83 ec 04             	sub    esp,0x4
c00163e3:	68 b0 49 02 c0       	push   0xc00249b0
c00163e8:	68 b4 d6 02 c0       	push   0xc002d6b4
c00163ed:	68 8c 0c 02 c0       	push   0xc0020c8c
c00163f2:	e8 59 64 ff ff       	call   c000c850 <__cxa_atexit>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	66 90                	xchg   ax,ax
c00163fc:	90                   	nop
c00163fd:	83 c4 0c             	add    esp,0xc
c0016400:	c3                   	ret    
c0016401:	8d 76 00             	lea    esi,[esi+0x0]

c0016404 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	83 ec 08             	sub    esp,0x8
c001640a:	68 ff ff 00 00       	push   0xffff
c001640f:	6a 01                	push   0x1
c0016411:	e8 4a ff ff ff       	call   c0016360 <__static_initialization_and_destruction_0(int, int)>
c0016416:	83 c4 10             	add    esp,0x10
c0016419:	83 c4 0c             	add    esp,0xc
c001641c:	c3                   	ret    

c001641d <Vm::inbv(unsigned short)>:
c001641d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016421:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016426:	75 06                	jne    c001642e <Vm::inbv(unsigned short)+0x11>
c0016428:	a0 10 d7 02 c0       	mov    al,ds:0xc002d710
c001642d:	c3                   	ret    
c001642e:	ec                   	in     al,dx
c001642f:	c3                   	ret    

c0016430 <Vm::outbv(unsigned short, unsigned char)>:
c0016430:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016438:	66 81 fa fe fe       	cmp    dx,0xfefe
c001643d:	75 25                	jne    c0016464 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001643f:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0016445:	8d 51 01             	lea    edx,[ecx+0x1]
c0016448:	88 81 20 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28e0],al
c001644e:	89 15 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,edx
c0016454:	83 fa 20             	cmp    edx,0x20
c0016457:	75 0c                	jne    c0016465 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016459:	c7 05 10 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x1f
c0016463:	c3                   	ret    
c0016464:	ee                   	out    dx,al
c0016465:	c3                   	ret    

c0016466 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016466:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001646b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016470:	c1 e0 04             	shl    eax,0x4
c0016473:	01 d0                	add    eax,edx
c0016475:	c3                   	ret    

c0016476 <Vm::getSegment(unsigned int)>:
c0016476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001647a:	c1 e8 10             	shr    eax,0x10
c001647d:	c3                   	ret    

c001647e <Vm::getOffset(unsigned int)>:
c001647e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016482:	c3                   	ret    

c0016483 <Vm::mainloop2()>:
c0016483:	83 ec 18             	sub    esp,0x18
c0016486:	fa                   	cli    
c0016487:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001648d:	6a 02                	push   0x2
c001648f:	c6 05 09 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d709,0x1
c0016496:	e8 89 f6 ff ff       	call   c0015b24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001649b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00164a4:	52                   	push   edx
c00164a5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00164a9:	52                   	push   edx
c00164aa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00164ae:	52                   	push   edx
c00164af:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00164b3:	50                   	push   eax
c00164b4:	e8 56 9d fe ff       	call   c000020f <goToVM86>
c00164b9:	83 c4 2c             	add    esp,0x2c
c00164bc:	c3                   	ret    

c00164bd <Vm::mainVm8086Loop(void*)>:
c00164bd:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00164c4:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00164cb:	75 01                	jne    c00164ce <Vm::mainVm8086Loop(void*)+0x11>
c00164cd:	fb                   	sti    
c00164ce:	eb b3                	jmp    c0016483 <Vm::mainloop2()>

c00164d0 <Vm::mainloop3(unsigned long)>:
c00164d0:	83 ec 18             	sub    esp,0x18
c00164d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164d7:	fa                   	cli    
c00164d8:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00164de:	6a 02                	push   0x2
c00164e0:	c6 05 08 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d708,0x1
c00164e7:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c00164ec:	e8 33 f6 ff ff       	call   c0015b24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00164f1:	83 c4 1c             	add    esp,0x1c
c00164f4:	eb 8d                	jmp    c0016483 <Vm::mainloop2()>

c00164f6 <Vm::initialise8086()>:
c00164f6:	83 ec 0c             	sub    esp,0xc
c00164f9:	68 80 00 00 00       	push   0x80
c00164fe:	6a 00                	push   0x0
c0016500:	68 bd 64 01 c0       	push   0xc00164bd
c0016505:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001650b:	e8 28 f3 ff ff       	call   c0015838 <Process::createThread(void (*)(void*), void*, int)>
c0016510:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016517:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c001651c:	68 10 01 00 00       	push   0x110
c0016521:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0016526:	6a 00                	push   0x0
c0016528:	6a 00                	push   0x0
c001652a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016530:	e8 fd c5 ff ff       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016535:	83 c4 2c             	add    esp,0x2c
c0016538:	c3                   	ret    

c0016539 <Vm::resetConventionalMemory8086()>:
c0016539:	c3                   	ret    

c001653a <Vm::finish8086()>:
c001653a:	53                   	push   ebx
c001653b:	83 ec 08             	sub    esp,0x8
c001653e:	fa                   	cli    
c001653f:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016545:	80 3d 08 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d708,0x0
c001654c:	75 18                	jne    c0016566 <Vm::finish8086()+0x2c>
c001654e:	e8 3d f5 ff ff       	call   c0015a90 <schedule()>
c0016553:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001655a:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016561:	75 db                	jne    c001653e <Vm::finish8086()+0x4>
c0016563:	fb                   	sti    
c0016564:	eb d8                	jmp    c001653e <Vm::finish8086()+0x4>
c0016566:	83 ec 0c             	sub    esp,0xc
c0016569:	8b 1d 04 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d704
c001656f:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016575:	c6 05 08 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d708,0x0
c001657c:	e8 1f f8 ff ff       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c0016581:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016588:	83 c4 10             	add    esp,0x10
c001658b:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016592:	75 01                	jne    c0016595 <Vm::finish8086()+0x5b>
c0016594:	fb                   	sti    
c0016595:	89 d8                	mov    eax,ebx
c0016597:	83 c4 08             	add    esp,0x8
c001659a:	5b                   	pop    ebx
c001659b:	c3                   	ret    

c001659c <Vm::getOutput8086(unsigned char*)>:
c001659c:	57                   	push   edi
c001659d:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c00165a3:	56                   	push   esi
c00165a4:	be 20 d7 02 c0       	mov    esi,0xc002d720
c00165a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00165ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00165af:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c00165b4:	5e                   	pop    esi
c00165b5:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c00165bf:	5f                   	pop    edi
c00165c0:	c3                   	ret    

c00165c1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00165c1:	55                   	push   ebp
c00165c2:	57                   	push   edi
c00165c3:	56                   	push   esi
c00165c4:	53                   	push   ebx
c00165c5:	83 ec 2c             	sub    esp,0x2c
c00165c8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00165cc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00165d0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00165d4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00165d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165dc:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c00165e3:	75 5d                	jne    c0016642 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00165e5:	83 ec 0c             	sub    esp,0xc
c00165e8:	68 14 01 00 00       	push   0x114
c00165ed:	e8 39 85 ff ff       	call   c000eb2b <malloc>
c00165f2:	83 c4 0c             	add    esp,0xc
c00165f5:	89 c7                	mov    edi,eax
c00165f7:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00165fd:	68 bc 39 02 c0       	push   0xc00239bc
c0016602:	50                   	push   eax
c0016603:	e8 2a 1b ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016608:	58                   	pop    eax
c0016609:	5a                   	pop    edx
c001660a:	6a 12                	push   0x12
c001660c:	57                   	push   edi
c001660d:	e8 3e 1b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0016612:	59                   	pop    ecx
c0016613:	8b 07                	mov    eax,DWORD PTR [edi]
c0016615:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016619:	51                   	push   ecx
c001661a:	6a 00                	push   0x0
c001661c:	6a 00                	push   0x0
c001661e:	68 00 00 11 00       	push   0x110000
c0016623:	57                   	push   edi
c0016624:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016627:	83 c4 14             	add    esp,0x14
c001662a:	57                   	push   edi
c001662b:	e8 7e 1b ff ff       	call   c00081ae <File::close()>
c0016630:	8b 07                	mov    eax,DWORD PTR [edi]
c0016632:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016635:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016638:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	fa                   	cli    
c0016643:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016649:	80 3d 09 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d709,0x0
c0016650:	75 18                	jne    c001666a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0016652:	e8 39 f4 ff ff       	call   c0015a90 <schedule()>
c0016657:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001665e:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016665:	75 db                	jne    c0016642 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016667:	fb                   	sti    
c0016668:	eb d8                	jmp    c0016642 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001666a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001666e:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c0016673:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c001667d:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016681:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016685:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016689:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001668d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016691:	0f b7 f6             	movzx  esi,si
c0016694:	0f b7 db             	movzx  ebx,bx
c0016697:	50                   	push   eax
c0016698:	6a 20                	push   0x20
c001669a:	6a 00                	push   0x0
c001669c:	68 20 d7 02 c0       	push   0xc002d720
c00166a1:	e8 4a 9e fe ff       	call   c00004f0 <memset>
c00166a6:	5a                   	pop    edx
c00166a7:	59                   	pop    ecx
c00166a8:	56                   	push   esi
c00166a9:	53                   	push   ebx
c00166aa:	e8 b7 fd ff ff       	call   c0016466 <Vm::realToLinear(unsigned short, unsigned short)>
c00166af:	83 c4 10             	add    esp,0x10
c00166b2:	89 c7                	mov    edi,eax
c00166b4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00166b8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00166bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00166be:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c00166c5:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00166cc:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00166d3:	75 01                	jne    c00166d6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c00166d5:	fb                   	sti    
c00166d6:	83 ec 0c             	sub    esp,0xc
c00166d9:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c00166df:	e8 bc f6 ff ff       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c00166e4:	83 c4 3c             	add    esp,0x3c
c00166e7:	b0 01                	mov    al,0x1
c00166e9:	5b                   	pop    ebx
c00166ea:	5e                   	pop    esi
c00166eb:	5f                   	pop    edi
c00166ec:	5d                   	pop    ebp
c00166ed:	c3                   	ret    

c00166ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00166ee:	55                   	push   ebp
c00166ef:	57                   	push   edi
c00166f0:	56                   	push   esi
c00166f1:	53                   	push   ebx
c00166f2:	83 ec 2c             	sub    esp,0x2c
c00166f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166f9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00166fd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016701:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016705:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016709:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c0016710:	75 5d                	jne    c001676f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016712:	83 ec 0c             	sub    esp,0xc
c0016715:	68 14 01 00 00       	push   0x114
c001671a:	e8 0c 84 ff ff       	call   c000eb2b <malloc>
c001671f:	83 c4 0c             	add    esp,0xc
c0016722:	89 c6                	mov    esi,eax
c0016724:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001672a:	68 bc 39 02 c0       	push   0xc00239bc
c001672f:	50                   	push   eax
c0016730:	e8 fd 19 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016735:	58                   	pop    eax
c0016736:	5a                   	pop    edx
c0016737:	6a 12                	push   0x12
c0016739:	56                   	push   esi
c001673a:	e8 11 1a ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001673f:	59                   	pop    ecx
c0016740:	8b 06                	mov    eax,DWORD PTR [esi]
c0016742:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016746:	52                   	push   edx
c0016747:	6a 00                	push   0x0
c0016749:	6a 00                	push   0x0
c001674b:	68 00 00 11 00       	push   0x110000
c0016750:	56                   	push   esi
c0016751:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016754:	83 c4 14             	add    esp,0x14
c0016757:	56                   	push   esi
c0016758:	e8 51 1a ff ff       	call   c00081ae <File::close()>
c001675d:	8b 06                	mov    eax,DWORD PTR [esi]
c001675f:	89 34 24             	mov    DWORD PTR [esp],esi
c0016762:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016765:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c001676c:	83 c4 10             	add    esp,0x10
c001676f:	50                   	push   eax
c0016770:	50                   	push   eax
c0016771:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016775:	68 d7 39 02 c0       	push   0xc00239d7
c001677a:	e8 e5 07 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001677f:	83 c4 10             	add    esp,0x10
c0016782:	fa                   	cli    
c0016783:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016789:	0f b6 35 09 d7 02 c0 	movzx  esi,BYTE PTR ds:0xc002d709
c0016790:	89 f0                	mov    eax,esi
c0016792:	84 c0                	test   al,al
c0016794:	75 18                	jne    c00167ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c0016796:	e8 f5 f2 ff ff       	call   c0015a90 <schedule()>
c001679b:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00167a2:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00167a9:	75 d7                	jne    c0016782 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00167ab:	fb                   	sti    
c00167ac:	eb d4                	jmp    c0016782 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00167ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167b2:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c00167b7:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c00167c1:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c00167c5:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c00167c9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00167cd:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c00167d1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00167d5:	50                   	push   eax
c00167d6:	6a 20                	push   0x20
c00167d8:	6a 00                	push   0x0
c00167da:	68 20 d7 02 c0       	push   0xc002d720
c00167df:	e8 0c 9d fe ff       	call   c00004f0 <memset>
c00167e4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00167eb:	e8 3b 83 ff ff       	call   c000eb2b <malloc>
c00167f0:	83 c4 0c             	add    esp,0xc
c00167f3:	89 c3                	mov    ebx,eax
c00167f5:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00167fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167ff:	50                   	push   eax
c0016800:	e8 2d 19 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	85 db                	test   ebx,ebx
c001680a:	75 0a                	jne    c0016816 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c001680c:	83 ec 0c             	sub    esp,0xc
c001680f:	68 f9 39 02 c0       	push   0xc00239f9
c0016814:	eb 2b                	jmp    c0016841 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c0016816:	50                   	push   eax
c0016817:	8d 44 24 17          	lea    eax,[esp+0x17]
c001681b:	50                   	push   eax
c001681c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016820:	50                   	push   eax
c0016821:	53                   	push   ebx
c0016822:	e8 2b 1c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0016827:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001682b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016837:	74 28                	je     c0016861 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c0016839:	83 ec 0c             	sub    esp,0xc
c001683c:	68 0d 3a 02 c0       	push   0xc0023a0d
c0016841:	e8 2c 86 ff ff       	call   c000ee72 <KePanic(char const*)>
c0016846:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001684d:	83 c4 10             	add    esp,0x10
c0016850:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016857:	75 01                	jne    c001685a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0016859:	fb                   	sti    
c001685a:	31 f6                	xor    esi,esi
c001685c:	e9 91 00 00 00       	jmp    c00168f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0016861:	51                   	push   ecx
c0016862:	51                   	push   ecx
c0016863:	6a 01                	push   0x1
c0016865:	53                   	push   ebx
c0016866:	e8 e5 18 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001686b:	83 c4 10             	add    esp,0x10
c001686e:	85 c0                	test   eax,eax
c0016870:	74 27                	je     c0016899 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	68 26 3a 02 c0       	push   0xc0023a26
c001687a:	e8 f3 85 ff ff       	call   c000ee72 <KePanic(char const*)>
c001687f:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016886:	83 c4 10             	add    esp,0x10
c0016889:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016890:	75 c8                	jne    c001685a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0016892:	fb                   	sti    
c0016893:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016897:	eb 59                	jmp    c00168f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0016899:	0f b7 ff             	movzx  edi,di
c001689c:	50                   	push   eax
c001689d:	50                   	push   eax
c001689e:	0f b7 c5             	movzx  eax,bp
c00168a1:	57                   	push   edi
c00168a2:	50                   	push   eax
c00168a3:	e8 be fb ff ff       	call   c0016466 <Vm::realToLinear(unsigned short, unsigned short)>
c00168a8:	5a                   	pop    edx
c00168a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00168ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00168af:	51                   	push   ecx
c00168b0:	50                   	push   eax
c00168b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00168b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00168b9:	53                   	push   ebx
c00168ba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00168bd:	83 c4 14             	add    esp,0x14
c00168c0:	53                   	push   ebx
c00168c1:	e8 e8 18 ff ff       	call   c00081ae <File::close()>
c00168c6:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c00168cd:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00168d4:	83 c4 10             	add    esp,0x10
c00168d7:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00168de:	75 01                	jne    c00168e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c00168e0:	fb                   	sti    
c00168e1:	83 ec 0c             	sub    esp,0xc
c00168e4:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c00168ea:	e8 b1 f4 ff ff       	call   c0015da0 <unblockTask(ThreadControlBlock*)>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	83 c4 2c             	add    esp,0x2c
c00168f5:	89 f0                	mov    eax,esi
c00168f7:	5b                   	pop    ebx
c00168f8:	5e                   	pop    esi
c00168f9:	5f                   	pop    edi
c00168fa:	5d                   	pop    ebp
c00168fb:	c3                   	ret    

c00168fc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00168fc:	57                   	push   edi
c00168fd:	56                   	push   esi
c00168fe:	53                   	push   ebx
c00168ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016907:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001690b:	83 e8 06             	sub    eax,0x6
c001690e:	0f b7 c0             	movzx  eax,ax
c0016911:	50                   	push   eax
c0016912:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016917:	50                   	push   eax
c0016918:	e8 49 fb ff ff       	call   c0016466 <Vm::realToLinear(unsigned short, unsigned short)>
c001691d:	5a                   	pop    edx
c001691e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016921:	59                   	pop    ecx
c0016922:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016925:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016928:	81 e2 ff ff 00 00    	and    edx,0xffff
c001692e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016931:	8d 56 02             	lea    edx,[esi+0x2]
c0016934:	66 89 10             	mov    WORD PTR [eax],dx
c0016937:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001693b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001693f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016942:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016946:	0f b6 f1             	movzx  esi,cl
c0016949:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001694d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016953:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016957:	0f b6 d5             	movzx  edx,ch
c001695a:	74 0a                	je     c0016966 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001695c:	c1 e2 08             	shl    edx,0x8
c001695f:	09 f2                	or     edx,esi
c0016961:	80 ce 02             	or     dh,0x2
c0016964:	eb 08                	jmp    c001696e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016966:	c1 e2 08             	shl    edx,0x8
c0016969:	09 f2                	or     edx,esi
c001696b:	80 e6 fd             	and    dh,0xfd
c001696e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016977:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001697b:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016983:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016986:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001698e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016991:	5b                   	pop    ebx
c0016992:	5e                   	pop    esi
c0016993:	5f                   	pop    edi
c0016994:	c3                   	ret    

c0016995 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016995:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001699a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001699f:	c1 e0 04             	shl    eax,0x4
c00169a2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00169a5:	c3                   	ret    

c00169a6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00169a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00169ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00169b0:	c1 e0 04             	shl    eax,0x4
c00169b3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00169b7:	c3                   	ret    

c00169b8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00169b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00169bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00169c2:	c1 e0 04             	shl    eax,0x4
c00169c5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00169c8:	c3                   	ret    

c00169c9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00169c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00169ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00169d3:	c1 e0 04             	shl    eax,0x4
c00169d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169da:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00169dd:	c3                   	ret    

c00169de <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00169de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00169e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00169e8:	c1 e0 04             	shl    eax,0x4
c00169eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169ef:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00169f3:	c3                   	ret    

c00169f4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00169f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00169f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00169fe:	c1 e0 04             	shl    eax,0x4
c0016a01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a05:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016a08:	c3                   	ret    

c0016a09 <Vm::faultHandler(regs*)>:
c0016a09:	55                   	push   ebp
c0016a0a:	57                   	push   edi
c0016a0b:	56                   	push   esi
c0016a0c:	53                   	push   ebx
c0016a0d:	83 ec 2c             	sub    esp,0x2c
c0016a10:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016a14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a17:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016a1b:	0f b7 f8             	movzx  edi,ax
c0016a1e:	52                   	push   edx
c0016a1f:	0f b7 c0             	movzx  eax,ax
c0016a22:	50                   	push   eax
c0016a23:	e8 3e fa ff ff       	call   c0016466 <Vm::realToLinear(unsigned short, unsigned short)>
c0016a28:	5a                   	pop    edx
c0016a29:	59                   	pop    ecx
c0016a2a:	89 c1                	mov    ecx,eax
c0016a2c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016a2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a33:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016a38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a3c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016a3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a43:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016a48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a54:	e8 0d fa ff ff       	call   c0016466 <Vm::realToLinear(unsigned short, unsigned short)>
c0016a59:	5e                   	pop    esi
c0016a5a:	be 06 00 00 00       	mov    esi,0x6
c0016a5f:	5d                   	pop    ebp
c0016a60:	31 ed                	xor    ebp,ebp
c0016a62:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016a67:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016a6a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016a70:	0f 84 74 02 00 00    	je     c0016cea <Vm::faultHandler(regs*)+0x2e1>
c0016a76:	0f 87 94 00 00 00    	ja     c0016b10 <Vm::faultHandler(regs*)+0x107>
c0016a7c:	83 fa 66             	cmp    edx,0x66
c0016a7f:	0f 84 e2 01 00 00    	je     c0016c67 <Vm::faultHandler(regs*)+0x25e>
c0016a85:	77 47                	ja     c0016ace <Vm::faultHandler(regs*)+0xc5>
c0016a87:	83 fa 36             	cmp    edx,0x36
c0016a8a:	0f 84 ca 01 00 00    	je     c0016c5a <Vm::faultHandler(regs*)+0x251>
c0016a90:	77 1a                	ja     c0016aac <Vm::faultHandler(regs*)+0xa3>
c0016a92:	83 fa 26             	cmp    edx,0x26
c0016a95:	0f 84 98 01 00 00    	je     c0016c33 <Vm::faultHandler(regs*)+0x22a>
c0016a9b:	83 fa 2e             	cmp    edx,0x2e
c0016a9e:	0f 85 21 06 00 00    	jne    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016aa4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016aa7:	31 f6                	xor    esi,esi
c0016aa9:	41                   	inc    ecx
c0016aaa:	eb bb                	jmp    c0016a67 <Vm::faultHandler(regs*)+0x5e>
c0016aac:	83 fa 64             	cmp    edx,0x64
c0016aaf:	0f 84 8b 01 00 00    	je     c0016c40 <Vm::faultHandler(regs*)+0x237>
c0016ab5:	0f 87 92 01 00 00    	ja     c0016c4d <Vm::faultHandler(regs*)+0x244>
c0016abb:	83 fa 3e             	cmp    edx,0x3e
c0016abe:	0f 85 01 06 00 00    	jne    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016ac4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ac7:	be 01 00 00 00       	mov    esi,0x1
c0016acc:	eb db                	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016ace:	83 fa 6d             	cmp    edx,0x6d
c0016ad1:	0f 84 34 03 00 00    	je     c0016e0b <Vm::faultHandler(regs*)+0x402>
c0016ad7:	77 17                	ja     c0016af0 <Vm::faultHandler(regs*)+0xe7>
c0016ad9:	83 fa 67             	cmp    edx,0x67
c0016adc:	0f 84 92 01 00 00    	je     c0016c74 <Vm::faultHandler(regs*)+0x26b>
c0016ae2:	83 fa 6c             	cmp    edx,0x6c
c0016ae5:	0f 84 b1 02 00 00    	je     c0016d9c <Vm::faultHandler(regs*)+0x393>
c0016aeb:	e9 d5 05 00 00       	jmp    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016af0:	83 fa 6f             	cmp    edx,0x6f
c0016af3:	0f 84 3d 04 00 00    	je     c0016f36 <Vm::faultHandler(regs*)+0x52d>
c0016af9:	0f 82 9f 03 00 00    	jb     c0016e9e <Vm::faultHandler(regs*)+0x495>
c0016aff:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016b05:	0f 84 76 01 00 00    	je     c0016c81 <Vm::faultHandler(regs*)+0x278>
c0016b0b:	e9 b5 05 00 00       	jmp    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016b10:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016b16:	0f 84 51 05 00 00    	je     c001706d <Vm::faultHandler(regs*)+0x664>
c0016b1c:	0f 87 a9 00 00 00    	ja     c0016bcb <Vm::faultHandler(regs*)+0x1c2>
c0016b22:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016b28:	0f 84 d0 04 00 00    	je     c0016ffe <Vm::faultHandler(regs*)+0x5f5>
c0016b2e:	77 78                	ja     c0016ba8 <Vm::faultHandler(regs*)+0x19f>
c0016b30:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016b36:	0f 84 0e 02 00 00    	je     c0016d4a <Vm::faultHandler(regs*)+0x341>
c0016b3c:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016b42:	0f 85 7d 05 00 00    	jne    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016b48:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016b4c:	89 d1                	mov    ecx,edx
c0016b4e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016b51:	c1 e1 08             	shl    ecx,0x8
c0016b54:	09 ca                	or     edx,ecx
c0016b56:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016b59:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016b5d:	89 d1                	mov    ecx,edx
c0016b5f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016b63:	c1 e1 08             	shl    ecx,0x8
c0016b66:	09 ca                	or     edx,ecx
c0016b68:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016b6b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016b6f:	89 d1                	mov    ecx,edx
c0016b71:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016b75:	c1 e1 08             	shl    ecx,0x8
c0016b78:	09 ca                	or     edx,ecx
c0016b7a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016b80:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016b83:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016b87:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016b8d:	d1 e8                	shr    eax,1
c0016b8f:	83 e0 01             	and    eax,0x1
c0016b92:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016b95:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016b98:	83 c0 06             	add    eax,0x6
c0016b9b:	25 ff ff 00 00       	and    eax,0xffff
c0016ba0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ba3:	e9 19 05 00 00       	jmp    c00170c1 <Vm::faultHandler(regs*)+0x6b8>
c0016ba8:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016bae:	0f 84 8f 04 00 00    	je     c0017043 <Vm::faultHandler(regs*)+0x63a>
c0016bb4:	0f 82 60 04 00 00    	jb     c001701a <Vm::faultHandler(regs*)+0x611>
c0016bba:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016bc0:	0f 84 94 04 00 00    	je     c001705a <Vm::faultHandler(regs*)+0x651>
c0016bc6:	e9 fa 04 00 00       	jmp    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016bcb:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016bd1:	0f 84 d7 04 00 00    	je     c00170ae <Vm::faultHandler(regs*)+0x6a5>
c0016bd7:	77 2e                	ja     c0016c07 <Vm::faultHandler(regs*)+0x1fe>
c0016bd9:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016bdf:	0f 84 a4 04 00 00    	je     c0017089 <Vm::faultHandler(regs*)+0x680>
c0016be5:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016beb:	0f 85 d4 04 00 00    	jne    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016bf1:	50                   	push   eax
c0016bf2:	50                   	push   eax
c0016bf3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016bf7:	50                   	push   eax
c0016bf8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016bfc:	50                   	push   eax
c0016bfd:	e8 2e f8 ff ff       	call   c0016430 <Vm::outbv(unsigned short, unsigned char)>
c0016c02:	e9 9f 04 00 00       	jmp    c00170a6 <Vm::faultHandler(regs*)+0x69d>
c0016c07:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016c0d:	0f 84 6d 01 00 00    	je     c0016d80 <Vm::faultHandler(regs*)+0x377>
c0016c13:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016c19:	0f 84 6f 01 00 00    	je     c0016d8e <Vm::faultHandler(regs*)+0x385>
c0016c1f:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016c25:	0f 85 9a 04 00 00    	jne    c00170c5 <Vm::faultHandler(regs*)+0x6bc>
c0016c2b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c2e:	e9 76 fe ff ff       	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016c33:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c36:	be 02 00 00 00       	mov    esi,0x2
c0016c3b:	e9 69 fe ff ff       	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016c40:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c43:	be 03 00 00 00       	mov    esi,0x3
c0016c48:	e9 5c fe ff ff       	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016c4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c50:	be 04 00 00 00       	mov    esi,0x4
c0016c55:	e9 4f fe ff ff       	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016c5a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c5d:	be 05 00 00 00       	mov    esi,0x5
c0016c62:	e9 42 fe ff ff       	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016c67:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c6a:	bd 01 00 00 00       	mov    ebp,0x1
c0016c6f:	e9 35 fe ff ff       	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016c74:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c77:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016c7c:	e9 28 fe ff ff       	jmp    c0016aa9 <Vm::faultHandler(regs*)+0xa0>
c0016c81:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016c84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016c88:	83 e5 01             	and    ebp,0x1
c0016c8b:	74 30                	je     c0016cbd <Vm::faultHandler(regs*)+0x2b4>
c0016c8d:	83 e9 04             	sub    ecx,0x4
c0016c90:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016c96:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016c9c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016c9f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ca2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ca8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016cac:	0f 84 0c 04 00 00    	je     c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016cb2:	80 ce 02             	or     dh,0x2
c0016cb5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016cb8:	e9 01 04 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016cbd:	83 e9 02             	sub    ecx,0x2
c0016cc0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016cc6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016cc9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ccd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016cd3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016cd7:	74 05                	je     c0016cde <Vm::faultHandler(regs*)+0x2d5>
c0016cd9:	80 ce 02             	or     dh,0x2
c0016cdc:	eb 03                	jmp    c0016ce1 <Vm::faultHandler(regs*)+0x2d8>
c0016cde:	80 e6 fd             	and    dh,0xfd
c0016ce1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ce5:	e9 d4 03 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016cea:	83 e5 01             	and    ebp,0x1
c0016ced:	74 2a                	je     c0016d19 <Vm::faultHandler(regs*)+0x310>
c0016cef:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cf1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016cf7:	81 ca 00 02 02 00    	or     edx,0x20200
c0016cfd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d02:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d08:	c1 e8 09             	shr    eax,0x9
c0016d0b:	83 e0 01             	and    eax,0x1
c0016d0e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d11:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d14:	83 c0 04             	add    eax,0x4
c0016d17:	eb 24                	jmp    c0016d3d <Vm::faultHandler(regs*)+0x334>
c0016d19:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016d1c:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d22:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d25:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016d28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d2e:	c1 e8 09             	shr    eax,0x9
c0016d31:	83 e0 01             	and    eax,0x1
c0016d34:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d37:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d3a:	83 c0 02             	add    eax,0x2
c0016d3d:	25 ff ff 00 00       	and    eax,0xffff
c0016d42:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d45:	e9 74 03 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016d4a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d4e:	3d ee 00 00 00       	cmp    eax,0xee
c0016d53:	75 10                	jne    c0016d65 <Vm::faultHandler(regs*)+0x35c>
c0016d55:	83 ec 0c             	sub    esp,0xc
c0016d58:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016d5b:	e8 70 f7 ff ff       	call   c00164d0 <Vm::mainloop3(unsigned long)>
c0016d60:	e9 44 03 00 00       	jmp    c00170a9 <Vm::faultHandler(regs*)+0x6a0>
c0016d65:	83 ec 0c             	sub    esp,0xc
c0016d68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016d6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d70:	51                   	push   ecx
c0016d71:	50                   	push   eax
c0016d72:	53                   	push   ebx
c0016d73:	e8 84 fb ff ff       	call   c00168fc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016d78:	83 c4 20             	add    esp,0x20
c0016d7b:	e9 41 03 00 00       	jmp    c00170c1 <Vm::faultHandler(regs*)+0x6b8>
c0016d80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d85:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016d89:	e9 30 03 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016d8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d93:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016d97:	e9 22 03 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016d9c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016d9f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016da4:	74 2b                	je     c0016dd1 <Vm::faultHandler(regs*)+0x3c8>
c0016da6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016dad:	76 22                	jbe    c0016dd1 <Vm::faultHandler(regs*)+0x3c8>
c0016daf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016db3:	50                   	push   eax
c0016db4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016db8:	50                   	push   eax
c0016db9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016dbd:	50                   	push   eax
c0016dbe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016dc2:	50                   	push   eax
c0016dc3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016dc7:	50                   	push   eax
c0016dc8:	6a 6c                	push   0x6c
c0016dca:	6a 6c                	push   0x6c
c0016dcc:	e9 bd 01 00 00       	jmp    c0016f8e <Vm::faultHandler(regs*)+0x585>
c0016dd1:	83 ec 0c             	sub    esp,0xc
c0016dd4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016dd8:	0f b7 f6             	movzx  esi,si
c0016ddb:	50                   	push   eax
c0016ddc:	e8 3c f6 ff ff       	call   c001641d <Vm::inbv(unsigned short)>
c0016de1:	83 c4 0c             	add    esp,0xc
c0016de4:	0f b6 c0             	movzx  eax,al
c0016de7:	50                   	push   eax
c0016de8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016dec:	50                   	push   eax
c0016ded:	56                   	push   esi
c0016dee:	e8 d6 fb ff ff       	call   c00169c9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016df9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016dfd:	74 03                	je     c0016e02 <Vm::faultHandler(regs*)+0x3f9>
c0016dff:	48                   	dec    eax
c0016e00:	eb 01                	jmp    c0016e03 <Vm::faultHandler(regs*)+0x3fa>
c0016e02:	40                   	inc    eax
c0016e03:	0f b7 c0             	movzx  eax,ax
c0016e06:	e9 8b 00 00 00       	jmp    c0016e96 <Vm::faultHandler(regs*)+0x48d>
c0016e0b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016e0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016e11:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016e16:	74 29                	je     c0016e41 <Vm::faultHandler(regs*)+0x438>
c0016e18:	3d ff ff 00 00       	cmp    eax,0xffff
c0016e1d:	76 22                	jbe    c0016e41 <Vm::faultHandler(regs*)+0x438>
c0016e1f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016e23:	50                   	push   eax
c0016e24:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016e28:	50                   	push   eax
c0016e29:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016e2d:	50                   	push   eax
c0016e2e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016e32:	50                   	push   eax
c0016e33:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e37:	50                   	push   eax
c0016e38:	6a 6d                	push   0x6d
c0016e3a:	6a 6d                	push   0x6d
c0016e3c:	e9 4d 01 00 00       	jmp    c0016f8e <Vm::faultHandler(regs*)+0x585>
c0016e41:	0f b7 c8             	movzx  ecx,ax
c0016e44:	0f b7 f6             	movzx  esi,si
c0016e47:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016e4a:	83 e5 01             	and    ebp,0x1
c0016e4d:	74 20                	je     c0016e6f <Vm::faultHandler(regs*)+0x466>
c0016e4f:	ed                   	in     eax,dx
c0016e50:	55                   	push   ebp
c0016e51:	50                   	push   eax
c0016e52:	51                   	push   ecx
c0016e53:	56                   	push   esi
c0016e54:	e8 9b fb ff ff       	call   c00169f4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016e5f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016e63:	74 05                	je     c0016e6a <Vm::faultHandler(regs*)+0x461>
c0016e65:	83 e8 04             	sub    eax,0x4
c0016e68:	eb 27                	jmp    c0016e91 <Vm::faultHandler(regs*)+0x488>
c0016e6a:	83 c0 04             	add    eax,0x4
c0016e6d:	eb 22                	jmp    c0016e91 <Vm::faultHandler(regs*)+0x488>
c0016e6f:	66 ed                	in     ax,dx
c0016e71:	0f b7 c0             	movzx  eax,ax
c0016e74:	57                   	push   edi
c0016e75:	50                   	push   eax
c0016e76:	51                   	push   ecx
c0016e77:	56                   	push   esi
c0016e78:	e8 61 fb ff ff       	call   c00169de <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016e7d:	83 c4 10             	add    esp,0x10
c0016e80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016e83:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016e87:	74 05                	je     c0016e8e <Vm::faultHandler(regs*)+0x485>
c0016e89:	83 e8 02             	sub    eax,0x2
c0016e8c:	eb 03                	jmp    c0016e91 <Vm::faultHandler(regs*)+0x488>
c0016e8e:	83 c0 02             	add    eax,0x2
c0016e91:	25 ff ff 00 00       	and    eax,0xffff
c0016e96:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016e99:	e9 20 02 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016e9e:	8d 46 ff             	lea    eax,[esi-0x1]
c0016ea1:	0f b6 f0             	movzx  esi,al
c0016ea4:	83 fe 05             	cmp    esi,0x5
c0016ea7:	77 23                	ja     c0016ecc <Vm::faultHandler(regs*)+0x4c3>
c0016ea9:	ff 24 b5 9c 3a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc564]
c0016eb0:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016eb5:	eb 15                	jmp    c0016ecc <Vm::faultHandler(regs*)+0x4c3>
c0016eb7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016ebb:	eb 0f                	jmp    c0016ecc <Vm::faultHandler(regs*)+0x4c3>
c0016ebd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016ec1:	eb 09                	jmp    c0016ecc <Vm::faultHandler(regs*)+0x4c3>
c0016ec3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016ec7:	eb 03                	jmp    c0016ecc <Vm::faultHandler(regs*)+0x4c3>
c0016ec9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016ecc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016ecf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016ed4:	74 29                	je     c0016eff <Vm::faultHandler(regs*)+0x4f6>
c0016ed6:	3d ff ff 00 00       	cmp    eax,0xffff
c0016edb:	76 22                	jbe    c0016eff <Vm::faultHandler(regs*)+0x4f6>
c0016edd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ee1:	50                   	push   eax
c0016ee2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ee6:	50                   	push   eax
c0016ee7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016eeb:	50                   	push   eax
c0016eec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ef0:	50                   	push   eax
c0016ef1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ef5:	50                   	push   eax
c0016ef6:	6a 6e                	push   0x6e
c0016ef8:	6a 6e                	push   0x6e
c0016efa:	e9 8f 00 00 00       	jmp    c0016f8e <Vm::faultHandler(regs*)+0x585>
c0016eff:	0f b7 c0             	movzx  eax,ax
c0016f02:	52                   	push   edx
c0016f03:	52                   	push   edx
c0016f04:	50                   	push   eax
c0016f05:	57                   	push   edi
c0016f06:	e8 8a fa ff ff       	call   c0016995 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016f0b:	59                   	pop    ecx
c0016f0c:	0f b6 c0             	movzx  eax,al
c0016f0f:	5e                   	pop    esi
c0016f10:	50                   	push   eax
c0016f11:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f15:	50                   	push   eax
c0016f16:	e8 15 f5 ff ff       	call   c0016430 <Vm::outbv(unsigned short, unsigned char)>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f25:	74 03                	je     c0016f2a <Vm::faultHandler(regs*)+0x521>
c0016f27:	48                   	dec    eax
c0016f28:	eb 01                	jmp    c0016f2b <Vm::faultHandler(regs*)+0x522>
c0016f2a:	40                   	inc    eax
c0016f2b:	0f b7 c0             	movzx  eax,ax
c0016f2e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016f31:	e9 88 01 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016f36:	8d 46 ff             	lea    eax,[esi-0x1]
c0016f39:	0f b6 f0             	movzx  esi,al
c0016f3c:	83 fe 05             	cmp    esi,0x5
c0016f3f:	77 1e                	ja     c0016f5f <Vm::faultHandler(regs*)+0x556>
c0016f41:	ff 24 b5 b4 3a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc54c]
c0016f48:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f4c:	eb 11                	jmp    c0016f5f <Vm::faultHandler(regs*)+0x556>
c0016f4e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016f51:	eb 0c                	jmp    c0016f5f <Vm::faultHandler(regs*)+0x556>
c0016f53:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016f56:	eb 07                	jmp    c0016f5f <Vm::faultHandler(regs*)+0x556>
c0016f58:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016f5b:	eb 02                	jmp    c0016f5f <Vm::faultHandler(regs*)+0x556>
c0016f5d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016f5f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016f62:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f67:	74 37                	je     c0016fa0 <Vm::faultHandler(regs*)+0x597>
c0016f69:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016f6f:	76 2f                	jbe    c0016fa0 <Vm::faultHandler(regs*)+0x597>
c0016f71:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f75:	50                   	push   eax
c0016f76:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f7a:	50                   	push   eax
c0016f7b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f7f:	50                   	push   eax
c0016f80:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f84:	50                   	push   eax
c0016f85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f89:	50                   	push   eax
c0016f8a:	6a 6f                	push   0x6f
c0016f8c:	6a 6f                	push   0x6f
c0016f8e:	68 3f 3a 02 c0       	push   0xc0023a3f
c0016f93:	e8 cc ff fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016f98:	83 c4 20             	add    esp,0x20
c0016f9b:	e9 83 01 00 00       	jmp    c0017123 <Vm::faultHandler(regs*)+0x71a>
c0016fa0:	0f b7 d7             	movzx  edx,di
c0016fa3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016fa6:	0f b7 c6             	movzx  eax,si
c0016fa9:	81 e1 00 04 00 00    	and    ecx,0x400
c0016faf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016fb2:	83 e5 01             	and    ebp,0x1
c0016fb5:	74 1d                	je     c0016fd4 <Vm::faultHandler(regs*)+0x5cb>
c0016fb7:	55                   	push   ebp
c0016fb8:	55                   	push   ebp
c0016fb9:	50                   	push   eax
c0016fba:	52                   	push   edx
c0016fbb:	e8 f8 f9 ff ff       	call   c00169b8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016fc0:	83 c4 10             	add    esp,0x10
c0016fc3:	89 fa                	mov    edx,edi
c0016fc5:	ef                   	out    dx,eax
c0016fc6:	85 c9                	test   ecx,ecx
c0016fc8:	74 05                	je     c0016fcf <Vm::faultHandler(regs*)+0x5c6>
c0016fca:	83 ee 04             	sub    esi,0x4
c0016fcd:	eb 21                	jmp    c0016ff0 <Vm::faultHandler(regs*)+0x5e7>
c0016fcf:	83 c6 04             	add    esi,0x4
c0016fd2:	eb 1c                	jmp    c0016ff0 <Vm::faultHandler(regs*)+0x5e7>
c0016fd4:	55                   	push   ebp
c0016fd5:	55                   	push   ebp
c0016fd6:	50                   	push   eax
c0016fd7:	52                   	push   edx
c0016fd8:	e8 c9 f9 ff ff       	call   c00169a6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	89 fa                	mov    edx,edi
c0016fe2:	66 ef                	out    dx,ax
c0016fe4:	85 c9                	test   ecx,ecx
c0016fe6:	74 05                	je     c0016fed <Vm::faultHandler(regs*)+0x5e4>
c0016fe8:	83 ee 02             	sub    esi,0x2
c0016feb:	eb 03                	jmp    c0016ff0 <Vm::faultHandler(regs*)+0x5e7>
c0016fed:	83 c6 02             	add    esi,0x2
c0016ff0:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016ff6:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016ff9:	e9 c0 00 00 00       	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c0016ffe:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017005:	83 ec 0c             	sub    esp,0xc
c0017008:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001700c:	50                   	push   eax
c001700d:	e8 0b f4 ff ff       	call   c001641d <Vm::inbv(unsigned short)>
c0017012:	0f b6 c0             	movzx  eax,al
c0017015:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017018:	eb 3a                	jmp    c0017054 <Vm::faultHandler(regs*)+0x64b>
c001701a:	83 e5 01             	and    ebp,0x1
c001701d:	74 07                	je     c0017026 <Vm::faultHandler(regs*)+0x61d>
c001701f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017023:	ed                   	in     eax,dx
c0017024:	eb 14                	jmp    c001703a <Vm::faultHandler(regs*)+0x631>
c0017026:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017029:	66 31 f6             	xor    si,si
c001702c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001702f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017033:	66 ed                	in     ax,dx
c0017035:	0f b7 c0             	movzx  eax,ax
c0017038:	09 f0                	or     eax,esi
c001703a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001703d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017041:	eb 7e                	jmp    c00170c1 <Vm::faultHandler(regs*)+0x6b8>
c0017043:	52                   	push   edx
c0017044:	52                   	push   edx
c0017045:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017049:	50                   	push   eax
c001704a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001704e:	50                   	push   eax
c001704f:	e8 dc f3 ff ff       	call   c0016430 <Vm::outbv(unsigned short, unsigned char)>
c0017054:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017058:	eb 4f                	jmp    c00170a9 <Vm::faultHandler(regs*)+0x6a0>
c001705a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001705d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017061:	83 e5 01             	and    ebp,0x1
c0017064:	74 03                	je     c0017069 <Vm::faultHandler(regs*)+0x660>
c0017066:	ef                   	out    dx,eax
c0017067:	eb d4                	jmp    c001703d <Vm::faultHandler(regs*)+0x634>
c0017069:	66 ef                	out    dx,ax
c001706b:	eb d0                	jmp    c001703d <Vm::faultHandler(regs*)+0x634>
c001706d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017074:	83 ec 0c             	sub    esp,0xc
c0017077:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001707b:	50                   	push   eax
c001707c:	e8 9c f3 ff ff       	call   c001641d <Vm::inbv(unsigned short)>
c0017081:	0f b6 c0             	movzx  eax,al
c0017084:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017087:	eb 1d                	jmp    c00170a6 <Vm::faultHandler(regs*)+0x69d>
c0017089:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001708c:	83 e5 01             	and    ebp,0x1
c001708f:	74 03                	je     c0017094 <Vm::faultHandler(regs*)+0x68b>
c0017091:	ed                   	in     eax,dx
c0017092:	eb 0d                	jmp    c00170a1 <Vm::faultHandler(regs*)+0x698>
c0017094:	66 ed                	in     ax,dx
c0017096:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017099:	0f b7 c0             	movzx  eax,ax
c001709c:	66 31 d2             	xor    dx,dx
c001709f:	09 d0                	or     eax,edx
c00170a1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00170a4:	eb 18                	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c00170a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00170a9:	83 c4 10             	add    esp,0x10
c00170ac:	eb 13                	jmp    c00170c1 <Vm::faultHandler(regs*)+0x6b8>
c00170ae:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00170b1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00170b4:	83 e5 01             	and    ebp,0x1
c00170b7:	74 03                	je     c00170bc <Vm::faultHandler(regs*)+0x6b3>
c00170b9:	ef                   	out    dx,eax
c00170ba:	eb 02                	jmp    c00170be <Vm::faultHandler(regs*)+0x6b5>
c00170bc:	66 ef                	out    dx,ax
c00170be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00170c1:	b0 01                	mov    al,0x1
c00170c3:	eb 60                	jmp    c0017125 <Vm::faultHandler(regs*)+0x71c>
c00170c5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170c9:	50                   	push   eax
c00170ca:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170ce:	50                   	push   eax
c00170cf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170d3:	50                   	push   eax
c00170d4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170d8:	50                   	push   eax
c00170d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170dd:	50                   	push   eax
c00170de:	52                   	push   edx
c00170df:	52                   	push   edx
c00170e0:	68 6c 3a 02 c0       	push   0xc0023a6c
c00170e5:	e8 7a fe fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00170ea:	83 c4 20             	add    esp,0x20
c00170ed:	83 ec 0c             	sub    esp,0xc
c00170f0:	6a 60                	push   0x60
c00170f2:	e8 26 f3 ff ff       	call   c001641d <Vm::inbv(unsigned short)>
c00170f7:	83 c4 10             	add    esp,0x10
c00170fa:	0f b6 d0             	movzx  edx,al
c00170fd:	83 fa 1c             	cmp    edx,0x1c
c0017100:	74 05                	je     c0017107 <Vm::faultHandler(regs*)+0x6fe>
c0017102:	83 fa 5a             	cmp    edx,0x5a
c0017105:	75 e6                	jne    c00170ed <Vm::faultHandler(regs*)+0x6e4>
c0017107:	0f b6 c0             	movzx  eax,al
c001710a:	83 f8 1c             	cmp    eax,0x1c
c001710d:	74 05                	je     c0017114 <Vm::faultHandler(regs*)+0x70b>
c001710f:	83 f8 5a             	cmp    eax,0x5a
c0017112:	75 0f                	jne    c0017123 <Vm::faultHandler(regs*)+0x71a>
c0017114:	83 ec 0c             	sub    esp,0xc
c0017117:	6a 60                	push   0x60
c0017119:	e8 ff f2 ff ff       	call   c001641d <Vm::inbv(unsigned short)>
c001711e:	83 c4 10             	add    esp,0x10
c0017121:	eb e4                	jmp    c0017107 <Vm::faultHandler(regs*)+0x6fe>
c0017123:	31 c0                	xor    eax,eax
c0017125:	83 c4 2c             	add    esp,0x2c
c0017128:	5b                   	pop    ebx
c0017129:	5e                   	pop    esi
c001712a:	5f                   	pop    edi
c001712b:	5d                   	pop    ebp
c001712c:	c3                   	ret    
c001712d:	90                   	nop

c001712e <noCopro(unsigned long)>:
c001712e:	c3                   	ret    
c001712f:	90                   	nop

c0017130 <CPU::close(int, int, void*)>:
c0017130:	31 c0                	xor    eax,eax
c0017132:	c3                   	ret    

c0017133 <x86ReadCMOS(unsigned char)>:
c0017133:	83 ec 14             	sub    esp,0x14
c0017136:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001713a:	88 04 24             	mov    BYTE PTR [esp],al
c001713d:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0017142:	0f b6 c0             	movzx  eax,al
c0017145:	85 c0                	test   eax,eax
c0017147:	74 04                	je     c001714d <x86ReadCMOS(unsigned char)+0x1a>
c0017149:	b2 00                	mov    dl,0x0
c001714b:	eb 02                	jmp    c001714f <x86ReadCMOS(unsigned char)+0x1c>
c001714d:	b2 80                	mov    dl,0x80
c001714f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017152:	09 d0                	or     eax,edx
c0017154:	0f b6 c0             	movzx  eax,al
c0017157:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c001715e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017162:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017166:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001716b:	ee                   	out    dx,al
c001716c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0017173:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017178:	89 c2                	mov    edx,eax
c001717a:	ec                   	in     al,dx
c001717b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001717f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017183:	83 c4 14             	add    esp,0x14
c0017186:	c3                   	ret    

c0017187 <x86WriteCMOS(unsigned char, unsigned char)>:
c0017187:	83 ec 18             	sub    esp,0x18
c001718a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001718e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017192:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017196:	88 04 24             	mov    BYTE PTR [esp],al
c0017199:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c001719e:	0f b6 c0             	movzx  eax,al
c00171a1:	85 c0                	test   eax,eax
c00171a3:	74 04                	je     c00171a9 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c00171a5:	b2 00                	mov    dl,0x0
c00171a7:	eb 02                	jmp    c00171ab <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c00171a9:	b2 80                	mov    dl,0x80
c00171ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00171af:	09 d0                	or     eax,edx
c00171b1:	0f b6 c0             	movzx  eax,al
c00171b4:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c00171bb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00171bf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00171c3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00171c8:	ee                   	out    dx,al
c00171c9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00171cd:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c00171d4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00171d8:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00171dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00171e1:	ee                   	out    dx,al
c00171e2:	90                   	nop
c00171e3:	83 c4 18             	add    esp,0x18
c00171e6:	c3                   	ret    

c00171e7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00171e7:	60                   	pusha  
c00171e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00171f0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00171f4:	9c                   	pushf  
c00171f5:	fa                   	cli    
c00171f6:	0f 09                	wbinvd 
c00171f8:	0f 30                	wrmsr  
c00171fa:	9d                   	popf   
c00171fb:	89 c2                	mov    edx,eax
c00171fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017201:	89 10                	mov    DWORD PTR [eax],edx
c0017203:	61                   	popa   
c0017204:	90                   	nop
c0017205:	c3                   	ret    

c0017206 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0017206:	60                   	pusha  
c0017207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001720b:	89 c1                	mov    ecx,eax
c001720d:	9c                   	pushf  
c001720e:	fa                   	cli    
c001720f:	0f 09                	wbinvd 
c0017211:	31 c0                	xor    eax,eax
c0017213:	31 d2                	xor    edx,edx
c0017215:	0f 32                	rdmsr  
c0017217:	9d                   	popf   
c0017218:	89 c2                	mov    edx,eax
c001721a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001721e:	89 10                	mov    DWORD PTR [eax],edx
c0017220:	61                   	popa   
c0017221:	90                   	nop
c0017222:	c3                   	ret    

c0017223 <AMD_K6_writeback(int, int, int)>:
c0017223:	83 ec 20             	sub    esp,0x20
c0017226:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c001722b:	c1 e8 14             	shr    eax,0x14
c001722e:	c1 e8 02             	shr    eax,0x2
c0017231:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017235:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001723a:	0f 85 9e 00 00 00    	jne    c00172de <AMD_K6_writeback(int, int, int)+0xbb>
c0017240:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017244:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017248:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001724d:	75 19                	jne    c0017268 <AMD_K6_writeback(int, int, int)+0x45>
c001724f:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0017254:	7f 0a                	jg     c0017260 <AMD_K6_writeback(int, int, int)+0x3d>
c0017256:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c001725e:	eb 08                	jmp    c0017268 <AMD_K6_writeback(int, int, int)+0x45>
c0017260:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0017268:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c001726d:	7c 6e                	jl     c00172dd <AMD_K6_writeback(int, int, int)+0xba>
c001726f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0017274:	7e 09                	jle    c001727f <AMD_K6_writeback(int, int, int)+0x5c>
c0017276:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c001727b:	74 36                	je     c00172b3 <AMD_K6_writeback(int, int, int)+0x90>
c001727d:	eb 5e                	jmp    c00172dd <AMD_K6_writeback(int, int, int)+0xba>
c001727f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017283:	50                   	push   eax
c0017284:	68 82 00 00 c0       	push   0xc0000082
c0017289:	e8 78 ff ff ff       	call   c0017206 <AMD_K6_read_msr(unsigned int, REGS*)>
c001728e:	83 c4 08             	add    esp,0x8
c0017291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017295:	01 c0                	add    eax,eax
c0017297:	83 e0 7f             	and    eax,0x7f
c001729a:	89 c2                	mov    edx,eax
c001729c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00172a0:	50                   	push   eax
c00172a1:	6a 00                	push   0x0
c00172a3:	52                   	push   edx
c00172a4:	68 82 00 00 c0       	push   0xc0000082
c00172a9:	e8 39 ff ff ff       	call   c00171e7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00172ae:	83 c4 10             	add    esp,0x10
c00172b1:	eb 2b                	jmp    c00172de <AMD_K6_writeback(int, int, int)+0xbb>
c00172b3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00172b7:	50                   	push   eax
c00172b8:	68 82 00 00 c0       	push   0xc0000082
c00172bd:	e8 44 ff ff ff       	call   c0017206 <AMD_K6_read_msr(unsigned int, REGS*)>
c00172c2:	83 c4 08             	add    esp,0x8
c00172c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00172c9:	50                   	push   eax
c00172ca:	6a 00                	push   0x0
c00172cc:	6a 00                	push   0x0
c00172ce:	68 82 00 00 c0       	push   0xc0000082
c00172d3:	e8 0f ff ff ff       	call   c00171e7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00172d8:	83 c4 10             	add    esp,0x10
c00172db:	eb 01                	jmp    c00172de <AMD_K6_writeback(int, int, int)+0xbb>
c00172dd:	90                   	nop
c00172de:	90                   	nop
c00172df:	83 c4 20             	add    esp,0x20
c00172e2:	c3                   	ret    

c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00172e3:	56                   	push   esi
c00172e4:	53                   	push   ebx
c00172e5:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c00172ea:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00172ee:	75 32                	jne    c0017322 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00172f0:	8b 15 60 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d760
c00172f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172fa:	89 10                	mov    DWORD PTR [eax],edx
c00172fc:	8b 15 5c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d75c
c0017302:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017306:	89 10                	mov    DWORD PTR [eax],edx
c0017308:	8b 15 58 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d758
c001730e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017312:	89 10                	mov    DWORD PTR [eax],edx
c0017314:	8b 15 54 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d754
c001731a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001731e:	89 10                	mov    DWORD PTR [eax],edx
c0017320:	eb 5c                	jmp    c001737e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0017322:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017326:	ba 00 00 00 00       	mov    edx,0x0
c001732b:	89 d1                	mov    ecx,edx
c001732d:	0f a2                	cpuid  
c001732f:	89 c6                	mov    esi,eax
c0017331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017335:	89 30                	mov    DWORD PTR [eax],esi
c0017337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001733b:	89 18                	mov    DWORD PTR [eax],ebx
c001733d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017341:	89 08                	mov    DWORD PTR [eax],ecx
c0017343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017347:	89 10                	mov    DWORD PTR [eax],edx
c0017349:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001734d:	a3 00 54 02 c0       	mov    ds:0xc0025400,eax
c0017352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017356:	8b 00                	mov    eax,DWORD PTR [eax]
c0017358:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c001735d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017361:	8b 00                	mov    eax,DWORD PTR [eax]
c0017363:	a3 5c d7 02 c0       	mov    ds:0xc002d75c,eax
c0017368:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001736c:	8b 00                	mov    eax,DWORD PTR [eax]
c001736e:	a3 58 d7 02 c0       	mov    ds:0xc002d758,eax
c0017373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017377:	8b 00                	mov    eax,DWORD PTR [eax]
c0017379:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c001737e:	5b                   	pop    ebx
c001737f:	5e                   	pop    esi
c0017380:	c3                   	ret    

c0017381 <cpuidCheckEDX(unsigned int)>:
c0017381:	83 ec 10             	sub    esp,0x10
c0017384:	89 e0                	mov    eax,esp
c0017386:	50                   	push   eax
c0017387:	8d 44 24 08          	lea    eax,[esp+0x8]
c001738b:	50                   	push   eax
c001738c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017390:	50                   	push   eax
c0017391:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017395:	50                   	push   eax
c0017396:	6a 01                	push   0x1
c0017398:	e8 46 ff ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001739d:	83 c4 14             	add    esp,0x14
c00173a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00173a3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00173a7:	0f 95 c0             	setne  al
c00173aa:	83 c4 10             	add    esp,0x10
c00173ad:	c3                   	ret    

c00173ae <cpuidCheckECX(unsigned int)>:
c00173ae:	83 ec 10             	sub    esp,0x10
c00173b1:	89 e0                	mov    eax,esp
c00173b3:	50                   	push   eax
c00173b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00173b8:	50                   	push   eax
c00173b9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00173bd:	50                   	push   eax
c00173be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173c2:	50                   	push   eax
c00173c3:	6a 01                	push   0x1
c00173c5:	e8 19 ff ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00173ca:	83 c4 14             	add    esp,0x14
c00173cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173d1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00173d5:	0f 95 c0             	setne  al
c00173d8:	83 c4 10             	add    esp,0x10
c00173db:	c3                   	ret    

c00173dc <cpuidCheckExtendedEBX(unsigned int)>:
c00173dc:	83 ec 10             	sub    esp,0x10
c00173df:	89 e0                	mov    eax,esp
c00173e1:	50                   	push   eax
c00173e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00173e6:	50                   	push   eax
c00173e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00173eb:	50                   	push   eax
c00173ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173f0:	50                   	push   eax
c00173f1:	6a 07                	push   0x7
c00173f3:	e8 eb fe ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00173f8:	83 c4 14             	add    esp,0x14
c00173fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173ff:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017403:	0f 95 c0             	setne  al
c0017406:	83 c4 10             	add    esp,0x10
c0017409:	c3                   	ret    

c001740a <cpuidCheckExtendedECX(unsigned int)>:
c001740a:	83 ec 10             	sub    esp,0x10
c001740d:	89 e0                	mov    eax,esp
c001740f:	50                   	push   eax
c0017410:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017414:	50                   	push   eax
c0017415:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017419:	50                   	push   eax
c001741a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001741e:	50                   	push   eax
c001741f:	6a 07                	push   0x7
c0017421:	e8 bd fe ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017426:	83 c4 14             	add    esp,0x14
c0017429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001742d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017431:	0f 95 c0             	setne  al
c0017434:	83 c4 10             	add    esp,0x10
c0017437:	c3                   	ret    

c0017438 <HalDetectFeatures()>:
c0017438:	57                   	push   edi
c0017439:	56                   	push   esi
c001743a:	53                   	push   ebx
c001743b:	81 ec 90 00 00 00    	sub    esp,0x90
c0017441:	83 ec 04             	sub    esp,0x4
c0017444:	6a 08                	push   0x8
c0017446:	6a 00                	push   0x0
c0017448:	68 8c d7 02 c0       	push   0xc002d78c
c001744d:	e8 9e 90 fe ff       	call   c00004f0 <memset>
c0017452:	83 c4 10             	add    esp,0x10
c0017455:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001745a:	83 c8 04             	or     eax,0x4
c001745d:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017462:	e8 92 8d fe ff       	call   c00001f9 <detectCPUID>
c0017467:	85 c0                	test   eax,eax
c0017469:	0f 95 c0             	setne  al
c001746c:	83 e0 01             	and    eax,0x1
c001746f:	83 e0 01             	and    eax,0x1
c0017472:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017475:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001747a:	83 e0 fd             	and    eax,0xfffffffd
c001747d:	88 c2                	mov    dl,al
c001747f:	88 c8                	mov    al,cl
c0017481:	09 d0                	or     eax,edx
c0017483:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017488:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001748d:	83 e0 02             	and    eax,0x2
c0017490:	0f b6 c0             	movzx  eax,al
c0017493:	85 c0                	test   eax,eax
c0017495:	0f 84 7f 02 00 00    	je     c001771a <HalDetectFeatures()+0x2e2>
c001749b:	83 ec 0c             	sub    esp,0xc
c001749e:	6a 20                	push   0x20
c00174a0:	e8 dc fe ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c00174a5:	83 c4 10             	add    esp,0x10
c00174a8:	83 e0 01             	and    eax,0x1
c00174ab:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00174b2:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00174b7:	83 e0 f7             	and    eax,0xfffffff7
c00174ba:	88 c2                	mov    dl,al
c00174bc:	88 c8                	mov    al,cl
c00174be:	09 d0                	or     eax,edx
c00174c0:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00174c5:	83 ec 0c             	sub    esp,0xc
c00174c8:	68 00 00 00 04       	push   0x4000000
c00174cd:	e8 af fe ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c00174d2:	83 c4 10             	add    esp,0x10
c00174d5:	89 c1                	mov    ecx,eax
c00174d7:	83 e1 01             	and    ecx,0x1
c00174da:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00174df:	83 e0 fe             	and    eax,0xfffffffe
c00174e2:	88 c2                	mov    dl,al
c00174e4:	88 c8                	mov    al,cl
c00174e6:	09 d0                	or     eax,edx
c00174e8:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00174ed:	83 ec 0c             	sub    esp,0xc
c00174f0:	68 80 00 00 00       	push   0x80
c00174f5:	e8 87 fe ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c00174fa:	83 c4 10             	add    esp,0x10
c00174fd:	89 c1                	mov    ecx,eax
c00174ff:	c1 e1 07             	shl    ecx,0x7
c0017502:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017507:	83 e0 7f             	and    eax,0x7f
c001750a:	88 c2                	mov    dl,al
c001750c:	88 c8                	mov    al,cl
c001750e:	09 d0                	or     eax,edx
c0017510:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017515:	83 ec 0c             	sub    esp,0xc
c0017518:	68 00 00 80 00       	push   0x800000
c001751d:	e8 5f fe ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c0017522:	83 c4 10             	add    esp,0x10
c0017525:	83 e0 01             	and    eax,0x1
c0017528:	89 c1                	mov    ecx,eax
c001752a:	c1 e1 05             	shl    ecx,0x5
c001752d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017532:	83 e0 df             	and    eax,0xffffffdf
c0017535:	88 c2                	mov    dl,al
c0017537:	88 c8                	mov    al,cl
c0017539:	09 d0                	or     eax,edx
c001753b:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017540:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0017545:	83 e0 01             	and    eax,0x1
c0017548:	75 0c                	jne    c0017556 <HalDetectFeatures()+0x11e>
c001754a:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c001754f:	25 00 04 00 00       	and    eax,0x400
c0017554:	74 0f                	je     c0017565 <HalDetectFeatures()+0x12d>
c0017556:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001755b:	83 e0 fe             	and    eax,0xfffffffe
c001755e:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017563:	eb 28                	jmp    c001758d <HalDetectFeatures()+0x155>
c0017565:	83 ec 0c             	sub    esp,0xc
c0017568:	68 00 02 00 00       	push   0x200
c001756d:	e8 0f fe ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c0017572:	83 c4 10             	add    esp,0x10
c0017575:	89 c1                	mov    ecx,eax
c0017577:	83 e1 01             	and    ecx,0x1
c001757a:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001757f:	83 e0 fe             	and    eax,0xfffffffe
c0017582:	88 c2                	mov    dl,al
c0017584:	88 c8                	mov    al,cl
c0017586:	09 d0                	or     eax,edx
c0017588:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001758d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017592:	83 e0 01             	and    eax,0x1
c0017595:	0f b6 c0             	movzx  eax,al
c0017598:	85 c0                	test   eax,eax
c001759a:	74 1c                	je     c00175b8 <HalDetectFeatures()+0x180>
c001759c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00175a1:	83 e0 08             	and    eax,0x8
c00175a4:	0f b6 c0             	movzx  eax,al
c00175a7:	85 c0                	test   eax,eax
c00175a9:	75 0d                	jne    c00175b8 <HalDetectFeatures()+0x180>
c00175ab:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00175b0:	83 e0 fe             	and    eax,0xfffffffe
c00175b3:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00175b8:	83 ec 0c             	sub    esp,0xc
c00175bb:	68 cc 3a 02 c0       	push   0xc0023acc
c00175c0:	e8 9f f9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00175cd:	83 e0 fe             	and    eax,0xfffffffe
c00175d0:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00175d5:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00175dd:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00175e5:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00175ed:	85 c0                	test   eax,eax
c00175ef:	0f 84 ab 00 00 00    	je     c00176a0 <HalDetectFeatures()+0x268>
c00175f5:	83 ec 0c             	sub    esp,0xc
c00175f8:	6a 01                	push   0x1
c00175fa:	e8 af fd ff ff       	call   c00173ae <cpuidCheckECX(unsigned int)>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	83 e0 01             	and    eax,0x1
c0017605:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017608:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001760d:	83 e0 fd             	and    eax,0xfffffffd
c0017610:	88 c2                	mov    dl,al
c0017612:	88 c8                	mov    al,cl
c0017614:	09 d0                	or     eax,edx
c0017616:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c001761b:	83 ec 0c             	sub    esp,0xc
c001761e:	68 00 02 00 00       	push   0x200
c0017623:	e8 86 fd ff ff       	call   c00173ae <cpuidCheckECX(unsigned int)>
c0017628:	83 c4 10             	add    esp,0x10
c001762b:	83 e0 01             	and    eax,0x1
c001762e:	89 c1                	mov    ecx,eax
c0017630:	c1 e1 04             	shl    ecx,0x4
c0017633:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017638:	83 e0 ef             	and    eax,0xffffffef
c001763b:	88 c2                	mov    dl,al
c001763d:	88 c8                	mov    al,cl
c001763f:	09 d0                	or     eax,edx
c0017641:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017646:	83 ec 0c             	sub    esp,0xc
c0017649:	68 00 00 08 00       	push   0x80000
c001764e:	e8 5b fd ff ff       	call   c00173ae <cpuidCheckECX(unsigned int)>
c0017653:	83 c4 10             	add    esp,0x10
c0017656:	83 e0 01             	and    eax,0x1
c0017659:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017660:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017665:	83 e0 fb             	and    eax,0xfffffffb
c0017668:	88 c2                	mov    dl,al
c001766a:	88 c8                	mov    al,cl
c001766c:	09 d0                	or     eax,edx
c001766e:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017673:	83 ec 0c             	sub    esp,0xc
c0017676:	68 00 00 10 00       	push   0x100000
c001767b:	e8 2e fd ff ff       	call   c00173ae <cpuidCheckECX(unsigned int)>
c0017680:	83 c4 10             	add    esp,0x10
c0017683:	83 e0 01             	and    eax,0x1
c0017686:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001768d:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017692:	83 e0 f7             	and    eax,0xfffffff7
c0017695:	88 c2                	mov    dl,al
c0017697:	88 c8                	mov    al,cl
c0017699:	09 d0                	or     eax,edx
c001769b:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00176a0:	83 ec 0c             	sub    esp,0xc
c00176a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00176a7:	50                   	push   eax
c00176a8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00176ac:	50                   	push   eax
c00176ad:	8d 44 24 34          	lea    eax,[esp+0x34]
c00176b1:	50                   	push   eax
c00176b2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00176b6:	50                   	push   eax
c00176b7:	68 00 00 00 80       	push   0x80000000
c00176bc:	e8 22 fc ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00176c1:	83 c4 20             	add    esp,0x20
c00176c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176c8:	3d 00 00 00 80       	cmp    eax,0x80000000
c00176cd:	76 4b                	jbe    c001771a <HalDetectFeatures()+0x2e2>
c00176cf:	83 ec 0c             	sub    esp,0xc
c00176d2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00176d6:	50                   	push   eax
c00176d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00176db:	50                   	push   eax
c00176dc:	8d 44 24 34          	lea    eax,[esp+0x34]
c00176e0:	50                   	push   eax
c00176e1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00176e5:	50                   	push   eax
c00176e6:	68 01 00 00 80       	push   0x80000001
c00176eb:	e8 f3 fb ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00176f0:	83 c4 20             	add    esp,0x20
c00176f3:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00176f8:	83 e0 bf             	and    eax,0xffffffbf
c00176fb:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017700:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017705:	83 e0 fd             	and    eax,0xfffffffd
c0017708:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001770d:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017712:	83 e0 fe             	and    eax,0xfffffffe
c0017715:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001771a:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c001771f:	25 00 04 00 00       	and    eax,0x400
c0017724:	74 0d                	je     c0017733 <HalDetectFeatures()+0x2fb>
c0017726:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001772b:	83 e0 fb             	and    eax,0xfffffffb
c001772e:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017733:	c6 05 88 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d788,0x1
c001773a:	83 ec 04             	sub    esp,0x4
c001773d:	6a 0d                	push   0xd
c001773f:	6a 00                	push   0x0
c0017741:	68 70 d7 02 c0       	push   0xc002d770
c0017746:	e8 a5 8d fe ff       	call   c00004f0 <memset>
c001774b:	83 c4 10             	add    esp,0x10
c001774e:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017753:	83 e0 02             	and    eax,0x2
c0017756:	0f b6 c0             	movzx  eax,al
c0017759:	85 c0                	test   eax,eax
c001775b:	0f 84 16 08 00 00    	je     c0017f77 <HalDetectFeatures()+0xb3f>
c0017761:	83 ec 0c             	sub    esp,0xc
c0017764:	6a 10                	push   0x10
c0017766:	e8 16 fc ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c001776b:	83 c4 10             	add    esp,0x10
c001776e:	83 e0 01             	and    eax,0x1
c0017771:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017778:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001777d:	83 e0 f7             	and    eax,0xfffffff7
c0017780:	88 c2                	mov    dl,al
c0017782:	88 c8                	mov    al,cl
c0017784:	09 d0                	or     eax,edx
c0017786:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001778b:	83 ec 0c             	sub    esp,0xc
c001778e:	6a 40                	push   0x40
c0017790:	e8 ec fb ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c0017795:	83 c4 10             	add    esp,0x10
c0017798:	83 e0 01             	and    eax,0x1
c001779b:	89 c1                	mov    ecx,eax
c001779d:	c1 e1 04             	shl    ecx,0x4
c00177a0:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00177a5:	83 e0 ef             	and    eax,0xffffffef
c00177a8:	88 c2                	mov    dl,al
c00177aa:	88 c8                	mov    al,cl
c00177ac:	09 d0                	or     eax,edx
c00177ae:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00177b3:	83 ec 0c             	sub    esp,0xc
c00177b6:	6a 08                	push   0x8
c00177b8:	e8 c4 fb ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c00177bd:	83 c4 10             	add    esp,0x10
c00177c0:	83 e0 01             	and    eax,0x1
c00177c3:	89 c1                	mov    ecx,eax
c00177c5:	c1 e1 05             	shl    ecx,0x5
c00177c8:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00177cd:	83 e0 df             	and    eax,0xffffffdf
c00177d0:	88 c2                	mov    dl,al
c00177d2:	88 c8                	mov    al,cl
c00177d4:	09 d0                	or     eax,edx
c00177d6:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00177db:	83 ec 0c             	sub    esp,0xc
c00177de:	68 00 20 00 00       	push   0x2000
c00177e3:	e8 99 fb ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c00177e8:	83 c4 10             	add    esp,0x10
c00177eb:	83 e0 01             	and    eax,0x1
c00177ee:	89 c1                	mov    ecx,eax
c00177f0:	c1 e1 06             	shl    ecx,0x6
c00177f3:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00177f8:	83 e0 bf             	and    eax,0xffffffbf
c00177fb:	88 c2                	mov    dl,al
c00177fd:	88 c8                	mov    al,cl
c00177ff:	09 d0                	or     eax,edx
c0017801:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017806:	83 ec 0c             	sub    esp,0xc
c0017809:	68 00 00 01 00       	push   0x10000
c001780e:	e8 6e fb ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c0017813:	83 c4 10             	add    esp,0x10
c0017816:	89 c1                	mov    ecx,eax
c0017818:	c1 e1 07             	shl    ecx,0x7
c001781b:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017820:	83 e0 7f             	and    eax,0x7f
c0017823:	88 c2                	mov    dl,al
c0017825:	88 c8                	mov    al,cl
c0017827:	09 d0                	or     eax,edx
c0017829:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001782e:	83 ec 0c             	sub    esp,0xc
c0017831:	6a 01                	push   0x1
c0017833:	e8 49 fb ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	83 e0 01             	and    eax,0x1
c001783e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017845:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c001784a:	83 e0 f7             	and    eax,0xfffffff7
c001784d:	88 c2                	mov    dl,al
c001784f:	88 c8                	mov    al,cl
c0017851:	09 d0                	or     eax,edx
c0017853:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017858:	83 ec 0c             	sub    esp,0xc
c001785b:	68 00 08 00 00       	push   0x800
c0017860:	e8 1c fb ff ff       	call   c0017381 <cpuidCheckEDX(unsigned int)>
c0017865:	83 c4 10             	add    esp,0x10
c0017868:	89 c1                	mov    ecx,eax
c001786a:	83 e1 01             	and    ecx,0x1
c001786d:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017872:	83 e0 fe             	and    eax,0xfffffffe
c0017875:	88 c2                	mov    dl,al
c0017877:	88 c8                	mov    al,cl
c0017879:	09 d0                	or     eax,edx
c001787b:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017880:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017885:	83 e0 40             	and    eax,0x40
c0017888:	0f b6 c0             	movzx  eax,al
c001788b:	85 c0                	test   eax,eax
c001788d:	74 0a                	je     c0017899 <HalDetectFeatures()+0x461>
c001788f:	c7 05 68 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d768,0x100
c0017899:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001789e:	83 e0 80             	and    eax,0xffffff80
c00178a1:	0f b6 c0             	movzx  eax,al
c00178a4:	85 c0                	test   eax,eax
c00178a6:	74 0a                	je     c00178b2 <HalDetectFeatures()+0x47a>
c00178a8:	c7 05 64 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d764,0x80
c00178b2:	83 ec 0c             	sub    esp,0xc
c00178b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178b9:	50                   	push   eax
c00178ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178be:	50                   	push   eax
c00178bf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00178c3:	50                   	push   eax
c00178c4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00178c8:	50                   	push   eax
c00178c9:	6a 00                	push   0x0
c00178cb:	e8 13 fa ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178d0:	83 c4 20             	add    esp,0x20
c00178d3:	c7 44 24 48 70 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d770
c00178db:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178df:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00178e3:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00178eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00178ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00178f7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00178fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00178ff:	89 c6                	mov    esi,eax
c0017901:	89 d7                	mov    edi,edx
c0017903:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017905:	89 c8                	mov    eax,ecx
c0017907:	89 fa                	mov    edx,edi
c0017909:	89 f3                	mov    ebx,esi
c001790b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001790f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017913:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017917:	b8 74 d7 02 c0       	mov    eax,0xc002d774
c001791c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017920:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017924:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0017928:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017930:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0017934:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0017938:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001793c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0017940:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0017944:	89 c6                	mov    esi,eax
c0017946:	89 d7                	mov    edi,edx
c0017948:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001794a:	89 c8                	mov    eax,ecx
c001794c:	89 fa                	mov    edx,edi
c001794e:	89 f3                	mov    ebx,esi
c0017950:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0017954:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0017958:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001795c:	b8 78 d7 02 c0       	mov    eax,0xc002d778
c0017961:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017968:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001796c:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0017970:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017978:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001797f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0017983:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017987:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001798e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0017992:	89 c6                	mov    esi,eax
c0017994:	89 d7                	mov    edi,edx
c0017996:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017998:	89 c8                	mov    eax,ecx
c001799a:	89 fa                	mov    edx,edi
c001799c:	89 f3                	mov    ebx,esi
c001799e:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00179a2:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00179a6:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00179aa:	83 ec 08             	sub    esp,0x8
c00179ad:	68 de 3a 02 c0       	push   0xc0023ade
c00179b2:	68 70 d7 02 c0       	push   0xc002d770
c00179b7:	e8 94 8d fe ff       	call   c0000750 <strcmp>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	85 c0                	test   eax,eax
c00179c1:	74 19                	je     c00179dc <HalDetectFeatures()+0x5a4>
c00179c3:	83 ec 08             	sub    esp,0x8
c00179c6:	68 eb 3a 02 c0       	push   0xc0023aeb
c00179cb:	68 70 d7 02 c0       	push   0xc002d770
c00179d0:	e8 7b 8d fe ff       	call   c0000750 <strcmp>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	85 c0                	test   eax,eax
c00179da:	75 04                	jne    c00179e0 <HalDetectFeatures()+0x5a8>
c00179dc:	b0 01                	mov    al,0x1
c00179de:	eb 02                	jmp    c00179e2 <HalDetectFeatures()+0x5aa>
c00179e0:	b0 00                	mov    al,0x0
c00179e2:	0f b6 c0             	movzx  eax,al
c00179e5:	85 c0                	test   eax,eax
c00179e7:	74 0f                	je     c00179f8 <HalDetectFeatures()+0x5c0>
c00179e9:	c7 05 84 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x2
c00179f3:	e9 0d 03 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c00179f8:	83 ec 08             	sub    esp,0x8
c00179fb:	68 f8 3a 02 c0       	push   0xc0023af8
c0017a00:	68 70 d7 02 c0       	push   0xc002d770
c0017a05:	e8 46 8d fe ff       	call   c0000750 <strcmp>
c0017a0a:	83 c4 10             	add    esp,0x10
c0017a0d:	85 c0                	test   eax,eax
c0017a0f:	74 19                	je     c0017a2a <HalDetectFeatures()+0x5f2>
c0017a11:	83 ec 08             	sub    esp,0x8
c0017a14:	68 05 3b 02 c0       	push   0xc0023b05
c0017a19:	68 70 d7 02 c0       	push   0xc002d770
c0017a1e:	e8 2d 8d fe ff       	call   c0000750 <strcmp>
c0017a23:	83 c4 10             	add    esp,0x10
c0017a26:	85 c0                	test   eax,eax
c0017a28:	75 04                	jne    c0017a2e <HalDetectFeatures()+0x5f6>
c0017a2a:	b0 01                	mov    al,0x1
c0017a2c:	eb 02                	jmp    c0017a30 <HalDetectFeatures()+0x5f8>
c0017a2e:	b0 00                	mov    al,0x0
c0017a30:	0f b6 c0             	movzx  eax,al
c0017a33:	85 c0                	test   eax,eax
c0017a35:	74 0f                	je     c0017a46 <HalDetectFeatures()+0x60e>
c0017a37:	c7 05 84 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x4
c0017a41:	e9 bf 02 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017a46:	83 ec 08             	sub    esp,0x8
c0017a49:	68 12 3b 02 c0       	push   0xc0023b12
c0017a4e:	68 70 d7 02 c0       	push   0xc002d770
c0017a53:	e8 f8 8c fe ff       	call   c0000750 <strcmp>
c0017a58:	83 c4 10             	add    esp,0x10
c0017a5b:	85 c0                	test   eax,eax
c0017a5d:	74 19                	je     c0017a78 <HalDetectFeatures()+0x640>
c0017a5f:	83 ec 08             	sub    esp,0x8
c0017a62:	68 1f 3b 02 c0       	push   0xc0023b1f
c0017a67:	68 70 d7 02 c0       	push   0xc002d770
c0017a6c:	e8 df 8c fe ff       	call   c0000750 <strcmp>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	85 c0                	test   eax,eax
c0017a76:	75 04                	jne    c0017a7c <HalDetectFeatures()+0x644>
c0017a78:	b0 01                	mov    al,0x1
c0017a7a:	eb 02                	jmp    c0017a7e <HalDetectFeatures()+0x646>
c0017a7c:	b0 00                	mov    al,0x0
c0017a7e:	0f b6 c0             	movzx  eax,al
c0017a81:	85 c0                	test   eax,eax
c0017a83:	74 0f                	je     c0017a94 <HalDetectFeatures()+0x65c>
c0017a85:	c7 05 84 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x5
c0017a8f:	e9 71 02 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017a94:	83 ec 08             	sub    esp,0x8
c0017a97:	68 2c 3b 02 c0       	push   0xc0023b2c
c0017a9c:	68 70 d7 02 c0       	push   0xc002d770
c0017aa1:	e8 aa 8c fe ff       	call   c0000750 <strcmp>
c0017aa6:	83 c4 10             	add    esp,0x10
c0017aa9:	85 c0                	test   eax,eax
c0017aab:	0f 94 c0             	sete   al
c0017aae:	0f b6 c0             	movzx  eax,al
c0017ab1:	85 c0                	test   eax,eax
c0017ab3:	74 0f                	je     c0017ac4 <HalDetectFeatures()+0x68c>
c0017ab5:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017abf:	e9 41 02 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017ac4:	83 ec 08             	sub    esp,0x8
c0017ac7:	68 39 3b 02 c0       	push   0xc0023b39
c0017acc:	68 70 d7 02 c0       	push   0xc002d770
c0017ad1:	e8 7a 8c fe ff       	call   c0000750 <strcmp>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	85 c0                	test   eax,eax
c0017adb:	0f 94 c0             	sete   al
c0017ade:	0f b6 c0             	movzx  eax,al
c0017ae1:	85 c0                	test   eax,eax
c0017ae3:	74 0f                	je     c0017af4 <HalDetectFeatures()+0x6bc>
c0017ae5:	c7 05 84 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x3
c0017aef:	e9 11 02 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017af4:	83 ec 08             	sub    esp,0x8
c0017af7:	68 f8 3a 02 c0       	push   0xc0023af8
c0017afc:	68 70 d7 02 c0       	push   0xc002d770
c0017b01:	e8 4a 8c fe ff       	call   c0000750 <strcmp>
c0017b06:	83 c4 10             	add    esp,0x10
c0017b09:	85 c0                	test   eax,eax
c0017b0b:	0f 94 c0             	sete   al
c0017b0e:	0f b6 c0             	movzx  eax,al
c0017b11:	85 c0                	test   eax,eax
c0017b13:	74 0f                	je     c0017b24 <HalDetectFeatures()+0x6ec>
c0017b15:	c7 05 84 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x6
c0017b1f:	e9 e1 01 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017b24:	83 ec 08             	sub    esp,0x8
c0017b27:	68 46 3b 02 c0       	push   0xc0023b46
c0017b2c:	68 70 d7 02 c0       	push   0xc002d770
c0017b31:	e8 1a 8c fe ff       	call   c0000750 <strcmp>
c0017b36:	83 c4 10             	add    esp,0x10
c0017b39:	85 c0                	test   eax,eax
c0017b3b:	0f 94 c0             	sete   al
c0017b3e:	0f b6 c0             	movzx  eax,al
c0017b41:	85 c0                	test   eax,eax
c0017b43:	74 0f                	je     c0017b54 <HalDetectFeatures()+0x71c>
c0017b45:	c7 05 84 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x7
c0017b4f:	e9 b1 01 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017b54:	83 ec 08             	sub    esp,0x8
c0017b57:	68 53 3b 02 c0       	push   0xc0023b53
c0017b5c:	68 70 d7 02 c0       	push   0xc002d770
c0017b61:	e8 ea 8b fe ff       	call   c0000750 <strcmp>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	85 c0                	test   eax,eax
c0017b6b:	0f 94 c0             	sete   al
c0017b6e:	0f b6 c0             	movzx  eax,al
c0017b71:	85 c0                	test   eax,eax
c0017b73:	74 0f                	je     c0017b84 <HalDetectFeatures()+0x74c>
c0017b75:	c7 05 84 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x8
c0017b7f:	e9 81 01 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017b84:	83 ec 08             	sub    esp,0x8
c0017b87:	68 60 3b 02 c0       	push   0xc0023b60
c0017b8c:	68 70 d7 02 c0       	push   0xc002d770
c0017b91:	e8 ba 8b fe ff       	call   c0000750 <strcmp>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	85 c0                	test   eax,eax
c0017b9b:	0f 94 c0             	sete   al
c0017b9e:	0f b6 c0             	movzx  eax,al
c0017ba1:	85 c0                	test   eax,eax
c0017ba3:	74 0f                	je     c0017bb4 <HalDetectFeatures()+0x77c>
c0017ba5:	c7 05 84 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x9
c0017baf:	e9 51 01 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017bb4:	83 ec 08             	sub    esp,0x8
c0017bb7:	68 6d 3b 02 c0       	push   0xc0023b6d
c0017bbc:	68 70 d7 02 c0       	push   0xc002d770
c0017bc1:	e8 8a 8b fe ff       	call   c0000750 <strcmp>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	85 c0                	test   eax,eax
c0017bcb:	0f 94 c0             	sete   al
c0017bce:	0f b6 c0             	movzx  eax,al
c0017bd1:	85 c0                	test   eax,eax
c0017bd3:	74 0f                	je     c0017be4 <HalDetectFeatures()+0x7ac>
c0017bd5:	c7 05 84 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xa
c0017bdf:	e9 21 01 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017be4:	83 ec 08             	sub    esp,0x8
c0017be7:	68 7a 3b 02 c0       	push   0xc0023b7a
c0017bec:	68 70 d7 02 c0       	push   0xc002d770
c0017bf1:	e8 5a 8b fe ff       	call   c0000750 <strcmp>
c0017bf6:	83 c4 10             	add    esp,0x10
c0017bf9:	85 c0                	test   eax,eax
c0017bfb:	0f 94 c0             	sete   al
c0017bfe:	0f b6 c0             	movzx  eax,al
c0017c01:	85 c0                	test   eax,eax
c0017c03:	74 0f                	je     c0017c14 <HalDetectFeatures()+0x7dc>
c0017c05:	c7 05 84 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xb
c0017c0f:	e9 f1 00 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017c14:	83 ec 08             	sub    esp,0x8
c0017c17:	68 87 3b 02 c0       	push   0xc0023b87
c0017c1c:	68 70 d7 02 c0       	push   0xc002d770
c0017c21:	e8 2a 8b fe ff       	call   c0000750 <strcmp>
c0017c26:	83 c4 10             	add    esp,0x10
c0017c29:	85 c0                	test   eax,eax
c0017c2b:	0f 94 c0             	sete   al
c0017c2e:	0f b6 c0             	movzx  eax,al
c0017c31:	85 c0                	test   eax,eax
c0017c33:	74 0f                	je     c0017c44 <HalDetectFeatures()+0x80c>
c0017c35:	c7 05 84 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xc
c0017c3f:	e9 c1 00 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017c44:	83 ec 08             	sub    esp,0x8
c0017c47:	68 94 3b 02 c0       	push   0xc0023b94
c0017c4c:	68 70 d7 02 c0       	push   0xc002d770
c0017c51:	e8 fa 8a fe ff       	call   c0000750 <strcmp>
c0017c56:	83 c4 10             	add    esp,0x10
c0017c59:	85 c0                	test   eax,eax
c0017c5b:	0f 94 c0             	sete   al
c0017c5e:	0f b6 c0             	movzx  eax,al
c0017c61:	85 c0                	test   eax,eax
c0017c63:	74 0f                	je     c0017c74 <HalDetectFeatures()+0x83c>
c0017c65:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017c6f:	e9 91 00 00 00       	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017c74:	83 ec 08             	sub    esp,0x8
c0017c77:	68 a1 3b 02 c0       	push   0xc0023ba1
c0017c7c:	68 70 d7 02 c0       	push   0xc002d770
c0017c81:	e8 ca 8a fe ff       	call   c0000750 <strcmp>
c0017c86:	83 c4 10             	add    esp,0x10
c0017c89:	85 c0                	test   eax,eax
c0017c8b:	0f 94 c0             	sete   al
c0017c8e:	0f b6 c0             	movzx  eax,al
c0017c91:	85 c0                	test   eax,eax
c0017c93:	74 0c                	je     c0017ca1 <HalDetectFeatures()+0x869>
c0017c95:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017c9f:	eb 64                	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017ca1:	83 ec 08             	sub    esp,0x8
c0017ca4:	68 ae 3b 02 c0       	push   0xc0023bae
c0017ca9:	68 70 d7 02 c0       	push   0xc002d770
c0017cae:	e8 9d 8a fe ff       	call   c0000750 <strcmp>
c0017cb3:	83 c4 10             	add    esp,0x10
c0017cb6:	85 c0                	test   eax,eax
c0017cb8:	0f 94 c0             	sete   al
c0017cbb:	0f b6 c0             	movzx  eax,al
c0017cbe:	85 c0                	test   eax,eax
c0017cc0:	74 0c                	je     c0017cce <HalDetectFeatures()+0x896>
c0017cc2:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017ccc:	eb 37                	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017cce:	83 ec 08             	sub    esp,0x8
c0017cd1:	68 bb 3b 02 c0       	push   0xc0023bbb
c0017cd6:	68 70 d7 02 c0       	push   0xc002d770
c0017cdb:	e8 70 8a fe ff       	call   c0000750 <strcmp>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	85 c0                	test   eax,eax
c0017ce5:	0f 94 c0             	sete   al
c0017ce8:	0f b6 c0             	movzx  eax,al
c0017ceb:	85 c0                	test   eax,eax
c0017ced:	74 0c                	je     c0017cfb <HalDetectFeatures()+0x8c3>
c0017cef:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017cf9:	eb 0a                	jmp    c0017d05 <HalDetectFeatures()+0x8cd>
c0017cfb:	c7 05 84 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x0
c0017d05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d09:	83 f8 06             	cmp    eax,0x6
c0017d0c:	0f 86 cc 00 00 00    	jbe    c0017dde <HalDetectFeatures()+0x9a6>
c0017d12:	83 ec 0c             	sub    esp,0xc
c0017d15:	68 80 00 00 00       	push   0x80
c0017d1a:	e8 bd f6 ff ff       	call   c00173dc <cpuidCheckExtendedEBX(unsigned int)>
c0017d1f:	83 c4 10             	add    esp,0x10
c0017d22:	89 c1                	mov    ecx,eax
c0017d24:	83 e1 01             	and    ecx,0x1
c0017d27:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d2c:	83 e0 fe             	and    eax,0xfffffffe
c0017d2f:	88 c2                	mov    dl,al
c0017d31:	88 c8                	mov    al,cl
c0017d33:	09 d0                	or     eax,edx
c0017d35:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d3a:	83 ec 0c             	sub    esp,0xc
c0017d3d:	68 00 00 10 00       	push   0x100000
c0017d42:	e8 95 f6 ff ff       	call   c00173dc <cpuidCheckExtendedEBX(unsigned int)>
c0017d47:	83 c4 10             	add    esp,0x10
c0017d4a:	83 e0 01             	and    eax,0x1
c0017d4d:	89 c1                	mov    ecx,eax
c0017d4f:	c1 e1 06             	shl    ecx,0x6
c0017d52:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d57:	83 e0 bf             	and    eax,0xffffffbf
c0017d5a:	88 c2                	mov    dl,al
c0017d5c:	88 c8                	mov    al,cl
c0017d5e:	09 d0                	or     eax,edx
c0017d60:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d65:	83 ec 0c             	sub    esp,0xc
c0017d68:	68 00 00 04 00       	push   0x40000
c0017d6d:	e8 6a f6 ff ff       	call   c00173dc <cpuidCheckExtendedEBX(unsigned int)>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	83 e0 01             	and    eax,0x1
c0017d78:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017d7b:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d80:	83 e0 fd             	and    eax,0xfffffffd
c0017d83:	88 c2                	mov    dl,al
c0017d85:	88 c8                	mov    al,cl
c0017d87:	09 d0                	or     eax,edx
c0017d89:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d8e:	83 ec 0c             	sub    esp,0xc
c0017d91:	6a 04                	push   0x4
c0017d93:	e8 72 f6 ff ff       	call   c001740a <cpuidCheckExtendedECX(unsigned int)>
c0017d98:	83 c4 10             	add    esp,0x10
c0017d9b:	83 e0 01             	and    eax,0x1
c0017d9e:	89 c1                	mov    ecx,eax
c0017da0:	c1 e1 05             	shl    ecx,0x5
c0017da3:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017da8:	83 e0 df             	and    eax,0xffffffdf
c0017dab:	88 c2                	mov    dl,al
c0017dad:	88 c8                	mov    al,cl
c0017daf:	09 d0                	or     eax,edx
c0017db1:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017db6:	83 ec 0c             	sub    esp,0xc
c0017db9:	6a 20                	push   0x20
c0017dbb:	e8 4a f6 ff ff       	call   c001740a <cpuidCheckExtendedECX(unsigned int)>
c0017dc0:	83 c4 10             	add    esp,0x10
c0017dc3:	83 e0 01             	and    eax,0x1
c0017dc6:	89 c1                	mov    ecx,eax
c0017dc8:	c1 e1 04             	shl    ecx,0x4
c0017dcb:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017dd0:	83 e0 ef             	and    eax,0xffffffef
c0017dd3:	88 c2                	mov    dl,al
c0017dd5:	88 c8                	mov    al,cl
c0017dd7:	09 d0                	or     eax,edx
c0017dd9:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017dde:	83 ec 0c             	sub    esp,0xc
c0017de1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017de5:	50                   	push   eax
c0017de6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dea:	50                   	push   eax
c0017deb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017def:	50                   	push   eax
c0017df0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017df4:	50                   	push   eax
c0017df5:	6a 01                	push   0x1
c0017df7:	e8 e7 f4 ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017dfc:	83 c4 20             	add    esp,0x20
c0017dff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e03:	83 e0 0f             	and    eax,0xf
c0017e06:	a2 80 d7 02 c0       	mov    ds:0xc002d780,al
c0017e0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e0f:	c1 e8 04             	shr    eax,0x4
c0017e12:	83 e0 0f             	and    eax,0xf
c0017e15:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017e1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e1e:	c1 e8 08             	shr    eax,0x8
c0017e21:	83 e0 0f             	and    eax,0xf
c0017e24:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017e29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e2d:	c1 e8 0c             	shr    eax,0xc
c0017e30:	83 e0 03             	and    eax,0x3
c0017e33:	a2 7f d7 02 c0       	mov    ds:0xc002d77f,al
c0017e38:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017e3d:	0f b6 c0             	movzx  eax,al
c0017e40:	83 f8 06             	cmp    eax,0x6
c0017e43:	74 0d                	je     c0017e52 <HalDetectFeatures()+0xa1a>
c0017e45:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017e4a:	0f b6 c0             	movzx  eax,al
c0017e4d:	83 f8 0f             	cmp    eax,0xf
c0017e50:	75 18                	jne    c0017e6a <HalDetectFeatures()+0xa32>
c0017e52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e56:	c1 e8 10             	shr    eax,0x10
c0017e59:	c1 e0 04             	shl    eax,0x4
c0017e5c:	88 c2                	mov    dl,al
c0017e5e:	a0 7e d7 02 c0       	mov    al,ds:0xc002d77e
c0017e63:	09 d0                	or     eax,edx
c0017e65:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017e6a:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017e6f:	0f b6 c0             	movzx  eax,al
c0017e72:	83 f8 0f             	cmp    eax,0xf
c0017e75:	75 15                	jne    c0017e8c <HalDetectFeatures()+0xa54>
c0017e77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e7b:	c1 e8 14             	shr    eax,0x14
c0017e7e:	88 c2                	mov    dl,al
c0017e80:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017e85:	01 d0                	add    eax,edx
c0017e87:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017e8c:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017e94:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0017e9c:	85 c0                	test   eax,eax
c0017e9e:	74 2d                	je     c0017ecd <HalDetectFeatures()+0xa95>
c0017ea0:	83 ec 0c             	sub    esp,0xc
c0017ea3:	68 00 00 00 40       	push   0x40000000
c0017ea8:	e8 01 f5 ff ff       	call   c00173ae <cpuidCheckECX(unsigned int)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	83 e0 01             	and    eax,0x1
c0017eb3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017eba:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017ebf:	83 e0 fb             	and    eax,0xfffffffb
c0017ec2:	88 c2                	mov    dl,al
c0017ec4:	88 c8                	mov    al,cl
c0017ec6:	09 d0                	or     eax,edx
c0017ec8:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017ecd:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017ed2:	83 c8 04             	or     eax,0x4
c0017ed5:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017eda:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017edf:	83 c8 08             	or     eax,0x8
c0017ee2:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ee7:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017eec:	83 c8 10             	or     eax,0x10
c0017eef:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017efb:	50                   	push   eax
c0017efc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f00:	50                   	push   eax
c0017f01:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f05:	50                   	push   eax
c0017f06:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017f0a:	50                   	push   eax
c0017f0b:	68 00 00 00 80       	push   0x80000000
c0017f10:	e8 ce f3 ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f15:	83 c4 20             	add    esp,0x20
c0017f18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f1c:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017f21:	0f 86 96 01 00 00    	jbe    c00180bd <HalDetectFeatures()+0xc85>
c0017f27:	83 ec 0c             	sub    esp,0xc
c0017f2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017f2e:	50                   	push   eax
c0017f2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f33:	50                   	push   eax
c0017f34:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f38:	50                   	push   eax
c0017f39:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017f3d:	50                   	push   eax
c0017f3e:	68 01 00 00 80       	push   0x80000001
c0017f43:	e8 9b f3 ff ff       	call   c00172e3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f48:	83 c4 20             	add    esp,0x20
c0017f4b:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017f50:	83 e0 7f             	and    eax,0x7f
c0017f53:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017f58:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017f5d:	83 e0 fb             	and    eax,0xfffffffb
c0017f60:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017f65:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017f6a:	83 e0 fd             	and    eax,0xfffffffd
c0017f6d:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017f72:	e9 46 01 00 00       	jmp    c00180bd <HalDetectFeatures()+0xc85>
c0017f77:	83 ec 08             	sub    esp,0x8
c0017f7a:	68 2c 3b 02 c0       	push   0xc0023b2c
c0017f7f:	68 70 d7 02 c0       	push   0xc002d770
c0017f84:	e8 b7 86 fe ff       	call   c0000640 <strcpy>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017f96:	e8 28 82 fe ff       	call   c00001c3 <is486>
c0017f9b:	85 c0                	test   eax,eax
c0017f9d:	0f 95 c0             	setne  al
c0017fa0:	0f b6 c0             	movzx  eax,al
c0017fa3:	85 c0                	test   eax,eax
c0017fa5:	0f 84 8d 00 00 00    	je     c0018038 <HalDetectFeatures()+0xc00>
c0017fab:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017fb0:	83 c8 04             	or     eax,0x4
c0017fb3:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017fb8:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017fbd:	83 c8 08             	or     eax,0x8
c0017fc0:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017fc5:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017fca:	83 c8 10             	or     eax,0x10
c0017fcd:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017fd2:	0f 20 c0             	mov    eax,cr0
c0017fd5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017fd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdd:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017fe4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017feb:	83 e0 04             	and    eax,0x4
c0017fee:	74 1e                	je     c001800e <HalDetectFeatures()+0xbd6>
c0017ff0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017ff7:	83 e0 10             	and    eax,0x10
c0017ffa:	75 12                	jne    c001800e <HalDetectFeatures()+0xbd6>
c0017ffc:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018001:	83 e0 f7             	and    eax,0xfffffff7
c0018004:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0018009:	e9 af 00 00 00       	jmp    c00180bd <HalDetectFeatures()+0xc85>
c001800e:	e8 8b 81 fe ff       	call   c000019e <hasLegacyFPU>
c0018013:	83 e0 01             	and    eax,0x1
c0018016:	83 e0 01             	and    eax,0x1
c0018019:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018020:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018025:	83 e0 f7             	and    eax,0xfffffff7
c0018028:	88 c2                	mov    dl,al
c001802a:	88 c8                	mov    al,cl
c001802c:	09 d0                	or     eax,edx
c001802e:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0018033:	e9 85 00 00 00       	jmp    c00180bd <HalDetectFeatures()+0xc85>
c0018038:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c001803d:	83 e0 fb             	and    eax,0xfffffffb
c0018040:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0018045:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c001804a:	83 e0 f7             	and    eax,0xfffffff7
c001804d:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0018052:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0018057:	83 e0 ef             	and    eax,0xffffffef
c001805a:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c001805f:	0f 20 c0             	mov    eax,cr0
c0018062:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018066:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0018071:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018078:	83 e0 04             	and    eax,0x4
c001807b:	74 1b                	je     c0018098 <HalDetectFeatures()+0xc60>
c001807d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018084:	83 e0 10             	and    eax,0x10
c0018087:	75 0f                	jne    c0018098 <HalDetectFeatures()+0xc60>
c0018089:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c001808e:	83 e0 f7             	and    eax,0xfffffff7
c0018091:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0018096:	eb 25                	jmp    c00180bd <HalDetectFeatures()+0xc85>
c0018098:	e8 01 81 fe ff       	call   c000019e <hasLegacyFPU>
c001809d:	83 e0 01             	and    eax,0x1
c00180a0:	83 e0 01             	and    eax,0x1
c00180a3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00180aa:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00180af:	83 e0 f7             	and    eax,0xfffffff7
c00180b2:	88 c2                	mov    dl,al
c00180b4:	88 c8                	mov    al,cl
c00180b6:	09 d0                	or     eax,edx
c00180b8:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c00180bd:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00180c2:	83 e0 08             	and    eax,0x8
c00180c5:	0f b6 c0             	movzx  eax,al
c00180c8:	85 c0                	test   eax,eax
c00180ca:	75 25                	jne    c00180f1 <HalDetectFeatures()+0xcb9>
c00180cc:	e8 cd 80 fe ff       	call   c000019e <hasLegacyFPU>
c00180d1:	83 e0 01             	and    eax,0x1
c00180d4:	83 e0 01             	and    eax,0x1
c00180d7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00180de:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00180e3:	83 e0 f7             	and    eax,0xfffffff7
c00180e6:	88 c2                	mov    dl,al
c00180e8:	88 c8                	mov    al,cl
c00180ea:	09 d0                	or     eax,edx
c00180ec:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c00180f1:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00180f6:	83 e0 08             	and    eax,0x8
c00180f9:	0f b6 c0             	movzx  eax,al
c00180fc:	85 c0                	test   eax,eax
c00180fe:	74 0d                	je     c001810d <HalDetectFeatures()+0xcd5>
c0018100:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018105:	83 c8 10             	or     eax,0x10
c0018108:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001810d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018112:	83 e0 10             	and    eax,0x10
c0018115:	0f b6 c0             	movzx  eax,al
c0018118:	85 c0                	test   eax,eax
c001811a:	75 23                	jne    c001813f <HalDetectFeatures()+0xd07>
c001811c:	e8 65 7f 00 00       	call   c0020086 <x87Detect>
c0018121:	83 e0 01             	and    eax,0x1
c0018124:	83 e0 01             	and    eax,0x1
c0018127:	89 c1                	mov    ecx,eax
c0018129:	c1 e1 04             	shl    ecx,0x4
c001812c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018131:	83 e0 ef             	and    eax,0xffffffef
c0018134:	88 c2                	mov    dl,al
c0018136:	88 c8                	mov    al,cl
c0018138:	09 d0                	or     eax,edx
c001813a:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001813f:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0018144:	83 e0 01             	and    eax,0x1
c0018147:	0f b6 c0             	movzx  eax,al
c001814a:	85 c0                	test   eax,eax
c001814c:	75 2d                	jne    c001817b <HalDetectFeatures()+0xd43>
c001814e:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0018153:	83 e0 02             	and    eax,0x2
c0018156:	0f b6 c0             	movzx  eax,al
c0018159:	85 c0                	test   eax,eax
c001815b:	75 1e                	jne    c001817b <HalDetectFeatures()+0xd43>
c001815d:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0018162:	83 e0 04             	and    eax,0x4
c0018165:	0f b6 c0             	movzx  eax,al
c0018168:	85 c0                	test   eax,eax
c001816a:	75 0f                	jne    c001817b <HalDetectFeatures()+0xd43>
c001816c:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0018171:	83 e0 08             	and    eax,0x8
c0018174:	0f b6 c0             	movzx  eax,al
c0018177:	85 c0                	test   eax,eax
c0018179:	74 0d                	je     c0018188 <HalDetectFeatures()+0xd50>
c001817b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018180:	83 c8 80             	or     eax,0xffffff80
c0018183:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018188:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001818d:	83 e0 10             	and    eax,0x10
c0018190:	0f b6 c0             	movzx  eax,al
c0018193:	85 c0                	test   eax,eax
c0018195:	74 2f                	je     c00181c6 <HalDetectFeatures()+0xd8e>
c0018197:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001819c:	83 e0 80             	and    eax,0xffffff80
c001819f:	0f b6 c0             	movzx  eax,al
c00181a2:	85 c0                	test   eax,eax
c00181a4:	75 20                	jne    c00181c6 <HalDetectFeatures()+0xd8e>
c00181a6:	e8 95 7e 00 00       	call   c0020040 <sseDetect>
c00181ab:	83 e0 01             	and    eax,0x1
c00181ae:	89 c1                	mov    ecx,eax
c00181b0:	c1 e1 07             	shl    ecx,0x7
c00181b3:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00181b8:	83 e0 7f             	and    eax,0x7f
c00181bb:	88 c2                	mov    dl,al
c00181bd:	88 c8                	mov    al,cl
c00181bf:	09 d0                	or     eax,edx
c00181c1:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00181c6:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00181cb:	83 e0 80             	and    eax,0xffffff80
c00181ce:	0f b6 c0             	movzx  eax,al
c00181d1:	85 c0                	test   eax,eax
c00181d3:	74 1c                	je     c00181f1 <HalDetectFeatures()+0xdb9>
c00181d5:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00181da:	83 e0 20             	and    eax,0x20
c00181dd:	0f b6 c0             	movzx  eax,al
c00181e0:	85 c0                	test   eax,eax
c00181e2:	75 0d                	jne    c00181f1 <HalDetectFeatures()+0xdb9>
c00181e4:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00181e9:	83 e0 df             	and    eax,0xffffffdf
c00181ec:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00181f1:	c6 05 88 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d788,0x0
c00181f8:	90                   	nop
c00181f9:	81 c4 90 00 00 00    	add    esp,0x90
c00181ff:	5b                   	pop    ebx
c0018200:	5e                   	pop    esi
c0018201:	5f                   	pop    edi
c0018202:	c3                   	ret    

c0018203 <HalEnableNMI()>:
c0018203:	c6 05 6c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d76c,0x1
c001820a:	6a 10                	push   0x10
c001820c:	e8 22 ef ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0018211:	83 c4 04             	add    esp,0x4
c0018214:	90                   	nop
c0018215:	c3                   	ret    

c0018216 <HalDisableNMI()>:
c0018216:	c6 05 6c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d76c,0x0
c001821d:	6a 10                	push   0x10
c001821f:	e8 0f ef ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0018224:	83 c4 04             	add    esp,0x4
c0018227:	90                   	nop
c0018228:	c3                   	ret    

c0018229 <HalGetNMIState()>:
c0018229:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c001822e:	c3                   	ret    

c001822f <x86rdmsr(unsigned int)>:
c001822f:	83 ec 1c             	sub    esp,0x1c
c0018232:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018237:	83 e0 08             	and    eax,0x8
c001823a:	0f b6 c0             	movzx  eax,al
c001823d:	85 c0                	test   eax,eax
c001823f:	75 10                	jne    c0018251 <x86rdmsr(unsigned int)+0x22>
c0018241:	83 ec 0c             	sub    esp,0xc
c0018244:	68 c7 3b 02 c0       	push   0xc0023bc7
c0018249:	e8 24 6c ff ff       	call   c000ee72 <KePanic(char const*)>
c001824e:	83 c4 10             	add    esp,0x10
c0018251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018255:	89 c1                	mov    ecx,eax
c0018257:	0f 32                	rdmsr  
c0018259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001825d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018261:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018265:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018269:	83 c4 1c             	add    esp,0x1c
c001826c:	c3                   	ret    

c001826d <x86wrmsr(unsigned int, unsigned long long)>:
c001826d:	83 ec 1c             	sub    esp,0x1c
c0018270:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018274:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018278:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001827c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018280:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018285:	83 e0 08             	and    eax,0x8
c0018288:	0f b6 c0             	movzx  eax,al
c001828b:	85 c0                	test   eax,eax
c001828d:	75 10                	jne    c001829f <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001828f:	83 ec 0c             	sub    esp,0xc
c0018292:	68 cd 3b 02 c0       	push   0xc0023bcd
c0018297:	e8 d6 6b ff ff       	call   c000ee72 <KePanic(char const*)>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00182a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00182ab:	0f 30                	wrmsr  
c00182ad:	90                   	nop
c00182ae:	83 c4 1c             	add    esp,0x1c
c00182b1:	c3                   	ret    

c00182b2 <HalHandleGeneralProtectionFault(void*, void*)>:
c00182b2:	83 ec 0c             	sub    esp,0xc
c00182b5:	83 ec 0c             	sub    esp,0xc
c00182b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182bc:	e8 48 e7 ff ff       	call   c0016a09 <Vm::faultHandler(regs*)>
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	83 c4 0c             	add    esp,0xc
c00182c7:	c3                   	ret    

c00182c8 <HalFindRSDP()>:
c00182c8:	83 ec 1c             	sub    esp,0x1c
c00182cb:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c00182d0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00182d5:	7e 0c                	jle    c00182e3 <HalFindRSDP()+0x1b>
c00182d7:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00182dc:	25 00 04 00 00       	and    eax,0x400
c00182e1:	74 0d                	je     c00182f0 <HalFindRSDP()+0x28>
c00182e3:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00182e8:	83 e0 fb             	and    eax,0xfffffffb
c00182eb:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00182f0:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00182f5:	83 e0 04             	and    eax,0x4
c00182f8:	0f b6 c0             	movzx  eax,al
c00182fb:	85 c0                	test   eax,eax
c00182fd:	75 07                	jne    c0018306 <HalFindRSDP()+0x3e>
c00182ff:	b8 00 00 00 00       	mov    eax,0x0
c0018304:	eb 53                	jmp    c0018359 <HalFindRSDP()+0x91>
c0018306:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001830e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0018316:	77 2f                	ja     c0018347 <HalFindRSDP()+0x7f>
c0018318:	83 ec 04             	sub    esp,0x4
c001831b:	6a 08                	push   0x8
c001831d:	68 d3 3b 02 c0       	push   0xc0023bd3
c0018322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018326:	e8 55 80 fe ff       	call   c0000380 <memcmp>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	85 c0                	test   eax,eax
c0018330:	0f 94 c0             	sete   al
c0018333:	0f b6 c0             	movzx  eax,al
c0018336:	85 c0                	test   eax,eax
c0018338:	74 06                	je     c0018340 <HalFindRSDP()+0x78>
c001833a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001833e:	eb 19                	jmp    c0018359 <HalFindRSDP()+0x91>
c0018340:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0018345:	eb c7                	jmp    c001830e <HalFindRSDP()+0x46>
c0018347:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001834c:	83 e0 fb             	and    eax,0xfffffffb
c001834f:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018354:	b8 00 00 00 00       	mov    eax,0x0
c0018359:	83 c4 1c             	add    esp,0x1c
c001835c:	c3                   	ret    

c001835d <HalHandlePageFault(void*, void*)>:
c001835d:	83 ec 1c             	sub    esp,0x1c
c0018360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018364:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018367:	83 ec 08             	sub    esp,0x8
c001836a:	50                   	push   eax
c001836b:	68 18 3e 02 c0       	push   0xc0023e18
c0018370:	e8 ef eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018375:	83 c4 10             	add    esp,0x10
c0018378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001837c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001837f:	83 ec 08             	sub    esp,0x8
c0018382:	50                   	push   eax
c0018383:	68 dc 3b 02 c0       	push   0xc0023bdc
c0018388:	e8 d7 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001838d:	83 c4 10             	add    esp,0x10
c0018390:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018395:	8b 00                	mov    eax,DWORD PTR [eax]
c0018397:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001839a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00183a0:	0f 20 d2             	mov    edx,cr2
c00183a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00183a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183ab:	83 ec 08             	sub    esp,0x8
c00183ae:	52                   	push   edx
c00183af:	50                   	push   eax
c00183b0:	e8 7d ac ff ff       	call   c0013032 <VAS::tryLoadBackOffDisk(unsigned long)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00183c3:	83 ec 08             	sub    esp,0x8
c00183c6:	50                   	push   eax
c00183c7:	68 f1 3b 02 c0       	push   0xc0023bf1
c00183cc:	e8 93 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00183d1:	83 c4 10             	add    esp,0x10
c00183d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183db:	83 ec 08             	sub    esp,0x8
c00183de:	50                   	push   eax
c00183df:	68 0b 3c 02 c0       	push   0xc0023c0b
c00183e4:	e8 7b eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00183e9:	83 c4 10             	add    esp,0x10
c00183ec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00183f1:	83 ec 08             	sub    esp,0x8
c00183f4:	50                   	push   eax
c00183f5:	68 20 3c 02 c0       	push   0xc0023c20
c00183fa:	e8 65 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00183ff:	83 c4 10             	add    esp,0x10
c0018402:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018406:	83 c4 1c             	add    esp,0x1c
c0018409:	c3                   	ret    

c001840a <HalHandleOpcodeFault(void*, void*)>:
c001840a:	83 ec 1c             	sub    esp,0x1c
c001840d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018411:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018415:	a0 88 d7 02 c0       	mov    al,ds:0xc002d788
c001841a:	0f b6 c0             	movzx  eax,al
c001841d:	85 c0                	test   eax,eax
c001841f:	74 25                	je     c0018446 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0018421:	83 ec 0c             	sub    esp,0xc
c0018424:	68 4c 3e 02 c0       	push   0xc0023e4c
c0018429:	e8 36 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018435:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018438:	8d 50 19             	lea    edx,[eax+0x19]
c001843b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001843f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018442:	b0 01                	mov    al,0x1
c0018444:	eb 02                	jmp    c0018448 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0018446:	b0 00                	mov    al,0x0
c0018448:	83 c4 1c             	add    esp,0x1c
c001844b:	c3                   	ret    

c001844c <HalDisplayDebugInfo(void*)>:
c001844c:	83 ec 2c             	sub    esp,0x2c
c001844f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018457:	0f 20 c0             	mov    eax,cr0
c001845a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001845e:	0f 20 d0             	mov    eax,cr2
c0018461:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018465:	0f 20 d8             	mov    eax,cr3
c0018468:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001846c:	0f 20 e0             	mov    eax,cr4
c001846f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018477:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001847a:	83 ec 08             	sub    esp,0x8
c001847d:	50                   	push   eax
c001847e:	68 3b 3c 02 c0       	push   0xc0023c3b
c0018483:	e8 dc ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018488:	83 c4 10             	add    esp,0x10
c001848b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001848f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018492:	83 ec 08             	sub    esp,0x8
c0018495:	50                   	push   eax
c0018496:	68 2c 3c 02 c0       	push   0xc0023c2c
c001849b:	e8 c4 ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184a7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00184aa:	83 ec 08             	sub    esp,0x8
c00184ad:	50                   	push   eax
c00184ae:	68 37 3c 02 c0       	push   0xc0023c37
c00184b3:	e8 ac ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00184c2:	83 ec 08             	sub    esp,0x8
c00184c5:	50                   	push   eax
c00184c6:	68 46 3c 02 c0       	push   0xc0023c46
c00184cb:	e8 94 ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00184d0:	83 c4 10             	add    esp,0x10
c00184d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184d7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00184da:	83 ec 08             	sub    esp,0x8
c00184dd:	50                   	push   eax
c00184de:	68 51 3c 02 c0       	push   0xc0023c51
c00184e3:	e8 7c ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00184e8:	83 c4 10             	add    esp,0x10
c00184eb:	83 ec 08             	sub    esp,0x8
c00184ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184f2:	68 5c 3c 02 c0       	push   0xc0023c5c
c00184f7:	e8 68 ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00184fc:	83 c4 10             	add    esp,0x10
c00184ff:	83 ec 08             	sub    esp,0x8
c0018502:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018506:	68 67 3c 02 c0       	push   0xc0023c67
c001850b:	e8 54 ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018517:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001851a:	c1 e0 05             	shl    eax,0x5
c001851d:	8d 90 60 51 02 c0    	lea    edx,[eax-0x3ffdaea0]
c0018523:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018527:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001852a:	83 ec 04             	sub    esp,0x4
c001852d:	52                   	push   edx
c001852e:	50                   	push   eax
c001852f:	68 72 3c 02 c0       	push   0xc0023c72
c0018534:	e8 2b ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018541:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018547:	83 ec 0c             	sub    esp,0xc
c001854a:	50                   	push   eax
c001854b:	e8 8f 8d ff ff       	call   c00112df <setActiveTerminal(VgaText*)>
c0018550:	83 c4 10             	add    esp,0x10
c0018553:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018558:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001855e:	83 ec 08             	sub    esp,0x8
c0018561:	68 81 3c 02 c0       	push   0xc0023c81
c0018566:	50                   	push   eax
c0018567:	e8 c0 90 ff ff       	call   c001162c <VgaText::puts(char const*)>
c001856c:	83 c4 10             	add    esp,0x10
c001856f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018574:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001857a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001857e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018581:	83 ec 08             	sub    esp,0x8
c0018584:	52                   	push   edx
c0018585:	50                   	push   eax
c0018586:	e8 5b 90 ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c001858b:	83 c4 10             	add    esp,0x10
c001858e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018593:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018599:	83 ec 08             	sub    esp,0x8
c001859c:	68 8f 3c 02 c0       	push   0xc0023c8f
c00185a1:	50                   	push   eax
c00185a2:	e8 85 90 ff ff       	call   c001162c <VgaText::puts(char const*)>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00185af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00185b5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00185ba:	8b 12                	mov    edx,DWORD PTR [edx]
c00185bc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00185bf:	83 c2 0c             	add    edx,0xc
c00185c2:	83 ec 08             	sub    esp,0x8
c00185c5:	52                   	push   edx
c00185c6:	50                   	push   eax
c00185c7:	e8 60 90 ff ff       	call   c001162c <VgaText::puts(char const*)>
c00185cc:	83 c4 10             	add    esp,0x10
c00185cf:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00185d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00185da:	83 ec 08             	sub    esp,0x8
c00185dd:	68 98 3c 02 c0       	push   0xc0023c98
c00185e2:	50                   	push   eax
c00185e3:	e8 44 90 ff ff       	call   c001162c <VgaText::puts(char const*)>
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00185f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00185f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185fa:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00185fd:	83 ec 08             	sub    esp,0x8
c0018600:	52                   	push   edx
c0018601:	50                   	push   eax
c0018602:	e8 df 8f ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c0018607:	83 c4 10             	add    esp,0x10
c001860a:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001860f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018615:	83 ec 08             	sub    esp,0x8
c0018618:	68 a0 3c 02 c0       	push   0xc0023ca0
c001861d:	50                   	push   eax
c001861e:	e8 09 90 ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018623:	83 c4 10             	add    esp,0x10
c0018626:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001862b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018631:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018635:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018638:	83 ec 08             	sub    esp,0x8
c001863b:	52                   	push   edx
c001863c:	50                   	push   eax
c001863d:	e8 a4 8f ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c0018642:	83 c4 10             	add    esp,0x10
c0018645:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001864a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018650:	83 ec 08             	sub    esp,0x8
c0018653:	68 a8 3c 02 c0       	push   0xc0023ca8
c0018658:	50                   	push   eax
c0018659:	e8 ce 8f ff ff       	call   c001162c <VgaText::puts(char const*)>
c001865e:	83 c4 10             	add    esp,0x10
c0018661:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018666:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001866c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018670:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018673:	83 ec 08             	sub    esp,0x8
c0018676:	52                   	push   edx
c0018677:	50                   	push   eax
c0018678:	e8 69 8f ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c001867d:	83 c4 10             	add    esp,0x10
c0018680:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018685:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001868b:	83 ec 08             	sub    esp,0x8
c001868e:	68 b0 3c 02 c0       	push   0xc0023cb0
c0018693:	50                   	push   eax
c0018694:	e8 93 8f ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00186a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186ab:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00186ae:	83 ec 08             	sub    esp,0x8
c00186b1:	52                   	push   edx
c00186b2:	50                   	push   eax
c00186b3:	e8 2e 8f ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00186c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186c6:	83 ec 08             	sub    esp,0x8
c00186c9:	68 b8 3c 02 c0       	push   0xc0023cb8
c00186ce:	50                   	push   eax
c00186cf:	e8 58 8f ff ff       	call   c001162c <VgaText::puts(char const*)>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00186dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186e6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00186e9:	83 ec 08             	sub    esp,0x8
c00186ec:	52                   	push   edx
c00186ed:	50                   	push   eax
c00186ee:	e8 f3 8e ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c00186f3:	83 c4 10             	add    esp,0x10
c00186f6:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00186fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018701:	83 ec 08             	sub    esp,0x8
c0018704:	68 c0 3c 02 c0       	push   0xc0023cc0
c0018709:	50                   	push   eax
c001870a:	e8 1d 8f ff ff       	call   c001162c <VgaText::puts(char const*)>
c001870f:	83 c4 10             	add    esp,0x10
c0018712:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018717:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001871d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018721:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018724:	83 ec 08             	sub    esp,0x8
c0018727:	52                   	push   edx
c0018728:	50                   	push   eax
c0018729:	e8 b8 8e ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c001872e:	83 c4 10             	add    esp,0x10
c0018731:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018736:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001873c:	83 ec 08             	sub    esp,0x8
c001873f:	68 c8 3c 02 c0       	push   0xc0023cc8
c0018744:	50                   	push   eax
c0018745:	e8 e2 8e ff ff       	call   c001162c <VgaText::puts(char const*)>
c001874a:	83 c4 10             	add    esp,0x10
c001874d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018752:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018758:	83 ec 08             	sub    esp,0x8
c001875b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001875f:	50                   	push   eax
c0018760:	e8 81 8e ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001876d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018773:	83 ec 08             	sub    esp,0x8
c0018776:	68 d1 3c 02 c0       	push   0xc0023cd1
c001877b:	50                   	push   eax
c001877c:	e8 ab 8e ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018789:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001878f:	83 ec 08             	sub    esp,0x8
c0018792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018796:	50                   	push   eax
c0018797:	e8 4a 8e ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00187a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00187aa:	83 ec 08             	sub    esp,0x8
c00187ad:	68 d9 3c 02 c0       	push   0xc0023cd9
c00187b2:	50                   	push   eax
c00187b3:	e8 74 8e ff ff       	call   c001162c <VgaText::puts(char const*)>
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00187c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00187c6:	83 ec 08             	sub    esp,0x8
c00187c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187cd:	50                   	push   eax
c00187ce:	e8 13 8e ff ff       	call   c00115e6 <VgaText::putx(unsigned int)>
c00187d3:	83 c4 10             	add    esp,0x10
c00187d6:	fa                   	cli    
c00187d7:	f4                   	hlt    
c00187d8:	eb fe                	jmp    c00187d8 <HalDisplayDebugInfo(void*)+0x38c>

c00187da <HalReceivedNMI()>:
c00187da:	83 ec 1c             	sub    esp,0x1c
c00187dd:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c00187e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e8:	89 c2                	mov    edx,eax
c00187ea:	ec                   	in     al,dx
c00187eb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00187ef:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00187f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00187f7:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00187fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018802:	89 c2                	mov    edx,eax
c0018804:	ec                   	in     al,dx
c0018805:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018809:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001880d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018811:	83 ec 0c             	sub    esp,0xc
c0018814:	68 e1 3c 02 c0       	push   0xc0023ce1
c0018819:	e8 46 e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001881e:	83 c4 10             	add    esp,0x10
c0018821:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018826:	83 e0 10             	and    eax,0x10
c0018829:	74 10                	je     c001883b <HalReceivedNMI()+0x61>
c001882b:	83 ec 0c             	sub    esp,0xc
c001882e:	68 f2 3c 02 c0       	push   0xc0023cf2
c0018833:	e8 3a 66 ff ff       	call   c000ee72 <KePanic(char const*)>
c0018838:	83 c4 10             	add    esp,0x10
c001883b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0018840:	83 e0 40             	and    eax,0x40
c0018843:	74 10                	je     c0018855 <HalReceivedNMI()+0x7b>
c0018845:	83 ec 0c             	sub    esp,0xc
c0018848:	68 ff 3c 02 c0       	push   0xc0023cff
c001884d:	e8 20 66 ff ff       	call   c000ee72 <KePanic(char const*)>
c0018852:	83 c4 10             	add    esp,0x10
c0018855:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018859:	0f be c0             	movsx  eax,al
c001885c:	85 c0                	test   eax,eax
c001885e:	79 10                	jns    c0018870 <HalReceivedNMI()+0x96>
c0018860:	83 ec 0c             	sub    esp,0xc
c0018863:	68 09 3d 02 c0       	push   0xc0023d09
c0018868:	e8 05 66 ff ff       	call   c000ee72 <KePanic(char const*)>
c001886d:	83 c4 10             	add    esp,0x10
c0018870:	90                   	nop
c0018871:	83 c4 1c             	add    esp,0x1c
c0018874:	c3                   	ret    

c0018875 <HalSystemIdle()>:
c0018875:	56                   	push   esi
c0018876:	53                   	push   ebx
c0018877:	83 ec 14             	sub    esp,0x14
c001887a:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c001887f:	83 e0 10             	and    eax,0x10
c0018882:	0f b6 c0             	movzx  eax,al
c0018885:	85 c0                	test   eax,eax
c0018887:	74 43                	je     c00188cc <HalSystemIdle()+0x57>
c0018889:	83 ec 0c             	sub    esp,0xc
c001888c:	68 e1 00 00 00       	push   0xe1
c0018891:	e8 99 f9 ff ff       	call   c001822f <x86rdmsr(unsigned int)>
c0018896:	83 c4 10             	add    esp,0x10
c0018899:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001889d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00188a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188a5:	83 e0 02             	and    eax,0x2
c00188a8:	89 c3                	mov    ebx,eax
c00188aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188ae:	83 e0 00             	and    eax,0x0
c00188b1:	89 c6                	mov    esi,eax
c00188b3:	83 ec 04             	sub    esp,0x4
c00188b6:	56                   	push   esi
c00188b7:	53                   	push   ebx
c00188b8:	68 e1 00 00 00       	push   0xe1
c00188bd:	e8 ab f9 ff ff       	call   c001826d <x86wrmsr(unsigned int, unsigned long long)>
c00188c2:	83 c4 10             	add    esp,0x10
c00188c5:	e8 ca 78 fe ff       	call   c0000194 <doTPAUSE>
c00188ca:	eb 01                	jmp    c00188cd <HalSystemIdle()+0x58>
c00188cc:	f4                   	hlt    
c00188cd:	90                   	nop
c00188ce:	83 c4 14             	add    esp,0x14
c00188d1:	5b                   	pop    ebx
c00188d2:	5e                   	pop    esi
c00188d3:	c3                   	ret    

c00188d4 <i386SaveCoprocessor(void*)>:
c00188d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188d8:	83 c0 3f             	add    eax,0x3f
c00188db:	83 e0 c0             	and    eax,0xffffffc0
c00188de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188e2:	ff 25 50 d7 02 c0    	jmp    DWORD PTR ds:0xc002d750

c00188e8 <i386LoadCoprocessor(void*)>:
c00188e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188ec:	83 c0 3f             	add    eax,0x3f
c00188ef:	83 e0 c0             	and    eax,0xffffffc0
c00188f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188f6:	ff 25 4c d7 02 c0    	jmp    DWORD PTR ds:0xc002d74c

c00188fc <x87EmulHandler(regs*, void*)>:
c00188fc:	53                   	push   ebx
c00188fd:	83 ec 08             	sub    esp,0x8
c0018900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018905:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018909:	74 10                	je     c001891b <x87EmulHandler(regs*, void*)+0x1f>
c001890b:	83 ec 0c             	sub    esp,0xc
c001890e:	68 16 3d 02 c0       	push   0xc0023d16
c0018913:	e8 5a 65 ff ff       	call   c000ee72 <KePanic(char const*)>
c0018918:	83 c4 10             	add    esp,0x10
c001891b:	0f 20 c0             	mov    eax,cr0
c001891e:	a8 08                	test   al,0x8
c0018920:	74 59                	je     c001897b <x87EmulHandler(regs*, void*)+0x7f>
c0018922:	0f 06                	clts   
c0018924:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0018929:	85 c0                	test   eax,eax
c001892b:	74 0e                	je     c001893b <x87EmulHandler(regs*, void*)+0x3f>
c001892d:	83 ec 0c             	sub    esp,0xc
c0018930:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018933:	e8 9c ff ff ff       	call   c00188d4 <i386SaveCoprocessor(void*)>
c0018938:	83 c4 10             	add    esp,0x10
c001893b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018941:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018945:	75 12                	jne    c0018959 <x87EmulHandler(regs*, void*)+0x5d>
c0018947:	83 ec 0c             	sub    esp,0xc
c001894a:	68 40 02 00 00       	push   0x240
c001894f:	e8 d7 61 ff ff       	call   c000eb2b <malloc>
c0018954:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018957:	eb 10                	jmp    c0018969 <x87EmulHandler(regs*, void*)+0x6d>
c0018959:	83 ec 0c             	sub    esp,0xc
c001895c:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0018961:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018964:	e8 7f ff ff ff       	call   c00188e8 <i386LoadCoprocessor(void*)>
c0018969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001896e:	83 c4 10             	add    esp,0x10
c0018971:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c0018976:	83 c4 08             	add    esp,0x8
c0018979:	5b                   	pop    ebx
c001897a:	c3                   	ret    
c001897b:	83 ec 0c             	sub    esp,0xc
c001897e:	68 2a 3d 02 c0       	push   0xc0023d2a
c0018983:	e8 dc e5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018988:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018990:	83 c4 18             	add    esp,0x18
c0018993:	5b                   	pop    ebx
c0018994:	e9 b7 d9 ff ff       	jmp    c0016350 <Thr::terminateFromIRQ(int)>

c0018999 <HalInitialiseCoprocessor()>:
c0018999:	83 ec 10             	sub    esp,0x10
c001899c:	c7 05 48 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d748,0x0
c00189a6:	6a 00                	push   0x0
c00189a8:	68 fc 88 01 c0       	push   0xc00188fc
c00189ad:	6a 07                	push   0x7
c00189af:	e8 9d 06 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00189b4:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	a8 80                	test   al,0x80
c00189be:	74 1c                	je     c00189dc <HalInitialiseCoprocessor()+0x43>
c00189c0:	c7 05 50 d7 02 c0 58 00 02 c0 	mov    DWORD PTR ds:0xc002d750,0xc0020058
c00189ca:	c7 05 4c d7 02 c0 60 00 02 c0 	mov    DWORD PTR ds:0xc002d74c,0xc0020060
c00189d4:	83 c4 0c             	add    esp,0xc
c00189d7:	e9 8c 76 00 00       	jmp    c0020068 <sseInit>
c00189dc:	a8 10                	test   al,0x10
c00189de:	74 1c                	je     c00189fc <HalInitialiseCoprocessor()+0x63>
c00189e0:	c7 05 50 d7 02 c0 a7 00 02 c0 	mov    DWORD PTR ds:0xc002d750,0xc00200a7
c00189ea:	c7 05 4c d7 02 c0 ae 00 02 c0 	mov    DWORD PTR ds:0xc002d74c,0xc00200ae
c00189f4:	83 c4 0c             	add    esp,0xc
c00189f7:	e9 b9 76 00 00       	jmp    c00200b5 <x87Init>
c00189fc:	c7 05 50 d7 02 c0 2e 71 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001712e
c0018a06:	c7 05 4c d7 02 c0 2e 71 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001712e
c0018a10:	0f 20 c0             	mov    eax,cr0
c0018a13:	83 c8 04             	or     eax,0x4
c0018a16:	0f 22 c0             	mov    cr0,eax
c0018a19:	83 c4 0c             	add    esp,0xc
c0018a1c:	c3                   	ret    

c0018a1d <HalPanic(char const*)>:
c0018a1d:	53                   	push   ebx
c0018a1e:	83 ec 10             	sub    esp,0x10
c0018a21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018a25:	fa                   	cli    
c0018a26:	53                   	push   ebx
c0018a27:	68 40 3d 02 c0       	push   0xc0023d40
c0018a2c:	e8 33 e5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018a31:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c0018a36:	83 c4 10             	add    esp,0x10
c0018a39:	85 c0                	test   eax,eax
c0018a3b:	74 09                	je     c0018a46 <HalPanic(char const*)+0x29>
c0018a3d:	83 ec 0c             	sub    esp,0xc
c0018a40:	53                   	push   ebx
c0018a41:	ff d0                	call   eax
c0018a43:	83 c4 10             	add    esp,0x10
c0018a46:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0018a4b:	85 c0                	test   eax,eax
c0018a4d:	0f 84 dc 00 00 00    	je     c0018b2f <HalPanic(char const*)+0x112>
c0018a53:	52                   	push   edx
c0018a54:	6a 01                	push   0x1
c0018a56:	6a 0f                	push   0xf
c0018a58:	50                   	push   eax
c0018a59:	e8 c0 86 ff ff       	call   c001111e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a5e:	59                   	pop    ecx
c0018a5f:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a65:	e8 c0 88 ff ff       	call   c001132a <VgaText::clearScreen()>
c0018a6a:	58                   	pop    eax
c0018a6b:	5a                   	pop    edx
c0018a6c:	68 a2 2d 02 c0       	push   0xc0022da2
c0018a71:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a77:	e8 da 86 ff ff       	call   c0011156 <VgaText::setTitle(char*)>
c0018a7c:	83 c4 0c             	add    esp,0xc
c0018a7f:	6a 01                	push   0x1
c0018a81:	6a 0f                	push   0xf
c0018a83:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a89:	e8 90 86 ff ff       	call   c001111e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a8e:	59                   	pop    ecx
c0018a8f:	58                   	pop    eax
c0018a90:	68 59 3d 02 c0       	push   0xc0023d59
c0018a95:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018a9b:	e8 8c 8b ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018aa0:	83 c4 0c             	add    esp,0xc
c0018aa3:	6a 0f                	push   0xf
c0018aa5:	6a 01                	push   0x1
c0018aa7:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018aad:	e8 6c 86 ff ff       	call   c001111e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018ab2:	58                   	pop    eax
c0018ab3:	5a                   	pop    edx
c0018ab4:	68 62 3d 02 c0       	push   0xc0023d62
c0018ab9:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018abf:	e8 68 8b ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018ac4:	83 c4 0c             	add    esp,0xc
c0018ac7:	6a 01                	push   0x1
c0018ac9:	6a 0f                	push   0xf
c0018acb:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018ad1:	e8 48 86 ff ff       	call   c001111e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018ad6:	59                   	pop    ecx
c0018ad7:	58                   	pop    eax
c0018ad8:	68 a6 3d 02 c0       	push   0xc0023da6
c0018add:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018ae3:	e8 44 8b ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018ae8:	58                   	pop    eax
c0018ae9:	5a                   	pop    edx
c0018aea:	68 6f 3d 02 c0       	push   0xc0023d6f
c0018aef:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018af5:	e8 32 8b ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018afa:	59                   	pop    ecx
c0018afb:	58                   	pop    eax
c0018afc:	68 a9 3d 02 c0       	push   0xc0023da9
c0018b01:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018b07:	e8 20 8b ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018b0c:	58                   	pop    eax
c0018b0d:	5a                   	pop    edx
c0018b0e:	53                   	push   ebx
c0018b0f:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018b15:	e8 12 8b ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018b1a:	59                   	pop    ecx
c0018b1b:	5b                   	pop    ebx
c0018b1c:	68 a6 3d 02 c0       	push   0xc0023da6
c0018b21:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018b27:	e8 00 8b ff ff       	call   c001162c <VgaText::puts(char const*)>
c0018b2c:	83 c4 10             	add    esp,0x10
c0018b2f:	eb fe                	jmp    c0018b2f <HalPanic(char const*)+0x112>

c0018b31 <HalQueryPerformanceCounter()>:
c0018b31:	31 c0                	xor    eax,eax
c0018b33:	31 d2                	xor    edx,edx
c0018b35:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018b3c:	75 02                	jne    c0018b40 <HalQueryPerformanceCounter()+0xf>
c0018b3e:	0f 31                	rdtsc  
c0018b40:	c3                   	ret    

c0018b41 <HalInitialise()>:
c0018b41:	53                   	push   ebx
c0018b42:	83 ec 08             	sub    esp,0x8
c0018b45:	c6 05 40 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d740,0x0
c0018b4c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018b51:	83 e0 fe             	and    eax,0xfffffffe
c0018b54:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018b59:	e8 d2 07 00 00       	call   c0019330 <picOpen()>
c0018b5e:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c0018b65:	74 0a                	je     c0018b71 <HalInitialise()+0x30>
c0018b67:	e8 14 07 00 00       	call   c0019280 <picDisable()>
c0018b6c:	e8 bf 6a 00 00       	call   c001f630 <apicOpen()>
c0018b71:	bb 0f 00 00 00       	mov    ebx,0xf
c0018b76:	50                   	push   eax
c0018b77:	6a 00                	push   0x0
c0018b79:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018b7e:	6a 00                	push   0x0
c0018b80:	e8 cc 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b85:	83 c4 0c             	add    esp,0xc
c0018b88:	6a 00                	push   0x0
c0018b8a:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018b8f:	6a 01                	push   0x1
c0018b91:	e8 bb 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018b96:	83 c4 0c             	add    esp,0xc
c0018b99:	6a 00                	push   0x0
c0018b9b:	68 c8 e1 00 c0       	push   0xc000e1c8
c0018ba0:	6a 02                	push   0x2
c0018ba2:	e8 aa 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018ba7:	83 c4 0c             	add    esp,0xc
c0018baa:	6a 00                	push   0x0
c0018bac:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018bb1:	6a 03                	push   0x3
c0018bb3:	e8 99 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018bb8:	83 c4 0c             	add    esp,0xc
c0018bbb:	6a 00                	push   0x0
c0018bbd:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018bc2:	6a 04                	push   0x4
c0018bc4:	e8 88 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018bc9:	83 c4 0c             	add    esp,0xc
c0018bcc:	6a 00                	push   0x0
c0018bce:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018bd3:	6a 05                	push   0x5
c0018bd5:	e8 77 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018bda:	83 c4 0c             	add    esp,0xc
c0018bdd:	6a 00                	push   0x0
c0018bdf:	68 0c e2 00 c0       	push   0xc000e20c
c0018be4:	6a 06                	push   0x6
c0018be6:	e8 66 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018beb:	83 c4 0c             	add    esp,0xc
c0018bee:	6a 00                	push   0x0
c0018bf0:	68 60 e2 00 c0       	push   0xc000e260
c0018bf5:	6a 08                	push   0x8
c0018bf7:	e8 55 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018bfc:	83 c4 0c             	add    esp,0xc
c0018bff:	6a 00                	push   0x0
c0018c01:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018c06:	6a 09                	push   0x9
c0018c08:	e8 44 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018c0d:	83 c4 0c             	add    esp,0xc
c0018c10:	6a 00                	push   0x0
c0018c12:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018c17:	6a 0a                	push   0xa
c0018c19:	e8 33 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018c1e:	83 c4 0c             	add    esp,0xc
c0018c21:	6a 00                	push   0x0
c0018c23:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018c28:	6a 0b                	push   0xb
c0018c2a:	e8 22 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018c2f:	83 c4 0c             	add    esp,0xc
c0018c32:	6a 00                	push   0x0
c0018c34:	68 10 e1 00 c0       	push   0xc000e110
c0018c39:	6a 0d                	push   0xd
c0018c3b:	e8 11 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018c40:	83 c4 0c             	add    esp,0xc
c0018c43:	6a 00                	push   0x0
c0018c45:	68 64 e1 00 c0       	push   0xc000e164
c0018c4a:	6a 0e                	push   0xe
c0018c4c:	e8 00 04 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	50                   	push   eax
c0018c55:	6a 00                	push   0x0
c0018c57:	68 d8 e1 00 c0       	push   0xc000e1d8
c0018c5c:	53                   	push   ebx
c0018c5d:	43                   	inc    ebx
c0018c5e:	e8 ee 03 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	83 fb 1e             	cmp    ebx,0x1e
c0018c69:	75 e9                	jne    c0018c54 <HalInitialise()+0x113>
c0018c6b:	50                   	push   eax
c0018c6c:	6a 00                	push   0x0
c0018c6e:	68 b8 0f 01 c0       	push   0xc0010fb8
c0018c73:	6a 60                	push   0x60
c0018c75:	e8 d7 03 00 00       	call   c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018c7a:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018c7f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018c89:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018c90:	e8 96 5e ff ff       	call   c000eb2b <malloc>
c0018c95:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c98:	89 c3                	mov    ebx,eax
c0018c9a:	e8 ff 0d 00 00       	call   c0019a9e <RTC::RTC()>
c0018c9f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018ca9:	5a                   	pop    edx
c0018caa:	59                   	pop    ecx
c0018cab:	53                   	push   ebx
c0018cac:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0018cb2:	e8 db 03 ff ff       	call   c0009092 <Device::addChild(Device*)>
c0018cb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018cb9:	6a 00                	push   0x0
c0018cbb:	6a 00                	push   0x0
c0018cbd:	6a 00                	push   0x0
c0018cbf:	53                   	push   ebx
c0018cc0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018cc3:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018cc8:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018cce:	83 c4 28             	add    esp,0x28
c0018cd1:	5b                   	pop    ebx
c0018cd2:	c3                   	ret    

c0018cd3 <HalMakeBeep(int)>:
c0018cd3:	53                   	push   ebx
c0018cd4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018cd8:	85 db                	test   ebx,ebx
c0018cda:	75 07                	jne    c0018ce3 <HalMakeBeep(int)+0x10>
c0018cdc:	e4 61                	in     al,0x61
c0018cde:	83 e0 fc             	and    eax,0xfffffffc
c0018ce1:	eb 26                	jmp    c0018d09 <HalMakeBeep(int)+0x36>
c0018ce3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018ce8:	99                   	cdq    
c0018ce9:	f7 fb                	idiv   ebx
c0018ceb:	89 c1                	mov    ecx,eax
c0018ced:	b0 b6                	mov    al,0xb6
c0018cef:	e6 43                	out    0x43,al
c0018cf1:	88 c8                	mov    al,cl
c0018cf3:	e6 42                	out    0x42,al
c0018cf5:	89 c8                	mov    eax,ecx
c0018cf7:	c1 e8 08             	shr    eax,0x8
c0018cfa:	e6 42                	out    0x42,al
c0018cfc:	e4 61                	in     al,0x61
c0018cfe:	89 c2                	mov    edx,eax
c0018d00:	83 ca 03             	or     edx,0x3
c0018d03:	38 d0                	cmp    al,dl
c0018d05:	74 04                	je     c0018d0b <HalMakeBeep(int)+0x38>
c0018d07:	88 d0                	mov    al,dl
c0018d09:	e6 61                	out    0x61,al
c0018d0b:	5b                   	pop    ebx
c0018d0c:	c3                   	ret    

c0018d0d <HalGetRand()>:
c0018d0d:	31 c0                	xor    eax,eax
c0018d0f:	c3                   	ret    

c0018d10 <HalEndOfInterrupt(int)>:
c0018d10:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c0018d17:	74 1d                	je     c0018d36 <HalEndOfInterrupt(int)+0x26>
c0018d19:	83 ec 18             	sub    esp,0x18
c0018d1c:	6a 1b                	push   0x1b
c0018d1e:	e8 0c f5 ff ff       	call   c001822f <x86rdmsr(unsigned int)>
c0018d23:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018d28:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018d32:	83 c4 1c             	add    esp,0x1c
c0018d35:	c3                   	ret    
c0018d36:	e9 79 07 00 00       	jmp    c00194b4 <picEOI(int)>

c0018d3b <HalRestart()>:
c0018d3b:	c3                   	ret    

c0018d3c <HalShutdown()>:
c0018d3c:	c3                   	ret    

c0018d3d <HalSleep()>:
c0018d3d:	c3                   	ret    

c0018d3e <CPU::CPU()>:
c0018d3e:	83 ec 0c             	sub    esp,0xc
c0018d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d45:	83 ec 08             	sub    esp,0x8
c0018d48:	68 1b 3b 02 c0       	push   0xc0023b1b
c0018d4d:	50                   	push   eax
c0018d4e:	e8 a1 04 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0018d53:	83 c4 10             	add    esp,0x10
c0018d56:	ba 78 3e 02 c0       	mov    edx,0xc0023e78
c0018d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d5f:	89 10                	mov    DWORD PTR [eax],edx
c0018d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d65:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d73:	05 64 01 00 00       	add    eax,0x164
c0018d78:	83 ec 0c             	sub    esp,0xc
c0018d7b:	50                   	push   eax
c0018d7c:	e8 33 55 ff ff       	call   c000e2b4 <GDT::GDT()>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d88:	05 68 09 00 00       	add    eax,0x968
c0018d8d:	83 ec 0c             	sub    esp,0xc
c0018d90:	50                   	push   eax
c0018d91:	e8 72 57 ff ff       	call   c000e508 <IDT::IDT()>
c0018d96:	83 c4 10             	add    esp,0x10
c0018d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d9d:	05 68 11 00 00       	add    eax,0x1168
c0018da2:	83 ec 0c             	sub    esp,0xc
c0018da5:	50                   	push   eax
c0018da6:	e8 5d 8d ff ff       	call   c0011b08 <TSS::TSS()>
c0018dab:	83 c4 10             	add    esp,0x10
c0018dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db2:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018dbc:	90                   	nop
c0018dbd:	83 c4 0c             	add    esp,0xc
c0018dc0:	c3                   	ret    
c0018dc1:	90                   	nop

c0018dc2 <CPU::setupSMEP()>:
c0018dc2:	0f 20 e0             	mov    eax,cr4
c0018dc5:	0d 00 00 10 00       	or     eax,0x100000
c0018dca:	0f 22 e0             	mov    cr4,eax
c0018dcd:	c3                   	ret    

c0018dce <CPU::setupUMIP()>:
c0018dce:	0f 20 e0             	mov    eax,cr4
c0018dd1:	80 cc 08             	or     ah,0x8
c0018dd4:	0f 22 e0             	mov    cr4,eax
c0018dd7:	c3                   	ret    

c0018dd8 <CPU::setupTSC()>:
c0018dd8:	0f 20 e0             	mov    eax,cr4
c0018ddb:	83 c8 04             	or     eax,0x4
c0018dde:	0f 22 e0             	mov    cr4,eax
c0018de1:	c3                   	ret    

c0018de2 <CPU::setupLargePages()>:
c0018de2:	0f 20 e0             	mov    eax,cr4
c0018de5:	83 c8 10             	or     eax,0x10
c0018de8:	0f 22 e0             	mov    cr4,eax
c0018deb:	c3                   	ret    

c0018dec <CPU::setupPAT()>:
c0018dec:	f6 05 8c d7 02 c0 08 	test   BYTE PTR ds:0xc002d78c,0x8
c0018df3:	74 28                	je     c0018e1d <CPU::setupPAT()+0x31>
c0018df5:	53                   	push   ebx
c0018df6:	83 ec 14             	sub    esp,0x14
c0018df9:	68 77 02 00 00       	push   0x277
c0018dfe:	e8 2c f4 ff ff       	call   c001822f <x86rdmsr(unsigned int)>
c0018e03:	83 c4 0c             	add    esp,0xc
c0018e06:	83 e2 f8             	and    edx,0xfffffff8
c0018e09:	83 ca 01             	or     edx,0x1
c0018e0c:	52                   	push   edx
c0018e0d:	50                   	push   eax
c0018e0e:	68 77 02 00 00       	push   0x277
c0018e13:	e8 55 f4 ff ff       	call   c001826d <x86wrmsr(unsigned int, unsigned long long)>
c0018e18:	83 c4 18             	add    esp,0x18
c0018e1b:	5b                   	pop    ebx
c0018e1c:	c3                   	ret    
c0018e1d:	c3                   	ret    

c0018e1e <CPU::setupMTRR()>:
c0018e1e:	c3                   	ret    
c0018e1f:	90                   	nop

c0018e20 <CPU::setupGlobalPages()>:
c0018e20:	0f 20 e0             	mov    eax,cr4
c0018e23:	0c 80                	or     al,0x80
c0018e25:	0f 22 e0             	mov    cr4,eax
c0018e28:	c3                   	ret    
c0018e29:	90                   	nop

c0018e2a <CPU::allowUsermodeDataAccess()>:
c0018e2a:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018e31:	74 03                	je     c0018e36 <CPU::allowUsermodeDataAccess()+0xc>
c0018e33:	0f 01 cb             	stac   
c0018e36:	c3                   	ret    
c0018e37:	90                   	nop

c0018e38 <CPU::prohibitUsermodeDataAccess()>:
c0018e38:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018e3f:	74 03                	je     c0018e44 <CPU::prohibitUsermodeDataAccess()+0xc>
c0018e41:	0f 01 ca             	clac   
c0018e44:	c3                   	ret    
c0018e45:	90                   	nop

c0018e46 <CPU::setupSMAP()>:
c0018e46:	0f 20 e0             	mov    eax,cr4
c0018e49:	0d 00 00 20 00       	or     eax,0x200000
c0018e4e:	0f 22 e0             	mov    cr4,eax
c0018e51:	eb e5                	jmp    c0018e38 <CPU::prohibitUsermodeDataAccess()>
c0018e53:	90                   	nop

c0018e54 <CPU::setupFeatures()>:
c0018e54:	53                   	push   ebx
c0018e55:	83 ec 08             	sub    esp,0x8
c0018e58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018e5c:	f6 05 8f d7 02 c0 20 	test   BYTE PTR ds:0xc002d78f,0x20
c0018e63:	74 18                	je     c0018e7d <CPU::setupFeatures()+0x29>
c0018e65:	83 ec 0c             	sub    esp,0xc
c0018e68:	68 b4 3d 02 c0       	push   0xc0023db4
c0018e6d:	e8 f2 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018e72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e75:	e8 54 ff ff ff       	call   c0018dce <CPU::setupUMIP()>
c0018e7a:	83 c4 10             	add    esp,0x10
c0018e7d:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018e84:	74 18                	je     c0018e9e <CPU::setupFeatures()+0x4a>
c0018e86:	83 ec 0c             	sub    esp,0xc
c0018e89:	68 be 3d 02 c0       	push   0xc0023dbe
c0018e8e:	e8 d1 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018e93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e96:	e8 3d ff ff ff       	call   c0018dd8 <CPU::setupTSC()>
c0018e9b:	83 c4 10             	add    esp,0x10
c0018e9e:	f6 05 8e d7 02 c0 20 	test   BYTE PTR ds:0xc002d78e,0x20
c0018ea5:	74 18                	je     c0018ebf <CPU::setupFeatures()+0x6b>
c0018ea7:	83 ec 0c             	sub    esp,0xc
c0018eaa:	68 c7 3d 02 c0       	push   0xc0023dc7
c0018eaf:	e8 b0 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018eb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018eb7:	e8 26 ff ff ff       	call   c0018de2 <CPU::setupLargePages()>
c0018ebc:	83 c4 10             	add    esp,0x10
c0018ebf:	f6 05 8e d7 02 c0 40 	test   BYTE PTR ds:0xc002d78e,0x40
c0018ec6:	74 18                	je     c0018ee0 <CPU::setupFeatures()+0x8c>
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	68 d0 3d 02 c0       	push   0xc0023dd0
c0018ed0:	e8 8f e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ed5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ed8:	e8 43 ff ff ff       	call   c0018e20 <CPU::setupGlobalPages()>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	f6 05 8e d7 02 c0 80 	test   BYTE PTR ds:0xc002d78e,0x80
c0018ee7:	74 18                	je     c0018f01 <CPU::setupFeatures()+0xad>
c0018ee9:	83 ec 0c             	sub    esp,0xc
c0018eec:	68 e2 3d 02 c0       	push   0xc0023de2
c0018ef1:	e8 6e e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ef6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ef9:	e8 ee fe ff ff       	call   c0018dec <CPU::setupPAT()>
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	f6 05 90 d7 02 c0 04 	test   BYTE PTR ds:0xc002d790,0x4
c0018f08:	74 11                	je     c0018f1b <CPU::setupFeatures()+0xc7>
c0018f0a:	c7 44 24 10 eb 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023deb
c0018f12:	83 c4 08             	add    esp,0x8
c0018f15:	5b                   	pop    ebx
c0018f16:	e9 49 e0 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0018f1b:	83 c4 08             	add    esp,0x8
c0018f1e:	5b                   	pop    ebx
c0018f1f:	c3                   	ret    

c0018f20 <CPU::open(int, int, void*)>:
c0018f20:	55                   	push   ebp
c0018f21:	57                   	push   edi
c0018f22:	56                   	push   esi
c0018f23:	53                   	push   ebx
c0018f24:	83 ec 18             	sub    esp,0x18
c0018f27:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018f2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018f2f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018f33:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018f39:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018f3f:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018f45:	50                   	push   eax
c0018f46:	e8 cb 53 ff ff       	call   c000e316 <GDT::setup()>
c0018f4b:	83 c4 0c             	add    esp,0xc
c0018f4e:	6a 00                	push   0x0
c0018f50:	68 ef be ad de       	push   0xdeadbeef
c0018f55:	55                   	push   ebp
c0018f56:	e8 f1 8b ff ff       	call   c0011b4c <TSS::setup(unsigned long, unsigned long)>
c0018f5b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018f5e:	e8 c9 8b ff ff       	call   c0011b2c <TSS::flush()>
c0018f63:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018f69:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f6c:	e8 0d 56 ff ff       	call   c000e57e <IDT::setup()>
c0018f71:	b8 00 04 00 00       	mov    eax,0x400
c0018f76:	0f 23 f8             	mov    dr7,eax
c0018f79:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018f83:	e8 de 60 ff ff       	call   c000f066 <Phys::allocatePage()>
c0018f88:	83 c4 10             	add    esp,0x10
c0018f8b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018f91:	85 f6                	test   esi,esi
c0018f93:	89 38                	mov    DWORD PTR [eax],edi
c0018f95:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f9b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018f9e:	74 10                	je     c0018fb0 <CPU::open(int, int, void*)+0x90>
c0018fa0:	50                   	push   eax
c0018fa1:	50                   	push   eax
c0018fa2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018fa8:	56                   	push   esi
c0018fa9:	e8 58 95 ff ff       	call   c0012506 <VAS::setCPUSpecific(unsigned long)>
c0018fae:	eb 0d                	jmp    c0018fbd <CPU::open(int, int, void*)+0x9d>
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	68 f5 3d 02 c0       	push   0xc0023df5
c0018fb8:	e8 b5 5e ff ff       	call   c000ee72 <KePanic(char const*)>
c0018fbd:	83 c4 10             	add    esp,0x10
c0018fc0:	83 ec 0c             	sub    esp,0xc
c0018fc3:	68 03 3e 02 c0       	push   0xc0023e03
c0018fc8:	e8 13 38 ff ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c0018fcd:	e8 6f fb ff ff       	call   c0018b41 <HalInitialise()>
c0018fd2:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0018fd7:	83 e0 10             	and    eax,0x10
c0018fda:	83 f8 01             	cmp    eax,0x1
c0018fdd:	19 c0                	sbb    eax,eax
c0018fdf:	83 e0 46             	and    eax,0x46
c0018fe2:	83 c0 1e             	add    eax,0x1e
c0018fe5:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fe8:	e8 40 17 ff ff       	call   c000a72d <setupTimer(int)>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018ff6:	f6 05 90 cd 02 c0 20 	test   BYTE PTR ds:0xc002cd90,0x20
c0018ffd:	74 0c                	je     c001900b <CPU::open(int, int, void*)+0xeb>
c0018fff:	83 ec 0c             	sub    esp,0xc
c0019002:	53                   	push   ebx
c0019003:	e8 4c fe ff ff       	call   c0018e54 <CPU::setupFeatures()>
c0019008:	83 c4 10             	add    esp,0x10
c001900b:	83 c4 0c             	add    esp,0xc
c001900e:	31 c0                	xor    eax,eax
c0019010:	5b                   	pop    ebx
c0019011:	5e                   	pop    esi
c0019012:	5f                   	pop    edi
c0019013:	5d                   	pop    ebp
c0019014:	c3                   	ret    

c0019015 <convertLegacyIRQNumber(int)>:
c0019015:	83 ec 0c             	sub    esp,0xc
c0019018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001901c:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0019023:	74 0c                	je     c0019031 <convertLegacyIRQNumber(int)+0x1c>
c0019025:	83 f8 0f             	cmp    eax,0xf
c0019028:	7f 0b                	jg     c0019035 <convertLegacyIRQNumber(int)+0x20>
c001902a:	0f b6 80 e8 49 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb618]
c0019031:	83 c4 0c             	add    esp,0xc
c0019034:	c3                   	ret    
c0019035:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019039:	83 ec 0c             	sub    esp,0xc
c001903c:	68 9c 3e 02 c0       	push   0xc0023e9c
c0019041:	e8 2c 5e ff ff       	call   c000ee72 <KePanic(char const*)>
c0019046:	83 c4 10             	add    esp,0x10
c0019049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001904d:	83 c4 0c             	add    esp,0xc
c0019050:	c3                   	ret    

c0019051 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0019051:	56                   	push   esi
c0019052:	31 c0                	xor    eax,eax
c0019054:	53                   	push   ebx
c0019055:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001905d:	89 ca                	mov    edx,ecx
c001905f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019063:	c1 e2 04             	shl    edx,0x4
c0019066:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c001906e:	74 17                	je     c0019087 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0019070:	83 c0 01             	add    eax,0x1
c0019073:	83 f8 04             	cmp    eax,0x4
c0019076:	75 ee                	jne    c0019066 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0019078:	c7 44 24 0c fd 3e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023efd
c0019080:	5b                   	pop    ebx
c0019081:	5e                   	pop    esi
c0019082:	e9 eb 5d ff ff       	jmp    c000ee72 <KePanic(char const*)>
c0019087:	8d 04 88             	lea    eax,[eax+ecx*4]
c001908a:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c0019091:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c0019098:	5b                   	pop    ebx
c0019099:	5e                   	pop    esi
c001909a:	c3                   	ret    

c001909b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001909b:	57                   	push   edi
c001909c:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c00190a3:	56                   	push   esi
c00190a4:	53                   	push   ebx
c00190a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00190a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00190ad:	74 54                	je     c0019103 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c00190af:	89 c7                	mov    edi,eax
c00190b1:	84 c0                	test   al,al
c00190b3:	74 1d                	je     c00190d2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c00190b5:	83 fe 0f             	cmp    esi,0xf
c00190b8:	0f 8f d5 00 00 00    	jg     c0019193 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c00190be:	0f b6 b6 e8 49 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdb618]
c00190c5:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c00190cd:	d1 ef                	shr    edi,1
c00190cf:	83 e7 01             	and    edi,0x1
c00190d2:	83 ec 08             	sub    esp,0x8
c00190d5:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c00190da:	31 db                	xor    ebx,ebx
c00190dc:	50                   	push   eax
c00190dd:	68 0a 3f 02 c0       	push   0xc0023f0a
c00190e2:	e8 7d de fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00190e7:	83 c4 10             	add    esp,0x10
c00190ea:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c00190ef:	85 c0                	test   eax,eax
c00190f1:	7f 55                	jg     c0019148 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c00190f3:	83 ec 0c             	sub    esp,0xc
c00190f6:	68 21 3f 02 c0       	push   0xc0023f21
c00190fb:	e8 72 5d ff ff       	call   c000ee72 <KePanic(char const*)>
c0019100:	83 c4 10             	add    esp,0x10
c0019103:	8d 7e 20             	lea    edi,[esi+0x20]
c0019106:	89 f8                	mov    eax,edi
c0019108:	31 d2                	xor    edx,edx
c001910a:	c1 e0 04             	shl    eax,0x4
c001910d:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c0019114:	85 c9                	test   ecx,ecx
c0019116:	0f 84 8e 00 00 00    	je     c00191aa <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001911c:	83 c2 01             	add    edx,0x1
c001911f:	83 fa 04             	cmp    edx,0x4
c0019122:	75 e9                	jne    c001910d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	68 d8 3e 02 c0       	push   0xc0023ed8
c001912c:	e8 41 5d ff ff       	call   c000ee72 <KePanic(char const*)>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019139:	5b                   	pop    ebx
c001913a:	5e                   	pop    esi
c001913b:	5f                   	pop    edi
c001913c:	c3                   	ret    
c001913d:	83 c3 01             	add    ebx,0x1
c0019140:	39 1d e0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e0,ebx
c0019146:	7e ab                	jle    c00190f3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0019148:	83 ec 08             	sub    esp,0x8
c001914b:	8b 04 9d 00 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1f00]
c0019152:	56                   	push   esi
c0019153:	50                   	push   eax
c0019154:	e8 63 66 00 00       	call   c001f7bc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0019159:	83 c4 10             	add    esp,0x10
c001915c:	84 c0                	test   al,al
c001915e:	74 dd                	je     c001913d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0019160:	83 ec 04             	sub    esp,0x4
c0019163:	89 f8                	mov    eax,edi
c0019165:	8b 1c 9d 00 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1f00]
c001916c:	0f b6 f8             	movzx  edi,al
c001916f:	57                   	push   edi
c0019170:	8d 7e 20             	lea    edi,[esi+0x20]
c0019173:	6a 00                	push   0x0
c0019175:	89 f8                	mov    eax,edi
c0019177:	0f b6 c0             	movzx  eax,al
c001917a:	50                   	push   eax
c001917b:	89 f0                	mov    eax,esi
c001917d:	6a 00                	push   0x0
c001917f:	0f b6 c0             	movzx  eax,al
c0019182:	6a 00                	push   0x0
c0019184:	50                   	push   eax
c0019185:	53                   	push   ebx
c0019186:	e8 9d 67 00 00       	call   c001f928 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001918b:	83 c4 20             	add    esp,0x20
c001918e:	e9 73 ff ff ff       	jmp    c0019106 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0019193:	83 ec 0c             	sub    esp,0xc
c0019196:	31 ff                	xor    edi,edi
c0019198:	68 9c 3e 02 c0       	push   0xc0023e9c
c001919d:	e8 d0 5c ff ff       	call   c000ee72 <KePanic(char const*)>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	e9 28 ff ff ff       	jmp    c00190d2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c00191aa:	8d 04 ba             	lea    eax,[edx+edi*4]
c00191ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00191b1:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c00191b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191bc:	5b                   	pop    ebx
c00191bd:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c00191c4:	89 f0                	mov    eax,esi
c00191c6:	5e                   	pop    esi
c00191c7:	5f                   	pop    edi
c00191c8:	c3                   	ret    

c00191c9 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c00191c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00191d1:	c1 e0 04             	shl    eax,0x4
c00191d4:	8d 50 10             	lea    edx,[eax+0x10]
c00191d7:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c00191dd:	74 08                	je     c00191e7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c00191df:	83 c0 04             	add    eax,0x4
c00191e2:	39 d0                	cmp    eax,edx
c00191e4:	75 f1                	jne    c00191d7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c00191e6:	c3                   	ret    
c00191e7:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c00191f1:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c00191fb:	eb e2                	jmp    c00191df <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c00191fd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00191fd:	53                   	push   ebx
c00191fe:	83 ec 08             	sub    esp,0x8
c0019201:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019205:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001920a:	74 09                	je     c0019215 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001920c:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0019213:	75 37                	jne    c001924c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0019215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019219:	83 c0 20             	add    eax,0x20
c001921c:	c1 e0 04             	shl    eax,0x4
c001921f:	8d 50 10             	lea    edx,[eax+0x10]
c0019222:	39 98 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ebx
c0019228:	74 0c                	je     c0019236 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001922a:	83 c0 04             	add    eax,0x4
c001922d:	39 d0                	cmp    eax,edx
c001922f:	75 f1                	jne    c0019222 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0019231:	83 c4 08             	add    esp,0x8
c0019234:	5b                   	pop    ebx
c0019235:	c3                   	ret    
c0019236:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0019240:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c001924a:	eb de                	jmp    c001922a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001924c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0019251:	7f 11                	jg     c0019264 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0019253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019257:	0f b6 80 e8 49 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb618]
c001925e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019262:	eb b1                	jmp    c0019215 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019264:	83 ec 0c             	sub    esp,0xc
c0019267:	68 2e 3f 02 c0       	push   0xc0023f2e
c001926c:	e8 01 5c ff ff       	call   c000ee72 <KePanic(char const*)>
c0019271:	83 c4 10             	add    esp,0x10
c0019274:	eb 9f                	jmp    c0019215 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019276:	66 90                	xchg   ax,ax

c0019278 <picIoWait()>:
c0019278:	eb 00                	jmp    c001927a <picIoWait()+0x2>
c001927a:	eb 00                	jmp    c001927c <picIoWait()+0x4>
c001927c:	90                   	nop
c001927d:	c3                   	ret    
c001927e:	66 90                	xchg   ax,ax

c0019280 <picDisable()>:
c0019280:	83 ec 10             	sub    esp,0x10
c0019283:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001928a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001928f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019293:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019298:	ee                   	out    dx,al
c0019299:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00192a0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00192a5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00192a9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00192ae:	ee                   	out    dx,al
c00192af:	90                   	nop
c00192b0:	83 c4 10             	add    esp,0x10
c00192b3:	c3                   	ret    

c00192b4 <picGetIRQReg(int)>:
c00192b4:	83 ec 10             	sub    esp,0x10
c00192b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192bb:	0f b6 c0             	movzx  eax,al
c00192be:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00192c5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00192c9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00192cd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00192d2:	ee                   	out    dx,al
c00192d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192d7:	0f b6 c0             	movzx  eax,al
c00192da:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00192e1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00192e5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00192e9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00192ee:	ee                   	out    dx,al
c00192ef:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00192f6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00192fb:	89 c2                	mov    edx,eax
c00192fd:	ec                   	in     al,dx
c00192fe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019302:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019306:	0f b6 c0             	movzx  eax,al
c0019309:	c1 e0 08             	shl    eax,0x8
c001930c:	89 c1                	mov    ecx,eax
c001930e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0019315:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001931a:	89 c2                	mov    edx,eax
c001931c:	ec                   	in     al,dx
c001931d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019321:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019325:	0f b6 c0             	movzx  eax,al
c0019328:	09 c8                	or     eax,ecx
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	c3                   	ret    
c001932e:	66 90                	xchg   ax,ax

c0019330 <picOpen()>:
c0019330:	83 ec 50             	sub    esp,0x50
c0019333:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001933a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001933f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019343:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019347:	ee                   	out    dx,al
c0019348:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001934f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019354:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019358:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001935c:	ee                   	out    dx,al
c001935d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019365:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001936d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019374:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019378:	89 c2                	mov    edx,eax
c001937a:	ec                   	in     al,dx
c001937b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001937f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019383:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019387:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001938e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019392:	89 c2                	mov    edx,eax
c0019394:	ec                   	in     al,dx
c0019395:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019399:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001939d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00193a1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00193a8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00193ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00193b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00193b5:	ee                   	out    dx,al
c00193b6:	e8 bd fe ff ff       	call   c0019278 <picIoWait()>
c00193bb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00193c2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00193c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00193cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00193cf:	ee                   	out    dx,al
c00193d0:	e8 a3 fe ff ff       	call   c0019278 <picIoWait()>
c00193d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00193d9:	0f b6 c0             	movzx  eax,al
c00193dc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00193e3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00193e7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00193eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00193ef:	ee                   	out    dx,al
c00193f0:	e8 83 fe ff ff       	call   c0019278 <picIoWait()>
c00193f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00193f9:	0f b6 c0             	movzx  eax,al
c00193fc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0019403:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019407:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001940b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001940f:	ee                   	out    dx,al
c0019410:	e8 63 fe ff ff       	call   c0019278 <picIoWait()>
c0019415:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001941c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019421:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0019425:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019429:	ee                   	out    dx,al
c001942a:	e8 49 fe ff ff       	call   c0019278 <picIoWait()>
c001942f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0019436:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001943b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001943f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019443:	ee                   	out    dx,al
c0019444:	e8 2f fe ff ff       	call   c0019278 <picIoWait()>
c0019449:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019450:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019455:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019459:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001945d:	ee                   	out    dx,al
c001945e:	e8 15 fe ff ff       	call   c0019278 <picIoWait()>
c0019463:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001946a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001946f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019473:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019477:	ee                   	out    dx,al
c0019478:	e8 fb fd ff ff       	call   c0019278 <picIoWait()>
c001947d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019482:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019489:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001948d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019491:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019495:	ee                   	out    dx,al
c0019496:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001949b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00194a2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00194a6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00194aa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00194ae:	ee                   	out    dx,al
c00194af:	90                   	nop
c00194b0:	83 c4 50             	add    esp,0x50
c00194b3:	c3                   	ret    

c00194b4 <picEOI(int)>:
c00194b4:	83 ec 10             	sub    esp,0x10
c00194b7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00194bc:	75 1e                	jne    c00194dc <picEOI(int)+0x28>
c00194be:	6a 0b                	push   0xb
c00194c0:	e8 ef fd ff ff       	call   c00192b4 <picGetIRQReg(int)>
c00194c5:	83 c4 04             	add    esp,0x4
c00194c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00194cd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00194d2:	25 80 00 00 00       	and    eax,0x80
c00194d7:	74 73                	je     c001954c <picEOI(int)+0x98>
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]
c00194dc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00194e1:	75 31                	jne    c0019514 <picEOI(int)+0x60>
c00194e3:	6a 0b                	push   0xb
c00194e5:	e8 ca fd ff ff       	call   c00192b4 <picGetIRQReg(int)>
c00194ea:	83 c4 04             	add    esp,0x4
c00194ed:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00194f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194f6:	98                   	cwde   
c00194f7:	85 c0                	test   eax,eax
c00194f9:	78 19                	js     c0019514 <picEOI(int)+0x60>
c00194fb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0019502:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019507:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001950b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019510:	ee                   	out    dx,al
c0019511:	eb 3d                	jmp    c0019550 <picEOI(int)+0x9c>
c0019513:	90                   	nop
c0019514:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019519:	7e 19                	jle    c0019534 <picEOI(int)+0x80>
c001951b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019522:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0019527:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001952b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019530:	ee                   	out    dx,al
c0019531:	8d 76 00             	lea    esi,[esi+0x0]
c0019534:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001953b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019540:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019544:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019549:	ee                   	out    dx,al
c001954a:	eb 04                	jmp    c0019550 <picEOI(int)+0x9c>
c001954c:	90                   	nop
c001954d:	8d 76 00             	lea    esi,[esi+0x0]
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	c3                   	ret    

c0019554 <RTC::open(int, int, void*)>:
c0019554:	31 c0                	xor    eax,eax
c0019556:	c3                   	ret    
c0019557:	90                   	nop

c0019558 <RTC::close(int, int, void*)>:
c0019558:	31 c0                	xor    eax,eax
c001955a:	c3                   	ret    
c001955b:	90                   	nop

c001955c <RTC::timeInSecondsUTC()>:
c001955c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019560:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019566:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001956c:	c3                   	ret    
c001956d:	90                   	nop

c001956e <RTC::timeInDatetimeUTC()>:
c001956e:	53                   	push   ebx
c001956f:	83 ec 14             	sub    esp,0x14
c0019572:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001957a:	8b 10                	mov    edx,DWORD PTR [eax]
c001957c:	50                   	push   eax
c001957d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019580:	83 c4 0c             	add    esp,0xc
c0019583:	52                   	push   edx
c0019584:	50                   	push   eax
c0019585:	53                   	push   ebx
c0019586:	e8 78 f8 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c001958b:	89 d8                	mov    eax,ebx
c001958d:	83 c4 14             	add    esp,0x14
c0019590:	5b                   	pop    ebx
c0019591:	c2 04 00             	ret    0x4

c0019594 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019594:	56                   	push   esi
c0019595:	53                   	push   ebx
c0019596:	83 ec 14             	sub    esp,0x14
c0019599:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001959d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001959f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00195a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195a6:	52                   	push   edx
c00195a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195af:	50                   	push   eax
c00195b0:	e8 4e f8 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c00195b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00195c1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00195c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00195c9:	89 f0                	mov    eax,esi
c00195cb:	83 c4 20             	add    esp,0x20
c00195ce:	5b                   	pop    ebx
c00195cf:	5e                   	pop    esi
c00195d0:	ff e0                	jmp    eax

c00195d2 <RTC::~RTC()>:
c00195d2:	83 ec 0c             	sub    esp,0xc
c00195d5:	ba 58 3f 02 c0       	mov    edx,0xc0023f58
c00195da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195de:	89 10                	mov    DWORD PTR [eax],edx
c00195e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195e4:	83 ec 0c             	sub    esp,0xc
c00195e7:	50                   	push   eax
c00195e8:	e8 7b f5 fe ff       	call   c0008b68 <Clock::~Clock()>
c00195ed:	83 c4 10             	add    esp,0x10
c00195f0:	90                   	nop
c00195f1:	83 c4 0c             	add    esp,0xc
c00195f4:	c3                   	ret    
c00195f5:	90                   	nop

c00195f6 <RTC::~RTC()>:
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	83 ec 0c             	sub    esp,0xc
c00195fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019600:	e8 cd ff ff ff       	call   c00195d2 <RTC::~RTC()>
c0019605:	83 c4 10             	add    esp,0x10
c0019608:	83 ec 08             	sub    esp,0x8
c001960b:	68 60 01 00 00       	push   0x160
c0019610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019614:	e8 87 32 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0019619:	83 c4 10             	add    esp,0x10
c001961c:	83 c4 0c             	add    esp,0xc
c001961f:	c3                   	ret    

c0019620 <RTC::get_update_in_progress_flag()>:
c0019620:	83 ec 18             	sub    esp,0x18
c0019623:	6a 0a                	push   0xa
c0019625:	e8 09 db ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c001962a:	83 c4 1c             	add    esp,0x1c
c001962d:	0f b6 c0             	movzx  eax,al
c0019630:	c1 e8 07             	shr    eax,0x7
c0019633:	c3                   	ret    

c0019634 <RTC::completeRTCRefresh()>:
c0019634:	55                   	push   ebp
c0019635:	57                   	push   edi
c0019636:	56                   	push   esi
c0019637:	53                   	push   ebx
c0019638:	83 ec 3c             	sub    esp,0x3c
c001963b:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019641:	83 ec 0c             	sub    esp,0xc
c0019644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019648:	e8 d3 ff ff ff       	call   c0019620 <RTC::get_update_in_progress_flag()>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	84 c0                	test   al,al
c0019652:	74 0e                	je     c0019662 <RTC::completeRTCRefresh()+0x2e>
c0019654:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001965a:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019660:	73 df                	jae    c0019641 <RTC::completeRTCRefresh()+0xd>
c0019662:	83 ec 0c             	sub    esp,0xc
c0019665:	6a 00                	push   0x0
c0019667:	e8 c7 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c001966c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019673:	89 c5                	mov    ebp,eax
c0019675:	e8 b9 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c001967a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019681:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019685:	e8 a9 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c001968a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019691:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019695:	e8 99 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c001969a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00196a1:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00196a5:	e8 89 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c00196aa:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00196b1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00196b5:	e8 79 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c00196ba:	0f b6 c0             	movzx  eax,al
c00196bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00196c1:	83 c4 10             	add    esp,0x10
c00196c4:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c00196ca:	83 ec 0c             	sub    esp,0xc
c00196cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00196d1:	e8 4a ff ff ff       	call   c0019620 <RTC::get_update_in_progress_flag()>
c00196d6:	83 c4 10             	add    esp,0x10
c00196d9:	84 c0                	test   al,al
c00196db:	74 0e                	je     c00196eb <RTC::completeRTCRefresh()+0xb7>
c00196dd:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00196e3:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c00196e9:	73 df                	jae    c00196ca <RTC::completeRTCRefresh()+0x96>
c00196eb:	83 ec 0c             	sub    esp,0xc
c00196ee:	6a 00                	push   0x0
c00196f0:	e8 3e da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c00196f5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00196fc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019700:	e8 2e da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019705:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001970c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019710:	e8 1e da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019715:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001971c:	88 c3                	mov    bl,al
c001971e:	e8 10 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019723:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001972a:	89 c6                	mov    esi,eax
c001972c:	e8 02 da ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019731:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019738:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001973c:	e8 f2 d9 ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019741:	89 e9                	mov    ecx,ebp
c0019743:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019747:	0f b6 f8             	movzx  edi,al
c001974a:	83 c4 10             	add    esp,0x10
c001974d:	0f b6 eb             	movzx  ebp,bl
c0019750:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019754:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019759:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001975e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019762:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019766:	0f 94 c0             	sete   al
c0019769:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001976d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0019771:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0019776:	0f 94 c2             	sete   dl
c0019779:	21 d0                	and    eax,edx
c001977b:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001977f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019783:	0f 94 c2             	sete   dl
c0019786:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001978a:	21 c2                	and    edx,eax
c001978c:	89 f0                	mov    eax,esi
c001978e:	0f b6 c0             	movzx  eax,al
c0019791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019795:	89 f0                	mov    eax,esi
c0019797:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001979b:	0f 94 c0             	sete   al
c001979e:	21 d0                	and    eax,edx
c00197a0:	31 d2                	xor    edx,edx
c00197a2:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00197a6:	0f 94 c2             	sete   dl
c00197a9:	85 c2                	test   edx,eax
c00197ab:	75 27                	jne    c00197d4 <RTC::completeRTCRefresh()+0x1a0>
c00197ad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00197b1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00197b5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00197b9:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00197bd:	89 f0                	mov    eax,esi
c00197bf:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00197c3:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00197c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197cb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00197cf:	e9 f0 fe ff ff       	jmp    c00196c4 <RTC::completeRTCRefresh()+0x90>
c00197d4:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c00197d8:	75 d3                	jne    c00197ad <RTC::completeRTCRefresh()+0x179>
c00197da:	83 ec 0c             	sub    esp,0xc
c00197dd:	6a 0b                	push   0xb
c00197df:	e8 4f d9 ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c00197e4:	83 c4 10             	add    esp,0x10
c00197e7:	a8 04                	test   al,0x4
c00197e9:	75 7a                	jne    c0019865 <RTC::completeRTCRefresh()+0x231>
c00197eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00197ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00197f3:	83 e1 0f             	and    ecx,0xf
c00197f6:	c1 ea 04             	shr    edx,0x4
c00197f9:	83 e6 0f             	and    esi,0xf
c00197fc:	6b d2 0a             	imul   edx,edx,0xa
c00197ff:	c1 ef 04             	shr    edi,0x4
c0019802:	01 d1                	add    ecx,edx
c0019804:	6b ff 0a             	imul   edi,edi,0xa
c0019807:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001980b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001980f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019813:	c1 ea 04             	shr    edx,0x4
c0019816:	83 e1 0f             	and    ecx,0xf
c0019819:	6b d2 0a             	imul   edx,edx,0xa
c001981c:	01 d1                	add    ecx,edx
c001981e:	89 ea                	mov    edx,ebp
c0019820:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0019824:	c1 ea 04             	shr    edx,0x4
c0019827:	89 d9                	mov    ecx,ebx
c0019829:	83 e2 07             	and    edx,0x7
c001982c:	83 e1 0f             	and    ecx,0xf
c001982f:	6b d2 0a             	imul   edx,edx,0xa
c0019832:	83 e3 80             	and    ebx,0xffffff80
c0019835:	01 d1                	add    ecx,edx
c0019837:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001983b:	09 cb                	or     ebx,ecx
c001983d:	c1 ea 04             	shr    edx,0x4
c0019840:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019844:	6b d2 0a             	imul   edx,edx,0xa
c0019847:	83 e1 0f             	and    ecx,0xf
c001984a:	01 d6                	add    esi,edx
c001984c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019850:	c1 ea 04             	shr    edx,0x4
c0019853:	6b d2 0a             	imul   edx,edx,0xa
c0019856:	01 d1                	add    ecx,edx
c0019858:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001985c:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0019860:	83 e2 0f             	and    edx,0xf
c0019863:	01 d7                	add    edi,edx
c0019865:	a8 02                	test   al,0x2
c0019867:	75 15                	jne    c001987e <RTC::completeRTCRefresh()+0x24a>
c0019869:	f6 c3 80             	test   bl,0x80
c001986c:	74 10                	je     c001987e <RTC::completeRTCRefresh()+0x24a>
c001986e:	83 e3 7f             	and    ebx,0x7f
c0019871:	b9 18 00 00 00       	mov    ecx,0x18
c0019876:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019879:	99                   	cdq    
c001987a:	f7 f9                	idiv   ecx
c001987c:	88 d3                	mov    bl,dl
c001987e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019884:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001988a:	77 06                	ja     c0019892 <RTC::completeRTCRefresh()+0x25e>
c001988c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0019892:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019897:	31 c9                	xor    ecx,ecx
c0019899:	c1 e0 10             	shl    eax,0x10
c001989c:	89 cf                	mov    edi,ecx
c001989e:	c1 e5 10             	shl    ebp,0x10
c00198a1:	31 d2                	xor    edx,edx
c00198a3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00198a9:	09 c7                	or     edi,eax
c00198ab:	89 f0                	mov    eax,esi
c00198ad:	89 f9                	mov    ecx,edi
c00198af:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00198b3:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00198b7:	88 c2                	mov    dl,al
c00198b9:	88 d9                	mov    cl,bl
c00198bb:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00198bf:	0f b7 c2             	movzx  eax,dx
c00198c2:	09 e8                	or     eax,ebp
c00198c4:	89 c2                	mov    edx,eax
c00198c6:	50                   	push   eax
c00198c7:	50                   	push   eax
c00198c8:	51                   	push   ecx
c00198c9:	52                   	push   edx
c00198ca:	e8 88 f3 fe ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c00198cf:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00198d3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00198d9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00198df:	83 c4 4c             	add    esp,0x4c
c00198e2:	5b                   	pop    ebx
c00198e3:	5e                   	pop    esi
c00198e4:	5f                   	pop    edi
c00198e5:	5d                   	pop    ebp
c00198e6:	c3                   	ret    
c00198e7:	90                   	nop

c00198e8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00198e8:	55                   	push   ebp
c00198e9:	57                   	push   edi
c00198ea:	56                   	push   esi
c00198eb:	53                   	push   ebx
c00198ec:	83 ec 34             	sub    esp,0x34
c00198ef:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00198f3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00198f7:	6a 00                	push   0x0
c00198f9:	89 fb                	mov    ebx,edi
c00198fb:	6a 00                	push   0x0
c00198fd:	e8 85 d8 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019902:	5d                   	pop    ebp
c0019903:	58                   	pop    eax
c0019904:	6a 00                	push   0x0
c0019906:	6a 02                	push   0x2
c0019908:	e8 7a d8 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c001990d:	31 d2                	xor    edx,edx
c001990f:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0019916:	89 f9                	mov    ecx,edi
c0019918:	89 f8                	mov    eax,edi
c001991a:	c1 e9 10             	shr    ecx,0x10
c001991d:	0f b6 c4             	movzx  eax,ah
c0019920:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0019924:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019928:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001992c:	b9 64 00 00 00       	mov    ecx,0x64
c0019931:	89 f0                	mov    eax,esi
c0019933:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019937:	89 f0                	mov    eax,esi
c0019939:	0f b6 c4             	movzx  eax,ah
c001993c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019940:	89 f0                	mov    eax,esi
c0019942:	c1 e8 10             	shr    eax,0x10
c0019945:	f7 f1                	div    ecx
c0019947:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001994b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001994f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019953:	e8 db d7 ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	89 c5                	mov    ebp,eax
c001995d:	a8 04                	test   al,0x4
c001995f:	75 6e                	jne    c00199cf <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019961:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019965:	31 d2                	xor    edx,edx
c0019967:	0f b6 c1             	movzx  eax,cl
c001996a:	b9 0a 00 00 00       	mov    ecx,0xa
c001996f:	f7 f1                	div    ecx
c0019971:	c1 e0 04             	shl    eax,0x4
c0019974:	09 d0                	or     eax,edx
c0019976:	31 d2                	xor    edx,edx
c0019978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001997c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019981:	f7 f1                	div    ecx
c0019983:	c1 e0 04             	shl    eax,0x4
c0019986:	09 d0                	or     eax,edx
c0019988:	31 d2                	xor    edx,edx
c001998a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001998e:	0f b6 c3             	movzx  eax,bl
c0019991:	f7 f1                	div    ecx
c0019993:	c1 e0 04             	shl    eax,0x4
c0019996:	09 d0                	or     eax,edx
c0019998:	31 d2                	xor    edx,edx
c001999a:	89 c3                	mov    ebx,eax
c001999c:	89 f0                	mov    eax,esi
c001999e:	0f b6 c0             	movzx  eax,al
c00199a1:	f7 f1                	div    ecx
c00199a3:	c1 e0 04             	shl    eax,0x4
c00199a6:	09 d0                	or     eax,edx
c00199a8:	31 d2                	xor    edx,edx
c00199aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00199ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00199b3:	f7 f1                	div    ecx
c00199b5:	c1 e0 04             	shl    eax,0x4
c00199b8:	09 d0                	or     eax,edx
c00199ba:	31 d2                	xor    edx,edx
c00199bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199c4:	f7 f1                	div    ecx
c00199c6:	c1 e0 04             	shl    eax,0x4
c00199c9:	09 d0                	or     eax,edx
c00199cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199cf:	83 e5 02             	and    ebp,0x2
c00199d2:	75 1e                	jne    c00199f2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00199d4:	0f b6 c3             	movzx  eax,bl
c00199d7:	83 f8 0b             	cmp    eax,0xb
c00199da:	76 10                	jbe    c00199ec <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c00199dc:	8d 53 f4             	lea    edx,[ebx-0xc]
c00199df:	88 d3                	mov    bl,dl
c00199e1:	84 d2                	test   dl,dl
c00199e3:	75 02                	jne    c00199e7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c00199e5:	b3 0c                	mov    bl,0xc
c00199e7:	83 cb 80             	or     ebx,0xffffff80
c00199ea:	eb 06                	jmp    c00199f2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00199ec:	85 c0                	test   eax,eax
c00199ee:	75 02                	jne    c00199f2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00199f0:	b3 0c                	mov    bl,0xc
c00199f2:	0f b6 db             	movzx  ebx,bl
c00199f5:	50                   	push   eax
c00199f6:	50                   	push   eax
c00199f7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00199fc:	52                   	push   edx
c00199fd:	6a 00                	push   0x0
c00199ff:	e8 83 d7 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019a04:	5a                   	pop    edx
c0019a05:	59                   	pop    ecx
c0019a06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a0b:	50                   	push   eax
c0019a0c:	6a 02                	push   0x2
c0019a0e:	e8 74 d7 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019a13:	5e                   	pop    esi
c0019a14:	5f                   	pop    edi
c0019a15:	53                   	push   ebx
c0019a16:	6a 04                	push   0x4
c0019a18:	e8 6a d7 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019a1d:	5d                   	pop    ebp
c0019a1e:	58                   	pop    eax
c0019a1f:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0019a24:	52                   	push   edx
c0019a25:	6a 07                	push   0x7
c0019a27:	e8 5b d7 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019a2c:	58                   	pop    eax
c0019a2d:	5a                   	pop    edx
c0019a2e:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019a33:	50                   	push   eax
c0019a34:	6a 08                	push   0x8
c0019a36:	e8 4c d7 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019a3b:	59                   	pop    ecx
c0019a3c:	5b                   	pop    ebx
c0019a3d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0019a42:	55                   	push   ebp
c0019a43:	6a 09                	push   0x9
c0019a45:	e8 3d d7 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019a4a:	5e                   	pop    esi
c0019a4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019a4f:	e8 e0 fb ff ff       	call   c0019634 <RTC::completeRTCRefresh()>
c0019a54:	83 c4 3c             	add    esp,0x3c
c0019a57:	b0 01                	mov    al,0x1
c0019a59:	5b                   	pop    ebx
c0019a5a:	5e                   	pop    esi
c0019a5b:	5f                   	pop    edi
c0019a5c:	5d                   	pop    ebp
c0019a5d:	c3                   	ret    

c0019a5e <rtcIRQHandler(regs*, void*)>:
c0019a5e:	53                   	push   ebx
c0019a5f:	83 ec 14             	sub    esp,0x14
c0019a62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a66:	6a 0c                	push   0xc
c0019a68:	e8 c6 d6 ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019a6d:	83 c4 10             	add    esp,0x10
c0019a70:	a8 80                	test   al,0x80
c0019a72:	74 24                	je     c0019a98 <rtcIRQHandler(regs*, void*)+0x3a>
c0019a74:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019a7b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019a82:	66 ff 05 94 d7 02 c0 	inc    WORD PTR ds:0xc002d794
c0019a89:	75 0d                	jne    c0019a98 <rtcIRQHandler(regs*, void*)+0x3a>
c0019a8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019a8f:	83 c4 08             	add    esp,0x8
c0019a92:	5b                   	pop    ebx
c0019a93:	e9 9c fb ff ff       	jmp    c0019634 <RTC::completeRTCRefresh()>
c0019a98:	83 c4 08             	add    esp,0x8
c0019a9b:	5b                   	pop    ebx
c0019a9c:	c3                   	ret    
c0019a9d:	90                   	nop

c0019a9e <RTC::RTC()>:
c0019a9e:	83 ec 1c             	sub    esp,0x1c
c0019aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa5:	83 ec 08             	sub    esp,0x8
c0019aa8:	68 3b 3f 02 c0       	push   0xc0023f3b
c0019aad:	50                   	push   eax
c0019aae:	e8 7f f0 fe ff       	call   c0008b32 <Clock::Clock(char const*)>
c0019ab3:	83 c4 10             	add    esp,0x10
c0019ab6:	ba 58 3f 02 c0       	mov    edx,0xc0023f58
c0019abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019abf:	89 10                	mov    DWORD PTR [eax],edx
c0019ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ac5:	83 ec 0c             	sub    esp,0xc
c0019ac8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019acc:	6a 01                	push   0x1
c0019ace:	68 5e 9a 01 c0       	push   0xc0019a5e
c0019ad3:	6a 08                	push   0x8
c0019ad5:	50                   	push   eax
c0019ad6:	e8 63 f5 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019adb:	83 c4 20             	add    esp,0x20
c0019ade:	89 c2                	mov    edx,eax
c0019ae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0019aea:	fa                   	cli    
c0019aeb:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0019af0:	83 c0 01             	add    eax,0x1
c0019af3:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0019af8:	83 ec 0c             	sub    esp,0xc
c0019afb:	6a 0b                	push   0xb
c0019afd:	e8 31 d6 ff ff       	call   c0017133 <x86ReadCMOS(unsigned char)>
c0019b02:	83 c4 10             	add    esp,0x10
c0019b05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019b09:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019b0d:	83 c8 10             	or     eax,0x10
c0019b10:	0f b6 c0             	movzx  eax,al
c0019b13:	83 ec 08             	sub    esp,0x8
c0019b16:	50                   	push   eax
c0019b17:	6a 0b                	push   0xb
c0019b19:	e8 69 d6 ff ff       	call   c0017187 <x86WriteCMOS(unsigned char, unsigned char)>
c0019b1e:	83 c4 10             	add    esp,0x10
c0019b21:	83 ec 0c             	sub    esp,0xc
c0019b24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b28:	e8 07 fb ff ff       	call   c0019634 <RTC::completeRTCRefresh()>
c0019b2d:	83 c4 10             	add    esp,0x10
c0019b30:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0019b38:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0019b3d:	85 c0                	test   eax,eax
c0019b3f:	75 01                	jne    c0019b42 <RTC::RTC()+0xa4>
c0019b41:	fb                   	sti    
c0019b42:	90                   	nop
c0019b43:	83 c4 1c             	add    esp,0x1c
c0019b46:	c3                   	ret    
c0019b47:	90                   	nop

c0019b48 <HalConsoleScroll(int, int)>:
c0019b48:	83 ec 10             	sub    esp,0x10
c0019b4b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0019b53:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019b5b:	90                   	nop
c0019b5c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019b61:	0f 8f e1 00 00 00    	jg     c0019c48 <HalConsoleScroll(int, int)+0x100>
c0019b67:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b6f:	90                   	nop
c0019b70:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019b78:	0f 8f be 00 00 00    	jg     c0019c3c <HalConsoleScroll(int, int)+0xf4>
c0019b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b82:	89 d0                	mov    eax,edx
c0019b84:	c1 e0 02             	shl    eax,0x2
c0019b87:	01 d0                	add    eax,edx
c0019b89:	c1 e0 05             	shl    eax,0x5
c0019b8c:	89 c2                	mov    edx,eax
c0019b8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b92:	01 d0                	add    eax,edx
c0019b94:	89 c2                	mov    edx,eax
c0019b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b9a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019b9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ba1:	89 d0                	mov    eax,edx
c0019ba3:	c1 e0 02             	shl    eax,0x2
c0019ba6:	01 d0                	add    eax,edx
c0019ba8:	c1 e0 05             	shl    eax,0x5
c0019bab:	89 c2                	mov    edx,eax
c0019bad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bb1:	01 d0                	add    eax,edx
c0019bb3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019bb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbd:	01 c2                	add    edx,eax
c0019bbf:	8a 01                	mov    al,BYTE PTR [ecx]
c0019bc1:	88 02                	mov    BYTE PTR [edx],al
c0019bc3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019bc8:	75 66                	jne    c0019c30 <HalConsoleScroll(int, int)+0xe8>
c0019bca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bce:	83 e0 01             	and    eax,0x1
c0019bd1:	74 39                	je     c0019c0c <HalConsoleScroll(int, int)+0xc4>
c0019bd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bd7:	83 e0 0f             	and    eax,0xf
c0019bda:	88 c2                	mov    dl,al
c0019bdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019be0:	c1 e0 04             	shl    eax,0x4
c0019be3:	09 d0                	or     eax,edx
c0019be5:	88 c1                	mov    cl,al
c0019be7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019beb:	89 d0                	mov    eax,edx
c0019bed:	c1 e0 02             	shl    eax,0x2
c0019bf0:	01 d0                	add    eax,edx
c0019bf2:	c1 e0 05             	shl    eax,0x5
c0019bf5:	89 c2                	mov    edx,eax
c0019bf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bfb:	01 d0                	add    eax,edx
c0019bfd:	89 c2                	mov    edx,eax
c0019bff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c03:	01 d0                	add    eax,edx
c0019c05:	88 ca                	mov    dl,cl
c0019c07:	88 10                	mov    BYTE PTR [eax],dl
c0019c09:	eb 25                	jmp    c0019c30 <HalConsoleScroll(int, int)+0xe8>
c0019c0b:	90                   	nop
c0019c0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c10:	89 d0                	mov    eax,edx
c0019c12:	c1 e0 02             	shl    eax,0x2
c0019c15:	01 d0                	add    eax,edx
c0019c17:	c1 e0 05             	shl    eax,0x5
c0019c1a:	89 c2                	mov    edx,eax
c0019c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c20:	01 d0                	add    eax,edx
c0019c22:	89 c2                	mov    edx,eax
c0019c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c28:	01 d0                	add    eax,edx
c0019c2a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0019c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c30:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0019c35:	e9 36 ff ff ff       	jmp    c0019b70 <HalConsoleScroll(int, int)+0x28>
c0019c3a:	66 90                	xchg   ax,ax
c0019c3c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c41:	e9 16 ff ff ff       	jmp    c0019b5c <HalConsoleScroll(int, int)+0x14>
c0019c46:	66 90                	xchg   ax,ax
c0019c48:	90                   	nop
c0019c49:	83 c4 10             	add    esp,0x10
c0019c4c:	c3                   	ret    
c0019c4d:	8d 76 00             	lea    esi,[esi+0x0]

c0019c50 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019c50:	83 ec 14             	sub    esp,0x14
c0019c53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c57:	88 04 24             	mov    BYTE PTR [esp],al
c0019c5a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019c5d:	0f b6 c0             	movzx  eax,al
c0019c60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c64:	89 d1                	mov    ecx,edx
c0019c66:	83 e1 0f             	and    ecx,0xf
c0019c69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019c6d:	c1 e2 04             	shl    edx,0x4
c0019c70:	0f b6 d2             	movzx  edx,dl
c0019c73:	09 ca                	or     edx,ecx
c0019c75:	c1 e2 08             	shl    edx,0x8
c0019c78:	09 d0                	or     eax,edx
c0019c7a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0019c7f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019c87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019c8b:	89 d0                	mov    eax,edx
c0019c8d:	c1 e0 02             	shl    eax,0x2
c0019c90:	01 d0                	add    eax,edx
c0019c92:	c1 e0 04             	shl    eax,0x4
c0019c95:	89 c2                	mov    edx,eax
c0019c97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c9b:	01 d0                	add    eax,edx
c0019c9d:	01 c0                	add    eax,eax
c0019c9f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019ca3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ca7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019cac:	66 89 02             	mov    WORD PTR [edx],ax
c0019caf:	90                   	nop
c0019cb0:	83 c4 14             	add    esp,0x14
c0019cb3:	c3                   	ret    

c0019cb4 <HalConsoleCursorUpdate(int, int)>:
c0019cb4:	83 ec 20             	sub    esp,0x20
c0019cb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019cbb:	89 c2                	mov    edx,eax
c0019cbd:	c1 e2 02             	shl    edx,0x2
c0019cc0:	01 d0                	add    eax,edx
c0019cc2:	c1 e0 04             	shl    eax,0x4
c0019cc5:	89 c2                	mov    edx,eax
c0019cc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ccb:	01 d0                	add    eax,edx
c0019ccd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019cd2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019cd9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0019cde:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019ce2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ce6:	ee                   	out    dx,al
c0019ce7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019cec:	0f b6 c0             	movzx  eax,al
c0019cef:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0019cf6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0019cfa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019cfe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d02:	ee                   	out    dx,al
c0019d03:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0019d0a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0019d0f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019d13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d17:	ee                   	out    dx,al
c0019d18:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0019d1d:	c1 e8 08             	shr    eax,0x8
c0019d20:	0f b6 c0             	movzx  eax,al
c0019d23:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019d2a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019d2e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019d32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d36:	ee                   	out    dx,al
c0019d37:	90                   	nop
c0019d38:	83 c4 20             	add    esp,0x20
c0019d3b:	c3                   	ret    

c0019d3c <FAT::getName()>:
c0019d3c:	b8 8c 3f 02 c0       	mov    eax,0xc0023f8c
c0019d41:	c3                   	ret    
c0019d42:	66 90                	xchg   ax,ax

c0019d44 <FAT::tell(void*, unsigned long long*)>:
c0019d44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019d49:	75 09                	jne    c0019d54 <FAT::tell(void*, unsigned long long*)+0x10>
c0019d4b:	b8 04 00 00 00       	mov    eax,0x4
c0019d50:	c3                   	ret    
c0019d51:	8d 76 00             	lea    esi,[esi+0x0]
c0019d54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019d59:	75 09                	jne    c0019d64 <FAT::tell(void*, unsigned long long*)+0x20>
c0019d5b:	b8 04 00 00 00       	mov    eax,0x4
c0019d60:	c3                   	ret    
c0019d61:	8d 76 00             	lea    esi,[esi+0x0]
c0019d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d6b:	ba 00 00 00 00       	mov    edx,0x0
c0019d70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d74:	89 01                	mov    DWORD PTR [ecx],eax
c0019d76:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d79:	b8 00 00 00 00       	mov    eax,0x0
c0019d7e:	c3                   	ret    
c0019d7f:	90                   	nop

c0019d80 <FAT::stat(void*, unsigned long long*)>:
c0019d80:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019d85:	75 09                	jne    c0019d90 <FAT::stat(void*, unsigned long long*)+0x10>
c0019d87:	b8 04 00 00 00       	mov    eax,0x4
c0019d8c:	c3                   	ret    
c0019d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019d95:	75 09                	jne    c0019da0 <FAT::stat(void*, unsigned long long*)+0x20>
c0019d97:	b8 04 00 00 00       	mov    eax,0x4
c0019d9c:	c3                   	ret    
c0019d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019da4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019da7:	ba 00 00 00 00       	mov    edx,0x0
c0019dac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019db0:	89 01                	mov    DWORD PTR [ecx],eax
c0019db2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019db5:	b8 00 00 00 00       	mov    eax,0x0
c0019dba:	c3                   	ret    
c0019dbb:	90                   	nop

c0019dbc <FAT::~FAT()>:
c0019dbc:	83 ec 0c             	sub    esp,0xc
c0019dbf:	ba d8 3f 02 c0       	mov    edx,0xc0023fd8
c0019dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dc8:	89 10                	mov    DWORD PTR [eax],edx
c0019dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dce:	83 ec 0c             	sub    esp,0xc
c0019dd1:	50                   	push   eax
c0019dd2:	e8 bd df fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0019dd7:	83 c4 10             	add    esp,0x10
c0019dda:	90                   	nop
c0019ddb:	83 c4 0c             	add    esp,0xc
c0019dde:	c3                   	ret    
c0019ddf:	90                   	nop

c0019de0 <FAT::~FAT()>:
c0019de0:	83 ec 0c             	sub    esp,0xc
c0019de3:	83 ec 0c             	sub    esp,0xc
c0019de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dea:	e8 cd ff ff ff       	call   c0019dbc <FAT::~FAT()>
c0019def:	83 c4 10             	add    esp,0x10
c0019df2:	83 ec 08             	sub    esp,0x8
c0019df5:	6a 08                	push   0x8
c0019df7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dfb:	e8 a0 2a ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	83 c4 0c             	add    esp,0xc
c0019e06:	c3                   	ret    
c0019e07:	90                   	nop

c0019e08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019e08:	83 ec 1c             	sub    esp,0x1c
c0019e0b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019e12:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019e17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e1b:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019e22:	83 f8 ff             	cmp    eax,0xffffffff
c0019e25:	75 35                	jne    c0019e5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019e27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019e2b:	88 c2                	mov    dl,al
c0019e2d:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e32:	01 d0                	add    eax,edx
c0019e34:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019e38:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019e3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e42:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019e49:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019e52:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019e59:	eb 19                	jmp    c0019e74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019e5b:	90                   	nop
c0019e5c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019e60:	88 c2                	mov    dl,al
c0019e62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e66:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019e6d:	01 d0                	add    eax,edx
c0019e6f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019e73:	90                   	nop
c0019e74:	83 ec 04             	sub    esp,0x4
c0019e77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e7f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019e83:	50                   	push   eax
c0019e84:	e8 2f b3 fe ff       	call   c00051b8 <f_getlabel>
c0019e89:	83 c4 10             	add    esp,0x10
c0019e8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e95:	75 09                	jne    c0019ea0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019e97:	b8 00 00 00 00       	mov    eax,0x0
c0019e9c:	eb 0a                	jmp    c0019ea8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019e9e:	66 90                	xchg   ax,ax
c0019ea0:	b8 01 00 00 00       	mov    eax,0x1
c0019ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea8:	83 c4 1c             	add    esp,0x1c
c0019eab:	c3                   	ret    

c0019eac <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019eac:	57                   	push   edi
c0019ead:	83 ec 58             	sub    esp,0x58
c0019eb0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019eb8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019ebc:	b8 00 00 00 00       	mov    eax,0x0
c0019ec1:	b9 0f 00 00 00       	mov    ecx,0xf
c0019ec6:	fc                   	cld    
c0019ec7:	89 d7                	mov    edi,edx
c0019ec9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019ecb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ecf:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019ed6:	83 f8 ff             	cmp    eax,0xffffffff
c0019ed9:	75 35                	jne    c0019f10 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019edb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019edf:	88 c2                	mov    dl,al
c0019ee1:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019ee6:	01 d0                	add    eax,edx
c0019ee8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019eec:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019ef2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ef6:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019efd:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019f02:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019f06:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019f0d:	eb 19                	jmp    c0019f28 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019f0f:	90                   	nop
c0019f10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f14:	88 c2                	mov    dl,al
c0019f16:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019f1a:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019f21:	01 d0                	add    eax,edx
c0019f23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f27:	90                   	nop
c0019f28:	83 ec 08             	sub    esp,0x8
c0019f2b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019f2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f33:	50                   	push   eax
c0019f34:	e8 07 69 fe ff       	call   c0000840 <strcat>
c0019f39:	83 c4 10             	add    esp,0x10
c0019f3c:	83 ec 0c             	sub    esp,0xc
c0019f3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f43:	50                   	push   eax
c0019f44:	e8 c0 b3 fe ff       	call   c0005309 <f_setlabel>
c0019f49:	83 c4 10             	add    esp,0x10
c0019f4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019f50:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019f55:	75 09                	jne    c0019f60 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019f57:	b8 00 00 00 00       	mov    eax,0x0
c0019f5c:	eb 0a                	jmp    c0019f68 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0019f5e:	66 90                	xchg   ax,ax
c0019f60:	b8 01 00 00 00       	mov    eax,0x1
c0019f65:	8d 76 00             	lea    esi,[esi+0x0]
c0019f68:	83 c4 58             	add    esp,0x58
c0019f6b:	5f                   	pop    edi
c0019f6c:	c3                   	ret    
c0019f6d:	90                   	nop
c0019f6e:	66 90                	xchg   ax,ax

c0019f70 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019f70:	83 ec 2c             	sub    esp,0x2c
c0019f73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019f7b:	83 ec 08             	sub    esp,0x8
c0019f7e:	68 b0 3f 02 c0       	push   0xc0023fb0
c0019f83:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f87:	e8 c4 67 fe ff       	call   c0000750 <strcmp>
c0019f8c:	83 c4 10             	add    esp,0x10
c0019f8f:	85 c0                	test   eax,eax
c0019f91:	0f 94 c0             	sete   al
c0019f94:	0f b6 c0             	movzx  eax,al
c0019f97:	85 c0                	test   eax,eax
c0019f99:	74 0d                	je     c0019fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019f9b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019fa3:	e9 c0 00 00 00       	jmp    c001a068 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019fa8:	83 ec 08             	sub    esp,0x8
c0019fab:	68 a2 3f 02 c0       	push   0xc0023fa2
c0019fb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fb4:	e8 97 67 fe ff       	call   c0000750 <strcmp>
c0019fb9:	83 c4 10             	add    esp,0x10
c0019fbc:	85 c0                	test   eax,eax
c0019fbe:	0f 94 c0             	sete   al
c0019fc1:	0f b6 c0             	movzx  eax,al
c0019fc4:	85 c0                	test   eax,eax
c0019fc6:	74 10                	je     c0019fd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019fc8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019fd0:	e9 93 00 00 00       	jmp    c001a068 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd8:	83 ec 08             	sub    esp,0x8
c0019fdb:	68 a8 3f 02 c0       	push   0xc0023fa8
c0019fe0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fe4:	e8 67 67 fe ff       	call   c0000750 <strcmp>
c0019fe9:	83 c4 10             	add    esp,0x10
c0019fec:	85 c0                	test   eax,eax
c0019fee:	0f 94 c0             	sete   al
c0019ff1:	0f b6 c0             	movzx  eax,al
c0019ff4:	85 c0                	test   eax,eax
c0019ff6:	74 0c                	je     c001a004 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019ff8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a000:	eb 66                	jmp    c001a068 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a002:	66 90                	xchg   ax,ax
c001a004:	83 ec 08             	sub    esp,0x8
c001a007:	68 bc 11 02 c0       	push   0xc00211bc
c001a00c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a010:	e8 3b 67 fe ff       	call   c0000750 <strcmp>
c001a015:	83 c4 10             	add    esp,0x10
c001a018:	85 c0                	test   eax,eax
c001a01a:	0f 94 c0             	sete   al
c001a01d:	0f b6 c0             	movzx  eax,al
c001a020:	85 c0                	test   eax,eax
c001a022:	74 0c                	je     c001a030 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001a024:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a02c:	eb 3a                	jmp    c001a068 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a02e:	66 90                	xchg   ax,ax
c001a030:	83 ec 08             	sub    esp,0x8
c001a033:	68 ae 3f 02 c0       	push   0xc0023fae
c001a038:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a03c:	e8 0f 67 fe ff       	call   c0000750 <strcmp>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	85 c0                	test   eax,eax
c001a046:	0f 94 c0             	sete   al
c001a049:	0f b6 c0             	movzx  eax,al
c001a04c:	85 c0                	test   eax,eax
c001a04e:	74 0c                	je     c001a05c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001a050:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a058:	eb 0e                	jmp    c001a068 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a05a:	66 90                	xchg   ax,ax
c001a05c:	b8 08 00 00 00       	mov    eax,0x8
c001a061:	e9 ea 00 00 00       	jmp    c001a150 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a066:	66 90                	xchg   ax,ax
c001a068:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a06f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a078:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a07f:	83 f8 ff             	cmp    eax,0xffffffff
c001a082:	75 34                	jne    c001a0b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001a084:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a088:	88 c2                	mov    dl,al
c001a08a:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a08f:	01 d0                	add    eax,edx
c001a091:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a095:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c001a09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a09f:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c001a0a6:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a0ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a0af:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001a0b6:	eb 18                	jmp    c001a0d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001a0b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a0bc:	88 c2                	mov    dl,al
c001a0be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0c2:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a0c9:	01 d0                	add    eax,edx
c001a0cb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a0cf:	90                   	nop
c001a0d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0d4:	88 04 24             	mov    BYTE PTR [esp],al
c001a0d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a0db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a0e7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a0ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0f4:	83 ec 0c             	sub    esp,0xc
c001a0f7:	68 00 20 00 00       	push   0x2000
c001a0fc:	e8 2a 4a ff ff       	call   c000eb2b <malloc>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a108:	68 00 20 00 00       	push   0x2000
c001a10d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a111:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a115:	50                   	push   eax
c001a116:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a11a:	50                   	push   eax
c001a11b:	e8 e6 b4 fe ff       	call   c0005606 <f_mkfs>
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a127:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a12c:	75 0a                	jne    c001a138 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a12e:	b8 00 00 00 00       	mov    eax,0x0
c001a133:	eb 1b                	jmp    c001a150 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a135:	8d 76 00             	lea    esi,[esi+0x0]
c001a138:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a13d:	75 09                	jne    c001a148 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001a13f:	b8 09 00 00 00       	mov    eax,0x9
c001a144:	eb 0a                	jmp    c001a150 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a146:	66 90                	xchg   ax,ax
c001a148:	b8 01 00 00 00       	mov    eax,0x1
c001a14d:	8d 76 00             	lea    esi,[esi+0x0]
c001a150:	83 c4 2c             	add    esp,0x2c
c001a153:	c3                   	ret    

c001a154 <FAT::tryMount(LogicalDisk*, int)>:
c001a154:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001a15a:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a15f:	83 f8 14             	cmp    eax,0x14
c001a162:	75 18                	jne    c001a17c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a164:	83 ec 0c             	sub    esp,0xc
c001a167:	68 b4 3f 02 c0       	push   0xc0023fb4
c001a16c:	e8 01 4d ff ff       	call   c000ee72 <KePanic(char const*)>
c001a171:	83 c4 10             	add    esp,0x10
c001a174:	b0 00                	mov    al,0x0
c001a176:	e9 ed 01 00 00       	jmp    c001a368 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a17b:	90                   	nop
c001a17c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a183:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a189:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a18f:	3d 00 02 00 00       	cmp    eax,0x200
c001a194:	74 0a                	je     c001a1a0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a196:	b0 00                	mov    al,0x0
c001a198:	e9 cb 01 00 00       	jmp    c001a368 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a19d:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001a1a8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a1af:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a1b6:	83 f8 ff             	cmp    eax,0xffffffff
c001a1b9:	74 09                	je     c001a1c4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a1bb:	b0 01                	mov    al,0x1
c001a1bd:	e9 a6 01 00 00       	jmp    c001a368 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a1c2:	66 90                	xchg   ax,ax
c001a1c4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001a1ce:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001a1d6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001a1dd:	88 c2                	mov    dl,al
c001a1df:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a1e4:	01 d0                	add    eax,edx
c001a1e6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001a1ed:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c001a1f3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a1fa:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c001a201:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a206:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001a20d:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001a214:	83 ec 0c             	sub    esp,0xc
c001a217:	68 34 02 00 00       	push   0x234
c001a21c:	e8 0a 49 ff ff       	call   c000eb2b <malloc>
c001a221:	83 c4 10             	add    esp,0x10
c001a224:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001a22b:	83 ec 04             	sub    esp,0x4
c001a22e:	6a 00                	push   0x0
c001a230:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a237:	50                   	push   eax
c001a238:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a23f:	e8 9d 9b fe ff       	call   c0003de1 <f_mount>
c001a244:	83 c4 10             	add    esp,0x10
c001a247:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001a24e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001a256:	74 1c                	je     c001a274 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a258:	83 ec 0c             	sub    esp,0xc
c001a25b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a262:	e8 e4 48 ff ff       	call   c000eb4b <rfree>
c001a267:	83 c4 10             	add    esp,0x10
c001a26a:	b0 00                	mov    al,0x0
c001a26c:	e9 f7 00 00 00       	jmp    c001a368 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a271:	8d 76 00             	lea    esi,[esi+0x0]
c001a274:	83 ec 04             	sub    esp,0x4
c001a277:	68 00 01 00 00       	push   0x100
c001a27c:	6a 00                	push   0x0
c001a27e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a285:	50                   	push   eax
c001a286:	e8 65 62 fe ff       	call   c00004f0 <memset>
c001a28b:	83 c4 10             	add    esp,0x10
c001a28e:	83 ec 08             	sub    esp,0x8
c001a291:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a298:	50                   	push   eax
c001a299:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a2a0:	50                   	push   eax
c001a2a1:	e8 9a 65 fe ff       	call   c0000840 <strcat>
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	83 ec 08             	sub    esp,0x8
c001a2ac:	68 c2 3f 02 c0       	push   0xc0023fc2
c001a2b1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a2b8:	50                   	push   eax
c001a2b9:	e8 82 65 fe ff       	call   c0000840 <strcat>
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	83 ec 04             	sub    esp,0x4
c001a2c4:	6a 01                	push   0x1
c001a2c6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001a2cd:	50                   	push   eax
c001a2ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2d2:	50                   	push   eax
c001a2d3:	e8 6b 9b fe ff       	call   c0003e43 <f_open>
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001a2e2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001a2e9:	85 c0                	test   eax,eax
c001a2eb:	74 0b                	je     c001a2f8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a2ed:	78 31                	js     c001a320 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a2ef:	83 e8 04             	sub    eax,0x4
c001a2f2:	83 f8 01             	cmp    eax,0x1
c001a2f5:	77 29                	ja     c001a320 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a2f7:	90                   	nop
c001a2f8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001a300:	83 ec 0c             	sub    esp,0xc
c001a303:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a307:	50                   	push   eax
c001a308:	e8 05 a3 fe ff       	call   c0004612 <f_close>
c001a30d:	83 c4 10             	add    esp,0x10
c001a310:	90                   	nop
c001a311:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001a319:	85 c0                	test   eax,eax
c001a31b:	74 43                	je     c001a360 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001a31d:	eb 31                	jmp    c001a350 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a31f:	90                   	nop
c001a320:	83 ec 0c             	sub    esp,0xc
c001a323:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a32a:	e8 1c 48 ff ff       	call   c000eb4b <rfree>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	83 ec 04             	sub    esp,0x4
c001a335:	6a 00                	push   0x0
c001a337:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a33e:	50                   	push   eax
c001a33f:	6a 00                	push   0x0
c001a341:	e8 9b 9a fe ff       	call   c0003de1 <f_mount>
c001a346:	83 c4 10             	add    esp,0x10
c001a349:	b0 00                	mov    al,0x0
c001a34b:	eb 1b                	jmp    c001a368 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a355:	83 c0 01             	add    eax,0x1
c001a358:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c001a35d:	8d 76 00             	lea    esi,[esi+0x0]
c001a360:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001a367:	90                   	nop
c001a368:	81 c4 4c 03 00 00    	add    esp,0x34c
c001a36e:	c3                   	ret    
c001a36f:	90                   	nop

c001a370 <FAT::allocateSwapfile(char const*, int)>:
c001a370:	55                   	push   ebp
c001a371:	57                   	push   edi
c001a372:	56                   	push   esi
c001a373:	53                   	push   ebx
c001a374:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a37a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a385:	83 ec 0c             	sub    esp,0xc
c001a388:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a38f:	e8 97 47 ff ff       	call   c000eb2b <malloc>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	89 c7                	mov    edi,eax
c001a399:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001a39e:	83 ec 04             	sub    esp,0x4
c001a3a1:	50                   	push   eax
c001a3a2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a3a9:	57                   	push   edi
c001a3aa:	e8 83 dd fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001a3af:	83 c4 10             	add    esp,0x10
c001a3b2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a3b9:	83 ec 04             	sub    esp,0x4
c001a3bc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a3c0:	50                   	push   eax
c001a3c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3c5:	50                   	push   eax
c001a3c6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a3cd:	e8 80 e0 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001a3d2:	83 c4 10             	add    esp,0x10
c001a3d5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a3dc:	c1 e0 14             	shl    eax,0x14
c001a3df:	89 c7                	mov    edi,eax
c001a3e1:	89 c5                	mov    ebp,eax
c001a3e3:	c1 fd 1f             	sar    ebp,0x1f
c001a3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3ee:	89 f9                	mov    ecx,edi
c001a3f0:	31 c1                	xor    ecx,eax
c001a3f2:	89 cb                	mov    ebx,ecx
c001a3f4:	89 e9                	mov    ecx,ebp
c001a3f6:	31 d1                	xor    ecx,edx
c001a3f8:	89 ce                	mov    esi,ecx
c001a3fa:	89 f0                	mov    eax,esi
c001a3fc:	09 d8                	or     eax,ebx
c001a3fe:	0f 84 9c 00 00 00    	je     c001a4a0 <FAT::allocateSwapfile(char const*, int)+0x130>
c001a404:	83 ec 0c             	sub    esp,0xc
c001a407:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a40e:	e8 0b df fe ff       	call   c000831e <File::unlink()>
c001a413:	83 c4 10             	add    esp,0x10
c001a416:	83 ec 08             	sub    esp,0x8
c001a419:	6a 12                	push   0x12
c001a41b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a422:	e8 29 dd fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001a427:	83 c4 10             	add    esp,0x10
c001a42a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a431:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a437:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a43e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a445:	c1 e0 14             	shl    eax,0x14
c001a448:	83 ec 04             	sub    esp,0x4
c001a44b:	6a 01                	push   0x1
c001a44d:	50                   	push   eax
c001a44e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a455:	e8 3f b0 fe ff       	call   c0005499 <f_expand>
c001a45a:	83 c4 10             	add    esp,0x10
c001a45d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a464:	8b 00                	mov    eax,DWORD PTR [eax]
c001a466:	83 c0 10             	add    eax,0x10
c001a469:	8b 00                	mov    eax,DWORD PTR [eax]
c001a46b:	83 ec 0c             	sub    esp,0xc
c001a46e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a472:	52                   	push   edx
c001a473:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a477:	52                   	push   edx
c001a478:	6a 00                	push   0x0
c001a47a:	68 00 04 00 00       	push   0x400
c001a47f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a486:	ff d0                	call   eax
c001a488:	83 c4 20             	add    esp,0x20
c001a48b:	83 ec 0c             	sub    esp,0xc
c001a48e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a495:	e8 14 dd fe ff       	call   c00081ae <File::close()>
c001a49a:	83 c4 10             	add    esp,0x10
c001a49d:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a0:	83 ec 08             	sub    esp,0x8
c001a4a3:	6a 01                	push   0x1
c001a4a5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a4ac:	e8 9f dc fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001a4b1:	83 c4 10             	add    esp,0x10
c001a4b4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a4bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4bd:	83 c0 0c             	add    eax,0xc
c001a4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4c2:	83 ec 0c             	sub    esp,0xc
c001a4c5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a4c9:	52                   	push   edx
c001a4ca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001a4ce:	52                   	push   edx
c001a4cf:	6a 00                	push   0x0
c001a4d1:	6a 04                	push   0x4
c001a4d3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a4da:	ff d0                	call   eax
c001a4dc:	83 c4 20             	add    esp,0x20
c001a4df:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a4e6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a4ec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a4f3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a4fa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a4fd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a50e:	e8 9b dc fe ff       	call   c00081ae <File::close()>
c001a513:	83 c4 10             	add    esp,0x10
c001a516:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001a51d:	ba 00 00 00 00       	mov    edx,0x0
c001a522:	81 c4 3c 04 00 00    	add    esp,0x43c
c001a528:	5b                   	pop    ebx
c001a529:	5e                   	pop    esi
c001a52a:	5f                   	pop    edi
c001a52b:	5d                   	pop    ebp
c001a52c:	c3                   	ret    
c001a52d:	90                   	nop
c001a52e:	66 90                	xchg   ax,ax

c001a530 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a530:	57                   	push   edi
c001a531:	56                   	push   esi
c001a532:	53                   	push   ebx
c001a533:	81 ec 50 02 00 00    	sub    esp,0x250
c001a539:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001a541:	74 0d                	je     c001a550 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001a543:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001a54b:	75 0f                	jne    c001a55c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001a54d:	8d 76 00             	lea    esi,[esi+0x0]
c001a550:	b8 04 00 00 00       	mov    eax,0x4
c001a555:	e9 3a 01 00 00       	jmp    c001a694 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a55a:	66 90                	xchg   ax,ax
c001a55c:	83 ec 08             	sub    esp,0x8
c001a55f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a566:	50                   	push   eax
c001a567:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001a56e:	e8 6c a3 fe ff       	call   c00048df <f_readdir>
c001a573:	83 c4 10             	add    esp,0x10
c001a576:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001a57d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001a584:	83 ec 0c             	sub    esp,0xc
c001a587:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a58e:	83 c0 16             	add    eax,0x16
c001a591:	50                   	push   eax
c001a592:	e8 d9 5f fe ff       	call   c0000570 <strlen>
c001a597:	83 c4 10             	add    esp,0x10
c001a59a:	ba 00 00 00 00       	mov    edx,0x0
c001a59f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a5a7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001a5ae:	0f b6 c0             	movzx  eax,al
c001a5b1:	83 e0 10             	and    eax,0x10
c001a5b4:	74 0a                	je     c001a5c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001a5b6:	b8 02 00 00 00       	mov    eax,0x2
c001a5bb:	eb 0b                	jmp    c001a5c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001a5bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a5c0:	b8 01 00 00 00       	mov    eax,0x1
c001a5c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a5cc:	83 ec 08             	sub    esp,0x8
c001a5cf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a5d6:	83 c0 16             	add    eax,0x16
c001a5d9:	50                   	push   eax
c001a5da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a5de:	83 c0 10             	add    eax,0x10
c001a5e1:	50                   	push   eax
c001a5e2:	e8 59 60 fe ff       	call   c0000640 <strcpy>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001a5f1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001a5f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5fc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001a603:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001a60a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001a611:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001a618:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001a61f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001a626:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001a62d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001a634:	89 c6                	mov    esi,eax
c001a636:	89 d7                	mov    edi,edx
c001a638:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a63a:	89 c8                	mov    eax,ecx
c001a63c:	89 fa                	mov    edx,edi
c001a63e:	89 f3                	mov    ebx,esi
c001a640:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001a647:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001a64e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a655:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a65c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a662:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a669:	0f be c0             	movsx  eax,al
c001a66c:	85 c0                	test   eax,eax
c001a66e:	75 08                	jne    c001a678 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a670:	b8 07 00 00 00       	mov    eax,0x7
c001a675:	eb 1d                	jmp    c001a694 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a677:	90                   	nop
c001a678:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a67f:	85 c0                	test   eax,eax
c001a681:	75 09                	jne    c001a68c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a683:	b8 00 00 00 00       	mov    eax,0x0
c001a688:	eb 0a                	jmp    c001a694 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a68a:	66 90                	xchg   ax,ax
c001a68c:	b8 01 00 00 00       	mov    eax,0x1
c001a691:	8d 76 00             	lea    esi,[esi+0x0]
c001a694:	81 c4 50 02 00 00    	add    esp,0x250
c001a69a:	5b                   	pop    ebx
c001a69b:	5e                   	pop    esi
c001a69c:	5f                   	pop    edi
c001a69d:	c3                   	ret    
c001a69e:	66 90                	xchg   ax,ax

c001a6a0 <FAT::read(void*, unsigned long, void*, int*)>:
c001a6a0:	83 ec 1c             	sub    esp,0x1c
c001a6a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6a8:	74 0a                	je     c001a6b4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a6aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a6af:	75 0b                	jne    c001a6bc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a6b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6b4:	b8 04 00 00 00       	mov    eax,0x4
c001a6b9:	eb 41                	jmp    c001a6fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a6bb:	90                   	nop
c001a6bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6c0:	50                   	push   eax
c001a6c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6cd:	e8 34 9a fe ff       	call   c0004106 <f_read>
c001a6d2:	83 c4 10             	add    esp,0x10
c001a6d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6dd:	89 c2                	mov    edx,eax
c001a6df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6e3:	89 10                	mov    DWORD PTR [eax],edx
c001a6e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6e9:	85 c0                	test   eax,eax
c001a6eb:	75 07                	jne    c001a6f4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a6ed:	b8 00 00 00 00       	mov    eax,0x0
c001a6f2:	eb 08                	jmp    c001a6fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a6f4:	b8 01 00 00 00       	mov    eax,0x1
c001a6f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6fc:	83 c4 1c             	add    esp,0x1c
c001a6ff:	c3                   	ret    

c001a700 <FAT::write(void*, unsigned long, void*, int*)>:
c001a700:	83 ec 1c             	sub    esp,0x1c
c001a703:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a708:	74 0a                	je     c001a714 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a70a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a70f:	75 0b                	jne    c001a71c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a711:	8d 76 00             	lea    esi,[esi+0x0]
c001a714:	b8 04 00 00 00       	mov    eax,0x4
c001a719:	eb 41                	jmp    c001a75c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a71b:	90                   	nop
c001a71c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a720:	50                   	push   eax
c001a721:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a725:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a729:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a72d:	e8 d3 9b fe ff       	call   c0004305 <f_write>
c001a732:	83 c4 10             	add    esp,0x10
c001a735:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a73d:	89 c2                	mov    edx,eax
c001a73f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a743:	89 10                	mov    DWORD PTR [eax],edx
c001a745:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a749:	85 c0                	test   eax,eax
c001a74b:	75 07                	jne    c001a754 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a74d:	b8 00 00 00 00       	mov    eax,0x0
c001a752:	eb 08                	jmp    c001a75c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a754:	b8 01 00 00 00       	mov    eax,0x1
c001a759:	8d 76 00             	lea    esi,[esi+0x0]
c001a75c:	83 c4 1c             	add    esp,0x1c
c001a75f:	c3                   	ret    

c001a760 <FAT::close(void*)>:
c001a760:	83 ec 1c             	sub    esp,0x1c
c001a763:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a768:	75 0a                	jne    c001a774 <FAT::close(void*)+0x14>
c001a76a:	b8 04 00 00 00       	mov    eax,0x4
c001a76f:	eb 3f                	jmp    c001a7b0 <FAT::close(void*)+0x50>
c001a771:	8d 76 00             	lea    esi,[esi+0x0]
c001a774:	83 ec 0c             	sub    esp,0xc
c001a777:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a77b:	e8 92 9e fe ff       	call   c0004612 <f_close>
c001a780:	83 c4 10             	add    esp,0x10
c001a783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a787:	83 ec 0c             	sub    esp,0xc
c001a78a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a78e:	e8 a8 43 ff ff       	call   c000eb3b <free>
c001a793:	83 c4 10             	add    esp,0x10
c001a796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a79a:	85 c0                	test   eax,eax
c001a79c:	75 0a                	jne    c001a7a8 <FAT::close(void*)+0x48>
c001a79e:	b8 00 00 00 00       	mov    eax,0x0
c001a7a3:	eb 0b                	jmp    c001a7b0 <FAT::close(void*)+0x50>
c001a7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7a8:	b8 01 00 00 00       	mov    eax,0x1
c001a7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a7b0:	83 c4 1c             	add    esp,0x1c
c001a7b3:	c3                   	ret    

c001a7b4 <FAT::closeDir(void*)>:
c001a7b4:	83 ec 1c             	sub    esp,0x1c
c001a7b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a7bc:	75 0a                	jne    c001a7c8 <FAT::closeDir(void*)+0x14>
c001a7be:	b8 04 00 00 00       	mov    eax,0x4
c001a7c3:	eb 3f                	jmp    c001a804 <FAT::closeDir(void*)+0x50>
c001a7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7c8:	83 ec 0c             	sub    esp,0xc
c001a7cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7cf:	e8 e9 a0 fe ff       	call   c00048bd <f_closedir>
c001a7d4:	83 c4 10             	add    esp,0x10
c001a7d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7db:	83 ec 0c             	sub    esp,0xc
c001a7de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e2:	e8 54 43 ff ff       	call   c000eb3b <free>
c001a7e7:	83 c4 10             	add    esp,0x10
c001a7ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7ee:	85 c0                	test   eax,eax
c001a7f0:	75 0a                	jne    c001a7fc <FAT::closeDir(void*)+0x48>
c001a7f2:	b8 00 00 00 00       	mov    eax,0x0
c001a7f7:	eb 0b                	jmp    c001a804 <FAT::closeDir(void*)+0x50>
c001a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7fc:	b8 01 00 00 00       	mov    eax,0x1
c001a801:	8d 76 00             	lea    esi,[esi+0x0]
c001a804:	83 c4 1c             	add    esp,0x1c
c001a807:	c3                   	ret    

c001a808 <FAT::truncate(void*, unsigned long long)>:
c001a808:	83 ec 2c             	sub    esp,0x2c
c001a80b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a80f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a813:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a817:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a81b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a820:	75 0a                	jne    c001a82c <FAT::truncate(void*, unsigned long long)+0x24>
c001a822:	b8 04 00 00 00       	mov    eax,0x4
c001a827:	eb 47                	jmp    c001a870 <FAT::truncate(void*, unsigned long long)+0x68>
c001a829:	8d 76 00             	lea    esi,[esi+0x0]
c001a82c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a830:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a833:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a837:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a83f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a843:	83 ec 08             	sub    esp,0x8
c001a846:	50                   	push   eax
c001a847:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a84b:	e8 f1 9d fe ff       	call   c0004641 <f_lseek>
c001a850:	83 c4 10             	add    esp,0x10
c001a853:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a857:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a85b:	85 c0                	test   eax,eax
c001a85d:	75 09                	jne    c001a868 <FAT::truncate(void*, unsigned long long)+0x60>
c001a85f:	b8 00 00 00 00       	mov    eax,0x0
c001a864:	eb 0a                	jmp    c001a870 <FAT::truncate(void*, unsigned long long)+0x68>
c001a866:	66 90                	xchg   ax,ax
c001a868:	b8 01 00 00 00       	mov    eax,0x1
c001a86d:	8d 76 00             	lea    esi,[esi+0x0]
c001a870:	83 c4 2c             	add    esp,0x2c
c001a873:	c3                   	ret    

c001a874 <FAT::seek(void*, unsigned long long)>:
c001a874:	83 ec 2c             	sub    esp,0x2c
c001a877:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a87b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a87f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a887:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a88c:	75 0a                	jne    c001a898 <FAT::seek(void*, unsigned long long)+0x24>
c001a88e:	b8 04 00 00 00       	mov    eax,0x4
c001a893:	eb 33                	jmp    c001a8c8 <FAT::seek(void*, unsigned long long)+0x54>
c001a895:	8d 76 00             	lea    esi,[esi+0x0]
c001a898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a89c:	83 ec 08             	sub    esp,0x8
c001a89f:	50                   	push   eax
c001a8a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a8a4:	e8 98 9d fe ff       	call   c0004641 <f_lseek>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8b4:	85 c0                	test   eax,eax
c001a8b6:	75 08                	jne    c001a8c0 <FAT::seek(void*, unsigned long long)+0x4c>
c001a8b8:	b8 00 00 00 00       	mov    eax,0x0
c001a8bd:	eb 09                	jmp    c001a8c8 <FAT::seek(void*, unsigned long long)+0x54>
c001a8bf:	90                   	nop
c001a8c0:	b8 01 00 00 00       	mov    eax,0x1
c001a8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c8:	83 c4 2c             	add    esp,0x2c
c001a8cb:	c3                   	ret    

c001a8cc <fatWrapperReadDisk>:
c001a8cc:	53                   	push   ebx
c001a8cd:	83 ec 18             	sub    esp,0x18
c001a8d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a8d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8dd:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a8e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a8e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a8ec:	ba 00 00 00 00       	mov    edx,0x0
c001a8f1:	83 ec 0c             	sub    esp,0xc
c001a8f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a8f8:	53                   	push   ebx
c001a8f9:	52                   	push   edx
c001a8fa:	50                   	push   eax
c001a8fb:	51                   	push   ecx
c001a8fc:	e8 e7 f7 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a901:	83 c4 20             	add    esp,0x20
c001a904:	83 c4 18             	add    esp,0x18
c001a907:	5b                   	pop    ebx
c001a908:	c3                   	ret    
c001a909:	8d 76 00             	lea    esi,[esi+0x0]

c001a90c <fatWrapperWriteDisk>:
c001a90c:	53                   	push   ebx
c001a90d:	83 ec 18             	sub    esp,0x18
c001a910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a914:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a918:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a91d:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a924:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a928:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a92c:	ba 00 00 00 00       	mov    edx,0x0
c001a931:	83 ec 0c             	sub    esp,0xc
c001a934:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a938:	53                   	push   ebx
c001a939:	52                   	push   edx
c001a93a:	50                   	push   eax
c001a93b:	51                   	push   ecx
c001a93c:	e8 13 f8 fe ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c001a941:	83 c4 20             	add    esp,0x20
c001a944:	83 c4 18             	add    esp,0x18
c001a947:	5b                   	pop    ebx
c001a948:	c3                   	ret    
c001a949:	8d 76 00             	lea    esi,[esi+0x0]

c001a94c <fatWrapperIoctl>:
c001a94c:	53                   	push   ebx
c001a94d:	83 ec 28             	sub    esp,0x28
c001a950:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a954:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a958:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a95c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a965:	83 f8 02             	cmp    eax,0x2
c001a968:	75 32                	jne    c001a99c <fatWrapperIoctl+0x50>
c001a96a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a96e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a972:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a977:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a97e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a984:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a98a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a98e:	66 89 02             	mov    WORD PTR [edx],ax
c001a991:	b8 00 00 00 00       	mov    eax,0x0
c001a996:	e9 c5 00 00 00       	jmp    c001aa60 <fatWrapperIoctl+0x114>
c001a99b:	90                   	nop
c001a99c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a9a1:	83 f8 01             	cmp    eax,0x1
c001a9a4:	75 6a                	jne    c001aa10 <fatWrapperIoctl+0xc4>
c001a9a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a9ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a9b3:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a9ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a9c0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a9c6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a9cc:	89 c8                	mov    eax,ecx
c001a9ce:	89 da                	mov    edx,ebx
c001a9d0:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a9d4:	c1 e0 0a             	shl    eax,0xa
c001a9d7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a9dc:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001a9e3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a9e9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a9ef:	89 cb                	mov    ebx,ecx
c001a9f1:	c1 fb 1f             	sar    ebx,0x1f
c001a9f4:	53                   	push   ebx
c001a9f5:	51                   	push   ecx
c001a9f6:	52                   	push   edx
c001a9f7:	50                   	push   eax
c001a9f8:	e8 c7 59 00 00       	call   c00203c4 <__udivdi3>
c001a9fd:	83 c4 10             	add    esp,0x10
c001aa00:	89 c2                	mov    edx,eax
c001aa02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa06:	89 10                	mov    DWORD PTR [eax],edx
c001aa08:	b8 00 00 00 00       	mov    eax,0x0
c001aa0d:	eb 51                	jmp    c001aa60 <fatWrapperIoctl+0x114>
c001aa0f:	90                   	nop
c001aa10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aa15:	85 c0                	test   eax,eax
c001aa17:	75 07                	jne    c001aa20 <fatWrapperIoctl+0xd4>
c001aa19:	b8 00 00 00 00       	mov    eax,0x0
c001aa1e:	eb 40                	jmp    c001aa60 <fatWrapperIoctl+0x114>
c001aa20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aa25:	83 f8 03             	cmp    eax,0x3
c001aa28:	75 1a                	jne    c001aa44 <fatWrapperIoctl+0xf8>
c001aa2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa36:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001aa3c:	b8 00 00 00 00       	mov    eax,0x0
c001aa41:	eb 1d                	jmp    c001aa60 <fatWrapperIoctl+0x114>
c001aa43:	90                   	nop
c001aa44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aa49:	83 f8 04             	cmp    eax,0x4
c001aa4c:	75 0a                	jne    c001aa58 <fatWrapperIoctl+0x10c>
c001aa4e:	b8 00 00 00 00       	mov    eax,0x0
c001aa53:	eb 0b                	jmp    c001aa60 <fatWrapperIoctl+0x114>
c001aa55:	8d 76 00             	lea    esi,[esi+0x0]
c001aa58:	b8 04 00 00 00       	mov    eax,0x4
c001aa5d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa60:	83 c4 28             	add    esp,0x28
c001aa63:	5b                   	pop    ebx
c001aa64:	c3                   	ret    
c001aa65:	90                   	nop
c001aa66:	66 90                	xchg   ax,ax

c001aa68 <FAT::FAT()>:
c001aa68:	83 ec 1c             	sub    esp,0x1c
c001aa6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa6f:	83 ec 0c             	sub    esp,0xc
c001aa72:	50                   	push   eax
c001aa73:	e8 f8 d2 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001aa78:	83 c4 10             	add    esp,0x10
c001aa7b:	ba d8 3f 02 c0       	mov    edx,0xc0023fd8
c001aa80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa84:	89 10                	mov    DWORD PTR [eax],edx
c001aa86:	c7 05 a0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a0,0x0
c001aa90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa98:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001aa9d:	7f 19                	jg     c001aab8 <FAT::FAT()+0x50>
c001aa9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aaa3:	c7 04 85 c0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2840],0xffffffff
c001aaae:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001aab3:	eb e3                	jmp    c001aa98 <FAT::FAT()+0x30>
c001aab5:	8d 76 00             	lea    esi,[esi+0x0]
c001aab8:	90                   	nop
c001aab9:	83 c4 1c             	add    esp,0x1c
c001aabc:	c3                   	ret    
c001aabd:	90                   	nop
c001aabe:	66 90                	xchg   ax,ax

c001aac0 <FAT::fixFilepath(char*)>:
c001aac0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aac4:	8a 00                	mov    al,BYTE PTR [eax]
c001aac6:	0f be c0             	movsx  eax,al
c001aac9:	83 f8 40             	cmp    eax,0x40
c001aacc:	7e 2e                	jle    c001aafc <FAT::fixFilepath(char*)+0x3c>
c001aace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aad2:	8a 00                	mov    al,BYTE PTR [eax]
c001aad4:	83 e8 41             	sub    eax,0x41
c001aad7:	88 c2                	mov    dl,al
c001aad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aadd:	88 10                	mov    BYTE PTR [eax],dl
c001aadf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aae3:	8a 00                	mov    al,BYTE PTR [eax]
c001aae5:	0f be c0             	movsx  eax,al
c001aae8:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001aaef:	83 c0 30             	add    eax,0x30
c001aaf2:	88 c2                	mov    dl,al
c001aaf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aaf8:	88 10                	mov    BYTE PTR [eax],dl
c001aafa:	66 90                	xchg   ax,ax
c001aafc:	90                   	nop
c001aafd:	c3                   	ret    
c001aafe:	66 90                	xchg   ax,ax

c001ab00 <FAT::open(char const*, void**, FileOpenMode)>:
c001ab00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab06:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab0e:	74 0c                	je     c001ab1c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ab10:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab18:	75 0e                	jne    c001ab28 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ab1a:	66 90                	xchg   ax,ax
c001ab1c:	b8 04 00 00 00       	mov    eax,0x4
c001ab21:	e9 46 01 00 00       	jmp    c001ac6c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ab26:	66 90                	xchg   ax,ax
c001ab28:	83 ec 08             	sub    esp,0x8
c001ab2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab32:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab36:	50                   	push   eax
c001ab37:	e8 04 5b fe ff       	call   c0000640 <strcpy>
c001ab3c:	83 c4 10             	add    esp,0x10
c001ab3f:	83 ec 08             	sub    esp,0x8
c001ab42:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab46:	50                   	push   eax
c001ab47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab4e:	e8 6d ff ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001ab53:	83 c4 10             	add    esp,0x10
c001ab56:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ab5e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ab65:	83 e0 01             	and    eax,0x1
c001ab68:	74 12                	je     c001ab7c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001ab6a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ab71:	83 c8 01             	or     eax,0x1
c001ab74:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ab7b:	90                   	nop
c001ab7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ab83:	83 e0 04             	and    eax,0x4
c001ab86:	74 24                	je     c001abac <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001ab88:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ab8f:	83 c8 30             	or     eax,0x30
c001ab92:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ab99:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aba0:	83 c8 02             	or     eax,0x2
c001aba3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001abaa:	66 90                	xchg   ax,ax
c001abac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001abb3:	83 e0 02             	and    eax,0x2
c001abb6:	74 14                	je     c001abcc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001abb8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001abbf:	83 c8 02             	or     eax,0x2
c001abc2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001abc9:	8d 76 00             	lea    esi,[esi+0x0]
c001abcc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001abd3:	83 e0 08             	and    eax,0x8
c001abd6:	74 14                	je     c001abec <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001abd8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001abdf:	83 c8 04             	or     eax,0x4
c001abe2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001abe9:	8d 76 00             	lea    esi,[esi+0x0]
c001abec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001abf3:	83 e0 10             	and    eax,0x10
c001abf6:	74 14                	je     c001ac0c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001abf8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001abff:	83 c8 08             	or     eax,0x8
c001ac02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ac09:	8d 76 00             	lea    esi,[esi+0x0]
c001ac0c:	83 ec 0c             	sub    esp,0xc
c001ac0f:	68 28 02 00 00       	push   0x228
c001ac14:	e8 12 3f ff ff       	call   c000eb2b <malloc>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	89 c2                	mov    edx,eax
c001ac1e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ac25:	89 10                	mov    DWORD PTR [eax],edx
c001ac27:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ac2f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ac36:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac38:	83 ec 04             	sub    esp,0x4
c001ac3b:	52                   	push   edx
c001ac3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ac40:	52                   	push   edx
c001ac41:	50                   	push   eax
c001ac42:	e8 fc 91 fe ff       	call   c0003e43 <f_open>
c001ac47:	83 c4 10             	add    esp,0x10
c001ac4a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ac51:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ac59:	74 09                	je     c001ac64 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001ac5b:	b8 01 00 00 00       	mov    eax,0x1
c001ac60:	eb 0a                	jmp    c001ac6c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ac62:	66 90                	xchg   ax,ax
c001ac64:	b8 00 00 00 00       	mov    eax,0x0
c001ac69:	8d 76 00             	lea    esi,[esi+0x0]
c001ac6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac72:	c3                   	ret    
c001ac73:	90                   	nop

c001ac74 <FAT::openDir(char const*, void**)>:
c001ac74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ac7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ac82:	74 0c                	je     c001ac90 <FAT::openDir(char const*, void**)+0x1c>
c001ac84:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ac8c:	75 0e                	jne    c001ac9c <FAT::openDir(char const*, void**)+0x28>
c001ac8e:	66 90                	xchg   ax,ax
c001ac90:	b8 04 00 00 00       	mov    eax,0x4
c001ac95:	e9 82 00 00 00       	jmp    c001ad1c <FAT::openDir(char const*, void**)+0xa8>
c001ac9a:	66 90                	xchg   ax,ax
c001ac9c:	83 ec 08             	sub    esp,0x8
c001ac9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aca6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acaa:	50                   	push   eax
c001acab:	e8 90 59 fe ff       	call   c0000640 <strcpy>
c001acb0:	83 c4 10             	add    esp,0x10
c001acb3:	83 ec 08             	sub    esp,0x8
c001acb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acba:	50                   	push   eax
c001acbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acc2:	e8 f9 fd ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001acc7:	83 c4 10             	add    esp,0x10
c001acca:	83 ec 0c             	sub    esp,0xc
c001accd:	6a 30                	push   0x30
c001accf:	e8 57 3e ff ff       	call   c000eb2b <malloc>
c001acd4:	83 c4 10             	add    esp,0x10
c001acd7:	89 c2                	mov    edx,eax
c001acd9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ace0:	89 10                	mov    DWORD PTR [eax],edx
c001ace2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ace9:	8b 00                	mov    eax,DWORD PTR [eax]
c001aceb:	83 ec 08             	sub    esp,0x8
c001acee:	8d 54 24 14          	lea    edx,[esp+0x14]
c001acf2:	52                   	push   edx
c001acf3:	50                   	push   eax
c001acf4:	e8 f9 9a fe ff       	call   c00047f2 <f_opendir>
c001acf9:	83 c4 10             	add    esp,0x10
c001acfc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad03:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ad0b:	74 07                	je     c001ad14 <FAT::openDir(char const*, void**)+0xa0>
c001ad0d:	b8 01 00 00 00       	mov    eax,0x1
c001ad12:	eb 08                	jmp    c001ad1c <FAT::openDir(char const*, void**)+0xa8>
c001ad14:	b8 00 00 00 00       	mov    eax,0x0
c001ad19:	8d 76 00             	lea    esi,[esi+0x0]
c001ad1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad22:	c3                   	ret    
c001ad23:	90                   	nop

c001ad24 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ad24:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ad2a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ad32:	75 0c                	jne    c001ad40 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001ad34:	b8 04 00 00 00       	mov    eax,0x4
c001ad39:	e9 d6 00 00 00       	jmp    c001ae14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ad3e:	66 90                	xchg   ax,ax
c001ad40:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ad48:	75 0a                	jne    c001ad54 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001ad4a:	b8 04 00 00 00       	mov    eax,0x4
c001ad4f:	e9 c0 00 00 00       	jmp    c001ae14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ad54:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ad5c:	75 0a                	jne    c001ad68 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001ad5e:	b8 04 00 00 00       	mov    eax,0x4
c001ad63:	e9 ac 00 00 00       	jmp    c001ae14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ad68:	83 ec 08             	sub    esp,0x8
c001ad6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad72:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ad79:	50                   	push   eax
c001ad7a:	e8 c1 58 fe ff       	call   c0000640 <strcpy>
c001ad7f:	83 c4 10             	add    esp,0x10
c001ad82:	83 ec 08             	sub    esp,0x8
c001ad85:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ad8c:	50                   	push   eax
c001ad8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad94:	e8 27 fd ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001ad99:	83 c4 10             	add    esp,0x10
c001ad9c:	83 ec 08             	sub    esp,0x8
c001ad9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ada3:	50                   	push   eax
c001ada4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001adab:	50                   	push   eax
c001adac:	e8 c0 9b fe ff       	call   c0004971 <f_stat>
c001adb1:	83 c4 10             	add    esp,0x10
c001adb4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001adbb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001adc2:	85 c0                	test   eax,eax
c001adc4:	74 0a                	je     c001add0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001adc6:	83 f8 04             	cmp    eax,0x4
c001adc9:	74 39                	je     c001ae04 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001adcb:	eb 3f                	jmp    c001ae0c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001adcd:	8d 76 00             	lea    esi,[esi+0x0]
c001add0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001add4:	0f b6 c0             	movzx  eax,al
c001add7:	83 e0 10             	and    eax,0x10
c001adda:	0f 95 c2             	setne  dl
c001addd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ade4:	88 10                	mov    BYTE PTR [eax],dl
c001ade6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adea:	ba 00 00 00 00       	mov    edx,0x0
c001adef:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001adf6:	89 01                	mov    DWORD PTR [ecx],eax
c001adf8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001adfb:	b8 00 00 00 00       	mov    eax,0x0
c001ae00:	eb 12                	jmp    c001ae14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ae02:	66 90                	xchg   ax,ax
c001ae04:	b8 02 00 00 00       	mov    eax,0x2
c001ae09:	eb 09                	jmp    c001ae14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ae0b:	90                   	nop
c001ae0c:	b8 01 00 00 00       	mov    eax,0x1
c001ae11:	8d 76 00             	lea    esi,[esi+0x0]
c001ae14:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ae1a:	c3                   	ret    
c001ae1b:	90                   	nop

c001ae1c <FAT::unlink(char const*)>:
c001ae1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ae22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ae2a:	75 08                	jne    c001ae34 <FAT::unlink(char const*)+0x18>
c001ae2c:	b8 04 00 00 00       	mov    eax,0x4
c001ae31:	eb 61                	jmp    c001ae94 <FAT::unlink(char const*)+0x78>
c001ae33:	90                   	nop
c001ae34:	83 ec 08             	sub    esp,0x8
c001ae37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae42:	50                   	push   eax
c001ae43:	e8 f8 57 fe ff       	call   c0000640 <strcpy>
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	83 ec 08             	sub    esp,0x8
c001ae4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae52:	50                   	push   eax
c001ae53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae5a:	e8 61 fc ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	83 ec 0c             	sub    esp,0xc
c001ae65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae69:	50                   	push   eax
c001ae6a:	e8 74 9d fe ff       	call   c0004be3 <f_unlink>
c001ae6f:	83 c4 10             	add    esp,0x10
c001ae72:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ae79:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ae80:	85 c0                	test   eax,eax
c001ae82:	75 08                	jne    c001ae8c <FAT::unlink(char const*)+0x70>
c001ae84:	b8 00 00 00 00       	mov    eax,0x0
c001ae89:	eb 09                	jmp    c001ae94 <FAT::unlink(char const*)+0x78>
c001ae8b:	90                   	nop
c001ae8c:	b8 01 00 00 00       	mov    eax,0x1
c001ae91:	8d 76 00             	lea    esi,[esi+0x0]
c001ae94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ae9a:	c3                   	ret    
c001ae9b:	90                   	nop

c001ae9c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae9c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aea2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001aea9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001aeb0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001aeb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001aeb8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aec0:	75 0a                	jne    c001aecc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001aec2:	b8 04 00 00 00       	mov    eax,0x4
c001aec7:	e9 7c 01 00 00       	jmp    c001b048 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001aecc:	83 ec 08             	sub    esp,0x8
c001aecf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001aed6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aeda:	50                   	push   eax
c001aedb:	e8 60 57 fe ff       	call   c0000640 <strcpy>
c001aee0:	83 c4 10             	add    esp,0x10
c001aee3:	83 ec 08             	sub    esp,0x8
c001aee6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aeea:	50                   	push   eax
c001aeeb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001aef2:	e8 c9 fb ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001af02:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001af0a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001af0f:	83 e0 01             	and    eax,0x1
c001af12:	74 14                	je     c001af28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001af14:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001af1b:	83 c8 01             	or     eax,0x1
c001af1e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001af25:	8d 76 00             	lea    esi,[esi+0x0]
c001af28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001af2d:	83 e0 02             	and    eax,0x2
c001af30:	74 12                	je     c001af44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001af32:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001af39:	83 c8 20             	or     eax,0x20
c001af3c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001af43:	90                   	nop
c001af44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001af49:	83 e0 04             	and    eax,0x4
c001af4c:	74 12                	je     c001af60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001af4e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001af55:	83 c8 04             	or     eax,0x4
c001af58:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001af5f:	90                   	nop
c001af60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001af65:	83 e0 08             	and    eax,0x8
c001af68:	74 12                	je     c001af7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001af6a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001af71:	83 c8 02             	or     eax,0x2
c001af74:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001af7b:	90                   	nop
c001af7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af81:	83 e0 01             	and    eax,0x1
c001af84:	74 12                	je     c001af98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001af86:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001af8d:	83 c8 01             	or     eax,0x1
c001af90:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001af97:	90                   	nop
c001af98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af9d:	83 e0 02             	and    eax,0x2
c001afa0:	74 12                	je     c001afb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001afa2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001afa9:	83 c8 20             	or     eax,0x20
c001afac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001afb3:	90                   	nop
c001afb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afb9:	83 e0 04             	and    eax,0x4
c001afbc:	74 12                	je     c001afd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001afbe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001afc5:	83 c8 04             	or     eax,0x4
c001afc8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001afcf:	90                   	nop
c001afd0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afd5:	83 e0 08             	and    eax,0x8
c001afd8:	74 12                	je     c001afec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001afda:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001afe1:	83 c8 02             	or     eax,0x2
c001afe4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001afeb:	90                   	nop
c001afec:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001aff3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001affa:	09 d0                	or     eax,edx
c001affc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b003:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b00b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b013:	83 ec 04             	sub    esp,0x4
c001b016:	52                   	push   edx
c001b017:	50                   	push   eax
c001b018:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b01c:	50                   	push   eax
c001b01d:	e8 36 a0 fe ff       	call   c0005058 <f_chmod>
c001b022:	83 c4 10             	add    esp,0x10
c001b025:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b02c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b033:	85 c0                	test   eax,eax
c001b035:	75 09                	jne    c001b040 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001b037:	b8 00 00 00 00       	mov    eax,0x0
c001b03c:	eb 0a                	jmp    c001b048 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001b03e:	66 90                	xchg   ax,ax
c001b040:	b8 01 00 00 00       	mov    eax,0x1
c001b045:	8d 76 00             	lea    esi,[esi+0x0]
c001b048:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b04e:	c3                   	ret    
c001b04f:	90                   	nop

c001b050 <FAT::rename(char const*, char const*)>:
c001b050:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b056:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b05e:	74 0c                	je     c001b06c <FAT::rename(char const*, char const*)+0x1c>
c001b060:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b068:	75 0e                	jne    c001b078 <FAT::rename(char const*, char const*)+0x28>
c001b06a:	66 90                	xchg   ax,ax
c001b06c:	b8 04 00 00 00       	mov    eax,0x4
c001b071:	e9 9e 00 00 00       	jmp    c001b114 <FAT::rename(char const*, char const*)+0xc4>
c001b076:	66 90                	xchg   ax,ax
c001b078:	83 ec 08             	sub    esp,0x8
c001b07b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b082:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b089:	50                   	push   eax
c001b08a:	e8 b1 55 fe ff       	call   c0000640 <strcpy>
c001b08f:	83 c4 10             	add    esp,0x10
c001b092:	83 ec 08             	sub    esp,0x8
c001b095:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b09c:	50                   	push   eax
c001b09d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b0a4:	e8 17 fa ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001b0a9:	83 c4 10             	add    esp,0x10
c001b0ac:	83 ec 08             	sub    esp,0x8
c001b0af:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b0b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b0ba:	50                   	push   eax
c001b0bb:	e8 80 55 fe ff       	call   c0000640 <strcpy>
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	83 ec 08             	sub    esp,0x8
c001b0c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b0ca:	50                   	push   eax
c001b0cb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b0d2:	e8 e9 f9 ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	83 ec 08             	sub    esp,0x8
c001b0dd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b0e1:	50                   	push   eax
c001b0e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b0e9:	50                   	push   eax
c001b0ea:	e8 b1 9d fe ff       	call   c0004ea0 <f_rename>
c001b0ef:	83 c4 10             	add    esp,0x10
c001b0f2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b0f9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b100:	85 c0                	test   eax,eax
c001b102:	75 08                	jne    c001b10c <FAT::rename(char const*, char const*)+0xbc>
c001b104:	b8 00 00 00 00       	mov    eax,0x0
c001b109:	eb 09                	jmp    c001b114 <FAT::rename(char const*, char const*)+0xc4>
c001b10b:	90                   	nop
c001b10c:	b8 01 00 00 00       	mov    eax,0x1
c001b111:	8d 76 00             	lea    esi,[esi+0x0]
c001b114:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b11a:	c3                   	ret    
c001b11b:	90                   	nop

c001b11c <FAT::mkdir(char const*)>:
c001b11c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b122:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b12a:	75 08                	jne    c001b134 <FAT::mkdir(char const*)+0x18>
c001b12c:	b8 04 00 00 00       	mov    eax,0x4
c001b131:	eb 61                	jmp    c001b194 <FAT::mkdir(char const*)+0x78>
c001b133:	90                   	nop
c001b134:	83 ec 08             	sub    esp,0x8
c001b137:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b13e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b142:	50                   	push   eax
c001b143:	e8 f8 54 fe ff       	call   c0000640 <strcpy>
c001b148:	83 c4 10             	add    esp,0x10
c001b14b:	83 ec 08             	sub    esp,0x8
c001b14e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b152:	50                   	push   eax
c001b153:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b15a:	e8 61 f9 ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001b15f:	83 c4 10             	add    esp,0x10
c001b162:	83 ec 0c             	sub    esp,0xc
c001b165:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b169:	50                   	push   eax
c001b16a:	e8 96 9b fe ff       	call   c0004d05 <f_mkdir>
c001b16f:	83 c4 10             	add    esp,0x10
c001b172:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b179:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b180:	85 c0                	test   eax,eax
c001b182:	75 08                	jne    c001b18c <FAT::mkdir(char const*)+0x70>
c001b184:	b8 00 00 00 00       	mov    eax,0x0
c001b189:	eb 09                	jmp    c001b194 <FAT::mkdir(char const*)+0x78>
c001b18b:	90                   	nop
c001b18c:	b8 01 00 00 00       	mov    eax,0x1
c001b191:	8d 76 00             	lea    esi,[esi+0x0]
c001b194:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b19a:	c3                   	ret    
c001b19b:	90                   	nop

c001b19c <FAT::exists(char const*)>:
c001b19c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b1a2:	83 ec 08             	sub    esp,0x8
c001b1a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b1ac:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1b0:	50                   	push   eax
c001b1b1:	e8 8a 54 fe ff       	call   c0000640 <strcpy>
c001b1b6:	83 c4 10             	add    esp,0x10
c001b1b9:	83 ec 08             	sub    esp,0x8
c001b1bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b1c0:	50                   	push   eax
c001b1c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b1c8:	e8 f3 f8 ff ff       	call   c001aac0 <FAT::fixFilepath(char*)>
c001b1cd:	83 c4 10             	add    esp,0x10
c001b1d0:	83 ec 08             	sub    esp,0x8
c001b1d3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001b1da:	50                   	push   eax
c001b1db:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1df:	50                   	push   eax
c001b1e0:	e8 8c 97 fe ff       	call   c0004971 <f_stat>
c001b1e5:	83 c4 10             	add    esp,0x10
c001b1e8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b1ef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b1f6:	85 c0                	test   eax,eax
c001b1f8:	75 06                	jne    c001b200 <FAT::exists(char const*)+0x64>
c001b1fa:	b0 01                	mov    al,0x1
c001b1fc:	eb 06                	jmp    c001b204 <FAT::exists(char const*)+0x68>
c001b1fe:	66 90                	xchg   ax,ax
c001b200:	b0 00                	mov    al,0x0
c001b202:	66 90                	xchg   ax,ax
c001b204:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b20a:	c3                   	ret    
c001b20b:	90                   	nop

c001b20c <isoReadDiscSectorHelper>:
c001b20c:	83 ec 2c             	sub    esp,0x2c
c001b20f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b213:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b217:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b21c:	83 e8 41             	sub    eax,0x41
c001b21f:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001b226:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b22a:	ba 00 00 00 00       	mov    edx,0x0
c001b22f:	83 ec 0c             	sub    esp,0xc
c001b232:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b236:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b23a:	52                   	push   edx
c001b23b:	50                   	push   eax
c001b23c:	51                   	push   ecx
c001b23d:	e8 a6 ee fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b242:	83 c4 20             	add    esp,0x20
c001b245:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b249:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b24e:	74 0c                	je     c001b25c <isoReadDiscSectorHelper+0x50>
c001b250:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b254:	c1 e0 0b             	shl    eax,0xb
c001b257:	eb 0b                	jmp    c001b264 <isoReadDiscSectorHelper+0x58>
c001b259:	8d 76 00             	lea    esi,[esi+0x0]
c001b25c:	b8 00 00 00 00       	mov    eax,0x0
c001b261:	8d 76 00             	lea    esi,[esi+0x0]
c001b264:	83 c4 2c             	add    esp,0x2c
c001b267:	c3                   	ret    

c001b268 <iso_kprintf>:
c001b268:	83 ec 0c             	sub    esp,0xc
c001b26b:	83 ec 08             	sub    esp,0x8
c001b26e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b272:	68 7d 3c 02 c0       	push   0xc0023c7d
c001b277:	e8 e8 bc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	90                   	nop
c001b280:	83 c4 0c             	add    esp,0xc
c001b283:	c3                   	ret    

c001b284 <iso_kprintfd>:
c001b284:	83 ec 0c             	sub    esp,0xc
c001b287:	83 ec 08             	sub    esp,0x8
c001b28a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b28e:	68 39 1e 02 c0       	push   0xc0021e39
c001b293:	e8 cc bc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	90                   	nop
c001b29c:	83 c4 0c             	add    esp,0xc
c001b29f:	c3                   	ret    

c001b2a0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b2a0:	b8 08 00 00 00       	mov    eax,0x8
c001b2a5:	c3                   	ret    

c001b2a6 <ISO9660::truncate(void*, unsigned long long)>:
c001b2a6:	b8 01 00 00 00       	mov    eax,0x1
c001b2ab:	c3                   	ret    

c001b2ac <ISO9660::getName()>:
c001b2ac:	b8 3c 40 02 c0       	mov    eax,0xc002403c
c001b2b1:	c3                   	ret    

c001b2b2 <ISO9660::closeDir(void*)>:
c001b2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2b8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001b2bb:	90                   	nop

c001b2bc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b2bc:	b8 01 00 00 00       	mov    eax,0x1
c001b2c1:	c3                   	ret    

c001b2c2 <ISO9660::unlink(char const*)>:
c001b2c2:	b8 01 00 00 00       	mov    eax,0x1
c001b2c7:	c3                   	ret    

c001b2c8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b2c8:	b8 03 00 00 00       	mov    eax,0x3
c001b2cd:	c3                   	ret    

c001b2ce <ISO9660::rename(char const*, char const*)>:
c001b2ce:	b8 01 00 00 00       	mov    eax,0x1
c001b2d3:	c3                   	ret    

c001b2d4 <ISO9660::mkdir(char const*)>:
c001b2d4:	b8 01 00 00 00       	mov    eax,0x1
c001b2d9:	c3                   	ret    

c001b2da <ISO9660::~ISO9660()>:
c001b2da:	83 ec 0c             	sub    esp,0xc
c001b2dd:	ba 7c 41 02 c0       	mov    edx,0xc002417c
c001b2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e6:	89 10                	mov    DWORD PTR [eax],edx
c001b2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ec:	83 ec 0c             	sub    esp,0xc
c001b2ef:	50                   	push   eax
c001b2f0:	e8 9f ca fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001b2f5:	83 c4 10             	add    esp,0x10
c001b2f8:	90                   	nop
c001b2f9:	83 c4 0c             	add    esp,0xc
c001b2fc:	c3                   	ret    
c001b2fd:	90                   	nop

c001b2fe <ISO9660::~ISO9660()>:
c001b2fe:	83 ec 0c             	sub    esp,0xc
c001b301:	83 ec 0c             	sub    esp,0xc
c001b304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b308:	e8 cd ff ff ff       	call   c001b2da <ISO9660::~ISO9660()>
c001b30d:	83 c4 10             	add    esp,0x10
c001b310:	83 ec 08             	sub    esp,0x8
c001b313:	6a 08                	push   0x8
c001b315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b319:	e8 82 15 ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c001b31e:	83 c4 10             	add    esp,0x10
c001b321:	83 c4 0c             	add    esp,0xc
c001b324:	c3                   	ret    
c001b325:	90                   	nop

c001b326 <ISO9660::exists(char const*)>:
c001b326:	83 ec 18             	sub    esp,0x18
c001b329:	68 57 40 02 c0       	push   0xc0024057
c001b32e:	e8 3f 3b ff ff       	call   c000ee72 <KePanic(char const*)>
c001b333:	31 c0                	xor    eax,eax
c001b335:	83 c4 1c             	add    esp,0x1c
c001b338:	c3                   	ret    
c001b339:	90                   	nop

c001b33a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b33a:	56                   	push   esi
c001b33b:	53                   	push   ebx
c001b33c:	53                   	push   ebx
c001b33d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b341:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b345:	85 db                	test   ebx,ebx
c001b347:	0f 84 ca 00 00 00    	je     c001b417 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b34d:	85 f6                	test   esi,esi
c001b34f:	0f 84 c2 00 00 00    	je     c001b417 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b355:	b8 03 00 00 00       	mov    eax,0x3
c001b35a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001b35f:	0f 85 b7 00 00 00    	jne    c001b41c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b365:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b367:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b36e:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b374:	74 1b                	je     c001b391 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b376:	85 c0                	test   eax,eax
c001b378:	74 10                	je     c001b38a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001b37a:	83 ec 0c             	sub    esp,0xc
c001b37d:	68 75 40 02 c0       	push   0xc0024075
c001b382:	e8 eb 3a ff ff       	call   c000ee72 <KePanic(char const*)>
c001b387:	83 c4 10             	add    esp,0x10
c001b38a:	8a 03                	mov    al,BYTE PTR [ebx]
c001b38c:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b391:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b394:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b39b:	85 c0                	test   eax,eax
c001b39d:	74 09                	je     c001b3a8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001b39f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b3a6:	74 48                	je     c001b3f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001b3a8:	83 ec 0c             	sub    esp,0xc
c001b3ab:	68 85 40 02 c0       	push   0xc0024085
c001b3b0:	e8 af bb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b3b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b3b8:	83 c4 10             	add    esp,0x10
c001b3bb:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b3c2:	85 c0                	test   eax,eax
c001b3c4:	74 17                	je     c001b3dd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001b3c6:	83 ec 0c             	sub    esp,0xc
c001b3c9:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b3d0:	68 a5 40 02 c0       	push   0xc00240a5
c001b3d5:	e8 8a bb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b3da:	83 c4 10             	add    esp,0x10
c001b3dd:	83 ec 0c             	sub    esp,0xc
c001b3e0:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b3e7:	50                   	push   eax
c001b3e8:	e8 41 b8 fe ff       	call   c0006c2e <init_percd>
c001b3ed:	83 c4 10             	add    esp,0x10
c001b3f0:	83 c3 03             	add    ebx,0x3
c001b3f3:	51                   	push   ecx
c001b3f4:	51                   	push   ecx
c001b3f5:	6a 00                	push   0x0
c001b3f7:	53                   	push   ebx
c001b3f8:	e8 f8 b2 fe ff       	call   c00066f5 <iso_open>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	89 c2                	mov    edx,eax
c001b402:	b8 01 00 00 00       	mov    eax,0x1
c001b407:	83 fa ff             	cmp    edx,0xffffffff
c001b40a:	74 10                	je     c001b41c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b40c:	83 c2 32             	add    edx,0x32
c001b40f:	31 c0                	xor    eax,eax
c001b411:	01 d2                	add    edx,edx
c001b413:	89 16                	mov    DWORD PTR [esi],edx
c001b415:	eb 05                	jmp    c001b41c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b417:	b8 04 00 00 00       	mov    eax,0x4
c001b41c:	5a                   	pop    edx
c001b41d:	5b                   	pop    ebx
c001b41e:	5e                   	pop    esi
c001b41f:	c3                   	ret    

c001b420 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b420:	53                   	push   ebx
c001b421:	83 ec 08             	sub    esp,0x8
c001b424:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b428:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b42c:	85 c0                	test   eax,eax
c001b42e:	74 2d                	je     c001b45d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b430:	85 db                	test   ebx,ebx
c001b432:	74 29                	je     c001b45d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b434:	b9 02 00 00 00       	mov    ecx,0x2
c001b439:	52                   	push   edx
c001b43a:	99                   	cdq    
c001b43b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b43f:	f7 f9                	idiv   ecx
c001b441:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b445:	83 e8 32             	sub    eax,0x32
c001b448:	50                   	push   eax
c001b449:	e8 4f b3 fe ff       	call   c000679d <iso_read>
c001b44e:	83 c4 10             	add    esp,0x10
c001b451:	89 03                	mov    DWORD PTR [ebx],eax
c001b453:	09 d0                	or     eax,edx
c001b455:	0f 94 c0             	sete   al
c001b458:	0f b6 c0             	movzx  eax,al
c001b45b:	eb 05                	jmp    c001b462 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001b45d:	b8 04 00 00 00       	mov    eax,0x4
c001b462:	83 c4 08             	add    esp,0x8
c001b465:	5b                   	pop    ebx
c001b466:	c3                   	ret    
c001b467:	90                   	nop

c001b468 <ISO9660::seek(void*, unsigned long long)>:
c001b468:	57                   	push   edi
c001b469:	56                   	push   esi
c001b46a:	b8 04 00 00 00       	mov    eax,0x4
c001b46f:	51                   	push   ecx
c001b470:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b474:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b478:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b47c:	85 d2                	test   edx,edx
c001b47e:	74 26                	je     c001b4a6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001b480:	6a 00                	push   0x0
c001b482:	b9 02 00 00 00       	mov    ecx,0x2
c001b487:	57                   	push   edi
c001b488:	89 d0                	mov    eax,edx
c001b48a:	56                   	push   esi
c001b48b:	99                   	cdq    
c001b48c:	f7 f9                	idiv   ecx
c001b48e:	83 e8 32             	sub    eax,0x32
c001b491:	50                   	push   eax
c001b492:	e8 1c b4 fe ff       	call   c00068b3 <iso_seek>
c001b497:	83 c4 10             	add    esp,0x10
c001b49a:	31 f0                	xor    eax,esi
c001b49c:	31 fa                	xor    edx,edi
c001b49e:	09 d0                	or     eax,edx
c001b4a0:	0f 95 c0             	setne  al
c001b4a3:	0f b6 c0             	movzx  eax,al
c001b4a6:	5a                   	pop    edx
c001b4a7:	5e                   	pop    esi
c001b4a8:	5f                   	pop    edi
c001b4a9:	c3                   	ret    

c001b4aa <ISO9660::tell(void*, unsigned long long*)>:
c001b4aa:	53                   	push   ebx
c001b4ab:	83 ec 08             	sub    esp,0x8
c001b4ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4b6:	85 c0                	test   eax,eax
c001b4b8:	74 24                	je     c001b4de <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b4ba:	85 db                	test   ebx,ebx
c001b4bc:	74 20                	je     c001b4de <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b4be:	83 ec 0c             	sub    esp,0xc
c001b4c1:	b9 02 00 00 00       	mov    ecx,0x2
c001b4c6:	99                   	cdq    
c001b4c7:	f7 f9                	idiv   ecx
c001b4c9:	83 e8 32             	sub    eax,0x32
c001b4cc:	50                   	push   eax
c001b4cd:	e8 65 b4 fe ff       	call   c0006937 <iso_tell>
c001b4d2:	83 c4 10             	add    esp,0x10
c001b4d5:	89 03                	mov    DWORD PTR [ebx],eax
c001b4d7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001b4da:	31 c0                	xor    eax,eax
c001b4dc:	eb 05                	jmp    c001b4e3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001b4de:	b8 04 00 00 00       	mov    eax,0x4
c001b4e3:	83 c4 08             	add    esp,0x8
c001b4e6:	5b                   	pop    ebx
c001b4e7:	c3                   	ret    

c001b4e8 <ISO9660::stat(void*, unsigned long long*)>:
c001b4e8:	53                   	push   ebx
c001b4e9:	83 ec 14             	sub    esp,0x14
c001b4ec:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b4f0:	68 c9 40 02 c0       	push   0xc00240c9
c001b4f5:	e8 6a ba fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b4fa:	83 c4 10             	add    esp,0x10
c001b4fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b502:	74 2c                	je     c001b530 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b504:	85 db                	test   ebx,ebx
c001b506:	74 28                	je     c001b530 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b508:	83 ec 0c             	sub    esp,0xc
c001b50b:	b9 02 00 00 00       	mov    ecx,0x2
c001b510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b514:	99                   	cdq    
c001b515:	f7 f9                	idiv   ecx
c001b517:	83 e8 32             	sub    eax,0x32
c001b51a:	50                   	push   eax
c001b51b:	e8 48 b4 fe ff       	call   c0006968 <iso_total>
c001b520:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b527:	89 03                	mov    DWORD PTR [ebx],eax
c001b529:	83 c4 10             	add    esp,0x10
c001b52c:	31 c0                	xor    eax,eax
c001b52e:	eb 05                	jmp    c001b535 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001b530:	b8 04 00 00 00       	mov    eax,0x4
c001b535:	83 c4 08             	add    esp,0x8
c001b538:	5b                   	pop    ebx
c001b539:	c3                   	ret    

c001b53a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b53a:	55                   	push   ebp
c001b53b:	57                   	push   edi
c001b53c:	56                   	push   esi
c001b53d:	53                   	push   ebx
c001b53e:	83 ec 18             	sub    esp,0x18
c001b541:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b545:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b549:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b54d:	68 d1 40 02 c0       	push   0xc00240d1
c001b552:	e8 0d ba fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b557:	83 c4 10             	add    esp,0x10
c001b55a:	85 ff                	test   edi,edi
c001b55c:	0f 94 c0             	sete   al
c001b55f:	85 f6                	test   esi,esi
c001b561:	0f 94 c2             	sete   dl
c001b564:	09 d0                	or     eax,edx
c001b566:	a8 01                	test   al,0x1
c001b568:	0f 85 dd 00 00 00    	jne    c001b64b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b56e:	85 db                	test   ebx,ebx
c001b570:	0f 84 d5 00 00 00    	je     c001b64b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b576:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b579:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001b57f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b586:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b58d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b58f:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b595:	74 1b                	je     c001b5b2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001b597:	85 c0                	test   eax,eax
c001b599:	74 10                	je     c001b5ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001b59b:	83 ec 0c             	sub    esp,0xc
c001b59e:	68 75 40 02 c0       	push   0xc0024075
c001b5a3:	e8 ca 38 ff ff       	call   c000ee72 <KePanic(char const*)>
c001b5a8:	83 c4 10             	add    esp,0x10
c001b5ab:	8a 03                	mov    al,BYTE PTR [ebx]
c001b5ad:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b5b2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b5b5:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b5bc:	85 c0                	test   eax,eax
c001b5be:	74 09                	je     c001b5c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001b5c0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b5c7:	74 51                	je     c001b61a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b5c9:	83 ec 0c             	sub    esp,0xc
c001b5cc:	68 d9 40 02 c0       	push   0xc00240d9
c001b5d1:	e8 8e b9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b5d6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b5d9:	83 c4 10             	add    esp,0x10
c001b5dc:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001b5e4:	74 21                	je     c001b607 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001b5e6:	83 ec 0c             	sub    esp,0xc
c001b5e9:	68 f9 40 02 c0       	push   0xc00240f9
c001b5ee:	e8 71 b9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b5f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b5f6:	83 c4 10             	add    esp,0x10
c001b5f9:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b600:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b607:	83 ec 0c             	sub    esp,0xc
c001b60a:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b611:	50                   	push   eax
c001b612:	e8 17 b6 fe ff       	call   c0006c2e <init_percd>
c001b617:	83 c4 10             	add    esp,0x10
c001b61a:	83 c3 03             	add    ebx,0x3
c001b61d:	52                   	push   edx
c001b61e:	52                   	push   edx
c001b61f:	6a 00                	push   0x0
c001b621:	53                   	push   ebx
c001b622:	e8 ce b0 fe ff       	call   c00066f5 <iso_open>
c001b627:	83 c4 10             	add    esp,0x10
c001b62a:	89 c5                	mov    ebp,eax
c001b62c:	83 f8 ff             	cmp    eax,0xffffffff
c001b62f:	75 21                	jne    c001b652 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001b631:	50                   	push   eax
c001b632:	50                   	push   eax
c001b633:	6a 01                	push   0x1
c001b635:	53                   	push   ebx
c001b636:	e8 ba b0 fe ff       	call   c00066f5 <iso_open>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	ba 02 00 00 00       	mov    edx,0x2
c001b643:	40                   	inc    eax
c001b644:	74 2b                	je     c001b671 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b646:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001b649:	eb 24                	jmp    c001b66f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001b64b:	ba 04 00 00 00       	mov    edx,0x4
c001b650:	eb 1f                	jmp    c001b671 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	50                   	push   eax
c001b656:	e8 0d b3 fe ff       	call   c0006968 <iso_total>
c001b65b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b662:	89 07                	mov    DWORD PTR [edi],eax
c001b664:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b667:	e8 13 b1 fe ff       	call   c000677f <iso_close>
c001b66c:	83 c4 10             	add    esp,0x10
c001b66f:	31 d2                	xor    edx,edx
c001b671:	83 c4 0c             	add    esp,0xc
c001b674:	89 d0                	mov    eax,edx
c001b676:	5b                   	pop    ebx
c001b677:	5e                   	pop    esi
c001b678:	5f                   	pop    edi
c001b679:	5d                   	pop    ebp
c001b67a:	c3                   	ret    
c001b67b:	90                   	nop

c001b67c <ISO9660::close(void*)>:
c001b67c:	83 ec 0c             	sub    esp,0xc
c001b67f:	b8 04 00 00 00       	mov    eax,0x4
c001b684:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b688:	85 d2                	test   edx,edx
c001b68a:	74 1b                	je     c001b6a7 <ISO9660::close(void*)+0x2b>
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	b9 02 00 00 00       	mov    ecx,0x2
c001b694:	89 d0                	mov    eax,edx
c001b696:	99                   	cdq    
c001b697:	f7 f9                	idiv   ecx
c001b699:	83 e8 32             	sub    eax,0x32
c001b69c:	50                   	push   eax
c001b69d:	e8 dd b0 fe ff       	call   c000677f <iso_close>
c001b6a2:	83 c4 10             	add    esp,0x10
c001b6a5:	31 c0                	xor    eax,eax
c001b6a7:	83 c4 0c             	add    esp,0xc
c001b6aa:	c3                   	ret    
c001b6ab:	90                   	nop

c001b6ac <ISO9660::openDir(char const*, void**)>:
c001b6ac:	56                   	push   esi
c001b6ad:	53                   	push   ebx
c001b6ae:	50                   	push   eax
c001b6af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b6b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b6b7:	85 db                	test   ebx,ebx
c001b6b9:	0f 84 bd 00 00 00    	je     c001b77c <ISO9660::openDir(char const*, void**)+0xd0>
c001b6bf:	85 f6                	test   esi,esi
c001b6c1:	0f 84 b5 00 00 00    	je     c001b77c <ISO9660::openDir(char const*, void**)+0xd0>
c001b6c7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b6c9:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b6d0:	38 15 a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,dl
c001b6d6:	74 1b                	je     c001b6f3 <ISO9660::openDir(char const*, void**)+0x47>
c001b6d8:	85 c0                	test   eax,eax
c001b6da:	74 10                	je     c001b6ec <ISO9660::openDir(char const*, void**)+0x40>
c001b6dc:	83 ec 0c             	sub    esp,0xc
c001b6df:	68 75 40 02 c0       	push   0xc0024075
c001b6e4:	e8 89 37 ff ff       	call   c000ee72 <KePanic(char const*)>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	8a 03                	mov    al,BYTE PTR [ebx]
c001b6ee:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b6f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b6f6:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b6fd:	85 c0                	test   eax,eax
c001b6ff:	74 10                	je     c001b711 <ISO9660::openDir(char const*, void**)+0x65>
c001b701:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b708:	74 1a                	je     c001b724 <ISO9660::openDir(char const*, void**)+0x78>
c001b70a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b711:	83 ec 0c             	sub    esp,0xc
c001b714:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b71b:	50                   	push   eax
c001b71c:	e8 0d b5 fe ff       	call   c0006c2e <init_percd>
c001b721:	83 c4 10             	add    esp,0x10
c001b724:	83 c3 03             	add    ebx,0x3
c001b727:	50                   	push   eax
c001b728:	50                   	push   eax
c001b729:	6a 01                	push   0x1
c001b72b:	53                   	push   ebx
c001b72c:	e8 c4 af fe ff       	call   c00066f5 <iso_open>
c001b731:	83 c4 10             	add    esp,0x10
c001b734:	89 c3                	mov    ebx,eax
c001b736:	83 f8 ff             	cmp    eax,0xffffffff
c001b739:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b73e:	75 1c                	jne    c001b75c <ISO9660::openDir(char const*, void**)+0xb0>
c001b740:	53                   	push   ebx
c001b741:	53                   	push   ebx
c001b742:	68 1d 41 02 c0       	push   0xc002411d
c001b747:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b74d:	e8 da 5e ff ff       	call   c001162c <VgaText::puts(char const*)>
c001b752:	83 c4 10             	add    esp,0x10
c001b755:	b8 01 00 00 00       	mov    eax,0x1
c001b75a:	eb 25                	jmp    c001b781 <ISO9660::openDir(char const*, void**)+0xd5>
c001b75c:	01 db                	add    ebx,ebx
c001b75e:	51                   	push   ecx
c001b75f:	83 c3 65             	add    ebx,0x65
c001b762:	51                   	push   ecx
c001b763:	68 30 41 02 c0       	push   0xc0024130
c001b768:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b76e:	e8 b9 5e ff ff       	call   c001162c <VgaText::puts(char const*)>
c001b773:	89 1e                	mov    DWORD PTR [esi],ebx
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	31 c0                	xor    eax,eax
c001b77a:	eb 05                	jmp    c001b781 <ISO9660::openDir(char const*, void**)+0xd5>
c001b77c:	b8 04 00 00 00       	mov    eax,0x4
c001b781:	5a                   	pop    edx
c001b782:	5b                   	pop    ebx
c001b783:	5e                   	pop    esi
c001b784:	c3                   	ret    
c001b785:	90                   	nop

c001b786 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b786:	55                   	push   ebp
c001b787:	57                   	push   edi
c001b788:	56                   	push   esi
c001b789:	53                   	push   ebx
c001b78a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b790:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b797:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b79e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b7a6:	0f 84 e7 00 00 00    	je     c001b893 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b7ac:	85 db                	test   ebx,ebx
c001b7ae:	0f 84 df 00 00 00    	je     c001b893 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b7b4:	83 ec 0c             	sub    esp,0xc
c001b7b7:	68 43 41 02 c0       	push   0xc0024143
c001b7bc:	e8 a3 b7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b7c1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b7c8:	b9 02 00 00 00       	mov    ecx,0x2
c001b7cd:	99                   	cdq    
c001b7ce:	f7 f9                	idiv   ecx
c001b7d0:	83 e8 32             	sub    eax,0x32
c001b7d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7d6:	e8 df b1 fe ff       	call   c00069ba <iso_readdir>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	89 c6                	mov    esi,eax
c001b7e0:	85 c0                	test   eax,eax
c001b7e2:	75 37                	jne    c001b81b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001b7e4:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b7e9:	56                   	push   esi
c001b7ea:	56                   	push   esi
c001b7eb:	68 4e 41 02 c0       	push   0xc002414e
c001b7f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b7f6:	e8 31 5e ff ff       	call   c001162c <VgaText::puts(char const*)>
c001b7fb:	83 c4 0c             	add    esp,0xc
c001b7fe:	68 10 01 00 00       	push   0x110
c001b803:	6a 00                	push   0x0
c001b805:	57                   	push   edi
c001b806:	e8 e5 4c fe ff       	call   c00004f0 <memset>
c001b80b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b811:	83 c4 10             	add    esp,0x10
c001b814:	b8 01 00 00 00       	mov    eax,0x1
c001b819:	eb 7d                	jmp    c001b898 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b81b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b821:	8d 68 08             	lea    ebp,[eax+0x8]
c001b824:	83 ec 0c             	sub    esp,0xc
c001b827:	55                   	push   ebp
c001b828:	e8 43 4d fe ff       	call   c0000570 <strlen>
c001b82d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b835:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b839:	83 c4 10             	add    esp,0x10
c001b83c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001b840:	75 0a                	jne    c001b84c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b842:	b8 02 00 00 00       	mov    eax,0x2
c001b847:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001b84a:	74 05                	je     c001b851 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001b84c:	b8 01 00 00 00       	mov    eax,0x1
c001b851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b855:	50                   	push   eax
c001b856:	50                   	push   eax
c001b857:	55                   	push   ebp
c001b858:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b85c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b860:	50                   	push   eax
c001b861:	e8 da 4d fe ff       	call   c0000640 <strcpy>
c001b866:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b86d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b86f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001b875:	5a                   	pop    edx
c001b876:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b87b:	59                   	pop    ecx
c001b87c:	68 61 41 02 c0       	push   0xc0024161
c001b881:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b887:	e8 a0 5d ff ff       	call   c001162c <VgaText::puts(char const*)>
c001b88c:	83 c4 10             	add    esp,0x10
c001b88f:	31 c0                	xor    eax,eax
c001b891:	eb 05                	jmp    c001b898 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b893:	b8 04 00 00 00       	mov    eax,0x4
c001b898:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b89e:	5b                   	pop    ebx
c001b89f:	5e                   	pop    esi
c001b8a0:	5f                   	pop    edi
c001b8a1:	5d                   	pop    ebp
c001b8a2:	c3                   	ret    

c001b8a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b8a3:	57                   	push   edi
c001b8a4:	56                   	push   esi
c001b8a5:	53                   	push   ebx
c001b8a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b8b2:	39 35 a4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a4,esi
c001b8b8:	0f be cb             	movsx  ecx,bl
c001b8bb:	75 0b                	jne    c001b8c8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b8bd:	0f be 05 04 54 02 c0 	movsx  eax,BYTE PTR ds:0xc0025404
c001b8c4:	39 c8                	cmp    eax,ecx
c001b8c6:	74 47                	je     c001b90f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b8c8:	83 ec 0c             	sub    esp,0xc
c001b8cb:	31 d2                	xor    edx,edx
c001b8cd:	68 c0 d8 02 c0       	push   0xc002d8c0
c001b8d2:	6a 01                	push   0x1
c001b8d4:	52                   	push   edx
c001b8d5:	56                   	push   esi
c001b8d6:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001b8dd:	e8 06 e8 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b8e2:	83 c4 20             	add    esp,0x20
c001b8e5:	85 c0                	test   eax,eax
c001b8e7:	75 0e                	jne    c001b8f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b8e9:	89 35 a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,esi
c001b8ef:	88 1d 04 54 02 c0    	mov    BYTE PTR ds:0xc0025404,bl
c001b8f5:	eb 18                	jmp    c001b90f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b8f7:	50                   	push   eax
c001b8f8:	68 00 08 00 00       	push   0x800
c001b8fd:	6a 00                	push   0x0
c001b8ff:	57                   	push   edi
c001b900:	e8 eb 4b fe ff       	call   c00004f0 <memset>
c001b905:	83 c4 10             	add    esp,0x10
c001b908:	b8 01 00 00 00       	mov    eax,0x1
c001b90d:	eb 0e                	jmp    c001b91d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b90f:	be c0 d8 02 c0       	mov    esi,0xc002d8c0
c001b914:	b9 00 08 00 00       	mov    ecx,0x800
c001b919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b91b:	31 c0                	xor    eax,eax
c001b91d:	5b                   	pop    ebx
c001b91e:	5e                   	pop    esi
c001b91f:	5f                   	pop    edi
c001b920:	c3                   	ret    
c001b921:	90                   	nop

c001b922 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b922:	53                   	push   ebx
c001b923:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b929:	c7 05 a4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8a4,0xdeadbeef
c001b933:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b93a:	8d 58 41             	lea    ebx,[eax+0x41]
c001b93d:	0f be db             	movsx  ebx,bl
c001b940:	53                   	push   ebx
c001b941:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b945:	50                   	push   eax
c001b946:	6a 10                	push   0x10
c001b948:	e8 56 ff ff ff       	call   c001b8a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b94d:	83 c4 10             	add    esp,0x10
c001b950:	31 d2                	xor    edx,edx
c001b952:	85 c0                	test   eax,eax
c001b954:	75 33                	jne    c001b989 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b956:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b95b:	75 2c                	jne    c001b989 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b95d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b962:	75 25                	jne    c001b989 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b964:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b969:	75 1e                	jne    c001b989 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b96b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b970:	75 17                	jne    c001b989 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b972:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b977:	75 10                	jne    c001b989 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b979:	83 ec 0c             	sub    esp,0xc
c001b97c:	53                   	push   ebx
c001b97d:	e8 ac b2 fe ff       	call   c0006c2e <init_percd>
c001b982:	83 c4 10             	add    esp,0x10
c001b985:	40                   	inc    eax
c001b986:	0f 95 c2             	setne  dl
c001b989:	88 d0                	mov    al,dl
c001b98b:	81 c4 08 08 00 00    	add    esp,0x808
c001b991:	5b                   	pop    ebx
c001b992:	c3                   	ret    
c001b993:	90                   	nop

c001b994 <ISO9660::ISO9660()>:
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99b:	83 ec 0c             	sub    esp,0xc
c001b99e:	50                   	push   eax
c001b99f:	e8 cc c3 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b9a4:	83 c4 10             	add    esp,0x10
c001b9a7:	ba 7c 41 02 c0       	mov    edx,0xc002417c
c001b9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b0:	89 10                	mov    DWORD PTR [eax],edx
c001b9b2:	e8 89 b3 fe ff       	call   c0006d40 <fs_iso9660_init>
c001b9b7:	90                   	nop
c001b9b8:	83 c4 0c             	add    esp,0xc
c001b9bb:	c3                   	ret    

c001b9bc <SoundCard::beginPlayback()>:
c001b9bc:	c7 44 24 04 e0 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc00241e0
c001b9c4:	e9 a9 34 ff ff       	jmp    c000ee72 <KePanic(char const*)>
c001b9c9:	90                   	nop

c001b9ca <SoundCard::stopPlayback()>:
c001b9ca:	c7 44 24 04 e0 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc00241e0
c001b9d2:	e9 9b 34 ff ff       	jmp    c000ee72 <KePanic(char const*)>
c001b9d7:	90                   	nop

c001b9d8 <SoundCard::SoundCard(char const*)>:
c001b9d8:	83 ec 1c             	sub    esp,0x1c
c001b9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9df:	83 ec 08             	sub    esp,0x8
c001b9e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9e6:	50                   	push   eax
c001b9e7:	e8 08 d8 fe ff       	call   c00091f4 <Device::Device(char const*)>
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	ba 2c 42 02 c0       	mov    edx,0xc002422c
c001b9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9f8:	89 10                	mov    DWORD PTR [eax],edx
c001b9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9fe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ba05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba09:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ba13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba17:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ba21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba25:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ba2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba33:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ba3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ba45:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ba4a:	7f 1a                	jg     c001ba66 <SoundCard::SoundCard(char const*)+0x8e>
c001ba4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba54:	83 c2 54             	add    edx,0x54
c001ba57:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ba5f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ba64:	eb df                	jmp    c001ba45 <SoundCard::SoundCard(char const*)+0x6d>
c001ba66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba6a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ba71:	90                   	nop
c001ba72:	83 c4 1c             	add    esp,0x1c
c001ba75:	c3                   	ret    

c001ba76 <SoundCard::~SoundCard()>:
c001ba76:	83 ec 0c             	sub    esp,0xc
c001ba79:	ba 2c 42 02 c0       	mov    edx,0xc002422c
c001ba7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba82:	89 10                	mov    DWORD PTR [eax],edx
c001ba84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	50                   	push   eax
c001ba8c:	e8 03 d5 fe ff       	call   c0008f94 <Device::~Device()>
c001ba91:	83 c4 10             	add    esp,0x10
c001ba94:	90                   	nop
c001ba95:	83 c4 0c             	add    esp,0xc
c001ba98:	c3                   	ret    
c001ba99:	90                   	nop

c001ba9a <SoundCard::~SoundCard()>:
c001ba9a:	83 ec 0c             	sub    esp,0xc
c001ba9d:	83 ec 0c             	sub    esp,0xc
c001baa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baa4:	e8 cd ff ff ff       	call   c001ba76 <SoundCard::~SoundCard()>
c001baa9:	83 c4 10             	add    esp,0x10
c001baac:	83 ec 08             	sub    esp,0x8
c001baaf:	68 e8 01 00 00       	push   0x1e8
c001bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bab8:	e8 e3 0d ff ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	83 c4 0c             	add    esp,0xc
c001bac3:	c3                   	ret    

c001bac4 <SoundCard::configureRates(int, int, int)>:
c001bac4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bac8:	31 c0                	xor    eax,eax
c001baca:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001bad1:	75 20                	jne    c001baf3 <SoundCard::configureRates(int, int, int)+0x2f>
c001bad3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bad7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001badd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bae1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001bae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baeb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001baf1:	b0 01                	mov    al,0x1
c001baf3:	c3                   	ret    

c001baf4 <SoundCard::getSamples16(int, short*)>:
c001baf4:	55                   	push   ebp
c001baf5:	57                   	push   edi
c001baf6:	31 ff                	xor    edi,edi
c001baf8:	56                   	push   esi
c001baf9:	53                   	push   ebx
c001bafa:	31 db                	xor    ebx,ebx
c001bafc:	83 ec 10             	sub    esp,0x10
c001baff:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bb03:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bb07:	8d 04 36             	lea    eax,[esi+esi*1]
c001bb0a:	50                   	push   eax
c001bb0b:	6a 00                	push   0x0
c001bb0d:	55                   	push   ebp
c001bb0e:	e8 dd 49 fe ff       	call   c00004f0 <memset>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb1a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001bb21:	85 c0                	test   eax,eax
c001bb23:	74 1b                	je     c001bb40 <SoundCard::getSamples16(int, short*)+0x4c>
c001bb25:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001bb29:	75 15                	jne    c001bb40 <SoundCard::getSamples16(int, short*)+0x4c>
c001bb2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb2f:	55                   	push   ebp
c001bb30:	56                   	push   esi
c001bb31:	50                   	push   eax
c001bb32:	e8 8d 03 00 00       	call   c001bec4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001bb37:	83 c4 10             	add    esp,0x10
c001bb3a:	39 c7                	cmp    edi,eax
c001bb3c:	7d 02                	jge    c001bb40 <SoundCard::getSamples16(int, short*)+0x4c>
c001bb3e:	89 c7                	mov    edi,eax
c001bb40:	43                   	inc    ebx
c001bb41:	83 fb 20             	cmp    ebx,0x20
c001bb44:	75 d0                	jne    c001bb16 <SoundCard::getSamples16(int, short*)+0x22>
c001bb46:	83 c4 0c             	add    esp,0xc
c001bb49:	89 f8                	mov    eax,edi
c001bb4b:	5b                   	pop    ebx
c001bb4c:	5e                   	pop    esi
c001bb4d:	5f                   	pop    edi
c001bb4e:	5d                   	pop    ebp
c001bb4f:	c3                   	ret    

c001bb50 <SoundCard::getSamples32(int, int*)>:
c001bb50:	55                   	push   ebp
c001bb51:	57                   	push   edi
c001bb52:	31 ff                	xor    edi,edi
c001bb54:	56                   	push   esi
c001bb55:	31 f6                	xor    esi,esi
c001bb57:	53                   	push   ebx
c001bb58:	83 ec 10             	sub    esp,0x10
c001bb5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb5f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001bb63:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bb67:	c1 e0 02             	shl    eax,0x2
c001bb6a:	50                   	push   eax
c001bb6b:	6a 00                	push   0x0
c001bb6d:	55                   	push   ebp
c001bb6e:	e8 7d 49 fe ff       	call   c00004f0 <memset>
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001bb7d:	85 c0                	test   eax,eax
c001bb7f:	74 1b                	je     c001bb9c <SoundCard::getSamples32(int, int*)+0x4c>
c001bb81:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001bb85:	75 15                	jne    c001bb9c <SoundCard::getSamples32(int, int*)+0x4c>
c001bb87:	53                   	push   ebx
c001bb88:	55                   	push   ebp
c001bb89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb8d:	50                   	push   eax
c001bb8e:	e8 fd 03 00 00       	call   c001bf90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001bb93:	83 c4 10             	add    esp,0x10
c001bb96:	39 c6                	cmp    esi,eax
c001bb98:	7d 02                	jge    c001bb9c <SoundCard::getSamples32(int, int*)+0x4c>
c001bb9a:	89 c6                	mov    esi,eax
c001bb9c:	47                   	inc    edi
c001bb9d:	83 ff 20             	cmp    edi,0x20
c001bba0:	75 d4                	jne    c001bb76 <SoundCard::getSamples32(int, int*)+0x26>
c001bba2:	85 f6                	test   esi,esi
c001bba4:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001bbab:	75 0f                	jne    c001bbbc <SoundCard::getSamples32(int, int*)+0x6c>
c001bbad:	85 c0                	test   eax,eax
c001bbaf:	74 1b                	je     c001bbcc <SoundCard::getSamples32(int, int*)+0x7c>
c001bbb1:	83 ec 0c             	sub    esp,0xc
c001bbb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbb6:	53                   	push   ebx
c001bbb7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001bbba:	eb 0d                	jmp    c001bbc9 <SoundCard::getSamples32(int, int*)+0x79>
c001bbbc:	85 c0                	test   eax,eax
c001bbbe:	75 0c                	jne    c001bbcc <SoundCard::getSamples32(int, int*)+0x7c>
c001bbc0:	83 ec 0c             	sub    esp,0xc
c001bbc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbc5:	53                   	push   ebx
c001bbc6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001bbc9:	83 c4 10             	add    esp,0x10
c001bbcc:	83 c4 0c             	add    esp,0xc
c001bbcf:	89 f0                	mov    eax,esi
c001bbd1:	5b                   	pop    ebx
c001bbd2:	5e                   	pop    esi
c001bbd3:	5f                   	pop    edi
c001bbd4:	5d                   	pop    ebp
c001bbd5:	c3                   	ret    

c001bbd6 <SoundCard::addChannel(SoundPort*)>:
c001bbd6:	83 ec 0c             	sub    esp,0xc
c001bbd9:	31 c0                	xor    eax,eax
c001bbdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbdf:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001bbe7:	74 1b                	je     c001bc04 <SoundCard::addChannel(SoundPort*)+0x2e>
c001bbe9:	40                   	inc    eax
c001bbea:	83 f8 20             	cmp    eax,0x20
c001bbed:	75 f0                	jne    c001bbdf <SoundCard::addChannel(SoundPort*)+0x9>
c001bbef:	83 ec 0c             	sub    esp,0xc
c001bbf2:	68 05 42 02 c0       	push   0xc0024205
c001bbf7:	e8 76 32 ff ff       	call   c000ee72 <KePanic(char const*)>
c001bbfc:	83 c4 10             	add    esp,0x10
c001bbff:	83 c8 ff             	or     eax,0xffffffff
c001bc02:	eb 0b                	jmp    c001bc0f <SoundCard::addChannel(SoundPort*)+0x39>
c001bc04:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bc08:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001bc0f:	83 c4 0c             	add    esp,0xc
c001bc12:	c3                   	ret    
c001bc13:	90                   	nop

c001bc14 <SoundCard::removeChannel(int)>:
c001bc14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bc1c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001bc27:	c3                   	ret    

c001bc28 <SoundPort::SoundPort(int, int, int, int)>:
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001bc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc46:	89 10                	mov    DWORD PTR [eax],edx
c001bc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bc5e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001bc63:	75 13                	jne    c001bc78 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001bc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc69:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc6b:	05 a0 0f 00 00       	add    eax,0xfa0
c001bc70:	01 c0                	add    eax,eax
c001bc72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc76:	66 90                	xchg   ax,ax
c001bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc80:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc87:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001bc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc92:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc95:	c1 e0 02             	shl    eax,0x2
c001bc98:	83 ec 0c             	sub    esp,0xc
c001bc9b:	50                   	push   eax
c001bc9c:	e8 8a 2e ff ff       	call   c000eb2b <malloc>
c001bca1:	83 c4 10             	add    esp,0x10
c001bca4:	89 c2                	mov    edx,eax
c001bca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcaa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bcad:	90                   	nop
c001bcae:	83 c4 0c             	add    esp,0xc
c001bcb1:	c3                   	ret    
c001bcb2:	66 90                	xchg   ax,ax

c001bcb4 <SoundPort::~SoundPort()>:
c001bcb4:	83 ec 0c             	sub    esp,0xc
c001bcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bcbe:	85 c0                	test   eax,eax
c001bcc0:	74 1e                	je     c001bce0 <SoundPort::~SoundPort()+0x2c>
c001bcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bcc9:	83 ec 0c             	sub    esp,0xc
c001bccc:	50                   	push   eax
c001bccd:	e8 69 2e ff ff       	call   c000eb3b <free>
c001bcd2:	83 c4 10             	add    esp,0x10
c001bcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bce0:	90                   	nop
c001bce1:	83 c4 0c             	add    esp,0xc
c001bce4:	c3                   	ret    
c001bce5:	90                   	nop
c001bce6:	66 90                	xchg   ax,ax

c001bce8 <SoundPort::unpause()>:
c001bce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001bcf0:	c3                   	ret    
c001bcf1:	90                   	nop
c001bcf2:	66 90                	xchg   ax,ax

c001bcf4 <SoundPort::pause()>:
c001bcf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcf8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001bcfc:	c3                   	ret    
c001bcfd:	90                   	nop
c001bcfe:	66 90                	xchg   ax,ax

c001bd00 <SoundPort::getBufferUsed()>:
c001bd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd04:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd07:	c3                   	ret    

c001bd08 <SoundPort::getBufferSize()>:
c001bd08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bd0f:	c3                   	ret    

c001bd10 <SoundPort::buffer8(signed char*, int)>:
c001bd10:	55                   	push   ebp
c001bd11:	57                   	push   edi
c001bd12:	56                   	push   esi
c001bd13:	53                   	push   ebx
c001bd14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd18:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001bd1c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001bd1f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001bd22:	74 70                	je     c001bd94 <SoundPort::buffer8(signed char*, int)+0x84>
c001bd24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd28:	85 c9                	test   ecx,ecx
c001bd2a:	7e 68                	jle    c001bd94 <SoundPort::buffer8(signed char*, int)+0x84>
c001bd2c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001bd30:	8d 48 01             	lea    ecx,[eax+0x1]
c001bd33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bd36:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bd39:	89 f1                	mov    ecx,esi
c001bd3b:	c1 e1 18             	shl    ecx,0x18
c001bd3e:	29 f1                	sub    ecx,esi
c001bd40:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001bd43:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd46:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bd49:	74 51                	je     c001bd9c <SoundPort::buffer8(signed char*, int)+0x8c>
c001bd4b:	31 ff                	xor    edi,edi
c001bd4d:	eb 25                	jmp    c001bd74 <SoundPort::buffer8(signed char*, int)+0x64>
c001bd4f:	90                   	nop
c001bd50:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001bd55:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bd58:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001bd5b:	89 f3                	mov    ebx,esi
c001bd5d:	c1 e3 18             	shl    ebx,0x18
c001bd60:	29 f3                	sub    ebx,esi
c001bd62:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001bd65:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001bd68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd6b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bd6e:	74 1c                	je     c001bd8c <SoundPort::buffer8(signed char*, int)+0x7c>
c001bd70:	89 c7                	mov    edi,eax
c001bd72:	66 90                	xchg   ax,ax
c001bd74:	8d 47 01             	lea    eax,[edi+0x1]
c001bd77:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001bd7b:	75 d3                	jne    c001bd50 <SoundPort::buffer8(signed char*, int)+0x40>
c001bd7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd81:	8d 76 00             	lea    esi,[esi+0x0]
c001bd84:	5b                   	pop    ebx
c001bd85:	5e                   	pop    esi
c001bd86:	5f                   	pop    edi
c001bd87:	5d                   	pop    ebp
c001bd88:	c3                   	ret    
c001bd89:	8d 76 00             	lea    esi,[esi+0x0]
c001bd8c:	5b                   	pop    ebx
c001bd8d:	8d 47 02             	lea    eax,[edi+0x2]
c001bd90:	5e                   	pop    esi
c001bd91:	5f                   	pop    edi
c001bd92:	5d                   	pop    ebp
c001bd93:	c3                   	ret    
c001bd94:	5b                   	pop    ebx
c001bd95:	31 c0                	xor    eax,eax
c001bd97:	5e                   	pop    esi
c001bd98:	5f                   	pop    edi
c001bd99:	5d                   	pop    ebp
c001bd9a:	c3                   	ret    
c001bd9b:	90                   	nop
c001bd9c:	b8 01 00 00 00       	mov    eax,0x1
c001bda1:	eb e1                	jmp    c001bd84 <SoundPort::buffer8(signed char*, int)+0x74>
c001bda3:	90                   	nop

c001bda4 <SoundPort::buffer16(short*, int)>:
c001bda4:	55                   	push   ebp
c001bda5:	57                   	push   edi
c001bda6:	56                   	push   esi
c001bda7:	53                   	push   ebx
c001bda8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bdac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001bdb0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001bdb3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001bdb6:	74 70                	je     c001be28 <SoundPort::buffer16(short*, int)+0x84>
c001bdb8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bdbc:	85 c9                	test   ecx,ecx
c001bdbe:	7e 68                	jle    c001be28 <SoundPort::buffer16(short*, int)+0x84>
c001bdc0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001bdc4:	8d 48 01             	lea    ecx,[eax+0x1]
c001bdc7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bdca:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bdcd:	89 f1                	mov    ecx,esi
c001bdcf:	c1 e1 10             	shl    ecx,0x10
c001bdd2:	29 f1                	sub    ecx,esi
c001bdd4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001bdd7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bdda:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bddd:	74 51                	je     c001be30 <SoundPort::buffer16(short*, int)+0x8c>
c001bddf:	31 ff                	xor    edi,edi
c001bde1:	eb 25                	jmp    c001be08 <SoundPort::buffer16(short*, int)+0x64>
c001bde3:	90                   	nop
c001bde4:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001bde9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bdec:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001bdef:	89 f3                	mov    ebx,esi
c001bdf1:	c1 e3 10             	shl    ebx,0x10
c001bdf4:	29 f3                	sub    ebx,esi
c001bdf6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001bdf9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001bdfc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bdff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001be02:	74 1c                	je     c001be20 <SoundPort::buffer16(short*, int)+0x7c>
c001be04:	89 c7                	mov    edi,eax
c001be06:	66 90                	xchg   ax,ax
c001be08:	8d 47 01             	lea    eax,[edi+0x1]
c001be0b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001be0f:	75 d3                	jne    c001bde4 <SoundPort::buffer16(short*, int)+0x40>
c001be11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be15:	8d 76 00             	lea    esi,[esi+0x0]
c001be18:	5b                   	pop    ebx
c001be19:	5e                   	pop    esi
c001be1a:	5f                   	pop    edi
c001be1b:	5d                   	pop    ebp
c001be1c:	c3                   	ret    
c001be1d:	8d 76 00             	lea    esi,[esi+0x0]
c001be20:	5b                   	pop    ebx
c001be21:	8d 47 02             	lea    eax,[edi+0x2]
c001be24:	5e                   	pop    esi
c001be25:	5f                   	pop    edi
c001be26:	5d                   	pop    ebp
c001be27:	c3                   	ret    
c001be28:	5b                   	pop    ebx
c001be29:	31 c0                	xor    eax,eax
c001be2b:	5e                   	pop    esi
c001be2c:	5f                   	pop    edi
c001be2d:	5d                   	pop    ebp
c001be2e:	c3                   	ret    
c001be2f:	90                   	nop
c001be30:	b8 01 00 00 00       	mov    eax,0x1
c001be35:	eb e1                	jmp    c001be18 <SoundPort::buffer16(short*, int)+0x74>
c001be37:	90                   	nop

c001be38 <SoundPort::buffer32(int*, int)>:
c001be38:	55                   	push   ebp
c001be39:	57                   	push   edi
c001be3a:	56                   	push   esi
c001be3b:	53                   	push   ebx
c001be3c:	83 ec 04             	sub    esp,0x4
c001be3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be47:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001be4e:	89 04 24             	mov    DWORD PTR [esp],eax
c001be51:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001be54:	74 5a                	je     c001beb0 <SoundPort::buffer32(int*, int)+0x78>
c001be56:	85 c0                	test   eax,eax
c001be58:	7e 56                	jle    c001beb0 <SoundPort::buffer32(int*, int)+0x78>
c001be5a:	8d 71 01             	lea    esi,[ecx+0x1]
c001be5d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001be60:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001be63:	8b 37                	mov    esi,DWORD PTR [edi]
c001be65:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001be68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be6b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001be6e:	74 4c                	je     c001bebc <SoundPort::buffer32(int*, int)+0x84>
c001be70:	31 f6                	xor    esi,esi
c001be72:	eb 1c                	jmp    c001be90 <SoundPort::buffer32(int*, int)+0x58>
c001be74:	8d 69 01             	lea    ebp,[ecx+0x1]
c001be77:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001be7a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001be7d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001be80:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001be84:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be87:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001be8a:	74 18                	je     c001bea4 <SoundPort::buffer32(int*, int)+0x6c>
c001be8c:	89 de                	mov    esi,ebx
c001be8e:	66 90                	xchg   ax,ax
c001be90:	8d 5e 01             	lea    ebx,[esi+0x1]
c001be93:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001be96:	75 dc                	jne    c001be74 <SoundPort::buffer32(int*, int)+0x3c>
c001be98:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be9b:	90                   	nop
c001be9c:	83 c4 04             	add    esp,0x4
c001be9f:	5b                   	pop    ebx
c001bea0:	5e                   	pop    esi
c001bea1:	5f                   	pop    edi
c001bea2:	5d                   	pop    ebp
c001bea3:	c3                   	ret    
c001bea4:	83 c4 04             	add    esp,0x4
c001bea7:	8d 46 02             	lea    eax,[esi+0x2]
c001beaa:	5b                   	pop    ebx
c001beab:	5e                   	pop    esi
c001beac:	5f                   	pop    edi
c001bead:	5d                   	pop    ebp
c001beae:	c3                   	ret    
c001beaf:	90                   	nop
c001beb0:	83 c4 04             	add    esp,0x4
c001beb3:	31 c0                	xor    eax,eax
c001beb5:	5b                   	pop    ebx
c001beb6:	5e                   	pop    esi
c001beb7:	5f                   	pop    edi
c001beb8:	5d                   	pop    ebp
c001beb9:	c3                   	ret    
c001beba:	66 90                	xchg   ax,ax
c001bebc:	b8 01 00 00 00       	mov    eax,0x1
c001bec1:	eb d9                	jmp    c001be9c <SoundPort::buffer32(int*, int)+0x64>
c001bec3:	90                   	nop

c001bec4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001bec4:	57                   	push   edi
c001bec5:	56                   	push   esi
c001bec6:	53                   	push   ebx
c001bec7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001becb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001becf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001bed5:	39 03                	cmp    DWORD PTR [ebx],eax
c001bed7:	74 13                	je     c001beec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	68 58 42 02 c0       	push   0xc0024258
c001bee1:	e8 8c 2f ff ff       	call   c000ee72 <KePanic(char const*)>
c001bee6:	83 c4 10             	add    esp,0x10
c001bee9:	8d 76 00             	lea    esi,[esi+0x0]
c001beec:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001bef2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bef5:	74 11                	je     c001bf08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001bef7:	83 ec 0c             	sub    esp,0xc
c001befa:	68 97 42 02 c0       	push   0xc0024297
c001beff:	e8 6e 2f ff ff       	call   c000ee72 <KePanic(char const*)>
c001bf04:	83 c4 10             	add    esp,0x10
c001bf07:	90                   	nop
c001bf08:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001bf0e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bf11:	74 11                	je     c001bf24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001bf13:	83 ec 0c             	sub    esp,0xc
c001bf16:	68 97 42 02 c0       	push   0xc0024297
c001bf1b:	e8 52 2f ff ff       	call   c000ee72 <KePanic(char const*)>
c001bf20:	83 c4 10             	add    esp,0x10
c001bf23:	90                   	nop
c001bf24:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001bf27:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001bf2b:	7e 07                	jle    c001bf34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001bf2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bf31:	8d 76 00             	lea    esi,[esi+0x0]
c001bf34:	85 f6                	test   esi,esi
c001bf36:	7e 2c                	jle    c001bf64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001bf38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf3c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001bf3f:	31 c9                	xor    ecx,ecx
c001bf41:	01 d7                	add    edi,edx
c001bf43:	90                   	nop
c001bf44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001bf47:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001bf4a:	85 c0                	test   eax,eax
c001bf4c:	79 06                	jns    c001bf54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001bf4e:	05 ff 7f 00 00       	add    eax,0x7fff
c001bf53:	90                   	nop
c001bf54:	c1 f8 0f             	sar    eax,0xf
c001bf57:	83 c1 04             	add    ecx,0x4
c001bf5a:	66 01 02             	add    WORD PTR [edx],ax
c001bf5d:	83 c2 02             	add    edx,0x2
c001bf60:	39 d7                	cmp    edi,edx
c001bf62:	75 e0                	jne    c001bf44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001bf64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bf67:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bf6a:	83 ec 04             	sub    esp,0x4
c001bf6d:	29 f0                	sub    eax,esi
c001bf6f:	c1 e0 02             	shl    eax,0x2
c001bf72:	50                   	push   eax
c001bf73:	8d 04 b2             	lea    eax,[edx+esi*4]
c001bf76:	50                   	push   eax
c001bf77:	52                   	push   edx
c001bf78:	e8 53 44 fe ff       	call   c00003d0 <memmove>
c001bf7d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bf80:	83 c4 10             	add    esp,0x10
c001bf83:	29 f0                	sub    eax,esi
c001bf85:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bf88:	89 f0                	mov    eax,esi
c001bf8a:	5b                   	pop    ebx
c001bf8b:	5e                   	pop    esi
c001bf8c:	5f                   	pop    edi
c001bf8d:	c3                   	ret    
c001bf8e:	66 90                	xchg   ax,ax

c001bf90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001bf90:	57                   	push   edi
c001bf91:	56                   	push   esi
c001bf92:	53                   	push   ebx
c001bf93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf97:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bf9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bf9f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001bfa5:	39 06                	cmp    DWORD PTR [esi],eax
c001bfa7:	74 13                	je     c001bfbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001bfa9:	83 ec 0c             	sub    esp,0xc
c001bfac:	68 78 42 02 c0       	push   0xc0024278
c001bfb1:	e8 bc 2e ff ff       	call   c000ee72 <KePanic(char const*)>
c001bfb6:	83 c4 10             	add    esp,0x10
c001bfb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfbc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001bfc2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001bfc5:	74 11                	je     c001bfd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001bfc7:	83 ec 0c             	sub    esp,0xc
c001bfca:	68 b3 42 02 c0       	push   0xc00242b3
c001bfcf:	e8 9e 2e ff ff       	call   c000ee72 <KePanic(char const*)>
c001bfd4:	83 c4 10             	add    esp,0x10
c001bfd7:	90                   	nop
c001bfd8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001bfde:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001bfe1:	74 11                	je     c001bff4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001bfe3:	83 ec 0c             	sub    esp,0xc
c001bfe6:	68 b3 42 02 c0       	push   0xc00242b3
c001bfeb:	e8 82 2e ff ff       	call   c000ee72 <KePanic(char const*)>
c001bff0:	83 c4 10             	add    esp,0x10
c001bff3:	90                   	nop
c001bff4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001bff7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001bffb:	7e 07                	jle    c001c004 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001bffd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c001:	8d 76 00             	lea    esi,[esi+0x0]
c001c004:	85 ff                	test   edi,edi
c001c006:	7e 1c                	jle    c001c024 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001c008:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c00f:	31 c0                	xor    eax,eax
c001c011:	8d 76 00             	lea    esi,[esi+0x0]
c001c014:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c017:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c01a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c01d:	83 c0 04             	add    eax,0x4
c001c020:	39 c1                	cmp    ecx,eax
c001c022:	75 f0                	jne    c001c014 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001c024:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c027:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c02a:	83 ec 04             	sub    esp,0x4
c001c02d:	29 f8                	sub    eax,edi
c001c02f:	c1 e0 02             	shl    eax,0x2
c001c032:	50                   	push   eax
c001c033:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c036:	50                   	push   eax
c001c037:	52                   	push   edx
c001c038:	e8 93 43 fe ff       	call   c00003d0 <memmove>
c001c03d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	29 f8                	sub    eax,edi
c001c045:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001c048:	89 f8                	mov    eax,edi
c001c04a:	5b                   	pop    ebx
c001c04b:	5e                   	pop    esi
c001c04c:	5f                   	pop    edi
c001c04d:	c3                   	ret    

c001c04e <PCI::open(int, int, void*)>:
c001c04e:	83 ec 18             	sub    esp,0x18
c001c051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c055:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c059:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c05f:	8b 10                	mov    edx,DWORD PTR [eax]
c001c061:	50                   	push   eax
c001c062:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c065:	31 c0                	xor    eax,eax
c001c067:	83 c4 1c             	add    esp,0x1c
c001c06a:	c3                   	ret    
c001c06b:	90                   	nop

c001c06c <PCI::close(int, int, void*)>:
c001c06c:	31 c0                	xor    eax,eax
c001c06e:	c3                   	ret    
c001c06f:	90                   	nop

c001c070 <PCI::PCI()>:
c001c070:	83 ec 0c             	sub    esp,0xc
c001c073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c077:	83 ec 08             	sub    esp,0x8
c001c07a:	68 cf 42 02 c0       	push   0xc00242cf
c001c07f:	50                   	push   eax
c001c080:	e8 87 c8 fe ff       	call   c000890c <Bus::Bus(char const*)>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	ba dc 43 02 c0       	mov    edx,0xc00243dc
c001c08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c091:	89 10                	mov    DWORD PTR [eax],edx
c001c093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c097:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a5:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c001c0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0b4:	0f b6 d0             	movzx  edx,al
c001c0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0bb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0cc:	0f b6 d0             	movzx  edx,al
c001c0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0e2:	8d 50 01             	lea    edx,[eax+0x1]
c001c0e5:	88 d1                	mov    cl,dl
c001c0e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c0eb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001c0f1:	0f b6 d0             	movzx  edx,al
c001c0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c0fc:	83 c9 c0             	or     ecx,0xffffffc0
c001c0ff:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c103:	90                   	nop
c001c104:	83 c4 0c             	add    esp,0xc
c001c107:	c3                   	ret    

c001c108 <PCI::readBAR8(unsigned int, int)>:
c001c108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c10c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c110:	f6 c2 01             	test   dl,0x1
c001c113:	74 07                	je     c001c11c <PCI::readBAR8(unsigned int, int)+0x14>
c001c115:	83 e2 fc             	and    edx,0xfffffffc
c001c118:	01 c2                	add    edx,eax
c001c11a:	ec                   	in     al,dx
c001c11b:	c3                   	ret    
c001c11c:	83 e2 f0             	and    edx,0xfffffff0
c001c11f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c122:	c3                   	ret    
c001c123:	90                   	nop

c001c124 <PCI::readBAR16(unsigned int, int)>:
c001c124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c12c:	f6 c2 01             	test   dl,0x1
c001c12f:	74 08                	je     c001c139 <PCI::readBAR16(unsigned int, int)+0x15>
c001c131:	83 e2 fc             	and    edx,0xfffffffc
c001c134:	01 c2                	add    edx,eax
c001c136:	66 ed                	in     ax,dx
c001c138:	c3                   	ret    
c001c139:	83 e2 f0             	and    edx,0xfffffff0
c001c13c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c140:	c3                   	ret    
c001c141:	90                   	nop

c001c142 <PCI::readBAR32(unsigned int, int)>:
c001c142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c14a:	f6 c2 01             	test   dl,0x1
c001c14d:	74 07                	je     c001c156 <PCI::readBAR32(unsigned int, int)+0x14>
c001c14f:	83 e2 fc             	and    edx,0xfffffffc
c001c152:	01 c2                	add    edx,eax
c001c154:	ed                   	in     eax,dx
c001c155:	c3                   	ret    
c001c156:	83 e2 f0             	and    edx,0xfffffff0
c001c159:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c15c:	c3                   	ret    
c001c15d:	90                   	nop

c001c15e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c15e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c16a:	f6 c2 01             	test   dl,0x1
c001c16d:	74 07                	je     c001c176 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001c16f:	83 e2 fc             	and    edx,0xfffffffc
c001c172:	01 ca                	add    edx,ecx
c001c174:	ee                   	out    dx,al
c001c175:	c3                   	ret    
c001c176:	83 e2 f0             	and    edx,0xfffffff0
c001c179:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001c17c:	c3                   	ret    
c001c17d:	90                   	nop

c001c17e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001c17e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c186:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c18a:	f6 c2 01             	test   dl,0x1
c001c18d:	74 08                	je     c001c197 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001c18f:	83 e2 fc             	and    edx,0xfffffffc
c001c192:	01 ca                	add    edx,ecx
c001c194:	66 ef                	out    dx,ax
c001c196:	c3                   	ret    
c001c197:	83 e2 f0             	and    edx,0xfffffff0
c001c19a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001c19e:	c3                   	ret    
c001c19f:	90                   	nop

c001c1a0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001c1a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1ac:	f6 c2 01             	test   dl,0x1
c001c1af:	74 07                	je     c001c1b8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001c1b1:	83 e2 fc             	and    edx,0xfffffffc
c001c1b4:	01 ca                	add    edx,ecx
c001c1b6:	ef                   	out    dx,eax
c001c1b7:	c3                   	ret    
c001c1b8:	83 e2 f0             	and    edx,0xfffffff0
c001c1bb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001c1be:	c3                   	ret    
c001c1bf:	90                   	nop

c001c1c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c1c0:	55                   	push   ebp
c001c1c1:	57                   	push   edi
c001c1c2:	56                   	push   esi
c001c1c3:	53                   	push   ebx
c001c1c4:	83 ec 0c             	sub    esp,0xc
c001c1c7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001c1cc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001c1d0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c1d4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c1d8:	83 fe 07             	cmp    esi,0x7
c001c1db:	76 10                	jbe    c001c1ed <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001c1dd:	83 ec 0c             	sub    esp,0xc
c001c1e0:	68 d7 42 02 c0       	push   0xc00242d7
c001c1e5:	e8 88 2c ff ff       	call   c000ee72 <KePanic(char const*)>
c001c1ea:	83 c4 10             	add    esp,0x10
c001c1ed:	0f b6 db             	movzx  ebx,bl
c001c1f0:	83 fb 0f             	cmp    ebx,0xf
c001c1f3:	76 10                	jbe    c001c205 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001c1f5:	83 ec 0c             	sub    esp,0xc
c001c1f8:	68 07 43 02 c0       	push   0xc0024307
c001c1fd:	e8 70 2c ff ff       	call   c000ee72 <KePanic(char const*)>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	8d 04 36             	lea    eax,[esi+esi*1]
c001c208:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c20d:	83 c8 f0             	or     eax,0xfffffff0
c001c210:	ee                   	out    dx,al
c001c211:	ba fa 0c 00 00       	mov    edx,0xcfa
c001c216:	89 e8                	mov    eax,ebp
c001c218:	ee                   	out    dx,al
c001c219:	83 c4 0c             	add    esp,0xc
c001c21c:	89 d8                	mov    eax,ebx
c001c21e:	89 f9                	mov    ecx,edi
c001c220:	c1 e0 08             	shl    eax,0x8
c001c223:	0f b6 d9             	movzx  ebx,cl
c001c226:	83 e3 fc             	and    ebx,0xfffffffc
c001c229:	09 d8                	or     eax,ebx
c001c22b:	5b                   	pop    ebx
c001c22c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001c231:	5e                   	pop    esi
c001c232:	5f                   	pop    edi
c001c233:	5d                   	pop    ebp
c001c234:	c3                   	ret    
c001c235:	90                   	nop

c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c236:	57                   	push   edi
c001c237:	56                   	push   esi
c001c238:	53                   	push   ebx
c001c239:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c23d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c241:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001c247:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c24b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c24f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c253:	83 ff 01             	cmp    edi,0x1
c001c256:	75 3f                	jne    c001c297 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001c258:	89 de                	mov    esi,ebx
c001c25a:	0f b6 c0             	movzx  eax,al
c001c25d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001c263:	c1 e0 10             	shl    eax,0x10
c001c266:	0f b6 c9             	movzx  ecx,cl
c001c269:	09 f0                	or     eax,esi
c001c26b:	c1 e1 08             	shl    ecx,0x8
c001c26e:	0f b6 d2             	movzx  edx,dl
c001c271:	09 c8                	or     eax,ecx
c001c273:	c1 e2 0b             	shl    edx,0xb
c001c276:	09 d0                	or     eax,edx
c001c278:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c27d:	0d 00 00 00 80       	or     eax,0x80000000
c001c282:	ef                   	out    dx,eax
c001c283:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c288:	ed                   	in     eax,dx
c001c289:	83 e3 02             	and    ebx,0x2
c001c28c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c293:	d3 e8                	shr    eax,cl
c001c295:	eb 44                	jmp    c001c2db <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c297:	83 ff 02             	cmp    edi,0x2
c001c29a:	75 2d                	jne    c001c2c9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001c29c:	83 ec 0c             	sub    esp,0xc
c001c29f:	0f b6 c9             	movzx  ecx,cl
c001c2a2:	0f b6 d2             	movzx  edx,dl
c001c2a5:	0f b6 fb             	movzx  edi,bl
c001c2a8:	0f b6 c0             	movzx  eax,al
c001c2ab:	57                   	push   edi
c001c2ac:	51                   	push   ecx
c001c2ad:	52                   	push   edx
c001c2ae:	50                   	push   eax
c001c2af:	56                   	push   esi
c001c2b0:	e8 0b ff ff ff       	call   c001c1c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2b5:	89 c2                	mov    edx,eax
c001c2b7:	ed                   	in     eax,dx
c001c2b8:	83 e3 02             	and    ebx,0x2
c001c2bb:	83 c4 20             	add    esp,0x20
c001c2be:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c2c5:	d3 e8                	shr    eax,cl
c001c2c7:	eb 12                	jmp    c001c2db <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c2c9:	83 ec 0c             	sub    esp,0xc
c001c2cc:	68 37 43 02 c0       	push   0xc0024337
c001c2d1:	e8 9c 2b ff ff       	call   c000ee72 <KePanic(char const*)>
c001c2d6:	83 c4 10             	add    esp,0x10
c001c2d9:	31 c0                	xor    eax,eax
c001c2db:	5b                   	pop    ebx
c001c2dc:	5e                   	pop    esi
c001c2dd:	5f                   	pop    edi
c001c2de:	c3                   	ret    
c001c2df:	90                   	nop

c001c2e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c2e0:	83 ec 18             	sub    esp,0x18
c001c2e3:	6a 00                	push   0x0
c001c2e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c2ea:	50                   	push   eax
c001c2eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c2f0:	50                   	push   eax
c001c2f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c2f6:	50                   	push   eax
c001c2f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2fb:	e8 36 ff ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c300:	83 c4 2c             	add    esp,0x2c
c001c303:	c3                   	ret    

c001c304 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c304:	83 ec 18             	sub    esp,0x18
c001c307:	6a 0e                	push   0xe
c001c309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c30e:	50                   	push   eax
c001c30f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c314:	50                   	push   eax
c001c315:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c31a:	50                   	push   eax
c001c31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c31f:	e8 12 ff ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c324:	83 c4 2c             	add    esp,0x2c
c001c327:	0f b6 c0             	movzx  eax,al
c001c32a:	c3                   	ret    
c001c32b:	90                   	nop

c001c32c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c32c:	55                   	push   ebp
c001c32d:	57                   	push   edi
c001c32e:	56                   	push   esi
c001c32f:	53                   	push   ebx
c001c330:	83 ec 18             	sub    esp,0x18
c001c333:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001c338:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001c33d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001c342:	6a 0a                	push   0xa
c001c344:	56                   	push   esi
c001c345:	55                   	push   ebp
c001c346:	57                   	push   edi
c001c347:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c34b:	e8 e6 fe ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c350:	83 c4 14             	add    esp,0x14
c001c353:	89 c3                	mov    ebx,eax
c001c355:	6a 0a                	push   0xa
c001c357:	0f b6 db             	movzx  ebx,bl
c001c35a:	56                   	push   esi
c001c35b:	55                   	push   ebp
c001c35c:	57                   	push   edi
c001c35d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c361:	e8 d0 fe ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c366:	83 c4 2c             	add    esp,0x2c
c001c369:	25 00 ff 00 00       	and    eax,0xff00
c001c36e:	09 d8                	or     eax,ebx
c001c370:	5b                   	pop    ebx
c001c371:	5e                   	pop    esi
c001c372:	5f                   	pop    edi
c001c373:	5d                   	pop    ebp
c001c374:	c3                   	ret    
c001c375:	90                   	nop

c001c376 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c376:	83 ec 18             	sub    esp,0x18
c001c379:	6a 08                	push   0x8
c001c37b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c380:	50                   	push   eax
c001c381:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c386:	50                   	push   eax
c001c387:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c38c:	50                   	push   eax
c001c38d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c391:	e8 a0 fe ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c396:	83 c4 2c             	add    esp,0x2c
c001c399:	0f b6 c4             	movzx  eax,ah
c001c39c:	c3                   	ret    
c001c39d:	90                   	nop

c001c39e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c39e:	83 ec 18             	sub    esp,0x18
c001c3a1:	6a 08                	push   0x8
c001c3a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3a8:	50                   	push   eax
c001c3a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3ae:	50                   	push   eax
c001c3af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3b4:	50                   	push   eax
c001c3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3b9:	e8 78 fe ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3be:	83 c4 2c             	add    esp,0x2c
c001c3c1:	c3                   	ret    

c001c3c2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c3c2:	83 ec 18             	sub    esp,0x18
c001c3c5:	6a 3c                	push   0x3c
c001c3c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3cc:	50                   	push   eax
c001c3cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3d2:	50                   	push   eax
c001c3d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3d8:	50                   	push   eax
c001c3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3dd:	e8 54 fe ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3e2:	83 c4 2c             	add    esp,0x2c
c001c3e5:	c3                   	ret    

c001c3e6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c3e6:	83 ec 18             	sub    esp,0x18
c001c3e9:	6a 18                	push   0x18
c001c3eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3f0:	50                   	push   eax
c001c3f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3f6:	50                   	push   eax
c001c3f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c3fc:	50                   	push   eax
c001c3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c401:	e8 30 fe ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c406:	83 c4 2c             	add    esp,0x2c
c001c409:	0f b6 c4             	movzx  eax,ah
c001c40c:	c3                   	ret    
c001c40d:	90                   	nop

c001c40e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c40e:	55                   	push   ebp
c001c40f:	57                   	push   edi
c001c410:	56                   	push   esi
c001c411:	53                   	push   ebx
c001c412:	83 ec 28             	sub    esp,0x28
c001c415:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c419:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001c41e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001c423:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001c428:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c42f:	8d 43 12             	lea    eax,[ebx+0x12]
c001c432:	83 c3 10             	add    ebx,0x10
c001c435:	0f b6 c0             	movzx  eax,al
c001c438:	0f b6 db             	movzx  ebx,bl
c001c43b:	50                   	push   eax
c001c43c:	51                   	push   ecx
c001c43d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001c441:	57                   	push   edi
c001c442:	55                   	push   ebp
c001c443:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c447:	e8 ea fd ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c44c:	83 c4 14             	add    esp,0x14
c001c44f:	89 c6                	mov    esi,eax
c001c451:	53                   	push   ebx
c001c452:	c1 e6 10             	shl    esi,0x10
c001c455:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c459:	51                   	push   ecx
c001c45a:	57                   	push   edi
c001c45b:	55                   	push   ebp
c001c45c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c460:	e8 d1 fd ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c465:	83 c4 3c             	add    esp,0x3c
c001c468:	0f b7 c0             	movzx  eax,ax
c001c46b:	5b                   	pop    ebx
c001c46c:	09 f0                	or     eax,esi
c001c46e:	5e                   	pop    esi
c001c46f:	5f                   	pop    edi
c001c470:	5d                   	pop    ebp
c001c471:	c3                   	ret    

c001c472 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c472:	55                   	push   ebp
c001c473:	57                   	push   edi
c001c474:	56                   	push   esi
c001c475:	53                   	push   ebx
c001c476:	83 ec 0c             	sub    esp,0xc
c001c479:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c47d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c481:	89 f5                	mov    ebp,esi
c001c483:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001c489:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c48d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c491:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c495:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c499:	83 f9 01             	cmp    ecx,0x1
c001c49c:	75 5d                	jne    c001c4fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001c49e:	0f b6 c8             	movzx  ecx,al
c001c4a1:	0f b6 d2             	movzx  edx,dl
c001c4a4:	c1 e1 10             	shl    ecx,0x10
c001c4a7:	c1 e2 0b             	shl    edx,0xb
c001c4aa:	89 f0                	mov    eax,esi
c001c4ac:	25 fc 00 00 00       	and    eax,0xfc
c001c4b1:	09 c1                	or     ecx,eax
c001c4b3:	89 e8                	mov    eax,ebp
c001c4b5:	0f b6 c0             	movzx  eax,al
c001c4b8:	c1 e0 08             	shl    eax,0x8
c001c4bb:	09 c1                	or     ecx,eax
c001c4bd:	09 d1                	or     ecx,edx
c001c4bf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c4c4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c4ca:	89 c8                	mov    eax,ecx
c001c4cc:	ef                   	out    dx,eax
c001c4cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c4d2:	ed                   	in     eax,dx
c001c4d3:	0f b7 db             	movzx  ebx,bx
c001c4d6:	83 e6 02             	and    esi,0x2
c001c4d9:	74 0a                	je     c001c4e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001c4db:	0f b7 d0             	movzx  edx,ax
c001c4de:	c1 e3 10             	shl    ebx,0x10
c001c4e1:	09 d3                	or     ebx,edx
c001c4e3:	eb 05                	jmp    c001c4ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001c4e5:	66 31 c0             	xor    ax,ax
c001c4e8:	09 c3                	or     ebx,eax
c001c4ea:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c4ef:	89 c8                	mov    eax,ecx
c001c4f1:	ef                   	out    dx,eax
c001c4f2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c4f7:	89 d8                	mov    eax,ebx
c001c4f9:	eb 41                	jmp    c001c53c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c4fb:	83 f9 02             	cmp    ecx,0x2
c001c4fe:	75 45                	jne    c001c545 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001c500:	83 ec 0c             	sub    esp,0xc
c001c503:	0f b6 d2             	movzx  edx,dl
c001c506:	89 f1                	mov    ecx,esi
c001c508:	0f b6 c0             	movzx  eax,al
c001c50b:	0f b6 f1             	movzx  esi,cl
c001c50e:	89 e9                	mov    ecx,ebp
c001c510:	56                   	push   esi
c001c511:	0f b6 c9             	movzx  ecx,cl
c001c514:	51                   	push   ecx
c001c515:	52                   	push   edx
c001c516:	50                   	push   eax
c001c517:	57                   	push   edi
c001c518:	e8 a3 fc ff ff       	call   c001c1c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c51d:	89 c2                	mov    edx,eax
c001c51f:	ed                   	in     eax,dx
c001c520:	83 c4 20             	add    esp,0x20
c001c523:	0f b7 db             	movzx  ebx,bx
c001c526:	f6 c2 02             	test   dl,0x2
c001c529:	74 0c                	je     c001c537 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001c52b:	0f b7 c8             	movzx  ecx,ax
c001c52e:	89 d8                	mov    eax,ebx
c001c530:	c1 e0 10             	shl    eax,0x10
c001c533:	09 c8                	or     eax,ecx
c001c535:	eb 05                	jmp    c001c53c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c537:	66 31 c0             	xor    ax,ax
c001c53a:	09 d8                	or     eax,ebx
c001c53c:	ef                   	out    dx,eax
c001c53d:	83 c4 0c             	add    esp,0xc
c001c540:	5b                   	pop    ebx
c001c541:	5e                   	pop    esi
c001c542:	5f                   	pop    edi
c001c543:	5d                   	pop    ebp
c001c544:	c3                   	ret    
c001c545:	c7 44 24 20 37 43 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024337
c001c54d:	83 c4 0c             	add    esp,0xc
c001c550:	5b                   	pop    ebx
c001c551:	5e                   	pop    esi
c001c552:	5f                   	pop    edi
c001c553:	5d                   	pop    ebp
c001c554:	e9 19 29 ff ff       	jmp    c000ee72 <KePanic(char const*)>
c001c559:	90                   	nop

c001c55a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001c55a:	55                   	push   ebp
c001c55b:	57                   	push   edi
c001c55c:	56                   	push   esi
c001c55d:	53                   	push   ebx
c001c55e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001c564:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001c56b:	80 3d cc e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cc,0x0
c001c572:	0f 85 bd 00 00 00    	jne    c001c635 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	68 14 01 00 00       	push   0x114
c001c580:	e8 a6 25 ff ff       	call   c000eb2b <malloc>
c001c585:	83 c4 0c             	add    esp,0xc
c001c588:	89 c3                	mov    ebx,eax
c001c58a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001c590:	68 3d 43 02 c0       	push   0xc002433d
c001c595:	50                   	push   eax
c001c596:	e8 97 bb fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	85 db                	test   ebx,ebx
c001c5a0:	0f 84 67 02 00 00    	je     c001c80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c5a6:	56                   	push   esi
c001c5a7:	56                   	push   esi
c001c5a8:	6a 01                	push   0x1
c001c5aa:	53                   	push   ebx
c001c5ab:	e8 a0 bb fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	85 c0                	test   eax,eax
c001c5b5:	0f 85 52 02 00 00    	jne    c001c80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c5bb:	52                   	push   edx
c001c5bc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001c5c0:	50                   	push   eax
c001c5c1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c5c5:	50                   	push   eax
c001c5c6:	53                   	push   ebx
c001c5c7:	e8 86 be fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001c5cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c5d0:	40                   	inc    eax
c001c5d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5d4:	e8 52 25 ff ff       	call   c000eb2b <malloc>
c001c5d9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c5dd:	a3 c8 e0 02 c0       	mov    ds:0xc002e0c8,eax
c001c5e2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001c5e6:	59                   	pop    ecx
c001c5e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c5e9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001c5ed:	51                   	push   ecx
c001c5ee:	50                   	push   eax
c001c5ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c5f3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c5f7:	53                   	push   ebx
c001c5f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c5fb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001c5ff:	83 c4 20             	add    esp,0x20
c001c602:	89 c8                	mov    eax,ecx
c001c604:	99                   	cdq    
c001c605:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001c609:	0f 85 fe 01 00 00    	jne    c001c80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c60f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001c613:	0f 85 f4 01 00 00    	jne    c001c80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c619:	83 ec 0c             	sub    esp,0xc
c001c61c:	53                   	push   ebx
c001c61d:	e8 8c bb fe ff       	call   c00081ae <File::close()>
c001c622:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c626:	c6 05 cc e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0cc,0x1
c001c62d:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c001c632:	83 c4 10             	add    esp,0x10
c001c635:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c001c63a:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c001c640:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c644:	31 f6                	xor    esi,esi
c001c646:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001c64e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001c655:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c65a:	31 c9                	xor    ecx,ecx
c001c65c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001c664:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c669:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001c671:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c675:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001c67d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c681:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c685:	0f 8e 82 01 00 00    	jle    c001c80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c68b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001c68e:	d4 40                	aam    0x40
c001c690:	d5 39                	aad    0x39
c001c692:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c696:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001c69a:	d4 40                	aam    0x40
c001c69c:	d5 39                	aad    0x39
c001c69e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c6a2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001c6a6:	d4 40                	aam    0x40
c001c6a8:	d5 39                	aad    0x39
c001c6aa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c6ae:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001c6b2:	d4 40                	aam    0x40
c001c6b4:	d5 39                	aad    0x39
c001c6b6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c6ba:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001c6be:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c6c2:	3c 56                	cmp    al,0x56
c001c6c4:	74 43                	je     c001c709 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001c6c6:	d4 40                	aam    0x40
c001c6c8:	d5 39                	aad    0x39
c001c6ca:	8d 48 d0             	lea    ecx,[eax-0x30]
c001c6cd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001c6d1:	0f b6 c9             	movzx  ecx,cl
c001c6d4:	c1 e1 04             	shl    ecx,0x4
c001c6d7:	d4 40                	aam    0x40
c001c6d9:	d5 39                	aad    0x39
c001c6db:	83 e8 30             	sub    eax,0x30
c001c6de:	0f b6 c0             	movzx  eax,al
c001c6e1:	09 c1                	or     ecx,eax
c001c6e3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001c6e7:	c1 e1 04             	shl    ecx,0x4
c001c6ea:	d4 40                	aam    0x40
c001c6ec:	d5 39                	aad    0x39
c001c6ee:	83 e8 30             	sub    eax,0x30
c001c6f1:	0f b6 c0             	movzx  eax,al
c001c6f4:	09 c1                	or     ecx,eax
c001c6f6:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001c6fa:	c1 e1 04             	shl    ecx,0x4
c001c6fd:	d4 40                	aam    0x40
c001c6ff:	d5 39                	aad    0x39
c001c701:	83 e8 30             	sub    eax,0x30
c001c704:	0f b6 c0             	movzx  eax,al
c001c707:	09 c1                	or     ecx,eax
c001c709:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001c70d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c711:	3c 58                	cmp    al,0x58
c001c713:	74 47                	je     c001c75c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001c715:	d4 40                	aam    0x40
c001c717:	d5 39                	aad    0x39
c001c719:	8d 50 d0             	lea    edx,[eax-0x30]
c001c71c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001c720:	0f b6 d2             	movzx  edx,dl
c001c723:	c1 e2 04             	shl    edx,0x4
c001c726:	d4 40                	aam    0x40
c001c728:	d5 39                	aad    0x39
c001c72a:	83 e8 30             	sub    eax,0x30
c001c72d:	0f b6 c0             	movzx  eax,al
c001c730:	09 c2                	or     edx,eax
c001c732:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001c736:	c1 e2 04             	shl    edx,0x4
c001c739:	d4 40                	aam    0x40
c001c73b:	d5 39                	aad    0x39
c001c73d:	83 e8 30             	sub    eax,0x30
c001c740:	0f b6 c0             	movzx  eax,al
c001c743:	09 c2                	or     edx,eax
c001c745:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001c749:	c1 e2 04             	shl    edx,0x4
c001c74c:	d4 40                	aam    0x40
c001c74e:	d5 39                	aad    0x39
c001c750:	83 e8 30             	sub    eax,0x30
c001c753:	0f b6 c0             	movzx  eax,al
c001c756:	09 c2                	or     edx,eax
c001c758:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c75c:	83 c6 10             	add    esi,0x10
c001c75f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c763:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001c767:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c76b:	83 fa 0a             	cmp    edx,0xa
c001c76e:	74 0b                	je     c001c77b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001c770:	47                   	inc    edi
c001c771:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c775:	75 19                	jne    c001c790 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001c777:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001c77b:	31 c0                	xor    eax,eax
c001c77d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001c782:	0f 94 c0             	sete   al
c001c785:	01 c6                	add    esi,eax
c001c787:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c78c:	75 0b                	jne    c001c799 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001c78e:	eb 14                	jmp    c001c7a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001c790:	46                   	inc    esi
c001c791:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001c794:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c797:	eb ca                	jmp    c001c763 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001c799:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001c79e:	0f 85 dd fe ff ff    	jne    c001c681 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c7a4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001c7a9:	74 10                	je     c001c7bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001c7ab:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c7b0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c7b5:	0f 85 c6 fe ff ff    	jne    c001c681 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c7bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c7c3:	83 e8 30             	sub    eax,0x30
c001c7c6:	83 ef 30             	sub    edi,0x30
c001c7c9:	c1 e0 04             	shl    eax,0x4
c001c7cc:	09 f8                	or     eax,edi
c001c7ce:	0f b6 c0             	movzx  eax,al
c001c7d1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c7d5:	0f 85 a6 fe ff ff    	jne    c001c681 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7df:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c7e3:	83 e8 30             	sub    eax,0x30
c001c7e6:	83 ef 30             	sub    edi,0x30
c001c7e9:	c1 e0 04             	shl    eax,0x4
c001c7ec:	09 f8                	or     eax,edi
c001c7ee:	0f b6 c0             	movzx  eax,al
c001c7f1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c7f5:	0f 85 86 fe ff ff    	jne    c001c681 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c7fb:	50                   	push   eax
c001c7fc:	50                   	push   eax
c001c7fd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c801:	50                   	push   eax
c001c802:	55                   	push   ebp
c001c803:	e8 38 3e fe ff       	call   c0000640 <strcpy>
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	eb 06                	jmp    c001c813 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001c80d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c811:	31 ed                	xor    ebp,ebp
c001c813:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c819:	89 e8                	mov    eax,ebp
c001c81b:	5b                   	pop    ebx
c001c81c:	5e                   	pop    esi
c001c81d:	5f                   	pop    edi
c001c81e:	5d                   	pop    ebp
c001c81f:	c3                   	ret    

c001c820 <PCI::checkBus(unsigned char)>:
c001c820:	56                   	push   esi
c001c821:	53                   	push   ebx
c001c822:	31 db                	xor    ebx,ebx
c001c824:	51                   	push   ecx
c001c825:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c82a:	52                   	push   edx
c001c82b:	53                   	push   ebx
c001c82c:	43                   	inc    ebx
c001c82d:	56                   	push   esi
c001c82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c832:	e8 6f 03 00 00       	call   c001cba6 <PCI::checkDevice(unsigned char, unsigned char)>
c001c837:	83 c4 10             	add    esp,0x10
c001c83a:	83 fb 20             	cmp    ebx,0x20
c001c83d:	75 eb                	jne    c001c82a <PCI::checkBus(unsigned char)+0xa>
c001c83f:	58                   	pop    eax
c001c840:	5b                   	pop    ebx
c001c841:	5e                   	pop    esi
c001c842:	c3                   	ret    
c001c843:	90                   	nop

c001c844 <PCI::foundDevice(PCIDeviceInfo)>:
c001c844:	55                   	push   ebp
c001c845:	57                   	push   edi
c001c846:	56                   	push   esi
c001c847:	53                   	push   ebx
c001c848:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c84e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c856:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001c85d:	3d ff ff 00 00       	cmp    eax,0xffff
c001c862:	0f 84 b7 01 00 00    	je     c001ca1f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c868:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001c870:	66 81 fb 06 04       	cmp    bx,0x406
c001c875:	75 32                	jne    c001c8a9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c877:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c87f:	50                   	push   eax
c001c880:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c888:	50                   	push   eax
c001c889:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c891:	50                   	push   eax
c001c892:	55                   	push   ebp
c001c893:	e8 4e fb ff ff       	call   c001c3e6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c898:	59                   	pop    ecx
c001c899:	0f b6 c0             	movzx  eax,al
c001c89c:	5b                   	pop    ebx
c001c89d:	50                   	push   eax
c001c89e:	55                   	push   ebp
c001c89f:	e8 7c ff ff ff       	call   c001c820 <PCI::checkBus(unsigned char)>
c001c8a4:	e9 16 01 00 00       	jmp    c001c9bf <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001c8a9:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c8b0:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001c8b6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c8ba:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001c8c1:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	74 36                	je     c001c903 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001c8cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c8d0:	85 d2                	test   edx,edx
c001c8d2:	74 2b                	je     c001c8ff <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c8d4:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001c8da:	31 f9                	xor    ecx,edi
c001c8dc:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001c8e2:	75 1b                	jne    c001c8ff <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c8e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8e8:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001c8ee:	75 0f                	jne    c001c8ff <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c8f0:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c8f7:	39 f2                	cmp    edx,esi
c001c8f9:	0f 84 20 01 00 00    	je     c001ca1f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c8ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001c901:	eb c6                	jmp    c001c8c9 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c903:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c907:	be 70 43 02 c0       	mov    esi,0xc0024370
c001c90c:	b9 07 00 00 00       	mov    ecx,0x7
c001c911:	fc                   	cld    
c001c912:	31 d2                	xor    edx,edx
c001c914:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c916:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c91d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c921:	b9 12 00 00 00       	mov    ecx,0x12
c001c926:	83 ec 0c             	sub    esp,0xc
c001c929:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c92b:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c933:	b9 0a 00 00 00       	mov    ecx,0xa
c001c938:	f7 f1                	div    ecx
c001c93a:	83 c0 30             	add    eax,0x30
c001c93d:	83 c2 30             	add    edx,0x30
c001c940:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c944:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c948:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c950:	31 d2                	xor    edx,edx
c001c952:	f7 f1                	div    ecx
c001c954:	83 c0 30             	add    eax,0x30
c001c957:	83 c2 30             	add    edx,0x30
c001c95a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c95e:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c962:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c966:	50                   	push   eax
c001c967:	e8 74 fe fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001c96c:	83 c4 10             	add    esp,0x10
c001c96f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001c975:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c97c:	75 46                	jne    c001c9c4 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001c97e:	83 ec 0c             	sub    esp,0xc
c001c981:	68 64 01 00 00       	push   0x164
c001c986:	e8 a0 21 ff ff       	call   c000eb2b <malloc>
c001c98b:	89 c3                	mov    ebx,eax
c001c98d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c990:	e8 39 11 00 00       	call   c001dace <SATABus::SATABus()>
c001c995:	58                   	pop    eax
c001c996:	5a                   	pop    edx
c001c997:	53                   	push   ebx
c001c998:	55                   	push   ebp
c001c999:	e8 f4 c6 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001c99e:	83 ec 1c             	sub    esp,0x1c
c001c9a1:	b9 09 00 00 00       	mov    ecx,0x9
c001c9a6:	89 e7                	mov    edi,esp
c001c9a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c9aa:	53                   	push   ebx
c001c9ab:	e8 28 c6 fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c9b0:	83 c4 30             	add    esp,0x30
c001c9b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9b5:	6a 00                	push   0x0
c001c9b7:	6a 00                	push   0x0
c001c9b9:	6a 00                	push   0x0
c001c9bb:	53                   	push   ebx
c001c9bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	eb 5b                	jmp    c001ca1f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c9c4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c9ca:	75 19                	jne    c001c9e5 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	68 70 02 00 00       	push   0x270
c001c9d4:	e8 52 21 ff ff       	call   c000eb2b <malloc>
c001c9d9:	89 c3                	mov    ebx,eax
c001c9db:	89 04 24             	mov    DWORD PTR [esp],eax
c001c9de:	e8 93 02 00 00       	call   c001cc76 <IDE::IDE()>
c001c9e3:	eb b0                	jmp    c001c995 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001c9e5:	83 ec 0c             	sub    esp,0xc
c001c9e8:	68 58 01 00 00       	push   0x158
c001c9ed:	e8 39 21 ff ff       	call   c000eb2b <malloc>
c001c9f2:	89 c3                	mov    ebx,eax
c001c9f4:	58                   	pop    eax
c001c9f5:	5a                   	pop    edx
c001c9f6:	68 56 43 02 c0       	push   0xc0024356
c001c9fb:	53                   	push   ebx
c001c9fc:	e8 45 c9 fe ff       	call   c0009346 <DriverlessDevice::DriverlessDevice(char const*)>
c001ca01:	59                   	pop    ecx
c001ca02:	5f                   	pop    edi
c001ca03:	53                   	push   ebx
c001ca04:	55                   	push   ebp
c001ca05:	e8 88 c6 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001ca0a:	83 ec 1c             	sub    esp,0x1c
c001ca0d:	b9 09 00 00 00       	mov    ecx,0x9
c001ca12:	89 e7                	mov    edi,esp
c001ca14:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ca16:	53                   	push   ebx
c001ca17:	e8 bc c5 fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001ca1c:	83 c4 30             	add    esp,0x30
c001ca1f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ca25:	5b                   	pop    ebx
c001ca26:	5e                   	pop    esi
c001ca27:	5f                   	pop    edi
c001ca28:	5d                   	pop    ebp
c001ca29:	c3                   	ret    

c001ca2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ca2a:	55                   	push   ebp
c001ca2b:	57                   	push   edi
c001ca2c:	56                   	push   esi
c001ca2d:	53                   	push   ebx
c001ca2e:	83 ec 68             	sub    esp,0x68
c001ca31:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ca35:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ca3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca40:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ca47:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ca4c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca50:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ca57:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ca5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca60:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ca65:	6a 0c                	push   0xc
c001ca67:	57                   	push   edi
c001ca68:	53                   	push   ebx
c001ca69:	56                   	push   esi
c001ca6a:	55                   	push   ebp
c001ca6b:	e8 c6 f7 ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca70:	83 c4 20             	add    esp,0x20
c001ca73:	57                   	push   edi
c001ca74:	53                   	push   ebx
c001ca75:	56                   	push   esi
c001ca76:	55                   	push   ebp
c001ca77:	e8 b0 f8 ff ff       	call   c001c32c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ca7c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ca81:	57                   	push   edi
c001ca82:	53                   	push   ebx
c001ca83:	56                   	push   esi
c001ca84:	55                   	push   ebp
c001ca85:	e8 38 f9 ff ff       	call   c001c3c2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ca8a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ca8e:	83 c4 14             	add    esp,0x14
c001ca91:	6a 3c                	push   0x3c
c001ca93:	57                   	push   edi
c001ca94:	53                   	push   ebx
c001ca95:	56                   	push   esi
c001ca96:	55                   	push   ebp
c001ca97:	e8 9a f7 ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca9c:	0f b6 c4             	movzx  eax,ah
c001ca9f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001caa3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001caa7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001caab:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001cab0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001cab6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001cabc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cac0:	83 c4 20             	add    esp,0x20
c001cac3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001cac8:	74 30                	je     c001cafa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001caca:	31 c0                	xor    eax,eax
c001cacc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001cad0:	7e 28                	jle    c001cafa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001cad2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001cada:	39 cb                	cmp    ebx,ecx
c001cadc:	75 19                	jne    c001caf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001cade:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001cae6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001caea:	75 0b                	jne    c001caf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001caec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001caf3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001caf7:	40                   	inc    eax
c001caf8:	eb d2                	jmp    c001cacc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001cafa:	31 d2                	xor    edx,edx
c001cafc:	83 ec 0c             	sub    esp,0xc
c001caff:	57                   	push   edi
c001cb00:	53                   	push   ebx
c001cb01:	56                   	push   esi
c001cb02:	52                   	push   edx
c001cb03:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001cb07:	55                   	push   ebp
c001cb08:	e8 01 f9 ff ff       	call   c001c40e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cb11:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001cb15:	42                   	inc    edx
c001cb16:	83 c4 20             	add    esp,0x20
c001cb19:	83 fa 06             	cmp    edx,0x6
c001cb1c:	75 de                	jne    c001cafc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001cb1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb26:	c1 e2 08             	shl    edx,0x8
c001cb29:	83 ec 0c             	sub    esp,0xc
c001cb2c:	0f b6 c4             	movzx  eax,ah
c001cb2f:	09 d0                	or     eax,edx
c001cb31:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001cb36:	6a 02                	push   0x2
c001cb38:	57                   	push   edi
c001cb39:	53                   	push   ebx
c001cb3a:	56                   	push   esi
c001cb3b:	55                   	push   ebp
c001cb3c:	e8 f5 f6 ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb41:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001cb46:	83 c4 20             	add    esp,0x20
c001cb49:	57                   	push   edi
c001cb4a:	53                   	push   ebx
c001cb4b:	56                   	push   esi
c001cb4c:	55                   	push   ebp
c001cb4d:	e8 24 f8 ff ff       	call   c001c376 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001cb52:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001cb56:	57                   	push   edi
c001cb57:	53                   	push   ebx
c001cb58:	56                   	push   esi
c001cb59:	55                   	push   ebp
c001cb5a:	e8 81 f7 ff ff       	call   c001c2e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001cb5f:	b9 09 00 00 00       	mov    ecx,0x9
c001cb64:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001cb69:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001cb6d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001cb71:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001cb75:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001cb79:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001cb7d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001cb81:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001cb85:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001cb89:	83 ec 0c             	sub    esp,0xc
c001cb8c:	fc                   	cld    
c001cb8d:	89 e7                	mov    edi,esp
c001cb8f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001cb93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001cb95:	55                   	push   ebp
c001cb96:	e8 a9 fc ff ff       	call   c001c844 <PCI::foundDevice(PCIDeviceInfo)>
c001cb9b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001cba1:	5b                   	pop    ebx
c001cba2:	5e                   	pop    esi
c001cba3:	5f                   	pop    edi
c001cba4:	5d                   	pop    ebp
c001cba5:	c3                   	ret    

c001cba6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001cba6:	55                   	push   ebp
c001cba7:	57                   	push   edi
c001cba8:	56                   	push   esi
c001cba9:	53                   	push   ebx
c001cbaa:	83 ec 0c             	sub    esp,0xc
c001cbad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001cbb1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001cbb6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001cbbb:	6a 00                	push   0x0
c001cbbd:	56                   	push   esi
c001cbbe:	57                   	push   edi
c001cbbf:	55                   	push   ebp
c001cbc0:	e8 1b f7 ff ff       	call   c001c2e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001cbc5:	6a 00                	push   0x0
c001cbc7:	56                   	push   esi
c001cbc8:	57                   	push   edi
c001cbc9:	55                   	push   ebp
c001cbca:	e8 5b fe ff ff       	call   c001ca2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001cbcf:	83 c4 20             	add    esp,0x20
c001cbd2:	6a 00                	push   0x0
c001cbd4:	56                   	push   esi
c001cbd5:	57                   	push   edi
c001cbd6:	55                   	push   ebp
c001cbd7:	e8 28 f7 ff ff       	call   c001c304 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001cbdc:	83 c4 10             	add    esp,0x10
c001cbdf:	a8 80                	test   al,0x80
c001cbe1:	74 2d                	je     c001cc10 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001cbe3:	bb 01 00 00 00       	mov    ebx,0x1
c001cbe8:	53                   	push   ebx
c001cbe9:	56                   	push   esi
c001cbea:	57                   	push   edi
c001cbeb:	55                   	push   ebp
c001cbec:	e8 ef f6 ff ff       	call   c001c2e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001cbf1:	83 c4 10             	add    esp,0x10
c001cbf4:	0f b7 c0             	movzx  eax,ax
c001cbf7:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbfc:	74 0c                	je     c001cc0a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001cbfe:	53                   	push   ebx
c001cbff:	56                   	push   esi
c001cc00:	57                   	push   edi
c001cc01:	55                   	push   ebp
c001cc02:	e8 23 fe ff ff       	call   c001ca2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001cc07:	83 c4 10             	add    esp,0x10
c001cc0a:	43                   	inc    ebx
c001cc0b:	83 fb 08             	cmp    ebx,0x8
c001cc0e:	75 d8                	jne    c001cbe8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001cc10:	83 c4 0c             	add    esp,0xc
c001cc13:	5b                   	pop    ebx
c001cc14:	5e                   	pop    esi
c001cc15:	5f                   	pop    edi
c001cc16:	5d                   	pop    ebp
c001cc17:	c3                   	ret    

c001cc18 <PCI::detect()>:
c001cc18:	56                   	push   esi
c001cc19:	53                   	push   ebx
c001cc1a:	53                   	push   ebx
c001cc1b:	31 db                	xor    ebx,ebx
c001cc1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc21:	6a 00                	push   0x0
c001cc23:	6a 00                	push   0x0
c001cc25:	6a 00                	push   0x0
c001cc27:	56                   	push   esi
c001cc28:	e8 d7 f6 ff ff       	call   c001c304 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001cc2d:	83 c4 10             	add    esp,0x10
c001cc30:	a8 80                	test   al,0x80
c001cc32:	75 21                	jne    c001cc55 <PCI::detect()+0x3d>
c001cc34:	51                   	push   ecx
c001cc35:	51                   	push   ecx
c001cc36:	6a 00                	push   0x0
c001cc38:	56                   	push   esi
c001cc39:	e8 e2 fb ff ff       	call   c001c820 <PCI::checkBus(unsigned char)>
c001cc3e:	83 c4 10             	add    esp,0x10
c001cc41:	eb 2a                	jmp    c001cc6d <PCI::detect()+0x55>
c001cc43:	52                   	push   edx
c001cc44:	52                   	push   edx
c001cc45:	53                   	push   ebx
c001cc46:	43                   	inc    ebx
c001cc47:	56                   	push   esi
c001cc48:	e8 d3 fb ff ff       	call   c001c820 <PCI::checkBus(unsigned char)>
c001cc4d:	83 c4 10             	add    esp,0x10
c001cc50:	83 fb 08             	cmp    ebx,0x8
c001cc53:	74 18                	je     c001cc6d <PCI::detect()+0x55>
c001cc55:	53                   	push   ebx
c001cc56:	6a 00                	push   0x0
c001cc58:	6a 00                	push   0x0
c001cc5a:	56                   	push   esi
c001cc5b:	e8 80 f6 ff ff       	call   c001c2e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001cc60:	83 c4 10             	add    esp,0x10
c001cc63:	0f b7 c0             	movzx  eax,ax
c001cc66:	3d ff ff 00 00       	cmp    eax,0xffff
c001cc6b:	74 d6                	je     c001cc43 <PCI::detect()+0x2b>
c001cc6d:	58                   	pop    eax
c001cc6e:	5b                   	pop    ebx
c001cc6f:	5e                   	pop    esi
c001cc70:	c3                   	ret    
c001cc71:	90                   	nop

c001cc72 <IDE::close(int, int, void*)>:
c001cc72:	83 c8 ff             	or     eax,0xffffffff
c001cc75:	c3                   	ret    

c001cc76 <IDE::IDE()>:
c001cc76:	83 ec 0c             	sub    esp,0xc
c001cc79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7d:	83 ec 08             	sub    esp,0x8
c001cc80:	68 00 44 02 c0       	push   0xc0024400
c001cc85:	50                   	push   eax
c001cc86:	e8 61 c7 fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	ba 2c 45 02 c0       	mov    edx,0xc002452c
c001cc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc97:	89 10                	mov    DWORD PTR [eax],edx
c001cc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001cca4:	90                   	nop
c001cca5:	83 c4 0c             	add    esp,0xc
c001cca8:	c3                   	ret    
c001cca9:	90                   	nop

c001ccaa <IDE::prepareInterrupt(unsigned char)>:
c001ccaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ccaf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccb3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ccbb:	c3                   	ret    

c001ccbc <selectDrive(unsigned char, unsigned char)>:
c001ccbc:	c3                   	ret    
c001ccbd:	90                   	nop

c001ccbe <IDE::getBase(unsigned char)>:
c001ccbe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ccc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccc7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001cccf:	c3                   	ret    

c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ccd0:	55                   	push   ebp
c001ccd1:	57                   	push   edi
c001ccd2:	56                   	push   esi
c001ccd3:	53                   	push   ebx
c001ccd4:	83 ec 1c             	sub    esp,0x1c
c001ccd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ccdb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ccdf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001cce2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cce6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ccea:	80 f9 03             	cmp    cl,0x3
c001cced:	77 4f                	ja     c001cd3e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ccef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccf3:	0f b6 fa             	movzx  edi,dl
c001ccf6:	0f b6 db             	movzx  ebx,bl
c001ccf9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ccfc:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001cd01:	80 ca 80             	or     dl,0x80
c001cd04:	52                   	push   edx
c001cd05:	6a 0c                	push   0xc
c001cd07:	57                   	push   edi
c001cd08:	56                   	push   esi
c001cd09:	e8 c2 ff ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd0e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cd13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd17:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001cd1b:	ee                   	out    dx,al
c001cd1c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cd21:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001cd25:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cd2d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cd35:	83 c4 2c             	add    esp,0x2c
c001cd38:	5b                   	pop    ebx
c001cd39:	5e                   	pop    esi
c001cd3a:	5f                   	pop    edi
c001cd3b:	5d                   	pop    ebp
c001cd3c:	eb 92                	jmp    c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd3e:	0f b6 cb             	movzx  ecx,bl
c001cd41:	83 f9 07             	cmp    ecx,0x7
c001cd44:	77 12                	ja     c001cd58 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001cd46:	0f b6 d2             	movzx  edx,dl
c001cd49:	0f b6 db             	movzx  ebx,bl
c001cd4c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001cd54:	01 da                	add    edx,ebx
c001cd56:	eb 2f                	jmp    c001cd87 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001cd58:	83 f9 0d             	cmp    ecx,0xd
c001cd5b:	77 13                	ja     c001cd70 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001cd5d:	0f b6 d2             	movzx  edx,dl
c001cd60:	0f b6 db             	movzx  ebx,bl
c001cd63:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001cd6a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001cd6e:	eb 17                	jmp    c001cd87 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001cd70:	83 f9 15             	cmp    ecx,0x15
c001cd73:	77 13                	ja     c001cd88 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001cd75:	0f b6 d2             	movzx  edx,dl
c001cd78:	0f b6 db             	movzx  ebx,bl
c001cd7b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001cd83:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001cd87:	ee                   	out    dx,al
c001cd88:	83 c4 1c             	add    esp,0x1c
c001cd8b:	5b                   	pop    ebx
c001cd8c:	5e                   	pop    esi
c001cd8d:	5f                   	pop    edi
c001cd8e:	5d                   	pop    ebp
c001cd8f:	c3                   	ret    

c001cd90 <IDE::read(unsigned char, unsigned char)>:
c001cd90:	55                   	push   ebp
c001cd91:	57                   	push   edi
c001cd92:	56                   	push   esi
c001cd93:	53                   	push   ebx
c001cd94:	83 ec 1c             	sub    esp,0x1c
c001cd97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cd9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd9f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001cda2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001cda6:	3c 03                	cmp    al,0x3
c001cda8:	77 40                	ja     c001cdea <IDE::read(unsigned char, unsigned char)+0x5a>
c001cdaa:	0f b6 f9             	movzx  edi,cl
c001cdad:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001cdb0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cdb5:	0c 80                	or     al,0x80
c001cdb7:	50                   	push   eax
c001cdb8:	6a 0c                	push   0xc
c001cdba:	57                   	push   edi
c001cdbb:	56                   	push   esi
c001cdbc:	e8 0f ff ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdc1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001cdc6:	0f b6 d3             	movzx  edx,bl
c001cdc9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cdcd:	ec                   	in     al,dx
c001cdce:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cdd2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001cdd7:	52                   	push   edx
c001cdd8:	6a 0c                	push   0xc
c001cdda:	57                   	push   edi
c001cddb:	56                   	push   esi
c001cddc:	e8 ef fe ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cde1:	83 c4 20             	add    esp,0x20
c001cde4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cde8:	eb 4c                	jmp    c001ce36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001cdea:	0f b6 d3             	movzx  edx,bl
c001cded:	83 fa 07             	cmp    edx,0x7
c001cdf0:	77 12                	ja     c001ce04 <IDE::read(unsigned char, unsigned char)+0x74>
c001cdf2:	0f b6 c9             	movzx  ecx,cl
c001cdf5:	0f b6 d3             	movzx  edx,bl
c001cdf8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ce00:	01 c2                	add    edx,eax
c001ce02:	eb 31                	jmp    c001ce35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ce04:	83 fa 0d             	cmp    edx,0xd
c001ce07:	77 13                	ja     c001ce1c <IDE::read(unsigned char, unsigned char)+0x8c>
c001ce09:	0f b6 c9             	movzx  ecx,cl
c001ce0c:	0f b6 d3             	movzx  edx,bl
c001ce0f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ce16:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ce1a:	eb 19                	jmp    c001ce35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ce1c:	31 c0                	xor    eax,eax
c001ce1e:	83 fa 15             	cmp    edx,0x15
c001ce21:	77 13                	ja     c001ce36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ce23:	0f b6 c9             	movzx  ecx,cl
c001ce26:	0f b6 d3             	movzx  edx,bl
c001ce29:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ce31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ce35:	ec                   	in     al,dx
c001ce36:	83 c4 1c             	add    esp,0x1c
c001ce39:	5b                   	pop    ebx
c001ce3a:	5e                   	pop    esi
c001ce3b:	5f                   	pop    edi
c001ce3c:	5d                   	pop    ebp
c001ce3d:	c3                   	ret    

c001ce3e <IDE::waitInterrupt(unsigned char)>:
c001ce3e:	55                   	push   ebp
c001ce3f:	57                   	push   edi
c001ce40:	56                   	push   esi
c001ce41:	53                   	push   ebx
c001ce42:	31 db                	xor    ebx,ebx
c001ce44:	83 ec 0c             	sub    esp,0xc
c001ce47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ce4b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ce50:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ce58:	89 e8                	mov    eax,ebp
c001ce5a:	84 c0                	test   al,al
c001ce5c:	75 30                	jne    c001ce8e <IDE::waitInterrupt(unsigned char)+0x50>
c001ce5e:	50                   	push   eax
c001ce5f:	6a 0c                	push   0xc
c001ce61:	56                   	push   esi
c001ce62:	57                   	push   edi
c001ce63:	e8 28 ff ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001ce68:	83 c4 10             	add    esp,0x10
c001ce6b:	a8 01                	test   al,0x1
c001ce6d:	75 27                	jne    c001ce96 <IDE::waitInterrupt(unsigned char)+0x58>
c001ce6f:	f6 c3 04             	test   bl,0x4
c001ce72:	75 12                	jne    c001ce86 <IDE::waitInterrupt(unsigned char)+0x48>
c001ce74:	83 fb 32             	cmp    ebx,0x32
c001ce77:	7e 0d                	jle    c001ce86 <IDE::waitInterrupt(unsigned char)+0x48>
c001ce79:	83 ec 0c             	sub    esp,0xc
c001ce7c:	6a 64                	push   0x64
c001ce7e:	e8 f5 8d ff ff       	call   c0015c78 <milliTenthSleep(unsigned int)>
c001ce83:	83 c4 10             	add    esp,0x10
c001ce86:	83 fb 3c             	cmp    ebx,0x3c
c001ce89:	74 0b                	je     c001ce96 <IDE::waitInterrupt(unsigned char)+0x58>
c001ce8b:	43                   	inc    ebx
c001ce8c:	eb c2                	jmp    c001ce50 <IDE::waitInterrupt(unsigned char)+0x12>
c001ce8e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ce96:	83 c4 0c             	add    esp,0xc
c001ce99:	89 e8                	mov    eax,ebp
c001ce9b:	5b                   	pop    ebx
c001ce9c:	5e                   	pop    esi
c001ce9d:	5f                   	pop    edi
c001ce9e:	5d                   	pop    ebp
c001ce9f:	c3                   	ret    

c001cea0 <ideChannel0IRQHandler(regs*, void*)>:
c001cea0:	83 ec 10             	sub    esp,0x10
c001cea3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cea7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ceae:	6a 07                	push   0x7
c001ceb0:	6a 00                	push   0x0
c001ceb2:	50                   	push   eax
c001ceb3:	e8 d8 fe ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001ceb8:	83 c4 1c             	add    esp,0x1c
c001cebb:	c3                   	ret    

c001cebc <ideChannel1IRQHandler(regs*, void*)>:
c001cebc:	83 ec 10             	sub    esp,0x10
c001cebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cec3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ceca:	6a 07                	push   0x7
c001cecc:	6a 01                	push   0x1
c001cece:	50                   	push   eax
c001cecf:	e8 bc fe ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001ced4:	83 c4 1c             	add    esp,0x1c
c001ced7:	c3                   	ret    

c001ced8 <IDE::enableIRQs(unsigned char, bool)>:
c001ced8:	57                   	push   edi
c001ced9:	b8 02 00 00 00       	mov    eax,0x2
c001cede:	56                   	push   esi
c001cedf:	53                   	push   ebx
c001cee0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cee4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cee8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ceed:	74 02                	je     c001cef1 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ceef:	31 c0                	xor    eax,eax
c001cef1:	0f b6 db             	movzx  ebx,bl
c001cef4:	bf 04 00 00 00       	mov    edi,0x4
c001cef9:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001cf00:	50                   	push   eax
c001cf01:	6a 0c                	push   0xc
c001cf03:	53                   	push   ebx
c001cf04:	56                   	push   esi
c001cf05:	e8 c6 fd ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf0a:	83 c4 10             	add    esp,0x10
c001cf0d:	50                   	push   eax
c001cf0e:	6a 0c                	push   0xc
c001cf10:	53                   	push   ebx
c001cf11:	56                   	push   esi
c001cf12:	e8 79 fe ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001cf17:	83 c4 10             	add    esp,0x10
c001cf1a:	4f                   	dec    edi
c001cf1b:	75 f0                	jne    c001cf0d <IDE::enableIRQs(unsigned char, bool)+0x35>
c001cf1d:	5b                   	pop    ebx
c001cf1e:	5e                   	pop    esi
c001cf1f:	5f                   	pop    edi
c001cf20:	c3                   	ret    
c001cf21:	90                   	nop

c001cf22 <IDE::open(int, int, void*)>:
c001cf22:	57                   	push   edi
c001cf23:	56                   	push   esi
c001cf24:	53                   	push   ebx
c001cf25:	83 ec 10             	sub    esp,0x10
c001cf28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cf2c:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cf35:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cf3e:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cf45:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cf4c:	0f 85 84 02 00 00    	jne    c001d1d6 <IDE::open(int, int, void*)+0x2b4>
c001cf52:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cf58:	a8 70                	test   al,0x70
c001cf5a:	75 44                	jne    c001cfa0 <IDE::open(int, int, void*)+0x7e>
c001cf5c:	ba 20 84 00 00       	mov    edx,0x8420
c001cf61:	0f a3 c2             	bt     edx,eax
c001cf64:	73 3a                	jae    c001cfa0 <IDE::open(int, int, void*)+0x7e>
c001cf66:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cf6c:	83 ec 0c             	sub    esp,0xc
c001cf6f:	83 e0 fc             	and    eax,0xfffffffc
c001cf72:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cf79:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cf7f:	83 e0 fc             	and    eax,0xfffffffc
c001cf82:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cf89:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cf8f:	83 e0 fc             	and    eax,0xfffffffc
c001cf92:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cf99:	68 75 1c 02 c0       	push   0xc0021c75
c001cf9e:	eb 60                	jmp    c001d000 <IDE::open(int, int, void*)+0xde>
c001cfa0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cfaa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cfb4:	be 64 00 00 00       	mov    esi,0x64
c001cfb9:	57                   	push   edi
c001cfba:	57                   	push   edi
c001cfbb:	68 18 44 02 c0       	push   0xc0024418
c001cfc0:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001cfc4:	57                   	push   edi
c001cfc5:	e8 76 36 fe ff       	call   c0000640 <strcpy>
c001cfca:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001cfd1:	31 d2                	xor    edx,edx
c001cfd3:	89 c8                	mov    eax,ecx
c001cfd5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfd8:	f7 f6                	div    esi
c001cfda:	be 0a 00 00 00       	mov    esi,0xa
c001cfdf:	83 c0 30             	add    eax,0x30
c001cfe2:	31 d2                	xor    edx,edx
c001cfe4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cfe8:	89 c8                	mov    eax,ecx
c001cfea:	f7 f6                	div    esi
c001cfec:	89 d1                	mov    ecx,edx
c001cfee:	31 d2                	xor    edx,edx
c001cff0:	83 c1 30             	add    ecx,0x30
c001cff3:	f7 f6                	div    esi
c001cff5:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001cff9:	83 c2 30             	add    edx,0x30
c001cffc:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001d000:	e8 db f7 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d005:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d00a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d011:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d018:	c1 e1 10             	shl    ecx,0x10
c001d01b:	c1 e0 0b             	shl    eax,0xb
c001d01e:	83 c4 10             	add    esp,0x10
c001d021:	09 c1                	or     ecx,eax
c001d023:	89 fa                	mov    edx,edi
c001d025:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d02c:	c1 e0 08             	shl    eax,0x8
c001d02f:	09 c1                	or     ecx,eax
c001d031:	89 c8                	mov    eax,ecx
c001d033:	0d 08 00 00 80       	or     eax,0x80000008
c001d038:	ef                   	out    dx,eax
c001d039:	be fc 0c 00 00       	mov    esi,0xcfc
c001d03e:	89 f2                	mov    edx,esi
c001d040:	ed                   	in     eax,dx
c001d041:	c1 e8 10             	shr    eax,0x10
c001d044:	3d ff ff 00 00       	cmp    eax,0xffff
c001d049:	0f 84 e5 00 00 00    	je     c001d134 <IDE::open(int, int, void*)+0x212>
c001d04f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d055:	89 fa                	mov    edx,edi
c001d057:	89 c8                	mov    eax,ecx
c001d059:	ef                   	out    dx,eax
c001d05a:	b0 fe                	mov    al,0xfe
c001d05c:	89 f2                	mov    edx,esi
c001d05e:	ee                   	out    dx,al
c001d05f:	89 c8                	mov    eax,ecx
c001d061:	89 fa                	mov    edx,edi
c001d063:	ef                   	out    dx,eax
c001d064:	89 f2                	mov    edx,esi
c001d066:	ed                   	in     eax,dx
c001d067:	3c fe                	cmp    al,0xfe
c001d069:	0f 85 85 00 00 00    	jne    c001d0f4 <IDE::open(int, int, void*)+0x1d2>
c001d06f:	83 ec 0c             	sub    esp,0xc
c001d072:	68 ab 1c 02 c0       	push   0xc0021cab
c001d077:	e8 64 f7 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d07c:	c7 04 24 1e 44 02 c0 	mov    DWORD PTR [esp],0xc002441e
c001d083:	e8 dc 9e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d088:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d092:	c7 04 24 ec 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eec
c001d099:	e8 42 f7 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d09e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d0a5:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d0ac:	c1 e1 10             	shl    ecx,0x10
c001d0af:	c1 e0 08             	shl    eax,0x8
c001d0b2:	89 fa                	mov    edx,edi
c001d0b4:	09 c1                	or     ecx,eax
c001d0b6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d0bd:	c1 e0 0b             	shl    eax,0xb
c001d0c0:	09 c1                	or     ecx,eax
c001d0c2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d0c8:	89 c8                	mov    eax,ecx
c001d0ca:	ef                   	out    dx,eax
c001d0cb:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001d0d1:	89 f2                	mov    edx,esi
c001d0d3:	ee                   	out    dx,al
c001d0d4:	89 c8                	mov    eax,ecx
c001d0d6:	89 fa                	mov    edx,edi
c001d0d8:	ef                   	out    dx,eax
c001d0d9:	89 f2                	mov    edx,esi
c001d0db:	ed                   	in     eax,dx
c001d0dc:	0f b6 c0             	movzx  eax,al
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001d0e8:	74 5a                	je     c001d144 <IDE::open(int, int, void*)+0x222>
c001d0ea:	83 ec 0c             	sub    esp,0xc
c001d0ed:	68 33 44 02 c0       	push   0xc0024433
c001d0f2:	eb 48                	jmp    c001d13c <IDE::open(int, int, void*)+0x21a>
c001d0f4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001d0fd:	75 2b                	jne    c001d12a <IDE::open(int, int, void*)+0x208>
c001d0ff:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001d106:	3d 80 00 00 00       	cmp    eax,0x80
c001d10b:	74 07                	je     c001d114 <IDE::open(int, int, void*)+0x1f2>
c001d10d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001d112:	75 16                	jne    c001d12a <IDE::open(int, int, void*)+0x208>
c001d114:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d11b:	83 ec 0c             	sub    esp,0xc
c001d11e:	68 9e 17 02 c0       	push   0xc002179e
c001d123:	e8 b8 f6 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d128:	eb 17                	jmp    c001d141 <IDE::open(int, int, void*)+0x21f>
c001d12a:	83 ec 0c             	sub    esp,0xc
c001d12d:	68 3b 44 02 c0       	push   0xc002443b
c001d132:	eb 08                	jmp    c001d13c <IDE::open(int, int, void*)+0x21a>
c001d134:	83 ec 0c             	sub    esp,0xc
c001d137:	68 6c 44 02 c0       	push   0xc002446c
c001d13c:	e8 31 1d ff ff       	call   c000ee72 <KePanic(char const*)>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001d14b:	0f 84 bf 00 00 00    	je     c001d210 <IDE::open(int, int, void*)+0x2ee>
c001d151:	83 ec 0c             	sub    esp,0xc
c001d154:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001d15a:	83 e0 fc             	and    eax,0xfffffffc
c001d15d:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001d164:	83 c0 08             	add    eax,0x8
c001d167:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001d16e:	68 96 44 02 c0       	push   0xc0024496
c001d173:	e8 ec 9d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d178:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d17f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d186:	50                   	push   eax
c001d187:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d18e:	50                   	push   eax
c001d18f:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d196:	50                   	push   eax
c001d197:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001d19d:	e8 94 f0 ff ff       	call   c001c236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1a2:	83 c4 18             	add    esp,0x18
c001d1a5:	83 c8 07             	or     eax,0x7
c001d1a8:	0f b7 c0             	movzx  eax,ax
c001d1ab:	50                   	push   eax
c001d1ac:	6a 04                	push   0x4
c001d1ae:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d1b5:	50                   	push   eax
c001d1b6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d1bd:	50                   	push   eax
c001d1be:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d1c5:	50                   	push   eax
c001d1c6:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001d1cc:	e8 a1 f2 ff ff       	call   c001c472 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001d1d1:	83 c4 20             	add    esp,0x20
c001d1d4:	eb 3a                	jmp    c001d210 <IDE::open(int, int, void*)+0x2ee>
c001d1d6:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001d1dc:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d1e3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d1ea:	05 06 02 00 00       	add    eax,0x206
c001d1ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d1f6:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001d1fd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d204:	05 06 02 00 00       	add    eax,0x206
c001d209:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d210:	83 ec 0c             	sub    esp,0xc
c001d213:	68 43 24 02 c0       	push   0xc0022443
c001d218:	e8 c3 f5 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d21d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	89 c2                	mov    edx,eax
c001d228:	83 e2 0f             	and    edx,0xf
c001d22b:	83 fa 08             	cmp    edx,0x8
c001d22e:	75 0a                	jne    c001d23a <IDE::open(int, int, void*)+0x318>
c001d230:	83 e8 02             	sub    eax,0x2
c001d233:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d23a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001d240:	89 c2                	mov    edx,eax
c001d242:	83 e2 0f             	and    edx,0xf
c001d245:	83 fa 08             	cmp    edx,0x8
c001d248:	75 0a                	jne    c001d254 <IDE::open(int, int, void*)+0x332>
c001d24a:	83 e8 02             	sub    eax,0x2
c001d24d:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d254:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001d25b:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001d262:	89 d0                	mov    eax,edx
c001d264:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d267:	8d 7a 01             	lea    edi,[edx+0x1]
c001d26a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d26e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001d272:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001d276:	83 e1 3f             	and    ecx,0x3f
c001d279:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d27d:	89 f9                	mov    ecx,edi
c001d27f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001d286:	0f b6 c9             	movzx  ecx,cl
c001d289:	8d 78 02             	lea    edi,[eax+0x2]
c001d28c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d28f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d293:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001d297:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d29b:	83 e2 3f             	and    edx,0x3f
c001d29e:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d2a2:	89 f9                	mov    ecx,edi
c001d2a4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001d2aa:	0f b6 d1             	movzx  edx,cl
c001d2ad:	8d 78 03             	lea    edi,[eax+0x3]
c001d2b0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d2b3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d2b7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001d2bb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001d2bf:	83 e1 3f             	and    ecx,0x3f
c001d2c2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d2c6:	89 fa                	mov    edx,edi
c001d2c8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001d2ce:	0f b6 ca             	movzx  ecx,dl
c001d2d1:	8d 78 04             	lea    edi,[eax+0x4]
c001d2d4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d2d7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d2db:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001d2df:	89 fa                	mov    edx,edi
c001d2e1:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001d2e7:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d2eb:	83 e2 3f             	and    edx,0x3f
c001d2ee:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d2f2:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001d2f9:	66 85 f6             	test   si,si
c001d2fc:	74 24                	je     c001d322 <IDE::open(int, int, void*)+0x400>
c001d2fe:	89 f9                	mov    ecx,edi
c001d300:	83 c0 05             	add    eax,0x5
c001d303:	0f b6 d1             	movzx  edx,cl
c001d306:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d309:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d30d:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001d311:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001d317:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001d31b:	83 e0 3f             	and    eax,0x3f
c001d31e:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001d322:	83 ec 0c             	sub    esp,0xc
c001d325:	68 ae 44 02 c0       	push   0xc00244ae
c001d32a:	e8 b1 f4 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d32f:	58                   	pop    eax
c001d330:	5a                   	pop    edx
c001d331:	6a 00                	push   0x0
c001d333:	53                   	push   ebx
c001d334:	e8 71 f9 ff ff       	call   c001ccaa <IDE::prepareInterrupt(unsigned char)>
c001d339:	59                   	pop    ecx
c001d33a:	5e                   	pop    esi
c001d33b:	6a 01                	push   0x1
c001d33d:	53                   	push   ebx
c001d33e:	e8 67 f9 ff ff       	call   c001ccaa <IDE::prepareInterrupt(unsigned char)>
c001d343:	c7 04 24 fd 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cfd
c001d34a:	e8 91 f4 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d34f:	83 c4 0c             	add    esp,0xc
c001d352:	6a 00                	push   0x0
c001d354:	6a 00                	push   0x0
c001d356:	53                   	push   ebx
c001d357:	e8 7c fb ff ff       	call   c001ced8 <IDE::enableIRQs(unsigned char, bool)>
c001d35c:	83 c4 0c             	add    esp,0xc
c001d35f:	6a 00                	push   0x0
c001d361:	6a 01                	push   0x1
c001d363:	53                   	push   ebx
c001d364:	e8 6f fb ff ff       	call   c001ced8 <IDE::enableIRQs(unsigned char, bool)>
c001d369:	c7 04 24 b0 44 02 c0 	mov    DWORD PTR [esp],0xc00244b0
c001d370:	e8 6b f4 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d375:	83 c4 10             	add    esp,0x10
c001d378:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001d37f:	74 3c                	je     c001d3bd <IDE::open(int, int, void*)+0x49b>
c001d381:	83 ec 0c             	sub    esp,0xc
c001d384:	53                   	push   ebx
c001d385:	6a 01                	push   0x1
c001d387:	68 a0 ce 01 c0       	push   0xc001cea0
c001d38c:	6a 0e                	push   0xe
c001d38e:	53                   	push   ebx
c001d38f:	e8 aa bc fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d394:	83 c4 14             	add    esp,0x14
c001d397:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d39d:	53                   	push   ebx
c001d39e:	6a 01                	push   0x1
c001d3a0:	68 bc ce 01 c0       	push   0xc001cebc
c001d3a5:	6a 0f                	push   0xf
c001d3a7:	53                   	push   ebx
c001d3a8:	e8 91 bc fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d3ad:	83 c4 14             	add    esp,0x14
c001d3b0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001d3b6:	68 f2 20 02 c0       	push   0xc00220f2
c001d3bb:	eb 40                	jmp    c001d3fd <IDE::open(int, int, void*)+0x4db>
c001d3bd:	83 ec 0c             	sub    esp,0xc
c001d3c0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001d3ca:	53                   	push   ebx
c001d3cb:	6a 00                	push   0x0
c001d3cd:	68 a0 ce 01 c0       	push   0xc001cea0
c001d3d2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001d3d8:	53                   	push   ebx
c001d3d9:	e8 60 bc fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d3de:	83 c4 14             	add    esp,0x14
c001d3e1:	53                   	push   ebx
c001d3e2:	6a 00                	push   0x0
c001d3e4:	68 bc ce 01 c0       	push   0xc001cebc
c001d3e9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001d3ef:	53                   	push   ebx
c001d3f0:	e8 49 bc fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d3f5:	83 c4 14             	add    esp,0x14
c001d3f8:	68 78 2d 02 c0       	push   0xc0022d78
c001d3fd:	e8 de f3 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d402:	83 c4 10             	add    esp,0x10
c001d405:	83 ec 0c             	sub    esp,0xc
c001d408:	68 b2 44 02 c0       	push   0xc00244b2
c001d40d:	e8 ce f3 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d412:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d417:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001d41a:	c7 04 24 81 34 02 c0 	mov    DWORD PTR [esp],0xc0023481
c001d421:	e8 ba f3 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d426:	83 c4 0c             	add    esp,0xc
c001d429:	6a 07                	push   0x7
c001d42b:	6a 00                	push   0x0
c001d42d:	53                   	push   ebx
c001d42e:	e8 5d f9 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d433:	83 c4 0c             	add    esp,0xc
c001d436:	6a 07                	push   0x7
c001d438:	6a 01                	push   0x1
c001d43a:	53                   	push   ebx
c001d43b:	e8 50 f9 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d440:	c7 04 24 78 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b78
c001d447:	e8 94 f3 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d44c:	83 c4 0c             	add    esp,0xc
c001d44f:	6a 01                	push   0x1
c001d451:	6a 00                	push   0x0
c001d453:	53                   	push   ebx
c001d454:	e8 7f fa ff ff       	call   c001ced8 <IDE::enableIRQs(unsigned char, bool)>
c001d459:	83 c4 0c             	add    esp,0xc
c001d45c:	6a 01                	push   0x1
c001d45e:	6a 01                	push   0x1
c001d460:	53                   	push   ebx
c001d461:	e8 72 fa ff ff       	call   c001ced8 <IDE::enableIRQs(unsigned char, bool)>
c001d466:	c7 04 24 b5 44 02 c0 	mov    DWORD PTR [esp],0xc00244b5
c001d46d:	e8 6e f3 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d472:	83 c4 20             	add    esp,0x20
c001d475:	31 c0                	xor    eax,eax
c001d477:	5b                   	pop    ebx
c001d478:	5e                   	pop    esi
c001d479:	5f                   	pop    edi
c001d47a:	c3                   	ret    
c001d47b:	90                   	nop

c001d47c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001d47c:	55                   	push   ebp
c001d47d:	57                   	push   edi
c001d47e:	56                   	push   esi
c001d47f:	53                   	push   ebx
c001d480:	83 ec 1c             	sub    esp,0x1c
c001d483:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d487:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d48b:	8d 42 f8             	lea    eax,[edx-0x8]
c001d48e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d492:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d496:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d49a:	3c 03                	cmp    al,0x3
c001d49c:	77 5a                	ja     c001d4f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001d49e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d4a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d4a6:	0f b6 db             	movzx  ebx,bl
c001d4a9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001d4ac:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d4b1:	0c 80                	or     al,0x80
c001d4b3:	50                   	push   eax
c001d4b4:	6a 0c                	push   0xc
c001d4b6:	53                   	push   ebx
c001d4b7:	56                   	push   esi
c001d4b8:	e8 13 f8 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4bd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d4c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4ca:	0f b6 d2             	movzx  edx,dl
c001d4cd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d4d1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d4d3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d4d8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001d4dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d4e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d4e4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d4ec:	83 c4 2c             	add    esp,0x2c
c001d4ef:	5b                   	pop    ebx
c001d4f0:	5e                   	pop    esi
c001d4f1:	5f                   	pop    edi
c001d4f2:	5d                   	pop    ebp
c001d4f3:	e9 d8 f7 ff ff       	jmp    c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4f8:	0f b6 c2             	movzx  eax,dl
c001d4fb:	83 f8 07             	cmp    eax,0x7
c001d4fe:	77 12                	ja     c001d512 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001d500:	0f b6 c2             	movzx  eax,dl
c001d503:	0f b6 db             	movzx  ebx,bl
c001d506:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001d50e:	01 c2                	add    edx,eax
c001d510:	eb 2f                	jmp    c001d541 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d512:	83 f8 0d             	cmp    eax,0xd
c001d515:	77 13                	ja     c001d52a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001d517:	0f b6 db             	movzx  ebx,bl
c001d51a:	0f b6 d2             	movzx  edx,dl
c001d51d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001d524:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d528:	eb 17                	jmp    c001d541 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d52a:	83 f8 15             	cmp    eax,0x15
c001d52d:	77 14                	ja     c001d543 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001d52f:	0f b6 db             	movzx  ebx,bl
c001d532:	0f b6 d2             	movzx  edx,dl
c001d535:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001d53d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d541:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d543:	83 c4 1c             	add    esp,0x1c
c001d546:	5b                   	pop    ebx
c001d547:	5e                   	pop    esi
c001d548:	5f                   	pop    edi
c001d549:	5d                   	pop    ebp
c001d54a:	c3                   	ret    
c001d54b:	90                   	nop

c001d54c <IDE::detect()>:
c001d54c:	55                   	push   ebp
c001d54d:	57                   	push   edi
c001d54e:	56                   	push   esi
c001d54f:	53                   	push   ebx
c001d550:	81 ec 28 02 00 00    	sub    esp,0x228
c001d556:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001d55d:	68 b7 44 02 c0       	push   0xc00244b7
c001d562:	e8 79 f2 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d567:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001d56d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001d571:	83 c4 10             	add    esp,0x10
c001d574:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001d579:	0f 85 2f 04 00 00    	jne    c001d9ae <IDE::detect()+0x462>
c001d57f:	83 ec 0c             	sub    esp,0xc
c001d582:	31 f6                	xor    esi,esi
c001d584:	68 ba 44 02 c0       	push   0xc00244ba
c001d589:	31 ff                	xor    edi,edi
c001d58b:	e8 50 f2 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d590:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	68 bd 44 02 c0       	push   0xc00244bd
c001d5a2:	e8 39 f2 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5b1:	83 ec 0c             	sub    esp,0xc
c001d5b4:	31 ed                	xor    ebp,ebp
c001d5b6:	68 c0 44 02 c0       	push   0xc00244c0
c001d5bb:	e8 20 f2 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d5c0:	89 f8                	mov    eax,edi
c001d5c2:	c1 e0 06             	shl    eax,0x6
c001d5c5:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d5cd:	c7 04 24 c3 44 02 c0 	mov    DWORD PTR [esp],0xc00244c3
c001d5d4:	e8 07 f2 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d5d9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d5dd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e5:	c1 e0 04             	shl    eax,0x4
c001d5e8:	83 c8 a0             	or     eax,0xffffffa0
c001d5eb:	0f b6 c0             	movzx  eax,al
c001d5ee:	50                   	push   eax
c001d5ef:	6a 06                	push   0x6
c001d5f1:	56                   	push   esi
c001d5f2:	53                   	push   ebx
c001d5f3:	e8 d8 f6 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5f8:	83 c4 1c             	add    esp,0x1c
c001d5fb:	6a 0c                	push   0xc
c001d5fd:	56                   	push   esi
c001d5fe:	53                   	push   ebx
c001d5ff:	e8 8c f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d604:	83 c4 0c             	add    esp,0xc
c001d607:	6a 0c                	push   0xc
c001d609:	56                   	push   esi
c001d60a:	53                   	push   ebx
c001d60b:	e8 80 f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d610:	83 c4 0c             	add    esp,0xc
c001d613:	6a 0c                	push   0xc
c001d615:	56                   	push   esi
c001d616:	53                   	push   ebx
c001d617:	e8 74 f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d61c:	83 c4 0c             	add    esp,0xc
c001d61f:	6a 0c                	push   0xc
c001d621:	56                   	push   esi
c001d622:	53                   	push   ebx
c001d623:	e8 68 f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d628:	c7 04 24 c6 44 02 c0 	mov    DWORD PTR [esp],0xc00244c6
c001d62f:	e8 ac f1 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d634:	68 ec 00 00 00       	push   0xec
c001d639:	6a 07                	push   0x7
c001d63b:	56                   	push   esi
c001d63c:	53                   	push   ebx
c001d63d:	e8 8e f6 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d642:	83 c4 1c             	add    esp,0x1c
c001d645:	6a 0c                	push   0xc
c001d647:	56                   	push   esi
c001d648:	53                   	push   ebx
c001d649:	e8 42 f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d64e:	83 c4 0c             	add    esp,0xc
c001d651:	6a 0c                	push   0xc
c001d653:	56                   	push   esi
c001d654:	53                   	push   ebx
c001d655:	e8 36 f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d65a:	83 c4 0c             	add    esp,0xc
c001d65d:	6a 0c                	push   0xc
c001d65f:	56                   	push   esi
c001d660:	53                   	push   ebx
c001d661:	e8 2a f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d666:	83 c4 0c             	add    esp,0xc
c001d669:	6a 0c                	push   0xc
c001d66b:	56                   	push   esi
c001d66c:	53                   	push   ebx
c001d66d:	e8 1e f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d672:	c7 04 24 c9 44 02 c0 	mov    DWORD PTR [esp],0xc00244c9
c001d679:	e8 62 f1 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d67e:	83 c4 0c             	add    esp,0xc
c001d681:	6a 0c                	push   0xc
c001d683:	56                   	push   esi
c001d684:	53                   	push   ebx
c001d685:	e8 06 f7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	84 c0                	test   al,al
c001d68f:	75 1f                	jne    c001d6b0 <IDE::detect()+0x164>
c001d691:	83 ec 0c             	sub    esp,0xc
c001d694:	68 cc 44 02 c0       	push   0xc00244cc
c001d699:	e8 42 f1 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d69e:	e9 e9 02 00 00       	jmp    c001d98c <IDE::detect()+0x440>
c001d6a3:	a8 80                	test   al,0x80
c001d6a5:	74 21                	je     c001d6c8 <IDE::detect()+0x17c>
c001d6a7:	45                   	inc    ebp
c001d6a8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001d6ae:	7f 1e                	jg     c001d6ce <IDE::detect()+0x182>
c001d6b0:	50                   	push   eax
c001d6b1:	6a 0c                	push   0xc
c001d6b3:	56                   	push   esi
c001d6b4:	53                   	push   ebx
c001d6b5:	e8 d6 f6 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d6ba:	83 c4 10             	add    esp,0x10
c001d6bd:	a8 01                	test   al,0x1
c001d6bf:	74 e2                	je     c001d6a3 <IDE::detect()+0x157>
c001d6c1:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001d6c6:	eb 22                	jmp    c001d6ea <IDE::detect()+0x19e>
c001d6c8:	a8 08                	test   al,0x8
c001d6ca:	74 db                	je     c001d6a7 <IDE::detect()+0x15b>
c001d6cc:	eb 17                	jmp    c001d6e5 <IDE::detect()+0x199>
c001d6ce:	83 ec 0c             	sub    esp,0xc
c001d6d1:	6a 32                	push   0x32
c001d6d3:	e8 a0 85 ff ff       	call   c0015c78 <milliTenthSleep(unsigned int)>
c001d6d8:	83 c4 10             	add    esp,0x10
c001d6db:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001d6e1:	75 cd                	jne    c001d6b0 <IDE::detect()+0x164>
c001d6e3:	eb dc                	jmp    c001d6c1 <IDE::detect()+0x175>
c001d6e5:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001d6ea:	83 ec 0c             	sub    esp,0xc
c001d6ed:	68 cf 44 02 c0       	push   0xc00244cf
c001d6f2:	e8 e9 f0 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d6f7:	83 c4 10             	add    esp,0x10
c001d6fa:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d6ff:	74 60                	je     c001d761 <IDE::detect()+0x215>
c001d701:	50                   	push   eax
c001d702:	6a 04                	push   0x4
c001d704:	56                   	push   esi
c001d705:	53                   	push   ebx
c001d706:	e8 85 f6 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d70b:	83 c4 0c             	add    esp,0xc
c001d70e:	89 c5                	mov    ebp,eax
c001d710:	6a 05                	push   0x5
c001d712:	56                   	push   esi
c001d713:	53                   	push   ebx
c001d714:	e8 77 f6 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001d719:	83 c4 10             	add    esp,0x10
c001d71c:	89 e9                	mov    ecx,ebp
c001d71e:	0f b6 c0             	movzx  eax,al
c001d721:	0f b6 e9             	movzx  ebp,cl
c001d724:	83 fd 14             	cmp    ebp,0x14
c001d727:	75 07                	jne    c001d730 <IDE::detect()+0x1e4>
c001d729:	3d eb 00 00 00       	cmp    eax,0xeb
c001d72e:	eb 0e                	jmp    c001d73e <IDE::detect()+0x1f2>
c001d730:	3d 96 00 00 00       	cmp    eax,0x96
c001d735:	0f 85 54 02 00 00    	jne    c001d98f <IDE::detect()+0x443>
c001d73b:	83 fd 69             	cmp    ebp,0x69
c001d73e:	0f 85 4b 02 00 00    	jne    c001d98f <IDE::detect()+0x443>
c001d744:	68 a1 00 00 00       	push   0xa1
c001d749:	6a 07                	push   0x7
c001d74b:	56                   	push   esi
c001d74c:	53                   	push   ebx
c001d74d:	e8 7e f5 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d752:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d759:	e8 1a 85 ff ff       	call   c0015c78 <milliTenthSleep(unsigned int)>
c001d75e:	83 c4 10             	add    esp,0x10
c001d761:	83 ec 0c             	sub    esp,0xc
c001d764:	89 fd                	mov    ebp,edi
c001d766:	68 d2 44 02 c0       	push   0xc00244d2
c001d76b:	c1 e5 06             	shl    ebp,0x6
c001d76e:	e8 6d f0 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d773:	01 dd                	add    ebp,ebx
c001d775:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d779:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d780:	52                   	push   edx
c001d781:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d785:	6a 00                	push   0x0
c001d787:	56                   	push   esi
c001d788:	53                   	push   ebx
c001d789:	e8 ee fc ff ff       	call   c001d47c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d78e:	83 c4 14             	add    esp,0x14
c001d791:	68 d6 44 02 c0       	push   0xc00244d6
c001d796:	e8 45 f0 fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d79b:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d7a0:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d7a7:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d7ae:	89 f0                	mov    eax,esi
c001d7b0:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d7b6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d7ba:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d7c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7c4:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d7cb:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d7d3:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d7da:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d7e2:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d7e8:	c7 04 24 da 44 02 c0 	mov    DWORD PTR [esp],0xc00244da
c001d7ef:	e8 ec ef fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d7f4:	83 c4 10             	add    esp,0x10
c001d7f7:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d7fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d802:	74 09                	je     c001d80d <IDE::detect()+0x2c1>
c001d804:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d80b:	eb 07                	jmp    c001d814 <IDE::detect()+0x2c8>
c001d80d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d814:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d818:	89 f8                	mov    eax,edi
c001d81a:	83 ec 0c             	sub    esp,0xc
c001d81d:	c1 e0 06             	shl    eax,0x6
c001d820:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d823:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d829:	68 de 44 02 c0       	push   0xc00244de
c001d82e:	e8 ad ef fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d833:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d837:	89 e8                	mov    eax,ebp
c001d839:	83 c4 10             	add    esp,0x10
c001d83c:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d83f:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d842:	83 c0 02             	add    eax,0x2
c001d845:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d84b:	83 c2 02             	add    edx,0x2
c001d84e:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d851:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d857:	39 d5                	cmp    ebp,edx
c001d859:	75 e4                	jne    c001d83f <IDE::detect()+0x2f3>
c001d85b:	89 f8                	mov    eax,edi
c001d85d:	c1 e0 06             	shl    eax,0x6
c001d860:	01 d8                	add    eax,ebx
c001d862:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d869:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d870:	c1 ea 09             	shr    edx,0x9
c001d873:	83 e2 01             	and    edx,0x1
c001d876:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d87d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d883:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d887:	74 0c                	je     c001d895 <IDE::detect()+0x349>
c001d889:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d892:	0f 95 c2             	setne  dl
c001d895:	83 ec 0c             	sub    esp,0xc
c001d898:	89 fd                	mov    ebp,edi
c001d89a:	c1 e5 06             	shl    ebp,0x6
c001d89d:	01 dd                	add    ebp,ebx
c001d89f:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d8a5:	68 e2 44 02 c0       	push   0xc00244e2
c001d8aa:	e8 31 ef fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d8af:	83 c4 10             	add    esp,0x10
c001d8b2:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d8b7:	75 66                	jne    c001d91f <IDE::detect()+0x3d3>
c001d8b9:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d8c0:	0f 84 b8 00 00 00    	je     c001d97e <IDE::detect()+0x432>
c001d8c6:	83 ec 0c             	sub    esp,0xc
c001d8c9:	68 e6 44 02 c0       	push   0xc00244e6
c001d8ce:	e8 0d ef fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d8d3:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d8da:	e8 4c 12 ff ff       	call   c000eb2b <malloc>
c001d8df:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8e2:	89 c5                	mov    ebp,eax
c001d8e4:	e8 43 05 00 00       	call   c001de2c <ATA::ATA()>
c001d8e9:	c7 04 24 ea 44 02 c0 	mov    DWORD PTR [esp],0xc00244ea
c001d8f0:	e8 eb ee fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d8f5:	59                   	pop    ecx
c001d8f6:	58                   	pop    eax
c001d8f7:	55                   	push   ebp
c001d8f8:	53                   	push   ebx
c001d8f9:	e8 94 b7 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d8fe:	c7 04 24 ef 44 02 c0 	mov    DWORD PTR [esp],0xc00244ef
c001d905:	e8 d6 ee fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d90a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d90d:	53                   	push   ebx
c001d90e:	57                   	push   edi
c001d90f:	6a 00                	push   0x0
c001d911:	55                   	push   ebp
c001d912:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d915:	83 c4 14             	add    esp,0x14
c001d918:	68 f4 44 02 c0       	push   0xc00244f4
c001d91d:	eb 57                	jmp    c001d976 <IDE::detect()+0x42a>
c001d91f:	83 ec 0c             	sub    esp,0xc
c001d922:	68 f9 44 02 c0       	push   0xc00244f9
c001d927:	e8 b4 ee fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d92c:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d933:	e8 f3 11 ff ff       	call   c000eb2b <malloc>
c001d938:	89 04 24             	mov    DWORD PTR [esp],eax
c001d93b:	89 c5                	mov    ebp,eax
c001d93d:	e8 98 0c 00 00       	call   c001e5da <ATAPI::ATAPI()>
c001d942:	c7 04 24 ff 44 02 c0 	mov    DWORD PTR [esp],0xc00244ff
c001d949:	e8 92 ee fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d94e:	58                   	pop    eax
c001d94f:	5a                   	pop    edx
c001d950:	55                   	push   ebp
c001d951:	53                   	push   ebx
c001d952:	e8 3b b7 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d957:	c7 04 24 06 45 02 c0 	mov    DWORD PTR [esp],0xc0024506
c001d95e:	e8 7d ee fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d963:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d966:	53                   	push   ebx
c001d967:	57                   	push   edi
c001d968:	6a 00                	push   0x0
c001d96a:	55                   	push   ebp
c001d96b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d96e:	83 c4 14             	add    esp,0x14
c001d971:	68 0d 45 02 c0       	push   0xc002450d
c001d976:	e8 65 ee fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d97b:	83 c4 10             	add    esp,0x10
c001d97e:	83 ec 0c             	sub    esp,0xc
c001d981:	47                   	inc    edi
c001d982:	68 14 45 02 c0       	push   0xc0024514
c001d987:	e8 54 ee fe ff       	call   c000c7e0 <KeSetBootMessage(char const*)>
c001d98c:	83 c4 10             	add    esp,0x10
c001d98f:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d993:	74 0c                	je     c001d9a1 <IDE::detect()+0x455>
c001d995:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d99c:	e9 10 fc ff ff       	jmp    c001d5b1 <IDE::detect()+0x65>
c001d9a1:	4e                   	dec    esi
c001d9a2:	74 0a                	je     c001d9ae <IDE::detect()+0x462>
c001d9a4:	be 01 00 00 00       	mov    esi,0x1
c001d9a9:	e9 ec fb ff ff       	jmp    c001d59a <IDE::detect()+0x4e>
c001d9ae:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d9b4:	5b                   	pop    ebx
c001d9b5:	5e                   	pop    esi
c001d9b6:	5f                   	pop    edi
c001d9b7:	5d                   	pop    ebp
c001d9b8:	c3                   	ret    
c001d9b9:	90                   	nop

c001d9ba <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d9ba:	55                   	push   ebp
c001d9bb:	57                   	push   edi
c001d9bc:	56                   	push   esi
c001d9bd:	53                   	push   ebx
c001d9be:	83 ec 1c             	sub    esp,0x1c
c001d9c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d9c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d9c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d9d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d9d5:	88 c3                	mov    bl,al
c001d9d7:	25 ff 00 00 00       	and    eax,0xff
c001d9dc:	0f 84 88 00 00 00    	je     c001da6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d9e2:	83 ec 0c             	sub    esp,0xc
c001d9e5:	89 c7                	mov    edi,eax
c001d9e7:	68 18 45 02 c0       	push   0xc0024518
c001d9ec:	e8 73 95 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d9f1:	83 c4 10             	add    esp,0x10
c001d9f4:	83 ff 01             	cmp    edi,0x1
c001d9f7:	74 6b                	je     c001da64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d9f9:	83 ff 02             	cmp    edi,0x2
c001d9fc:	75 58                	jne    c001da56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d9fe:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001da03:	01 ff                	add    edi,edi
c001da05:	50                   	push   eax
c001da06:	09 fe                	or     esi,edi
c001da08:	6a 01                	push   0x1
c001da0a:	89 f0                	mov    eax,esi
c001da0c:	0f b6 f0             	movzx  esi,al
c001da0f:	c1 e6 06             	shl    esi,0x6
c001da12:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001da1a:	50                   	push   eax
c001da1b:	55                   	push   ebp
c001da1c:	e8 6f f3 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001da21:	83 c4 10             	add    esp,0x10
c001da24:	a8 01                	test   al,0x1
c001da26:	74 02                	je     c001da2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001da28:	b3 07                	mov    bl,0x7
c001da2a:	a8 02                	test   al,0x2
c001da2c:	74 02                	je     c001da30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001da2e:	b3 03                	mov    bl,0x3
c001da30:	a8 04                	test   al,0x4
c001da32:	74 02                	je     c001da36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001da34:	b3 14                	mov    bl,0x14
c001da36:	a8 08                	test   al,0x8
c001da38:	74 02                	je     c001da3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001da3a:	b3 03                	mov    bl,0x3
c001da3c:	a8 10                	test   al,0x10
c001da3e:	74 02                	je     c001da42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001da40:	b3 15                	mov    bl,0x15
c001da42:	a8 20                	test   al,0x20
c001da44:	74 02                	je     c001da48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001da46:	b3 03                	mov    bl,0x3
c001da48:	a8 40                	test   al,0x40
c001da4a:	74 02                	je     c001da4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001da4c:	b3 16                	mov    bl,0x16
c001da4e:	a8 80                	test   al,0x80
c001da50:	74 18                	je     c001da6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001da52:	b3 0d                	mov    bl,0xd
c001da54:	eb 14                	jmp    c001da6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001da56:	83 ff 03             	cmp    edi,0x3
c001da59:	74 0d                	je     c001da68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001da5b:	83 ff 04             	cmp    edi,0x4
c001da5e:	75 0a                	jne    c001da6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001da60:	b3 08                	mov    bl,0x8
c001da62:	eb 06                	jmp    c001da6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001da64:	b3 13                	mov    bl,0x13
c001da66:	eb 02                	jmp    c001da6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001da68:	b3 17                	mov    bl,0x17
c001da6a:	83 c4 1c             	add    esp,0x1c
c001da6d:	88 d8                	mov    al,bl
c001da6f:	5b                   	pop    ebx
c001da70:	5e                   	pop    esi
c001da71:	5f                   	pop    edi
c001da72:	5d                   	pop    ebp
c001da73:	c3                   	ret    

c001da74 <IDE::polling(unsigned char, unsigned int)>:
c001da74:	57                   	push   edi
c001da75:	56                   	push   esi
c001da76:	53                   	push   ebx
c001da77:	bb 04 00 00 00       	mov    ebx,0x4
c001da7c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001da80:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001da85:	52                   	push   edx
c001da86:	6a 0c                	push   0xc
c001da88:	56                   	push   esi
c001da89:	57                   	push   edi
c001da8a:	e8 01 f3 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001da8f:	83 c4 10             	add    esp,0x10
c001da92:	4b                   	dec    ebx
c001da93:	75 f0                	jne    c001da85 <IDE::polling(unsigned char, unsigned int)+0x11>
c001da95:	bb a0 86 01 00       	mov    ebx,0x186a0
c001da9a:	50                   	push   eax
c001da9b:	6a 0c                	push   0xc
c001da9d:	56                   	push   esi
c001da9e:	57                   	push   edi
c001da9f:	e8 ec f2 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001daa4:	83 c4 10             	add    esp,0x10
c001daa7:	a8 01                	test   al,0x1
c001daa9:	75 17                	jne    c001dac2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001daab:	a8 20                	test   al,0x20
c001daad:	75 0f                	jne    c001dabe <IDE::polling(unsigned char, unsigned int)+0x4a>
c001daaf:	4b                   	dec    ebx
c001dab0:	74 10                	je     c001dac2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001dab2:	a8 80                	test   al,0x80
c001dab4:	75 e4                	jne    c001da9a <IDE::polling(unsigned char, unsigned int)+0x26>
c001dab6:	a8 08                	test   al,0x8
c001dab8:	74 e0                	je     c001da9a <IDE::polling(unsigned char, unsigned int)+0x26>
c001daba:	31 c0                	xor    eax,eax
c001dabc:	eb 06                	jmp    c001dac4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001dabe:	b0 01                	mov    al,0x1
c001dac0:	eb 02                	jmp    c001dac4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001dac2:	b0 02                	mov    al,0x2
c001dac4:	5b                   	pop    ebx
c001dac5:	5e                   	pop    esi
c001dac6:	5f                   	pop    edi
c001dac7:	c3                   	ret    

c001dac8 <SATABus::close(int, int, void*)>:
c001dac8:	31 c0                	xor    eax,eax
c001daca:	c3                   	ret    
c001dacb:	90                   	nop

c001dacc <SATABus::detect()>:
c001dacc:	c3                   	ret    
c001dacd:	90                   	nop

c001dace <SATABus::SATABus()>:
c001dace:	83 ec 0c             	sub    esp,0xc
c001dad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dad5:	83 ec 08             	sub    esp,0x8
c001dad8:	68 50 45 02 c0       	push   0xc0024550
c001dadd:	50                   	push   eax
c001dade:	e8 09 b9 fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001dae3:	83 c4 10             	add    esp,0x10
c001dae6:	ba 7c 45 02 c0       	mov    edx,0xc002457c
c001daeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daef:	89 10                	mov    DWORD PTR [eax],edx
c001daf1:	83 ec 0c             	sub    esp,0xc
c001daf4:	6a 50                	push   0x50
c001daf6:	e8 49 16 ff ff       	call   c000f144 <Phys::allocateContiguousPages(int)>
c001dafb:	83 c4 10             	add    esp,0x10
c001dafe:	89 c2                	mov    edx,eax
c001db00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db04:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001db0a:	83 ec 0c             	sub    esp,0xc
c001db0d:	6a 50                	push   0x50
c001db0f:	e8 51 47 ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c001db14:	83 c4 10             	add    esp,0x10
c001db17:	89 c2                	mov    edx,eax
c001db19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db23:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001db28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db2c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001db32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db36:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001db3c:	83 ec 0c             	sub    esp,0xc
c001db3f:	6a 03                	push   0x3
c001db41:	6a 50                	push   0x50
c001db43:	51                   	push   ecx
c001db44:	52                   	push   edx
c001db45:	50                   	push   eax
c001db46:	e8 e7 4f ff ff       	call   c0012b32 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001db4b:	83 c4 20             	add    esp,0x20
c001db4e:	90                   	nop
c001db4f:	83 c4 0c             	add    esp,0xc
c001db52:	c3                   	ret    
c001db53:	90                   	nop

c001db54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001db54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db58:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001db5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001db5e:	09 c2                	or     edx,eax
c001db60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001db6a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001db6c:	31 c0                	xor    eax,eax
c001db6e:	c1 e9 08             	shr    ecx,0x8
c001db71:	83 e1 0f             	and    ecx,0xf
c001db74:	39 c8                	cmp    eax,ecx
c001db76:	74 0a                	je     c001db82 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001db78:	f6 c2 01             	test   dl,0x1
c001db7b:	74 08                	je     c001db85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001db7d:	d1 ea                	shr    edx,1
c001db7f:	40                   	inc    eax
c001db80:	eb f2                	jmp    c001db74 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001db82:	83 c8 ff             	or     eax,0xffffffff
c001db85:	c3                   	ret    

c001db86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001db86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db8a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001db8d:	89 c2                	mov    edx,eax
c001db8f:	c1 ea 08             	shr    edx,0x8
c001db92:	83 e2 0f             	and    edx,0xf
c001db95:	4a                   	dec    edx
c001db96:	75 32                	jne    c001dbca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001db98:	83 e0 0f             	and    eax,0xf
c001db9b:	83 f8 03             	cmp    eax,0x3
c001db9e:	75 2a                	jne    c001dbca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001dba0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001dba3:	b8 02 00 00 00       	mov    eax,0x2
c001dba8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001dbae:	74 1c                	je     c001dbcc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001dbb0:	b8 04 00 00 00       	mov    eax,0x4
c001dbb5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001dbbb:	74 0f                	je     c001dbcc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001dbbd:	31 c0                	xor    eax,eax
c001dbbf:	83 fa 03             	cmp    edx,0x3
c001dbc2:	0f 94 c0             	sete   al
c001dbc5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001dbc9:	c3                   	ret    
c001dbca:	31 c0                	xor    eax,eax
c001dbcc:	c3                   	ret    
c001dbcd:	90                   	nop

c001dbce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001dbce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dbd5:	0f ba e2 0f          	bt     edx,0xf
c001dbd9:	72 f7                	jb     c001dbd2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001dbdb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dbde:	83 ca 10             	or     edx,0x10
c001dbe1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbe4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dbe7:	83 ca 01             	or     edx,0x1
c001dbea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbed:	c3                   	ret    

c001dbee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001dbee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbf2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dbf5:	83 e2 fe             	and    edx,0xfffffffe
c001dbf8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbfb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dbfe:	83 e2 ef             	and    edx,0xffffffef
c001dc01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc04:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dc07:	0f ba e2 0e          	bt     edx,0xe
c001dc0b:	72 f7                	jb     c001dc04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001dc0d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dc10:	0f ba e2 0f          	bt     edx,0xf
c001dc14:	72 ee                	jb     c001dc04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001dc16:	c3                   	ret    
c001dc17:	90                   	nop

c001dc18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001dc18:	55                   	push   ebp
c001dc19:	57                   	push   edi
c001dc1a:	56                   	push   esi
c001dc1b:	53                   	push   ebx
c001dc1c:	83 ec 1c             	sub    esp,0x1c
c001dc1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dc27:	53                   	push   ebx
c001dc28:	56                   	push   esi
c001dc29:	e8 c0 ff ff ff       	call   c001dbee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dc2e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001dc32:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001dc38:	83 ec 0c             	sub    esp,0xc
c001dc3b:	c1 e5 0a             	shl    ebp,0xa
c001dc3e:	01 e8                	add    eax,ebp
c001dc40:	89 03                	mov    DWORD PTR [ebx],eax
c001dc42:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc44:	68 00 04 00 00       	push   0x400
c001dc49:	6a 00                	push   0x0
c001dc4b:	50                   	push   eax
c001dc4c:	e8 9f 28 fe ff       	call   c00004f0 <memset>
c001dc51:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001dc57:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001dc5b:	01 e8                	add    eax,ebp
c001dc5d:	83 c4 1c             	add    esp,0x1c
c001dc60:	89 03                	mov    DWORD PTR [ebx],eax
c001dc62:	c1 e2 08             	shl    edx,0x8
c001dc65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001dc6c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001dc72:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001dc78:	01 f8                	add    eax,edi
c001dc7a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001dc7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001dc80:	68 00 01 00 00       	push   0x100
c001dc85:	6a 00                	push   0x0
c001dc87:	50                   	push   eax
c001dc88:	e8 63 28 fe ff       	call   c00004f0 <memset>
c001dc8d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001dc93:	01 fa                	add    edx,edi
c001dc95:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001dc99:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001dc9c:	c1 e7 0d             	shl    edi,0xd
c001dc9f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001dca6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001dcac:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001dcb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dcb6:	31 ff                	xor    edi,edi
c001dcb8:	83 c4 10             	add    esp,0x10
c001dcbb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001dcc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcc5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001dccb:	83 c5 20             	add    ebp,0x20
c001dcce:	01 f8                	add    eax,edi
c001dcd0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dcd3:	52                   	push   edx
c001dcd4:	68 00 01 00 00       	push   0x100
c001dcd9:	6a 00                	push   0x0
c001dcdb:	50                   	push   eax
c001dcdc:	e8 0f 28 fe ff       	call   c00004f0 <memset>
c001dce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dce5:	83 c4 10             	add    esp,0x10
c001dce8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001dcee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001dcf5:	01 f8                	add    eax,edi
c001dcf7:	81 c7 00 01 00 00    	add    edi,0x100
c001dcfd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dd00:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001dd06:	75 b3                	jne    c001dcbb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001dd08:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001dd0f:	50                   	push   eax
c001dd10:	50                   	push   eax
c001dd11:	53                   	push   ebx
c001dd12:	56                   	push   esi
c001dd13:	e8 b6 fe ff ff       	call   c001dbce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001dd18:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001dd1f:	83 c4 2c             	add    esp,0x2c
c001dd22:	5b                   	pop    ebx
c001dd23:	5e                   	pop    esi
c001dd24:	5f                   	pop    edi
c001dd25:	5d                   	pop    ebp
c001dd26:	c3                   	ret    
c001dd27:	90                   	nop

c001dd28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001dd28:	55                   	push   ebp
c001dd29:	57                   	push   edi
c001dd2a:	56                   	push   esi
c001dd2b:	53                   	push   ebx
c001dd2c:	31 db                	xor    ebx,ebx
c001dd2e:	83 ec 0c             	sub    esp,0xc
c001dd31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd35:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dd39:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001dd3c:	f7 c7 01 00 00 00    	test   edi,0x1
c001dd42:	74 7a                	je     c001ddbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001dd44:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001dd48:	89 d8                	mov    eax,ebx
c001dd4a:	c1 e0 07             	shl    eax,0x7
c001dd4d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001dd54:	55                   	push   ebp
c001dd55:	56                   	push   esi
c001dd56:	e8 2b fe ff ff       	call   c001db86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001dd5b:	5a                   	pop    edx
c001dd5c:	83 f8 01             	cmp    eax,0x1
c001dd5f:	59                   	pop    ecx
c001dd60:	75 21                	jne    c001dd83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001dd62:	50                   	push   eax
c001dd63:	53                   	push   ebx
c001dd64:	55                   	push   ebp
c001dd65:	56                   	push   esi
c001dd66:	e8 ad fe ff ff       	call   c001dc18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dd6b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001dd72:	e8 b4 0d ff ff       	call   c000eb2b <malloc>
c001dd77:	89 c5                	mov    ebp,eax
c001dd79:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd7c:	e8 25 0f 00 00       	call   c001eca6 <SATA::SATA()>
c001dd81:	eb 24                	jmp    c001dda7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001dd83:	83 f8 04             	cmp    eax,0x4
c001dd86:	75 36                	jne    c001ddbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001dd88:	51                   	push   ecx
c001dd89:	53                   	push   ebx
c001dd8a:	55                   	push   ebp
c001dd8b:	56                   	push   esi
c001dd8c:	e8 87 fe ff ff       	call   c001dc18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dd91:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001dd98:	e8 8e 0d ff ff       	call   c000eb2b <malloc>
c001dd9d:	89 c5                	mov    ebp,eax
c001dd9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001dda2:	e8 97 12 00 00       	call   c001f03e <SATAPI::SATAPI()>
c001dda7:	58                   	pop    eax
c001dda8:	5a                   	pop    edx
c001dda9:	55                   	push   ebp
c001ddaa:	56                   	push   esi
c001ddab:	e8 e2 b2 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001ddb0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ddb3:	56                   	push   esi
c001ddb4:	6a 00                	push   0x0
c001ddb6:	53                   	push   ebx
c001ddb7:	55                   	push   ebp
c001ddb8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ddbb:	83 c4 20             	add    esp,0x20
c001ddbe:	d1 ef                	shr    edi,1
c001ddc0:	43                   	inc    ebx
c001ddc1:	83 fb 20             	cmp    ebx,0x20
c001ddc4:	0f 85 72 ff ff ff    	jne    c001dd3c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ddca:	83 c4 0c             	add    esp,0xc
c001ddcd:	5b                   	pop    ebx
c001ddce:	5e                   	pop    esi
c001ddcf:	5f                   	pop    edi
c001ddd0:	5d                   	pop    ebp
c001ddd1:	c3                   	ret    

c001ddd2 <SATABus::open(int, int, void*)>:
c001ddd2:	53                   	push   ebx
c001ddd3:	83 ec 08             	sub    esp,0x8
c001ddd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ddda:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001dde0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dde6:	e8 05 7a ff ff       	call   c00157f0 <KeDisablePreemption()>
c001ddeb:	52                   	push   edx
c001ddec:	52                   	push   edx
c001dded:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001ddf3:	53                   	push   ebx
c001ddf4:	e8 2f ff ff ff       	call   c001dd28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ddf9:	e8 1a 7a ff ff       	call   c0015818 <KeRestorePreemption()>
c001ddfe:	31 c0                	xor    eax,eax
c001de00:	83 c4 18             	add    esp,0x18
c001de03:	5b                   	pop    ebx
c001de04:	c3                   	ret    
c001de05:	90                   	nop

c001de06 <ATA::close(int, int, void*)>:
c001de06:	83 ec 0c             	sub    esp,0xc
c001de09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de13:	85 c0                	test   eax,eax
c001de15:	74 0c                	je     c001de23 <ATA::close(int, int, void*)+0x1d>
c001de17:	83 ec 0c             	sub    esp,0xc
c001de1a:	8b 10                	mov    edx,DWORD PTR [eax]
c001de1c:	50                   	push   eax
c001de1d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001de20:	83 c4 10             	add    esp,0x10
c001de23:	31 c0                	xor    eax,eax
c001de25:	83 c4 0c             	add    esp,0xc
c001de28:	c3                   	ret    
c001de29:	90                   	nop

c001de2a <ATA::powerSaving(PowerSavingLevel)>:
c001de2a:	c3                   	ret    
c001de2b:	90                   	nop

c001de2c <ATA::ATA()>:
c001de2c:	83 ec 0c             	sub    esp,0xc
c001de2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de33:	83 ec 04             	sub    esp,0x4
c001de36:	68 00 02 00 00       	push   0x200
c001de3b:	68 fd 46 02 c0       	push   0xc00246fd
c001de40:	50                   	push   eax
c001de41:	e8 30 b6 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001de46:	83 c4 10             	add    esp,0x10
c001de49:	ba 64 46 02 c0       	mov    edx,0xc0024664
c001de4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de52:	89 10                	mov    DWORD PTR [eax],edx
c001de54:	90                   	nop
c001de55:	83 c4 0c             	add    esp,0xc
c001de58:	c3                   	ret    
c001de59:	90                   	nop

c001de5a <ATA::flush(bool)>:
c001de5a:	53                   	push   ebx
c001de5b:	83 ec 08             	sub    esp,0x8
c001de5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001de67:	83 f8 01             	cmp    eax,0x1
c001de6a:	19 c0                	sbb    eax,eax
c001de6c:	83 e0 fd             	and    eax,0xfffffffd
c001de6f:	05 ea 00 00 00       	add    eax,0xea
c001de74:	50                   	push   eax
c001de75:	6a 07                	push   0x7
c001de77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de7e:	50                   	push   eax
c001de7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de85:	e8 46 ee ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de8a:	83 c4 0c             	add    esp,0xc
c001de8d:	6a 00                	push   0x0
c001de8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de96:	50                   	push   eax
c001de97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de9d:	e8 d2 fb ff ff       	call   c001da74 <IDE::polling(unsigned char, unsigned int)>
c001dea2:	83 c4 18             	add    esp,0x18
c001dea5:	5b                   	pop    ebx
c001dea6:	c3                   	ret    
c001dea7:	90                   	nop

c001dea8 <ATA::readyForCommand()>:
c001dea8:	56                   	push   esi
c001dea9:	53                   	push   ebx
c001deaa:	53                   	push   ebx
c001deab:	31 db                	xor    ebx,ebx
c001dead:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001deb1:	51                   	push   ecx
c001deb2:	6a 0c                	push   0xc
c001deb4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001debb:	50                   	push   eax
c001debc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dec2:	e8 c9 ee ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001dec7:	83 c4 10             	add    esp,0x10
c001deca:	a8 88                	test   al,0x88
c001decc:	74 1f                	je     c001deed <ATA::readyForCommand()+0x45>
c001dece:	43                   	inc    ebx
c001decf:	83 fb 63             	cmp    ebx,0x63
c001ded2:	7e dd                	jle    c001deb1 <ATA::readyForCommand()+0x9>
c001ded4:	83 ec 0c             	sub    esp,0xc
c001ded7:	6a 0a                	push   0xa
c001ded9:	e8 9a 7d ff ff       	call   c0015c78 <milliTenthSleep(unsigned int)>
c001dede:	83 c4 10             	add    esp,0x10
c001dee1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dee7:	75 c8                	jne    c001deb1 <ATA::readyForCommand()+0x9>
c001dee9:	31 c0                	xor    eax,eax
c001deeb:	eb 02                	jmp    c001deef <ATA::readyForCommand()+0x47>
c001deed:	b0 01                	mov    al,0x1
c001deef:	5a                   	pop    edx
c001def0:	5b                   	pop    ebx
c001def1:	5e                   	pop    esi
c001def2:	c3                   	ret    
c001def3:	90                   	nop

c001def4 <ATA::access(unsigned long long, int, void*, bool)>:
c001def4:	55                   	push   ebp
c001def5:	57                   	push   edi
c001def6:	56                   	push   esi
c001def7:	53                   	push   ebx
c001def8:	83 ec 2c             	sub    esp,0x2c
c001defb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001deff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df03:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001df07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df0b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001df0f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001df13:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df17:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001df1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001df21:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001df27:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001df2b:	c1 e0 06             	shl    eax,0x6
c001df2e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001df36:	74 5d                	je     c001df95 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001df38:	89 fa                	mov    edx,edi
c001df3a:	89 f0                	mov    eax,esi
c001df3c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001df40:	c1 ea 1c             	shr    edx,0x1c
c001df43:	89 d1                	mov    ecx,edx
c001df45:	09 c1                	or     ecx,eax
c001df47:	74 25                	je     c001df6e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001df49:	31 ed                	xor    ebp,ebp
c001df4b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001df52:	89 fa                	mov    edx,edi
c001df54:	89 f0                	mov    eax,esi
c001df56:	0f ad d0             	shrd   eax,edx,cl
c001df59:	d3 ea                	shr    edx,cl
c001df5b:	f6 c1 20             	test   cl,0x20
c001df5e:	74 02                	je     c001df62 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001df60:	89 d0                	mov    eax,edx
c001df62:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001df66:	45                   	inc    ebp
c001df67:	83 fd 06             	cmp    ebp,0x6
c001df6a:	75 df                	jne    c001df4b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001df6c:	eb 76                	jmp    c001dfe4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001df6e:	89 f0                	mov    eax,esi
c001df70:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001df75:	89 fa                	mov    edx,edi
c001df77:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001df7e:	0f ac d0 10          	shrd   eax,edx,0x10
c001df82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001df87:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001df8b:	c1 ee 18             	shr    esi,0x18
c001df8e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001df93:	eb 56                	jmp    c001dfeb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001df95:	6a 00                	push   0x0
c001df97:	6a 3f                	push   0x3f
c001df99:	57                   	push   edi
c001df9a:	56                   	push   esi
c001df9b:	e8 24 25 00 00       	call   c00204c4 <__umoddi3>
c001dfa0:	83 c4 10             	add    esp,0x10
c001dfa3:	40                   	inc    eax
c001dfa4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001dfa8:	6a 00                	push   0x0
c001dfaa:	68 f0 03 00 00       	push   0x3f0
c001dfaf:	57                   	push   edi
c001dfb0:	56                   	push   esi
c001dfb1:	e8 0e 24 00 00       	call   c00203c4 <__udivdi3>
c001dfb6:	83 c4 10             	add    esp,0x10
c001dfb9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001dfbe:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dfc5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dfca:	6a 00                	push   0x0
c001dfcc:	6a 3f                	push   0x3f
c001dfce:	57                   	push   edi
c001dfcf:	56                   	push   esi
c001dfd0:	e8 ef 23 00 00       	call   c00203c4 <__udivdi3>
c001dfd5:	83 c4 10             	add    esp,0x10
c001dfd8:	83 e0 0f             	and    eax,0xf
c001dfdb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dfe0:	89 c6                	mov    esi,eax
c001dfe2:	eb 07                	jmp    c001dfeb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001dfe4:	31 f6                	xor    esi,esi
c001dfe6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001dfeb:	55                   	push   ebp
c001dfec:	6a 00                	push   0x0
c001dfee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dff5:	50                   	push   eax
c001dff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dffa:	e8 d9 ee ff ff       	call   c001ced8 <IDE::enableIRQs(unsigned char, bool)>
c001dfff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e002:	e8 a1 fe ff ff       	call   c001dea8 <ATA::readyForCommand()>
c001e007:	83 c4 10             	add    esp,0x10
c001e00a:	84 c0                	test   al,al
c001e00c:	75 0a                	jne    c001e018 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001e00e:	be 01 00 00 00       	mov    esi,0x1
c001e013:	e9 c2 02 00 00       	jmp    c001e2da <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001e018:	fa                   	cli    
c001e019:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e01f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e025:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001e02a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e030:	75 0a                	jne    c001e03c <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001e032:	c1 e0 04             	shl    eax,0x4
c001e035:	09 c6                	or     esi,eax
c001e037:	83 ce a0             	or     esi,0xffffffa0
c001e03a:	eb 08                	jmp    c001e044 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001e03c:	c1 e0 04             	shl    eax,0x4
c001e03f:	09 c6                	or     esi,eax
c001e041:	83 ce e0             	or     esi,0xffffffe0
c001e044:	89 f0                	mov    eax,esi
c001e046:	0f b6 d2             	movzx  edx,dl
c001e049:	0f b6 f0             	movzx  esi,al
c001e04c:	56                   	push   esi
c001e04d:	6a 06                	push   0x6
c001e04f:	52                   	push   edx
c001e050:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e056:	e8 75 ec ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e05b:	83 c4 10             	add    esp,0x10
c001e05e:	6a 00                	push   0x0
c001e060:	6a 01                	push   0x1
c001e062:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e069:	50                   	push   eax
c001e06a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e070:	e8 5b ec ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001e07d:	83 f8 02             	cmp    eax,0x2
c001e080:	75 6e                	jne    c001e0f0 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001e082:	6a 00                	push   0x0
c001e084:	6a 08                	push   0x8
c001e086:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e08d:	50                   	push   eax
c001e08e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e094:	e8 37 ec ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e099:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e09e:	50                   	push   eax
c001e09f:	6a 09                	push   0x9
c001e0a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0a8:	50                   	push   eax
c001e0a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e0af:	e8 1c ec ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0b4:	83 c4 20             	add    esp,0x20
c001e0b7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e0bc:	50                   	push   eax
c001e0bd:	6a 0a                	push   0xa
c001e0bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0c6:	50                   	push   eax
c001e0c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e0cd:	e8 fe eb ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0d2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e0d7:	50                   	push   eax
c001e0d8:	6a 0b                	push   0xb
c001e0da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0e1:	50                   	push   eax
c001e0e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e0e8:	e8 e3 eb ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0ed:	83 c4 20             	add    esp,0x20
c001e0f0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e0f5:	50                   	push   eax
c001e0f6:	6a 02                	push   0x2
c001e0f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0ff:	50                   	push   eax
c001e100:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e106:	e8 c5 eb ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e10b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e110:	50                   	push   eax
c001e111:	6a 03                	push   0x3
c001e113:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e11a:	50                   	push   eax
c001e11b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e121:	e8 aa eb ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e126:	83 c4 20             	add    esp,0x20
c001e129:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e12e:	50                   	push   eax
c001e12f:	6a 04                	push   0x4
c001e131:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e138:	50                   	push   eax
c001e139:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e13f:	e8 8c eb ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e144:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e149:	50                   	push   eax
c001e14a:	6a 05                	push   0x5
c001e14c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e153:	50                   	push   eax
c001e154:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e15a:	e8 71 eb ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e15f:	83 c4 20             	add    esp,0x20
c001e162:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e167:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001e16c:	74 13                	je     c001e181 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001e16e:	83 f8 02             	cmp    eax,0x2
c001e171:	74 20                	je     c001e193 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001e173:	48                   	dec    eax
c001e174:	0f 85 94 fe ff ff    	jne    c001e00e <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001e17a:	b8 30 00 00 00       	mov    eax,0x30
c001e17f:	eb 1e                	jmp    c001e19f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001e181:	83 f8 02             	cmp    eax,0x2
c001e184:	74 14                	je     c001e19a <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001e186:	48                   	dec    eax
c001e187:	b8 20 00 00 00       	mov    eax,0x20
c001e18c:	74 11                	je     c001e19f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001e18e:	e9 7b fe ff ff       	jmp    c001e00e <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001e193:	b8 34 00 00 00       	mov    eax,0x34
c001e198:	eb 05                	jmp    c001e19f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001e19a:	b8 24 00 00 00       	mov    eax,0x24
c001e19f:	50                   	push   eax
c001e1a0:	6a 07                	push   0x7
c001e1a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1a9:	50                   	push   eax
c001e1aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1b0:	e8 1b eb ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1b5:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001e1bc:	83 c4 10             	add    esp,0x10
c001e1bf:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001e1c6:	75 01                	jne    c001e1c9 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001e1c8:	fb                   	sti    
c001e1c9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e1cd:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e1d2:	85 f6                	test   esi,esi
c001e1d4:	0f 84 dd 00 00 00    	je     c001e2b7 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001e1da:	57                   	push   edi
c001e1db:	6a 01                	push   0x1
c001e1dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1e4:	50                   	push   eax
c001e1e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1eb:	e8 84 f8 ff ff       	call   c001da74 <IDE::polling(unsigned char, unsigned int)>
c001e1f0:	83 c4 10             	add    esp,0x10
c001e1f3:	0f b6 c0             	movzx  eax,al
c001e1f6:	85 c0                	test   eax,eax
c001e1f8:	74 23                	je     c001e21d <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001e1fa:	50                   	push   eax
c001e1fb:	89 c6                	mov    esi,eax
c001e1fd:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e204:	50                   	push   eax
c001e205:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e20c:	50                   	push   eax
c001e20d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e213:	e8 a2 f7 ff ff       	call   c001d9ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e218:	e9 ba 00 00 00       	jmp    c001e2d7 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001e21d:	85 ed                	test   ebp,ebp
c001e21f:	74 49                	je     c001e26a <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001e221:	fa                   	cli    
c001e222:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e228:	31 c9                	xor    ecx,ecx
c001e22a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e22e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e232:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001e236:	51                   	push   ecx
c001e237:	51                   	push   ecx
c001e238:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e23f:	50                   	push   eax
c001e240:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e246:	e8 73 ea ff ff       	call   c001ccbe <IDE::getBase(unsigned char)>
c001e24b:	89 c2                	mov    edx,eax
c001e24d:	89 f8                	mov    eax,edi
c001e24f:	66 ef                	out    dx,ax
c001e251:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	41                   	inc    ecx
c001e259:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001e25f:	75 c9                	jne    c001e22a <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001e261:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001e268:	eb 35                	jmp    c001e29f <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001e26a:	fa                   	cli    
c001e26b:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e271:	52                   	push   edx
c001e272:	52                   	push   edx
c001e273:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e27a:	50                   	push   eax
c001e27b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e281:	e8 38 ea ff ff       	call   c001ccbe <IDE::getBase(unsigned char)>
c001e286:	b9 00 01 00 00       	mov    ecx,0x100
c001e28b:	89 c2                	mov    edx,eax
c001e28d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e291:	fc                   	cld    
c001e292:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e295:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001e29c:	83 c4 10             	add    esp,0x10
c001e29f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001e2a6:	75 01                	jne    c001e2a9 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001e2a8:	fb                   	sti    
c001e2a9:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e2b1:	4e                   	dec    esi
c001e2b2:	e9 1b ff ff ff       	jmp    c001e1d2 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001e2b7:	31 f6                	xor    esi,esi
c001e2b9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e2be:	74 1a                	je     c001e2da <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001e2c0:	50                   	push   eax
c001e2c1:	50                   	push   eax
c001e2c2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001e2c7:	83 f8 02             	cmp    eax,0x2
c001e2ca:	0f 94 c0             	sete   al
c001e2cd:	0f b6 c0             	movzx  eax,al
c001e2d0:	50                   	push   eax
c001e2d1:	53                   	push   ebx
c001e2d2:	e8 83 fb ff ff       	call   c001de5a <ATA::flush(bool)>
c001e2d7:	83 c4 10             	add    esp,0x10
c001e2da:	83 c4 2c             	add    esp,0x2c
c001e2dd:	89 f0                	mov    eax,esi
c001e2df:	5b                   	pop    ebx
c001e2e0:	5e                   	pop    esi
c001e2e1:	5f                   	pop    edi
c001e2e2:	5d                   	pop    ebp
c001e2e3:	c3                   	ret    

c001e2e4 <ATA::read(unsigned long long, int, void*)>:
c001e2e4:	57                   	push   edi
c001e2e5:	b8 04 00 00 00       	mov    eax,0x4
c001e2ea:	56                   	push   esi
c001e2eb:	53                   	push   ebx
c001e2ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e2f4:	8d 7a ff             	lea    edi,[edx-0x1]
c001e2f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e2fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e2ff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e305:	77 25                	ja     c001e32c <ATA::read(unsigned long long, int, void*)+0x48>
c001e307:	b8 06 00 00 00       	mov    eax,0x6
c001e30c:	85 f6                	test   esi,esi
c001e30e:	74 1c                	je     c001e32c <ATA::read(unsigned long long, int, void*)+0x48>
c001e310:	50                   	push   eax
c001e311:	50                   	push   eax
c001e312:	6a 00                	push   0x0
c001e314:	56                   	push   esi
c001e315:	52                   	push   edx
c001e316:	53                   	push   ebx
c001e317:	51                   	push   ecx
c001e318:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e31c:	e8 d3 fb ff ff       	call   c001def4 <ATA::access(unsigned long long, int, void*, bool)>
c001e321:	83 c4 20             	add    esp,0x20
c001e324:	85 c0                	test   eax,eax
c001e326:	0f 95 c0             	setne  al
c001e329:	0f b6 c0             	movzx  eax,al
c001e32c:	5b                   	pop    ebx
c001e32d:	5e                   	pop    esi
c001e32e:	5f                   	pop    edi
c001e32f:	c3                   	ret    

c001e330 <ATA::write(unsigned long long, int, void*)>:
c001e330:	57                   	push   edi
c001e331:	b8 04 00 00 00       	mov    eax,0x4
c001e336:	56                   	push   esi
c001e337:	53                   	push   ebx
c001e338:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e33c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e340:	8d 7a ff             	lea    edi,[edx-0x1]
c001e343:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e347:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e34b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e351:	77 25                	ja     c001e378 <ATA::write(unsigned long long, int, void*)+0x48>
c001e353:	b8 06 00 00 00       	mov    eax,0x6
c001e358:	85 f6                	test   esi,esi
c001e35a:	74 1c                	je     c001e378 <ATA::write(unsigned long long, int, void*)+0x48>
c001e35c:	50                   	push   eax
c001e35d:	50                   	push   eax
c001e35e:	6a 01                	push   0x1
c001e360:	56                   	push   esi
c001e361:	52                   	push   edx
c001e362:	53                   	push   ebx
c001e363:	51                   	push   ecx
c001e364:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e368:	e8 87 fb ff ff       	call   c001def4 <ATA::access(unsigned long long, int, void*, bool)>
c001e36d:	83 c4 20             	add    esp,0x20
c001e370:	85 c0                	test   eax,eax
c001e372:	0f 95 c0             	setne  al
c001e375:	0f b6 c0             	movzx  eax,al
c001e378:	5b                   	pop    ebx
c001e379:	5e                   	pop    esi
c001e37a:	5f                   	pop    edi
c001e37b:	c3                   	ret    

c001e37c <ATA::detectCHS()>:
c001e37c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e380:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001e386:	c1 e0 06             	shl    eax,0x6
c001e389:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001e38f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001e399:	c7 44 24 04 a0 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc00245a0
c001e3a1:	e9 cc 0a ff ff       	jmp    c000ee72 <KePanic(char const*)>

c001e3a6 <ATA::open(int, int, void*)>:
c001e3a6:	53                   	push   ebx
c001e3a7:	83 ec 08             	sub    esp,0x8
c001e3aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e3b6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e3bc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e3c2:	c1 e0 06             	shl    eax,0x6
c001e3c5:	01 d0                	add    eax,edx
c001e3c7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001e3ce:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001e3d4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001e3db:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e3e5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e3eb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e3f2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e3f9:	75 0c                	jne    c001e407 <ATA::open(int, int, void*)+0x61>
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	53                   	push   ebx
c001e3ff:	e8 78 ff ff ff       	call   c001e37c <ATA::detectCHS()>
c001e404:	83 c4 10             	add    esp,0x10
c001e407:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e40d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e413:	c1 e0 06             	shl    eax,0x6
c001e416:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e41d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e427:	d1 e8                	shr    eax,1
c001e429:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e42f:	6a 04                	push   0x4
c001e431:	6a 0c                	push   0xc
c001e433:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e43a:	50                   	push   eax
c001e43b:	52                   	push   edx
c001e43c:	e8 8f e8 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e441:	90                   	nop
c001e442:	90                   	nop
c001e443:	6a 00                	push   0x0
c001e445:	6a 0c                	push   0xc
c001e447:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e44e:	50                   	push   eax
c001e44f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e455:	e8 76 e8 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e45a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e460:	83 c4 20             	add    esp,0x20
c001e463:	c1 e0 06             	shl    eax,0x6
c001e466:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001e46c:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001e473:	0f 84 00 01 00 00    	je     c001e579 <ATA::open(int, int, void*)+0x1d3>
c001e479:	83 ec 0c             	sub    esp,0xc
c001e47c:	6a 08                	push   0x8
c001e47e:	e8 c1 0c ff ff       	call   c000f144 <Phys::allocateContiguousPages(int)>
c001e483:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e489:	c7 04 24 b2 45 02 c0 	mov    DWORD PTR [esp],0xc00245b2
c001e490:	e8 cf 8a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e495:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001e49c:	e8 c4 3d ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c001e4a1:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e4a7:	6a 03                	push   0x3
c001e4a9:	50                   	push   eax
c001e4aa:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e4b0:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e4b6:	e8 8d 44 ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e4bb:	83 c4 20             	add    esp,0x20
c001e4be:	e8 a3 0b ff ff       	call   c000f066 <Phys::allocatePage()>
c001e4c3:	83 ec 0c             	sub    esp,0xc
c001e4c6:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001e4cc:	6a 01                	push   0x1
c001e4ce:	e8 92 3d ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c001e4d3:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001e4d9:	6a 03                	push   0x3
c001e4db:	50                   	push   eax
c001e4dc:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001e4e2:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e4e8:	e8 5b 44 ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e4ed:	83 c4 14             	add    esp,0x14
c001e4f0:	68 eb 45 02 c0       	push   0xc00245eb
c001e4f5:	e8 6a 8a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e4fa:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001e501:	50                   	push   eax
c001e502:	6a 12                	push   0x12
c001e504:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e50b:	50                   	push   eax
c001e50c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e512:	e8 b9 e7 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e517:	83 c4 20             	add    esp,0x20
c001e51a:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001e520:	0f b6 c4             	movzx  eax,ah
c001e523:	50                   	push   eax
c001e524:	6a 13                	push   0x13
c001e526:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e52d:	50                   	push   eax
c001e52e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e534:	e8 97 e7 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e539:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001e540:	50                   	push   eax
c001e541:	6a 14                	push   0x14
c001e543:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e54a:	50                   	push   eax
c001e54b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e551:	e8 7a e7 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e556:	83 c4 20             	add    esp,0x20
c001e559:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001e560:	50                   	push   eax
c001e561:	6a 15                	push   0x15
c001e563:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e56a:	50                   	push   eax
c001e56b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e571:	e8 5a e7 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e576:	83 c4 10             	add    esp,0x10
c001e579:	83 ec 0c             	sub    esp,0xc
c001e57c:	53                   	push   ebx
c001e57d:	e8 5c af fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001e582:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e585:	e8 f4 bd fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001e58a:	31 c0                	xor    eax,eax
c001e58c:	83 c4 18             	add    esp,0x18
c001e58f:	5b                   	pop    ebx
c001e590:	c3                   	ret    

c001e591 <combineCharAndColour(char, unsigned char)>:
c001e591:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e596:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001e59c:	c1 e0 08             	shl    eax,0x8
c001e59f:	09 d0                	or     eax,edx
c001e5a1:	c3                   	ret    

c001e5a2 <combineColours(unsigned char, unsigned char)>:
c001e5a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e5a7:	c1 e0 04             	shl    eax,0x4
c001e5aa:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001e5ae:	c3                   	ret    
c001e5af:	90                   	nop

c001e5b0 <ATAPI::write(unsigned long long, int, void*)>:
c001e5b0:	b8 03 00 00 00       	mov    eax,0x3
c001e5b5:	c3                   	ret    

c001e5b6 <ATAPI::close(int, int, void*)>:
c001e5b6:	83 ec 0c             	sub    esp,0xc
c001e5b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5c3:	85 c0                	test   eax,eax
c001e5c5:	74 0c                	je     c001e5d3 <ATAPI::close(int, int, void*)+0x1d>
c001e5c7:	83 ec 0c             	sub    esp,0xc
c001e5ca:	8b 10                	mov    edx,DWORD PTR [eax]
c001e5cc:	50                   	push   eax
c001e5cd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e5d0:	83 c4 10             	add    esp,0x10
c001e5d3:	31 c0                	xor    eax,eax
c001e5d5:	83 c4 0c             	add    esp,0xc
c001e5d8:	c3                   	ret    
c001e5d9:	90                   	nop

c001e5da <ATAPI::ATAPI()>:
c001e5da:	83 ec 0c             	sub    esp,0xc
c001e5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e1:	83 ec 04             	sub    esp,0x4
c001e5e4:	68 00 08 00 00       	push   0x800
c001e5e9:	68 9d 47 02 c0       	push   0xc002479d
c001e5ee:	50                   	push   eax
c001e5ef:	e8 82 ae fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e5f4:	83 c4 10             	add    esp,0x10
c001e5f7:	ba ac 46 02 c0       	mov    edx,0xc00246ac
c001e5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e600:	89 10                	mov    DWORD PTR [eax],edx
c001e602:	90                   	nop
c001e603:	83 c4 0c             	add    esp,0xc
c001e606:	c3                   	ret    
c001e607:	90                   	nop

c001e608 <ATAPI::readyForCommand()>:
c001e608:	56                   	push   esi
c001e609:	53                   	push   ebx
c001e60a:	53                   	push   ebx
c001e60b:	31 db                	xor    ebx,ebx
c001e60d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e611:	51                   	push   ecx
c001e612:	6a 0c                	push   0xc
c001e614:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e61b:	50                   	push   eax
c001e61c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e622:	e8 69 e7 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001e627:	83 c4 10             	add    esp,0x10
c001e62a:	a8 88                	test   al,0x88
c001e62c:	74 25                	je     c001e653 <ATAPI::readyForCommand()+0x4b>
c001e62e:	43                   	inc    ebx
c001e62f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001e635:	7e da                	jle    c001e611 <ATAPI::readyForCommand()+0x9>
c001e637:	83 ec 0c             	sub    esp,0xc
c001e63a:	68 5e 01 00 00       	push   0x15e
c001e63f:	e8 34 76 ff ff       	call   c0015c78 <milliTenthSleep(unsigned int)>
c001e644:	83 c4 10             	add    esp,0x10
c001e647:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001e64d:	75 c2                	jne    c001e611 <ATAPI::readyForCommand()+0x9>
c001e64f:	31 c0                	xor    eax,eax
c001e651:	eb 02                	jmp    c001e655 <ATAPI::readyForCommand()+0x4d>
c001e653:	b0 01                	mov    al,0x1
c001e655:	5a                   	pop    edx
c001e656:	5b                   	pop    ebx
c001e657:	5e                   	pop    esi
c001e658:	c3                   	ret    
c001e659:	90                   	nop

c001e65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001e65a:	55                   	push   ebp
c001e65b:	57                   	push   edi
c001e65c:	56                   	push   esi
c001e65d:	53                   	push   ebx
c001e65e:	83 ec 20             	sub    esp,0x20
c001e661:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e665:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001e669:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e66d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e671:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e675:	6a 01                	push   0x1
c001e677:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e67e:	50                   	push   eax
c001e67f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e685:	e8 4e e8 ff ff       	call   c001ced8 <IDE::enableIRQs(unsigned char, bool)>
c001e68a:	5e                   	pop    esi
c001e68b:	58                   	pop    eax
c001e68c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e693:	50                   	push   eax
c001e694:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e69a:	e8 0b e6 ff ff       	call   c001ccaa <IDE::prepareInterrupt(unsigned char)>
c001e69f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e6a2:	e8 61 ff ff ff       	call   c001e608 <ATAPI::readyForCommand()>
c001e6a7:	83 c4 10             	add    esp,0x10
c001e6aa:	84 c0                	test   al,al
c001e6ac:	75 0a                	jne    c001e6b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001e6ae:	bb 01 00 00 00       	mov    ebx,0x1
c001e6b3:	e9 60 02 00 00       	jmp    c001e918 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e6b8:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001e6be:	c1 e0 04             	shl    eax,0x4
c001e6c1:	0f b6 c0             	movzx  eax,al
c001e6c4:	50                   	push   eax
c001e6c5:	6a 06                	push   0x6
c001e6c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e6ce:	50                   	push   eax
c001e6cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e6d5:	e8 f6 e5 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6da:	6a 00                	push   0x0
c001e6dc:	6a 01                	push   0x1
c001e6de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e6e5:	50                   	push   eax
c001e6e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e6ec:	e8 df e5 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6f1:	83 c4 20             	add    esp,0x20
c001e6f4:	0f b6 c3             	movzx  eax,bl
c001e6f7:	0f b6 df             	movzx  ebx,bh
c001e6fa:	50                   	push   eax
c001e6fb:	6a 04                	push   0x4
c001e6fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e704:	50                   	push   eax
c001e705:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e70b:	e8 c0 e5 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e710:	53                   	push   ebx
c001e711:	6a 05                	push   0x5
c001e713:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e71a:	50                   	push   eax
c001e71b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e721:	e8 aa e5 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e726:	83 c4 20             	add    esp,0x20
c001e729:	68 a0 00 00 00       	push   0xa0
c001e72e:	6a 07                	push   0x7
c001e730:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e737:	50                   	push   eax
c001e738:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e73e:	e8 8d e5 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e743:	83 c4 0c             	add    esp,0xc
c001e746:	6a 01                	push   0x1
c001e748:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e74f:	50                   	push   eax
c001e750:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e756:	e8 19 f3 ff ff       	call   c001da74 <IDE::polling(unsigned char, unsigned int)>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	0f b6 d8             	movzx  ebx,al
c001e761:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e767:	85 db                	test   ebx,ebx
c001e769:	74 20                	je     c001e78b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001e76b:	53                   	push   ebx
c001e76c:	0f b6 c0             	movzx  eax,al
c001e76f:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e776:	52                   	push   edx
c001e777:	50                   	push   eax
c001e778:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e77e:	e8 37 f2 ff ff       	call   c001d9ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e783:	83 c4 10             	add    esp,0x10
c001e786:	e9 8d 01 00 00       	jmp    c001e918 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e78b:	0f b6 c0             	movzx  eax,al
c001e78e:	53                   	push   ebx
c001e78f:	53                   	push   ebx
c001e790:	50                   	push   eax
c001e791:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e797:	e8 22 e5 ff ff       	call   c001ccbe <IDE::getBase(unsigned char)>
c001e79c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e7a0:	b9 06 00 00 00       	mov    ecx,0x6
c001e7a5:	89 c2                	mov    edx,eax
c001e7a7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e7aa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e7ae:	83 c4 10             	add    esp,0x10
c001e7b1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001e7b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7ba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e7c0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e7c7:	85 db                	test   ebx,ebx
c001e7c9:	0f 84 ec 00 00 00    	je     c001e8bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001e7cf:	51                   	push   ecx
c001e7d0:	51                   	push   ecx
c001e7d1:	52                   	push   edx
c001e7d2:	50                   	push   eax
c001e7d3:	e8 66 e6 ff ff       	call   c001ce3e <IDE::waitInterrupt(unsigned char)>
c001e7d8:	83 c4 10             	add    esp,0x10
c001e7db:	84 c0                	test   al,al
c001e7dd:	0f 84 cb fe ff ff    	je     c001e6ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e7e3:	56                   	push   esi
c001e7e4:	56                   	push   esi
c001e7e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e7ec:	50                   	push   eax
c001e7ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e7f3:	e8 b2 e4 ff ff       	call   c001ccaa <IDE::prepareInterrupt(unsigned char)>
c001e7f8:	83 c4 0c             	add    esp,0xc
c001e7fb:	6a 04                	push   0x4
c001e7fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e804:	50                   	push   eax
c001e805:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e80b:	e8 80 e5 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001e810:	83 c4 0c             	add    esp,0xc
c001e813:	89 c6                	mov    esi,eax
c001e815:	6a 05                	push   0x5
c001e817:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e81e:	50                   	push   eax
c001e81f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e825:	e8 66 e5 ff ff       	call   c001cd90 <IDE::read(unsigned char, unsigned char)>
c001e82a:	89 f1                	mov    ecx,esi
c001e82c:	0f b6 c0             	movzx  eax,al
c001e82f:	0f b6 f1             	movzx  esi,cl
c001e832:	c1 e0 08             	shl    eax,0x8
c001e835:	09 c6                	or     esi,eax
c001e837:	d1 fe                	sar    esi,1
c001e839:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001e83d:	83 c4 10             	add    esp,0x10
c001e840:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e845:	74 41                	je     c001e888 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001e847:	31 c9                	xor    ecx,ecx
c001e849:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e84f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e856:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001e85a:	75 0a                	jne    c001e866 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001e85c:	01 c9                	add    ecx,ecx
c001e85e:	01 cd                	add    ebp,ecx
c001e860:	4b                   	dec    ebx
c001e861:	e9 54 ff ff ff       	jmp    c001e7ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001e866:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001e86b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e86f:	51                   	push   ecx
c001e870:	51                   	push   ecx
c001e871:	52                   	push   edx
c001e872:	50                   	push   eax
c001e873:	e8 46 e4 ff ff       	call   c001ccbe <IDE::getBase(unsigned char)>
c001e878:	89 c2                	mov    edx,eax
c001e87a:	89 f0                	mov    eax,esi
c001e87c:	66 ef                	out    dx,ax
c001e87e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e882:	83 c4 10             	add    esp,0x10
c001e885:	41                   	inc    ecx
c001e886:	eb c1                	jmp    c001e849 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001e888:	31 f6                	xor    esi,esi
c001e88a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e890:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e897:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001e89b:	75 06                	jne    c001e8a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001e89d:	01 f6                	add    esi,esi
c001e89f:	01 f5                	add    ebp,esi
c001e8a1:	eb bd                	jmp    c001e860 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001e8a3:	51                   	push   ecx
c001e8a4:	51                   	push   ecx
c001e8a5:	52                   	push   edx
c001e8a6:	50                   	push   eax
c001e8a7:	e8 12 e4 ff ff       	call   c001ccbe <IDE::getBase(unsigned char)>
c001e8ac:	89 c2                	mov    edx,eax
c001e8ae:	66 ed                	in     ax,dx
c001e8b0:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001e8b5:	83 c4 10             	add    esp,0x10
c001e8b8:	46                   	inc    esi
c001e8b9:	eb cf                	jmp    c001e88a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001e8bb:	51                   	push   ecx
c001e8bc:	51                   	push   ecx
c001e8bd:	52                   	push   edx
c001e8be:	50                   	push   eax
c001e8bf:	e8 7a e5 ff ff       	call   c001ce3e <IDE::waitInterrupt(unsigned char)>
c001e8c4:	83 c4 10             	add    esp,0x10
c001e8c7:	84 c0                	test   al,al
c001e8c9:	0f 84 df fd ff ff    	je     c001e6ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e8cf:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e8d4:	52                   	push   edx
c001e8d5:	52                   	push   edx
c001e8d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e8dd:	50                   	push   eax
c001e8de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e8e4:	e8 c1 e3 ff ff       	call   c001ccaa <IDE::prepareInterrupt(unsigned char)>
c001e8e9:	83 c4 10             	add    esp,0x10
c001e8ec:	50                   	push   eax
c001e8ed:	50                   	push   eax
c001e8ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e8f5:	50                   	push   eax
c001e8f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e8fc:	e8 bd e3 ff ff       	call   c001ccbe <IDE::getBase(unsigned char)>
c001e901:	8d 50 07             	lea    edx,[eax+0x7]
c001e904:	ec                   	in     al,dx
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	a8 88                	test   al,0x88
c001e90a:	74 0a                	je     c001e916 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001e90c:	4b                   	dec    ebx
c001e90d:	75 dd                	jne    c001e8ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001e90f:	bb 02 00 00 00       	mov    ebx,0x2
c001e914:	eb 02                	jmp    c001e918 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e916:	31 db                	xor    ebx,ebx
c001e918:	83 c4 1c             	add    esp,0x1c
c001e91b:	89 d8                	mov    eax,ebx
c001e91d:	5b                   	pop    ebx
c001e91e:	5e                   	pop    esi
c001e91f:	5f                   	pop    edi
c001e920:	5d                   	pop    ebp
c001e921:	c3                   	ret    

c001e922 <ATAPI::diskRemoved()>:
c001e922:	53                   	push   ebx
c001e923:	83 ec 14             	sub    esp,0x14
c001e926:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e92a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e931:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e937:	e8 32 b7 fe ff       	call   c000a06e <LogicalDisk::unmount()>
c001e93c:	58                   	pop    eax
c001e93d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e943:	e8 d8 c0 fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001e948:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e94e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e952:	83 c4 18             	add    esp,0x18
c001e955:	5b                   	pop    ebx
c001e956:	e9 b5 c0 fe ff       	jmp    c000aa10 <VCache::invalidateReadBuffer()>
c001e95b:	90                   	nop

c001e95c <ATAPI::eject()>:
c001e95c:	57                   	push   edi
c001e95d:	b9 03 00 00 00       	mov    ecx,0x3
c001e962:	53                   	push   ebx
c001e963:	83 ec 14             	sub    esp,0x14
c001e966:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e96a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e96e:	fc                   	cld    
c001e96f:	31 c0                	xor    eax,eax
c001e971:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e973:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e978:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e97d:	50                   	push   eax
c001e97e:	50                   	push   eax
c001e97f:	6a 00                	push   0x0
c001e981:	6a 00                	push   0x0
c001e983:	6a 00                	push   0x0
c001e985:	6a 02                	push   0x2
c001e987:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e98b:	50                   	push   eax
c001e98c:	53                   	push   ebx
c001e98d:	e8 c8 fc ff ff       	call   c001e65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e992:	83 c4 14             	add    esp,0x14
c001e995:	53                   	push   ebx
c001e996:	e8 87 ff ff ff       	call   c001e922 <ATAPI::diskRemoved()>
c001e99b:	83 c4 24             	add    esp,0x24
c001e99e:	31 c0                	xor    eax,eax
c001e9a0:	5b                   	pop    ebx
c001e9a1:	5f                   	pop    edi
c001e9a2:	c3                   	ret    
c001e9a3:	90                   	nop

c001e9a4 <ATAPI::diskInserted()>:
c001e9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9a8:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e9af:	c3                   	ret    

c001e9b0 <ATAPI::detectMedia()>:
c001e9b0:	56                   	push   esi
c001e9b1:	53                   	push   ebx
c001e9b2:	83 ec 28             	sub    esp,0x28
c001e9b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e9b9:	6a 0c                	push   0xc
c001e9bb:	6a 00                	push   0x0
c001e9bd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e9c1:	56                   	push   esi
c001e9c2:	e8 29 1b fe ff       	call   c00004f0 <memset>
c001e9c7:	58                   	pop    eax
c001e9c8:	5a                   	pop    edx
c001e9c9:	6a 00                	push   0x0
c001e9cb:	6a 00                	push   0x0
c001e9cd:	6a 00                	push   0x0
c001e9cf:	6a 00                	push   0x0
c001e9d1:	56                   	push   esi
c001e9d2:	53                   	push   ebx
c001e9d3:	e8 82 fc ff ff       	call   c001e65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e9d8:	83 c4 1c             	add    esp,0x1c
c001e9db:	6a 0c                	push   0xc
c001e9dd:	6a 00                	push   0x0
c001e9df:	56                   	push   esi
c001e9e0:	e8 0b 1b fe ff       	call   c00004f0 <memset>
c001e9e5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e9ea:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e9ef:	59                   	pop    ecx
c001e9f0:	58                   	pop    eax
c001e9f1:	6a 01                	push   0x1
c001e9f3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e9f7:	50                   	push   eax
c001e9f8:	6a 00                	push   0x0
c001e9fa:	6a 12                	push   0x12
c001e9fc:	56                   	push   esi
c001e9fd:	53                   	push   ebx
c001e9fe:	e8 57 fc ff ff       	call   c001e65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ea03:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ea07:	83 c4 20             	add    esp,0x20
c001ea0a:	83 e0 7f             	and    eax,0x7f
c001ea0d:	83 f8 70             	cmp    eax,0x70
c001ea10:	74 15                	je     c001ea27 <ATAPI::detectMedia()+0x77>
c001ea12:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ea19:	75 0c                	jne    c001ea27 <ATAPI::detectMedia()+0x77>
c001ea1b:	83 ec 0c             	sub    esp,0xc
c001ea1e:	53                   	push   ebx
c001ea1f:	e8 80 ff ff ff       	call   c001e9a4 <ATAPI::diskInserted()>
c001ea24:	83 c4 10             	add    esp,0x10
c001ea27:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ea2b:	83 e0 0f             	and    eax,0xf
c001ea2e:	83 f8 02             	cmp    eax,0x2
c001ea31:	75 1b                	jne    c001ea4e <ATAPI::detectMedia()+0x9e>
c001ea33:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ea38:	75 2d                	jne    c001ea67 <ATAPI::detectMedia()+0xb7>
c001ea3a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ea41:	74 24                	je     c001ea67 <ATAPI::detectMedia()+0xb7>
c001ea43:	83 ec 0c             	sub    esp,0xc
c001ea46:	53                   	push   ebx
c001ea47:	e8 d6 fe ff ff       	call   c001e922 <ATAPI::diskRemoved()>
c001ea4c:	eb 16                	jmp    c001ea64 <ATAPI::detectMedia()+0xb4>
c001ea4e:	85 c0                	test   eax,eax
c001ea50:	75 15                	jne    c001ea67 <ATAPI::detectMedia()+0xb7>
c001ea52:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ea59:	75 0c                	jne    c001ea67 <ATAPI::detectMedia()+0xb7>
c001ea5b:	83 ec 0c             	sub    esp,0xc
c001ea5e:	53                   	push   ebx
c001ea5f:	e8 40 ff ff ff       	call   c001e9a4 <ATAPI::diskInserted()>
c001ea64:	83 c4 10             	add    esp,0x10
c001ea67:	83 c4 24             	add    esp,0x24
c001ea6a:	5b                   	pop    ebx
c001ea6b:	5e                   	pop    esi
c001ea6c:	c3                   	ret    
c001ea6d:	90                   	nop

c001ea6e <ATAPI::open(int, int, void*)>:
c001ea6e:	56                   	push   esi
c001ea6f:	53                   	push   ebx
c001ea70:	50                   	push   eax
c001ea71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea7d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ea83:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ea89:	c1 e0 06             	shl    eax,0x6
c001ea8c:	01 d0                	add    eax,edx
c001ea8e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ea95:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ea9b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001eaa2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eaac:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001eab2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eab9:	6a 04                	push   0x4
c001eabb:	6a 0c                	push   0xc
c001eabd:	51                   	push   ecx
c001eabe:	52                   	push   edx
c001eabf:	e8 0c e2 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eac4:	90                   	nop
c001eac5:	90                   	nop
c001eac6:	6a 00                	push   0x0
c001eac8:	6a 0c                	push   0xc
c001eaca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ead1:	50                   	push   eax
c001ead2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ead8:	e8 f3 e1 ff ff       	call   c001ccd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eadd:	83 c4 14             	add    esp,0x14
c001eae0:	68 78 01 00 00       	push   0x178
c001eae5:	e8 41 00 ff ff       	call   c000eb2b <malloc>
c001eaea:	83 c4 0c             	add    esp,0xc
c001eaed:	89 c6                	mov    esi,eax
c001eaef:	6a 00                	push   0x0
c001eaf1:	68 ff ff ff 7f       	push   0x7fffffff
c001eaf6:	6a 00                	push   0x0
c001eaf8:	6a 00                	push   0x0
c001eafa:	53                   	push   ebx
c001eafb:	68 4f 48 02 c0       	push   0xc002484f
c001eb00:	50                   	push   eax
c001eb01:	e8 a6 b3 fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001eb06:	83 c4 14             	add    esp,0x14
c001eb09:	56                   	push   esi
c001eb0a:	e8 5d b4 fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001eb0f:	5a                   	pop    edx
c001eb10:	0f be c0             	movsx  eax,al
c001eb13:	59                   	pop    ecx
c001eb14:	50                   	push   eax
c001eb15:	68 94 46 02 c0       	push   0xc0024694
c001eb1a:	e8 45 84 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eb1f:	58                   	pop    eax
c001eb20:	5a                   	pop    edx
c001eb21:	56                   	push   esi
c001eb22:	53                   	push   ebx
c001eb23:	e8 6a a5 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001eb28:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001eb2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb31:	e8 a8 a9 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001eb36:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001eb3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb40:	e8 6b fe ff ff       	call   c001e9b0 <ATAPI::detectMedia()>
c001eb45:	83 c4 14             	add    esp,0x14
c001eb48:	31 c0                	xor    eax,eax
c001eb4a:	5b                   	pop    ebx
c001eb4b:	5e                   	pop    esi
c001eb4c:	c3                   	ret    
c001eb4d:	90                   	nop

c001eb4e <ATAPI::read(unsigned long long, int, void*)>:
c001eb4e:	55                   	push   ebp
c001eb4f:	57                   	push   edi
c001eb50:	56                   	push   esi
c001eb51:	53                   	push   ebx
c001eb52:	83 ec 1c             	sub    esp,0x1c
c001eb55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eb59:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eb5d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001eb61:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001eb68:	74 3c                	je     c001eba6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001eb6a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001eb6e:	b9 03 00 00 00       	mov    ecx,0x3
c001eb73:	fc                   	cld    
c001eb74:	31 c0                	xor    eax,eax
c001eb76:	0f ce                	bswap  esi
c001eb78:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eb7a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001eb7f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001eb83:	89 e8                	mov    eax,ebp
c001eb85:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001eb89:	50                   	push   eax
c001eb8a:	50                   	push   eax
c001eb8b:	55                   	push   ebp
c001eb8c:	c1 e5 0b             	shl    ebp,0xb
c001eb8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001eb93:	6a 00                	push   0x0
c001eb95:	55                   	push   ebp
c001eb96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eb9a:	50                   	push   eax
c001eb9b:	53                   	push   ebx
c001eb9c:	e8 b9 fa ff ff       	call   c001e65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eba1:	83 c4 20             	add    esp,0x20
c001eba4:	eb 1a                	jmp    c001ebc0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001eba6:	83 ec 0c             	sub    esp,0xc
c001eba9:	53                   	push   ebx
c001ebaa:	e8 01 fe ff ff       	call   c001e9b0 <ATAPI::detectMedia()>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ebb9:	75 af                	jne    c001eb6a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ebbb:	b8 02 00 00 00       	mov    eax,0x2
c001ebc0:	83 c4 1c             	add    esp,0x1c
c001ebc3:	5b                   	pop    ebx
c001ebc4:	5e                   	pop    esi
c001ebc5:	5f                   	pop    edi
c001ebc6:	5d                   	pop    ebp
c001ebc7:	c3                   	ret    

c001ebc8 <SATA::close(int, int, void*)>:
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebd5:	85 c0                	test   eax,eax
c001ebd7:	74 0c                	je     c001ebe5 <SATA::close(int, int, void*)+0x1d>
c001ebd9:	83 ec 0c             	sub    esp,0xc
c001ebdc:	8b 10                	mov    edx,DWORD PTR [eax]
c001ebde:	50                   	push   eax
c001ebdf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ebe2:	83 c4 10             	add    esp,0x10
c001ebe5:	31 c0                	xor    eax,eax
c001ebe7:	83 c4 0c             	add    esp,0xc
c001ebea:	c3                   	ret    
c001ebeb:	90                   	nop

c001ebec <SATA::powerSaving(PowerSavingLevel)>:
c001ebec:	c3                   	ret    
c001ebed:	90                   	nop

c001ebee <SATA::open(int, int, void*)>:
c001ebee:	56                   	push   esi
c001ebef:	53                   	push   ebx
c001ebf0:	83 ec 10             	sub    esp,0x10
c001ebf3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ebf7:	68 dc 46 02 c0       	push   0xc00246dc
c001ebfc:	e8 63 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ec01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ec05:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ec0f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ec15:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ec1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ec23:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ec2d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ec33:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ec3a:	e8 27 04 ff ff       	call   c000f066 <Phys::allocatePage()>
c001ec3f:	89 c6                	mov    esi,eax
c001ec41:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ec47:	81 c6 00 10 00 00    	add    esi,0x1000
c001ec4d:	e8 14 04 ff ff       	call   c000f066 <Phys::allocatePage()>
c001ec52:	83 c4 10             	add    esp,0x10
c001ec55:	39 c6                	cmp    esi,eax
c001ec57:	74 10                	je     c001ec69 <SATA::open(int, int, void*)+0x7b>
c001ec59:	83 ec 0c             	sub    esp,0xc
c001ec5c:	68 e8 46 02 c0       	push   0xc00246e8
c001ec61:	e8 0c 02 ff ff       	call   c000ee72 <KePanic(char const*)>
c001ec66:	83 c4 10             	add    esp,0x10
c001ec69:	83 ec 0c             	sub    esp,0xc
c001ec6c:	6a 02                	push   0x2
c001ec6e:	e8 f2 35 ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c001ec73:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ec79:	6a 03                	push   0x3
c001ec7b:	50                   	push   eax
c001ec7c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ec82:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001ec88:	e8 bb 3c ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ec8d:	83 c4 14             	add    esp,0x14
c001ec90:	53                   	push   ebx
c001ec91:	e8 48 a8 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001ec96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec99:	e8 e0 b6 fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001ec9e:	83 c4 14             	add    esp,0x14
c001eca1:	31 c0                	xor    eax,eax
c001eca3:	5b                   	pop    ebx
c001eca4:	5e                   	pop    esi
c001eca5:	c3                   	ret    

c001eca6 <SATA::SATA()>:
c001eca6:	83 ec 0c             	sub    esp,0xc
c001eca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecad:	83 ec 04             	sub    esp,0x4
c001ecb0:	68 00 02 00 00       	push   0x200
c001ecb5:	68 fc 46 02 c0       	push   0xc00246fc
c001ecba:	50                   	push   eax
c001ecbb:	e8 b6 a7 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ecc0:	83 c4 10             	add    esp,0x10
c001ecc3:	ba 6c 47 02 c0       	mov    edx,0xc002476c
c001ecc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccc:	89 10                	mov    DWORD PTR [eax],edx
c001ecce:	90                   	nop
c001eccf:	83 c4 0c             	add    esp,0xc
c001ecd2:	c3                   	ret    
c001ecd3:	90                   	nop

c001ecd4 <SATA::access(unsigned long long, int, void*, bool)>:
c001ecd4:	55                   	push   ebp
c001ecd5:	57                   	push   edi
c001ecd6:	56                   	push   esi
c001ecd7:	53                   	push   ebx
c001ecd8:	83 ec 2c             	sub    esp,0x2c
c001ecdb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ecdf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ece3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ece7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eceb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ecef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecf3:	fa                   	cli    
c001ecf4:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001ecfa:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ecff:	7e 10                	jle    c001ed11 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001ed01:	83 ec 0c             	sub    esp,0xc
c001ed04:	68 0c 47 02 c0       	push   0xc002470c
c001ed09:	e8 64 01 ff ff       	call   c000ee72 <KePanic(char const*)>
c001ed0e:	83 c4 10             	add    esp,0x10
c001ed11:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ed17:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ed1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ed23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed27:	89 d0                	mov    eax,edx
c001ed29:	c1 e0 07             	shl    eax,0x7
c001ed2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ed30:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ed3a:	51                   	push   ecx
c001ed3b:	8d 42 02             	lea    eax,[edx+0x2]
c001ed3e:	51                   	push   ecx
c001ed3f:	c1 e0 07             	shl    eax,0x7
c001ed42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ed46:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ed4a:	50                   	push   eax
c001ed4b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ed51:	e8 fe ed ff ff       	call   c001db54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ed56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ed5a:	83 c4 10             	add    esp,0x10
c001ed5d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ed62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed66:	0f 84 a4 01 00 00    	je     c001ef10 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001ed6c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ed70:	c1 e0 09             	shl    eax,0x9
c001ed73:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ed78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ed7c:	74 0e                	je     c001ed8c <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001ed7e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ed84:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ed88:	89 c1                	mov    ecx,eax
c001ed8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ed8c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ed92:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ed96:	8d 42 02             	lea    eax,[edx+0x2]
c001ed99:	c1 e0 07             	shl    eax,0x7
c001ed9c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001eda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001eda8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001edae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edb2:	c1 e1 05             	shl    ecx,0x5
c001edb5:	01 c8                	add    eax,ecx
c001edb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edbb:	83 e1 01             	and    ecx,0x1
c001edbe:	89 ce                	mov    esi,ecx
c001edc0:	8a 08                	mov    cl,BYTE PTR [eax]
c001edc2:	c1 e6 06             	shl    esi,0x6
c001edc5:	83 e1 bf             	and    ecx,0xffffffbf
c001edc8:	09 f1                	or     ecx,esi
c001edca:	88 08                	mov    BYTE PTR [eax],cl
c001edcc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001edce:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001edd4:	81 c9 05 00 01 00    	or     ecx,0x10005
c001edda:	89 08                	mov    DWORD PTR [eax],ecx
c001eddc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ede2:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ede8:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001edee:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001edf1:	50                   	push   eax
c001edf2:	68 90 00 00 00       	push   0x90
c001edf7:	6a 00                	push   0x0
c001edf9:	56                   	push   esi
c001edfa:	e8 f1 16 fe ff       	call   c00004f0 <memset>
c001edff:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ee05:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ee0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee0f:	83 c4 10             	add    esp,0x10
c001ee12:	48                   	dec    eax
c001ee13:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ee18:	89 c1                	mov    ecx,eax
c001ee1a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ee20:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ee25:	09 c8                	or     eax,ecx
c001ee27:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ee2d:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ee33:	83 c8 80             	or     eax,0xffffff80
c001ee36:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ee3c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ee3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ee43:	25 00 7f 00 00       	and    eax,0x7f00
c001ee48:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ee4d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ee52:	66 89 06             	mov    WORD PTR [esi],ax
c001ee55:	b0 35                	mov    al,0x35
c001ee57:	75 02                	jne    c001ee5b <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001ee59:	b0 25                	mov    al,0x25
c001ee5b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ee5e:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ee62:	89 e8                	mov    eax,ebp
c001ee64:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ee68:	c1 e8 10             	shr    eax,0x10
c001ee6b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ee6e:	89 e8                	mov    eax,ebp
c001ee70:	c1 e8 18             	shr    eax,0x18
c001ee73:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ee76:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ee7a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ee7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee81:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ee84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ee88:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ee8c:	89 d6                	mov    esi,edx
c001ee8e:	31 c0                	xor    eax,eax
c001ee90:	c1 e6 07             	shl    esi,0x7
c001ee93:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ee97:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ee9d:	80 e1 88             	and    cl,0x88
c001eea0:	74 0a                	je     c001eeac <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001eea2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eea7:	74 0a                	je     c001eeb3 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001eea9:	40                   	inc    eax
c001eeaa:	eb eb                	jmp    c001ee97 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001eeac:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eeb1:	75 0a                	jne    c001eebd <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001eeb3:	83 ec 0c             	sub    esp,0xc
c001eeb6:	68 45 47 02 c0       	push   0xc0024745
c001eebb:	eb 36                	jmp    c001eef3 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001eebd:	b8 01 00 00 00       	mov    eax,0x1
c001eec2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001eec6:	c1 e2 07             	shl    edx,0x7
c001eec9:	d3 e0                	shl    eax,cl
c001eecb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001eecf:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001eed5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001eedb:	85 c8                	test   eax,ecx
c001eedd:	74 25                	je     c001ef04 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c001eedf:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001eee5:	0f ba e1 1e          	bt     ecx,0x1e
c001eee9:	73 ea                	jae    c001eed5 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001eeeb:	83 ec 0c             	sub    esp,0xc
c001eeee:	68 53 47 02 c0       	push   0xc0024753
c001eef3:	e8 6c 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eef8:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	eb 13                	jmp    c001ef17 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c001ef04:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ef0a:	0f ba e0 1e          	bt     eax,0x1e
c001ef0e:	73 18                	jae    c001ef28 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c001ef10:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ef17:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001ef1e:	75 01                	jne    c001ef21 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001ef20:	fb                   	sti    
c001ef21:	b8 01 00 00 00       	mov    eax,0x1
c001ef26:	eb 2c                	jmp    c001ef54 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001ef28:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ef2d:	75 10                	jne    c001ef3f <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c001ef2f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ef35:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ef39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ef3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ef3f:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ef46:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001ef4b:	85 c0                	test   eax,eax
c001ef4d:	75 03                	jne    c001ef52 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001ef4f:	fb                   	sti    
c001ef50:	eb 02                	jmp    c001ef54 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001ef52:	31 c0                	xor    eax,eax
c001ef54:	83 c4 2c             	add    esp,0x2c
c001ef57:	5b                   	pop    ebx
c001ef58:	5e                   	pop    esi
c001ef59:	5f                   	pop    edi
c001ef5a:	5d                   	pop    ebp
c001ef5b:	c3                   	ret    

c001ef5c <SATA::read(unsigned long long, int, void*)>:
c001ef5c:	57                   	push   edi
c001ef5d:	b8 04 00 00 00       	mov    eax,0x4
c001ef62:	56                   	push   esi
c001ef63:	53                   	push   ebx
c001ef64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ef68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ef6c:	8d 7a ff             	lea    edi,[edx-0x1]
c001ef6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ef73:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ef77:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ef7d:	77 25                	ja     c001efa4 <SATA::read(unsigned long long, int, void*)+0x48>
c001ef7f:	b8 06 00 00 00       	mov    eax,0x6
c001ef84:	85 f6                	test   esi,esi
c001ef86:	74 1c                	je     c001efa4 <SATA::read(unsigned long long, int, void*)+0x48>
c001ef88:	50                   	push   eax
c001ef89:	50                   	push   eax
c001ef8a:	6a 00                	push   0x0
c001ef8c:	56                   	push   esi
c001ef8d:	52                   	push   edx
c001ef8e:	53                   	push   ebx
c001ef8f:	51                   	push   ecx
c001ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ef94:	e8 3b fd ff ff       	call   c001ecd4 <SATA::access(unsigned long long, int, void*, bool)>
c001ef99:	83 c4 20             	add    esp,0x20
c001ef9c:	85 c0                	test   eax,eax
c001ef9e:	0f 95 c0             	setne  al
c001efa1:	0f b6 c0             	movzx  eax,al
c001efa4:	5b                   	pop    ebx
c001efa5:	5e                   	pop    esi
c001efa6:	5f                   	pop    edi
c001efa7:	c3                   	ret    

c001efa8 <SATA::write(unsigned long long, int, void*)>:
c001efa8:	55                   	push   ebp
c001efa9:	b8 04 00 00 00       	mov    eax,0x4
c001efae:	57                   	push   edi
c001efaf:	56                   	push   esi
c001efb0:	53                   	push   ebx
c001efb1:	83 ec 0c             	sub    esp,0xc
c001efb4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001efb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001efbc:	8d 73 ff             	lea    esi,[ebx-0x1]
c001efbf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001efc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001efc7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001efcd:	77 3d                	ja     c001f00c <SATA::write(unsigned long long, int, void*)+0x64>
c001efcf:	b8 06 00 00 00       	mov    eax,0x6
c001efd4:	85 ed                	test   ebp,ebp
c001efd6:	74 34                	je     c001f00c <SATA::write(unsigned long long, int, void*)+0x64>
c001efd8:	c1 e3 09             	shl    ebx,0x9
c001efdb:	01 eb                	add    ebx,ebp
c001efdd:	89 d6                	mov    esi,edx
c001efdf:	89 cf                	mov    edi,ecx
c001efe1:	83 c6 01             	add    esi,0x1
c001efe4:	83 d7 00             	adc    edi,0x0
c001efe7:	50                   	push   eax
c001efe8:	50                   	push   eax
c001efe9:	6a 01                	push   0x1
c001efeb:	55                   	push   ebp
c001efec:	81 c5 00 02 00 00    	add    ebp,0x200
c001eff2:	6a 01                	push   0x1
c001eff4:	51                   	push   ecx
c001eff5:	52                   	push   edx
c001eff6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001effa:	e8 d5 fc ff ff       	call   c001ecd4 <SATA::access(unsigned long long, int, void*, bool)>
c001efff:	83 c4 20             	add    esp,0x20
c001f002:	89 f2                	mov    edx,esi
c001f004:	89 f9                	mov    ecx,edi
c001f006:	39 dd                	cmp    ebp,ebx
c001f008:	75 d3                	jne    c001efdd <SATA::write(unsigned long long, int, void*)+0x35>
c001f00a:	31 c0                	xor    eax,eax
c001f00c:	83 c4 0c             	add    esp,0xc
c001f00f:	5b                   	pop    ebx
c001f010:	5e                   	pop    esi
c001f011:	5f                   	pop    edi
c001f012:	5d                   	pop    ebp
c001f013:	c3                   	ret    

c001f014 <SATAPI::write(unsigned long long, int, void*)>:
c001f014:	b8 03 00 00 00       	mov    eax,0x3
c001f019:	c3                   	ret    

c001f01a <SATAPI::close(int, int, void*)>:
c001f01a:	83 ec 0c             	sub    esp,0xc
c001f01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f021:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f027:	85 c0                	test   eax,eax
c001f029:	74 0c                	je     c001f037 <SATAPI::close(int, int, void*)+0x1d>
c001f02b:	83 ec 0c             	sub    esp,0xc
c001f02e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f030:	50                   	push   eax
c001f031:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f034:	83 c4 10             	add    esp,0x10
c001f037:	31 c0                	xor    eax,eax
c001f039:	83 c4 0c             	add    esp,0xc
c001f03c:	c3                   	ret    
c001f03d:	90                   	nop

c001f03e <SATAPI::SATAPI()>:
c001f03e:	83 ec 0c             	sub    esp,0xc
c001f041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f045:	83 ec 04             	sub    esp,0x4
c001f048:	68 00 08 00 00       	push   0x800
c001f04d:	68 9c 47 02 c0       	push   0xc002479c
c001f052:	50                   	push   eax
c001f053:	e8 1e a4 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f058:	83 c4 10             	add    esp,0x10
c001f05b:	ba 90 48 02 c0       	mov    edx,0xc0024890
c001f060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f064:	89 10                	mov    DWORD PTR [eax],edx
c001f066:	90                   	nop
c001f067:	83 c4 0c             	add    esp,0xc
c001f06a:	c3                   	ret    
c001f06b:	90                   	nop

c001f06c <SATAPI::diskRemoved()>:
c001f06c:	c3                   	ret    
c001f06d:	90                   	nop

c001f06e <SATAPI::diskInserted()>:
c001f06e:	83 ec 18             	sub    esp,0x18
c001f071:	68 a8 47 02 c0       	push   0xc00247a8
c001f076:	e8 e9 7e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f07b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f07f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001f086:	83 c4 1c             	add    esp,0x1c
c001f089:	c3                   	ret    

c001f08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f08a:	55                   	push   ebp
c001f08b:	57                   	push   edi
c001f08c:	56                   	push   esi
c001f08d:	53                   	push   ebx
c001f08e:	83 ec 34             	sub    esp,0x34
c001f091:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f095:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f099:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f09d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f0a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f0a5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f0ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f0b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f0b5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f0bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f0bf:	83 c0 02             	add    eax,0x2
c001f0c2:	c1 e0 07             	shl    eax,0x7
c001f0c5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0d1:	c1 e0 07             	shl    eax,0x7
c001f0d4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f0dc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f0e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f0ea:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f0f0:	e8 5f ea ff ff       	call   c001db54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f0f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f0f9:	83 c4 10             	add    esp,0x10
c001f0fc:	b8 01 00 00 00       	mov    eax,0x1
c001f101:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f106:	0f 84 53 02 00 00    	je     c001f35f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001f10c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f116:	8b 00                	mov    eax,DWORD PTR [eax]
c001f118:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f11e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f124:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f128:	c1 e1 05             	shl    ecx,0x5
c001f12b:	01 c8                	add    eax,ecx
c001f12d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f12f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f135:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f13b:	89 08                	mov    DWORD PTR [eax],ecx
c001f13d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f143:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f149:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f14f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f152:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f155:	50                   	push   eax
c001f156:	68 90 00 00 00       	push   0x90
c001f15b:	6a 00                	push   0x0
c001f15d:	53                   	push   ebx
c001f15e:	e8 8d 13 fe ff       	call   c00004f0 <memset>
c001f163:	b9 0c 00 00 00       	mov    ecx,0xc
c001f168:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f16c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f16e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001f174:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f178:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f17e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f182:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f186:	48                   	dec    eax
c001f187:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f18c:	89 c1                	mov    ecx,eax
c001f18e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f194:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f199:	09 c8                	or     eax,ecx
c001f19b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f1a1:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001f1a7:	83 c8 80             	or     eax,0xffffff80
c001f1aa:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001f1b0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f1b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f1b7:	25 00 7f 00 00       	and    eax,0x7f00
c001f1bc:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f1c0:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f1c5:	66 89 03             	mov    WORD PTR [ebx],ax
c001f1c8:	89 d0                	mov    eax,edx
c001f1ca:	c1 ea 18             	shr    edx,0x18
c001f1cd:	c1 e8 10             	shr    eax,0x10
c001f1d0:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f1d3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f1d6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f1da:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f1dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1e1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f1e4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f1e8:	83 c4 10             	add    esp,0x10
c001f1eb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f1ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f1f3:	31 c0                	xor    eax,eax
c001f1f5:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001f1fb:	80 e1 88             	and    cl,0x88
c001f1fe:	74 0a                	je     c001f20a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001f200:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f205:	74 0a                	je     c001f211 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001f207:	40                   	inc    eax
c001f208:	eb eb                	jmp    c001f1f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f20a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f20f:	75 43                	jne    c001f254 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f211:	83 ec 0c             	sub    esp,0xc
c001f214:	68 c0 47 02 c0       	push   0xc00247c0
c001f219:	e8 46 7d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f21e:	58                   	pop    eax
c001f21f:	5a                   	pop    edx
c001f220:	68 d5 47 02 c0       	push   0xc00247d5
c001f225:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001f22b:	e8 fc 23 ff ff       	call   c001162c <VgaText::puts(char const*)>
c001f230:	59                   	pop    ecx
c001f231:	5b                   	pop    ebx
c001f232:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f236:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f23c:	e8 ad e9 ff ff       	call   c001dbee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f241:	5e                   	pop    esi
c001f242:	5f                   	pop    edi
c001f243:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f247:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f24d:	e8 7c e9 ff ff       	call   c001dbce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f252:	eb 48                	jmp    c001f29c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001f254:	be 01 00 00 00       	mov    esi,0x1
c001f259:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f25d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f261:	d3 e6                	shl    esi,cl
c001f263:	c1 e7 07             	shl    edi,0x7
c001f266:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001f26c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001f271:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001f275:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001f27b:	85 c6                	test   esi,eax
c001f27d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001f283:	0f 84 a3 00 00 00    	je     c001f32c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001f289:	0f ba e0 1e          	bt     eax,0x1e
c001f28d:	73 1a                	jae    c001f2a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001f28f:	83 ec 0c             	sub    esp,0xc
c001f292:	68 e7 47 02 c0       	push   0xc00247e7
c001f297:	e8 c8 7c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f29c:	83 c4 10             	add    esp,0x10
c001f29f:	b8 01 00 00 00       	mov    eax,0x1
c001f2a4:	e9 b6 00 00 00       	jmp    c001f35f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001f2a9:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001f2af:	83 f8 0d             	cmp    eax,0xd
c001f2b2:	77 0a                	ja     c001f2be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001f2b4:	83 ec 0c             	sub    esp,0xc
c001f2b7:	68 c8 00 00 00       	push   0xc8
c001f2bc:	eb 28                	jmp    c001f2e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001f2be:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001f2c4:	83 f8 0d             	cmp    eax,0xd
c001f2c7:	77 0a                	ja     c001f2d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001f2c9:	83 ec 0c             	sub    esp,0xc
c001f2cc:	68 58 02 00 00       	push   0x258
c001f2d1:	eb 13                	jmp    c001f2e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001f2d3:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001f2d9:	83 f8 06             	cmp    eax,0x6
c001f2dc:	77 10                	ja     c001f2ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001f2de:	83 ec 0c             	sub    esp,0xc
c001f2e1:	68 dc 05 00 00       	push   0x5dc
c001f2e6:	e8 8d 69 ff ff       	call   c0015c78 <milliTenthSleep(unsigned int)>
c001f2eb:	83 c4 10             	add    esp,0x10
c001f2ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f2f2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001f2f5:	75 06                	jne    c001f2fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001f2f7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001f2fb:	74 15                	je     c001f312 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001f2fd:	83 fb 06             	cmp    ebx,0x6
c001f300:	77 10                	ja     c001f312 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001f302:	83 ec 0c             	sub    esp,0xc
c001f305:	68 c4 09 00 00       	push   0x9c4
c001f30a:	e8 69 69 ff ff       	call   c0015c78 <milliTenthSleep(unsigned int)>
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	43                   	inc    ebx
c001f313:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001f319:	0f 85 56 ff ff ff    	jne    c001f275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001f31f:	83 ec 0c             	sub    esp,0xc
c001f322:	68 fa 47 02 c0       	push   0xc00247fa
c001f327:	e9 6b ff ff ff       	jmp    c001f297 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001f32c:	0f ba e0 1e          	bt     eax,0x1e
c001f330:	73 0d                	jae    c001f33f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001f332:	83 ec 0c             	sub    esp,0xc
c001f335:	68 0e 48 02 c0       	push   0xc002480e
c001f33a:	e9 58 ff ff ff       	jmp    c001f297 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001f33f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f344:	74 17                	je     c001f35d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001f346:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f34b:	74 10                	je     c001f35d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001f34d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001f353:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f357:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f35b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f35d:	31 c0                	xor    eax,eax
c001f35f:	83 c4 2c             	add    esp,0x2c
c001f362:	5b                   	pop    ebx
c001f363:	5e                   	pop    esi
c001f364:	5f                   	pop    edi
c001f365:	5d                   	pop    ebp
c001f366:	c3                   	ret    
c001f367:	90                   	nop

c001f368 <SATAPI::eject()>:
c001f368:	57                   	push   edi
c001f369:	b9 03 00 00 00       	mov    ecx,0x3
c001f36e:	83 ec 18             	sub    esp,0x18
c001f371:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f375:	fc                   	cld    
c001f376:	31 c0                	xor    eax,eax
c001f378:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f37a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f37f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f384:	50                   	push   eax
c001f385:	6a 00                	push   0x0
c001f387:	6a 00                	push   0x0
c001f389:	6a 00                	push   0x0
c001f38b:	6a 00                	push   0x0
c001f38d:	6a 02                	push   0x2
c001f38f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f393:	50                   	push   eax
c001f394:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f398:	e8 ed fc ff ff       	call   c001f08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f39d:	31 c0                	xor    eax,eax
c001f39f:	83 c4 38             	add    esp,0x38
c001f3a2:	5f                   	pop    edi
c001f3a3:	c3                   	ret    

c001f3a4 <SATAPI::detectMedia()>:
c001f3a4:	53                   	push   ebx
c001f3a5:	83 ec 14             	sub    esp,0x14
c001f3a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f3ac:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f3b2:	e8 69 b6 fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001f3b7:	59                   	pop    ecx
c001f3b8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f3be:	e8 4d b6 fe ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c001f3c3:	c7 04 24 23 48 02 c0 	mov    DWORD PTR [esp],0xc0024823
c001f3ca:	e8 95 7b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f3cf:	83 c4 10             	add    esp,0x10
c001f3d2:	31 c0                	xor    eax,eax
c001f3d4:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001f3db:	85 d2                	test   edx,edx
c001f3dd:	74 0f                	je     c001f3ee <SATAPI::detectMedia()+0x4a>
c001f3df:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001f3e5:	75 07                	jne    c001f3ee <SATAPI::detectMedia()+0x4a>
c001f3e7:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001f3ee:	40                   	inc    eax
c001f3ef:	83 f8 1a             	cmp    eax,0x1a
c001f3f2:	75 e0                	jne    c001f3d4 <SATAPI::detectMedia()+0x30>
c001f3f4:	83 c4 08             	add    esp,0x8
c001f3f7:	5b                   	pop    ebx
c001f3f8:	c3                   	ret    
c001f3f9:	90                   	nop

c001f3fa <SATAPI::open(int, int, void*)>:
c001f3fa:	56                   	push   esi
c001f3fb:	53                   	push   ebx
c001f3fc:	51                   	push   ecx
c001f3fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f405:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f40f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f415:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f41f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f423:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f42d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f433:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f43a:	e8 27 fc fe ff       	call   c000f066 <Phys::allocatePage()>
c001f43f:	89 c6                	mov    esi,eax
c001f441:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f447:	81 c6 00 10 00 00    	add    esi,0x1000
c001f44d:	e8 14 fc fe ff       	call   c000f066 <Phys::allocatePage()>
c001f452:	39 c6                	cmp    esi,eax
c001f454:	74 10                	je     c001f466 <SATAPI::open(int, int, void*)+0x6c>
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	68 38 48 02 c0       	push   0xc0024838
c001f45e:	e8 0f fa fe ff       	call   c000ee72 <KePanic(char const*)>
c001f463:	83 c4 10             	add    esp,0x10
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	6a 02                	push   0x2
c001f46b:	e8 f5 2d ff ff       	call   c0012265 <Virt::allocateKernelVirtualPages(int)>
c001f470:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f476:	6a 03                	push   0x3
c001f478:	50                   	push   eax
c001f479:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f47f:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001f485:	e8 be 34 ff ff       	call   c0012948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f48a:	83 c4 14             	add    esp,0x14
c001f48d:	68 78 01 00 00       	push   0x178
c001f492:	e8 94 f6 fe ff       	call   c000eb2b <malloc>
c001f497:	83 c4 0c             	add    esp,0xc
c001f49a:	89 c6                	mov    esi,eax
c001f49c:	6a 00                	push   0x0
c001f49e:	68 ff ff ff 7f       	push   0x7fffffff
c001f4a3:	6a 00                	push   0x0
c001f4a5:	6a 00                	push   0x0
c001f4a7:	53                   	push   ebx
c001f4a8:	68 4e 48 02 c0       	push   0xc002484e
c001f4ad:	50                   	push   eax
c001f4ae:	e8 f9 a9 fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f4b3:	83 c4 14             	add    esp,0x14
c001f4b6:	56                   	push   esi
c001f4b7:	e8 b0 aa fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001f4bc:	5a                   	pop    edx
c001f4bd:	0f be c0             	movsx  eax,al
c001f4c0:	59                   	pop    ecx
c001f4c1:	50                   	push   eax
c001f4c2:	68 94 46 02 c0       	push   0xc0024694
c001f4c7:	e8 98 7a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f4cc:	58                   	pop    eax
c001f4cd:	5a                   	pop    edx
c001f4ce:	56                   	push   esi
c001f4cf:	53                   	push   ebx
c001f4d0:	e8 bd 9b fe ff       	call   c0009092 <Device::addChild(Device*)>
c001f4d5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001f4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f4de:	e8 fb 9f fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001f4e3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f4ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f4ed:	e8 b2 fe ff ff       	call   c001f3a4 <SATAPI::detectMedia()>
c001f4f2:	83 c4 14             	add    esp,0x14
c001f4f5:	31 c0                	xor    eax,eax
c001f4f7:	5b                   	pop    ebx
c001f4f8:	5e                   	pop    esi
c001f4f9:	c3                   	ret    

c001f4fa <SATAPI::read(unsigned long long, int, void*)>:
c001f4fa:	57                   	push   edi
c001f4fb:	56                   	push   esi
c001f4fc:	53                   	push   ebx
c001f4fd:	83 ec 30             	sub    esp,0x30
c001f500:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f504:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001f508:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f50c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f514:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f518:	83 fe 04             	cmp    esi,0x4
c001f51b:	7e 10                	jle    c001f52d <SATAPI::read(unsigned long long, int, void*)+0x33>
c001f51d:	83 ec 0c             	sub    esp,0xc
c001f520:	68 5c 48 02 c0       	push   0xc002485c
c001f525:	e8 48 f9 fe ff       	call   c000ee72 <KePanic(char const*)>
c001f52a:	83 c4 10             	add    esp,0x10
c001f52d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f533:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f539:	51                   	push   ecx
c001f53a:	50                   	push   eax
c001f53b:	83 c0 02             	add    eax,0x2
c001f53e:	c1 e0 07             	shl    eax,0x7
c001f541:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001f547:	50                   	push   eax
c001f548:	52                   	push   edx
c001f549:	e8 ca e6 ff ff       	call   c001dc18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f54e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f552:	b9 03 00 00 00       	mov    ecx,0x3
c001f557:	fc                   	cld    
c001f558:	31 c0                	xor    eax,eax
c001f55a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f55c:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001f561:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001f566:	83 c4 0c             	add    esp,0xc
c001f569:	6a 00                	push   0x0
c001f56b:	6a 00                	push   0x0
c001f56d:	6a 00                	push   0x0
c001f56f:	6a 00                	push   0x0
c001f571:	6a 02                	push   0x2
c001f573:	8d 44 24 30          	lea    eax,[esp+0x30]
c001f577:	50                   	push   eax
c001f578:	53                   	push   ebx
c001f579:	e8 0c fb ff ff       	call   c001f08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f57e:	83 c4 20             	add    esp,0x20
c001f581:	85 c0                	test   eax,eax
c001f583:	75 44                	jne    c001f5c9 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001f585:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f589:	b9 03 00 00 00       	mov    ecx,0x3
c001f58e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f594:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001f599:	0f c8                	bswap  eax
c001f59b:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001f59f:	89 f0                	mov    eax,esi
c001f5a1:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001f5a5:	50                   	push   eax
c001f5a6:	56                   	push   esi
c001f5a7:	c1 e6 0b             	shl    esi,0xb
c001f5aa:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001f5ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f5b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f5b6:	56                   	push   esi
c001f5b7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001f5bb:	50                   	push   eax
c001f5bc:	53                   	push   ebx
c001f5bd:	e8 c8 fa ff ff       	call   c001f08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f5c2:	83 c4 20             	add    esp,0x20
c001f5c5:	85 c0                	test   eax,eax
c001f5c7:	74 14                	je     c001f5dd <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001f5c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f5cd:	83 ec 0c             	sub    esp,0xc
c001f5d0:	53                   	push   ebx
c001f5d1:	e8 ce fd ff ff       	call   c001f3a4 <SATAPI::detectMedia()>
c001f5d6:	83 c4 10             	add    esp,0x10
c001f5d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5dd:	83 c4 30             	add    esp,0x30
c001f5e0:	5b                   	pop    ebx
c001f5e1:	5e                   	pop    esi
c001f5e2:	5f                   	pop    edi
c001f5e3:	c3                   	ret    

c001f5e4 <IOAPIC::close(int, int, void*)>:
c001f5e4:	b8 00 00 00 00       	mov    eax,0x0
c001f5e9:	c3                   	ret    

c001f5ea <apicGetBase()>:
c001f5ea:	55                   	push   ebp
c001f5eb:	89 e5                	mov    ebp,esp
c001f5ed:	83 ec 08             	sub    esp,0x8
c001f5f0:	83 ec 0c             	sub    esp,0xc
c001f5f3:	68 c0 48 02 c0       	push   0xc00248c0
c001f5f8:	e8 75 f8 fe ff       	call   c000ee72 <KePanic(char const*)>
c001f5fd:	83 c4 10             	add    esp,0x10
c001f600:	b8 00 00 00 00       	mov    eax,0x0
c001f605:	c9                   	leave  
c001f606:	c3                   	ret    
c001f607:	90                   	nop

c001f608 <IOAPIC::IOAPIC()>:
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60f:	83 ec 08             	sub    esp,0x8
c001f612:	68 cf 48 02 c0       	push   0xc00248cf
c001f617:	50                   	push   eax
c001f618:	e8 d7 9b fe ff       	call   c00091f4 <Device::Device(char const*)>
c001f61d:	83 c4 10             	add    esp,0x10
c001f620:	ba f0 48 02 c0       	mov    edx,0xc00248f0
c001f625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f629:	89 10                	mov    DWORD PTR [eax],edx
c001f62b:	90                   	nop
c001f62c:	83 c4 0c             	add    esp,0xc
c001f62f:	c3                   	ret    

c001f630 <apicOpen()>:
c001f630:	55                   	push   ebp
c001f631:	89 e5                	mov    ebp,esp
c001f633:	53                   	push   ebx
c001f634:	83 ec 34             	sub    esp,0x34
c001f637:	83 ec 0c             	sub    esp,0xc
c001f63a:	68 d7 48 02 c0       	push   0xc00248d7
c001f63f:	e8 20 79 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f644:	83 c4 10             	add    esp,0x10
c001f647:	a0 20 e1 02 c0       	mov    al,ds:0xc002e120
c001f64c:	83 f0 01             	xor    eax,0x1
c001f64f:	0f b6 c0             	movzx  eax,al
c001f652:	85 c0                	test   eax,eax
c001f654:	0f 84 a3 00 00 00    	je     c001f6fd <apicOpen()+0xcd>
c001f65a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001f65e:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001f663:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f667:	0f b6 c0             	movzx  eax,al
c001f66a:	39 c2                	cmp    edx,eax
c001f66c:	0f 83 84 00 00 00    	jae    c001f6f6 <apicOpen()+0xc6>
c001f672:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001f679:	83 ec 0c             	sub    esp,0xc
c001f67c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f67f:	e8 a7 f4 fe ff       	call   c000eb2b <malloc>
c001f684:	83 c4 10             	add    esp,0x10
c001f687:	89 c3                	mov    ebx,eax
c001f689:	83 ec 0c             	sub    esp,0xc
c001f68c:	53                   	push   ebx
c001f68d:	e8 76 ff ff ff       	call   c001f608 <IOAPIC::IOAPIC()>
c001f692:	83 c4 10             	add    esp,0x10
c001f695:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001f698:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001f69c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001f69f:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001f6a6:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c001f6ab:	83 c0 01             	add    eax,0x1
c001f6ae:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001f6b3:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001f6b8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001f6be:	83 ec 08             	sub    esp,0x8
c001f6c1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f6c4:	50                   	push   eax
c001f6c5:	e8 c8 99 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001f6ca:	83 c4 10             	add    esp,0x10
c001f6cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6d2:	83 c0 08             	add    eax,0x8
c001f6d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6d7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f6db:	6a 00                	push   0x0
c001f6dd:	6a 00                	push   0x0
c001f6df:	52                   	push   edx
c001f6e0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f6e3:	ff d0                	call   eax
c001f6e5:	83 c4 10             	add    esp,0x10
c001f6e8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f6eb:	83 c0 01             	add    eax,0x1
c001f6ee:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f6f1:	e9 68 ff ff ff       	jmp    c001f65e <apicOpen()+0x2e>
c001f6f6:	c6 05 20 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e120,0x1
c001f6fd:	e8 e8 fe ff ff       	call   c001f5ea <apicGetBase()>
c001f702:	05 f0 00 00 00       	add    eax,0xf0
c001f707:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f70a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f70d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f70f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f712:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f719:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f720:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f723:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f726:	89 10                	mov    DWORD PTR [eax],edx
c001f728:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f72f:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001f734:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f737:	7d 7c                	jge    c001f7b5 <apicOpen()+0x185>
c001f739:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f73c:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f743:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f746:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f749:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f750:	c1 e8 08             	shr    eax,0x8
c001f753:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f757:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f75a:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f761:	c1 e8 18             	shr    eax,0x18
c001f764:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f767:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f76b:	3d ff 00 00 00       	cmp    eax,0xff
c001f770:	75 3a                	jne    c001f7ac <apicOpen()+0x17c>
c001f772:	e8 73 fe ff ff       	call   c001f5ea <apicGetBase()>
c001f777:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f77b:	83 fa 01             	cmp    edx,0x1
c001f77e:	75 07                	jne    c001f787 <apicOpen()+0x157>
c001f780:	ba 60 03 00 00       	mov    edx,0x360
c001f785:	eb 05                	jmp    c001f78c <apicOpen()+0x15c>
c001f787:	ba 50 03 00 00       	mov    edx,0x350
c001f78c:	01 d0                	add    eax,edx
c001f78e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f791:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f794:	8b 00                	mov    eax,DWORD PTR [eax]
c001f796:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f799:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f7a0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f7a4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f7a7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f7aa:	89 10                	mov    DWORD PTR [eax],edx
c001f7ac:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f7b0:	e9 7a ff ff ff       	jmp    c001f72f <apicOpen()+0xff>
c001f7b5:	90                   	nop
c001f7b6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f7b9:	c9                   	leave  
c001f7ba:	c3                   	ret    
c001f7bb:	90                   	nop

c001f7bc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f7bc:	55                   	push   ebp
c001f7bd:	89 e5                	mov    ebp,esp
c001f7bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f7c8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f7cb:	72 1d                	jb     c001f7ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7d0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f7d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7d9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f7df:	01 d0                	add    eax,edx
c001f7e1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f7e4:	73 04                	jae    c001f7ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f7e6:	b0 01                	mov    al,0x1
c001f7e8:	eb 02                	jmp    c001f7ec <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f7ea:	b0 00                	mov    al,0x0
c001f7ec:	5d                   	pop    ebp
c001f7ed:	c3                   	ret    

c001f7ee <IOAPIC::read(int)>:
c001f7ee:	55                   	push   ebp
c001f7ef:	89 e5                	mov    ebp,esp
c001f7f1:	83 ec 10             	sub    esp,0x10
c001f7f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f7f7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f7fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f803:	0f b6 d0             	movzx  edx,al
c001f806:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f809:	89 10                	mov    DWORD PTR [eax],edx
c001f80b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f80e:	83 c0 10             	add    eax,0x10
c001f811:	8b 00                	mov    eax,DWORD PTR [eax]
c001f813:	c9                   	leave  
c001f814:	c3                   	ret    
c001f815:	90                   	nop

c001f816 <IOAPIC::open(int, int, void*)>:
c001f816:	55                   	push   ebp
c001f817:	89 e5                	mov    ebp,esp
c001f819:	57                   	push   edi
c001f81a:	56                   	push   esi
c001f81b:	53                   	push   ebx
c001f81c:	83 ec 04             	sub    esp,0x4
c001f81f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f822:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f825:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f82b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f82e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f834:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c001f83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f83e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f847:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f84d:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c001f854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f857:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f860:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f869:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f86f:	0f b6 f0             	movzx  esi,al
c001f872:	89 d0                	mov    eax,edx
c001f874:	ba 00 00 00 00       	mov    edx,0x0
c001f879:	89 c7                	mov    edi,eax
c001f87b:	83 e7 ff             	and    edi,0xffffffff
c001f87e:	89 f9                	mov    ecx,edi
c001f880:	0f b6 da             	movzx  ebx,dl
c001f883:	89 c8                	mov    eax,ecx
c001f885:	89 da                	mov    edx,ebx
c001f887:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f88a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f88d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f891:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f895:	83 e0 00             	and    eax,0x0
c001f898:	09 d0                	or     eax,edx
c001f89a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f89e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f8a1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f8a7:	8d 50 01             	lea    edx,[eax+0x1]
c001f8aa:	88 d1                	mov    cl,dl
c001f8ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f8af:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f8b5:	0f b6 d0             	movzx  edx,al
c001f8b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f8bb:	83 c2 08             	add    edx,0x8
c001f8be:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f8c2:	0f b6 c9             	movzx  ecx,cl
c001f8c5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f8cb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f8cf:	6a 01                	push   0x1
c001f8d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f8d4:	e8 15 ff ff ff       	call   c001f7ee <IOAPIC::read(int)>
c001f8d9:	83 c4 08             	add    esp,0x8
c001f8dc:	c1 f8 10             	sar    eax,0x10
c001f8df:	0f b6 c0             	movzx  eax,al
c001f8e2:	8d 50 01             	lea    edx,[eax+0x1]
c001f8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f8e8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f8ee:	b8 00 00 00 00       	mov    eax,0x0
c001f8f3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f8f6:	5b                   	pop    ebx
c001f8f7:	5e                   	pop    esi
c001f8f8:	5f                   	pop    edi
c001f8f9:	5d                   	pop    ebp
c001f8fa:	c3                   	ret    
c001f8fb:	90                   	nop

c001f8fc <IOAPIC::write(int, int)>:
c001f8fc:	55                   	push   ebp
c001f8fd:	89 e5                	mov    ebp,esp
c001f8ff:	83 ec 10             	sub    esp,0x10
c001f902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f905:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f90b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f90e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f911:	0f b6 d0             	movzx  edx,al
c001f914:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f917:	89 10                	mov    DWORD PTR [eax],edx
c001f919:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f91c:	8d 50 10             	lea    edx,[eax+0x10]
c001f91f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f922:	89 02                	mov    DWORD PTR [edx],eax
c001f924:	90                   	nop
c001f925:	c9                   	leave  
c001f926:	c3                   	ret    
c001f927:	90                   	nop

c001f928 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f928:	55                   	push   ebp
c001f929:	89 e5                	mov    ebp,esp
c001f92b:	53                   	push   ebx
c001f92c:	83 ec 2c             	sub    esp,0x2c
c001f92f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f932:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f935:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f938:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f93b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f93e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f941:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f944:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f947:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f94a:	88 d8                	mov    al,bl
c001f94c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f94f:	88 c8                	mov    al,cl
c001f951:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f954:	88 d0                	mov    al,dl
c001f956:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f959:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f95d:	83 c0 08             	add    eax,0x8
c001f960:	01 c0                	add    eax,eax
c001f962:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f965:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f969:	83 c0 08             	add    eax,0x8
c001f96c:	01 c0                	add    eax,eax
c001f96e:	83 c0 01             	add    eax,0x1
c001f971:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f974:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f977:	50                   	push   eax
c001f978:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f97b:	e8 6e fe ff ff       	call   c001f7ee <IOAPIC::read(int)>
c001f980:	83 c4 08             	add    esp,0x8
c001f983:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f986:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f98d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f990:	c1 e0 18             	shl    eax,0x18
c001f993:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f996:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f999:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f99c:	52                   	push   edx
c001f99d:	50                   	push   eax
c001f99e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f9a1:	e8 56 ff ff ff       	call   c001f8fc <IOAPIC::write(int, int)>
c001f9a6:	83 c4 0c             	add    esp,0xc
c001f9a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f9ac:	50                   	push   eax
c001f9ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f9b0:	e8 39 fe ff ff       	call   c001f7ee <IOAPIC::read(int)>
c001f9b5:	83 c4 08             	add    esp,0x8
c001f9b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f9bb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f9c2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f9c9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f9d0:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f9d4:	85 c0                	test   eax,eax
c001f9d6:	74 09                	je     c001f9e1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f9d8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f9df:	eb 07                	jmp    c001f9e8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f9e1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f9e8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f9ec:	85 c0                	test   eax,eax
c001f9ee:	74 09                	je     c001f9f9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f9f0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f9f7:	eb 07                	jmp    c001fa00 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f9f9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001fa00:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001fa07:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001fa0b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001fa0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001fa11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fa14:	52                   	push   edx
c001fa15:	50                   	push   eax
c001fa16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fa19:	e8 de fe ff ff       	call   c001f8fc <IOAPIC::write(int, int)>
c001fa1e:	83 c4 0c             	add    esp,0xc
c001fa21:	90                   	nop
c001fa22:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001fa25:	c9                   	leave  
c001fa26:	c3                   	ret    
c001fa27:	90                   	nop

c001fa28 <APICTimer::close(int, int, void*)>:
c001fa28:	b8 00 00 00 00       	mov    eax,0x0
c001fa2d:	c3                   	ret    
c001fa2e:	66 90                	xchg   ax,ax

c001fa30 <apicTimerHandler(regs*, void*)>:
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa37:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fa39:	b8 10 27 00 00       	mov    eax,0x2710
c001fa3e:	ba 00 00 00 00       	mov    edx,0x0
c001fa43:	f7 f1                	div    ecx
c001fa45:	83 ec 0c             	sub    esp,0xc
c001fa48:	50                   	push   eax
c001fa49:	e8 1a ad fe ff       	call   c000a768 <timerHandler(unsigned int)>
c001fa4e:	83 c4 10             	add    esp,0x10
c001fa51:	90                   	nop
c001fa52:	83 c4 0c             	add    esp,0xc
c001fa55:	c3                   	ret    
c001fa56:	66 90                	xchg   ax,ax

c001fa58 <APICTimer::open(int, int, void*)>:
c001fa58:	83 ec 0c             	sub    esp,0xc
c001fa5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa61:	83 c0 24             	add    eax,0x24
c001fa64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa66:	83 ec 08             	sub    esp,0x8
c001fa69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa71:	ff d0                	call   eax
c001fa73:	83 c4 10             	add    esp,0x10
c001fa76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001fa7e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa8c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001fa92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa96:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001fa9c:	83 ec 0c             	sub    esp,0xc
c001fa9f:	51                   	push   ecx
c001faa0:	6a 01                	push   0x1
c001faa2:	68 30 fa 01 c0       	push   0xc001fa30
c001faa7:	52                   	push   edx
c001faa8:	50                   	push   eax
c001faa9:	e8 90 95 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001faae:	83 c4 20             	add    esp,0x20
c001fab1:	89 c2                	mov    edx,eax
c001fab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001fabd:	b8 00 00 00 00       	mov    eax,0x0
c001fac2:	83 c4 0c             	add    esp,0xc
c001fac5:	c3                   	ret    
c001fac6:	66 90                	xchg   ax,ax

c001fac8 <APICTimer::write(int)>:
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	68 14 49 02 c0       	push   0xc0024914
c001fad3:	e8 9a f3 fe ff       	call   c000ee72 <KePanic(char const*)>
c001fad8:	83 c4 10             	add    esp,0x10
c001fadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fae3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fae9:	90                   	nop
c001faea:	83 c4 0c             	add    esp,0xc
c001faed:	c3                   	ret    
c001faee:	66 90                	xchg   ax,ax

c001faf0 <APICTimer::APICTimer()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf7:	83 ec 08             	sub    esp,0x8
c001fafa:	68 24 49 02 c0       	push   0xc0024924
c001faff:	50                   	push   eax
c001fb00:	e8 97 ab fe ff       	call   c000a69c <Timer::Timer(char const*)>
c001fb05:	83 c4 10             	add    esp,0x10
c001fb08:	ba 38 49 02 c0       	mov    edx,0xc0024938
c001fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb11:	89 10                	mov    DWORD PTR [eax],edx
c001fb13:	90                   	nop
c001fb14:	83 c4 0c             	add    esp,0xc
c001fb17:	c3                   	ret    

c001fb18 <PIT::write(int)>:
c001fb18:	83 ec 10             	sub    esp,0x10
c001fb1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001fb23:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fb29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fb2d:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c001fb32:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001fb37:	89 c2                	mov    edx,eax
c001fb39:	c1 fa 1f             	sar    edx,0x1f
c001fb3c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001fb40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb44:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001fb4b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001fb50:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001fb54:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001fb59:	ee                   	out    dx,al
c001fb5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb5e:	0f b6 c0             	movzx  eax,al
c001fb61:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001fb68:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001fb6c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001fb70:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001fb75:	ee                   	out    dx,al
c001fb76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb7a:	c1 f8 08             	sar    eax,0x8
c001fb7d:	0f b6 c0             	movzx  eax,al
c001fb80:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001fb87:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fb8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fb8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001fb94:	ee                   	out    dx,al
c001fb95:	90                   	nop
c001fb96:	83 c4 10             	add    esp,0x10
c001fb99:	c3                   	ret    
c001fb9a:	66 90                	xchg   ax,ax

c001fb9c <pitHandler(regs*, void*)>:
c001fb9c:	83 ec 0c             	sub    esp,0xc
c001fb9f:	8b 0d 24 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e124
c001fba5:	b8 10 27 00 00       	mov    eax,0x2710
c001fbaa:	89 c2                	mov    edx,eax
c001fbac:	c1 fa 1f             	sar    edx,0x1f
c001fbaf:	f7 f9                	idiv   ecx
c001fbb1:	83 ec 0c             	sub    esp,0xc
c001fbb4:	50                   	push   eax
c001fbb5:	e8 ae ab fe ff       	call   c000a768 <timerHandler(unsigned int)>
c001fbba:	83 c4 10             	add    esp,0x10
c001fbbd:	90                   	nop
c001fbbe:	83 c4 0c             	add    esp,0xc
c001fbc1:	c3                   	ret    
c001fbc2:	66 90                	xchg   ax,ax

c001fbc4 <PIT::open(int, int, void*)>:
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbcd:	83 c0 24             	add    eax,0x24
c001fbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd2:	83 ec 08             	sub    esp,0x8
c001fbd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbdd:	ff d0                	call   eax
c001fbdf:	83 c4 10             	add    esp,0x10
c001fbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	6a 00                	push   0x0
c001fbeb:	6a 01                	push   0x1
c001fbed:	68 9c fb 01 c0       	push   0xc001fb9c
c001fbf2:	6a 00                	push   0x0
c001fbf4:	50                   	push   eax
c001fbf5:	e8 44 94 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001fbfa:	83 c4 20             	add    esp,0x20
c001fbfd:	89 c2                	mov    edx,eax
c001fbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc03:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001fc09:	b8 00 00 00 00       	mov    eax,0x0
c001fc0e:	83 c4 0c             	add    esp,0xc
c001fc11:	c3                   	ret    
c001fc12:	66 90                	xchg   ax,ax

c001fc14 <PIT::close(int, int, void*)>:
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001fc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc29:	6a 01                	push   0x1
c001fc2b:	68 9c fb 01 c0       	push   0xc001fb9c
c001fc30:	6a 00                	push   0x0
c001fc32:	50                   	push   eax
c001fc33:	e8 3c 94 fe ff       	call   c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001fc38:	83 c4 10             	add    esp,0x10
c001fc3b:	b8 00 00 00 00       	mov    eax,0x0
c001fc40:	83 c4 0c             	add    esp,0xc
c001fc43:	c3                   	ret    

c001fc44 <PIT::PIT()>:
c001fc44:	83 ec 0c             	sub    esp,0xc
c001fc47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4b:	83 ec 08             	sub    esp,0x8
c001fc4e:	68 60 49 02 c0       	push   0xc0024960
c001fc53:	50                   	push   eax
c001fc54:	e8 43 aa fe ff       	call   c000a69c <Timer::Timer(char const*)>
c001fc59:	83 c4 10             	add    esp,0x10
c001fc5c:	ba 88 49 02 c0       	mov    edx,0xc0024988
c001fc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc65:	89 10                	mov    DWORD PTR [eax],edx
c001fc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fc71:	0f b6 d0             	movzx  edx,al
c001fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc78:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001fc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fc89:	0f b6 d0             	movzx  edx,al
c001fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc90:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001fc95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fc9f:	8d 50 01             	lea    edx,[eax+0x1]
c001fca2:	88 d1                	mov    cl,dl
c001fca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fca8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001fcae:	0f b6 d0             	movzx  edx,al
c001fcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001fcb9:	83 e1 3f             	and    ecx,0x3f
c001fcbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001fcc0:	90                   	nop
c001fcc1:	83 c4 0c             	add    esp,0xc
c001fcc4:	c3                   	ret    
c001fcc5:	66 90                	xchg   ax,ax
c001fcc7:	66 90                	xchg   ax,ax
c001fcc9:	66 90                	xchg   ax,ax
c001fccb:	66 90                	xchg   ax,ax
c001fccd:	66 90                	xchg   ax,ax
c001fccf:	90                   	nop

c001fcd0 <avxDetect>:
c001fcd0:	b8 01 00 00 00       	mov    eax,0x1
c001fcd5:	0f a2                	cpuid  
c001fcd7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001fcdd:	74 15                	je     c001fcf4 <avxDetect.noAVX>
c001fcdf:	b8 01 00 00 00       	mov    eax,0x1
c001fce4:	0f a2                	cpuid  
c001fce6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001fcec:	74 06                	je     c001fcf4 <avxDetect.noAVX>
c001fcee:	b8 01 00 00 00       	mov    eax,0x1
c001fcf3:	c3                   	ret    

c001fcf4 <avxDetect.noAVX>:
c001fcf4:	b8 00 00 00 00       	mov    eax,0x0
c001fcf9:	c3                   	ret    

c001fcfa <avxSave>:
c001fcfa:	53                   	push   ebx
c001fcfb:	52                   	push   edx
c001fcfc:	31 c0                	xor    eax,eax
c001fcfe:	48                   	dec    eax
c001fcff:	89 c2                	mov    edx,eax
c001fd01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fd05:	0f ae 23             	xsave  [ebx]
c001fd08:	5a                   	pop    edx
c001fd09:	5b                   	pop    ebx
c001fd0a:	c3                   	ret    

c001fd0b <avxLoad>:
c001fd0b:	53                   	push   ebx
c001fd0c:	52                   	push   edx
c001fd0d:	31 c0                	xor    eax,eax
c001fd0f:	48                   	dec    eax
c001fd10:	89 c2                	mov    edx,eax
c001fd12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fd16:	0f ae 2b             	xrstor [ebx]
c001fd19:	5a                   	pop    edx
c001fd1a:	5b                   	pop    ebx
c001fd1b:	c3                   	ret    

c001fd1c <avxInit>:
c001fd1c:	e8 47 03 00 00       	call   c0020068 <sseInit>
c001fd21:	50                   	push   eax
c001fd22:	51                   	push   ecx
c001fd23:	0f 20 e0             	mov    eax,cr4
c001fd26:	0d 00 00 04 00       	or     eax,0x40000
c001fd2b:	0f 22 e0             	mov    cr4,eax
c001fd2e:	31 c9                	xor    ecx,ecx
c001fd30:	0f 01 d0             	xgetbv 
c001fd33:	0d 07 00 00 00       	or     eax,0x7
c001fd38:	0f 01 d1             	xsetbv 
c001fd3b:	59                   	pop    ecx
c001fd3c:	58                   	pop    eax
c001fd3d:	c3                   	ret    

c001fd3e <avxClose>:
c001fd3e:	c3                   	ret    
c001fd3f:	90                   	nop

c001fd40 <isr0>:
c001fd40:	fa                   	cli    
c001fd41:	68 00 00 00 00       	push   0x0
c001fd46:	68 00 00 00 00       	push   0x0
c001fd4b:	e9 56 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd50 <isr1>:
c001fd50:	fa                   	cli    
c001fd51:	6a 00                	push   0x0
c001fd53:	6a 01                	push   0x1
c001fd55:	e9 4c 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd5a <isr2>:
c001fd5a:	fa                   	cli    
c001fd5b:	6a 00                	push   0x0
c001fd5d:	6a 02                	push   0x2
c001fd5f:	e9 42 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd64 <isr3>:
c001fd64:	fa                   	cli    
c001fd65:	6a 00                	push   0x0
c001fd67:	6a 03                	push   0x3
c001fd69:	e9 38 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd6e <isr4>:
c001fd6e:	fa                   	cli    
c001fd6f:	6a 00                	push   0x0
c001fd71:	6a 04                	push   0x4
c001fd73:	e9 2e 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd78 <isr5>:
c001fd78:	fa                   	cli    
c001fd79:	6a 00                	push   0x0
c001fd7b:	6a 05                	push   0x5
c001fd7d:	e9 24 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd82 <isr6>:
c001fd82:	fa                   	cli    
c001fd83:	6a 00                	push   0x0
c001fd85:	6a 06                	push   0x6
c001fd87:	e9 1a 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd8c <isr7>:
c001fd8c:	fa                   	cli    
c001fd8d:	6a 00                	push   0x0
c001fd8f:	6a 07                	push   0x7
c001fd91:	e9 10 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd96 <isr8>:
c001fd96:	fa                   	cli    
c001fd97:	6a 08                	push   0x8
c001fd99:	e9 08 01 00 00       	jmp    c001fea6 <int_common_stub>

c001fd9e <isr9>:
c001fd9e:	fa                   	cli    
c001fd9f:	6a 00                	push   0x0
c001fda1:	6a 09                	push   0x9
c001fda3:	e9 fe 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fda8 <isr10>:
c001fda8:	fa                   	cli    
c001fda9:	6a 0a                	push   0xa
c001fdab:	e9 f6 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fdb0 <isr11>:
c001fdb0:	fa                   	cli    
c001fdb1:	6a 0b                	push   0xb
c001fdb3:	e9 ee 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fdb8 <isr12>:
c001fdb8:	fa                   	cli    
c001fdb9:	6a 0c                	push   0xc
c001fdbb:	e9 e6 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fdc0 <isr13>:
c001fdc0:	fa                   	cli    
c001fdc1:	6a 0d                	push   0xd
c001fdc3:	53                   	push   ebx
c001fdc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fdc8:	81 fb 96 ff 01 c0    	cmp    ebx,0xc001ff96
c001fdce:	5b                   	pop    ebx
c001fdcf:	0f 84 c3 01 00 00    	je     c001ff98 <finishSignal2>
c001fdd5:	e9 cc 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fdda <isr14>:
c001fdda:	fa                   	cli    
c001fddb:	6a 0e                	push   0xe
c001fddd:	e9 c4 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fde2 <isr15>:
c001fde2:	fa                   	cli    
c001fde3:	6a 00                	push   0x0
c001fde5:	6a 0f                	push   0xf
c001fde7:	e9 ba 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fdec <isr16>:
c001fdec:	fa                   	cli    
c001fded:	6a 00                	push   0x0
c001fdef:	6a 10                	push   0x10
c001fdf1:	e9 b0 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fdf6 <isr17>:
c001fdf6:	fa                   	cli    
c001fdf7:	6a 00                	push   0x0
c001fdf9:	6a 11                	push   0x11
c001fdfb:	e9 a6 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe00 <isr18>:
c001fe00:	fa                   	cli    
c001fe01:	6a 00                	push   0x0
c001fe03:	6a 12                	push   0x12
c001fe05:	e9 9c 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe0a <irq3>:
c001fe0a:	fa                   	cli    
c001fe0b:	6a 00                	push   0x0
c001fe0d:	6a 23                	push   0x23
c001fe0f:	e9 92 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe14 <irq4>:
c001fe14:	fa                   	cli    
c001fe15:	6a 00                	push   0x0
c001fe17:	6a 24                	push   0x24
c001fe19:	e9 88 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe1e <irq5>:
c001fe1e:	fa                   	cli    
c001fe1f:	6a 00                	push   0x0
c001fe21:	6a 25                	push   0x25
c001fe23:	e9 7e 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe28 <irq6>:
c001fe28:	fa                   	cli    
c001fe29:	6a 00                	push   0x0
c001fe2b:	6a 26                	push   0x26
c001fe2d:	e9 74 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe32 <irq7>:
c001fe32:	fa                   	cli    
c001fe33:	6a 00                	push   0x0
c001fe35:	6a 27                	push   0x27
c001fe37:	e9 6a 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe3c <irq8>:
c001fe3c:	fa                   	cli    
c001fe3d:	6a 00                	push   0x0
c001fe3f:	6a 28                	push   0x28
c001fe41:	e9 60 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe46 <irq9>:
c001fe46:	fa                   	cli    
c001fe47:	6a 00                	push   0x0
c001fe49:	6a 29                	push   0x29
c001fe4b:	e9 56 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe50 <irq10>:
c001fe50:	fa                   	cli    
c001fe51:	6a 00                	push   0x0
c001fe53:	6a 2a                	push   0x2a
c001fe55:	e9 4c 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe5a <irq11>:
c001fe5a:	fa                   	cli    
c001fe5b:	6a 00                	push   0x0
c001fe5d:	6a 2b                	push   0x2b
c001fe5f:	e9 42 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe64 <irq12>:
c001fe64:	fa                   	cli    
c001fe65:	6a 00                	push   0x0
c001fe67:	6a 2c                	push   0x2c
c001fe69:	e9 38 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe6e <irq13>:
c001fe6e:	fa                   	cli    
c001fe6f:	6a 00                	push   0x0
c001fe71:	6a 2d                	push   0x2d
c001fe73:	e9 2e 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe78 <irq14>:
c001fe78:	fa                   	cli    
c001fe79:	6a 00                	push   0x0
c001fe7b:	6a 2e                	push   0x2e
c001fe7d:	e9 24 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe82 <irq15>:
c001fe82:	fa                   	cli    
c001fe83:	6a 00                	push   0x0
c001fe85:	6a 2f                	push   0x2f
c001fe87:	e9 1a 00 00 00       	jmp    c001fea6 <int_common_stub>

c001fe8c <irq1>:
c001fe8c:	fa                   	cli    
c001fe8d:	6a 00                	push   0x0
c001fe8f:	6a 21                	push   0x21
c001fe91:	eb 13                	jmp    c001fea6 <int_common_stub>

c001fe93 <irq2>:
c001fe93:	fa                   	cli    
c001fe94:	6a 00                	push   0x0
c001fe96:	6a 22                	push   0x22
c001fe98:	eb 0c                	jmp    c001fea6 <int_common_stub>

c001fe9a <isr96>:
c001fe9a:	6a 00                	push   0x0
c001fe9c:	6a 60                	push   0x60
c001fe9e:	fb                   	sti    
c001fe9f:	eb 37                	jmp    c001fed8 <syscall_common_stub>

c001fea1 <irq0>:
c001fea1:	fa                   	cli    
c001fea2:	6a 00                	push   0x0
c001fea4:	6a 20                	push   0x20

c001fea6 <int_common_stub>:
c001fea6:	60                   	pusha  
c001fea7:	1e                   	push   ds
c001fea8:	06                   	push   es
c001fea9:	0f a0                	push   fs
c001feab:	0f a8                	push   gs
c001fead:	66 b8 10 00          	mov    ax,0x10
c001feb1:	66 8e d8             	mov    ds,ax
c001feb4:	66 8e c0             	mov    es,ax
c001feb7:	66 8e e0             	mov    fs,ax
c001feba:	66 8e e8             	mov    gs,ax
c001febd:	54                   	push   esp
c001febe:	fc                   	cld    
c001febf:	e8 cc e0 fe ff       	call   c000df90 <int_handler>
c001fec4:	81 c4 04 00 00 00    	add    esp,0x4
c001feca:	0f a9                	pop    gs
c001fecc:	0f a1                	pop    fs
c001fece:	07                   	pop    es
c001fecf:	1f                   	pop    ds
c001fed0:	61                   	popa   
c001fed1:	81 c4 08 00 00 00    	add    esp,0x8
c001fed7:	cf                   	iret   

c001fed8 <syscall_common_stub>:
c001fed8:	60                   	pusha  
c001fed9:	1e                   	push   ds
c001feda:	06                   	push   es
c001fedb:	0f a0                	push   fs
c001fedd:	0f a8                	push   gs
c001fedf:	66 b8 10 00          	mov    ax,0x10
c001fee3:	66 8e d8             	mov    ds,ax
c001fee6:	66 8e c0             	mov    es,ax
c001fee9:	66 8e e0             	mov    fs,ax
c001feec:	66 8e e8             	mov    gs,ax
c001feef:	54                   	push   esp
c001fef0:	fc                   	cld    
c001fef1:	e8 9a e0 fe ff       	call   c000df90 <int_handler>
c001fef6:	81 c4 04 00 00 00    	add    esp,0x4
c001fefc:	0f a9                	pop    gs
c001fefe:	0f a1                	pop    fs
c001ff00:	07                   	pop    es
c001ff01:	1f                   	pop    ds
c001ff02:	e8 28 02 ff ff       	call   c001012f <KiCheckSignalZ>
c001ff07:	3d 00 00 00 00       	cmp    eax,0x0
c001ff0c:	0f 84 c0 00 00 00    	je     c001ffd2 <skipSignals>
c001ff12:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ff17:	61                   	popa   
c001ff18:	53                   	push   ebx
c001ff19:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ff1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ff22:	5b                   	pop    ebx
c001ff23:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ff28:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ff2b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ff2e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ff31:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ff34:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ff37:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ff3a:	81 c4 08 00 00 00    	add    esp,0x8
c001ff40:	5e                   	pop    esi
c001ff41:	5b                   	pop    ebx
c001ff42:	59                   	pop    ecx
c001ff43:	5a                   	pop    edx
c001ff44:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ff47:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ff4a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ff4d:	52                   	push   edx
c001ff4e:	51                   	push   ecx
c001ff4f:	53                   	push   ebx
c001ff50:	56                   	push   esi
c001ff51:	81 ec 08 00 00 00    	sub    esp,0x8
c001ff57:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ff5a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ff5d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ff60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ff63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ff66:	60                   	pusha  
c001ff67:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ff6d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ff70:	89 e3                	mov    ebx,esp
c001ff72:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ff75:	52                   	push   edx
c001ff76:	68 96 ff 01 c0       	push   0xc001ff96
c001ff7b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ff7e:	89 dc                	mov    esp,ebx
c001ff80:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ff83:	68 23 00 00 00       	push   0x23
c001ff88:	51                   	push   ecx
c001ff89:	68 02 02 00 00       	push   0x202
c001ff8e:	68 1b 00 00 00       	push   0x1b
c001ff93:	ff 36                	push   DWORD PTR [esi]
c001ff95:	cf                   	iret   

c001ff96 <finishSignal>:
c001ff96:	cd 0f                	int    0xf

c001ff98 <finishSignal2>:
c001ff98:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ff9e:	e8 09 02 ff ff       	call   c00101ac <KiFinishSignalZ>
c001ffa3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ffa9:	68 23 00 00 00       	push   0x23
c001ffae:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ffb1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ffb4:	68 1b 00 00 00       	push   0x1b
c001ffb9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ffbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffbf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ffc2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ffc5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ffc8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ffcb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ffce:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ffd1:	cf                   	iret   

c001ffd2 <skipSignals>:
c001ffd2:	61                   	popa   
c001ffd3:	81 c4 08 00 00 00    	add    esp,0x8
c001ffd9:	cf                   	iret   
c001ffda:	90                   	nop
c001ffdb:	90                   	nop

c001ffdc <irq16>:
c001ffdc:	fa                   	cli    
c001ffdd:	6a 00                	push   0x0
c001ffdf:	6a 30                	push   0x30
c001ffe1:	e9 c0 fe ff ff       	jmp    c001fea6 <int_common_stub>

c001ffe6 <irq17>:
c001ffe6:	fa                   	cli    
c001ffe7:	6a 00                	push   0x0
c001ffe9:	6a 31                	push   0x31
c001ffeb:	e9 b6 fe ff ff       	jmp    c001fea6 <int_common_stub>

c001fff0 <irq18>:
c001fff0:	fa                   	cli    
c001fff1:	6a 00                	push   0x0
c001fff3:	6a 32                	push   0x32
c001fff5:	e9 ac fe ff ff       	jmp    c001fea6 <int_common_stub>

c001fffa <irq19>:
c001fffa:	fa                   	cli    
c001fffb:	6a 00                	push   0x0
c001fffd:	6a 33                	push   0x33
c001ffff:	e9 a2 fe ff ff       	jmp    c001fea6 <int_common_stub>

c0020004 <irq20>:
c0020004:	fa                   	cli    
c0020005:	6a 00                	push   0x0
c0020007:	6a 34                	push   0x34
c0020009:	e9 98 fe ff ff       	jmp    c001fea6 <int_common_stub>

c002000e <irq21>:
c002000e:	fa                   	cli    
c002000f:	6a 00                	push   0x0
c0020011:	6a 35                	push   0x35
c0020013:	e9 8e fe ff ff       	jmp    c001fea6 <int_common_stub>

c0020018 <irq22>:
c0020018:	fa                   	cli    
c0020019:	6a 00                	push   0x0
c002001b:	6a 36                	push   0x36
c002001d:	e9 84 fe ff ff       	jmp    c001fea6 <int_common_stub>

c0020022 <irq23>:
c0020022:	fa                   	cli    
c0020023:	6a 00                	push   0x0
c0020025:	6a 37                	push   0x37
c0020027:	e9 7a fe ff ff       	jmp    c001fea6 <int_common_stub>
c002002c:	66 90                	xchg   ax,ax
c002002e:	66 90                	xchg   ax,ax

c0020030 <i386GetRDRAND>:
c0020030:	b9 64 00 00 00       	mov    ecx,0x64

c0020035 <retry>:
c0020035:	0f c7 f0             	rdrand eax
c0020038:	72 05                	jb     c002003f <retry.done>
c002003a:	e2 f9                	loop   c0020035 <retry>

c002003c <retry.fail>:
c002003c:	31 c0                	xor    eax,eax
c002003e:	c3                   	ret    

c002003f <retry.done>:
c002003f:	c3                   	ret    

c0020040 <sseDetect>:
c0020040:	b8 01 00 00 00       	mov    eax,0x1
c0020045:	0f a2                	cpuid  
c0020047:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002004d:	74 06                	je     c0020055 <sseDetect.noSSE>
c002004f:	b8 01 00 00 00       	mov    eax,0x1
c0020054:	c3                   	ret    

c0020055 <sseDetect.noSSE>:
c0020055:	31 c0                	xor    eax,eax
c0020057:	c3                   	ret    

c0020058 <sseSave>:
c0020058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005c:	0f ae 00             	fxsave [eax]
c002005f:	c3                   	ret    

c0020060 <sseLoad>:
c0020060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020064:	0f ae 08             	fxrstor [eax]
c0020067:	c3                   	ret    

c0020068 <sseInit>:
c0020068:	e8 48 00 00 00       	call   c00200b5 <x87Init>
c002006d:	0f 20 e0             	mov    eax,cr4
c0020070:	66 0d 00 06          	or     ax,0x600
c0020074:	0f 22 e0             	mov    cr4,eax
c0020077:	c3                   	ret    

c0020078 <sseClose>:
c0020078:	c3                   	ret    
c0020079:	66 90                	xchg   ax,ax
c002007b:	66 90                	xchg   ax,ax
c002007d:	66 90                	xchg   ax,ax
c002007f:	90                   	nop

c0020080 <value_37F>:
c0020080:	7f 03                	jg     c0020085 <value_37A+0x1>

c0020082 <value_37E>:
c0020082:	7e 03                	jle    c0020087 <x87Detect+0x1>

c0020084 <value_37A>:
c0020084:	7a 03                	jp     c0020089 <x87Detect+0x3>

c0020086 <x87Detect>:
c0020086:	53                   	push   ebx
c0020087:	51                   	push   ecx
c0020088:	52                   	push   edx
c0020089:	b8 01 00 00 00       	mov    eax,0x1
c002008e:	0f a2                	cpuid  
c0020090:	f7 c2 01 00 00 00    	test   edx,0x1
c0020096:	74 06                	je     c002009e <x87Detect.nox87>
c0020098:	b8 01 00 00 00       	mov    eax,0x1
c002009d:	c3                   	ret    

c002009e <x87Detect.nox87>:
c002009e:	b8 00 00 00 00       	mov    eax,0x0
c00200a3:	5a                   	pop    edx
c00200a4:	59                   	pop    ecx
c00200a5:	5b                   	pop    ebx
c00200a6:	c3                   	ret    

c00200a7 <x87Save>:
c00200a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ab:	dd 30                	fnsave [eax]
c00200ad:	c3                   	ret    

c00200ae <x87Load>:
c00200ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b2:	dd 20                	frstor [eax]
c00200b4:	c3                   	ret    

c00200b5 <x87Init>:
c00200b5:	0f 20 c0             	mov    eax,cr0
c00200b8:	66 25 fb ff          	and    ax,0xfffb
c00200bc:	66 0d 22 00          	or     ax,0x22
c00200c0:	0f 22 c0             	mov    cr0,eax
c00200c3:	db e3                	fninit 
c00200c5:	0f 06                	clts   
c00200c7:	d9 2d 84 00 02 c0    	fldcw  WORD PTR ds:0xc0020084
c00200cd:	c3                   	ret    

c00200ce <x87Close>:
c00200ce:	c3                   	ret    
c00200cf:	90                   	nop

c00200d0 <__do_global_ctors_aux>:
c00200d0:	a1 84 10 02 c0       	mov    eax,ds:0xc0021084
c00200d5:	83 f8 ff             	cmp    eax,0xffffffff
c00200d8:	74 1a                	je     c00200f4 <__do_global_ctors_aux+0x24>
c00200da:	55                   	push   ebp
c00200db:	89 e5                	mov    ebp,esp
c00200dd:	53                   	push   ebx
c00200de:	52                   	push   edx
c00200df:	bb 84 10 02 c0       	mov    ebx,0xc0021084
c00200e4:	ff d0                	call   eax
c00200e6:	83 eb 04             	sub    ebx,0x4
c00200e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00200eb:	83 f8 ff             	cmp    eax,0xffffffff
c00200ee:	75 f4                	jne    c00200e4 <__do_global_ctors_aux+0x14>
c00200f0:	58                   	pop    eax
c00200f1:	5b                   	pop    ebx
c00200f2:	5d                   	pop    ebp
c00200f3:	c3                   	ret    
c00200f4:	c3                   	ret    
c00200f5:	66 90                	xchg   ax,ax
c00200f7:	90                   	nop

c00200f8 <__divdi3>:
c00200f8:	55                   	push   ebp
c00200f9:	57                   	push   edi
c00200fa:	56                   	push   esi
c00200fb:	53                   	push   ebx
c00200fc:	83 ec 1c             	sub    esp,0x1c
c00200ff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020103:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020107:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002010a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002010e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020112:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020116:	85 db                	test   ebx,ebx
c0020118:	0f 88 8e 00 00 00    	js     c00201ac <__divdi3+0xb4>
c002011e:	89 dd                	mov    ebp,ebx
c0020120:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020128:	89 d3                	mov    ebx,edx
c002012a:	85 d2                	test   edx,edx
c002012c:	79 0d                	jns    c002013b <__divdi3+0x43>
c002012e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020132:	f7 d8                	neg    eax
c0020134:	83 d2 00             	adc    edx,0x0
c0020137:	f7 da                	neg    edx
c0020139:	89 d3                	mov    ebx,edx
c002013b:	89 c7                	mov    edi,eax
c002013d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020140:	85 db                	test   ebx,ebx
c0020142:	75 48                	jne    c002018c <__divdi3+0x94>
c0020144:	39 ef                	cmp    edi,ebp
c0020146:	76 24                	jbe    c002016c <__divdi3+0x74>
c0020148:	89 ea                	mov    edx,ebp
c002014a:	f7 f7                	div    edi
c002014c:	89 c1                	mov    ecx,eax
c002014e:	31 f6                	xor    esi,esi
c0020150:	89 c8                	mov    eax,ecx
c0020152:	89 f2                	mov    edx,esi
c0020154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020158:	85 c9                	test   ecx,ecx
c002015a:	74 07                	je     c0020163 <__divdi3+0x6b>
c002015c:	f7 d8                	neg    eax
c002015e:	83 d2 00             	adc    edx,0x0
c0020161:	f7 da                	neg    edx
c0020163:	83 c4 1c             	add    esp,0x1c
c0020166:	5b                   	pop    ebx
c0020167:	5e                   	pop    esi
c0020168:	5f                   	pop    edi
c0020169:	5d                   	pop    ebp
c002016a:	c3                   	ret    
c002016b:	90                   	nop
c002016c:	85 ff                	test   edi,edi
c002016e:	75 0b                	jne    c002017b <__divdi3+0x83>
c0020170:	b8 01 00 00 00       	mov    eax,0x1
c0020175:	31 d2                	xor    edx,edx
c0020177:	f7 f3                	div    ebx
c0020179:	89 c7                	mov    edi,eax
c002017b:	31 d2                	xor    edx,edx
c002017d:	89 e8                	mov    eax,ebp
c002017f:	f7 f7                	div    edi
c0020181:	89 c6                	mov    esi,eax
c0020183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020186:	f7 f7                	div    edi
c0020188:	89 c1                	mov    ecx,eax
c002018a:	eb c4                	jmp    c0020150 <__divdi3+0x58>
c002018c:	39 eb                	cmp    ebx,ebp
c002018e:	77 3c                	ja     c00201cc <__divdi3+0xd4>
c0020190:	0f bd f3             	bsr    esi,ebx
c0020193:	83 f6 1f             	xor    esi,0x1f
c0020196:	75 40                	jne    c00201d8 <__divdi3+0xe0>
c0020198:	39 eb                	cmp    ebx,ebp
c002019a:	72 09                	jb     c00201a5 <__divdi3+0xad>
c002019c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002019f:	0f 87 97 00 00 00    	ja     c002023c <__divdi3+0x144>
c00201a5:	b9 01 00 00 00       	mov    ecx,0x1
c00201aa:	eb a4                	jmp    c0020150 <__divdi3+0x58>
c00201ac:	f7 d9                	neg    ecx
c00201ae:	83 d3 00             	adc    ebx,0x0
c00201b1:	f7 db                	neg    ebx
c00201b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00201b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00201ba:	89 dd                	mov    ebp,ebx
c00201bc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00201c4:	e9 5f ff ff ff       	jmp    c0020128 <__divdi3+0x30>
c00201c9:	8d 76 00             	lea    esi,[esi+0x0]
c00201cc:	31 f6                	xor    esi,esi
c00201ce:	31 c9                	xor    ecx,ecx
c00201d0:	e9 7b ff ff ff       	jmp    c0020150 <__divdi3+0x58>
c00201d5:	8d 76 00             	lea    esi,[esi+0x0]
c00201d8:	b8 20 00 00 00       	mov    eax,0x20
c00201dd:	29 f0                	sub    eax,esi
c00201df:	89 f1                	mov    ecx,esi
c00201e1:	d3 e3                	shl    ebx,cl
c00201e3:	89 fa                	mov    edx,edi
c00201e5:	88 c1                	mov    cl,al
c00201e7:	d3 ea                	shr    edx,cl
c00201e9:	09 da                	or     edx,ebx
c00201eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00201ef:	89 f1                	mov    ecx,esi
c00201f1:	d3 e7                	shl    edi,cl
c00201f3:	89 eb                	mov    ebx,ebp
c00201f5:	88 c1                	mov    cl,al
c00201f7:	d3 eb                	shr    ebx,cl
c00201f9:	89 f1                	mov    ecx,esi
c00201fb:	d3 e5                	shl    ebp,cl
c00201fd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020200:	88 c1                	mov    cl,al
c0020202:	d3 ea                	shr    edx,cl
c0020204:	09 d5                	or     ebp,edx
c0020206:	89 e8                	mov    eax,ebp
c0020208:	89 da                	mov    edx,ebx
c002020a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002020e:	89 d3                	mov    ebx,edx
c0020210:	89 c5                	mov    ebp,eax
c0020212:	f7 e7                	mul    edi
c0020214:	39 d3                	cmp    ebx,edx
c0020216:	72 18                	jb     c0020230 <__divdi3+0x138>
c0020218:	74 0a                	je     c0020224 <__divdi3+0x12c>
c002021a:	89 e9                	mov    ecx,ebp
c002021c:	31 f6                	xor    esi,esi
c002021e:	e9 2d ff ff ff       	jmp    c0020150 <__divdi3+0x58>
c0020223:	90                   	nop
c0020224:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020227:	89 f1                	mov    ecx,esi
c0020229:	d3 e7                	shl    edi,cl
c002022b:	39 c7                	cmp    edi,eax
c002022d:	73 eb                	jae    c002021a <__divdi3+0x122>
c002022f:	90                   	nop
c0020230:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020233:	31 f6                	xor    esi,esi
c0020235:	e9 16 ff ff ff       	jmp    c0020150 <__divdi3+0x58>
c002023a:	66 90                	xchg   ax,ax
c002023c:	31 c9                	xor    ecx,ecx
c002023e:	e9 0d ff ff ff       	jmp    c0020150 <__divdi3+0x58>
c0020243:	90                   	nop

c0020244 <__moddi3>:
c0020244:	55                   	push   ebp
c0020245:	57                   	push   edi
c0020246:	56                   	push   esi
c0020247:	53                   	push   ebx
c0020248:	83 ec 2c             	sub    esp,0x2c
c002024b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002024f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020253:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020257:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002025b:	85 db                	test   ebx,ebx
c002025d:	0f 88 85 00 00 00    	js     c00202e8 <__moddi3+0xa4>
c0020263:	89 de                	mov    esi,ebx
c0020265:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002026d:	89 d7                	mov    edi,edx
c002026f:	85 d2                	test   edx,edx
c0020271:	79 09                	jns    c002027c <__moddi3+0x38>
c0020273:	f7 d8                	neg    eax
c0020275:	83 d2 00             	adc    edx,0x0
c0020278:	f7 da                	neg    edx
c002027a:	89 d7                	mov    edi,edx
c002027c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020280:	89 cd                	mov    ebp,ecx
c0020282:	85 ff                	test   edi,edi
c0020284:	75 52                	jne    c00202d8 <__moddi3+0x94>
c0020286:	89 c3                	mov    ebx,eax
c0020288:	39 f0                	cmp    eax,esi
c002028a:	76 24                	jbe    c00202b0 <__moddi3+0x6c>
c002028c:	89 c8                	mov    eax,ecx
c002028e:	89 f2                	mov    edx,esi
c0020290:	f7 f3                	div    ebx
c0020292:	89 d6                	mov    esi,edx
c0020294:	89 f0                	mov    eax,esi
c0020296:	31 d2                	xor    edx,edx
c0020298:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002029c:	85 c9                	test   ecx,ecx
c002029e:	74 07                	je     c00202a7 <__moddi3+0x63>
c00202a0:	f7 d8                	neg    eax
c00202a2:	83 d2 00             	adc    edx,0x0
c00202a5:	f7 da                	neg    edx
c00202a7:	83 c4 2c             	add    esp,0x2c
c00202aa:	5b                   	pop    ebx
c00202ab:	5e                   	pop    esi
c00202ac:	5f                   	pop    edi
c00202ad:	5d                   	pop    ebp
c00202ae:	c3                   	ret    
c00202af:	90                   	nop
c00202b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00202b4:	85 db                	test   ebx,ebx
c00202b6:	75 0d                	jne    c00202c5 <__moddi3+0x81>
c00202b8:	b8 01 00 00 00       	mov    eax,0x1
c00202bd:	31 d2                	xor    edx,edx
c00202bf:	f7 f7                	div    edi
c00202c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202c5:	89 f0                	mov    eax,esi
c00202c7:	31 d2                	xor    edx,edx
c00202c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00202cd:	f7 f7                	div    edi
c00202cf:	89 e8                	mov    eax,ebp
c00202d1:	f7 f7                	div    edi
c00202d3:	89 d6                	mov    esi,edx
c00202d5:	eb bd                	jmp    c0020294 <__moddi3+0x50>
c00202d7:	90                   	nop
c00202d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00202dc:	39 f7                	cmp    edi,esi
c00202de:	76 20                	jbe    c0020300 <__moddi3+0xbc>
c00202e0:	89 c8                	mov    eax,ecx
c00202e2:	89 f2                	mov    edx,esi
c00202e4:	eb b2                	jmp    c0020298 <__moddi3+0x54>
c00202e6:	66 90                	xchg   ax,ax
c00202e8:	f7 d9                	neg    ecx
c00202ea:	83 d3 00             	adc    ebx,0x0
c00202ed:	f7 db                	neg    ebx
c00202ef:	89 de                	mov    esi,ebx
c00202f1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00202f9:	e9 6f ff ff ff       	jmp    c002026d <__moddi3+0x29>
c00202fe:	66 90                	xchg   ax,ax
c0020300:	0f bd c7             	bsr    eax,edi
c0020303:	83 f0 1f             	xor    eax,0x1f
c0020306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002030a:	75 24                	jne    c0020330 <__moddi3+0xec>
c002030c:	39 f7                	cmp    edi,esi
c002030e:	72 06                	jb     c0020316 <__moddi3+0xd2>
c0020310:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020314:	77 0c                	ja     c0020322 <__moddi3+0xde>
c0020316:	89 e9                	mov    ecx,ebp
c0020318:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002031c:	19 fe                	sbb    esi,edi
c002031e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020322:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020326:	89 f2                	mov    edx,esi
c0020328:	e9 6b ff ff ff       	jmp    c0020298 <__moddi3+0x54>
c002032d:	8d 76 00             	lea    esi,[esi+0x0]
c0020330:	b8 20 00 00 00       	mov    eax,0x20
c0020335:	89 c2                	mov    edx,eax
c0020337:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002033b:	29 da                	sub    edx,ebx
c002033d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020341:	88 d9                	mov    cl,bl
c0020343:	d3 e7                	shl    edi,cl
c0020345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020349:	88 d1                	mov    cl,dl
c002034b:	d3 e8                	shr    eax,cl
c002034d:	09 c7                	or     edi,eax
c002034f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020353:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020357:	89 d8                	mov    eax,ebx
c0020359:	88 d9                	mov    cl,bl
c002035b:	d3 e7                	shl    edi,cl
c002035d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020361:	89 f3                	mov    ebx,esi
c0020363:	88 d1                	mov    cl,dl
c0020365:	d3 eb                	shr    ebx,cl
c0020367:	89 c7                	mov    edi,eax
c0020369:	88 c1                	mov    cl,al
c002036b:	d3 e6                	shl    esi,cl
c002036d:	89 e8                	mov    eax,ebp
c002036f:	88 d1                	mov    cl,dl
c0020371:	d3 e8                	shr    eax,cl
c0020373:	09 f0                	or     eax,esi
c0020375:	89 f9                	mov    ecx,edi
c0020377:	d3 e5                	shl    ebp,cl
c0020379:	89 da                	mov    edx,ebx
c002037b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002037f:	89 d3                	mov    ebx,edx
c0020381:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020385:	89 c6                	mov    esi,eax
c0020387:	89 d1                	mov    ecx,edx
c0020389:	39 d3                	cmp    ebx,edx
c002038b:	72 27                	jb     c00203b4 <__moddi3+0x170>
c002038d:	74 21                	je     c00203b0 <__moddi3+0x16c>
c002038f:	29 f5                	sub    ebp,esi
c0020391:	19 cb                	sbb    ebx,ecx
c0020393:	89 de                	mov    esi,ebx
c0020395:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020399:	d3 e6                	shl    esi,cl
c002039b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002039f:	89 f9                	mov    ecx,edi
c00203a1:	d3 ed                	shr    ebp,cl
c00203a3:	09 ee                	or     esi,ebp
c00203a5:	89 f0                	mov    eax,esi
c00203a7:	d3 eb                	shr    ebx,cl
c00203a9:	89 da                	mov    edx,ebx
c00203ab:	e9 e8 fe ff ff       	jmp    c0020298 <__moddi3+0x54>
c00203b0:	39 c5                	cmp    ebp,eax
c00203b2:	73 db                	jae    c002038f <__moddi3+0x14b>
c00203b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00203b8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00203bc:	89 d1                	mov    ecx,edx
c00203be:	89 c6                	mov    esi,eax
c00203c0:	eb cd                	jmp    c002038f <__moddi3+0x14b>
c00203c2:	66 90                	xchg   ax,ax

c00203c4 <__udivdi3>:
c00203c4:	55                   	push   ebp
c00203c5:	57                   	push   edi
c00203c6:	56                   	push   esi
c00203c7:	53                   	push   ebx
c00203c8:	83 ec 1c             	sub    esp,0x1c
c00203cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00203cf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00203d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00203d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00203db:	85 d2                	test   edx,edx
c00203dd:	75 41                	jne    c0020420 <__udivdi3+0x5c>
c00203df:	39 f7                	cmp    edi,esi
c00203e1:	76 15                	jbe    c00203f8 <__udivdi3+0x34>
c00203e3:	89 e8                	mov    eax,ebp
c00203e5:	89 f2                	mov    edx,esi
c00203e7:	f7 f7                	div    edi
c00203e9:	31 db                	xor    ebx,ebx
c00203eb:	89 da                	mov    edx,ebx
c00203ed:	83 c4 1c             	add    esp,0x1c
c00203f0:	5b                   	pop    ebx
c00203f1:	5e                   	pop    esi
c00203f2:	5f                   	pop    edi
c00203f3:	5d                   	pop    ebp
c00203f4:	c3                   	ret    
c00203f5:	8d 76 00             	lea    esi,[esi+0x0]
c00203f8:	89 f9                	mov    ecx,edi
c00203fa:	85 ff                	test   edi,edi
c00203fc:	75 0b                	jne    c0020409 <__udivdi3+0x45>
c00203fe:	b8 01 00 00 00       	mov    eax,0x1
c0020403:	31 d2                	xor    edx,edx
c0020405:	f7 f7                	div    edi
c0020407:	89 c1                	mov    ecx,eax
c0020409:	31 d2                	xor    edx,edx
c002040b:	89 f0                	mov    eax,esi
c002040d:	f7 f1                	div    ecx
c002040f:	89 c3                	mov    ebx,eax
c0020411:	89 e8                	mov    eax,ebp
c0020413:	f7 f1                	div    ecx
c0020415:	89 da                	mov    edx,ebx
c0020417:	83 c4 1c             	add    esp,0x1c
c002041a:	5b                   	pop    ebx
c002041b:	5e                   	pop    esi
c002041c:	5f                   	pop    edi
c002041d:	5d                   	pop    ebp
c002041e:	c3                   	ret    
c002041f:	90                   	nop
c0020420:	39 f2                	cmp    edx,esi
c0020422:	77 1c                	ja     c0020440 <__udivdi3+0x7c>
c0020424:	0f bd da             	bsr    ebx,edx
c0020427:	83 f3 1f             	xor    ebx,0x1f
c002042a:	75 24                	jne    c0020450 <__udivdi3+0x8c>
c002042c:	39 f2                	cmp    edx,esi
c002042e:	72 08                	jb     c0020438 <__udivdi3+0x74>
c0020430:	39 ef                	cmp    edi,ebp
c0020432:	0f 87 84 00 00 00    	ja     c00204bc <__udivdi3+0xf8>
c0020438:	b8 01 00 00 00       	mov    eax,0x1
c002043d:	eb ac                	jmp    c00203eb <__udivdi3+0x27>
c002043f:	90                   	nop
c0020440:	31 db                	xor    ebx,ebx
c0020442:	31 c0                	xor    eax,eax
c0020444:	89 da                	mov    edx,ebx
c0020446:	83 c4 1c             	add    esp,0x1c
c0020449:	5b                   	pop    ebx
c002044a:	5e                   	pop    esi
c002044b:	5f                   	pop    edi
c002044c:	5d                   	pop    ebp
c002044d:	c3                   	ret    
c002044e:	66 90                	xchg   ax,ax
c0020450:	b8 20 00 00 00       	mov    eax,0x20
c0020455:	29 d8                	sub    eax,ebx
c0020457:	88 d9                	mov    cl,bl
c0020459:	d3 e2                	shl    edx,cl
c002045b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002045f:	89 fa                	mov    edx,edi
c0020461:	88 c1                	mov    cl,al
c0020463:	d3 ea                	shr    edx,cl
c0020465:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020469:	09 d1                	or     ecx,edx
c002046b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002046f:	88 d9                	mov    cl,bl
c0020471:	d3 e7                	shl    edi,cl
c0020473:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020477:	89 f7                	mov    edi,esi
c0020479:	88 c1                	mov    cl,al
c002047b:	d3 ef                	shr    edi,cl
c002047d:	88 d9                	mov    cl,bl
c002047f:	d3 e6                	shl    esi,cl
c0020481:	89 ea                	mov    edx,ebp
c0020483:	88 c1                	mov    cl,al
c0020485:	d3 ea                	shr    edx,cl
c0020487:	09 d6                	or     esi,edx
c0020489:	89 f0                	mov    eax,esi
c002048b:	89 fa                	mov    edx,edi
c002048d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020491:	89 d7                	mov    edi,edx
c0020493:	89 c6                	mov    esi,eax
c0020495:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020499:	39 d7                	cmp    edi,edx
c002049b:	72 13                	jb     c00204b0 <__udivdi3+0xec>
c002049d:	74 09                	je     c00204a8 <__udivdi3+0xe4>
c002049f:	89 f0                	mov    eax,esi
c00204a1:	31 db                	xor    ebx,ebx
c00204a3:	e9 43 ff ff ff       	jmp    c00203eb <__udivdi3+0x27>
c00204a8:	88 d9                	mov    cl,bl
c00204aa:	d3 e5                	shl    ebp,cl
c00204ac:	39 c5                	cmp    ebp,eax
c00204ae:	73 ef                	jae    c002049f <__udivdi3+0xdb>
c00204b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00204b3:	31 db                	xor    ebx,ebx
c00204b5:	e9 31 ff ff ff       	jmp    c00203eb <__udivdi3+0x27>
c00204ba:	66 90                	xchg   ax,ax
c00204bc:	31 c0                	xor    eax,eax
c00204be:	e9 28 ff ff ff       	jmp    c00203eb <__udivdi3+0x27>
c00204c3:	90                   	nop

c00204c4 <__umoddi3>:
c00204c4:	55                   	push   ebp
c00204c5:	57                   	push   edi
c00204c6:	56                   	push   esi
c00204c7:	53                   	push   ebx
c00204c8:	83 ec 1c             	sub    esp,0x1c
c00204cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00204cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00204d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00204d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00204db:	89 da                	mov    edx,ebx
c00204dd:	85 c0                	test   eax,eax
c00204df:	75 37                	jne    c0020518 <__umoddi3+0x54>
c00204e1:	39 df                	cmp    edi,ebx
c00204e3:	76 13                	jbe    c00204f8 <__umoddi3+0x34>
c00204e5:	89 f0                	mov    eax,esi
c00204e7:	f7 f7                	div    edi
c00204e9:	89 d0                	mov    eax,edx
c00204eb:	31 d2                	xor    edx,edx
c00204ed:	83 c4 1c             	add    esp,0x1c
c00204f0:	5b                   	pop    ebx
c00204f1:	5e                   	pop    esi
c00204f2:	5f                   	pop    edi
c00204f3:	5d                   	pop    ebp
c00204f4:	c3                   	ret    
c00204f5:	8d 76 00             	lea    esi,[esi+0x0]
c00204f8:	89 fd                	mov    ebp,edi
c00204fa:	85 ff                	test   edi,edi
c00204fc:	75 0b                	jne    c0020509 <__umoddi3+0x45>
c00204fe:	b8 01 00 00 00       	mov    eax,0x1
c0020503:	31 d2                	xor    edx,edx
c0020505:	f7 f7                	div    edi
c0020507:	89 c5                	mov    ebp,eax
c0020509:	89 d8                	mov    eax,ebx
c002050b:	31 d2                	xor    edx,edx
c002050d:	f7 f5                	div    ebp
c002050f:	89 f0                	mov    eax,esi
c0020511:	f7 f5                	div    ebp
c0020513:	89 d0                	mov    eax,edx
c0020515:	eb d4                	jmp    c00204eb <__umoddi3+0x27>
c0020517:	90                   	nop
c0020518:	89 f1                	mov    ecx,esi
c002051a:	39 d8                	cmp    eax,ebx
c002051c:	76 0a                	jbe    c0020528 <__umoddi3+0x64>
c002051e:	89 f0                	mov    eax,esi
c0020520:	83 c4 1c             	add    esp,0x1c
c0020523:	5b                   	pop    ebx
c0020524:	5e                   	pop    esi
c0020525:	5f                   	pop    edi
c0020526:	5d                   	pop    ebp
c0020527:	c3                   	ret    
c0020528:	0f bd e8             	bsr    ebp,eax
c002052b:	83 f5 1f             	xor    ebp,0x1f
c002052e:	75 1c                	jne    c002054c <__umoddi3+0x88>
c0020530:	39 d8                	cmp    eax,ebx
c0020532:	72 04                	jb     c0020538 <__umoddi3+0x74>
c0020534:	39 f7                	cmp    edi,esi
c0020536:	77 08                	ja     c0020540 <__umoddi3+0x7c>
c0020538:	89 da                	mov    edx,ebx
c002053a:	29 fe                	sub    esi,edi
c002053c:	19 c2                	sbb    edx,eax
c002053e:	89 f1                	mov    ecx,esi
c0020540:	89 c8                	mov    eax,ecx
c0020542:	83 c4 1c             	add    esp,0x1c
c0020545:	5b                   	pop    ebx
c0020546:	5e                   	pop    esi
c0020547:	5f                   	pop    edi
c0020548:	5d                   	pop    ebp
c0020549:	c3                   	ret    
c002054a:	66 90                	xchg   ax,ax
c002054c:	ba 20 00 00 00       	mov    edx,0x20
c0020551:	29 ea                	sub    edx,ebp
c0020553:	89 e9                	mov    ecx,ebp
c0020555:	d3 e0                	shl    eax,cl
c0020557:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002055b:	89 f8                	mov    eax,edi
c002055d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020561:	88 d1                	mov    cl,dl
c0020563:	d3 e8                	shr    eax,cl
c0020565:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020569:	09 c1                	or     ecx,eax
c002056b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002056f:	89 e9                	mov    ecx,ebp
c0020571:	d3 e7                	shl    edi,cl
c0020573:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020577:	89 d8                	mov    eax,ebx
c0020579:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002057d:	88 d1                	mov    cl,dl
c002057f:	d3 e8                	shr    eax,cl
c0020581:	89 c7                	mov    edi,eax
c0020583:	89 e9                	mov    ecx,ebp
c0020585:	d3 e3                	shl    ebx,cl
c0020587:	89 f0                	mov    eax,esi
c0020589:	88 d1                	mov    cl,dl
c002058b:	d3 e8                	shr    eax,cl
c002058d:	09 d8                	or     eax,ebx
c002058f:	89 e9                	mov    ecx,ebp
c0020591:	d3 e6                	shl    esi,cl
c0020593:	89 f3                	mov    ebx,esi
c0020595:	89 fa                	mov    edx,edi
c0020597:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002059b:	89 d1                	mov    ecx,edx
c002059d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00205a1:	89 c6                	mov    esi,eax
c00205a3:	89 d7                	mov    edi,edx
c00205a5:	39 d1                	cmp    ecx,edx
c00205a7:	72 27                	jb     c00205d0 <__umoddi3+0x10c>
c00205a9:	74 21                	je     c00205cc <__umoddi3+0x108>
c00205ab:	89 ca                	mov    edx,ecx
c00205ad:	29 f3                	sub    ebx,esi
c00205af:	19 fa                	sbb    edx,edi
c00205b1:	89 d0                	mov    eax,edx
c00205b3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00205b7:	d3 e0                	shl    eax,cl
c00205b9:	89 e9                	mov    ecx,ebp
c00205bb:	d3 eb                	shr    ebx,cl
c00205bd:	09 d8                	or     eax,ebx
c00205bf:	d3 ea                	shr    edx,cl
c00205c1:	83 c4 1c             	add    esp,0x1c
c00205c4:	5b                   	pop    ebx
c00205c5:	5e                   	pop    esi
c00205c6:	5f                   	pop    edi
c00205c7:	5d                   	pop    ebp
c00205c8:	c3                   	ret    
c00205c9:	8d 76 00             	lea    esi,[esi+0x0]
c00205cc:	39 c3                	cmp    ebx,eax
c00205ce:	73 db                	jae    c00205ab <__umoddi3+0xe7>
c00205d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00205d4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00205d8:	89 d7                	mov    edi,edx
c00205da:	89 c6                	mov    esi,eax
c00205dc:	eb cd                	jmp    c00205ab <__umoddi3+0xe7>

Disassembly of section .init:

c00205de <_init>:
c00205de:	55                   	push   ebp
c00205df:	89 e5                	mov    ebp,esp
c00205e1:	e8 0e fb fd ff       	call   c00000f4 <frame_dummy>
c00205e6:	e8 e5 fa ff ff       	call   c00200d0 <__do_global_ctors_aux>
c00205eb:	5d                   	pop    ebp
c00205ec:	c3                   	ret    

Disassembly of section .fini:

c00205ed <_fini>:
c00205ed:	55                   	push   ebp
c00205ee:	89 e5                	mov    ebp,esp
c00205f0:	e8 8f fa fd ff       	call   c0000084 <__do_global_dtors_aux>
c00205f5:	5d                   	pop    ebp
c00205f6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00205f8 <DriverlessDevice::~DriverlessDevice()>:
c00205f8:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c00205fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020601:	89 10                	mov    DWORD PTR [eax],edx
c0020603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020607:	50                   	push   eax
c0020608:	e8 87 89 fe ff       	call   c0008f94 <Device::~Device()>
c002060d:	83 c4 04             	add    esp,0x4
c0020610:	90                   	nop
c0020611:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0020612 <DriverlessDevice::~DriverlessDevice()>:
c0020612:	83 ec 0c             	sub    esp,0xc
c0020615:	83 ec 0c             	sub    esp,0xc
c0020618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002061c:	e8 d7 ff ff ff       	call   c00205f8 <DriverlessDevice::~DriverlessDevice()>
c0020621:	83 c4 10             	add    esp,0x10
c0020624:	83 ec 08             	sub    esp,0x8
c0020627:	68 58 01 00 00       	push   0x158
c002062c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020630:	e8 6b c2 fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020635:	83 c4 10             	add    esp,0x10
c0020638:	83 c4 0c             	add    esp,0xc
c002063b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002063c <LinkedList<Device>::addElement(Device*)>:
c002063c:	83 ec 0c             	sub    esp,0xc
c002063f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020644:	75 10                	jne    c0020656 <LinkedList<Device>::addElement(Device*)+0x1a>
c0020646:	83 ec 0c             	sub    esp,0xc
c0020649:	68 34 1f 02 c0       	push   0xc0021f34
c002064e:	e8 1f e8 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020653:	83 c4 10             	add    esp,0x10
c0020656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002065a:	8b 00                	mov    eax,DWORD PTR [eax]
c002065c:	85 c0                	test   eax,eax
c002065e:	74 3a                	je     c002069a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020667:	85 c0                	test   eax,eax
c0020669:	74 2f                	je     c002069a <LinkedList<Device>::addElement(Device*)+0x5e>
c002066b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002066f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020676:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020680:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020684:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002068e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020698:	eb 68                	jmp    c0020702 <LinkedList<Device>::addElement(Device*)+0xc6>
c002069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069e:	8b 00                	mov    eax,DWORD PTR [eax]
c00206a0:	85 c0                	test   eax,eax
c00206a2:	75 4e                	jne    c00206f2 <LinkedList<Device>::addElement(Device*)+0xb6>
c00206a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00206ab:	85 c0                	test   eax,eax
c00206ad:	75 43                	jne    c00206f2 <LinkedList<Device>::addElement(Device*)+0xb6>
c00206af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206b7:	89 10                	mov    DWORD PTR [eax],edx
c00206b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00206c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00206cb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00206d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00206dc:	85 c0                	test   eax,eax
c00206de:	74 22                	je     c0020702 <LinkedList<Device>::addElement(Device*)+0xc6>
c00206e0:	83 ec 0c             	sub    esp,0xc
c00206e3:	68 56 1f 02 c0       	push   0xc0021f56
c00206e8:	e8 85 e7 fe ff       	call   c000ee72 <KePanic(char const*)>
c00206ed:	83 c4 10             	add    esp,0x10
c00206f0:	eb 10                	jmp    c0020702 <LinkedList<Device>::addElement(Device*)+0xc6>
c00206f2:	83 ec 0c             	sub    esp,0xc
c00206f5:	68 60 1f 02 c0       	push   0xc0021f60
c00206fa:	e8 73 e7 fe ff       	call   c000ee72 <KePanic(char const*)>
c00206ff:	83 c4 10             	add    esp,0x10
c0020702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020706:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020709:	8d 50 01             	lea    edx,[eax+0x1]
c002070c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020710:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020713:	90                   	nop
c0020714:	83 c4 0c             	add    esp,0xc
c0020717:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020718 <LinkedList<Device>::LinkedList()>:
c0020718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002071c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020726:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002072d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020731:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002073c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020746:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002074d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020751:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020758:	90                   	nop
c0020759:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002075c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002075c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020760:	8b 00                	mov    eax,DWORD PTR [eax]
c0020762:	85 c0                	test   eax,eax
c0020764:	75 0e                	jne    c0020774 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002076a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002076d:	85 c0                	test   eax,eax
c002076f:	75 03                	jne    c0020774 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020771:	b0 01                	mov    al,0x1
c0020773:	c3                   	ret    
c0020774:	b0 00                	mov    al,0x0
c0020776:	90                   	nop
c0020777:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020778 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002077c:	8b 00                	mov    eax,DWORD PTR [eax]
c002077e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020780 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020787:	8b 00                	mov    eax,DWORD PTR [eax]
c0020789:	85 c0                	test   eax,eax
c002078b:	75 17                	jne    c00207a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002078d:	83 ec 0c             	sub    esp,0xc
c0020790:	68 d0 21 02 c0       	push   0xc00221d0
c0020795:	e8 d8 e6 fe ff       	call   c000ee72 <KePanic(char const*)>
c002079a:	83 c4 10             	add    esp,0x10
c002079d:	e9 96 00 00 00       	jmp    c0020838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00207a2:	66 90                	xchg   ax,ax
c00207a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00207ae:	85 c0                	test   eax,eax
c00207b0:	0f 95 c0             	setne  al
c00207b3:	0f b6 c0             	movzx  eax,al
c00207b6:	85 c0                	test   eax,eax
c00207b8:	74 12                	je     c00207cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00207ba:	83 ec 0c             	sub    esp,0xc
c00207bd:	68 1b 22 02 c0       	push   0xc002221b
c00207c2:	e8 ab e6 fe ff       	call   c000ee72 <KePanic(char const*)>
c00207c7:	83 c4 10             	add    esp,0x10
c00207ca:	66 90                	xchg   ax,ax
c00207cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00207d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00207d5:	85 c0                	test   eax,eax
c00207d7:	0f 94 c0             	sete   al
c00207da:	0f b6 c0             	movzx  eax,al
c00207dd:	85 c0                	test   eax,eax
c00207df:	74 33                	je     c0020814 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00207e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00207eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00207f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00207fd:	83 f8 01             	cmp    eax,0x1
c0020800:	74 22                	je     c0020824 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020802:	83 ec 0c             	sub    esp,0xc
c0020805:	68 f4 21 02 c0       	push   0xc00221f4
c002080a:	e8 63 e6 fe ff       	call   c000ee72 <KePanic(char const*)>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	eb 10                	jmp    c0020824 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020818:	8b 00                	mov    eax,DWORD PTR [eax]
c002081a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002081d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020821:	89 10                	mov    DWORD PTR [eax],edx
c0020823:	90                   	nop
c0020824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020828:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002082b:	8d 50 ff             	lea    edx,[eax-0x1]
c002082e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020832:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020835:	8d 76 00             	lea    esi,[esi+0x0]
c0020838:	83 c4 0c             	add    esp,0xc
c002083b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002083c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002083c:	83 ec 0c             	sub    esp,0xc
c002083f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020844:	75 12                	jne    c0020858 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0020846:	83 ec 0c             	sub    esp,0xc
c0020849:	68 34 1f 02 c0       	push   0xc0021f34
c002084e:	e8 1f e6 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020853:	83 c4 10             	add    esp,0x10
c0020856:	66 90                	xchg   ax,ax
c0020858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002085c:	8b 00                	mov    eax,DWORD PTR [eax]
c002085e:	85 c0                	test   eax,eax
c0020860:	74 36                	je     c0020898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020869:	85 c0                	test   eax,eax
c002086b:	74 2b                	je     c0020898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002086d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020871:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020878:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002087b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002087f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020883:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002088a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002088d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020894:	eb 6a                	jmp    c0020900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020896:	66 90                	xchg   ax,ax
c0020898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002089c:	8b 00                	mov    eax,DWORD PTR [eax]
c002089e:	85 c0                	test   eax,eax
c00208a0:	75 4e                	jne    c00208f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00208a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208a9:	85 c0                	test   eax,eax
c00208ab:	75 43                	jne    c00208f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00208ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208b5:	89 10                	mov    DWORD PTR [eax],edx
c00208b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00208d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208d7:	85 c0                	test   eax,eax
c00208d9:	74 25                	je     c0020900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00208db:	83 ec 0c             	sub    esp,0xc
c00208de:	68 56 1f 02 c0       	push   0xc0021f56
c00208e3:	e8 8a e5 fe ff       	call   c000ee72 <KePanic(char const*)>
c00208e8:	83 c4 10             	add    esp,0x10
c00208eb:	eb 13                	jmp    c0020900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00208ed:	8d 76 00             	lea    esi,[esi+0x0]
c00208f0:	83 ec 0c             	sub    esp,0xc
c00208f3:	68 60 1f 02 c0       	push   0xc0021f60
c00208f8:	e8 75 e5 fe ff       	call   c000ee72 <KePanic(char const*)>
c00208fd:	83 c4 10             	add    esp,0x10
c0020900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020904:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020907:	8d 50 01             	lea    edx,[eax+0x1]
c002090a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002090e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020911:	90                   	nop
c0020912:	83 c4 0c             	add    esp,0xc
c0020915:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020918 <ACPI::~ACPI()>:
c0020918:	83 ec 0c             	sub    esp,0xc
c002091b:	ba cc 25 02 c0       	mov    edx,0xc00225cc
c0020920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020924:	89 10                	mov    DWORD PTR [eax],edx
c0020926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002092a:	83 ec 0c             	sub    esp,0xc
c002092d:	50                   	push   eax
c002092e:	e8 61 86 fe ff       	call   c0008f94 <Device::~Device()>
c0020933:	83 c4 10             	add    esp,0x10
c0020936:	90                   	nop
c0020937:	83 c4 0c             	add    esp,0xc
c002093a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002093c <ACPI::~ACPI()>:
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	83 ec 0c             	sub    esp,0xc
c0020942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020946:	e8 cd ff ff ff       	call   c0020918 <ACPI::~ACPI()>
c002094b:	83 c4 10             	add    esp,0x10
c002094e:	83 ec 08             	sub    esp,0x8
c0020951:	68 64 12 00 00       	push   0x1264
c0020956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002095a:	e8 41 bf fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c002095f:	83 c4 10             	add    esp,0x10
c0020962:	83 c4 0c             	add    esp,0xc
c0020965:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020968 <LinkedList<Device>::~LinkedList()>:
c0020968:	90                   	nop
c0020969:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002096c <LinkedList<Device>::isEmpty()>:
c002096c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020970:	8b 00                	mov    eax,DWORD PTR [eax]
c0020972:	85 c0                	test   eax,eax
c0020974:	75 0e                	jne    c0020984 <LinkedList<Device>::isEmpty()+0x18>
c0020976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002097a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002097d:	85 c0                	test   eax,eax
c002097f:	75 03                	jne    c0020984 <LinkedList<Device>::isEmpty()+0x18>
c0020981:	b0 01                	mov    al,0x1
c0020983:	c3                   	ret    
c0020984:	b0 00                	mov    al,0x0
c0020986:	90                   	nop
c0020987:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020988 <LinkedList<Device>::getFirstElement()>:
c0020988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002098c:	8b 00                	mov    eax,DWORD PTR [eax]
c002098e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020990 <LinkedList<Device>::removeFirst()>:
c0020990:	83 ec 0c             	sub    esp,0xc
c0020993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020997:	8b 00                	mov    eax,DWORD PTR [eax]
c0020999:	85 c0                	test   eax,eax
c002099b:	75 17                	jne    c00209b4 <LinkedList<Device>::removeFirst()+0x24>
c002099d:	83 ec 0c             	sub    esp,0xc
c00209a0:	68 d0 21 02 c0       	push   0xc00221d0
c00209a5:	e8 c8 e4 fe ff       	call   c000ee72 <KePanic(char const*)>
c00209aa:	83 c4 10             	add    esp,0x10
c00209ad:	e9 92 00 00 00       	jmp    c0020a44 <LinkedList<Device>::removeFirst()+0xb4>
c00209b2:	66 90                	xchg   ax,ax
c00209b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00209bb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00209c1:	85 c0                	test   eax,eax
c00209c3:	74 13                	je     c00209d8 <LinkedList<Device>::removeFirst()+0x48>
c00209c5:	83 ec 0c             	sub    esp,0xc
c00209c8:	68 1b 22 02 c0       	push   0xc002221b
c00209cd:	e8 a0 e4 fe ff       	call   c000ee72 <KePanic(char const*)>
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	8d 76 00             	lea    esi,[esi+0x0]
c00209d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00209de:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00209e4:	85 c0                	test   eax,eax
c00209e6:	75 34                	jne    c0020a1c <LinkedList<Device>::removeFirst()+0x8c>
c00209e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00209f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00209fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020a04:	83 f8 01             	cmp    eax,0x1
c0020a07:	74 27                	je     c0020a30 <LinkedList<Device>::removeFirst()+0xa0>
c0020a09:	83 ec 0c             	sub    esp,0xc
c0020a0c:	68 f4 21 02 c0       	push   0xc00221f4
c0020a11:	e8 5c e4 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020a16:	83 c4 10             	add    esp,0x10
c0020a19:	eb 15                	jmp    c0020a30 <LinkedList<Device>::removeFirst()+0xa0>
c0020a1b:	90                   	nop
c0020a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a22:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a2c:	89 10                	mov    DWORD PTR [eax],edx
c0020a2e:	66 90                	xchg   ax,ax
c0020a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020a37:	8d 50 ff             	lea    edx,[eax-0x1]
c0020a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020a41:	8d 76 00             	lea    esi,[esi+0x0]
c0020a44:	83 c4 0c             	add    esp,0xc
c0020a47:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020a48 <Computer::~Computer()>:
c0020a48:	83 ec 0c             	sub    esp,0xc
c0020a4b:	ba 6c 28 02 c0       	mov    edx,0xc002286c
c0020a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a54:	89 10                	mov    DWORD PTR [eax],edx
c0020a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a5a:	83 ec 0c             	sub    esp,0xc
c0020a5d:	50                   	push   eax
c0020a5e:	e8 31 85 fe ff       	call   c0008f94 <Device::~Device()>
c0020a63:	83 c4 10             	add    esp,0x10
c0020a66:	90                   	nop
c0020a67:	83 c4 0c             	add    esp,0xc
c0020a6a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0020a6c <Computer::~Computer()>:
c0020a6c:	83 ec 0c             	sub    esp,0xc
c0020a6f:	83 ec 0c             	sub    esp,0xc
c0020a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a76:	e8 cd ff ff ff       	call   c0020a48 <Computer::~Computer()>
c0020a7b:	83 c4 10             	add    esp,0x10
c0020a7e:	83 ec 08             	sub    esp,0x8
c0020a81:	68 6c 01 00 00       	push   0x16c
c0020a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a8a:	e8 11 be fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020a8f:	83 c4 10             	add    esp,0x10
c0020a92:	83 c4 0c             	add    esp,0xc
c0020a95:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020a96 <idleCommon()>:
c0020a96:	83 ec 0c             	sub    esp,0xc
c0020a99:	fa                   	cli    
c0020a9a:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0020aa0:	e8 eb 4f ff ff       	call   c0015a90 <schedule()>
c0020aa5:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0020aac:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0020ab3:	75 01                	jne    c0020ab6 <idleCommon()+0x20>
c0020ab5:	fb                   	sti    
c0020ab6:	83 c4 0c             	add    esp,0xc
c0020ab9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0020aba <LinkedList<UnixFile>::~LinkedList()>:
c0020aba:	90                   	nop
c0020abb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0020abc <LinkedList<UnixFile>::LinkedList()>:
c0020abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ac0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ae0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020aea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020af5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020afc:	90                   	nop
c0020afd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0020afe <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0020afe:	83 ec 0c             	sub    esp,0xc
c0020b01:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020b06:	75 10                	jne    c0020b18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020b08:	83 ec 0c             	sub    esp,0xc
c0020b0b:	68 34 1f 02 c0       	push   0xc0021f34
c0020b10:	e8 5d e3 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b1e:	85 c0                	test   eax,eax
c0020b20:	74 34                	je     c0020b56 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b29:	85 c0                	test   eax,eax
c0020b2b:	74 29                	je     c0020b56 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b38:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020b54:	eb 65                	jmp    c0020bbb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b5c:	85 c0                	test   eax,eax
c0020b5e:	75 4b                	jne    c0020bab <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b67:	85 c0                	test   eax,eax
c0020b69:	75 40                	jne    c0020bab <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b73:	89 10                	mov    DWORD PTR [eax],edx
c0020b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020b95:	85 c0                	test   eax,eax
c0020b97:	74 22                	je     c0020bbb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020b99:	83 ec 0c             	sub    esp,0xc
c0020b9c:	68 56 1f 02 c0       	push   0xc0021f56
c0020ba1:	e8 cc e2 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020ba6:	83 c4 10             	add    esp,0x10
c0020ba9:	eb 10                	jmp    c0020bbb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020bab:	83 ec 0c             	sub    esp,0xc
c0020bae:	68 60 1f 02 c0       	push   0xc0021f60
c0020bb3:	e8 ba e2 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020bb8:	83 c4 10             	add    esp,0x10
c0020bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020bc2:	8d 50 01             	lea    edx,[eax+0x1]
c0020bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bc9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020bcc:	90                   	nop
c0020bcd:	83 c4 0c             	add    esp,0xc
c0020bd0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020bd2 <LinkedList<UnixFile>::getFirstElement()>:
c0020bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bd8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0020bda <LinkedList<UnixFile>::removeFirst()>:
c0020bda:	83 ec 0c             	sub    esp,0xc
c0020bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0020be3:	85 c0                	test   eax,eax
c0020be5:	75 12                	jne    c0020bf9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020be7:	83 ec 0c             	sub    esp,0xc
c0020bea:	68 d0 21 02 c0       	push   0xc00221d0
c0020bef:	e8 7e e2 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020bf4:	83 c4 10             	add    esp,0x10
c0020bf7:	eb 7e                	jmp    c0020c77 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020c00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020c03:	85 c0                	test   eax,eax
c0020c05:	74 10                	je     c0020c17 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020c07:	83 ec 0c             	sub    esp,0xc
c0020c0a:	68 1b 22 02 c0       	push   0xc002221b
c0020c0f:	e8 5e e2 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020c14:	83 c4 10             	add    esp,0x10
c0020c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020c20:	85 c0                	test   eax,eax
c0020c22:	75 33                	jne    c0020c57 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020c40:	83 f8 01             	cmp    eax,0x1
c0020c43:	74 21                	je     c0020c66 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020c45:	83 ec 0c             	sub    esp,0xc
c0020c48:	68 f4 21 02 c0       	push   0xc00221f4
c0020c4d:	e8 20 e2 fe ff       	call   c000ee72 <KePanic(char const*)>
c0020c52:	83 c4 10             	add    esp,0x10
c0020c55:	eb 0f                	jmp    c0020c66 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c5d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c64:	89 10                	mov    DWORD PTR [eax],edx
c0020c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020c6d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c74:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020c77:	83 c4 0c             	add    esp,0xc
c0020c7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0020c7c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0020c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020c83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020c84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c88:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020c8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020c8c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020c8c:	90                   	nop
c0020c8d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020c90 <ThreadControlBlock::ThreadControlBlock()>:
c0020c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c94:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020c9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c9f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020caa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cb5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cc0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020cc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ccb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020ccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cd3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020cd7:	90                   	nop
c0020cd8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020cdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ce0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cf5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020d11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d15:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020d1c:	90                   	nop
c0020d1d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0020d1e <CPU::~CPU()>:
c0020d1e:	83 ec 0c             	sub    esp,0xc
c0020d21:	ba 78 3e 02 c0       	mov    edx,0xc0023e78
c0020d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d2a:	89 10                	mov    DWORD PTR [eax],edx
c0020d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d30:	83 ec 0c             	sub    esp,0xc
c0020d33:	50                   	push   eax
c0020d34:	e8 5b 82 fe ff       	call   c0008f94 <Device::~Device()>
c0020d39:	83 c4 10             	add    esp,0x10
c0020d3c:	90                   	nop
c0020d3d:	83 c4 0c             	add    esp,0xc
c0020d40:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020d42 <CPU::~CPU()>:
c0020d42:	83 ec 0c             	sub    esp,0xc
c0020d45:	83 ec 0c             	sub    esp,0xc
c0020d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d4c:	e8 cd ff ff ff       	call   c0020d1e <CPU::~CPU()>
c0020d51:	83 c4 10             	add    esp,0x10
c0020d54:	83 ec 08             	sub    esp,0x8
c0020d57:	68 78 11 00 00       	push   0x1178
c0020d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d60:	e8 3b bb fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020d65:	83 c4 10             	add    esp,0x10
c0020d68:	83 c4 0c             	add    esp,0xc
c0020d6b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020d6c <PCI::~PCI()>:
c0020d6c:	83 ec 0c             	sub    esp,0xc
c0020d6f:	ba dc 43 02 c0       	mov    edx,0xc00243dc
c0020d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d78:	89 10                	mov    DWORD PTR [eax],edx
c0020d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d7e:	83 ec 0c             	sub    esp,0xc
c0020d81:	50                   	push   eax
c0020d82:	e8 bd 7b fe ff       	call   c0008944 <Bus::~Bus()>
c0020d87:	83 c4 10             	add    esp,0x10
c0020d8a:	90                   	nop
c0020d8b:	83 c4 0c             	add    esp,0xc
c0020d8e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020d90 <PCI::~PCI()>:
c0020d90:	83 ec 0c             	sub    esp,0xc
c0020d93:	83 ec 0c             	sub    esp,0xc
c0020d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d9a:	e8 cd ff ff ff       	call   c0020d6c <PCI::~PCI()>
c0020d9f:	83 c4 10             	add    esp,0x10
c0020da2:	83 ec 08             	sub    esp,0x8
c0020da5:	68 5c 01 00 00       	push   0x15c
c0020daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dae:	e8 ed ba fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	83 c4 0c             	add    esp,0xc
c0020db9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020dba <IDE::~IDE()>:
c0020dba:	83 ec 0c             	sub    esp,0xc
c0020dbd:	ba 2c 45 02 c0       	mov    edx,0xc002452c
c0020dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc6:	89 10                	mov    DWORD PTR [eax],edx
c0020dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dcc:	83 ec 0c             	sub    esp,0xc
c0020dcf:	50                   	push   eax
c0020dd0:	e8 4f 86 fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0020dd5:	83 c4 10             	add    esp,0x10
c0020dd8:	90                   	nop
c0020dd9:	83 c4 0c             	add    esp,0xc
c0020ddc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020dde <IDE::~IDE()>:
c0020dde:	83 ec 0c             	sub    esp,0xc
c0020de1:	83 ec 0c             	sub    esp,0xc
c0020de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020de8:	e8 cd ff ff ff       	call   c0020dba <IDE::~IDE()>
c0020ded:	83 c4 10             	add    esp,0x10
c0020df0:	83 ec 08             	sub    esp,0x8
c0020df3:	68 70 02 00 00       	push   0x270
c0020df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dfc:	e8 9f ba fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020e01:	83 c4 10             	add    esp,0x10
c0020e04:	83 c4 0c             	add    esp,0xc
c0020e07:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020e08 <SATABus::~SATABus()>:
c0020e08:	83 ec 0c             	sub    esp,0xc
c0020e0b:	ba 7c 45 02 c0       	mov    edx,0xc002457c
c0020e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e14:	89 10                	mov    DWORD PTR [eax],edx
c0020e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e1a:	83 ec 0c             	sub    esp,0xc
c0020e1d:	50                   	push   eax
c0020e1e:	e8 01 86 fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0020e23:	83 c4 10             	add    esp,0x10
c0020e26:	90                   	nop
c0020e27:	83 c4 0c             	add    esp,0xc
c0020e2a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020e2c <SATABus::~SATABus()>:
c0020e2c:	83 ec 0c             	sub    esp,0xc
c0020e2f:	83 ec 0c             	sub    esp,0xc
c0020e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e36:	e8 cd ff ff ff       	call   c0020e08 <SATABus::~SATABus()>
c0020e3b:	83 c4 10             	add    esp,0x10
c0020e3e:	83 ec 08             	sub    esp,0x8
c0020e41:	68 64 01 00 00       	push   0x164
c0020e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e4a:	e8 51 ba fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020e4f:	83 c4 10             	add    esp,0x10
c0020e52:	83 c4 0c             	add    esp,0xc
c0020e55:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020e56 <ATA::~ATA()>:
c0020e56:	83 ec 0c             	sub    esp,0xc
c0020e59:	ba 64 46 02 c0       	mov    edx,0xc0024664
c0020e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e62:	89 10                	mov    DWORD PTR [eax],edx
c0020e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e68:	83 ec 0c             	sub    esp,0xc
c0020e6b:	50                   	push   eax
c0020e6c:	e8 95 86 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020e71:	83 c4 10             	add    esp,0x10
c0020e74:	90                   	nop
c0020e75:	83 c4 0c             	add    esp,0xc
c0020e78:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020e7a <ATA::~ATA()>:
c0020e7a:	83 ec 0c             	sub    esp,0xc
c0020e7d:	83 ec 0c             	sub    esp,0xc
c0020e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e84:	e8 cd ff ff ff       	call   c0020e56 <ATA::~ATA()>
c0020e89:	83 c4 10             	add    esp,0x10
c0020e8c:	83 ec 08             	sub    esp,0x8
c0020e8f:	68 8c 01 00 00       	push   0x18c
c0020e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e98:	e8 03 ba fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020e9d:	83 c4 10             	add    esp,0x10
c0020ea0:	83 c4 0c             	add    esp,0xc
c0020ea3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020ea4 <ATAPI::~ATAPI()>:
c0020ea4:	83 ec 0c             	sub    esp,0xc
c0020ea7:	ba ac 46 02 c0       	mov    edx,0xc00246ac
c0020eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb0:	89 10                	mov    DWORD PTR [eax],edx
c0020eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb6:	83 ec 0c             	sub    esp,0xc
c0020eb9:	50                   	push   eax
c0020eba:	e8 47 86 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020ebf:	83 c4 10             	add    esp,0x10
c0020ec2:	90                   	nop
c0020ec3:	83 c4 0c             	add    esp,0xc
c0020ec6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020ec8 <ATAPI::~ATAPI()>:
c0020ec8:	83 ec 0c             	sub    esp,0xc
c0020ecb:	83 ec 0c             	sub    esp,0xc
c0020ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ed2:	e8 cd ff ff ff       	call   c0020ea4 <ATAPI::~ATAPI()>
c0020ed7:	83 c4 10             	add    esp,0x10
c0020eda:	83 ec 08             	sub    esp,0x8
c0020edd:	68 84 01 00 00       	push   0x184
c0020ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ee6:	e8 b5 b9 fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020eeb:	83 c4 10             	add    esp,0x10
c0020eee:	83 c4 0c             	add    esp,0xc
c0020ef1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020ef2 <SATA::~SATA()>:
c0020ef2:	83 ec 0c             	sub    esp,0xc
c0020ef5:	ba 6c 47 02 c0       	mov    edx,0xc002476c
c0020efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020efe:	89 10                	mov    DWORD PTR [eax],edx
c0020f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f04:	83 ec 0c             	sub    esp,0xc
c0020f07:	50                   	push   eax
c0020f08:	e8 f9 85 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020f0d:	83 c4 10             	add    esp,0x10
c0020f10:	90                   	nop
c0020f11:	83 c4 0c             	add    esp,0xc
c0020f14:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020f16 <SATA::~SATA()>:
c0020f16:	83 ec 0c             	sub    esp,0xc
c0020f19:	83 ec 0c             	sub    esp,0xc
c0020f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f20:	e8 cd ff ff ff       	call   c0020ef2 <SATA::~SATA()>
c0020f25:	83 c4 10             	add    esp,0x10
c0020f28:	83 ec 08             	sub    esp,0x8
c0020f2b:	68 7c 01 00 00       	push   0x17c
c0020f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f34:	e8 67 b9 fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020f39:	83 c4 10             	add    esp,0x10
c0020f3c:	83 c4 0c             	add    esp,0xc
c0020f3f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020f40 <SATAPI::~SATAPI()>:
c0020f40:	83 ec 0c             	sub    esp,0xc
c0020f43:	ba 90 48 02 c0       	mov    edx,0xc0024890
c0020f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f4c:	89 10                	mov    DWORD PTR [eax],edx
c0020f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f52:	83 ec 0c             	sub    esp,0xc
c0020f55:	50                   	push   eax
c0020f56:	e8 ab 85 fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0020f5b:	83 c4 10             	add    esp,0x10
c0020f5e:	90                   	nop
c0020f5f:	83 c4 0c             	add    esp,0xc
c0020f62:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020f64 <SATAPI::~SATAPI()>:
c0020f64:	83 ec 0c             	sub    esp,0xc
c0020f67:	83 ec 0c             	sub    esp,0xc
c0020f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f6e:	e8 cd ff ff ff       	call   c0020f40 <SATAPI::~SATAPI()>
c0020f73:	83 c4 10             	add    esp,0x10
c0020f76:	83 ec 08             	sub    esp,0x8
c0020f79:	68 84 01 00 00       	push   0x184
c0020f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f82:	e8 19 b9 fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020f87:	83 c4 10             	add    esp,0x10
c0020f8a:	83 c4 0c             	add    esp,0xc
c0020f8d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020f8e <IOAPIC::~IOAPIC()>:
c0020f8e:	83 ec 0c             	sub    esp,0xc
c0020f91:	ba f0 48 02 c0       	mov    edx,0xc00248f0
c0020f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f9a:	89 10                	mov    DWORD PTR [eax],edx
c0020f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	50                   	push   eax
c0020fa4:	e8 eb 7f fe ff       	call   c0008f94 <Device::~Device()>
c0020fa9:	83 c4 10             	add    esp,0x10
c0020fac:	90                   	nop
c0020fad:	83 c4 0c             	add    esp,0xc
c0020fb0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020fb2 <IOAPIC::~IOAPIC()>:
c0020fb2:	83 ec 0c             	sub    esp,0xc
c0020fb5:	83 ec 0c             	sub    esp,0xc
c0020fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fbc:	e8 cd ff ff ff       	call   c0020f8e <IOAPIC::~IOAPIC()>
c0020fc1:	83 c4 10             	add    esp,0x10
c0020fc4:	83 ec 08             	sub    esp,0x8
c0020fc7:	68 68 01 00 00       	push   0x168
c0020fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fd0:	e8 cb b8 fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	83 c4 0c             	add    esp,0xc
c0020fdb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020fdc <APICTimer::~APICTimer()>:
c0020fdc:	83 ec 0c             	sub    esp,0xc
c0020fdf:	ba 38 49 02 c0       	mov    edx,0xc0024938
c0020fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe8:	89 10                	mov    DWORD PTR [eax],edx
c0020fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fee:	83 ec 0c             	sub    esp,0xc
c0020ff1:	50                   	push   eax
c0020ff2:	e8 dd 96 fe ff       	call   c000a6d4 <Timer::~Timer()>
c0020ff7:	83 c4 10             	add    esp,0x10
c0020ffa:	90                   	nop
c0020ffb:	83 c4 0c             	add    esp,0xc
c0020ffe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021000 <APICTimer::~APICTimer()>:
c0021000:	83 ec 0c             	sub    esp,0xc
c0021003:	83 ec 0c             	sub    esp,0xc
c0021006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002100a:	e8 cd ff ff ff       	call   c0020fdc <APICTimer::~APICTimer()>
c002100f:	83 c4 10             	add    esp,0x10
c0021012:	83 ec 08             	sub    esp,0x8
c0021015:	68 60 01 00 00       	push   0x160
c002101a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002101e:	e8 7d b8 fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0021023:	83 c4 10             	add    esp,0x10
c0021026:	83 c4 0c             	add    esp,0xc
c0021029:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002102c <PIT::~PIT()>:
c002102c:	83 ec 0c             	sub    esp,0xc
c002102f:	ba 88 49 02 c0       	mov    edx,0xc0024988
c0021034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021038:	89 10                	mov    DWORD PTR [eax],edx
c002103a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002103e:	83 ec 0c             	sub    esp,0xc
c0021041:	50                   	push   eax
c0021042:	e8 8d 96 fe ff       	call   c000a6d4 <Timer::~Timer()>
c0021047:	83 c4 10             	add    esp,0x10
c002104a:	90                   	nop
c002104b:	83 c4 0c             	add    esp,0xc
c002104e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021050 <PIT::~PIT()>:
c0021050:	83 ec 0c             	sub    esp,0xc
c0021053:	83 ec 0c             	sub    esp,0xc
c0021056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002105a:	e8 cd ff ff ff       	call   c002102c <PIT::~PIT()>
c002105f:	83 c4 10             	add    esp,0x10
c0021062:	83 ec 08             	sub    esp,0x8
c0021065:	68 5c 01 00 00       	push   0x15c
c002106a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002106e:	e8 2d b8 fe ff       	call   c000c8a0 <operator delete(void*, unsigned long)>
c0021073:	83 c4 10             	add    esp,0x10
c0021076:	83 c4 0c             	add    esp,0xc
c0021079:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be 4b 2c 02 c0       	mov    esi,0xc0022c4b
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 67 2c 02 c0       	mov    esi,0xc0022c67
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
