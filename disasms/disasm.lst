
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 6f ff 00 00       	call   c000ff8f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 73 02 c0       	mov    eax,0xc00273e8
c0000025:	3d e8 73 02 c0       	cmp    eax,0xc00273e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 73 02 c0       	push   0xc00273e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 73 02 c0       	mov    eax,0xc00273e8
c0000051:	2d e8 73 02 c0       	sub    eax,0xc00273e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 73 02 c0       	push   0xc00273e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 80 2a 02 c0       	mov    ebx,0xc0022a80
c0000097:	81 eb 7c 2a 02 c0    	sub    ebx,0xc0022a7c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 7c 2a 02 c0       	mov    esi,0xc0022a7c
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 73 02 c0       	push   0xc00273e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 e8 73 02 c0       	push   0xc00273e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 9f 67 01 00       	call   c0016a4c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0c 46 01 00       	call   c00148d1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 7d 67 01 00       	call   c0016a4c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 de 6c 01 00       	call   c0016fcc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 4d 72 01 00       	call   c0017544 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 00 f1 02 c0 	lgdtd  ds:0xc002f100
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 32 f1 00 00       	jmp    c000f4b1 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 2a 02 c0 02 	test   BYTE PTR [edx-0x3ffdd560],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 2a 02 c0 01 	test   BYTE PTR [edx-0x3ffdd560],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 2a 02 c0 08 	test   BYTE PTR [edx-0x3ffdd560],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 2a 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd560],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 2a 02 c0 01 	test   BYTE PTR [edx-0x3ffdd560],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000df7:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 7d ee 00 00       	call   c000fcdd <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 8a ed 00 00       	call   c000fc7f <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 69 ec 00 00       	call   c000fc49 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 64 ec 00 00       	call   c000fc7f <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 10 eb 00 00       	call   c000fc49 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 f6 ea 00 00       	call   c000fc49 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 cc ea 00 00       	call   c000fc49 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 91 02 c0       	mov    eax,0xc0029100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c00012e5:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c0001321:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001326:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c0001334:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c0001385:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013a0:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c000145a:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c0001460:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001467:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000152d:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001533:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c000153a:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 a4 2b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd45c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03e0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 a1 a7 01 00       	jmp    c001c72c <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 20 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03e0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 cb a7 01 00       	jmp    c001c76c <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 20 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03e0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 ec a7 01 00       	jmp    c001c7ac <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 00 2d 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd300]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 00 2d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd300]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba d0 5f 02 c0       	mov    edx,0xc0025fd0
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba bc 2b 02 c0       	mov    edx,0xc0022bbc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 c2 2b 02 c0       	mov    eax,0xc0022bc2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 80 2c 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd380]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 cb 2b 02 c0       	mov    eax,0xc0022bcb
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 00 2d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd300]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 50 2c 02 c0       	mov    eax,0xc0022c50
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 40 2c 02 c0       	mov    ebx,0xc0022c40
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 20 2c 02 c0       	mov    eax,0xc0022c20
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 30 2c 02 c0       	mov    eax,0xc0022c30
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba d2 2b 02 c0       	mov    edx,0xc0022bd2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba de 2b 02 c0       	mov    edx,0xc0022bde
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba f2 2b 02 c0       	mov    edx,0xc0022bf2
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 48 9f 00 00       	call   c000fd5f <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 40 9f 00 00       	call   c000fd6f <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 20 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023020
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 20 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023020
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 20 2e 02 c0       	mov    eax,0xc0022e20
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 20 31 02 c0       	push   0xc0023120
c0006303:	e8 c0 6d 01 00       	call   c001d0c8 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 2e 31 02 c0       	push   0xc002312e
c000633b:	e8 88 6d 01 00       	call   c001d0c8 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 f1 6c 01 00       	call   c001d06c <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 90 02 c0       	mov    eax,0xc0029080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 90 02 c0       	mov    eax,0xc0029020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 9e 02 c0    	mov    ebp,DWORD PTR ds:0xc0029eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 3d 31 02 c0       	push   0xc002313d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c0006746:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000674c:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c0006768:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067e1:	8b 8d 4c 95 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd6ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068d9:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c0006917:	05 40 95 02 c0       	add    eax,0xc0029540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069d6:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 40 31 02 c0       	push   0xc0023140
c00069fa:	e8 c9 66 01 00       	call   c001d0c8 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 dd 66 01 00       	call   c001d0e4 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 45 31 02 c0 	mov    DWORD PTR [esp],0xc0023145
c0006a14:	e8 af 66 01 00       	call   c001d0c8 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a20:	e8 bf 66 01 00       	call   c001d0e4 <iso_kprintfd>
c0006a25:	c7 04 24 4b 31 02 c0 	mov    DWORD PTR [esp],0xc002314b
c0006a2c:	e8 97 66 01 00       	call   c001d0c8 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a38:	e8 a7 66 01 00       	call   c001d0e4 <iso_kprintfd>
c0006a3d:	c7 04 24 51 31 02 c0 	mov    DWORD PTR [esp],0xc0023151
c0006a44:	e8 7f 66 01 00       	call   c001d0c8 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a50:	e8 8f 66 01 00       	call   c001d0e4 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006ab6:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 95 02 c0    	lea    ebp,[eax-0x3ffd6aa8]
c0006b12:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 95 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd6aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 3d 31 02 c0       	push   0xc002313d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006bee:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006bf4:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 95 02 c0       	add    eax,0xc0029550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 5a 31 02 c0       	push   0xc002315a
c0006c19:	e8 aa 64 01 00       	call   c001d0c8 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c4e:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 65 31 02 c0       	push   0xc0023165
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 6c 31 02 c0       	push   0xc002316c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006cec:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d0f:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 73 31 02 c0       	push   0xc0023173
c0006d30:	e8 93 63 01 00       	call   c001d0c8 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 7e 31 02 c0       	push   0xc002317e
c0006d4b:	e8 78 63 01 00       	call   c001d0c8 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 95 02 c0       	push   0xc0029540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d75:	e8 e5 8f 00 00       	call   c000fd5f <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d86:	e8 d4 8f 00 00       	call   c000fd5f <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 bf 8f 00 00       	call   c000fd5f <malloc>
c0006da0:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 a6 8f 00 00       	call   c000fd5f <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006de6:	e8 84 8f 00 00       	call   c000fd6f <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 76 8f 00 00       	call   c000fd6f <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 5c 8f 00 00       	call   c000fd6f <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 47 8f 00 00       	call   c000fd6f <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e35:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 90 31 02 c0       	mov    esi,0xc0023190
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 8f 31 02 c0       	mov    al,ds:0xc002318f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 e7 63 00 00       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 43 63 00 00       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 d8 31 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdce28]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 a0 31 02 c0       	push   0xc00231a0
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 28 33 02 c0       	push   0xc0023328
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 3c 33 02 c0       	push   0xc002333c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 46 33 02 c0       	push   0xc0023346
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 50 33 02 c0       	push   0xc0023350
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 94 34 02 c0       	push   0xc0023494
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 5a 33 02 c0       	push   0xc002335a
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 b4 34 02 c0       	push   0xc00234b4
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 6f 33 02 c0       	push   0xc002336f
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 89 33 02 c0       	push   0xc0023389
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 80 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9680]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 dc 34 02 c0       	push   0xc00234dc
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 94 34 02 c0       	push   0xc0023494
c000722c:	e8 3d 8e 00 00       	call   c001006e <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 24 35 02 c0       	push   0xc0023524
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 24 35 02 c0       	push   0xc0023524
c000725b:	e8 0e 8e 00 00       	call   c001006e <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 94 33 02 c0       	push   0xc0023394
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 94 33 02 c0       	push   0xc0023394
c0007287:	e8 e2 8d 00 00       	call   c001006e <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 b1 33 02 c0       	push   0xc00233b1
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 b1 33 02 c0       	push   0xc00233b1
c00072b3:	e8 b6 8d 00 00       	call   c001006e <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 44 35 02 c0       	push   0xc0023544
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 44 35 02 c0       	push   0xc0023544
c00072df:	e8 8a 8d 00 00       	call   c001006e <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 68 35 02 c0       	push   0xc0023568
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 68 35 02 c0       	push   0xc0023568
c000730b:	e8 5e 8d 00 00       	call   c001006e <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 cd 33 02 c0       	push   0xc00233cd
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 cd 33 02 c0       	push   0xc00233cd
c0007337:	e8 32 8d 00 00       	call   c001006e <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 e9 33 02 c0       	push   0xc00233e9
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 e9 33 02 c0       	push   0xc00233e9
c0007363:	e8 06 8d 00 00       	call   c001006e <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 88 35 02 c0       	push   0xc0023588
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 88 35 02 c0       	push   0xc0023588
c000738f:	e8 da 8c 00 00       	call   c001006e <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 ac 35 02 c0       	push   0xc00235ac
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 ac 35 02 c0       	push   0xc00235ac
c00073bb:	e8 ae 8c 00 00       	call   c001006e <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 3d 89 00 00       	call   c000fd5f <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000742d:	68 cb 35 02 c0       	push   0xc00235cb
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 e9 35 02 c0       	push   0xc00235e9
c0007447:	e8 22 8c 00 00       	call   c001006e <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 03 36 02 c0       	push   0xc0023603
c0007468:	e8 01 8c 00 00       	call   c001006e <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 1d 36 02 c0       	push   0xc002361d
c00074af:	e8 ba 8b 00 00       	call   c001006e <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 37 36 02 c0       	push   0xc0023637
c00074df:	e8 8a 8b 00 00       	call   c001006e <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 32 6f 00 00       	call   c000e463 <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 18 95 00 00       	call   c0010a63 <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 51 36 02 c0       	push   0xc0023651
c0007584:	e8 e5 8a 00 00       	call   c001006e <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 a3 02 c0       	push   0xc002a300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 dc 5b 00 00       	call   c000d245 <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 ea 86 00 00       	call   c000fd5f <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0007680:	68 cb 35 02 c0       	push   0xc00235cb
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 5a 36 02 c0       	push   0xc002365a
c000769a:	e8 cf 89 00 00       	call   c001006e <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 77 36 02 c0       	push   0xc0023677
c00076cb:	e8 9e 89 00 00       	call   c001006e <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 94 36 02 c0       	push   0xc0023694
c0007705:	e8 64 89 00 00       	call   c001006e <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077e8:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 5b 85 00 00       	call   c000fd5f <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000780f:	68 cb 35 02 c0       	push   0xc00235cb
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 af 36 02 c0       	push   0xc00236af
c0007829:	e8 40 88 00 00       	call   c001006e <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 ca 36 02 c0       	push   0xc00236ca
c000785c:	e8 0d 88 00 00       	call   c001006e <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 34 84 00 00       	call   c000fd5f <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 aa 82 00 00       	call   c000fd5f <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be e5 36 02 c0       	mov    esi,0xc00236e5
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 ab b5 00 00       	call   c00132f2 <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 76 56 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 5d b5 00 00       	call   c00132f2 <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 28 56 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba 50 37 02 c0       	mov    edx,0xc0023750
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba 50 37 02 c0       	mov    edx,0xc0023750
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 d2 55 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 0d 7f 00 00       	call   c000fd5f <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 6e 4a 01 00       	call   c001c8c8 <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 f9 7e 00 00       	call   c000fd5f <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 86 59 01 00       	call   c001d7f4 <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 3d 55 02 c0       	push   0xc002553d
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 ee 36 02 c0       	push   0xc00236ee
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 09 37 02 c0       	push   0xc0023709
c0008077:	e8 f2 7f 00 00       	call   c001006e <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 66 b0 00 00       	call   c001310c <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 2f 37 02 c0       	push   0xc002372f
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 64 28 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 5f 24 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 8f 77 00 00       	call   c000fd5f <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 90 aa 00 00       	call   c001310c <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 bc 22 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba f4 37 02 c0       	mov    edx,0xc00237f4
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba f4 37 02 c0       	mov    edx,0xc00237f4
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 06 4a 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00089f8:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 c5 ea 00 00       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 09 21 01 00       	call   c001ab24 <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 75 e9 00 00       	jmp    c00173a0 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 e3 20 01 00       	call   c001ab24 <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 7d ea 00 00       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 bb 20 01 00       	jmp    c001ab24 <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0008a7a:	e8 a1 e5 00 00       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 b9 72 00 00       	call   c000fd5f <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 20 38 02 c0       	push   0xc0023820
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 3f 38 02 c0       	push   0xc002383f
c0008ad3:	e8 96 75 00 00       	call   c001006e <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 55 38 02 c0       	push   0xc0023855
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 35 72 00 00       	call   c000fd5f <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 65 38 02 c0       	push   0xc0023865
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 96 71 00 00       	call   c000fd5f <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 6e 38 02 c0       	push   0xc002386e
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 6e 38 02 c0       	push   0xc002386e
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 6e 38 02 c0       	push   0xc002386e
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 70 38 02 c0       	push   0xc0023870
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 85 38 02 c0       	push   0xc0023885
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 89 38 02 c0       	push   0xc0023889
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 8e 38 02 c0       	push   0xc002388e
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 9c 38 02 c0       	push   0xc002389c
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 a5 38 02 c0       	push   0xc00238a5
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 c3 38 02 c0       	push   0xc00238c3
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 d4 38 02 c0       	push   0xc00238d4
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 e7 38 02 c0       	push   0xc00238e7
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f98:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f9f:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 f4 38 02 c0       	push   0xc00238f4
c0008fba:	e8 7d 44 00 00       	call   c000d43c <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 19 39 02 c0       	push   0xc0023919
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 67 50 00 00       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 27 49 00 00       	call   c000d90e <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 65 45 00 00       	call   c000d55a <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 f4 38 02 c0       	push   0xc00238f4
c0009054:	e8 e3 43 00 00       	call   c000d43c <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 19 39 02 c0       	push   0xc0023919
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 cd 4f 00 00       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 1c 45 00 00       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 bc 44 00 00       	call   c000d55a <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 78 39 02 c0       	mov    edx,0xc0023978
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba 78 39 02 c0       	mov    edx,0xc0023978
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 b6 42 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 40 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6c0]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 2e 39 02 c0       	push   0xc002392e
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 44 87 01 00       	call   c0021db4 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 25 88 01 00       	call   c0021eb4 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 ac 39 02 c0       	push   0xc00239ac
c000994a:	e8 1f 67 00 00       	call   c001006e <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba 50 3a 02 c0       	mov    edx,0xc0023a50
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 65 3a 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 ca 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc00239ca
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 d1 14 01 00       	jmp    c001aefb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 09 16 01 00       	jmp    c001b05d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 dc 62 00 00       	call   c000fd5f <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba 50 3a 02 c0       	mov    edx,0xc0023a50
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 3c 61 00 00       	call   c000fd5f <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 04 3a 02 c0       	push   0xc0023a04
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba 7c 3a 02 c0       	mov    edx,0xc0023a7c
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 ce 82 01 00       	call   c002202c <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 78 83 01 00       	call   c0022108 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba a8 3a 02 c0       	mov    edx,0xc0023aa8
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba a8 3a 02 c0       	mov    edx,0xc0023aa8
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 be 35 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba d4 3a 02 c0       	mov    edx,0xc0023ad4
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 b1 5e 00 00       	call   c000fd5f <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 d3 13 00 00       	call   c000b28c <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba d4 3a 02 c0       	mov    edx,0xc0023ad4
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 dc 34 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	53                   	push   ebx
c0009f18:	83 ec 04             	sub    esp,0x4
c0009f1b:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0009f23:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0009f28:	85 c0                	test   eax,eax
c0009f2a:	75 01                	jne    c0009f2d <startGUI(void*)+0x19>
c0009f2c:	fb                   	sti    
c0009f2d:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009f33:	83 ec 08             	sub    esp,0x8
c0009f36:	6a 01                	push   0x1
c0009f38:	68 04 3b 02 c0       	push   0xc0023b04
c0009f3d:	e8 f6 c7 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	83 ec 08             	sub    esp,0x8
c0009f48:	53                   	push   ebx
c0009f49:	50                   	push   eax
c0009f4a:	e8 3b ca 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009f58:	83 ec 08             	sub    esp,0x8
c0009f5b:	6a 01                	push   0x1
c0009f5d:	68 1e 3b 02 c0       	push   0xc0023b1e
c0009f62:	e8 d1 c7 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c0009f67:	83 c4 10             	add    esp,0x10
c0009f6a:	83 ec 08             	sub    esp,0x8
c0009f6d:	53                   	push   ebx
c0009f6e:	50                   	push   eax
c0009f6f:	e8 16 ca 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	eb fe                	jmp    c0009f77 <startGUI(void*)+0x63>

c0009f79 <startGUIVESA(void*)>:
c0009f79:	55                   	push   ebp
c0009f7a:	89 e5                	mov    ebp,esp
c0009f7c:	53                   	push   ebx
c0009f7d:	83 ec 04             	sub    esp,0x4
c0009f80:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0009f88:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0009f8d:	85 c0                	test   eax,eax
c0009f8f:	75 01                	jne    c0009f92 <startGUIVESA(void*)+0x19>
c0009f91:	fb                   	sti    
c0009f92:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009f98:	83 ec 08             	sub    esp,0x8
c0009f9b:	6a 01                	push   0x1
c0009f9d:	68 3c 3b 02 c0       	push   0xc0023b3c
c0009fa2:	e8 91 c7 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c0009fa7:	83 c4 10             	add    esp,0x10
c0009faa:	83 ec 08             	sub    esp,0x8
c0009fad:	53                   	push   ebx
c0009fae:	50                   	push   eax
c0009faf:	e8 d6 c9 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	6a 01                	push   0x1
c0009fc2:	68 1e 3b 02 c0       	push   0xc0023b1e
c0009fc7:	e8 6c c7 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c0009fcc:	83 c4 10             	add    esp,0x10
c0009fcf:	83 ec 08             	sub    esp,0x8
c0009fd2:	53                   	push   ebx
c0009fd3:	50                   	push   eax
c0009fd4:	e8 b1 c9 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	eb fe                	jmp    c0009fdc <startGUIVESA(void*)+0x63>

c0009fde <sendKeyToTerminal(unsigned char)>:
c0009fde:	55                   	push   ebp
c0009fdf:	89 e5                	mov    ebp,esp
c0009fe1:	83 ec 28             	sub    esp,0x28
c0009fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fe7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fea:	a1 d4 f1 02 c0       	mov    eax,ds:0xc002f1d4
c0009fef:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	52                   	push   edx
c0009ff7:	50                   	push   eax
c0009ff8:	e8 83 8c 00 00       	call   c0012c80 <VgaText::receiveKey(unsigned char)>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a004:	83 f8 0a             	cmp    eax,0xa
c000a007:	74 16                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a009:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a00d:	83 f8 03             	cmp    eax,0x3
c000a010:	74 0d                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a012:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a016:	83 f8 1c             	cmp    eax,0x1c
c000a019:	0f 85 92 00 00 00    	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a01f:	fa                   	cli    
c000a020:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000a025:	83 c0 01             	add    eax,0x1
c000a028:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000a02d:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c000a032:	83 c0 01             	add    eax,0x1
c000a035:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c000a03a:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c000a03f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a042:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c000a04c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a050:	74 1f                	je     c000a071 <sendKeyToTerminal(unsigned char)+0x93>
c000a052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a055:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a05b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a05e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a061:	83 ec 0c             	sub    esp,0xc
c000a064:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a067:	e8 d0 d5 00 00       	call   c001763c <unblockTask(ThreadControlBlock*)>
c000a06c:	83 c4 10             	add    esp,0x10
c000a06f:	eb db                	jmp    c000a04c <sendKeyToTerminal(unsigned char)+0x6e>
c000a071:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c000a076:	83 e8 01             	sub    eax,0x1
c000a079:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c000a07e:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c000a083:	85 c0                	test   eax,eax
c000a085:	75 18                	jne    c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a087:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c000a08c:	85 c0                	test   eax,eax
c000a08e:	74 0f                	je     c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a090:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c000a09a:	e8 41 d2 00 00       	call   c00172e0 <schedule()>
c000a09f:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000a0a7:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	75 01                	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a0b0:	fb                   	sti    
c000a0b1:	90                   	nop
c000a0b2:	c9                   	leave  
c000a0b3:	c3                   	ret    

c000a0b4 <sendKeyboardToken(KeyboardToken)>:
c000a0b4:	55                   	push   ebp
c000a0b5:	89 e5                	mov    ebp,esp
c000a0b7:	83 ec 18             	sub    esp,0x18
c000a0ba:	e8 e0 68 00 00       	call   c001099f <KeUserIOReceived()>
c000a0bf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c5:	0f b7 c0             	movzx  eax,ax
c000a0c8:	83 f2 01             	xor    edx,0x1
c000a0cb:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a0d1:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a0d6:	85 c0                	test   eax,eax
c000a0d8:	74 24                	je     c000a0fe <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0da:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a0e0:	83 ec 04             	sub    esp,0x4
c000a0e3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	89 e2                	mov    edx,esp
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	89 02                	mov    DWORD PTR [edx],eax
c000a0f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0f5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0f9:	ff d1                	call   ecx
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a102:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a105:	0f b6 c0             	movzx  eax,al
c000a108:	85 c0                	test   eax,eax
c000a10a:	0f 84 da 00 00 00    	je     c000a1ea <sendKeyboardToken(KeyboardToken)+0x136>
c000a110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a113:	0f b7 c0             	movzx  eax,ax
c000a116:	3d 18 03 00 00       	cmp    eax,0x318
c000a11b:	75 06                	jne    c000a123 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a11d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a126:	0f b7 c0             	movzx  eax,ax
c000a129:	3d 19 03 00 00       	cmp    eax,0x319
c000a12e:	75 06                	jne    c000a136 <sendKeyboardToken(KeyboardToken)+0x82>
c000a130:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a139:	0f b7 c0             	movzx  eax,ax
c000a13c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a141:	75 06                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x95>
c000a143:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a154:	75 06                	jne    c000a15c <sendKeyboardToken(KeyboardToken)+0xa8>
c000a156:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15f:	0f b7 c0             	movzx  eax,ax
c000a162:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a167:	75 06                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0xbb>
c000a169:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a17a:	75 06                	jne    c000a182 <sendKeyboardToken(KeyboardToken)+0xce>
c000a17c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a185:	0f b7 c0             	movzx  eax,ax
c000a188:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a18d:	75 06                	jne    c000a195 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a18f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a198:	0f b7 c0             	movzx  eax,ax
c000a19b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1a0:	75 06                	jne    c000a1a8 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a1a2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ab:	0f b7 c0             	movzx  eax,ax
c000a1ae:	3d 20 03 00 00       	cmp    eax,0x320
c000a1b3:	75 06                	jne    c000a1bb <sendKeyboardToken(KeyboardToken)+0x107>
c000a1b5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1be:	0f b7 c0             	movzx  eax,ax
c000a1c1:	3d 21 03 00 00       	cmp    eax,0x321
c000a1c6:	75 06                	jne    c000a1ce <sendKeyboardToken(KeyboardToken)+0x11a>
c000a1c8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d1:	0f b7 c0             	movzx  eax,ax
c000a1d4:	3d 22 03 00 00       	cmp    eax,0x322
c000a1d9:	0f 85 f1 00 00 00    	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1df:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1e5:	e9 e6 00 00 00       	jmp    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 18 03 00 00       	cmp    eax,0x318
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1f7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 19 03 00 00       	cmp    eax,0x319
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x164>
c000a20e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x17b>
c000a225:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x192>
c000a23c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a253:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a26a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a27f:	75 0a                	jne    c000a28b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a281:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a287:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28e:	0f b7 c0             	movzx  eax,ax
c000a291:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a296:	75 0a                	jne    c000a2a2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a298:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a29e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a5:	0f b7 c0             	movzx  eax,ax
c000a2a8:	3d 20 03 00 00       	cmp    eax,0x320
c000a2ad:	75 0a                	jne    c000a2b9 <sendKeyboardToken(KeyboardToken)+0x205>
c000a2af:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a2b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2bc:	0f b7 c0             	movzx  eax,ax
c000a2bf:	3d 21 03 00 00       	cmp    eax,0x321
c000a2c4:	75 0a                	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a2c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a2cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d3:	0f b7 c0             	movzx  eax,ax
c000a2d6:	3d 00 02 00 00       	cmp    eax,0x200
c000a2db:	75 2f                	jne    c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2dd:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2e2:	83 f0 01             	xor    eax,0x1
c000a2e5:	0f b6 c0             	movzx  eax,al
c000a2e8:	85 c0                	test   eax,eax
c000a2ea:	74 20                	je     c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2ec:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000a2f1:	6a 01                	push   0x1
c000a2f3:	6a 00                	push   0x0
c000a2f5:	68 14 9f 00 c0       	push   0xc0009f14
c000a2fa:	50                   	push   eax
c000a2fb:	e8 20 cd 00 00       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a30a:	eb 3a                	jmp    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a30f:	0f b7 c0             	movzx  eax,ax
c000a312:	3d 01 02 00 00       	cmp    eax,0x201
c000a317:	75 2d                	jne    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a319:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a31e:	83 f0 01             	xor    eax,0x1
c000a321:	0f b6 c0             	movzx  eax,al
c000a324:	85 c0                	test   eax,eax
c000a326:	74 1e                	je     c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a328:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000a32d:	6a 01                	push   0x1
c000a32f:	6a 00                	push   0x0
c000a331:	68 79 9f 00 c0       	push   0xc0009f79
c000a336:	50                   	push   eax
c000a337:	e8 e4 cc 00 00       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c000a33c:	83 c4 10             	add    esp,0x10
c000a33f:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a349:	0f b7 c0             	movzx  eax,ax
c000a34c:	3d 25 03 00 00       	cmp    eax,0x325
c000a351:	75 06                	jne    c000a359 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a353:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35c:	0f b7 c0             	movzx  eax,ax
c000a35f:	3d 24 03 00 00       	cmp    eax,0x324
c000a364:	75 06                	jne    c000a36c <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a366:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a36f:	0f b7 c0             	movzx  eax,ax
c000a372:	3d 23 03 00 00       	cmp    eax,0x323
c000a377:	75 06                	jne    c000a37f <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a379:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a382:	0f b7 c0             	movzx  eax,ax
c000a385:	3d 26 03 00 00       	cmp    eax,0x326
c000a38a:	75 06                	jne    c000a392 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a38c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a395:	0f b7 c0             	movzx  eax,ax
c000a398:	3d 27 03 00 00       	cmp    eax,0x327
c000a39d:	75 06                	jne    c000a3a5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a39f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a8:	0f b7 c0             	movzx  eax,ax
c000a3ab:	3d 22 03 00 00       	cmp    eax,0x322
c000a3b0:	75 06                	jne    c000a3b8 <sendKeyboardToken(KeyboardToken)+0x304>
c000a3b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a3b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a3bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3bf:	83 f0 01             	xor    eax,0x1
c000a3c2:	0f b6 c0             	movzx  eax,al
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 7c                	je     c000a445 <sendKeyboardToken(KeyboardToken)+0x391>
c000a3c9:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	85 c0                	test   eax,eax
c000a3d3:	74 43                	je     c000a418 <sendKeyboardToken(KeyboardToken)+0x364>
c000a3d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	74 2b                	je     c000a40c <sendKeyboardToken(KeyboardToken)+0x358>
c000a3e1:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a3e7:	89 d0                	mov    eax,edx
c000a3e9:	c1 e0 02             	shl    eax,0x2
c000a3ec:	01 d0                	add    eax,edx
c000a3ee:	01 c0                	add    eax,eax
c000a3f0:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f8:	0f b7 c0             	movzx  eax,ax
c000a3fb:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3fe:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a403:	01 d0                	add    eax,edx
c000a405:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a40a:	eb 71                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40c:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a416:	eb 65                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a418:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a41d:	85 c0                	test   eax,eax
c000a41f:	74 18                	je     c000a439 <sendKeyboardToken(KeyboardToken)+0x385>
c000a421:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	83 ec 0c             	sub    esp,0xc
c000a42c:	50                   	push   eax
c000a42d:	e8 ac fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a432:	83 c4 10             	add    esp,0x10
c000a435:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a439:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a443:	eb 38                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a448:	0f b7 c0             	movzx  eax,ax
c000a44b:	3d 01 01 00 00       	cmp    eax,0x101
c000a450:	75 2b                	jne    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a452:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a457:	85 c0                	test   eax,eax
c000a459:	74 18                	je     c000a473 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a45b:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a460:	0f b6 c0             	movzx  eax,al
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	50                   	push   eax
c000a467:	e8 72 fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a46c:	83 c4 10             	add    esp,0x10
c000a46f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a473:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a47d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a480:	83 f0 01             	xor    eax,0x1
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	85 c0                	test   eax,eax
c000a488:	74 5a                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a48a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a48d:	83 f0 01             	xor    eax,0x1
c000a490:	0f b6 c0             	movzx  eax,al
c000a493:	85 c0                	test   eax,eax
c000a495:	74 4d                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a497:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 3e                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a9:	0f b7 c0             	movzx  eax,ax
c000a4ac:	83 f8 1f             	cmp    eax,0x1f
c000a4af:	76 0b                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x408>
c000a4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b4:	0f b7 c0             	movzx  eax,ax
c000a4b7:	83 f8 7e             	cmp    eax,0x7e
c000a4ba:	76 16                	jbe    c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	83 f8 0a             	cmp    eax,0xa
c000a4c5:	74 0b                	je     c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ca:	0f b7 c0             	movzx  eax,ax
c000a4cd:	83 f8 08             	cmp    eax,0x8
c000a4d0:	75 12                	jne    c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d5:	0f b6 c0             	movzx  eax,al
c000a4d8:	83 ec 0c             	sub    esp,0xc
c000a4db:	50                   	push   eax
c000a4dc:	e8 fd fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4e7:	83 f0 01             	xor    eax,0x1
c000a4ea:	0f b6 c0             	movzx  eax,al
c000a4ed:	85 c0                	test   eax,eax
c000a4ef:	74 5d                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4f4:	83 f0 01             	xor    eax,0x1
c000a4f7:	0f b6 c0             	movzx  eax,al
c000a4fa:	85 c0                	test   eax,eax
c000a4fc:	74 50                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4fe:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a503:	0f b6 c0             	movzx  eax,al
c000a506:	85 c0                	test   eax,eax
c000a508:	74 44                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a50a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a50d:	0f b7 c0             	movzx  eax,ax
c000a510:	83 f8 3f             	cmp    eax,0x3f
c000a513:	76 39                	jbe    c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a518:	0f b7 c0             	movzx  eax,ax
c000a51b:	83 f8 7f             	cmp    eax,0x7f
c000a51e:	77 2e                	ja     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a523:	88 c2                	mov    dl,al
c000a525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a528:	0f b7 c0             	movzx  eax,ax
c000a52b:	83 f8 5f             	cmp    eax,0x5f
c000a52e:	76 04                	jbe    c000a534 <sendKeyboardToken(KeyboardToken)+0x480>
c000a530:	b0 20                	mov    al,0x20
c000a532:	eb 02                	jmp    c000a536 <sendKeyboardToken(KeyboardToken)+0x482>
c000a534:	b0 00                	mov    al,0x0
c000a536:	89 d1                	mov    ecx,edx
c000a538:	29 c1                	sub    ecx,eax
c000a53a:	89 c8                	mov    eax,ecx
c000a53c:	83 e8 40             	sub    eax,0x40
c000a53f:	0f b6 c0             	movzx  eax,al
c000a542:	83 ec 0c             	sub    esp,0xc
c000a545:	50                   	push   eax
c000a546:	e8 93 fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a551:	0f b7 c0             	movzx  eax,ax
c000a554:	3d 00 03 00 00       	cmp    eax,0x300
c000a559:	75 12                	jne    c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a55b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a55e:	83 f0 01             	xor    eax,0x1
c000a561:	0f b6 c0             	movzx  eax,al
c000a564:	85 c0                	test   eax,eax
c000a566:	74 05                	je     c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a568:	e8 08 7e 00 00       	call   c0012375 <doTerminalCycle()>
c000a56d:	90                   	nop
c000a56e:	c9                   	leave  
c000a56f:	c3                   	ret    

c000a570 <clearInternalKeybuffer(VgaText*)>:
c000a570:	55                   	push   ebp
c000a571:	89 e5                	mov    ebp,esp
c000a573:	83 ec 08             	sub    esp,0x8
c000a576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a579:	05 02 01 00 00       	add    eax,0x102
c000a57e:	83 ec 0c             	sub    esp,0xc
c000a581:	50                   	push   eax
c000a582:	e8 e9 5f ff ff       	call   c0000570 <strlen>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a58d:	81 c2 02 01 00 00    	add    edx,0x102
c000a593:	83 ec 04             	sub    esp,0x4
c000a596:	50                   	push   eax
c000a597:	6a 00                	push   0x0
c000a599:	52                   	push   edx
c000a59a:	e8 51 5f ff ff       	call   c00004f0 <memset>
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	90                   	nop
c000a5a3:	c9                   	leave  
c000a5a4:	c3                   	ret    

c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a5a5:	55                   	push   ebp
c000a5a6:	89 e5                	mov    ebp,esp
c000a5a8:	83 ec 18             	sub    esp,0x18
c000a5ab:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a5b0:	85 c0                	test   eax,eax
c000a5b2:	74 2a                	je     c000a5de <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a5b4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a5ba:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a5c0:	83 ec 04             	sub    esp,0x4
c000a5c3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a5c8:	83 ec 08             	sub    esp,0x8
c000a5cb:	89 e2                	mov    edx,esp
c000a5cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a5d0:	89 02                	mov    DWORD PTR [edx],eax
c000a5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a5d5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5d9:	ff d1                	call   ecx
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	fb                   	sti    
c000a5df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5e6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5ea:	0f 84 08 01 00 00    	je     c000a6f8 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f3:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5f9:	0f be c0             	movsx  eax,al
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	75 27                	jne    c000a627 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a600:	fa                   	cli    
c000a601:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000a606:	83 c0 01             	add    eax,0x1
c000a609:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000a60e:	e8 cd cc 00 00       	call   c00172e0 <schedule()>
c000a613:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000a61b:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000a620:	85 c0                	test   eax,eax
c000a622:	75 cc                	jne    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a624:	fb                   	sti    
c000a625:	eb c9                	jmp    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a627:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a62a:	8d 50 01             	lea    edx,[eax+0x1]
c000a62d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a630:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a633:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a639:	88 10                	mov    BYTE PTR [eax],dl
c000a63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a644:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a647:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64b:	83 f8 03             	cmp    eax,0x3
c000a64e:	75 1e                	jne    c000a66e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a650:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a655:	8b 00                	mov    eax,DWORD PTR [eax]
c000a657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a65a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a660:	83 ec 08             	sub    esp,0x8
c000a663:	6a 02                	push   0x2
c000a665:	50                   	push   eax
c000a666:	e8 80 6b 00 00       	call   c00111eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a66b:	83 c4 10             	add    esp,0x10
c000a66e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a672:	83 f8 1c             	cmp    eax,0x1c
c000a675:	75 1e                	jne    c000a695 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a677:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a67c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a67e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a681:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	6a 09                	push   0x9
c000a68c:	50                   	push   eax
c000a68d:	e8 59 6b 00 00       	call   c00111eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a698:	05 02 01 00 00       	add    eax,0x102
c000a69d:	83 ec 0c             	sub    esp,0xc
c000a6a0:	50                   	push   eax
c000a6a1:	e8 ca 5e ff ff       	call   c0000570 <strlen>
c000a6a6:	83 c4 10             	add    esp,0x10
c000a6a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6ac:	81 c2 02 01 00 00    	add    edx,0x102
c000a6b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a6b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6b8:	81 c2 02 01 00 00    	add    edx,0x102
c000a6be:	83 ec 04             	sub    esp,0x4
c000a6c1:	50                   	push   eax
c000a6c2:	51                   	push   ecx
c000a6c3:	52                   	push   edx
c000a6c4:	e8 07 5d ff ff       	call   c00003d0 <memmove>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a6d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a6d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6d8:	83 f8 0a             	cmp    eax,0xa
c000a6db:	74 16                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6dd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6e1:	83 f8 03             	cmp    eax,0x3
c000a6e4:	74 0d                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ea:	83 f8 1c             	cmp    eax,0x1c
c000a6ed:	0f 85 f3 fe ff ff    	jne    c000a5e6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6f6:	eb 03                	jmp    c000a6fb <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6fb:	c9                   	leave  
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <Keyboard::Keyboard(char const*)>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a705:	83 ec 08             	sub    esp,0x8
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 a4 f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a712:	83 c4 10             	add    esp,0x10
c000a715:	ba 60 3b 02 c0       	mov    edx,0xc0023b60
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	89 10                	mov    DWORD PTR [eax],edx
c000a720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a724:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a72e:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a735:	90                   	nop
c000a736:	83 c4 0c             	add    esp,0xc
c000a739:	c3                   	ret    

c000a73a <Keyboard::~Keyboard()>:
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	ba 60 3b 02 c0       	mov    edx,0xc0023b60
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	89 10                	mov    DWORD PTR [eax],edx
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	50                   	push   eax
c000a750:	e8 01 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	90                   	nop
c000a759:	83 c4 0c             	add    esp,0xc
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <Keyboard::~Keyboard()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	83 ec 0c             	sub    esp,0xc
c000a764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a768:	e8 cd ff ff ff       	call   c000a73a <Keyboard::~Keyboard()>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	83 ec 08             	sub    esp,0x8
c000a773:	68 5c 01 00 00       	push   0x15c
c000a778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a77c:	e8 68 2c 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	c3                   	ret    

c000a788 <LogicalDisk::close(int, int, void*)>:
c000a788:	83 c8 ff             	or     eax,0xffffffff
c000a78b:	c3                   	ret    

c000a78c <LogicalDisk::~LogicalDisk()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba d8 3b 02 c0       	mov    edx,0xc0023bd8
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 af f1 ff ff       	call   c0009956 <Device::~Device()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <LogicalDisk::~LogicalDisk()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <LogicalDisk::~LogicalDisk()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 78 01 00 00       	push   0x178
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 16 2c 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <LogicalDisk::open(int, int, void*)>:
c000a7da:	83 ec 18             	sub    esp,0x18
c000a7dd:	68 8c 3b 02 c0       	push   0xc0023b8c
c000a7e2:	e8 87 58 00 00       	call   c001006e <KePanic(char const*)>
c000a7e7:	83 c8 ff             	or     eax,0xffffffff
c000a7ea:	83 c4 1c             	add    esp,0x1c
c000a7ed:	c3                   	ret    

c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7ee:	53                   	push   ebx
c000a7ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7fb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a801:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a807:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a80d:	77 10                	ja     c000a81f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a80f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a815:	89 d3                	mov    ebx,edx
c000a817:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a81d:	72 05                	jb     c000a824 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a81f:	83 c8 ff             	or     eax,0xffffffff
c000a822:	89 c2                	mov    edx,eax
c000a824:	5b                   	pop    ebx
c000a825:	c3                   	ret    

c000a826 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a826:	56                   	push   esi
c000a827:	83 c8 ff             	or     eax,0xffffffff
c000a82a:	53                   	push   ebx
c000a82b:	89 c2                	mov    edx,eax
c000a82d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a831:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a83f:	77 27                	ja     c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a841:	89 d8                	mov    eax,ebx
c000a843:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a849:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a854:	89 c2                	mov    edx,eax
c000a856:	73 10                	jae    c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a858:	89 c8                	mov    eax,ecx
c000a85a:	89 da                	mov    edx,ebx
c000a85c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a862:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a868:	5b                   	pop    ebx
c000a869:	5e                   	pop    esi
c000a86a:	c3                   	ret    
c000a86b:	90                   	nop

c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a86c:	83 ec 1c             	sub    esp,0x1c
c000a86f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a87f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a883:	89 04 24             	mov    DWORD PTR [esp],eax
c000a886:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a899:	50                   	push   eax
c000a89a:	e8 17 f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a89f:	83 c4 10             	add    esp,0x10
c000a8a2:	ba d8 3b 02 c0       	mov    edx,0xc0023bd8
c000a8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ab:	89 10                	mov    DWORD PTR [eax],edx
c000a8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8e8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8ee:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a905:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a913:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a927:	90                   	nop
c000a928:	83 c4 1c             	add    esp,0x1c
c000a92b:	c3                   	ret    

c000a92c <LogicalDisk::assignDriveLetter()>:
c000a92c:	55                   	push   ebp
c000a92d:	57                   	push   edi
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	83 ec 14             	sub    esp,0x14
c000a933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a937:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a93d:	b0 41                	mov    al,0x41
c000a93f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a945:	84 d2                	test   dl,dl
c000a947:	75 02                	jne    c000a94b <LogicalDisk::assignDriveLetter()+0x1f>
c000a949:	b0 43                	mov    al,0x43
c000a94b:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a951:	0f b6 ca             	movzx  ecx,dl
c000a954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a958:	0f be e8             	movsx  ebp,al
c000a95b:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a961:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a965:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a969:	3c 43                	cmp    al,0x43
c000a96b:	75 10                	jne    c000a97d <LogicalDisk::assignDriveLetter()+0x51>
c000a96d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a974:	75 5a                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a976:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a97b:	75 53                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a97d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a980:	ba 01 00 00 00       	mov    edx,0x1
c000a985:	89 34 24             	mov    DWORD PTR [esp],esi
c000a988:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a98b:	d3 e2                	shl    edx,cl
c000a98d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a991:	89 d7                	mov    edi,edx
c000a993:	89 d6                	mov    esi,edx
c000a995:	c1 ff 1f             	sar    edi,0x1f
c000a998:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a99c:	21 f9                	and    ecx,edi
c000a99e:	09 d1                	or     ecx,edx
c000a9a0:	75 2e                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a9a2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9aa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a9b0:	09 f2                	or     edx,esi
c000a9b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a9b5:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a9bb:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a9c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9c6:	09 fa                	or     edx,edi
c000a9c8:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a9ce:	eb 0d                	jmp    c000a9dd <LogicalDisk::assignDriveLetter()+0xb1>
c000a9d0:	8d 50 01             	lea    edx,[eax+0x1]
c000a9d3:	45                   	inc    ebp
c000a9d4:	88 d0                	mov    al,dl
c000a9d6:	80 fa 5b             	cmp    dl,0x5b
c000a9d9:	75 8e                	jne    c000a969 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9db:	31 c0                	xor    eax,eax
c000a9dd:	83 c4 14             	add    esp,0x14
c000a9e0:	5b                   	pop    ebx
c000a9e1:	5e                   	pop    esi
c000a9e2:	5f                   	pop    edi
c000a9e3:	5d                   	pop    ebp
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::mount()>:
c000a9e6:	56                   	push   esi
c000a9e7:	53                   	push   ebx
c000a9e8:	53                   	push   ebx
c000a9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9ed:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a9f3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9fd:	85 db                	test   ebx,ebx
c000a9ff:	74 27                	je     c000aa28 <LogicalDisk::mount()+0x42>
c000aa01:	51                   	push   ecx
c000aa02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000aa09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aa0b:	83 e8 41             	sub    eax,0x41
c000aa0e:	50                   	push   eax
c000aa0f:	56                   	push   esi
c000aa10:	53                   	push   ebx
c000aa11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	84 c0                	test   al,al
c000aa19:	74 08                	je     c000aa23 <LogicalDisk::mount()+0x3d>
c000aa1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000aa21:	eb 07                	jmp    c000aa2a <LogicalDisk::mount()+0x44>
c000aa23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aa26:	eb d5                	jmp    c000a9fd <LogicalDisk::mount()+0x17>
c000aa28:	31 c0                	xor    eax,eax
c000aa2a:	5a                   	pop    edx
c000aa2b:	5b                   	pop    ebx
c000aa2c:	5e                   	pop    esi
c000aa2d:	c3                   	ret    

c000aa2e <LogicalDisk::unmount()>:
c000aa2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa3c:	c3                   	ret    
c000aa3d:	90                   	nop

c000aa3e <LogicalDisk::eject()>:
c000aa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa48:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa51:	90                   	nop

c000aa52 <LogicalDisk::unassignDriveLetter()>:
c000aa52:	57                   	push   edi
c000aa53:	56                   	push   esi
c000aa54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa5f:	85 c9                	test   ecx,ecx
c000aa61:	75 0f                	jne    c000aa72 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa63:	c7 44 24 0c b0 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023bb0
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 fc 55 00 00       	jmp    c001006e <KePanic(char const*)>
c000aa72:	83 e9 41             	sub    ecx,0x41
c000aa75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa7c:	b8 01 00 00 00       	mov    eax,0x1
c000aa81:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa8c:	d3 e0                	shl    eax,cl
c000aa8e:	89 c7                	mov    edi,eax
c000aa90:	f7 d0                	not    eax
c000aa92:	c1 ff 1f             	sar    edi,0x1f
c000aa95:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa9b:	89 fe                	mov    esi,edi
c000aa9d:	f7 d6                	not    esi
c000aa9f:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	c3                   	ret    

c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aaa8:	57                   	push   edi
c000aaa9:	56                   	push   esi
c000aaaa:	53                   	push   ebx
c000aaab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aaaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aac1:	77 41                	ja     c000ab04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aac3:	99                   	cdq    
c000aac4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaca:	01 c8                	add    eax,ecx
c000aacc:	11 da                	adc    edx,ebx
c000aace:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aad4:	19 d7                	sbb    edi,edx
c000aad6:	72 33                	jb     c000ab0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aad8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aade:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aae4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aae8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafc:	5b                   	pop    ebx
c000aafd:	5e                   	pop    esi
c000aafe:	5f                   	pop    edi
c000aaff:	e9 a2 0b 00 00       	jmp    c000b6a6 <VCache::read(unsigned long long, int, void*)>
c000ab04:	b8 05 00 00 00       	mov    eax,0x5
c000ab09:	eb 05                	jmp    c000ab10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ab0b:	b8 07 00 00 00       	mov    eax,0x7
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	c3                   	ret    

c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ab14:	57                   	push   edi
c000ab15:	56                   	push   esi
c000ab16:	53                   	push   ebx
c000ab17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ab2d:	77 41                	ja     c000ab70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ab2f:	99                   	cdq    
c000ab30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab36:	01 c8                	add    eax,ecx
c000ab38:	11 da                	adc    edx,ebx
c000ab3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab40:	19 d7                	sbb    edi,edx
c000ab42:	72 33                	jb     c000ab77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab68:	5b                   	pop    ebx
c000ab69:	5e                   	pop    esi
c000ab6a:	5f                   	pop    edi
c000ab6b:	e9 68 09 00 00       	jmp    c000b4d8 <VCache::write(unsigned long long, int, void*)>
c000ab70:	b8 05 00 00 00       	mov    eax,0x5
c000ab75:	eb 05                	jmp    c000ab7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab77:	b8 07 00 00 00       	mov    eax,0x7
c000ab7c:	5b                   	pop    ebx
c000ab7d:	5e                   	pop    esi
c000ab7e:	5f                   	pop    edi
c000ab7f:	c3                   	ret    

c000ab80 <Mouse::Mouse(char const*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	50                   	push   eax
c000ab8f:	e8 22 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	ba 04 3c 02 c0       	mov    edx,0xc0023c04
c000ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba0:	89 10                	mov    DWORD PTR [eax],edx
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	90                   	nop
c000abb6:	66 90                	xchg   ax,ax

c000abb8 <Mouse::~Mouse()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba 04 3c 02 c0       	mov    edx,0xc0023c04
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 83 ed ff ff       	call   c0009956 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <Mouse::~Mouse()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <Mouse::~Mouse()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 ea 27 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <NIC::getMAC()>:
c000ac06:	31 c0                	xor    eax,eax
c000ac08:	31 d2                	xor    edx,edx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <NIC::write(int, unsigned char*, int*)>:
c000ac0c:	b8 01 00 00 00       	mov    eax,0x1
c000ac11:	c3                   	ret    

c000ac12 <NIC::NIC(char const*)>:
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac19:	83 ec 08             	sub    esp,0x8
c000ac1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac20:	50                   	push   eax
c000ac21:	e8 90 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	ba 30 3c 02 c0       	mov    edx,0xc0023c30
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <NIC::~NIC()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	ba 30 3c 02 c0       	mov    edx,0xc0023c30
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	89 10                	mov    DWORD PTR [eax],edx
c000ac56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5a:	83 ec 0c             	sub    esp,0xc
c000ac5d:	50                   	push   eax
c000ac5e:	e8 f3 ec ff ff       	call   c0009956 <Device::~Device()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	90                   	nop
c000ac67:	83 c4 0c             	add    esp,0xc
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <NIC::~NIC()>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac76:	e8 cd ff ff ff       	call   c000ac48 <NIC::~NIC()>
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 ec 08             	sub    esp,0x8
c000ac81:	68 58 01 00 00       	push   0x158
c000ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8a:	e8 5a 27 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 0c             	add    esp,0xc
c000ac95:	c3                   	ret    

c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac96:	55                   	push   ebp
c000ac97:	57                   	push   edi
c000ac98:	56                   	push   esi
c000ac99:	53                   	push   ebx
c000ac9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000aca0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000aca7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000acae:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000acb5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000acc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000acc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000accb:	e8 e2 ef ff ff       	call   c0009cb2 <Device::getName()>
c000acd0:	5a                   	pop    edx
c000acd1:	59                   	pop    ecx
c000acd2:	50                   	push   eax
c000acd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000acd7:	55                   	push   ebp
c000acd8:	e8 63 59 ff ff       	call   c0000640 <strcpy>
c000acdd:	5b                   	pop    ebx
c000acde:	58                   	pop    eax
c000acdf:	68 5c 3c 02 c0       	push   0xc0023c5c
c000ace4:	55                   	push   ebp
c000ace5:	e8 56 5b ff ff       	call   c0000840 <strcat>
c000acea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acf1:	e8 69 50 00 00       	call   c000fd5f <malloc>
c000acf6:	83 c4 0c             	add    esp,0xc
c000acf9:	89 c3                	mov    ebx,eax
c000acfb:	57                   	push   edi
c000acfc:	56                   	push   esi
c000acfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ad0c:	55                   	push   ebp
c000ad0d:	50                   	push   eax
c000ad0e:	e8 59 fb ff ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad13:	83 c4 14             	add    esp,0x14
c000ad16:	53                   	push   ebx
c000ad17:	e8 10 fc ff ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c000ad1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad1f:	e8 c2 fc ff ff       	call   c000a9e6 <LogicalDisk::mount()>
c000ad24:	58                   	pop    eax
c000ad25:	5a                   	pop    edx
c000ad26:	53                   	push   ebx
c000ad27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ad2e:	e8 21 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000ad33:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad39:	5b                   	pop    ebx
c000ad3a:	5e                   	pop    esi
c000ad3b:	5f                   	pop    edi
c000ad3c:	5d                   	pop    ebp
c000ad3d:	c3                   	ret    

c000ad3e <createPartitionsForDisk(PhysicalDisk*)>:
c000ad3e:	55                   	push   ebp
c000ad3f:	57                   	push   edi
c000ad40:	56                   	push   esi
c000ad41:	53                   	push   ebx
c000ad42:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad48:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad4f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad55:	3d 00 02 00 00       	cmp    eax,0x200
c000ad5a:	74 27                	je     c000ad83 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad5c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad62:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad6f:	99                   	cdq    
c000ad70:	c1 e6 0a             	shl    esi,0xa
c000ad73:	52                   	push   edx
c000ad74:	89 fd                	mov    ebp,edi
c000ad76:	50                   	push   eax
c000ad77:	55                   	push   ebp
c000ad78:	56                   	push   esi
c000ad79:	e8 36 70 01 00       	call   c0021db4 <__udivdi3>
c000ad7e:	e9 b9 00 00 00       	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad83:	83 ec 0c             	sub    esp,0xc
c000ad86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad88:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad8c:	56                   	push   esi
c000ad8d:	6a 01                	push   0x1
c000ad8f:	6a 00                	push   0x0
c000ad91:	6a 00                	push   0x0
c000ad93:	53                   	push   ebx
c000ad94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ada2:	75 0a                	jne    c000adae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ada4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000adac:	74 2c                	je     c000adda <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000adae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adc0:	83 ec 10             	sub    esp,0x10
c000adc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adc7:	89 f7                	mov    edi,esi
c000adc9:	c1 e0 0a             	shl    eax,0xa
c000adcc:	c1 ff 1f             	sar    edi,0x1f
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	52                   	push   edx
c000add2:	50                   	push   eax
c000add3:	e8 dc 6f 01 00       	call   c0021db4 <__udivdi3>
c000add8:	eb 62                	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000adda:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ade1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ade8:	89 cf                	mov    edi,ecx
c000adea:	83 e2 7f             	and    edx,0x7f
c000aded:	83 e7 7f             	and    edi,0x7f
c000adf0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adf7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adfa:	83 e0 7f             	and    eax,0x7f
c000adfd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ae00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ae07:	83 e0 7f             	and    eax,0x7f
c000ae0a:	01 d0                	add    eax,edx
c000ae0c:	89 c5                	mov    ebp,eax
c000ae0e:	84 c0                	test   al,al
c000ae10:	74 41                	je     c000ae53 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ae12:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae18:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae24:	83 ec 10             	sub    esp,0x10
c000ae27:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae2b:	89 f7                	mov    edi,esi
c000ae2d:	c1 e0 0a             	shl    eax,0xa
c000ae30:	c1 ff 1f             	sar    edi,0x1f
c000ae33:	57                   	push   edi
c000ae34:	56                   	push   esi
c000ae35:	52                   	push   edx
c000ae36:	50                   	push   eax
c000ae37:	e8 78 6f 01 00       	call   c0021db4 <__udivdi3>
c000ae3c:	83 c4 14             	add    esp,0x14
c000ae3f:	52                   	push   edx
c000ae40:	50                   	push   eax
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 00                	push   0x0
c000ae45:	53                   	push   ebx
c000ae46:	e8 4b fe ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae4b:	83 c4 20             	add    esp,0x20
c000ae4e:	e9 73 01 00 00       	jmp    c000afc6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae53:	89 f0                	mov    eax,esi
c000ae55:	31 c9                	xor    ecx,ecx
c000ae57:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae5e:	75 02                	jne    c000ae62 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae60:	89 cd                	mov    ebp,ecx
c000ae62:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae69:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae70:	c1 e2 08             	shl    edx,0x8
c000ae73:	c1 e6 10             	shl    esi,0x10
c000ae76:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae7e:	09 f2                	or     edx,esi
c000ae80:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae88:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae8f:	83 c0 10             	add    eax,0x10
c000ae92:	09 f2                	or     edx,esi
c000ae94:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae9b:	c1 e6 18             	shl    esi,0x18
c000ae9e:	09 f2                	or     edx,esi
c000aea0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000aea7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000aeab:	c1 e6 10             	shl    esi,0x10
c000aeae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000aeb5:	c1 e2 08             	shl    edx,0x8
c000aeb8:	09 f2                	or     edx,esi
c000aeba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000aec1:	09 f2                	or     edx,esi
c000aec3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000aeca:	c1 e6 18             	shl    esi,0x18
c000aecd:	09 f2                	or     edx,esi
c000aecf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000aed3:	41                   	inc    ecx
c000aed4:	83 f9 04             	cmp    ecx,0x4
c000aed7:	0f 85 7a ff ff ff    	jne    c000ae57 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee1:	83 f0 01             	xor    eax,0x1
c000aee4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aee8:	75 4f                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	83 f0 01             	xor    eax,0x1
c000aef1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aef5:	75 42                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aef7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aeff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000af07:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000af0d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000af13:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000af19:	0f a4 c2 0a          	shld   edx,eax,0xa
c000af1d:	89 f7                	mov    edi,esi
c000af1f:	c1 e0 0a             	shl    eax,0xa
c000af22:	c1 ff 1f             	sar    edi,0x1f
c000af25:	57                   	push   edi
c000af26:	56                   	push   esi
c000af27:	52                   	push   edx
c000af28:	50                   	push   eax
c000af29:	e8 86 6e 01 00       	call   c0021db4 <__udivdi3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af39:	89 e8                	mov    eax,ebp
c000af3b:	0f b6 e8             	movzx  ebp,al
c000af3e:	85 ed                	test   ebp,ebp
c000af40:	74 50                	je     c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af5a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af5e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af6e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af72:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af7a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af82:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af86:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af8a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af8e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af92:	31 ed                	xor    ebp,ebp
c000af94:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af98:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af9c:	89 f8                	mov    eax,edi
c000af9e:	09 f0                	or     eax,esi
c000afa0:	74 1e                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afa2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000afa6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000afaa:	89 d1                	mov    ecx,edx
c000afac:	09 c1                	or     ecx,eax
c000afae:	74 10                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	57                   	push   edi
c000afb4:	56                   	push   esi
c000afb5:	52                   	push   edx
c000afb6:	50                   	push   eax
c000afb7:	53                   	push   ebx
c000afb8:	e8 d9 fc ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000afbd:	83 c4 20             	add    esp,0x20
c000afc0:	45                   	inc    ebp
c000afc1:	83 fd 04             	cmp    ebp,0x4
c000afc4:	75 ce                	jne    c000af94 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000afc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000afcc:	5b                   	pop    ebx
c000afcd:	5e                   	pop    esi
c000afce:	5f                   	pop    edi
c000afcf:	5d                   	pop    ebp
c000afd0:	c3                   	ret    
c000afd1:	66 90                	xchg   ax,ax
c000afd3:	90                   	nop

c000afd4 <Serial::Serial(char const*)>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdb:	83 ec 08             	sub    esp,0x8
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	50                   	push   eax
c000afe3:	e8 ce eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	ba 70 3c 02 c0       	mov    edx,0xc0023c70
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	89 10                	mov    DWORD PTR [eax],edx
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b004:	90                   	nop
c000b005:	83 c4 0c             	add    esp,0xc
c000b008:	c3                   	ret    
c000b009:	90                   	nop
c000b00a:	66 90                	xchg   ax,ax

c000b00c <Serial::~Serial()>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	ba 70 3c 02 c0       	mov    edx,0xc0023c70
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	50                   	push   eax
c000b022:	e8 2f e9 ff ff       	call   c0009956 <Device::~Device()>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	90                   	nop
c000b02b:	83 c4 0c             	add    esp,0xc
c000b02e:	c3                   	ret    
c000b02f:	90                   	nop

c000b030 <Serial::~Serial()>:
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03a:	e8 cd ff ff ff       	call   c000b00c <Serial::~Serial()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 ec 08             	sub    esp,0x8
c000b045:	68 58 01 00 00       	push   0x158
c000b04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04e:	e8 96 23 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	c3                   	ret    
c000b05a:	66 90                	xchg   ax,ax

c000b05c <Timer::Timer(char const*)>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b063:	83 ec 08             	sub    esp,0x8
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	50                   	push   eax
c000b06b:	e8 46 eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	ba 4c 3d 02 c0       	mov    edx,0xc0023d4c
c000b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07c:	89 10                	mov    DWORD PTR [eax],edx
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b08c:	90                   	nop
c000b08d:	83 c4 0c             	add    esp,0xc
c000b090:	c3                   	ret    
c000b091:	90                   	nop
c000b092:	66 90                	xchg   ax,ax

c000b094 <Timer::~Timer()>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	ba 4c 3d 02 c0       	mov    edx,0xc0023d4c
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	89 10                	mov    DWORD PTR [eax],edx
c000b0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	50                   	push   eax
c000b0aa:	e8 a7 e8 ff ff       	call   c0009956 <Device::~Device()>
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	90                   	nop
c000b0b3:	83 c4 0c             	add    esp,0xc
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Timer::~Timer()>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c2:	e8 cd ff ff ff       	call   c000b094 <Timer::~Timer()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	83 ec 08             	sub    esp,0x8
c000b0cd:	68 5c 01 00 00       	push   0x15c
c000b0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d6:	e8 0e 23 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 c4 0c             	add    esp,0xc
c000b0e1:	c3                   	ret    

c000b0e2 <Timer::read()>:
c000b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ec:	c3                   	ret    

c000b0ed <setupTimer(int)>:
c000b0ed:	53                   	push   ebx
c000b0ee:	83 ec 14             	sub    esp,0x14
c000b0f1:	68 5c 01 00 00       	push   0x15c
c000b0f6:	e8 64 4c 00 00       	call   c000fd5f <malloc>
c000b0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0fe:	89 c3                	mov    ebx,eax
c000b100:	e8 63 65 01 00       	call   c0021668 <PIT::PIT()>
c000b105:	58                   	pop    eax
c000b106:	5a                   	pop    edx
c000b107:	53                   	push   ebx
c000b108:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c000b10e:	e8 41 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b113:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b115:	6a 00                	push   0x0
c000b117:	6a 00                	push   0x0
c000b119:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b11d:	53                   	push   ebx
c000b11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b121:	89 d8                	mov    eax,ebx
c000b123:	83 c4 28             	add    esp,0x28
c000b126:	5b                   	pop    ebx
c000b127:	c3                   	ret    

c000b128 <timerHandler(unsigned int)>:
c000b128:	57                   	push   edi
c000b129:	31 d2                	xor    edx,edx
c000b12b:	56                   	push   esi
c000b12c:	53                   	push   ebx
c000b12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b131:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b137:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b13d:	80 3d d9 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d9,0x0
c000b144:	75 12                	jne    c000b158 <timerHandler(unsigned int)+0x30>
c000b146:	c7 44 24 10 ff 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023cff
c000b14e:	5b                   	pop    ebx
c000b14f:	5e                   	pop    esi
c000b150:	5f                   	pop    edi
c000b151:	e9 26 be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b156:	66 90                	xchg   ax,ax
c000b158:	fa                   	cli    
c000b159:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	68 60 fa 02 c0       	push   0xc002fa60
c000b167:	e8 e0 6f 01 00       	call   c002214c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	84 c0                	test   al,al
c000b171:	0f 85 a9 00 00 00    	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 60 fa 02 c0       	push   0xc002fa60
c000b17f:	e8 e4 6f 01 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 c6                	mov    esi,eax
c000b189:	8d 76 00             	lea    esi,[esi+0x0]
c000b18c:	83 ec 0c             	sub    esp,0xc
c000b18f:	68 60 fa 02 c0       	push   0xc002fa60
c000b194:	e8 cf 6f 01 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b199:	c7 04 24 60 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa60
c000b1a0:	89 c7                	mov    edi,eax
c000b1a2:	e8 c9 6f 01 00       	call   c0022170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b1a7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b1b0:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b1b6:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b1bb:	19 c8                	sbb    eax,ecx
c000b1bd:	72 21                	jb     c000b1e0 <timerHandler(unsigned int)+0xb8>
c000b1bf:	83 ec 0c             	sub    esp,0xc
c000b1c2:	57                   	push   edi
c000b1c3:	e8 74 c4 00 00       	call   c001763c <unblockTask(ThreadControlBlock*)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	39 fe                	cmp    esi,edi
c000b1cd:	75 25                	jne    c000b1f4 <timerHandler(unsigned int)+0xcc>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	68 60 fa 02 c0       	push   0xc002fa60
c000b1d7:	e8 8c 6f 01 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1dc:	89 c6                	mov    esi,eax
c000b1de:	eb 10                	jmp    c000b1f0 <timerHandler(unsigned int)+0xc8>
c000b1e0:	50                   	push   eax
c000b1e1:	50                   	push   eax
c000b1e2:	57                   	push   edi
c000b1e3:	68 60 fa 02 c0       	push   0xc002fa60
c000b1e8:	e8 3f 70 01 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	90                   	nop
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	68 60 fa 02 c0       	push   0xc002fa60
c000b1fc:	e8 4b 6f 01 00       	call   c002214c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	84 c0                	test   al,al
c000b206:	75 18                	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 60 fa 02 c0       	push   0xc002fa60
c000b210:	e8 53 6f 01 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	39 f0                	cmp    eax,esi
c000b21a:	0f 85 6c ff ff ff    	jne    c000b18c <timerHandler(unsigned int)+0x64>
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b228:	85 c0                	test   eax,eax
c000b22a:	74 48                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b22c:	80 3d d8 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d8,0x0
c000b233:	74 3f                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b235:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b23a:	76 1c                	jbe    c000b258 <timerHandler(unsigned int)+0x130>
c000b23c:	83 ec 0c             	sub    esp,0xc
c000b23f:	68 15 3d 02 c0       	push   0xc0023d15
c000b244:	e8 33 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b25e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b261:	89 c1                	mov    ecx,eax
c000b263:	29 d9                	sub    ecx,ebx
c000b265:	39 d8                	cmp    eax,ebx
c000b267:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b26a:	77 08                	ja     c000b274 <timerHandler(unsigned int)+0x14c>
c000b26c:	e8 6f c0 00 00       	call   c00172e0 <schedule()>
c000b271:	8d 76 00             	lea    esi,[esi+0x0]
c000b274:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000b27b:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000b282:	75 04                	jne    c000b288 <timerHandler(unsigned int)+0x160>
c000b284:	fb                   	sti    
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	c3                   	ret    

c000b28c <VCache::VCache(PhysicalDisk*)>:
c000b28c:	53                   	push   ebx
c000b28d:	83 ec 18             	sub    esp,0x18
c000b290:	ba bc 3d 02 c0       	mov    edx,0xc0023dbc
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	89 10                	mov    DWORD PTR [eax],edx
c000b29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b306:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b31d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b32c:	e8 2e 4a 00 00       	call   c000fd5f <malloc>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	89 c3                	mov    ebx,eax
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	53                   	push   ebx
c000b33a:	e8 15 4d 00 00       	call   c0010054 <Mutex::Mutex()>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b346:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b34d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b358:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b35f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b363:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b37a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b380:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b384:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b387:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b39c:	05 00 01 00 00       	add    eax,0x100
c000b3a1:	c1 e0 04             	shl    eax,0x4
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 b2 49 00 00       	call   c000fd5f <malloc>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	89 c2                	mov    edx,eax
c000b3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3bd:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3d6:	89 d0                	mov    eax,edx
c000b3d8:	c1 e0 02             	shl    eax,0x2
c000b3db:	01 d0                	add    eax,edx
c000b3dd:	c1 e0 04             	shl    eax,0x4
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	50                   	push   eax
c000b3e4:	e8 76 49 00 00       	call   c000fd5f <malloc>
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	89 c2                	mov    edx,eax
c000b3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3f5:	90                   	nop
c000b3f6:	83 c4 18             	add    esp,0x18
c000b3f9:	5b                   	pop    ebx
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <VCache::invalidateReadBuffer()>:
c000b3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <VCache::writeWriteBuffer()>:
c000b40c:	53                   	push   ebx
c000b40d:	83 ec 08             	sub    esp,0x8
c000b410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b418:	74 1e                	je     c000b438 <VCache::writeWriteBuffer()+0x2c>
c000b41a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b41d:	83 ec 0c             	sub    esp,0xc
c000b420:	8b 10                	mov    edx,DWORD PTR [eax]
c000b422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b42b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b42e:	50                   	push   eax
c000b42f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b432:	83 c4 20             	add    esp,0x20
c000b435:	8d 76 00             	lea    esi,[esi+0x0]
c000b438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b43f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b44a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	66 90                	xchg   ax,ax

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ba bc 3d 02 c0       	mov    edx,0xc0023dbc
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	89 10                	mov    DWORD PTR [eax],edx
c000b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b46d:	0f b6 c0             	movzx  eax,al
c000b470:	85 c0                	test   eax,eax
c000b472:	74 10                	je     c000b484 <VCache::~VCache()+0x2c>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	e8 8c ff ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	90                   	nop
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	50                   	push   eax
c000b48f:	e8 db 48 00 00       	call   c000fd6f <free>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	50                   	push   eax
c000b4a2:	e8 c8 48 00 00       	call   c000fd6f <free>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	90                   	nop
c000b4ab:	83 c4 0c             	add    esp,0xc
c000b4ae:	c3                   	ret    
c000b4af:	90                   	nop

c000b4b0 <VCache::~VCache()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	83 ec 0c             	sub    esp,0xc
c000b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ba:	e8 99 ff ff ff       	call   c000b458 <VCache::~VCache()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	83 ec 08             	sub    esp,0x8
c000b4c5:	6a 44                	push   0x44
c000b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cb:	e8 19 1f 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <VCache::write(unsigned long long, int, void*)>:
c000b4d8:	55                   	push   ebp
c000b4d9:	57                   	push   edi
c000b4da:	56                   	push   esi
c000b4db:	53                   	push   ebx
c000b4dc:	83 ec 1c             	sub    esp,0x1c
c000b4df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4ef:	e8 e4 ba 00 00       	call   c0016fd8 <KeDisablePreemption()>
c000b4f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4f9:	50                   	push   eax
c000b4fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4fd:	0f af c3             	imul   eax,ebx
c000b500:	05 ff 0f 00 00       	add    eax,0xfff
c000b505:	99                   	cdq    
c000b506:	f7 f9                	idiv   ecx
c000b508:	50                   	push   eax
c000b509:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b50d:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b513:	e8 aa 8d 00 00       	call   c00142c2 <VAS::canLockPages(unsigned long, int)>
c000b518:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b524:	74 2a                	je     c000b550 <VCache::write(unsigned long long, int, void*)+0x78>
c000b526:	b9 00 10 00 00       	mov    ecx,0x1000
c000b52b:	50                   	push   eax
c000b52c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b52f:	0f af c3             	imul   eax,ebx
c000b532:	05 ff 0f 00 00       	add    eax,0xfff
c000b537:	99                   	cdq    
c000b538:	f7 f9                	idiv   ecx
c000b53a:	50                   	push   eax
c000b53b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b53f:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b545:	e8 72 91 00 00       	call   c00146bc <VAS::lockPages(unsigned long, int)>
c000b54a:	83 c4 10             	add    esp,0x10
c000b54d:	8d 76 00             	lea    esi,[esi+0x0]
c000b550:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b554:	74 0e                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	55                   	push   ebp
c000b55a:	e8 9d fe ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	66 90                	xchg   ax,ax
c000b564:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b568:	74 72                	je     c000b5dc <VCache::write(unsigned long long, int, void*)+0x104>
c000b56a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b56d:	89 c8                	mov    eax,ecx
c000b56f:	99                   	cdq    
c000b570:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b573:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b586:	31 f0                	xor    eax,esi
c000b588:	31 fa                	xor    edx,edi
c000b58a:	09 d0                	or     eax,edx
c000b58c:	75 42                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b58e:	83 fb 01             	cmp    ebx,0x1
c000b591:	75 3d                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b596:	89 cf                	mov    edi,ecx
c000b598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b59e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a2:	0f af f8             	imul   edi,eax
c000b5a5:	89 c1                	mov    ecx,eax
c000b5a7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b5aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5ac:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b5af:	40                   	inc    eax
c000b5b0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b5b3:	83 f8 50             	cmp    eax,0x50
c000b5b6:	0f 85 a8 00 00 00    	jne    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	55                   	push   ebp
c000b5c0:	e8 47 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	e9 97 00 00 00       	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	55                   	push   ebp
c000b5d4:	e8 33 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5df:	83 fb 4f             	cmp    ebx,0x4f
c000b5e2:	7f 20                	jg     c000b604 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5e4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5e7:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ea:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5ed:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5f1:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5f4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5fa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b600:	eb 62                	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b602:	66 90                	xchg   ax,ax
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	8b 10                	mov    edx,DWORD PTR [eax]
c000b609:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b60d:	53                   	push   ebx
c000b60e:	57                   	push   edi
c000b60f:	56                   	push   esi
c000b610:	50                   	push   eax
c000b611:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b614:	83 c4 20             	add    esp,0x20
c000b617:	89 c6                	mov    esi,eax
c000b619:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b61e:	74 28                	je     c000b648 <VCache::write(unsigned long long, int, void*)+0x170>
c000b620:	b9 00 10 00 00       	mov    ecx,0x1000
c000b625:	52                   	push   edx
c000b626:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b62a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b630:	99                   	cdq    
c000b631:	f7 f9                	idiv   ecx
c000b633:	50                   	push   eax
c000b634:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b638:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b63e:	e8 bb 8c 00 00       	call   c00142fe <VAS::unlockPages(unsigned long, int)>
c000b643:	83 c4 10             	add    esp,0x10
c000b646:	66 90                	xchg   ax,ax
c000b648:	e8 b3 b9 00 00       	call   c0017000 <KeRestorePreemption()>
c000b64d:	85 f6                	test   esi,esi
c000b64f:	74 4b                	je     c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b651:	83 ec 0c             	sub    esp,0xc
c000b654:	68 74 3d 02 c0       	push   0xc0023d74
c000b659:	e8 1e b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	eb 39                	jmp    c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b663:	90                   	nop
c000b664:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b669:	74 29                	je     c000b694 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b66b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b670:	50                   	push   eax
c000b671:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b675:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b67b:	99                   	cdq    
c000b67c:	f7 f9                	idiv   ecx
c000b67e:	50                   	push   eax
c000b67f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b683:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b689:	e8 70 8c 00 00       	call   c00142fe <VAS::unlockPages(unsigned long, int)>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	8d 76 00             	lea    esi,[esi+0x0]
c000b694:	e8 67 b9 00 00       	call   c0017000 <KeRestorePreemption()>
c000b699:	31 f6                	xor    esi,esi
c000b69b:	90                   	nop
c000b69c:	83 c4 1c             	add    esp,0x1c
c000b69f:	89 f0                	mov    eax,esi
c000b6a1:	5b                   	pop    ebx
c000b6a2:	5e                   	pop    esi
c000b6a3:	5f                   	pop    edi
c000b6a4:	5d                   	pop    ebp
c000b6a5:	c3                   	ret    

c000b6a6 <VCache::read(unsigned long long, int, void*)>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	bf 00 10 00 00       	mov    edi,0x1000
c000b6ad:	56                   	push   esi
c000b6ae:	53                   	push   ebx
c000b6af:	83 ec 2c             	sub    esp,0x2c
c000b6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ca:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6ce:	e8 05 b9 00 00       	call   c0016fd8 <KeDisablePreemption()>
c000b6d3:	50                   	push   eax
c000b6d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6d7:	0f af c6             	imul   eax,esi
c000b6da:	05 ff 0f 00 00       	add    eax,0xfff
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	50                   	push   eax
c000b6e3:	55                   	push   ebp
c000b6e4:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b6ea:	e8 d3 8b 00 00       	call   c00142c2 <VAS::canLockPages(unsigned long, int)>
c000b6ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6fb:	74 1f                	je     c000b71c <VCache::read(unsigned long long, int, void*)+0x76>
c000b6fd:	50                   	push   eax
c000b6fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b701:	0f af c6             	imul   eax,esi
c000b704:	05 ff 0f 00 00       	add    eax,0xfff
c000b709:	99                   	cdq    
c000b70a:	f7 ff                	idiv   edi
c000b70c:	50                   	push   eax
c000b70d:	55                   	push   ebp
c000b70e:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b714:	e8 a3 8f 00 00       	call   c00146bc <VAS::lockPages(unsigned long, int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b720:	74 0e                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	53                   	push   ebx
c000b726:	e8 e1 fc ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 fe 01             	cmp    esi,0x1
c000b733:	0f 85 ef 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b739:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b73c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b743:	0f 85 df 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b749:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b74c:	89 fe                	mov    esi,edi
c000b74e:	f7 de                	neg    esi
c000b750:	89 f0                	mov    eax,esi
c000b752:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b756:	c1 f8 1f             	sar    eax,0x1f
c000b759:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b75d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b761:	89 f0                	mov    eax,esi
c000b763:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b767:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b76b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b76f:	89 f2                	mov    edx,esi
c000b771:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b776:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b77a:	74 0c                	je     c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b77c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b77f:	75 07                	jne    c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b781:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b784:	74 4e                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	66 90                	xchg   ax,ax
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b78f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b792:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b795:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b797:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b79a:	57                   	push   edi
c000b79b:	52                   	push   edx
c000b79c:	50                   	push   eax
c000b79d:	51                   	push   ecx
c000b79e:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b7a1:	83 c4 20             	add    esp,0x20
c000b7a4:	89 c7                	mov    edi,eax
c000b7a6:	85 c0                	test   eax,eax
c000b7a8:	74 2a                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 8c 3d 02 c0       	push   0xc0023d8c
c000b7b2:	e8 c5 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7bf:	0f 84 b3 00 00 00    	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7c5:	51                   	push   ecx
c000b7c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7c9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ce:	e9 8d 00 00 00       	jmp    c000b860 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7d3:	90                   	nop
c000b7d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7d7:	89 ef                	mov    edi,ebp
c000b7d9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e2:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7e9:	0f af f1             	imul   esi,ecx
c000b7ec:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7f6:	74 24                	je     c000b81c <VCache::read(unsigned long long, int, void*)+0x176>
c000b7f8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7fd:	52                   	push   edx
c000b7fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b801:	05 ff 0f 00 00       	add    eax,0xfff
c000b806:	99                   	cdq    
c000b807:	f7 f9                	idiv   ecx
c000b809:	50                   	push   eax
c000b80a:	55                   	push   ebp
c000b80b:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b811:	e8 e8 8a 00 00       	call   c00142fe <VAS::unlockPages(unsigned long, int)>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	8d 76 00             	lea    esi,[esi+0x0]
c000b81c:	e8 df b7 00 00       	call   c0017000 <KeRestorePreemption()>
c000b821:	31 ff                	xor    edi,edi
c000b823:	eb 5b                	jmp    c000b880 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	53                   	push   ebx
c000b82c:	e8 cb fb ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b834:	8b 10                	mov    edx,DWORD PTR [eax]
c000b836:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b839:	56                   	push   esi
c000b83a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b83e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b842:	50                   	push   eax
c000b843:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b846:	83 c4 20             	add    esp,0x20
c000b849:	89 c7                	mov    edi,eax
c000b84b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b850:	74 26                	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b852:	50                   	push   eax
c000b853:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b857:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	b9 00 10 00 00       	mov    ecx,0x1000
c000b865:	99                   	cdq    
c000b866:	f7 f9                	idiv   ecx
c000b868:	50                   	push   eax
c000b869:	55                   	push   ebp
c000b86a:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b870:	e8 89 8a 00 00       	call   c00142fe <VAS::unlockPages(unsigned long, int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	e8 83 b7 00 00       	call   c0017000 <KeRestorePreemption()>
c000b87d:	8d 76 00             	lea    esi,[esi+0x0]
c000b880:	83 c4 2c             	add    esp,0x2c
c000b883:	89 f8                	mov    eax,edi
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::putrect(int, int, int, int, unsigned int)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	56                   	push   esi
c000b88d:	53                   	push   ebx
c000b88e:	83 ec 1c             	sub    esp,0x1c
c000b891:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b899:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b89d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b8a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8a9:	01 df                	add    edi,ebx
c000b8ab:	39 fb                	cmp    ebx,edi
c000b8ad:	7d 1f                	jge    c000b8ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b8af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b8b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b8b7:	7d 12                	jge    c000b8cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b8b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8bf:	53                   	push   ebx
c000b8c0:	55                   	push   ebp
c000b8c1:	45                   	inc    ebp
c000b8c2:	56                   	push   esi
c000b8c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	eb e8                	jmp    c000b8b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8cb:	43                   	inc    ebx
c000b8cc:	eb dd                	jmp    c000b8ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	31 ff                	xor    edi,edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b902:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b906:	01 f9                	add    ecx,edi
c000b908:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b90c:	7d 2f                	jge    c000b93d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b90e:	31 f6                	xor    esi,esi
c000b910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b914:	01 f2                	add    edx,esi
c000b916:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b91a:	7d 1a                	jge    c000b936 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b91c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b91f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b922:	46                   	inc    esi
c000b923:	51                   	push   ecx
c000b924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b928:	52                   	push   edx
c000b929:	55                   	push   ebp
c000b92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b934:	eb da                	jmp    c000b910 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b936:	47                   	inc    edi
c000b937:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b93b:	eb c5                	jmp    c000b902 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Video::blit(unsigned int*, int, int, int, int)>:
c000b946:	55                   	push   ebp
c000b947:	57                   	push   edi
c000b948:	56                   	push   esi
c000b949:	53                   	push   ebx
c000b94a:	83 ec 1c             	sub    esp,0x1c
c000b94d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b951:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b955:	85 c0                	test   eax,eax
c000b957:	79 02                	jns    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b959:	31 c0                	xor    eax,eax
c000b95b:	c1 e0 02             	shl    eax,0x2
c000b95e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b96a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b96e:	39 d8                	cmp    eax,ebx
c000b970:	7e 49                	jle    c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b972:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b978:	7c 41                	jl     c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b97a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b97e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b986:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b98a:	39 f9                	cmp    ecx,edi
c000b98c:	7e 22                	jle    c000b9b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b98e:	83 c5 04             	add    ebp,0x4
c000b991:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b997:	7c 14                	jl     c000b9ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b999:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b99b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b99e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a6:	56                   	push   esi
c000b9a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	47                   	inc    edi
c000b9ae:	eb d2                	jmp    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b4:	43                   	inc    ebx
c000b9b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b9b9:	eb ab                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b9bb:	83 c4 1c             	add    esp,0x1c
c000b9be:	5b                   	pop    ebx
c000b9bf:	5e                   	pop    esi
c000b9c0:	5f                   	pop    edi
c000b9c1:	5d                   	pop    ebp
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Video::clearScreen(unsigned int)>:
c000b9c4:	57                   	push   edi
c000b9c5:	56                   	push   esi
c000b9c6:	53                   	push   ebx
c000b9c7:	31 db                	xor    ebx,ebx
c000b9c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9cd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9d3:	7e 1f                	jle    c000b9f4 <Video::clearScreen(unsigned int)+0x30>
c000b9d5:	31 ff                	xor    edi,edi
c000b9d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9dd:	7e 12                	jle    c000b9f1 <Video::clearScreen(unsigned int)+0x2d>
c000b9df:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9e5:	53                   	push   ebx
c000b9e6:	57                   	push   edi
c000b9e7:	47                   	inc    edi
c000b9e8:	56                   	push   esi
c000b9e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	eb e6                	jmp    c000b9d7 <Video::clearScreen(unsigned int)+0x13>
c000b9f1:	43                   	inc    ebx
c000b9f2:	eb d9                	jmp    c000b9cd <Video::clearScreen(unsigned int)+0x9>
c000b9f4:	5b                   	pop    ebx
c000b9f5:	5e                   	pop    esi
c000b9f6:	5f                   	pop    edi
c000b9f7:	c3                   	ret    

c000b9f8 <Video::putpixel(int, int, unsigned int)>:
c000b9f8:	c7 44 24 04 c4 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023dc4
c000ba00:	e9 69 46 00 00       	jmp    c001006e <KePanic(char const*)>
c000ba05:	90                   	nop

c000ba06 <Video::readPixelApprox(int, int)>:
c000ba06:	83 ec 18             	sub    esp,0x18
c000ba09:	68 e5 3d 02 c0       	push   0xc0023de5
c000ba0e:	e8 5b 46 00 00       	call   c001006e <KePanic(char const*)>
c000ba13:	31 c0                	xor    eax,eax
c000ba15:	83 c4 1c             	add    esp,0x1c
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Video::Video(char const*)>:
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba21:	83 ec 08             	sub    esp,0x8
c000ba24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba28:	50                   	push   eax
c000ba29:	e8 88 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	ba 88 3e 02 c0       	mov    edx,0xc0023e88
c000ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3a:	89 10                	mov    DWORD PTR [eax],edx
c000ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba40:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	ba 88 3e 02 c0       	mov    edx,0xc0023e88
c000ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5c:	89 10                	mov    DWORD PTR [eax],edx
c000ba5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	50                   	push   eax
c000ba66:	e8 eb de ff ff       	call   c0009956 <Device::~Device()>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	90                   	nop
c000ba6f:	83 c4 0c             	add    esp,0xc
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <Video::~Video()>:
c000ba74:	83 ec 0c             	sub    esp,0xc
c000ba77:	83 ec 0c             	sub    esp,0xc
c000ba7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba7e:	e8 cd ff ff ff       	call   c000ba50 <Video::~Video()>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 ec 08             	sub    esp,0x8
c000ba89:	68 64 01 00 00       	push   0x164
c000ba8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba92:	e8 52 19 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000ba97:	83 c4 10             	add    esp,0x10
c000ba9a:	83 c4 0c             	add    esp,0xc
c000ba9d:	c3                   	ret    

c000ba9e <Video::isMonochrome()>:
c000ba9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Video::getWidth()>:
c000baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bab4:	c3                   	ret    
c000bab5:	90                   	nop

c000bab6 <Video::getHeight()>:
c000bab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bac2:	55                   	push   ebp
c000bac3:	57                   	push   edi
c000bac4:	56                   	push   esi
c000bac5:	53                   	push   ebx
c000bac6:	83 ec 2c             	sub    esp,0x2c
c000bac9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bacd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bad1:	83 f8 01             	cmp    eax,0x1
c000bad4:	19 c9                	sbb    ecx,ecx
c000bad6:	31 db                	xor    ebx,ebx
c000bad8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000badc:	89 cd                	mov    ebp,ecx
c000bade:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bae6:	f7 d5                	not    ebp
c000bae8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000baf2:	01 d8                	add    eax,ebx
c000baf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baf8:	56                   	push   esi
c000baf9:	e8 b8 ff ff ff       	call   c000bab6 <Video::getHeight()>
c000bafe:	59                   	pop    ecx
c000baff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bb03:	7e 70                	jle    c000bb75 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bb05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bb0d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bb10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb18:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bb1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb23:	89 f8                	mov    eax,edi
c000bb25:	83 c0 20             	add    eax,0x20
c000bb28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb2c:	56                   	push   esi
c000bb2d:	e8 78 ff ff ff       	call   c000baaa <Video::getWidth()>
c000bb32:	5a                   	pop    edx
c000bb33:	39 c7                	cmp    edi,eax
c000bb35:	7d 34                	jge    c000bb6b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb37:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb3c:	74 05                	je     c000bb43 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb40:	55                   	push   ebp
c000bb41:	eb 0d                	jmp    c000bb50 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb43:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb48:	74 12                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb54:	57                   	push   edi
c000bb55:	56                   	push   esi
c000bb56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb59:	83 c4 10             	add    esp,0x10
c000bb5c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb60:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb64:	47                   	inc    edi
c000bb65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb69:	75 c1                	jne    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb6b:	43                   	inc    ebx
c000bb6c:	83 fb 20             	cmp    ebx,0x20
c000bb6f:	0f 85 79 ff ff ff    	jne    c000baee <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb75:	83 c4 2c             	add    esp,0x2c
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	90                   	nop

c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb7e:	55                   	push   ebp
c000bb7f:	57                   	push   edi
c000bb80:	56                   	push   esi
c000bb81:	53                   	push   ebx
c000bb82:	83 ec 48             	sub    esp,0x48
c000bb85:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb89:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb8d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb91:	c1 e0 08             	shl    eax,0x8
c000bb94:	01 d0                	add    eax,edx
c000bb96:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bba2:	c1 e0 08             	shl    eax,0x8
c000bba5:	01 d0                	add    eax,edx
c000bba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbaf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bbb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bbb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbbc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bbc3:	50                   	push   eax
c000bbc4:	e8 96 41 00 00       	call   c000fd5f <malloc>
c000bbc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbcd:	83 c4 10             	add    esp,0x10
c000bbd0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd5:	75 10                	jne    c000bbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbd7:	83 ec 0c             	sub    esp,0xc
c000bbda:	68 10 3e 02 c0       	push   0xc0023e10
c000bbdf:	e8 8a 44 00 00       	call   c001006e <KePanic(char const*)>
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	51                   	push   ecx
c000bbe8:	51                   	push   ecx
c000bbe9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbed:	50                   	push   eax
c000bbee:	68 20 3e 02 c0       	push   0xc0023e20
c000bbf3:	e8 84 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbf8:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbfb:	83 e0 20             	and    eax,0x20
c000bbfe:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bc02:	85 c0                	test   eax,eax
c000bc04:	5e                   	pop    esi
c000bc05:	0f 94 c0             	sete   al
c000bc08:	5f                   	pop    edi
c000bc09:	0f b6 c0             	movzx  eax,al
c000bc0c:	be 12 00 00 00       	mov    esi,0x12
c000bc11:	50                   	push   eax
c000bc12:	68 2a 3e 02 c0       	push   0xc0023e2a
c000bc17:	e8 60 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc1c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	89 d0                	mov    eax,edx
c000bc25:	85 d2                	test   edx,edx
c000bc27:	74 11                	je     c000bc3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc29:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc2d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc31:	c1 fe 03             	sar    esi,0x3
c000bc34:	0f af f1             	imul   esi,ecx
c000bc37:	83 c6 12             	add    esi,0x12
c000bc3a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc3f:	74 07                	je     c000bc48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc41:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc46:	75 12                	jne    c000bc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	68 38 3e 02 c0       	push   0xc0023e38
c000bc50:	e8 27 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc55:	e9 a0 02 00 00       	jmp    c000befa <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc5a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc5e:	83 f9 02             	cmp    ecx,0x2
c000bc61:	74 0e                	je     c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc63:	83 f9 0a             	cmp    ecx,0xa
c000bc66:	0f 84 c8 00 00 00    	je     c000bd34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc6c:	e9 72 02 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc71:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc76:	75 0e                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc78:	84 c0                	test   al,al
c000bc7a:	75 0a                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc7c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc7f:	83 e8 18             	sub    eax,0x18
c000bc82:	a8 f7                	test   al,0xf7
c000bc84:	74 0d                	je     c000bc93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	68 4d 3e 02 c0       	push   0xc0023e4d
c000bc8e:	e9 58 02 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc93:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bca0:	31 c0                	xor    eax,eax
c000bca2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bca6:	89 c7                	mov    edi,eax
c000bca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bcb0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bcb5:	75 15                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcb7:	99                   	cdq    
c000bcb8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bcbc:	85 d2                	test   edx,edx
c000bcbe:	75 0c                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcc0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcc4:	29 c7                	sub    edi,eax
c000bcc6:	4f                   	dec    edi
c000bcc7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bccc:	31 d2                	xor    edx,edx
c000bcce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcd2:	75 08                	jne    c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcd4:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcd9:	c1 e2 18             	shl    edx,0x18
c000bcdc:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bce1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bce5:	c1 e1 10             	shl    ecx,0x10
c000bce8:	8d 47 01             	lea    eax,[edi+0x1]
c000bceb:	89 cd                	mov    ebp,ecx
c000bced:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcf2:	c1 e1 08             	shl    ecx,0x8
c000bcf5:	09 e9                	or     ecx,ebp
c000bcf7:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcfb:	09 e9                	or     ecx,ebp
c000bcfd:	09 d1                	or     ecx,edx
c000bcff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bd03:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bd06:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bd0a:	c1 fa 03             	sar    edx,0x3
c000bd0d:	01 d6                	add    esi,edx
c000bd0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd13:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bd17:	7e 04                	jle    c000bd1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bd19:	89 c7                	mov    edi,eax
c000bd1b:	eb 93                	jmp    c000bcb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bd1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd25:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd29:	0f 8f 77 ff ff ff    	jg     c000bca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd2f:	e9 d3 01 00 00       	jmp    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd34:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd39:	75 0e                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3b:	85 d2                	test   edx,edx
c000bd3d:	75 0a                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd42:	83 e8 18             	sub    eax,0x18
c000bd45:	a8 f7                	test   al,0xf7
c000bd47:	74 0d                	je     c000bd56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd49:	83 ec 0c             	sub    esp,0xc
c000bd4c:	68 5b 3e 02 c0       	push   0xc0023e5b
c000bd51:	e9 95 01 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd66:	31 c9                	xor    ecx,ecx
c000bd68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd6c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd70:	0f 8e 91 01 00 00    	jle    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd76:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd7a:	0f 8d 87 01 00 00    	jge    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd80:	8d 46 01             	lea    eax,[esi+0x1]
c000bd83:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd8b:	83 fd 7f             	cmp    ebp,0x7f
c000bd8e:	89 e8                	mov    eax,ebp
c000bd90:	0f 8e 9d 00 00 00    	jle    c000be33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd96:	83 e0 7f             	and    eax,0x7f
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd9f:	40                   	inc    eax
c000bda0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bda8:	75 0a                	jne    c000bdb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bdaa:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bdaf:	89 ea                	mov    edx,ebp
c000bdb1:	c1 e2 18             	shl    edx,0x18
c000bdb4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bdb9:	c1 e0 10             	shl    eax,0x10
c000bdbc:	89 c7                	mov    edi,eax
c000bdbe:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdc3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdc7:	c1 e0 08             	shl    eax,0x8
c000bdca:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdce:	09 f8                	or     eax,edi
c000bdd0:	31 f6                	xor    esi,esi
c000bdd2:	09 c5                	or     ebp,eax
c000bdd4:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdd9:	09 d5                	or     ebp,edx
c000bddb:	85 ff                	test   edi,edi
c000bddd:	75 1d                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bddf:	89 c8                	mov    eax,ecx
c000bde1:	99                   	cdq    
c000bde2:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bde6:	85 d2                	test   edx,edx
c000bde8:	75 12                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdee:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdf2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdf6:	49                   	dec    ecx
c000bdf7:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	8d 51 01             	lea    edx,[ecx+0x1]
c000be03:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000be06:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000be0a:	8d 46 01             	lea    eax,[esi+0x1]
c000be0d:	7e 06                	jle    c000be15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000be0f:	89 c6                	mov    esi,eax
c000be11:	89 d1                	mov    ecx,edx
c000be13:	eb c6                	jmp    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000be15:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be19:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be1d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be21:	c1 f8 03             	sar    eax,0x3
c000be24:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be28:	89 d1                	mov    ecx,edx
c000be2a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be2e:	e9 35 ff ff ff       	jmp    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be33:	8d 45 01             	lea    eax,[ebp+0x1]
c000be36:	31 f6                	xor    esi,esi
c000be38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be45:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be4a:	75 1d                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be4c:	89 c8                	mov    eax,ecx
c000be4e:	99                   	cdq    
c000be4f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be53:	85 d2                	test   edx,edx
c000be55:	75 12                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be5b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be5f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be63:	49                   	dec    ecx
c000be64:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be69:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be71:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be75:	75 10                	jne    c000be87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7b:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be80:	c1 e7 18             	shl    edi,0x18
c000be83:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8b:	8d 51 01             	lea    edx,[ecx+0x1]
c000be8e:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be93:	c1 e0 10             	shl    eax,0x10
c000be96:	89 c7                	mov    edi,eax
c000be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be9c:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000bea1:	c1 e0 08             	shl    eax,0x8
c000bea4:	09 f8                	or     eax,edi
c000bea6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000beaa:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000beae:	09 f8                	or     eax,edi
c000beb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000beb4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000beb8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000bebb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bebf:	c1 f8 03             	sar    eax,0x3
c000bec2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bec6:	8d 46 01             	lea    eax,[esi+0x1]
c000bec9:	39 f5                	cmp    ebp,esi
c000becb:	7e 09                	jle    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000becd:	89 c6                	mov    esi,eax
c000becf:	89 d1                	mov    ecx,edx
c000bed1:	e9 6f ff ff ff       	jmp    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000bed6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beda:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bede:	e9 45 ff ff ff       	jmp    c000be28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bee3:	52                   	push   edx
c000bee4:	52                   	push   edx
c000bee5:	51                   	push   ecx
c000bee6:	68 6a 3e 02 c0       	push   0xc0023e6a
c000beeb:	e8 8c b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bef0:	58                   	pop    eax
c000bef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef5:	e8 75 3e 00 00       	call   c000fd6f <free>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bf05:	eb 14                	jmp    c000bf1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bf07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf0b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bf0f:	89 18                	mov    DWORD PTR [eax],ebx
c000bf11:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bf15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf19:	89 18                	mov    DWORD PTR [eax],ebx
c000bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf1f:	83 c4 3c             	add    esp,0x3c
c000bf22:	5b                   	pop    ebx
c000bf23:	5e                   	pop    esi
c000bf24:	5f                   	pop    edi
c000bf25:	5d                   	pop    ebp
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf28:	55                   	push   ebp
c000bf29:	57                   	push   edi
c000bf2a:	56                   	push   esi
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 28             	sub    esp,0x28
c000bf2f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf33:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf37:	50                   	push   eax
c000bf38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf3c:	50                   	push   eax
c000bf3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf45:	57                   	push   edi
c000bf46:	e8 33 fc ff ff       	call   c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf4b:	83 c4 20             	add    esp,0x20
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf54:	74 3a                	je     c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf56:	89 c6                	mov    esi,eax
c000bf58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf60:	39 d8                	cmp    eax,ebx
c000bf62:	7e 2c                	jle    c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf70:	39 e8                	cmp    eax,ebp
c000bf72:	7e 19                	jle    c000bf8d <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf74:	83 c6 04             	add    esi,0x4
c000bf77:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf7a:	85 c0                	test   eax,eax
c000bf7c:	79 0c                	jns    c000bf8a <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf7e:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf80:	50                   	push   eax
c000bf81:	53                   	push   ebx
c000bf82:	55                   	push   ebp
c000bf83:	57                   	push   edi
c000bf84:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	45                   	inc    ebp
c000bf8b:	eb db                	jmp    c000bf68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf8d:	43                   	inc    ebx
c000bf8e:	eb c8                	jmp    c000bf58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf90:	83 c4 1c             	add    esp,0x1c
c000bf93:	5b                   	pop    ebx
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	5d                   	pop    ebp
c000bf97:	c3                   	ret    

c000bf98 <ACPI::close(int, int, void*)>:
c000bf98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf9d:	c3                   	ret    
c000bf9e:	66 90                	xchg   ax,ax

c000bfa0 <loadACPITables(unsigned char*)>:
c000bfa0:	57                   	push   edi
c000bfa1:	56                   	push   esi
c000bfa2:	53                   	push   ebx
c000bfa3:	83 ec 60             	sub    esp,0x60
c000bfa6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bfab:	0f 84 43 02 00 00    	je     c000c1f4 <loadACPITables(unsigned char*)+0x254>
c000bfb1:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bfb6:	0f b6 c0             	movzx  eax,al
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	74 7b                	je     c000c038 <loadACPITables(unsigned char*)+0x98>
c000bfbd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfc1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfcc:	83 e8 24             	sub    eax,0x24
c000bfcf:	c1 e8 03             	shr    eax,0x3
c000bfd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfd6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfde:	66 90                	xchg   ax,ax
c000bfe0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfe8:	0f 8d ba 00 00 00    	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000bfee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bff2:	83 c0 24             	add    eax,0x24
c000bff5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bffd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c001:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c005:	c1 e0 03             	shl    eax,0x3
c000c008:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c00c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c013:	8b 00                	mov    eax,DWORD PTR [eax]
c000c015:	89 c1                	mov    ecx,eax
c000c017:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c01c:	8d 50 01             	lea    edx,[eax+0x1]
c000c01f:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c025:	89 ca                	mov    edx,ecx
c000c027:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c02e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c033:	eb ab                	jmp    c000bfe0 <loadACPITables(unsigned char*)+0x40>
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c03c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c047:	83 e8 24             	sub    eax,0x24
c000c04a:	c1 e8 02             	shr    eax,0x2
c000c04d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c051:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c059:	8d 76 00             	lea    esi,[esi+0x0]
c000c05c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c060:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c064:	7d 42                	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000c066:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c06a:	83 c0 24             	add    eax,0x24
c000c06d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c071:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c075:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c079:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c07d:	c1 e0 02             	shl    eax,0x2
c000c080:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c084:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c088:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c08a:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c08f:	8d 50 01             	lea    edx,[eax+0x1]
c000c092:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c098:	89 ca                	mov    edx,ecx
c000c09a:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c0a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c0a6:	eb b4                	jmp    c000c05c <loadACPITables(unsigned char*)+0xbc>
c000c0a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c0b0:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c0b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c0b9:	0f 8d 39 01 00 00    	jge    c000c1f8 <loadACPITables(unsigned char*)+0x258>
c000c0bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c3:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c0ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0da:	25 ff 0f 00 00       	and    eax,0xfff
c000c0df:	89 c6                	mov    esi,eax
c000c0e1:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	6a 01                	push   0x1
c000c0ec:	e8 7c 74 00 00       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c000c0f1:	83 c4 10             	add    esp,0x10
c000c0f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	6a 01                	push   0x1
c000c103:	6a 01                	push   0x1
c000c105:	50                   	push   eax
c000c106:	52                   	push   edx
c000c107:	53                   	push   ebx
c000c108:	e8 2d 7d 00 00       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c10d:	83 c4 20             	add    esp,0x20
c000c110:	09 f0                	or     eax,esi
c000c112:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c116:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c11a:	c1 e0 03             	shl    eax,0x3
c000c11d:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c12e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c146:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c14a:	89 c6                	mov    esi,eax
c000c14c:	89 d7                	mov    edi,edx
c000c14e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c150:	89 c8                	mov    eax,ecx
c000c152:	89 fa                	mov    edx,edi
c000c154:	89 f3                	mov    ebx,esi
c000c156:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c15a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c15e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c16d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c171:	05 00 10 00 00       	add    eax,0x1000
c000c176:	c1 e8 0c             	shr    eax,0xc
c000c179:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c189:	25 ff 0f 00 00       	and    eax,0xfff
c000c18e:	89 c6                	mov    esi,eax
c000c190:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c196:	83 ec 0c             	sub    esp,0xc
c000c199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c19d:	e8 cb 73 00 00       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c1a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c1af:	83 ec 0c             	sub    esp,0xc
c000c1b2:	6a 01                	push   0x1
c000c1b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b8:	50                   	push   eax
c000c1b9:	52                   	push   edx
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 7a 7c 00 00       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1c0:	83 c4 20             	add    esp,0x20
c000c1c3:	09 f0                	or     eax,esi
c000c1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cd:	83 ec 0c             	sub    esp,0xc
c000c1d0:	50                   	push   eax
c000c1d1:	e8 9f 76 00 00       	call   c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1e1:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c1e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1ed:	e9 be fe ff ff       	jmp    c000c0b0 <loadACPITables(unsigned char*)+0x110>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	90                   	nop
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	83 c4 60             	add    esp,0x60
c000c1fb:	5b                   	pop    ebx
c000c1fc:	5e                   	pop    esi
c000c1fd:	5f                   	pop    edi
c000c1fe:	c3                   	ret    
c000c1ff:	90                   	nop

c000c200 <findRSDT(unsigned char*)>:
c000c200:	57                   	push   edi
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	83 ec 50             	sub    esp,0x50
c000c206:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c20b:	85 c0                	test   eax,eax
c000c20d:	75 0d                	jne    c000c21c <findRSDT(unsigned char*)+0x1c>
c000c20f:	b8 00 00 00 00       	mov    eax,0x0
c000c214:	e9 2b 01 00 00       	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c219:	8d 76 00             	lea    esi,[esi+0x0]
c000c21c:	89 e0                	mov    eax,esp
c000c21e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c222:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c22a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c23e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c242:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c246:	89 c6                	mov    esi,eax
c000c248:	89 d7                	mov    edi,edx
c000c24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c24c:	89 c8                	mov    eax,ecx
c000c24e:	89 fa                	mov    edx,edi
c000c250:	89 f3                	mov    ebx,esi
c000c252:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c256:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c25e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c262:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c266:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c276:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c282:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c286:	25 ff 0f 00 00       	and    eax,0xfff
c000c28b:	89 c6                	mov    esi,eax
c000c28d:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	6a 02                	push   0x2
c000c298:	e8 d0 72 00 00       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c2a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	6a 01                	push   0x1
c000c2af:	6a 02                	push   0x2
c000c2b1:	50                   	push   eax
c000c2b2:	52                   	push   edx
c000c2b3:	53                   	push   ebx
c000c2b4:	e8 81 7b 00 00       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2b9:	83 c4 20             	add    esp,0x20
c000c2bc:	09 f0                	or     eax,esi
c000c2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c2c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c6:	25 ff 0f 00 00       	and    eax,0xfff
c000c2cb:	89 c6                	mov    esi,eax
c000c2cd:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	6a 02                	push   0x2
c000c2d8:	e8 90 72 00 00       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	6a 01                	push   0x1
c000c2ef:	6a 02                	push   0x2
c000c2f1:	50                   	push   eax
c000c2f2:	52                   	push   edx
c000c2f3:	53                   	push   ebx
c000c2f4:	e8 41 7b 00 00       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2f9:	83 c4 20             	add    esp,0x20
c000c2fc:	09 f0                	or     eax,esi
c000c2fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c302:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c307:	85 c0                	test   eax,eax
c000c309:	75 11                	jne    c000c31c <findRSDT(unsigned char*)+0x11c>
c000c30b:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c316:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c31a:	eb 24                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c31c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c321:	83 f8 02             	cmp    eax,0x2
c000c324:	75 12                	jne    c000c338 <findRSDT(unsigned char*)+0x138>
c000c326:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c32d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c331:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c335:	eb 09                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c337:	90                   	nop
c000c338:	b8 00 00 00 00       	mov    eax,0x0
c000c33d:	eb 05                	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c33f:	90                   	nop
c000c340:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c344:	83 c4 50             	add    esp,0x50
c000c347:	5b                   	pop    ebx
c000c348:	5e                   	pop    esi
c000c349:	5f                   	pop    edi
c000c34a:	c3                   	ret    
c000c34b:	90                   	nop

c000c34c <findDataTable(unsigned char*, char*)>:
c000c34c:	83 ec 1c             	sub    esp,0x1c
c000c34f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c354:	75 0a                	jne    c000c360 <findDataTable(unsigned char*, char*)+0x14>
c000c356:	b8 00 00 00 00       	mov    eax,0x0
c000c35b:	eb 5f                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c368:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c36d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c371:	7d 41                	jge    c000c3b4 <findDataTable(unsigned char*, char*)+0x68>
c000c373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c377:	c1 e0 03             	shl    eax,0x3
c000c37a:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c37f:	83 ec 04             	sub    esp,0x4
c000c382:	6a 04                	push   0x4
c000c384:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c388:	50                   	push   eax
c000c389:	e8 f2 3f ff ff       	call   c0000380 <memcmp>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	85 c0                	test   eax,eax
c000c393:	0f 94 c0             	sete   al
c000c396:	0f b6 c0             	movzx  eax,al
c000c399:	85 c0                	test   eax,eax
c000c39b:	74 0f                	je     c000c3ac <findDataTable(unsigned char*, char*)+0x60>
c000c39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3a1:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c3a8:	eb 12                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c3aa:	66 90                	xchg   ax,ax
c000c3ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c3b1:	eb b5                	jmp    c000c368 <findDataTable(unsigned char*, char*)+0x1c>
c000c3b3:	90                   	nop
c000c3b4:	b8 00 00 00 00       	mov    eax,0x0
c000c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3bc:	83 c4 1c             	add    esp,0x1c
c000c3bf:	c3                   	ret    

c000c3c0 <scanMADT()>:
c000c3c0:	53                   	push   ebx
c000c3c1:	83 ec 38             	sub    esp,0x38
c000c3c4:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c3ce:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	68 cc 3e 02 c0       	push   0xc0023ecc
c000c3e0:	e8 97 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3e5:	83 c4 10             	add    esp,0x10
c000c3e8:	e8 49 dd 00 00       	call   c001a136 <HalFindRSDP()>
c000c3ed:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c3f2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3f7:	85 c0                	test   eax,eax
c000c3f9:	0f 84 59 04 00 00    	je     c000c858 <scanMADT()+0x498>
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	68 da 3e 02 c0       	push   0xc0023eda
c000c407:	e8 70 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c40c:	83 c4 10             	add    esp,0x10
c000c40f:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	50                   	push   eax
c000c418:	e8 e3 fd ff ff       	call   c000c200 <findRSDT(unsigned char*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c425:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 2a 04 00 00    	je     c000c85c <scanMADT()+0x49c>
c000c432:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c438:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c43d:	83 ec 04             	sub    esp,0x4
c000c440:	52                   	push   edx
c000c441:	50                   	push   eax
c000c442:	68 84 40 02 c0       	push   0xc0024084
c000c447:	e8 30 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c454:	83 ec 0c             	sub    esp,0xc
c000c457:	50                   	push   eax
c000c458:	e8 43 fb ff ff       	call   c000bfa0 <loadACPITables(unsigned char*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c465:	83 ec 08             	sub    esp,0x8
c000c468:	68 e9 3e 02 c0       	push   0xc0023ee9
c000c46d:	50                   	push   eax
c000c46e:	e8 d9 fe ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000c473:	83 c4 10             	add    esp,0x10
c000c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c47f:	0f 84 db 03 00 00    	je     c000c860 <scanMADT()+0x4a0>
c000c485:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c48d:	8d 76 00             	lea    esi,[esi+0x0]
c000c490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c497:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c49b:	0f 87 c7 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4a1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c4a9:	0f 87 b9 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4ca:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4e1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4e5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ea:	83 f8 02             	cmp    eax,0x2
c000c4ed:	0f 86 71 03 00 00    	jbe    c000c864 <scanMADT()+0x4a4>
c000c4f3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f8:	85 c0                	test   eax,eax
c000c4fa:	75 58                	jne    c000c554 <scanMADT()+0x194>
c000c4fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c500:	8d 50 01             	lea    edx,[eax+0x1]
c000c503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c507:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c50d:	0f b6 d2             	movzx  edx,dl
c000c510:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c514:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c518:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c522:	8d 50 01             	lea    edx,[eax+0x1]
c000c525:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c529:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c52f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c532:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c538:	0f b6 d2             	movzx  edx,dl
c000c53b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c543:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c549:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c54e:	e9 f1 02 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c553:	90                   	nop
c000c554:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c559:	83 f8 01             	cmp    eax,0x1
c000c55c:	0f 85 32 01 00 00    	jne    c000c694 <scanMADT()+0x2d4>
c000c562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c566:	8d 50 01             	lea    edx,[eax+0x1]
c000c569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56d:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c573:	0f b6 d2             	movzx  edx,dl
c000c576:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c57a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c57e:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c584:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c58d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c591:	01 d0                	add    eax,edx
c000c593:	83 c0 2c             	add    eax,0x2c
c000c596:	8a 00                	mov    al,BYTE PTR [eax]
c000c598:	0f b6 d0             	movzx  edx,al
c000c59b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5aa:	0f b6 c0             	movzx  eax,al
c000c5ad:	c1 e0 08             	shl    eax,0x8
c000c5b0:	89 d1                	mov    ecx,edx
c000c5b2:	09 c1                	or     ecx,eax
c000c5b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b8:	8d 50 02             	lea    edx,[eax+0x2]
c000c5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5c3:	0f b6 c0             	movzx  eax,al
c000c5c6:	c1 e0 10             	shl    eax,0x10
c000c5c9:	09 c1                	or     ecx,eax
c000c5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cf:	8d 50 03             	lea    edx,[eax+0x3]
c000c5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5da:	0f b6 c0             	movzx  eax,al
c000c5dd:	c1 e0 18             	shl    eax,0x18
c000c5e0:	09 c1                	or     ecx,eax
c000c5e2:	89 ca                	mov    edx,ecx
c000c5e4:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5e9:	0f b6 c0             	movzx  eax,al
c000c5ec:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c5f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c600:	01 d0                	add    eax,edx
c000c602:	83 c0 2c             	add    eax,0x2c
c000c605:	8a 00                	mov    al,BYTE PTR [eax]
c000c607:	0f b6 d0             	movzx  edx,al
c000c60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c611:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c615:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c619:	0f b6 c0             	movzx  eax,al
c000c61c:	c1 e0 08             	shl    eax,0x8
c000c61f:	89 d1                	mov    ecx,edx
c000c621:	09 c1                	or     ecx,eax
c000c623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c627:	8d 50 02             	lea    edx,[eax+0x2]
c000c62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c62e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c632:	0f b6 c0             	movzx  eax,al
c000c635:	c1 e0 10             	shl    eax,0x10
c000c638:	09 c1                	or     ecx,eax
c000c63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c63e:	8d 50 03             	lea    edx,[eax+0x3]
c000c641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c645:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c649:	0f b6 c0             	movzx  eax,al
c000c64c:	c1 e0 18             	shl    eax,0x18
c000c64f:	09 c1                	or     ecx,eax
c000c651:	89 ca                	mov    edx,ecx
c000c653:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c658:	0f b6 c0             	movzx  eax,al
c000c65b:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c662:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c667:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c66c:	83 c0 01             	add    eax,0x1
c000c66f:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c674:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c679:	0f b6 c0             	movzx  eax,al
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	50                   	push   eax
c000c680:	68 ee 3e 02 c0       	push   0xc0023eee
c000c685:	e8 f2 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	e9 b2 01 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c692:	66 90                	xchg   ax,ax
c000c694:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c699:	83 f8 02             	cmp    eax,0x2
c000c69c:	0f 85 ea 00 00 00    	jne    c000c78c <scanMADT()+0x3cc>
c000c6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6a6:	8d 50 01             	lea    edx,[eax+0x1]
c000c6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c6b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6bd:	8d 50 01             	lea    edx,[eax+0x1]
c000c6c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d8:	01 d0                	add    eax,edx
c000c6da:	83 c0 2c             	add    eax,0x2c
c000c6dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c6df:	0f b6 d0             	movzx  edx,al
c000c6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6f1:	0f b6 c0             	movzx  eax,al
c000c6f4:	c1 e0 08             	shl    eax,0x8
c000c6f7:	89 d1                	mov    ecx,edx
c000c6f9:	09 c1                	or     ecx,eax
c000c6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ff:	8d 50 02             	lea    edx,[eax+0x2]
c000c702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c706:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c70a:	0f b6 c0             	movzx  eax,al
c000c70d:	c1 e0 10             	shl    eax,0x10
c000c710:	09 c1                	or     ecx,eax
c000c712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c716:	8d 50 03             	lea    edx,[eax+0x3]
c000c719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c71d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c721:	0f b6 c0             	movzx  eax,al
c000c724:	c1 e0 18             	shl    eax,0x18
c000c727:	09 c8                	or     eax,ecx
c000c729:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c72d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	01 d0                	add    eax,edx
c000c73c:	83 c0 2c             	add    eax,0x2c
c000c73f:	8a 00                	mov    al,BYTE PTR [eax]
c000c741:	0f b6 c0             	movzx  eax,al
c000c744:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c748:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c74b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c74f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c753:	0f b6 d2             	movzx  edx,dl
c000c756:	c1 e2 08             	shl    edx,0x8
c000c759:	09 d0                	or     eax,edx
c000c75b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c760:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c765:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c76a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c76e:	88 90 a8 69 02 c0    	mov    BYTE PTR [eax-0x3ffd9658],dl
c000c774:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c779:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c77e:	66 89 84 12 20 ce 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd31e0],ax
c000c786:	e9 b9 00 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c78b:	90                   	nop
c000c78c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c791:	83 f8 04             	cmp    eax,0x4
c000c794:	0f 85 9a 00 00 00    	jne    c000c834 <scanMADT()+0x474>
c000c79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79e:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7bc:	01 d0                	add    eax,edx
c000c7be:	83 c0 2c             	add    eax,0x2c
c000c7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c7c3:	0f b6 d0             	movzx  edx,al
c000c7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7d5:	0f b6 c0             	movzx  eax,al
c000c7d8:	c1 e0 08             	shl    eax,0x8
c000c7db:	09 d0                	or     eax,edx
c000c7dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7f9:	0f b6 c0             	movzx  eax,al
c000c7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c804:	c1 e0 08             	shl    eax,0x8
c000c807:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c80b:	89 c1                	mov    ecx,eax
c000c80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c811:	c1 e0 18             	shl    eax,0x18
c000c814:	89 c3                	mov    ebx,eax
c000c816:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c81b:	8d 50 01             	lea    edx,[eax+0x1]
c000c81e:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c824:	09 d9                	or     ecx,ebx
c000c826:	89 ca                	mov    edx,ecx
c000c828:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c82f:	eb 13                	jmp    c000c844 <scanMADT()+0x484>
c000c831:	8d 76 00             	lea    esi,[esi+0x0]
c000c834:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c839:	83 f8 05             	cmp    eax,0x5
c000c83c:	75 06                	jne    c000c844 <scanMADT()+0x484>
c000c83e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c843:	90                   	nop
c000c844:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c84d:	01 d0                	add    eax,edx
c000c84f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c853:	e9 38 fc ff ff       	jmp    c000c490 <scanMADT()+0xd0>
c000c858:	90                   	nop
c000c859:	eb 0d                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85b:	90                   	nop
c000c85c:	90                   	nop
c000c85d:	eb 09                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85f:	90                   	nop
c000c860:	90                   	nop
c000c861:	eb 05                	jmp    c000c868 <scanMADT()+0x4a8>
c000c863:	90                   	nop
c000c864:	90                   	nop
c000c865:	8d 76 00             	lea    esi,[esi+0x0]
c000c868:	83 c4 38             	add    esp,0x38
c000c86b:	5b                   	pop    ebx
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop
c000c86e:	66 90                	xchg   ax,ax

c000c870 <ACPI::ACPI()>:
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c877:	83 ec 08             	sub    esp,0x8
c000c87a:	68 0a 3f 02 c0       	push   0xc0023f0a
c000c87f:	50                   	push   eax
c000c880:	e8 31 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	ba 28 41 02 c0       	mov    edx,0xc0024128
c000c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c891:	89 10                	mov    DWORD PTR [eax],edx
c000c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c897:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c8ba:	90                   	nop
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c8c0:	83 ec 2c             	sub    esp,0x2c
c000c8c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c8c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8d8:	88 d0                	mov    al,dl
c000c8da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8eb:	90                   	nop
c000c8ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8fa:	0f 8d b0 00 00 00    	jge    c000c9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c908:	83 c2 2a             	add    edx,0x2a
c000c90b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c90f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c914:	0f b7 c0             	movzx  eax,ax
c000c917:	39 c2                	cmp    edx,eax
c000c919:	0f 85 85 00 00 00    	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c91f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c923:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c927:	83 c2 2a             	add    edx,0x2a
c000c92a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c92e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c933:	0f b6 c0             	movzx  eax,al
c000c936:	39 c2                	cmp    edx,eax
c000c938:	75 6a                	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c93a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c93f:	85 c0                	test   eax,eax
c000c941:	74 3d                	je     c000c980 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c94b:	83 c2 2a             	add    edx,0x2a
c000c94e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c959:	39 c2                	cmp    edx,eax
c000c95b:	74 13                	je     c000c970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c95d:	83 ec 0c             	sub    esp,0xc
c000c960:	68 a8 40 02 c0       	push   0xc00240a8
c000c965:	e8 04 37 00 00       	call   c001006e <KePanic(char const*)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	68 0f 3f 02 c0       	push   0xc0023f0f
c000c978:	e8 f1 36 00 00       	call   c001006e <KePanic(char const*)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98c:	83 c2 2a             	add    edx,0x2a
c000c98f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c993:	8b 02                	mov    eax,DWORD PTR [edx]
c000c995:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c998:	89 01                	mov    DWORD PTR [ecx],eax
c000c99a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c99d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9a2:	66 90                	xchg   ax,ax
c000c9a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c9a9:	e9 3e ff ff ff       	jmp    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	90                   	nop
c000c9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9b5:	83 c4 2c             	add    esp,0x2c
c000c9b8:	c2 04 00             	ret    0x4
c000c9bb:	90                   	nop

c000c9bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c9bc:	83 ec 1c             	sub    esp,0x1c
c000c9bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9d0:	88 c8                	mov    al,cl
c000c9d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9d6:	88 d0                	mov    al,dl
c000c9d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ca03:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ca06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca0a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca19:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ca1d:	83 c0 01             	add    eax,0x1
c000ca20:	88 c1                	mov    cl,al
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	83 c2 2a             	add    edx,0x2a
c000ca29:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca31:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca42:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca50:	8d 50 01             	lea    edx,[eax+0x1]
c000ca53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca57:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca67:	3d 00 02 00 00       	cmp    eax,0x200
c000ca6c:	75 12                	jne    c000ca80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca6e:	83 ec 0c             	sub    esp,0xc
c000ca71:	68 1e 3f 02 c0       	push   0xc0023f1e
c000ca76:	e8 f3 35 00 00       	call   c001006e <KePanic(char const*)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	66 90                	xchg   ax,ax
c000ca80:	90                   	nop
c000ca81:	83 c4 1c             	add    esp,0x1c
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop
c000ca86:	66 90                	xchg   ax,ax

c000ca88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca88:	b8 00 00 00 00       	mov    eax,0x0
c000ca8d:	c3                   	ret    
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <ACPI::detectPCI()>:
c000ca90:	53                   	push   ebx
c000ca91:	83 ec 28             	sub    esp,0x28
c000ca94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca99:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca9e:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000caa3:	83 ec 08             	sub    esp,0x8
c000caa6:	68 3b 3f 02 c0       	push   0xc0023f3b
c000caab:	50                   	push   eax
c000caac:	e8 9b f8 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cab8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cabd:	74 0d                	je     c000cacc <ACPI::detectPCI()+0x3c>
c000cabf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cac9:	8d 76 00             	lea    esi,[esi+0x0]
c000cacc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cad8:	8a 00                	mov    al,BYTE PTR [eax]
c000cada:	0f b6 c0             	movzx  eax,al
c000cadd:	83 f8 01             	cmp    eax,0x1
c000cae0:	75 0e                	jne    c000caf0 <ACPI::detectPCI()+0x60>
c000cae2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cae7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caec:	eb 2e                	jmp    c000cb1c <ACPI::detectPCI()+0x8c>
c000caee:	66 90                	xchg   ax,ax
c000caf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caf4:	8a 00                	mov    al,BYTE PTR [eax]
c000caf6:	0f b6 c0             	movzx  eax,al
c000caf9:	83 f8 02             	cmp    eax,0x2
c000cafc:	75 1e                	jne    c000cb1c <ACPI::detectPCI()+0x8c>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 10                	je     c000cb1c <ACPI::detectPCI()+0x8c>
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	68 d8 40 02 c0       	push   0xc00240d8
c000cb14:	e8 55 35 00 00       	call   c001006e <KePanic(char const*)>
c000cb19:	83 c4 10             	add    esp,0x10
c000cb1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cb20:	83 f0 01             	xor    eax,0x1
c000cb23:	0f b6 c0             	movzx  eax,al
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 46                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb2a:	e8 01 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb38:	75 0e                	jne    c000cb48 <ACPI::detectPCI()+0xb8>
c000cb3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb44:	eb 2a                	jmp    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb46:	66 90                	xchg   ax,ax
c000cb48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb4d:	75 21                	jne    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb54:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb59:	85 c0                	test   eax,eax
c000cb5b:	74 13                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb5d:	83 ec 0c             	sub    esp,0xc
c000cb60:	68 d8 40 02 c0       	push   0xc00240d8
c000cb65:	e8 04 35 00 00       	call   c001006e <KePanic(char const*)>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb70:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb75:	85 c0                	test   eax,eax
c000cb77:	0f 84 87 00 00 00    	je     c000cc04 <ACPI::detectPCI()+0x174>
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	68 40 3f 02 c0       	push   0xc0023f40
c000cb85:	e8 9f 07 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000cb8a:	83 c4 10             	add    esp,0x10
c000cb8d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9c:	e8 be 31 00 00       	call   c000fd5f <malloc>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	89 c3                	mov    ebx,eax
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	53                   	push   ebx
c000cbaa:	e8 21 13 01 00       	call   c001ded0 <PCI::PCI()>
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cbb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbba:	83 ec 08             	sub    esp,0x8
c000cbbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbc1:	50                   	push   eax
c000cbc2:	e8 8d ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	83 c0 08             	add    eax,0x8
c000cbd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbda:	85 d2                	test   edx,edx
c000cbdc:	74 0a                	je     c000cbe8 <ACPI::detectPCI()+0x158>
c000cbde:	ba 01 00 00 00       	mov    edx,0x1
c000cbe3:	eb 0b                	jmp    c000cbf0 <ACPI::detectPCI()+0x160>
c000cbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe8:	ba 02 00 00 00       	mov    edx,0x2
c000cbed:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf0:	6a 00                	push   0x0
c000cbf2:	6a 00                	push   0x0
c000cbf4:	52                   	push   edx
c000cbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbf9:	ff d0                	call   eax
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	e9 91 00 00 00       	jmp    c000cc94 <ACPI::detectPCI()+0x204>
c000cc03:	90                   	nop
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	68 58 3f 02 c0       	push   0xc0023f58
c000cc0c:	e8 18 07 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cc1b:	83 ec 0c             	sub    esp,0xc
c000cc1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cc22:	e8 38 31 00 00       	call   c000fd5f <malloc>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	89 c3                	mov    ebx,eax
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	53                   	push   ebx
c000cc30:	e8 a1 1e 01 00       	call   c001ead6 <IDE::IDE()>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc40:	83 ec 08             	sub    esp,0x8
c000cc43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc47:	50                   	push   eax
c000cc48:	e8 07 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc7e:	83 c0 08             	add    eax,0x8
c000cc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc83:	6a 00                	push   0x0
c000cc85:	6a 00                	push   0x0
c000cc87:	6a 00                	push   0x0
c000cc89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8d:	ff d0                	call   eax
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	90                   	nop
c000cc95:	83 c4 28             	add    esp,0x28
c000cc98:	5b                   	pop    ebx
c000cc99:	c3                   	ret    
c000cc9a:	66 90                	xchg   ax,ax

c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	83 ec 0c             	sub    esp,0xc
c000cca2:	68 6d 3f 02 c0       	push   0xc0023f6d
c000cca7:	e8 c2 33 00 00       	call   c001006e <KePanic(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	90                   	nop
c000ccb0:	83 c4 0c             	add    esp,0xc
c000ccb3:	c3                   	ret    

c000ccb4 <ACPI::open(int, int, void*)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	81 ec 70 01 00 00    	sub    esp,0x170
c000ccbd:	83 ec 0c             	sub    esp,0xc
c000ccc0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ccc7:	e8 c4 fd ff ff       	call   c000ca90 <ACPI::detectPCI()>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	83 ec 0c             	sub    esp,0xc
c000ccd2:	68 00 41 02 c0       	push   0xc0024100
c000ccd7:	e8 4d 06 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	b8 4c 05 00 00       	mov    eax,0x54c
c000cce4:	8a 00                	mov    al,BYTE PTR [eax]
c000cce6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cced:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccf5:	83 f8 01             	cmp    eax,0x1
c000ccf8:	75 12                	jne    c000cd0c <ACPI::open(int, int, void*)+0x58>
c000ccfa:	83 ec 0c             	sub    esp,0xc
c000ccfd:	68 7e 3f 02 c0       	push   0xc0023f7e
c000cd02:	e8 f1 8e 00 00       	call   c0015bf8 <Thr::loadKernelSymbolTable(char const*)>
c000cd07:	83 c4 10             	add    esp,0x10
c000cd0a:	eb 34                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd0c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cd14:	3d bb 00 00 00       	cmp    eax,0xbb
c000cd19:	75 15                	jne    c000cd30 <ACPI::open(int, int, void*)+0x7c>
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	68 9c 3f 02 c0       	push   0xc0023f9c
c000cd23:	e8 d0 8e 00 00       	call   c0015bf8 <Thr::loadKernelSymbolTable(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	eb 13                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 ba 3f 02 c0       	push   0xc0023fba
c000cd38:	e8 31 33 00 00       	call   c001006e <KePanic(char const*)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd48:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd5d:	e8 fd 2f 00 00       	call   c000fd5f <malloc>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	89 c3                	mov    ebx,eax
c000cd67:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000cd6c:	83 ec 04             	sub    esp,0x4
c000cd6f:	50                   	push   eax
c000cd70:	68 d4 3f 02 c0       	push   0xc0023fd4
c000cd75:	53                   	push   ebx
c000cd76:	e8 0f b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd85:	83 ec 08             	sub    esp,0x8
c000cd88:	6a 01                	push   0x1
c000cd8a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd91:	e8 12 b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cda0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cda8:	75 16                	jne    c000cdc0 <ACPI::open(int, int, void*)+0x10c>
c000cdaa:	83 ec 0c             	sub    esp,0xc
c000cdad:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdb4:	e8 4d b4 ff ff       	call   c0008206 <File::close()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	eb 0a                	jmp    c000cdc8 <ACPI::open(int, int, void*)+0x114>
c000cdbe:	66 90                	xchg   ax,ax
c000cdc0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cdc8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cdd0:	74 1e                	je     c000cdf0 <ACPI::open(int, int, void*)+0x13c>
c000cdd2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cdd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cddb:	83 c0 08             	add    eax,0x8
c000cdde:	8b 00                	mov    eax,DWORD PTR [eax]
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdea:	ff d0                	call   eax
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	90                   	nop
c000cdf0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 2f                	je     c000ce30 <ACPI::open(int, int, void*)+0x17c>
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	68 f2 3f 02 c0       	push   0xc0023ff2
c000ce09:	e8 1b 05 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ce26:	e8 71 69 00 00       	call   c001379c <Virt::setupPageSwapping(int)>
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	68 0d 40 02 c0       	push   0xc002400d
c000ce38:	e8 ec 04 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	6a 13                	push   0x13
c000ce4c:	50                   	push   eax
c000ce4d:	e8 30 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce52:	83 c4 0c             	add    esp,0xc
c000ce55:	8d 76 00             	lea    esi,[esi+0x0]
c000ce58:	83 ec 0c             	sub    esp,0xc
c000ce5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce62:	50                   	push   eax
c000ce63:	e8 f4 54 01 00       	call   c002235c <LinkedList<Device>::isEmpty()>
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	0f 84 47 01 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x30c>
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce83:	50                   	push   eax
c000ce84:	e8 ef 54 01 00       	call   c0022378 <LinkedList<Device>::getFirstElement()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce93:	83 ec 0c             	sub    esp,0xc
c000ce96:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce9d:	50                   	push   eax
c000ce9e:	e8 dd 54 01 00       	call   c0022380 <LinkedList<Device>::removeFirst()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000cead:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ceb4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000cebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000cebf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000cec5:	ba 09 00 00 00       	mov    edx,0x9
c000ceca:	fc                   	cld    
c000cecb:	89 c7                	mov    edi,eax
c000cecd:	89 de                	mov    esi,ebx
c000cecf:	89 d1                	mov    ecx,edx
c000ced1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ceda:	50                   	push   eax
c000cedb:	83 ec 24             	sub    esp,0x24
c000cede:	89 e0                	mov    eax,esp
c000cee0:	89 c3                	mov    ebx,eax
c000cee2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000cee6:	ba 09 00 00 00       	mov    edx,0x9
c000ceeb:	89 df                	mov    edi,ebx
c000ceed:	89 c6                	mov    esi,eax
c000ceef:	89 d1                	mov    ecx,edx
c000cef1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cef3:	e8 c2 14 01 00       	call   c001e3ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cef8:	83 c4 30             	add    esp,0x30
c000cefb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000cf02:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cf0a:	0f 84 48 ff ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf10:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf25:	e8 35 2e 00 00       	call   c000fd5f <malloc>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	89 c3                	mov    ebx,eax
c000cf2f:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000cf34:	83 ec 04             	sub    esp,0x4
c000cf37:	50                   	push   eax
c000cf38:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf3f:	53                   	push   ebx
c000cf40:	e8 45 b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf59:	e8 0e b5 ff ff       	call   c000846c <File::exists()>
c000cf5e:	83 c4 10             	add    esp,0x10
c000cf61:	0f b6 c0             	movzx  eax,al
c000cf64:	85 c0                	test   eax,eax
c000cf66:	74 28                	je     c000cf90 <ACPI::open(int, int, void*)+0x2dc>
c000cf68:	83 ec 08             	sub    esp,0x8
c000cf6b:	6a 01                	push   0x1
c000cf6d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf74:	e8 bf 97 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf86:	50                   	push   eax
c000cf87:	e8 fe 99 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	90                   	nop
c000cf90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf98:	0f 84 ba fe ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cfa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa7:	83 c0 08             	add    eax,0x8
c000cfaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cfb6:	ff d0                	call   eax
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	e9 98 fe ff ff       	jmp    c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cfca:	50                   	push   eax
c000cfcb:	e8 88 53 01 00       	call   c0022358 <LinkedList<Device>::~LinkedList()>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	6a 01                	push   0x1
c000cfde:	68 27 40 02 c0       	push   0xc0024027
c000cfe3:	e8 50 97 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	83 ec 08             	sub    esp,0x8
c000cfee:	53                   	push   ebx
c000cfef:	50                   	push   eax
c000cff0:	e8 95 99 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cffd:	85 c0                	test   eax,eax
c000cfff:	0f 84 27 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d005:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000d00a:	85 c0                	test   eax,eax
c000d00c:	0f 84 1a 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d012:	83 ec 0c             	sub    esp,0xc
c000d015:	68 44 40 02 c0       	push   0xc0024044
c000d01a:	e8 0a 03 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d02d:	83 ec 0c             	sub    esp,0xc
c000d030:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d037:	e8 23 2d 00 00       	call   c000fd5f <malloc>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	89 c3                	mov    ebx,eax
c000d041:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000d046:	83 ec 04             	sub    esp,0x4
c000d049:	50                   	push   eax
c000d04a:	68 61 40 02 c0       	push   0xc0024061
c000d04f:	53                   	push   ebx
c000d050:	e8 35 b1 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d05f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d067:	74 1f                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d069:	83 ec 0c             	sub    esp,0xc
c000d06c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d073:	e8 f4 b3 ff ff       	call   c000846c <File::exists()>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	0f b6 c0             	movzx  eax,al
c000d07e:	85 c0                	test   eax,eax
c000d080:	74 06                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d082:	b0 01                	mov    al,0x1
c000d084:	eb 06                	jmp    c000d08c <ACPI::open(int, int, void*)+0x3d8>
c000d086:	66 90                	xchg   ax,ax
c000d088:	b0 00                	mov    al,0x0
c000d08a:	66 90                	xchg   ax,ax
c000d08c:	0f b6 c0             	movzx  eax,al
c000d08f:	85 c0                	test   eax,eax
c000d091:	74 25                	je     c000d0b8 <ACPI::open(int, int, void*)+0x404>
c000d093:	83 ec 08             	sub    esp,0x8
c000d096:	6a 01                	push   0x1
c000d098:	68 61 40 02 c0       	push   0xc0024061
c000d09d:	e8 96 96 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	83 ec 08             	sub    esp,0x8
c000d0a8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d0af:	50                   	push   eax
c000d0b0:	e8 d5 98 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c000d0b5:	83 c4 10             	add    esp,0x10
c000d0b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0c0:	74 2a                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0c2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0ca:	74 20                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0cc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d5:	83 c0 08             	add    eax,0x8
c000d0d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d0e4:	ff d0                	call   eax
c000d0e6:	83 c4 10             	add    esp,0x10
c000d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ec:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000d0f1:	83 ec 08             	sub    esp,0x8
c000d0f4:	68 7e 40 02 c0       	push   0xc002407e
c000d0f9:	50                   	push   eax
c000d0fa:	e8 4d f2 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d109:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d111:	74 19                	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d113:	83 ec 08             	sub    esp,0x8
c000d116:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d11d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d124:	e8 73 fb ff ff       	call   c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	b8 00 00 00 00       	mov    eax,0x0
c000d131:	81 c4 70 01 00 00    	add    esp,0x170
c000d137:	5b                   	pop    ebx
c000d138:	5e                   	pop    esi
c000d139:	5f                   	pop    edi
c000d13a:	c3                   	ret    
c000d13b:	90                   	nop

c000d13c <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d13c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d142:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d149:	89 c2                	mov    edx,eax
c000d14b:	c1 fa 1f             	sar    edx,0x1f
c000d14e:	83 ec 04             	sub    esp,0x4
c000d151:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d155:	51                   	push   ecx
c000d156:	52                   	push   edx
c000d157:	50                   	push   eax
c000d158:	e8 f7 29 00 00       	call   c000fb54 <KeItoa(long long, char*)>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	83 ec 08             	sub    esp,0x8
c000d163:	68 4c 41 02 c0       	push   0xc002414c
c000d168:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d16c:	50                   	push   eax
c000d16d:	e8 ce 34 ff ff       	call   c0000640 <strcpy>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	83 ec 08             	sub    esp,0x8
c000d178:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d17f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d183:	50                   	push   eax
c000d184:	e8 b7 36 ff ff       	call   c0000840 <strcat>
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	83 ec 08             	sub    esp,0x8
c000d18f:	68 5a 41 02 c0       	push   0xc002415a
c000d194:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d198:	50                   	push   eax
c000d199:	e8 a2 36 ff ff       	call   c0000840 <strcat>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	83 ec 08             	sub    esp,0x8
c000d1a4:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d1ab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1af:	50                   	push   eax
c000d1b0:	e8 8b 36 ff ff       	call   c0000840 <strcat>
c000d1b5:	83 c4 10             	add    esp,0x10
c000d1b8:	83 ec 08             	sub    esp,0x8
c000d1bb:	68 5d 41 02 c0       	push   0xc002415d
c000d1c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1c4:	50                   	push   eax
c000d1c5:	e8 76 36 ff ff       	call   c0000840 <strcat>
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	83 ec 08             	sub    esp,0x8
c000d1d0:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d1d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1db:	50                   	push   eax
c000d1dc:	e8 5f 36 ff ff       	call   c0000840 <strcat>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	83 ec 08             	sub    esp,0x8
c000d1e7:	68 5d 41 02 c0       	push   0xc002415d
c000d1ec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 4a 36 ff ff       	call   c0000840 <strcat>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	83 ec 08             	sub    esp,0x8
c000d1fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d200:	50                   	push   eax
c000d201:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d205:	50                   	push   eax
c000d206:	e8 35 36 ff ff       	call   c0000840 <strcat>
c000d20b:	83 c4 10             	add    esp,0x10
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d215:	50                   	push   eax
c000d216:	e8 53 2e 00 00       	call   c001006e <KePanic(char const*)>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d225:	c3                   	ret    

c000d226 <KeInitialiseAtexit()>:
c000d226:	83 ec 10             	sub    esp,0x10
c000d229:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d233:	6a 60                	push   0x60
c000d235:	6a 00                	push   0x0
c000d237:	68 60 d0 02 c0       	push   0xc002d060
c000d23c:	e8 af 32 ff ff       	call   c00004f0 <memset>
c000d241:	83 c4 1c             	add    esp,0x1c
c000d244:	c3                   	ret    

c000d245 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d245:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d24a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d24e:	89 14 85 60 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2fa0],edx
c000d255:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d259:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d260:	40                   	inc    eax
c000d261:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d266:	83 f8 17             	cmp    eax,0x17
c000d269:	7e 0d                	jle    c000d278 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d26b:	c7 44 24 04 5f 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc002415f
c000d273:	e9 f6 2d 00 00       	jmp    c001006e <KePanic(char const*)>
c000d278:	c3                   	ret    

c000d279 <KeExecuteAtexit()>:
c000d279:	53                   	push   ebx
c000d27a:	31 db                	xor    ebx,ebx
c000d27c:	83 ec 08             	sub    esp,0x8
c000d27f:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d285:	7e 50                	jle    c000d2d7 <KeExecuteAtexit()+0x5e>
c000d287:	8b 04 9d 60 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2fa0]
c000d28e:	85 c0                	test   eax,eax
c000d290:	74 42                	je     c000d2d4 <KeExecuteAtexit()+0x5b>
c000d292:	51                   	push   ecx
c000d293:	50                   	push   eax
c000d294:	53                   	push   ebx
c000d295:	68 78 41 02 c0       	push   0xc0024178
c000d29a:	e8 dd 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d29f:	58                   	pop    eax
c000d2a0:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d2a7:	ff 14 9d 60 d0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd2fa0]
c000d2ae:	c7 04 24 9a 41 02 c0 	mov    DWORD PTR [esp],0xc002419a
c000d2b5:	e8 c2 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d2ba:	c7 04 24 4c 48 02 c0 	mov    DWORD PTR [esp],0xc002484c
c000d2c1:	c7 04 9d 60 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2fa0],0x0
c000d2cc:	e8 ab 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d2d1:	83 c4 10             	add    esp,0x10
c000d2d4:	43                   	inc    ebx
c000d2d5:	eb a8                	jmp    c000d27f <KeExecuteAtexit()+0x6>
c000d2d7:	83 c4 08             	add    esp,0x8
c000d2da:	5b                   	pop    ebx
c000d2db:	c3                   	ret    

c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d2dc:	8b 15 c0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c0
c000d2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2e6:	21 d0                	and    eax,edx
c000d2e8:	0f 95 c0             	setne  al
c000d2eb:	c3                   	ret    

c000d2ec <KeInitialiseBootConfigurationFlags()>:
c000d2ec:	b8 00 05 00 00       	mov    eax,0x500
c000d2f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2f3:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c000d2f8:	90                   	nop
c000d2f9:	c3                   	ret    

c000d2fa <KeDisplaySplashScreen()>:
c000d2fa:	53                   	push   ebx
c000d2fb:	bb 01 00 00 00       	mov    ebx,0x1
c000d300:	83 ec 08             	sub    esp,0x8
c000d303:	43                   	inc    ebx
c000d304:	0f be 83 9d 41 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdbe63]
c000d30b:	85 c0                	test   eax,eax
c000d30d:	74 15                	je     c000d324 <KeDisplaySplashScreen()+0x2a>
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	6a 01                	push   0x1
c000d314:	53                   	push   ebx
c000d315:	6a 00                	push   0x0
c000d317:	6a 0f                	push   0xf
c000d319:	50                   	push   eax
c000d31a:	e8 91 e7 00 00       	call   c001bab0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d31f:	83 c4 20             	add    esp,0x20
c000d322:	eb df                	jmp    c000d303 <KeDisplaySplashScreen()+0x9>
c000d324:	83 c4 08             	add    esp,0x8
c000d327:	5b                   	pop    ebx
c000d328:	c3                   	ret    

c000d329 <KeSetBootMessage(char const*)>:
c000d329:	57                   	push   edi
c000d32a:	56                   	push   esi
c000d32b:	53                   	push   ebx
c000d32c:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d332:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d339:	68 9e 00 00 00       	push   0x9e
c000d33e:	6a 00                	push   0x0
c000d340:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d344:	56                   	push   esi
c000d345:	e8 a6 31 ff ff       	call   c00004f0 <memset>
c000d34a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d34d:	e8 1e 32 ff ff       	call   c0000570 <strlen>
c000d352:	ba 50 00 00 00       	mov    edx,0x50
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	29 c2                	sub    edx,eax
c000d35c:	31 c9                	xor    ecx,ecx
c000d35e:	83 e2 fe             	and    edx,0xfffffffe
c000d361:	01 f2                	add    edx,esi
c000d363:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d368:	84 c0                	test   al,al
c000d36a:	74 0a                	je     c000d376 <KeSetBootMessage(char const*)+0x4d>
c000d36c:	80 cc 07             	or     ah,0x7
c000d36f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d373:	41                   	inc    ecx
c000d374:	eb ed                	jmp    c000d363 <KeSetBootMessage(char const*)+0x3a>
c000d376:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d37b:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d380:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d382:	50                   	push   eax
c000d383:	50                   	push   eax
c000d384:	53                   	push   ebx
c000d385:	68 b2 41 02 c0       	push   0xc00241b2
c000d38a:	e8 ed 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d38f:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d395:	5b                   	pop    ebx
c000d396:	5e                   	pop    esi
c000d397:	5f                   	pop    edi
c000d398:	c3                   	ret    

c000d399 <__cxa_atexit>:
c000d399:	31 c0                	xor    eax,eax
c000d39b:	c3                   	ret    

c000d39c <__cxa_finalize>:
c000d39c:	c3                   	ret    

c000d39d <__stack_chk_fail>:
c000d39d:	55                   	push   ebp
c000d39e:	89 e5                	mov    ebp,esp
c000d3a0:	83 ec 10             	sub    esp,0x10
c000d3a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3a6:	68 c0 41 02 c0       	push   0xc00241c0
c000d3ab:	e8 cc 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3b0:	58                   	pop    eax
c000d3b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d3b4:	5a                   	pop    edx
c000d3b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d3b8:	68 c0 41 02 c0       	push   0xc00241c0
c000d3bd:	e8 ba 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3c2:	c7 04 24 c8 41 02 c0 	mov    DWORD PTR [esp],0xc00241c8
c000d3c9:	e8 a0 2c 00 00       	call   c001006e <KePanic(char const*)>
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	c9                   	leave  
c000d3d2:	c3                   	ret    

c000d3d3 <__cxa_pure_virtual>:
c000d3d3:	83 ec 18             	sub    esp,0x18
c000d3d6:	68 e0 41 02 c0       	push   0xc00241e0
c000d3db:	e8 8e 2c 00 00       	call   c001006e <KePanic(char const*)>
c000d3e0:	83 c4 1c             	add    esp,0x1c
c000d3e3:	c3                   	ret    

c000d3e4 <operator new[](unsigned long)>:
c000d3e4:	e9 76 29 00 00       	jmp    c000fd5f <malloc>

c000d3e9 <operator delete(void*, unsigned long)>:
c000d3e9:	e9 91 29 00 00       	jmp    c000fd7f <rfree>

c000d3ee <operator delete[](void*)>:
c000d3ee:	e9 8c 29 00 00       	jmp    c000fd7f <rfree>

c000d3f3 <operator delete[](void*, unsigned long)>:
c000d3f3:	e9 87 29 00 00       	jmp    c000fd7f <rfree>

c000d3f8 <CUnlockScheduler>:
c000d3f8:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000d400:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000d405:	85 c0                	test   eax,eax
c000d407:	75 03                	jne    c000d40c <CUnlockScheduler+0x14>
c000d409:	fb                   	sti    
c000d40a:	66 90                	xchg   ax,ax
c000d40c:	90                   	nop
c000d40d:	c3                   	ret    
c000d40e:	66 90                	xchg   ax,ax

c000d410 <CLockScheduler>:
c000d410:	fa                   	cli    
c000d411:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000d416:	83 c0 01             	add    eax,0x1
c000d419:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000d41e:	90                   	nop
c000d41f:	c3                   	ret    

c000d420 <CPrintf>:
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	83 ec 08             	sub    esp,0x8
c000d426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d42a:	68 f3 41 02 c0       	push   0xc00241f3
c000d42f:	e8 48 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d434:	83 c4 10             	add    esp,0x10
c000d437:	90                   	nop
c000d438:	83 c4 0c             	add    esp,0xc
c000d43b:	c3                   	ret    

c000d43c <CmOpen(char const*)>:
c000d43c:	57                   	push   edi
c000d43d:	56                   	push   esi
c000d43e:	53                   	push   ebx
c000d43f:	83 ec 1c             	sub    esp,0x1c
c000d442:	6a 30                	push   0x30
c000d444:	e8 16 29 00 00       	call   c000fd5f <malloc>
c000d449:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d450:	89 c3                	mov    ebx,eax
c000d452:	e8 08 29 00 00       	call   c000fd5f <malloc>
c000d457:	83 c4 0c             	add    esp,0xc
c000d45a:	89 c6                	mov    esi,eax
c000d45c:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000d462:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d466:	50                   	push   eax
c000d467:	e8 1e ad ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d46c:	83 c4 0c             	add    esp,0xc
c000d46f:	89 33                	mov    DWORD PTR [ebx],esi
c000d471:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d475:	50                   	push   eax
c000d476:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d47a:	50                   	push   eax
c000d47b:	56                   	push   esi
c000d47c:	e8 29 b0 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d481:	5a                   	pop    edx
c000d482:	59                   	pop    ecx
c000d483:	6a 01                	push   0x1
c000d485:	ff 33                	push   DWORD PTR [ebx]
c000d487:	e8 1c ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d48c:	5e                   	pop    esi
c000d48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d491:	e8 c9 28 00 00       	call   c000fd5f <malloc>
c000d496:	5a                   	pop    edx
c000d497:	89 c7                	mov    edi,eax
c000d499:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4a1:	56                   	push   esi
c000d4a2:	57                   	push   edi
c000d4a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4ab:	50                   	push   eax
c000d4ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4af:	83 c4 14             	add    esp,0x14
c000d4b2:	ff 33                	push   DWORD PTR [ebx]
c000d4b4:	e8 4d ad ff ff       	call   c0008206 <File::close()>
c000d4b9:	59                   	pop    ecx
c000d4ba:	58                   	pop    eax
c000d4bb:	6a 13                	push   0x13
c000d4bd:	ff 33                	push   DWORD PTR [ebx]
c000d4bf:	e8 e4 ac ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d4c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4c6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000d4cb:	57                   	push   edi
c000d4cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4d4:	50                   	push   eax
c000d4d5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d4d8:	83 c4 14             	add    esp,0x14
c000d4db:	57                   	push   edi
c000d4dc:	e8 8e 28 00 00       	call   c000fd6f <free>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d4e7:	75 10                	jne    c000d4f9 <CmOpen(char const*)+0xbd>
c000d4e9:	83 ec 0c             	sub    esp,0xc
c000d4ec:	68 f6 41 02 c0       	push   0xc00241f6
c000d4f1:	e8 78 2b 00 00       	call   c001006e <KePanic(char const*)>
c000d4f6:	83 c4 10             	add    esp,0x10
c000d4f9:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d4fc:	50                   	push   eax
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 33                	push   DWORD PTR [ebx]
c000d503:	e8 5e ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d50a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d50c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d50f:	57                   	push   edi
c000d510:	6a 00                	push   0x0
c000d512:	6a 2b                	push   0x2b
c000d514:	50                   	push   eax
c000d515:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d518:	83 c4 1c             	add    esp,0x1c
c000d51b:	6a 00                	push   0x0
c000d51d:	6a 00                	push   0x0
c000d51f:	ff 33                	push   DWORD PTR [ebx]
c000d521:	e8 40 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d526:	83 c4 0c             	add    esp,0xc
c000d529:	6a 08                	push   0x8
c000d52b:	68 07 42 02 c0       	push   0xc0024207
c000d530:	57                   	push   edi
c000d531:	e8 4a 2e ff ff       	call   c0000380 <memcmp>
c000d536:	83 c4 10             	add    esp,0x10
c000d539:	85 c0                	test   eax,eax
c000d53b:	74 10                	je     c000d54d <CmOpen(char const*)+0x111>
c000d53d:	83 ec 0c             	sub    esp,0xc
c000d540:	68 10 42 02 c0       	push   0xc0024210
c000d545:	e8 24 2b 00 00       	call   c001006e <KePanic(char const*)>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d551:	89 d8                	mov    eax,ebx
c000d553:	83 c4 10             	add    esp,0x10
c000d556:	5b                   	pop    ebx
c000d557:	5e                   	pop    esi
c000d558:	5f                   	pop    edi
c000d559:	c3                   	ret    

c000d55a <CmClose(Reghive_Tag*)>:
c000d55a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d55e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d562:	74 0b                	je     c000d56f <CmClose(Reghive_Tag*)+0x15>
c000d564:	8b 00                	mov    eax,DWORD PTR [eax]
c000d566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d56a:	e9 97 ac ff ff       	jmp    c0008206 <File::close()>
c000d56f:	c3                   	ret    

c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d570:	53                   	push   ebx
c000d571:	83 ec 18             	sub    esp,0x18
c000d574:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d578:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d57c:	74 29                	je     c000d5a7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d57e:	50                   	push   eax
c000d57f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d584:	99                   	cdq    
c000d585:	52                   	push   edx
c000d586:	50                   	push   eax
c000d587:	ff 33                	push   DWORD PTR [ebx]
c000d589:	e8 d8 ac ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d58e:	5a                   	pop    edx
c000d58f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d591:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d595:	8b 10                	mov    edx,DWORD PTR [eax]
c000d597:	51                   	push   ecx
c000d598:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d59c:	6a 00                	push   0x0
c000d59e:	6a 2b                	push   0x2b
c000d5a0:	50                   	push   eax
c000d5a1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d5a4:	83 c4 20             	add    esp,0x20
c000d5a7:	83 c4 18             	add    esp,0x18
c000d5aa:	5b                   	pop    ebx
c000d5ab:	c3                   	ret    

c000d5ac <CmGetString(Reghive_Tag*, int, char*)>:
c000d5ac:	55                   	push   ebp
c000d5ad:	57                   	push   edi
c000d5ae:	56                   	push   esi
c000d5af:	53                   	push   ebx
c000d5b0:	31 db                	xor    ebx,ebx
c000d5b2:	83 ec 70             	sub    esp,0x70
c000d5b5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d5bc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d5c0:	50                   	push   eax
c000d5c1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d5c8:	55                   	push   ebp
c000d5c9:	e8 a2 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d5d6:	c1 e0 08             	shl    eax,0x8
c000d5d9:	89 c2                	mov    edx,eax
c000d5db:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d5e0:	09 d0                	or     eax,edx
c000d5e2:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d5e7:	c1 e0 08             	shl    eax,0x8
c000d5ea:	09 d0                	or     eax,edx
c000d5ec:	74 25                	je     c000d613 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d5ee:	6b fb 0d             	imul   edi,ebx,0xd
c000d5f1:	52                   	push   edx
c000d5f2:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d5f6:	52                   	push   edx
c000d5f7:	50                   	push   eax
c000d5f8:	55                   	push   ebp
c000d5f9:	e8 72 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5fe:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d602:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d609:	b9 27 00 00 00       	mov    ecx,0x27
c000d60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	83 c3 03             	add    ebx,0x3
c000d616:	83 fb 15             	cmp    ebx,0x15
c000d619:	75 b6                	jne    c000d5d1 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d61b:	83 c4 6c             	add    esp,0x6c
c000d61e:	5b                   	pop    ebx
c000d61f:	5e                   	pop    esi
c000d620:	5f                   	pop    edi
c000d621:	5d                   	pop    ebp
c000d622:	c3                   	ret    

c000d623 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d623:	83 ec 40             	sub    esp,0x40
c000d626:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d62a:	50                   	push   eax
c000d62b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d62f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d633:	e8 38 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d638:	83 c4 10             	add    esp,0x10
c000d63b:	83 c8 ff             	or     eax,0xffffffff
c000d63e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d643:	75 19                	jne    c000d65e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d645:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d64a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d64f:	c1 e0 08             	shl    eax,0x8
c000d652:	09 c2                	or     edx,eax
c000d654:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d659:	c1 e0 10             	shl    eax,0x10
c000d65c:	09 d0                	or     eax,edx
c000d65e:	83 c4 3c             	add    esp,0x3c
c000d661:	c3                   	ret    

c000d662 <CmGetNext(Reghive_Tag*, int)>:
c000d662:	83 ec 40             	sub    esp,0x40
c000d665:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d669:	50                   	push   eax
c000d66a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d66e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d672:	e8 f9 fe ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d677:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d67c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d681:	c1 e0 08             	shl    eax,0x8
c000d684:	09 c2                	or     edx,eax
c000d686:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d68b:	83 c4 4c             	add    esp,0x4c
c000d68e:	c1 e0 10             	shl    eax,0x10
c000d691:	09 d0                	or     eax,edx
c000d693:	c3                   	ret    

c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d694:	53                   	push   ebx
c000d695:	83 ec 18             	sub    esp,0x18
c000d698:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d69c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d6a0:	74 29                	je     c000d6cb <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d6a2:	50                   	push   eax
c000d6a3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d6a8:	99                   	cdq    
c000d6a9:	52                   	push   edx
c000d6aa:	50                   	push   eax
c000d6ab:	ff 33                	push   DWORD PTR [ebx]
c000d6ad:	e8 b4 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d6b2:	5a                   	pop    edx
c000d6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6b9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6bb:	51                   	push   ecx
c000d6bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d6c0:	6a 00                	push   0x0
c000d6c2:	6a 2b                	push   0x2b
c000d6c4:	50                   	push   eax
c000d6c5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6c8:	83 c4 20             	add    esp,0x20
c000d6cb:	83 c4 18             	add    esp,0x18
c000d6ce:	5b                   	pop    ebx
c000d6cf:	c3                   	ret    

c000d6d0 <CmFreeExtent(Reghive_Tag*, int)>:
c000d6d0:	53                   	push   ebx
c000d6d1:	83 ec 3c             	sub    esp,0x3c
c000d6d4:	6a 2b                	push   0x2b
c000d6d6:	6a 00                	push   0x0
c000d6d8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d6dc:	53                   	push   ebx
c000d6dd:	e8 0e 2e ff ff       	call   c00004f0 <memset>
c000d6e2:	83 c4 0c             	add    esp,0xc
c000d6e5:	53                   	push   ebx
c000d6e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6ee:	e8 a1 ff ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6f3:	83 c4 48             	add    esp,0x48
c000d6f6:	5b                   	pop    ebx
c000d6f7:	c3                   	ret    

c000d6f8 <CmUpdateHeader(Reghive_Tag*)>:
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ff:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d703:	74 10                	je     c000d715 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d705:	52                   	push   edx
c000d706:	8d 50 05             	lea    edx,[eax+0x5]
c000d709:	52                   	push   edx
c000d70a:	6a 00                	push   0x0
c000d70c:	50                   	push   eax
c000d70d:	e8 82 ff ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	83 c4 0c             	add    esp,0xc
c000d718:	c3                   	ret    

c000d719 <CmExpand(Reghive_Tag*, int)>:
c000d719:	57                   	push   edi
c000d71a:	56                   	push   esi
c000d71b:	83 ce ff             	or     esi,0xffffffff
c000d71e:	53                   	push   ebx
c000d71f:	83 ec 30             	sub    esp,0x30
c000d722:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d726:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d72a:	74 5f                	je     c000d78b <CmExpand(Reghive_Tag*, int)+0x72>
c000d72c:	31 d2                	xor    edx,edx
c000d72e:	31 f6                	xor    esi,esi
c000d730:	50                   	push   eax
c000d731:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d735:	52                   	push   edx
c000d736:	50                   	push   eax
c000d737:	ff 33                	push   DWORD PTR [ebx]
c000d739:	e8 28 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d73e:	83 c4 0c             	add    esp,0xc
c000d741:	6a 2b                	push   0x2b
c000d743:	6a 00                	push   0x0
c000d745:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d749:	57                   	push   edi
c000d74a:	e8 a1 2d ff ff       	call   c00004f0 <memset>
c000d74f:	83 c4 10             	add    esp,0x10
c000d752:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d756:	7d 1b                	jge    c000d773 <CmExpand(Reghive_Tag*, int)+0x5a>
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d75d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d761:	8b 10                	mov    edx,DWORD PTR [eax]
c000d763:	46                   	inc    esi
c000d764:	51                   	push   ecx
c000d765:	57                   	push   edi
c000d766:	6a 00                	push   0x0
c000d768:	6a 2b                	push   0x2b
c000d76a:	50                   	push   eax
c000d76b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d76e:	83 c4 20             	add    esp,0x20
c000d771:	eb df                	jmp    c000d752 <CmExpand(Reghive_Tag*, int)+0x39>
c000d773:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d777:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d77a:	83 ec 0c             	sub    esp,0xc
c000d77d:	01 f2                	add    edx,esi
c000d77f:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d782:	53                   	push   ebx
c000d783:	e8 70 ff ff ff       	call   c000d6f8 <CmUpdateHeader(Reghive_Tag*)>
c000d788:	83 c4 10             	add    esp,0x10
c000d78b:	83 c4 30             	add    esp,0x30
c000d78e:	89 f0                	mov    eax,esi
c000d790:	5b                   	pop    ebx
c000d791:	5e                   	pop    esi
c000d792:	5f                   	pop    edi
c000d793:	c3                   	ret    

c000d794 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d794:	55                   	push   ebp
c000d795:	57                   	push   edi
c000d796:	56                   	push   esi
c000d797:	53                   	push   ebx
c000d798:	83 cb ff             	or     ebx,0xffffffff
c000d79b:	83 ec 1c             	sub    esp,0x1c
c000d79e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7a2:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d7a6:	74 68                	je     c000d810 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7a8:	be 2b 00 00 00       	mov    esi,0x2b
c000d7ad:	51                   	push   ecx
c000d7ae:	31 ff                	xor    edi,edi
c000d7b0:	6a 00                	push   0x0
c000d7b2:	31 db                	xor    ebx,ebx
c000d7b4:	6a 00                	push   0x0
c000d7b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7b9:	e8 a8 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7be:	83 c4 10             	add    esp,0x10
c000d7c1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d7c4:	76 3b                	jbe    c000d801 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d7c6:	83 ec 0c             	sub    esp,0xc
c000d7c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7cc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d7d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7d2:	51                   	push   ecx
c000d7d3:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d7d7:	51                   	push   ecx
c000d7d8:	6a 00                	push   0x0
c000d7da:	6a 01                	push   0x1
c000d7dc:	50                   	push   eax
c000d7dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d7e0:	83 c4 20             	add    esp,0x20
c000d7e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d7e8:	74 26                	je     c000d810 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7ea:	43                   	inc    ebx
c000d7eb:	52                   	push   edx
c000d7ec:	57                   	push   edi
c000d7ed:	56                   	push   esi
c000d7ee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7f1:	e8 70 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7f6:	83 c6 2b             	add    esi,0x2b
c000d7f9:	83 d7 00             	adc    edi,0x0
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	eb c0                	jmp    c000d7c1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d801:	50                   	push   eax
c000d802:	50                   	push   eax
c000d803:	6a 40                	push   0x40
c000d805:	55                   	push   ebp
c000d806:	e8 0e ff ff ff       	call   c000d719 <CmExpand(Reghive_Tag*, int)>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	89 c3                	mov    ebx,eax
c000d810:	83 c4 1c             	add    esp,0x1c
c000d813:	89 d8                	mov    eax,ebx
c000d815:	5b                   	pop    ebx
c000d816:	5e                   	pop    esi
c000d817:	5f                   	pop    edi
c000d818:	5d                   	pop    ebp
c000d819:	c3                   	ret    

c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d81a:	55                   	push   ebp
c000d81b:	57                   	push   edi
c000d81c:	56                   	push   esi
c000d81d:	53                   	push   ebx
c000d81e:	81 ec 88 00 00 00    	sub    esp,0x88
c000d824:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d82b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d832:	e8 5d ff ff ff       	call   c000d794 <CmFindUnusedExtent(Reghive_Tag*)>
c000d837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d83b:	83 c4 0c             	add    esp,0xc
c000d83e:	6a 2b                	push   0x2b
c000d840:	6a 00                	push   0x0
c000d842:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d846:	55                   	push   ebp
c000d847:	e8 a4 2c ff ff       	call   c00004f0 <memset>
c000d84c:	83 c4 10             	add    esp,0x10
c000d84f:	85 db                	test   ebx,ebx
c000d851:	74 12                	je     c000d865 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d853:	51                   	push   ecx
c000d854:	55                   	push   ebp
c000d855:	53                   	push   ebx
c000d856:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d85d:	e8 0e fd ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d869:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d870:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d877:	85 db                	test   ebx,ebx
c000d879:	74 49                	je     c000d8c4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d87b:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d880:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d885:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d889:	c1 e0 08             	shl    eax,0x8
c000d88c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d892:	09 c8                	or     eax,ecx
c000d894:	74 11                	je     c000d8a7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d896:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d89a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d89e:	c1 e8 10             	shr    eax,0x10
c000d8a1:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d8a5:	eb 0f                	jmp    c000d8b6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d8a7:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d8ac:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d8b1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d8b6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d8ba:	c1 ea 08             	shr    edx,0x8
c000d8bd:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d8c2:	eb 0f                	jmp    c000d8d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d8c4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d8c9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d8ce:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d8d3:	52                   	push   edx
c000d8d4:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d8d8:	50                   	push   eax
c000d8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8e4:	e8 ab fd ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8e9:	83 c4 10             	add    esp,0x10
c000d8ec:	85 db                	test   ebx,ebx
c000d8ee:	74 12                	je     c000d902 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d8f0:	50                   	push   eax
c000d8f1:	55                   	push   ebp
c000d8f2:	53                   	push   ebx
c000d8f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8fa:	e8 95 fd ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d906:	83 c4 7c             	add    esp,0x7c
c000d909:	5b                   	pop    ebx
c000d90a:	5e                   	pop    esi
c000d90b:	5f                   	pop    edi
c000d90c:	5d                   	pop    ebp
c000d90d:	c3                   	ret    

c000d90e <CmSetString(Reghive_Tag*, int, char const*)>:
c000d90e:	55                   	push   ebp
c000d90f:	57                   	push   edi
c000d910:	56                   	push   esi
c000d911:	53                   	push   ebx
c000d912:	bb 27 00 00 00       	mov    ebx,0x27
c000d917:	81 ec 88 00 00 00    	sub    esp,0x88
c000d91d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d924:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d92b:	e8 40 2c ff ff       	call   c0000570 <strlen>
c000d930:	8d 48 26             	lea    ecx,[eax+0x26]
c000d933:	89 c8                	mov    eax,ecx
c000d935:	99                   	cdq    
c000d936:	f7 fb                	idiv   ebx
c000d938:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d93c:	83 c4 10             	add    esp,0x10
c000d93f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d945:	7e 10                	jle    c000d957 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d947:	83 ec 0c             	sub    esp,0xc
c000d94a:	68 21 42 02 c0       	push   0xc0024221
c000d94f:	e8 1a 27 00 00       	call   c001006e <KePanic(char const*)>
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	31 ff                	xor    edi,edi
c000d959:	50                   	push   eax
c000d95a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d95e:	53                   	push   ebx
c000d95f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d966:	56                   	push   esi
c000d967:	e8 04 fc ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d973:	89 d0                	mov    eax,edx
c000d975:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d979:	c1 e0 08             	shl    eax,0x8
c000d97c:	09 c2                	or     edx,eax
c000d97e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d982:	c1 e2 08             	shl    edx,0x8
c000d985:	09 c2                	or     edx,eax
c000d987:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d98b:	7e 76                	jle    c000da03 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d98d:	85 d2                	test   edx,edx
c000d98f:	75 25                	jne    c000d9b6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d991:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d996:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d99a:	50                   	push   eax
c000d99b:	6a 00                	push   0x0
c000d99d:	6a 00                	push   0x0
c000d99f:	56                   	push   esi
c000d9a0:	e8 75 fe ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d9a5:	83 c4 10             	add    esp,0x10
c000d9a8:	89 c2                	mov    edx,eax
c000d9aa:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d9ad:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d9b0:	c1 f8 10             	sar    eax,0x10
c000d9b3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d9b6:	55                   	push   ebp
c000d9b7:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d9bb:	55                   	push   ebp
c000d9bc:	52                   	push   edx
c000d9bd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d9c1:	56                   	push   esi
c000d9c2:	e8 a9 fb ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9c7:	83 c4 0c             	add    esp,0xc
c000d9ca:	6a 27                	push   0x27
c000d9cc:	6a 00                	push   0x0
c000d9ce:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9d2:	51                   	push   ecx
c000d9d3:	e8 18 2b ff ff       	call   c00004f0 <memset>
c000d9d8:	83 c4 0c             	add    esp,0xc
c000d9db:	6b c7 27             	imul   eax,edi,0x27
c000d9de:	6a 27                	push   0x27
c000d9e0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d9e7:	50                   	push   eax
c000d9e8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9ec:	51                   	push   ecx
c000d9ed:	e8 8e 2c ff ff       	call   c0000680 <strncpy>
c000d9f2:	83 c4 0c             	add    esp,0xc
c000d9f5:	55                   	push   ebp
c000d9f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d9fa:	52                   	push   edx
c000d9fb:	56                   	push   esi
c000d9fc:	e8 93 fc ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da01:	eb 19                	jmp    c000da1c <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000da03:	85 d2                	test   edx,edx
c000da05:	74 18                	je     c000da1f <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000da07:	51                   	push   ecx
c000da08:	51                   	push   ecx
c000da09:	52                   	push   edx
c000da0a:	56                   	push   esi
c000da0b:	e8 c0 fc ff ff       	call   c000d6d0 <CmFreeExtent(Reghive_Tag*, int)>
c000da10:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000da14:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000da18:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	47                   	inc    edi
c000da20:	83 c3 03             	add    ebx,0x3
c000da23:	83 ff 07             	cmp    edi,0x7
c000da26:	0f 85 43 ff ff ff    	jne    c000d96f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000da2c:	50                   	push   eax
c000da2d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000da31:	50                   	push   eax
c000da32:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000da39:	56                   	push   esi
c000da3a:	e8 55 fc ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da3f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000da45:	5b                   	pop    ebx
c000da46:	5e                   	pop    esi
c000da47:	5f                   	pop    edi
c000da48:	5d                   	pop    ebp
c000da49:	c3                   	ret    

c000da4a <CmGetMatch(char*, char*, bool, bool*)>:
c000da4a:	56                   	push   esi
c000da4b:	53                   	push   ebx
c000da4c:	50                   	push   eax
c000da4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da51:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000da56:	74 25                	je     c000da7d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000da58:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da5b:	31 db                	xor    ebx,ebx
c000da5d:	50                   	push   eax
c000da5e:	50                   	push   eax
c000da5f:	8d 04 9d c0 69 02 c0 	lea    eax,[ebx*4-0x3ffd9640]
c000da66:	50                   	push   eax
c000da67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6b:	e8 e0 2c ff ff       	call   c0000750 <strcmp>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	85 c0                	test   eax,eax
c000da75:	74 2e                	je     c000daa5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da77:	43                   	inc    ebx
c000da78:	83 fb 3f             	cmp    ebx,0x3f
c000da7b:	75 e0                	jne    c000da5d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000da7d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da80:	31 db                	xor    ebx,ebx
c000da82:	8d 04 9d c0 69 02 c0 	lea    eax,[ebx*4-0x3ffd9640]
c000da89:	51                   	push   ecx
c000da8a:	51                   	push   ecx
c000da8b:	50                   	push   eax
c000da8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da90:	e8 bb 2c ff ff       	call   c0000750 <strcmp>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	85 c0                	test   eax,eax
c000da9a:	74 09                	je     c000daa5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da9c:	43                   	inc    ebx
c000da9d:	83 fb 3f             	cmp    ebx,0x3f
c000daa0:	75 e0                	jne    c000da82 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000daa2:	83 cb ff             	or     ebx,0xffffffff
c000daa5:	89 d8                	mov    eax,ebx
c000daa7:	5a                   	pop    edx
c000daa8:	5b                   	pop    ebx
c000daa9:	5e                   	pop    esi
c000daaa:	c3                   	ret    

c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000daab:	55                   	push   ebp
c000daac:	31 c0                	xor    eax,eax
c000daae:	57                   	push   edi
c000daaf:	56                   	push   esi
c000dab0:	53                   	push   ebx
c000dab1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dab5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000dab9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000dabb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dabf:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000dac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dac6:	83 fd 1f             	cmp    ebp,0x1f
c000dac9:	7f 0b                	jg     c000dad6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000dacb:	0f b6 c2             	movzx  eax,dl
c000dace:	d3 e0                	shl    eax,cl
c000dad0:	09 07                	or     DWORD PTR [edi],eax
c000dad2:	b0 01                	mov    al,0x1
c000dad4:	01 33                	add    DWORD PTR [ebx],esi
c000dad6:	5b                   	pop    ebx
c000dad7:	5e                   	pop    esi
c000dad8:	5f                   	pop    edi
c000dad9:	5d                   	pop    ebp
c000dada:	c3                   	ret    

c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>:
c000dadb:	57                   	push   edi
c000dadc:	56                   	push   esi
c000dadd:	53                   	push   ebx
c000dade:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dae2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000dae6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000daea:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000daee:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000daf0:	7c 17                	jl     c000db09 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000daf2:	8b 17                	mov    edx,DWORD PTR [edi]
c000daf4:	b8 01 00 00 00       	mov    eax,0x1
c000daf9:	d3 e0                	shl    eax,cl
c000dafb:	48                   	dec    eax
c000dafc:	21 d0                	and    eax,edx
c000dafe:	d3 ea                	shr    edx,cl
c000db00:	89 17                	mov    DWORD PTR [edi],edx
c000db02:	29 0b                	sub    DWORD PTR [ebx],ecx
c000db04:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000db07:	eb 05                	jmp    c000db0e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000db09:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000db0c:	31 c0                	xor    eax,eax
c000db0e:	5b                   	pop    ebx
c000db0f:	5e                   	pop    esi
c000db10:	5f                   	pop    edi
c000db11:	c3                   	ret    

c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000db12:	83 ec 40             	sub    esp,0x40
c000db15:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db19:	50                   	push   eax
c000db1a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db22:	e8 49 fa ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000db2b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000db2f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000db33:	89 10                	mov    DWORD PTR [eax],edx
c000db35:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000db38:	83 c4 4c             	add    esp,0x4c
c000db3b:	c3                   	ret    

c000db3c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000db3c:	55                   	push   ebp
c000db3d:	57                   	push   edi
c000db3e:	56                   	push   esi
c000db3f:	53                   	push   ebx
c000db40:	83 ec 40             	sub    esp,0x40
c000db43:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000db47:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000db4b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000db4f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000db53:	53                   	push   ebx
c000db54:	56                   	push   esi
c000db55:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db59:	e8 12 fa ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db5e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000db62:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000db66:	83 c4 0c             	add    esp,0xc
c000db69:	53                   	push   ebx
c000db6a:	56                   	push   esi
c000db6b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db6f:	e8 20 fb ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db74:	83 c4 4c             	add    esp,0x4c
c000db77:	5b                   	pop    ebx
c000db78:	5e                   	pop    esi
c000db79:	5f                   	pop    edi
c000db7a:	5d                   	pop    ebp
c000db7b:	c3                   	ret    

c000db7c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000db7c:	55                   	push   ebp
c000db7d:	57                   	push   edi
c000db7e:	56                   	push   esi
c000db7f:	31 f6                	xor    esi,esi
c000db81:	53                   	push   ebx
c000db82:	31 db                	xor    ebx,ebx
c000db84:	83 ec 40             	sub    esp,0x40
c000db87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db97:	6a 12                	push   0x12
c000db99:	68 ee 00 00 00       	push   0xee
c000db9e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dba2:	e8 49 29 ff ff       	call   c00004f0 <memset>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000dbae:	6a 08                	push   0x8
c000dbb0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbb4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000dbb8:	50                   	push   eax
c000dbb9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dbbd:	55                   	push   ebp
c000dbbe:	57                   	push   edi
c000dbbf:	e8 e7 fe ff ff       	call   c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbcb:	50                   	push   eax
c000dbcc:	6a 06                	push   0x6
c000dbce:	55                   	push   ebp
c000dbcf:	57                   	push   edi
c000dbd0:	e8 06 ff ff ff       	call   c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>
c000dbd5:	83 c4 10             	add    esp,0x10
c000dbd8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbdd:	74 07                	je     c000dbe6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dbdf:	46                   	inc    esi
c000dbe0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dbe4:	eb e1                	jmp    c000dbc7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dbe6:	43                   	inc    ebx
c000dbe7:	83 fb 12             	cmp    ebx,0x12
c000dbea:	75 c2                	jne    c000dbae <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dbec:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbf0:	31 db                	xor    ebx,ebx
c000dbf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dbf5:	50                   	push   eax
c000dbf6:	50                   	push   eax
c000dbf7:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000dbfc:	43                   	inc    ebx
c000dbfd:	8d 04 85 c0 69 02 c0 	lea    eax,[eax*4-0x3ffd9640]
c000dc04:	50                   	push   eax
c000dc05:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dc09:	e8 32 2c ff ff       	call   c0000840 <strcat>
c000dc0e:	83 c4 10             	add    esp,0x10
c000dc11:	83 fb 18             	cmp    ebx,0x18
c000dc14:	75 df                	jne    c000dbf5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dc16:	83 c4 3c             	add    esp,0x3c
c000dc19:	31 c0                	xor    eax,eax
c000dc1b:	5b                   	pop    ebx
c000dc1c:	5e                   	pop    esi
c000dc1d:	5f                   	pop    edi
c000dc1e:	5d                   	pop    ebp
c000dc1f:	c3                   	ret    

c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dc20:	83 ec 40             	sub    esp,0x40
c000dc23:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dc27:	50                   	push   eax
c000dc28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dc2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dc30:	e8 3b f9 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dc35:	58                   	pop    eax
c000dc36:	5a                   	pop    edx
c000dc37:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dc3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dc3f:	50                   	push   eax
c000dc40:	e8 37 ff ff ff       	call   c000db7c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dc45:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dc4a:	83 c4 4c             	add    esp,0x4c
c000dc4d:	c3                   	ret    

c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dc4e:	55                   	push   ebp
c000dc4f:	57                   	push   edi
c000dc50:	56                   	push   esi
c000dc51:	53                   	push   ebx
c000dc52:	31 db                	xor    ebx,ebx
c000dc54:	83 ec 70             	sub    esp,0x70
c000dc57:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dc5e:	6a 30                	push   0x30
c000dc60:	6a 00                	push   0x0
c000dc62:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dc66:	56                   	push   esi
c000dc67:	e8 84 28 ff ff       	call   c00004f0 <memset>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	83 ec 0c             	sub    esp,0xc
c000dc72:	57                   	push   edi
c000dc73:	e8 f8 28 ff ff       	call   c0000570 <strlen>
c000dc78:	83 c4 10             	add    esp,0x10
c000dc7b:	39 d8                	cmp    eax,ebx
c000dc7d:	76 16                	jbe    c000dc95 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dc7f:	83 ec 0c             	sub    esp,0xc
c000dc82:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dc86:	50                   	push   eax
c000dc87:	e8 a4 2c ff ff       	call   c0000930 <toupper>
c000dc8c:	83 c4 10             	add    esp,0x10
c000dc8f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc92:	43                   	inc    ebx
c000dc93:	eb da                	jmp    c000dc6f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc95:	31 f6                	xor    esi,esi
c000dc97:	52                   	push   edx
c000dc98:	31 ff                	xor    edi,edi
c000dc9a:	6a 18                	push   0x18
c000dc9c:	6a 3f                	push   0x3f
c000dc9e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dca2:	50                   	push   eax
c000dca3:	e8 48 28 ff ff       	call   c00004f0 <memset>
c000dca8:	83 c4 10             	add    esp,0x10
c000dcab:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dcaf:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dcb3:	84 c0                	test   al,al
c000dcb5:	0f 84 b0 00 00 00    	je     c000dd6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dcbb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dcbf:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dcc4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dcc8:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dccd:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dcd0:	83 ec 0c             	sub    esp,0xc
c000dcd3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dcd7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dcdb:	53                   	push   ebx
c000dcdc:	e8 8f 28 ff ff       	call   c0000570 <strlen>
c000dce1:	83 c4 10             	add    esp,0x10
c000dce4:	85 c0                	test   eax,eax
c000dce6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcea:	74 0b                	je     c000dcf7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dcec:	50                   	push   eax
c000dced:	6a 01                	push   0x1
c000dcef:	53                   	push   ebx
c000dcf0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dcf4:	50                   	push   eax
c000dcf5:	eb 0a                	jmp    c000dd01 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dcf7:	50                   	push   eax
c000dcf8:	6a 00                	push   0x0
c000dcfa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dcfe:	50                   	push   eax
c000dcff:	6a 00                	push   0x0
c000dd01:	e8 44 fd ff ff       	call   c000da4a <CmGetMatch(char*, char*, bool, bool*)>
c000dd06:	83 c4 10             	add    esp,0x10
c000dd09:	83 f8 ff             	cmp    eax,0xffffffff
c000dd0c:	75 1a                	jne    c000dd28 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dd0e:	83 ec 0c             	sub    esp,0xc
c000dd11:	68 36 42 02 c0       	push   0xc0024236
c000dd16:	e8 53 23 00 00       	call   c001006e <KePanic(char const*)>
c000dd1b:	83 c4 10             	add    esp,0x10
c000dd1e:	b8 02 00 00 00       	mov    eax,0x2
c000dd23:	e9 bc 00 00 00       	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd28:	83 ff 18             	cmp    edi,0x18
c000dd2b:	75 1a                	jne    c000dd47 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dd2d:	83 ec 0c             	sub    esp,0xc
c000dd30:	68 4b 42 02 c0       	push   0xc002424b
c000dd35:	e8 34 23 00 00       	call   c001006e <KePanic(char const*)>
c000dd3a:	83 c4 10             	add    esp,0x10
c000dd3d:	b8 01 00 00 00       	mov    eax,0x1
c000dd42:	e9 9d 00 00 00       	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd47:	47                   	inc    edi
c000dd48:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd4d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dd51:	74 02                	je     c000dd55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dd53:	89 ee                	mov    esi,ebp
c000dd55:	83 ec 0c             	sub    esp,0xc
c000dd58:	53                   	push   ebx
c000dd59:	e8 12 28 ff ff       	call   c0000570 <strlen>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	85 c0                	test   eax,eax
c000dd63:	74 06                	je     c000dd6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dd65:	46                   	inc    esi
c000dd66:	e9 40 ff ff ff       	jmp    c000dcab <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dd6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dd73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dd7b:	31 f6                	xor    esi,esi
c000dd7d:	50                   	push   eax
c000dd7e:	31 ff                	xor    edi,edi
c000dd80:	6a 12                	push   0x12
c000dd82:	68 ee 00 00 00       	push   0xee
c000dd87:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd8e:	e8 5d 27 ff ff       	call   c00004f0 <memset>
c000dd93:	83 c4 10             	add    esp,0x10
c000dd96:	83 fe 17             	cmp    esi,0x17
c000dd99:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd9d:	7e 26                	jle    c000ddc5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd9f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dda3:	50                   	push   eax
c000dda4:	6a 08                	push   0x8
c000dda6:	55                   	push   ebp
c000dda7:	53                   	push   ebx
c000dda8:	e8 2e fd ff ff       	call   c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddb5:	74 26                	je     c000dddd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000ddb7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000ddbe:	4e                   	dec    esi
c000ddbf:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000ddc2:	47                   	inc    edi
c000ddc3:	eb 1c                	jmp    c000dde1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000ddc5:	6a 06                	push   0x6
c000ddc7:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000ddcc:	50                   	push   eax
c000ddcd:	55                   	push   ebp
c000ddce:	53                   	push   ebx
c000ddcf:	e8 d7 fc ff ff       	call   c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	84 c0                	test   al,al
c000ddd9:	75 06                	jne    c000dde1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dddb:	eb c2                	jmp    c000dd9f <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dddd:	31 c0                	xor    eax,eax
c000dddf:	eb 03                	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dde1:	46                   	inc    esi
c000dde2:	eb b2                	jmp    c000dd96 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dde4:	83 c4 6c             	add    esp,0x6c
c000dde7:	5b                   	pop    ebx
c000dde8:	5e                   	pop    esi
c000dde9:	5f                   	pop    edi
c000ddea:	5d                   	pop    ebp
c000ddeb:	c3                   	ret    

c000ddec <CmCreateString(Reghive_Tag*, int, char const*)>:
c000ddec:	53                   	push   ebx
c000dded:	83 ec 3c             	sub    esp,0x3c
c000ddf0:	6a 2b                	push   0x2b
c000ddf2:	6a 00                	push   0x0
c000ddf4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddf8:	53                   	push   ebx
c000ddf9:	e8 f2 26 ff ff       	call   c00004f0 <memset>
c000ddfe:	58                   	pop    eax
c000ddff:	5a                   	pop    edx
c000de00:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de04:	50                   	push   eax
c000de05:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de09:	e8 40 fe ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de0e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000de13:	83 c4 0c             	add    esp,0xc
c000de16:	6a 15                	push   0x15
c000de18:	6a 00                	push   0x0
c000de1a:	8d 44 24 27          	lea    eax,[esp+0x27]
c000de1e:	50                   	push   eax
c000de1f:	e8 cc 26 ff ff       	call   c00004f0 <memset>
c000de24:	53                   	push   ebx
c000de25:	6a 00                	push   0x0
c000de27:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2f:	e8 e6 f9 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de34:	83 c4 58             	add    esp,0x58
c000de37:	5b                   	pop    ebx
c000de38:	c3                   	ret    

c000de39 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000de39:	56                   	push   esi
c000de3a:	53                   	push   ebx
c000de3b:	83 ec 48             	sub    esp,0x48
c000de3e:	6a 12                	push   0x12
c000de40:	68 ff 00 00 00       	push   0xff
c000de45:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000de49:	56                   	push   esi
c000de4a:	e8 a1 26 ff ff       	call   c00004f0 <memset>
c000de4f:	5a                   	pop    edx
c000de50:	59                   	pop    ecx
c000de51:	56                   	push   esi
c000de52:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de56:	e8 f3 fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de5b:	83 c4 10             	add    esp,0x10
c000de5e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de62:	85 db                	test   ebx,ebx
c000de64:	74 42                	je     c000dea8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000de66:	50                   	push   eax
c000de67:	8d 44 24 19          	lea    eax,[esp+0x19]
c000de6b:	50                   	push   eax
c000de6c:	53                   	push   ebx
c000de6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de71:	e8 fa f6 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de76:	83 c4 0c             	add    esp,0xc
c000de79:	6a 12                	push   0x12
c000de7b:	8d 44 24 21          	lea    eax,[esp+0x21]
c000de7f:	50                   	push   eax
c000de80:	56                   	push   esi
c000de81:	e8 fa 24 ff ff       	call   c0000380 <memcmp>
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	85 c0                	test   eax,eax
c000de8b:	74 1e                	je     c000deab <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de8d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de92:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de97:	c1 e3 08             	shl    ebx,0x8
c000de9a:	09 d8                	or     eax,ebx
c000de9c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dea1:	c1 e3 10             	shl    ebx,0x10
c000dea4:	09 c3                	or     ebx,eax
c000dea6:	eb ba                	jmp    c000de62 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dea8:	83 cb ff             	or     ebx,0xffffffff
c000deab:	89 d8                	mov    eax,ebx
c000dead:	83 c4 44             	add    esp,0x44
c000deb0:	5b                   	pop    ebx
c000deb1:	5e                   	pop    esi
c000deb2:	c3                   	ret    

c000deb3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000deb3:	57                   	push   edi
c000deb4:	56                   	push   esi
c000deb5:	53                   	push   ebx
c000deb6:	83 ec 34             	sub    esp,0x34
c000deb9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000debd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dec1:	6a 2b                	push   0x2b
c000dec3:	6a 00                	push   0x0
c000dec5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dec9:	53                   	push   ebx
c000deca:	e8 21 26 ff ff       	call   c00004f0 <memset>
c000decf:	58                   	pop    eax
c000ded0:	5a                   	pop    edx
c000ded1:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ded5:	50                   	push   eax
c000ded6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000deda:	e8 6f fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dedf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000dee3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dee7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000deeb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000deef:	53                   	push   ebx
c000def0:	6a 00                	push   0x0
c000def2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000def6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000defa:	e8 1b f9 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000deff:	83 c4 50             	add    esp,0x50
c000df02:	5b                   	pop    ebx
c000df03:	5e                   	pop    esi
c000df04:	5f                   	pop    edi
c000df05:	c3                   	ret    

c000df06 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000df06:	55                   	push   ebp
c000df07:	57                   	push   edi
c000df08:	56                   	push   esi
c000df09:	53                   	push   ebx
c000df0a:	83 ec 40             	sub    esp,0x40
c000df0d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000df11:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000df15:	6a 2b                	push   0x2b
c000df17:	6a 00                	push   0x0
c000df19:	8d 74 24 11          	lea    esi,[esp+0x11]
c000df1d:	56                   	push   esi
c000df1e:	e8 cd 25 ff ff       	call   c00004f0 <memset>
c000df23:	5f                   	pop    edi
c000df24:	89 ef                	mov    edi,ebp
c000df26:	58                   	pop    eax
c000df27:	8d 44 24 11          	lea    eax,[esp+0x11]
c000df2b:	50                   	push   eax
c000df2c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000df30:	e8 19 fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000df35:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000df3a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000df3f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000df44:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	85 ed                	test   ebp,ebp
c000df4e:	74 14                	je     c000df64 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df50:	51                   	push   ecx
c000df51:	51                   	push   ecx
c000df52:	57                   	push   edi
c000df53:	53                   	push   ebx
c000df54:	e8 09 f7 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c000df59:	83 c4 10             	add    esp,0x10
c000df5c:	85 c0                	test   eax,eax
c000df5e:	74 04                	je     c000df64 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df60:	89 c7                	mov    edi,eax
c000df62:	eb e8                	jmp    c000df4c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000df64:	56                   	push   esi
c000df65:	6a 00                	push   0x0
c000df67:	57                   	push   edi
c000df68:	53                   	push   ebx
c000df69:	e8 ac f8 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000df6e:	83 c4 0c             	add    esp,0xc
c000df71:	89 c7                	mov    edi,eax
c000df73:	56                   	push   esi
c000df74:	50                   	push   eax
c000df75:	53                   	push   ebx
c000df76:	e8 f5 f5 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df7b:	58                   	pop    eax
c000df7c:	5a                   	pop    edx
c000df7d:	6a 6c                	push   0x6c
c000df7f:	6a 00                	push   0x0
c000df81:	6a 00                	push   0x0
c000df83:	68 5c 42 02 c0       	push   0xc002425c
c000df88:	57                   	push   edi
c000df89:	53                   	push   ebx
c000df8a:	e8 24 ff ff ff       	call   c000deb3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df8f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df93:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df97:	c1 e8 10             	shr    eax,0x10
c000df9a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df9e:	83 c4 1c             	add    esp,0x1c
c000dfa1:	56                   	push   esi
c000dfa2:	57                   	push   edi
c000dfa3:	53                   	push   ebx
c000dfa4:	e8 eb f6 ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dfa9:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000dfae:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000dfb3:	c1 e0 08             	shl    eax,0x8
c000dfb6:	09 c2                	or     edx,eax
c000dfb8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000dfbd:	83 c4 4c             	add    esp,0x4c
c000dfc0:	c1 e0 10             	shl    eax,0x10
c000dfc3:	5b                   	pop    ebx
c000dfc4:	09 d0                	or     eax,edx
c000dfc6:	5e                   	pop    esi
c000dfc7:	5f                   	pop    edi
c000dfc8:	5d                   	pop    ebp
c000dfc9:	c3                   	ret    

c000dfca <zStrtok(char*, char const*)>:
c000dfca:	55                   	push   ebp
c000dfcb:	57                   	push   edi
c000dfcc:	56                   	push   esi
c000dfcd:	53                   	push   ebx
c000dfce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dfd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dfd6:	85 db                	test   ebx,ebx
c000dfd8:	74 2f                	je     c000e009 <zStrtok(char*, char const*)+0x3f>
c000dfda:	85 c0                	test   eax,eax
c000dfdc:	75 09                	jne    c000dfe7 <zStrtok(char*, char const*)+0x1d>
c000dfde:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c000dfe3:	85 c0                	test   eax,eax
c000dfe5:	74 50                	je     c000e037 <zStrtok(char*, char const*)+0x6d>
c000dfe7:	31 c9                	xor    ecx,ecx
c000dfe9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000dfed:	74 03                	je     c000dff2 <zStrtok(char*, char const*)+0x28>
c000dfef:	41                   	inc    ecx
c000dff0:	eb f7                	jmp    c000dfe9 <zStrtok(char*, char const*)+0x1f>
c000dff2:	31 d2                	xor    edx,edx
c000dff4:	39 ca                	cmp    edx,ecx
c000dff6:	74 15                	je     c000e00d <zStrtok(char*, char const*)+0x43>
c000dff8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000dffc:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000dfff:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e002:	39 ee                	cmp    esi,ebp
c000e004:	74 13                	je     c000e019 <zStrtok(char*, char const*)+0x4f>
c000e006:	42                   	inc    edx
c000e007:	eb eb                	jmp    c000dff4 <zStrtok(char*, char const*)+0x2a>
c000e009:	31 c0                	xor    eax,eax
c000e00b:	eb 2a                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e00d:	c7 05 c4 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0c4,0x0
c000e017:	eb 1e                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e019:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e01c:	39 ce                	cmp    esi,ecx
c000e01e:	75 0a                	jne    c000e02a <zStrtok(char*, char const*)+0x60>
c000e020:	40                   	inc    eax
c000e021:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c000e026:	89 d8                	mov    eax,ebx
c000e028:	eb 0d                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e02a:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e02e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e031:	89 15 c4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c4,edx
c000e037:	5b                   	pop    ebx
c000e038:	5e                   	pop    esi
c000e039:	5f                   	pop    edi
c000e03a:	5d                   	pop    ebp
c000e03b:	c3                   	ret    

c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e03c:	57                   	push   edi
c000e03d:	56                   	push   esi
c000e03e:	53                   	push   ebx
c000e03f:	81 ec 08 01 00 00    	sub    esp,0x108
c000e045:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e04c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e053:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e057:	53                   	push   ebx
c000e058:	e8 e3 25 ff ff       	call   c0000640 <strcpy>
c000e05d:	59                   	pop    ecx
c000e05e:	5e                   	pop    esi
c000e05f:	68 3d 55 02 c0       	push   0xc002553d
c000e064:	53                   	push   ebx
c000e065:	bb 01 00 00 00       	mov    ebx,0x1
c000e06a:	e8 5b ff ff ff       	call   c000dfca <zStrtok(char*, char const*)>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	85 c0                	test   eax,eax
c000e074:	74 3b                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e076:	52                   	push   edx
c000e077:	50                   	push   eax
c000e078:	6a 01                	push   0x1
c000e07a:	57                   	push   edi
c000e07b:	e8 b9 fd ff ff       	call   c000de39 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e080:	59                   	pop    ecx
c000e081:	89 c3                	mov    ebx,eax
c000e083:	5e                   	pop    esi
c000e084:	68 3d 55 02 c0       	push   0xc002553d
c000e089:	6a 00                	push   0x0
c000e08b:	e8 3a ff ff ff       	call   c000dfca <zStrtok(char*, char const*)>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	89 c6                	mov    esi,eax
c000e095:	85 c0                	test   eax,eax
c000e097:	74 18                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e099:	52                   	push   edx
c000e09a:	52                   	push   edx
c000e09b:	53                   	push   ebx
c000e09c:	57                   	push   edi
c000e09d:	e8 81 f5 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	89 c3                	mov    ebx,eax
c000e0a7:	83 f8 ff             	cmp    eax,0xffffffff
c000e0aa:	74 05                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e0ac:	50                   	push   eax
c000e0ad:	56                   	push   esi
c000e0ae:	53                   	push   ebx
c000e0af:	eb c9                	jmp    c000e07a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e0b1:	81 c4 00 01 00 00    	add    esp,0x100
c000e0b7:	89 d8                	mov    eax,ebx
c000e0b9:	5b                   	pop    ebx
c000e0ba:	5e                   	pop    esi
c000e0bb:	5f                   	pop    edi
c000e0bc:	c3                   	ret    

c000e0bd <CmDisplayTree(Reghive_Tag*, int, int)>:
c000e0bd:	55                   	push   ebp
c000e0be:	57                   	push   edi
c000e0bf:	56                   	push   esi
c000e0c0:	53                   	push   ebx
c000e0c1:	83 ec 5c             	sub    esp,0x5c
c000e0c4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000e0c8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000e0cc:	85 db                	test   ebx,ebx
c000e0ce:	0f 8e 84 00 00 00    	jle    c000e158 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000e0d4:	31 ed                	xor    ebp,ebp
c000e0d6:	57                   	push   edi
c000e0d7:	6a 32                	push   0x32
c000e0d9:	6a 00                	push   0x0
c000e0db:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000e0df:	57                   	push   edi
c000e0e0:	e8 0b 24 ff ff       	call   c00004f0 <memset>
c000e0e5:	83 c4 0c             	add    esp,0xc
c000e0e8:	57                   	push   edi
c000e0e9:	53                   	push   ebx
c000e0ea:	56                   	push   esi
c000e0eb:	e8 30 fb ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000e0f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e0fb:	7d 13                	jge    c000e110 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e0fd:	83 ec 0c             	sub    esp,0xc
c000e100:	45                   	inc    ebp
c000e101:	68 b3 5d 02 c0       	push   0xc0025db3
c000e106:	e8 71 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	eb e7                	jmp    c000e0f7 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e110:	51                   	push   ecx
c000e111:	57                   	push   edi
c000e112:	53                   	push   ebx
c000e113:	68 62 42 02 c0       	push   0xc0024262
c000e118:	e8 5f 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e125:	75 1e                	jne    c000e145 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e127:	52                   	push   edx
c000e128:	52                   	push   edx
c000e129:	53                   	push   ebx
c000e12a:	56                   	push   esi
c000e12b:	e8 f3 f4 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c000e130:	83 c4 0c             	add    esp,0xc
c000e133:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e137:	8d 51 04             	lea    edx,[ecx+0x4]
c000e13a:	52                   	push   edx
c000e13b:	50                   	push   eax
c000e13c:	56                   	push   esi
c000e13d:	e8 7b ff ff ff       	call   c000e0bd <CmDisplayTree(Reghive_Tag*, int, int)>
c000e142:	83 c4 10             	add    esp,0x10
c000e145:	50                   	push   eax
c000e146:	50                   	push   eax
c000e147:	53                   	push   ebx
c000e148:	56                   	push   esi
c000e149:	e8 14 f5 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c000e14e:	83 c4 10             	add    esp,0x10
c000e151:	89 c3                	mov    ebx,eax
c000e153:	e9 74 ff ff ff       	jmp    c000e0cc <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e158:	83 c4 5c             	add    esp,0x5c
c000e15b:	5b                   	pop    ebx
c000e15c:	5e                   	pop    esi
c000e15d:	5f                   	pop    edi
c000e15e:	5d                   	pop    ebp
c000e15f:	c3                   	ret    

c000e160 <CmSplitFinalSlashInPlace(char*)>:
c000e160:	53                   	push   ebx
c000e161:	83 ec 14             	sub    esp,0x14
c000e164:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e168:	53                   	push   ebx
c000e169:	e8 02 24 ff ff       	call   c0000570 <strlen>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	48                   	dec    eax
c000e172:	85 c0                	test   eax,eax
c000e174:	74 15                	je     c000e18b <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e176:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e179:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e17d:	75 09                	jne    c000e188 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e17f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e182:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e186:	eb 05                	jmp    c000e18d <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e188:	48                   	dec    eax
c000e189:	eb e7                	jmp    c000e172 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e18b:	31 c0                	xor    eax,eax
c000e18d:	83 c4 08             	add    esp,0x8
c000e190:	5b                   	pop    ebx
c000e191:	c3                   	ret    
c000e192:	66 90                	xchg   ax,ax

c000e194 <Krnl::handlePowerButton()>:
c000e194:	83 ec 0c             	sub    esp,0xc
c000e197:	e8 0e 28 00 00       	call   c00109aa <KeHandlePowerButton()>
c000e19c:	90                   	nop
c000e19d:	83 c4 0c             	add    esp,0xc
c000e1a0:	c3                   	ret    
c000e1a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e1a4 <Krnl::handleSleepButton()>:
c000e1a4:	83 ec 0c             	sub    esp,0xc
c000e1a7:	e8 16 28 00 00       	call   c00109c2 <KeHandleSleepButton()>
c000e1ac:	90                   	nop
c000e1ad:	83 c4 0c             	add    esp,0xc
c000e1b0:	c3                   	ret    
c000e1b1:	90                   	nop

c000e1b2 <Computer::close(int, int, void*)>:
c000e1b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e1b7:	c3                   	ret    

c000e1b8 <KeFirstTask()>:
c000e1b8:	53                   	push   ebx
c000e1b9:	83 ec 14             	sub    esp,0x14
c000e1bc:	fb                   	sti    
c000e1bd:	68 6c 42 02 c0       	push   0xc002426c
c000e1c2:	e8 62 f1 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e1c7:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000e1ce:	e8 8c 1b 00 00       	call   c000fd5f <malloc>
c000e1d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e1da:	89 c3                	mov    ebx,eax
c000e1dc:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000e1e1:	50                   	push   eax
c000e1e2:	68 85 42 02 c0       	push   0xc0024285
c000e1e7:	6a 01                	push   0x1
c000e1e9:	53                   	push   ebx
c000e1ea:	e8 f1 8b 00 00       	call   c0016de0 <Process::Process(bool, char const*, Process*, char**)>
c000e1ef:	83 c4 20             	add    esp,0x20
c000e1f2:	68 ff 00 00 00       	push   0xff
c000e1f7:	6a 00                	push   0x0
c000e1f9:	68 9d ef 00 c0       	push   0xc000ef9d
c000e1fe:	53                   	push   ebx
c000e1ff:	e8 1c 8e 00 00       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c000e204:	8b 15 78 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa78
c000e20a:	6a 7a                	push   0x7a
c000e20c:	6a 00                	push   0x0
c000e20e:	68 c8 79 01 c0       	push   0xc00179c8
c000e213:	52                   	push   edx
c000e214:	e8 07 8e 00 00       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c000e219:	83 c4 14             	add    esp,0x14
c000e21c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000e221:	68 18 43 02 c0       	push   0xc0024318
c000e226:	e8 fe f0 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e22b:	c6 05 d9 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0d9,0x1
c000e232:	e8 97 28 00 00       	call   c0010ace <KeInitRand()>
c000e237:	e8 6e 9b 00 00       	call   c0017daa <Vm::initialise8086()>
c000e23c:	e8 07 9c ff ff       	call   c0007e48 <Fs::initVFS()>
c000e241:	c7 04 24 0d 40 02 c0 	mov    DWORD PTR [esp],0xc002400d
c000e248:	e8 dc f0 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e24d:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e252:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e258:	8b 10                	mov    edx,DWORD PTR [eax]
c000e25a:	6a 00                	push   0x0
c000e25c:	6a 00                	push   0x0
c000e25e:	6a 00                	push   0x0
c000e260:	50                   	push   eax
c000e261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e264:	83 c4 14             	add    esp,0x14
c000e267:	68 18 43 02 c0       	push   0xc0024318
c000e26c:	e8 b8 f0 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e271:	e8 b7 93 ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000e276:	e8 c9 06 00 00       	call   c000e944 <KeLoadSystemEnv()>
c000e27b:	e8 5a 27 00 00       	call   c00109da <KeSetupPowerManager()>
c000e280:	c7 04 24 3c 43 02 c0 	mov    DWORD PTR [esp],0xc002433c
c000e287:	e8 9d f0 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e28c:	59                   	pop    ecx
c000e28d:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e292:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e298:	53                   	push   ebx
c000e299:	e8 d2 b8 ff ff       	call   c0009b70 <Device::loadDriversForAll()>
c000e29e:	c7 04 24 92 42 02 c0 	mov    DWORD PTR [esp],0xc0024292
c000e2a5:	e8 7f f0 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e2aa:	58                   	pop    eax
c000e2ab:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c000e2b1:	5a                   	pop    edx
c000e2b2:	6a 01                	push   0x1
c000e2b4:	68 a3 42 02 c0       	push   0xc00242a3
c000e2b9:	e8 7a 84 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c000e2be:	59                   	pop    ecx
c000e2bf:	5a                   	pop    edx
c000e2c0:	53                   	push   ebx
c000e2c1:	50                   	push   eax
c000e2c2:	e8 c3 86 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c000e2c7:	83 c4 10             	add    esp,0x10
c000e2ca:	83 ec 0c             	sub    esp,0xc
c000e2cd:	6a 02                	push   0x2
c000e2cf:	e8 cc 90 00 00       	call   c00173a0 <blockTask(TaskState)>
c000e2d4:	83 c4 10             	add    esp,0x10
c000e2d7:	eb f1                	jmp    c000e2ca <KeFirstTask()+0x112>
c000e2d9:	90                   	nop

c000e2da <Computer::Computer()>:
c000e2da:	83 ec 0c             	sub    esp,0xc
c000e2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 bf 42 02 c0       	push   0xc00242bf
c000e2e9:	50                   	push   eax
c000e2ea:	e8 c7 b8 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	ba d8 43 02 c0       	mov    edx,0xc00243d8
c000e2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fb:	89 10                	mov    DWORD PTR [eax],edx
c000e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e301:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e319:	90                   	nop
c000e31a:	83 c4 0c             	add    esp,0xc
c000e31d:	c3                   	ret    

c000e31e <KePrepareShutdown()>:
c000e31e:	83 ec 0c             	sub    esp,0xc
c000e321:	e8 53 ef ff ff       	call   c000d279 <KeExecuteAtexit()>
c000e326:	83 ec 0c             	sub    esp,0xc
c000e329:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e32e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e334:	50                   	push   eax
c000e335:	e8 82 b9 ff ff       	call   c0009cbc <Device::closeAll()>
c000e33a:	83 c4 1c             	add    esp,0x1c
c000e33d:	c3                   	ret    

c000e33e <KeShutdown()>:
c000e33e:	83 ec 0c             	sub    esp,0xc
c000e341:	e8 d8 ff ff ff       	call   c000e31e <KePrepareShutdown()>
c000e346:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e34b:	85 c0                	test   eax,eax
c000e34d:	74 02                	je     c000e351 <KeShutdown()+0x13>
c000e34f:	ff d0                	call   eax
c000e351:	83 ec 0c             	sub    esp,0xc
c000e354:	68 5c 43 02 c0       	push   0xc002435c
c000e359:	e8 10 1d 00 00       	call   c001006e <KePanic(char const*)>
c000e35e:	83 c4 1c             	add    esp,0x1c
c000e361:	c3                   	ret    

c000e362 <KeSleep()>:
c000e362:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000e367:	85 c0                	test   eax,eax
c000e369:	74 02                	je     c000e36d <KeSleep()+0xb>
c000e36b:	ff e0                	jmp    eax
c000e36d:	c3                   	ret    

c000e36e <KeRestart()>:
c000e36e:	83 ec 0c             	sub    esp,0xc
c000e371:	e8 a8 ff ff ff       	call   c000e31e <KePrepareShutdown()>
c000e376:	a1 cc d0 02 c0       	mov    eax,ds:0xc002d0cc
c000e37b:	85 c0                	test   eax,eax
c000e37d:	74 02                	je     c000e381 <KeRestart()+0x13>
c000e37f:	ff d0                	call   eax
c000e381:	e4 64                	in     al,0x64
c000e383:	a8 02                	test   al,0x2
c000e385:	75 fa                	jne    c000e381 <KeRestart()+0x13>
c000e387:	b0 fe                	mov    al,0xfe
c000e389:	e6 64                	out    0x64,al
c000e38b:	83 c4 0c             	add    esp,0xc
c000e38e:	c3                   	ret    
c000e38f:	90                   	nop

c000e390 <Computer::open(int, int, void*)>:
c000e390:	56                   	push   esi
c000e391:	53                   	push   ebx
c000e392:	83 ec 04             	sub    esp,0x4
c000e395:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e399:	39 1d d4 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0d4,ebx
c000e39f:	74 10                	je     c000e3b1 <Computer::open(int, int, void*)+0x21>
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	68 80 43 02 c0       	push   0xc0024380
c000e3a9:	e8 c0 1c 00 00       	call   c001006e <KePanic(char const*)>
c000e3ae:	83 c4 10             	add    esp,0x10
c000e3b1:	83 ec 0c             	sub    esp,0xc
c000e3b4:	68 c8 42 02 c0       	push   0xc00242c8
c000e3b9:	e8 6b ef ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e3be:	e8 ae bc 00 00       	call   c001a071 <HalEnableNMI()>
c000e3c3:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e3ca:	e8 90 19 00 00       	call   c000fd5f <malloc>
c000e3cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3d2:	89 c6                	mov    esi,eax
c000e3d4:	e8 b7 c7 00 00       	call   c001ab90 <CPU::CPU()>
c000e3d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3dd:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e3e3:	50                   	push   eax
c000e3e4:	6a 00                	push   0x0
c000e3e6:	6a 00                	push   0x0
c000e3e8:	56                   	push   esi
c000e3e9:	e8 84 c9 00 00       	call   c001ad72 <CPU::open(int, int, void*)>
c000e3ee:	83 c4 14             	add    esp,0x14
c000e3f1:	68 e2 42 02 c0       	push   0xc00242e2
c000e3f6:	e8 2e ef ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e3fb:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e402:	e8 58 19 00 00       	call   c000fd5f <malloc>
c000e407:	89 04 24             	mov    DWORD PTR [esp],eax
c000e40a:	89 c6                	mov    esi,eax
c000e40c:	e8 5f e4 ff ff       	call   c000c870 <ACPI::ACPI()>
c000e411:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e417:	5a                   	pop    edx
c000e418:	59                   	pop    ecx
c000e419:	56                   	push   esi
c000e41a:	53                   	push   ebx
c000e41b:	e8 34 b6 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e420:	5e                   	pop    esi
c000e421:	58                   	pop    eax
c000e422:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e428:	50                   	push   eax
c000e429:	53                   	push   ebx
c000e42a:	e8 25 b6 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e42f:	c7 04 24 ac 43 02 c0 	mov    DWORD PTR [esp],0xc00243ac
c000e436:	e8 ee ee ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e43b:	e8 91 c3 00 00       	call   c001a7d1 <HalInitialiseCoprocessor()>
c000e440:	c7 04 24 fa 42 02 c0 	mov    DWORD PTR [esp],0xc00242fa
c000e447:	e8 dd ee ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e44c:	c7 04 24 b8 e1 00 c0 	mov    DWORD PTR [esp],0xc000e1b8
c000e453:	e8 40 8d 00 00       	call   c0017198 <setupMultitasking(void (*)())>
c000e458:	83 c4 14             	add    esp,0x14
c000e45b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e460:	5b                   	pop    ebx
c000e461:	5e                   	pop    esi
c000e462:	c3                   	ret    

c000e463 <KeCalculateCRC32(unsigned char*, int)>:
c000e463:	53                   	push   ebx
c000e464:	83 c8 ff             	or     eax,0xffffffff
c000e467:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e46b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e46f:	01 cb                	add    ebx,ecx
c000e471:	39 d9                	cmp    ecx,ebx
c000e473:	74 15                	je     c000e48a <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e475:	41                   	inc    ecx
c000e476:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e479:	31 c2                	xor    edx,eax
c000e47b:	c1 e8 08             	shr    eax,0x8
c000e47e:	0f b6 d2             	movzx  edx,dl
c000e481:	33 04 95 c0 6a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9540]
c000e488:	eb e7                	jmp    c000e471 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e48a:	f7 d0                	not    eax
c000e48c:	5b                   	pop    ebx
c000e48d:	c3                   	ret    

c000e48e <EnvVarContainer::getEnv(char const*)>:
c000e48e:	57                   	push   edi
c000e48f:	56                   	push   esi
c000e490:	53                   	push   ebx
c000e491:	31 db                	xor    ebx,ebx
c000e493:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e497:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e499:	7e 2b                	jle    c000e4c6 <EnvVarContainer::getEnv(char const*)+0x38>
c000e49b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e4a2:	50                   	push   eax
c000e4a3:	50                   	push   eax
c000e4a4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e4aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4ae:	e8 9d 22 ff ff       	call   c0000750 <strcmp>
c000e4b3:	83 c4 10             	add    esp,0x10
c000e4b6:	85 c0                	test   eax,eax
c000e4b8:	75 09                	jne    c000e4c3 <EnvVarContainer::getEnv(char const*)+0x35>
c000e4ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e4bd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e4c1:	eb 05                	jmp    c000e4c8 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e4c3:	43                   	inc    ebx
c000e4c4:	eb d1                	jmp    c000e497 <EnvVarContainer::getEnv(char const*)+0x9>
c000e4c6:	31 c0                	xor    eax,eax
c000e4c8:	5b                   	pop    ebx
c000e4c9:	5e                   	pop    esi
c000e4ca:	5f                   	pop    edi
c000e4cb:	c3                   	ret    

c000e4cc <EnvVarContainer::setEnv(char const*, char const*)>:
c000e4cc:	55                   	push   ebp
c000e4cd:	57                   	push   edi
c000e4ce:	56                   	push   esi
c000e4cf:	53                   	push   ebx
c000e4d0:	83 ec 28             	sub    esp,0x28
c000e4d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e4d7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e4db:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e4df:	56                   	push   esi
c000e4e0:	e8 8b 20 ff ff       	call   c0000570 <strlen>
c000e4e5:	40                   	inc    eax
c000e4e6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4e9:	e8 71 18 00 00       	call   c000fd5f <malloc>
c000e4ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4f5:	e8 76 20 ff ff       	call   c0000570 <strlen>
c000e4fa:	40                   	inc    eax
c000e4fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4fe:	e8 5c 18 00 00       	call   c000fd5f <malloc>
c000e503:	89 34 24             	mov    DWORD PTR [esp],esi
c000e506:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e50a:	e8 61 20 ff ff       	call   c0000570 <strlen>
c000e50f:	83 c4 0c             	add    esp,0xc
c000e512:	40                   	inc    eax
c000e513:	50                   	push   eax
c000e514:	6a 00                	push   0x0
c000e516:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e51a:	e8 d1 1f ff ff       	call   c00004f0 <memset>
c000e51f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e522:	e8 49 20 ff ff       	call   c0000570 <strlen>
c000e527:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e52b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e52e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e530:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e533:	89 de                	mov    esi,ebx
c000e535:	e8 36 20 ff ff       	call   c0000570 <strlen>
c000e53a:	83 c4 0c             	add    esp,0xc
c000e53d:	40                   	inc    eax
c000e53e:	50                   	push   eax
c000e53f:	6a 00                	push   0x0
c000e541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e545:	e8 a6 1f ff ff       	call   c00004f0 <memset>
c000e54a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e54d:	e8 1e 20 ff ff       	call   c0000570 <strlen>
c000e552:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e556:	8d 48 01             	lea    ecx,[eax+0x1]
c000e559:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e55b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e55e:	40                   	inc    eax
c000e55f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e562:	c1 e0 03             	shl    eax,0x3
c000e565:	5a                   	pop    edx
c000e566:	59                   	pop    ecx
c000e567:	50                   	push   eax
c000e568:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e56b:	e8 db 17 00 00       	call   c000fd4b <realloc>
c000e570:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e574:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e577:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e57a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e57e:	b9 08 00 00 00       	mov    ecx,0x8
c000e583:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e585:	83 c4 2c             	add    esp,0x2c
c000e588:	5b                   	pop    ebx
c000e589:	5e                   	pop    esi
c000e58a:	5f                   	pop    edi
c000e58b:	5d                   	pop    ebp
c000e58c:	c3                   	ret    
c000e58d:	90                   	nop

c000e58e <EnvVarContainer::deleteEnv(char const*)>:
c000e58e:	c3                   	ret    
c000e58f:	90                   	nop

c000e590 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e590:	55                   	push   ebp
c000e591:	57                   	push   edi
c000e592:	56                   	push   esi
c000e593:	53                   	push   ebx
c000e594:	81 ec 38 01 00 00    	sub    esp,0x138
c000e59a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e5a1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e5a8:	68 14 01 00 00       	push   0x114
c000e5ad:	e8 ad 17 00 00       	call   c000fd5f <malloc>
c000e5b2:	83 c4 0c             	add    esp,0xc
c000e5b5:	89 c3                	mov    ebx,eax
c000e5b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e5ba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e5c1:	50                   	push   eax
c000e5c2:	e8 c3 9b ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e5c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5ca:	e8 9d 9e ff ff       	call   c000846c <File::exists()>
c000e5cf:	83 c4 10             	add    esp,0x10
c000e5d2:	84 c0                	test   al,al
c000e5d4:	75 31                	jne    c000e607 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e5d6:	50                   	push   eax
c000e5d7:	50                   	push   eax
c000e5d8:	6a 12                	push   0x12
c000e5da:	53                   	push   ebx
c000e5db:	e8 c8 9b ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e5e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5e2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e5e5:	89 34 24             	mov    DWORD PTR [esp],esi
c000e5e8:	e8 83 1f ff ff       	call   c0000570 <strlen>
c000e5ed:	5a                   	pop    edx
c000e5ee:	31 d2                	xor    edx,edx
c000e5f0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e5f4:	51                   	push   ecx
c000e5f5:	56                   	push   esi
c000e5f6:	52                   	push   edx
c000e5f7:	50                   	push   eax
c000e5f8:	53                   	push   ebx
c000e5f9:	ff d7                	call   edi
c000e5fb:	83 c4 14             	add    esp,0x14
c000e5fe:	53                   	push   ebx
c000e5ff:	e8 02 9c ff ff       	call   c0008206 <File::close()>
c000e604:	83 c4 10             	add    esp,0x10
c000e607:	56                   	push   esi
c000e608:	31 f6                	xor    esi,esi
c000e60a:	68 00 01 00 00       	push   0x100
c000e60f:	6a 00                	push   0x0
c000e611:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e615:	50                   	push   eax
c000e616:	e8 d5 1e ff ff       	call   c00004f0 <memset>
c000e61b:	5f                   	pop    edi
c000e61c:	58                   	pop    eax
c000e61d:	6a 01                	push   0x1
c000e61f:	53                   	push   ebx
c000e620:	e8 83 9b ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e625:	83 c4 10             	add    esp,0x10
c000e628:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e630:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e638:	83 ec 0c             	sub    esp,0xc
c000e63b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e63d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e641:	51                   	push   ecx
c000e642:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e646:	52                   	push   edx
c000e647:	6a 00                	push   0x0
c000e649:	6a 01                	push   0x1
c000e64b:	53                   	push   ebx
c000e64c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e64f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e654:	83 c4 20             	add    esp,0x20
c000e657:	89 c2                	mov    edx,eax
c000e659:	85 c0                	test   eax,eax
c000e65b:	0f 84 36 01 00 00    	je     c000e797 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e661:	83 f8 0d             	cmp    eax,0xd
c000e664:	0f 84 22 01 00 00    	je     c000e78c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e66a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e66f:	0f 84 f0 00 00 00    	je     c000e765 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e675:	83 f8 0a             	cmp    eax,0xa
c000e678:	74 13                	je     c000e68d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e67a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e67f:	74 0c                	je     c000e68d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e681:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e687:	0f 8e f6 00 00 00    	jle    c000e783 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e68d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e691:	83 ec 0c             	sub    esp,0xc
c000e694:	8d 78 01             	lea    edi,[eax+0x1]
c000e697:	57                   	push   edi
c000e698:	e8 c2 16 00 00       	call   c000fd5f <malloc>
c000e69d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e6a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e6a5:	8d 56 04             	lea    edx,[esi+0x4]
c000e6a8:	89 14 24             	mov    DWORD PTR [esp],edx
c000e6ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e6af:	e8 ab 16 00 00       	call   c000fd5f <malloc>
c000e6b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e6b8:	83 c4 0c             	add    esp,0xc
c000e6bb:	57                   	push   edi
c000e6bc:	6a 00                	push   0x0
c000e6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e6c2:	e8 29 1e ff ff       	call   c00004f0 <memset>
c000e6c7:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e6cb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e6cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e6d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6d5:	83 c4 0c             	add    esp,0xc
c000e6d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e6dc:	52                   	push   edx
c000e6dd:	6a 00                	push   0x0
c000e6df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e6e3:	e8 08 1e ff ff       	call   c00004f0 <memset>
c000e6e8:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e6ec:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e6f0:	89 34 24             	mov    DWORD PTR [esp],esi
c000e6f3:	e8 78 1e ff ff       	call   c0000570 <strlen>
c000e6f8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e6fc:	89 c1                	mov    ecx,eax
c000e6fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e700:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e703:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e706:	40                   	inc    eax
c000e707:	83 c4 10             	add    esp,0x10
c000e70a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e70d:	85 d2                	test   edx,edx
c000e70f:	75 0c                	jne    c000e71d <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e711:	83 ec 0c             	sub    esp,0xc
c000e714:	6a 08                	push   0x8
c000e716:	e8 44 16 00 00       	call   c000fd5f <malloc>
c000e71b:	eb 0c                	jmp    c000e729 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e71d:	c1 e0 03             	shl    eax,0x3
c000e720:	51                   	push   ecx
c000e721:	51                   	push   ecx
c000e722:	50                   	push   eax
c000e723:	52                   	push   edx
c000e724:	e8 22 16 00 00       	call   c000fd4b <realloc>
c000e729:	83 c4 10             	add    esp,0x10
c000e72c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e72f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e732:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e735:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e739:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e73d:	b9 08 00 00 00       	mov    ecx,0x8
c000e742:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e744:	31 f6                	xor    esi,esi
c000e746:	50                   	push   eax
c000e747:	68 00 01 00 00       	push   0x100
c000e74c:	6a 00                	push   0x0
c000e74e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e752:	50                   	push   eax
c000e753:	e8 98 1d ff ff       	call   c00004f0 <memset>
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e763:	eb 27                	jmp    c000e78c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e765:	83 f8 3d             	cmp    eax,0x3d
c000e768:	74 1e                	je     c000e788 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e76a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e770:	7f 07                	jg     c000e779 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e772:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e776:	46                   	inc    esi
c000e777:	eb 13                	jmp    c000e78c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e779:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e781:	eb 09                	jmp    c000e78c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e783:	83 f8 3d             	cmp    eax,0x3d
c000e786:	75 ea                	jne    c000e772 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e788:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e78c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e791:	0f 85 99 fe ff ff    	jne    c000e630 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e797:	83 ec 0c             	sub    esp,0xc
c000e79a:	53                   	push   ebx
c000e79b:	e8 66 9a ff ff       	call   c0008206 <File::close()>
c000e7a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e7a8:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e7ae:	5b                   	pop    ebx
c000e7af:	5e                   	pop    esi
c000e7b0:	5f                   	pop    edi
c000e7b1:	5d                   	pop    ebp
c000e7b2:	c3                   	ret    
c000e7b3:	90                   	nop

c000e7b4 <EnvVarContainer::__loadSystem()>:
c000e7b4:	83 ec 10             	sub    esp,0x10
c000e7b7:	68 c0 6e 02 c0       	push   0xc0026ec0
c000e7bc:	68 fc 43 02 c0       	push   0xc00243fc
c000e7c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7c5:	e8 c6 fd ff ff       	call   c000e590 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e7ca:	83 c4 1c             	add    esp,0x1c
c000e7cd:	c3                   	ret    

c000e7ce <EnvVarContainer::__loadUser()>:
c000e7ce:	c3                   	ret    
c000e7cf:	90                   	nop

c000e7d0 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e7e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e7e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e7f0:	90                   	nop
c000e7f1:	c3                   	ret    

c000e7f2 <EnvVarContainer::~EnvVarContainer()>:
c000e7f2:	83 ec 0c             	sub    esp,0xc
c000e7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e7fc:	85 c0                	test   eax,eax
c000e7fe:	74 1d                	je     c000e81d <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e804:	8b 00                	mov    eax,DWORD PTR [eax]
c000e806:	85 c0                	test   eax,eax
c000e808:	74 13                	je     c000e81d <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e811:	83 ec 0c             	sub    esp,0xc
c000e814:	50                   	push   eax
c000e815:	e8 55 15 00 00       	call   c000fd6f <free>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	90                   	nop
c000e81e:	83 c4 0c             	add    esp,0xc
c000e821:	c3                   	ret    

c000e822 <KeGetEnv(Process*, char const*)>:
c000e822:	53                   	push   ebx
c000e823:	83 ec 08             	sub    esp,0x8
c000e826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e82e:	39 05 78 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa78,eax
c000e834:	74 04                	je     c000e83a <KeGetEnv(Process*, char const*)+0x18>
c000e836:	85 c0                	test   eax,eax
c000e838:	75 0b                	jne    c000e845 <KeGetEnv(Process*, char const*)+0x23>
c000e83a:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e83f:	85 c0                	test   eax,eax
c000e841:	75 19                	jne    c000e85c <KeGetEnv(Process*, char const*)+0x3a>
c000e843:	eb 27                	jmp    c000e86c <KeGetEnv(Process*, char const*)+0x4a>
c000e845:	52                   	push   edx
c000e846:	52                   	push   edx
c000e847:	53                   	push   ebx
c000e848:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e84e:	e8 3b fc ff ff       	call   c000e48e <EnvVarContainer::getEnv(char const*)>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	85 c0                	test   eax,eax
c000e858:	75 28                	jne    c000e882 <KeGetEnv(Process*, char const*)+0x60>
c000e85a:	eb de                	jmp    c000e83a <KeGetEnv(Process*, char const*)+0x18>
c000e85c:	52                   	push   edx
c000e85d:	52                   	push   edx
c000e85e:	53                   	push   ebx
c000e85f:	50                   	push   eax
c000e860:	e8 29 fc ff ff       	call   c000e48e <EnvVarContainer::getEnv(char const*)>
c000e865:	83 c4 10             	add    esp,0x10
c000e868:	85 c0                	test   eax,eax
c000e86a:	75 16                	jne    c000e882 <KeGetEnv(Process*, char const*)+0x60>
c000e86c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e870:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c000e875:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e879:	83 c4 08             	add    esp,0x8
c000e87c:	5b                   	pop    ebx
c000e87d:	e9 0c fc ff ff       	jmp    c000e48e <EnvVarContainer::getEnv(char const*)>
c000e882:	83 c4 08             	add    esp,0x8
c000e885:	5b                   	pop    ebx
c000e886:	c3                   	ret    

c000e887 <KeSetEnvSystem(char const*, char const*)>:
c000e887:	83 ec 10             	sub    esp,0x10
c000e88a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e892:	ff 35 e0 d0 02 c0    	push   DWORD PTR ds:0xc002d0e0
c000e898:	e8 2f fc ff ff       	call   c000e4cc <EnvVarContainer::setEnv(char const*, char const*)>
c000e89d:	83 c4 1c             	add    esp,0x1c
c000e8a0:	c3                   	ret    

c000e8a1 <KeSetEnvUser(char const*, char const*)>:
c000e8a1:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e8a6:	85 c0                	test   eax,eax
c000e8a8:	74 15                	je     c000e8bf <KeSetEnvUser(char const*, char const*)+0x1e>
c000e8aa:	83 ec 10             	sub    esp,0x10
c000e8ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8b5:	50                   	push   eax
c000e8b6:	e8 11 fc ff ff       	call   c000e4cc <EnvVarContainer::setEnv(char const*, char const*)>
c000e8bb:	83 c4 1c             	add    esp,0x1c
c000e8be:	c3                   	ret    
c000e8bf:	c3                   	ret    

c000e8c0 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8c4:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e8ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8ce:	e9 f9 fb ff ff       	jmp    c000e4cc <EnvVarContainer::setEnv(char const*, char const*)>

c000e8d3 <KeDeleteEnvSystem(char const*)>:
c000e8d3:	c3                   	ret    

c000e8d4 <KeDeleteEnvUser(char const*)>:
c000e8d4:	c3                   	ret    

c000e8d5 <KeDeleteEnvProcess(Process*, char const*)>:
c000e8d5:	c3                   	ret    

c000e8d6 <KeNewProcessEnv(Process*)>:
c000e8d6:	83 ec 28             	sub    esp,0x28
c000e8d9:	6a 0c                	push   0xc
c000e8db:	e8 7f 14 00 00       	call   c000fd5f <malloc>
c000e8e0:	5a                   	pop    edx
c000e8e1:	59                   	pop    ecx
c000e8e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e8e6:	50                   	push   eax
c000e8e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8eb:	e8 e0 fe ff ff       	call   c000e7d0 <EnvVarContainer::EnvVarContainer(Process*)>
c000e8f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8f4:	83 c4 2c             	add    esp,0x2c
c000e8f7:	c3                   	ret    

c000e8f8 <KeCopyProcessEnv(Process*, Process*)>:
c000e8f8:	57                   	push   edi
c000e8f9:	56                   	push   esi
c000e8fa:	53                   	push   ebx
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	83 ec 0c             	sub    esp,0xc
c000e902:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e908:	6a 0c                	push   0xc
c000e90a:	e8 50 14 00 00       	call   c000fd5f <malloc>
c000e90f:	89 c3                	mov    ebx,eax
c000e911:	58                   	pop    eax
c000e912:	5a                   	pop    edx
c000e913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e917:	53                   	push   ebx
c000e918:	e8 b3 fe ff ff       	call   c000e7d0 <EnvVarContainer::EnvVarContainer(Process*)>
c000e91d:	8b 07                	mov    eax,DWORD PTR [edi]
c000e91f:	89 03                	mov    DWORD PTR [ebx],eax
c000e921:	c1 e0 03             	shl    eax,0x3
c000e924:	89 04 24             	mov    DWORD PTR [esp],eax
c000e927:	e8 33 14 00 00       	call   c000fd5f <malloc>
c000e92c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e92f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e931:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e934:	c1 e1 03             	shl    ecx,0x3
c000e937:	89 c7                	mov    edi,eax
c000e939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	89 d8                	mov    eax,ebx
c000e940:	5b                   	pop    ebx
c000e941:	5e                   	pop    esi
c000e942:	5f                   	pop    edi
c000e943:	c3                   	ret    

c000e944 <KeLoadSystemEnv()>:
c000e944:	53                   	push   ebx
c000e945:	83 ec 14             	sub    esp,0x14
c000e948:	6a 0c                	push   0xc
c000e94a:	e8 10 14 00 00       	call   c000fd5f <malloc>
c000e94f:	89 c3                	mov    ebx,eax
c000e951:	58                   	pop    eax
c000e952:	5a                   	pop    edx
c000e953:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000e959:	53                   	push   ebx
c000e95a:	e8 71 fe ff ff       	call   c000e7d0 <EnvVarContainer::EnvVarContainer(Process*)>
c000e95f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e962:	89 1d e0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0e0,ebx
c000e968:	e8 47 fe ff ff       	call   c000e7b4 <EnvVarContainer::__loadSystem()>
c000e96d:	83 c4 18             	add    esp,0x18
c000e970:	5b                   	pop    ebx
c000e971:	c3                   	ret    

c000e972 <KeLoadUserEnv()>:
c000e972:	53                   	push   ebx
c000e973:	83 ec 14             	sub    esp,0x14
c000e976:	6a 0c                	push   0xc
c000e978:	e8 e2 13 00 00       	call   c000fd5f <malloc>
c000e97d:	89 c3                	mov    ebx,eax
c000e97f:	58                   	pop    eax
c000e980:	5a                   	pop    edx
c000e981:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000e987:	53                   	push   ebx
c000e988:	e8 43 fe ff ff       	call   c000e7d0 <EnvVarContainer::EnvVarContainer(Process*)>
c000e98d:	89 1d dc d0 02 c0    	mov    DWORD PTR ds:0xc002d0dc,ebx
c000e993:	83 c4 18             	add    esp,0x18
c000e996:	5b                   	pop    ebx
c000e997:	c3                   	ret    

c000e998 <KeFlushEnv()>:
c000e998:	c3                   	ret    

c000e999 <KeGetProcessTotalEnvCount(Process*)>:
c000e999:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e99d:	8b 15 dc d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0dc
c000e9a3:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e9a9:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c000e9ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9b0:	03 01                	add    eax,DWORD PTR [ecx]
c000e9b2:	85 d2                	test   edx,edx
c000e9b4:	74 02                	je     c000e9b8 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e9b6:	03 02                	add    eax,DWORD PTR [edx]
c000e9b8:	c3                   	ret    

c000e9b9 <KeGetProcessEnvPair(Process*, int)>:
c000e9b9:	57                   	push   edi
c000e9ba:	56                   	push   esi
c000e9bb:	8b 35 dc d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0dc
c000e9c1:	53                   	push   ebx
c000e9c2:	85 f6                	test   esi,esi
c000e9c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9cc:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e9d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e9d8:	75 16                	jne    c000e9f0 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e9da:	39 c2                	cmp    edx,eax
c000e9dc:	7c 16                	jl     c000e9f4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e9de:	8b 0d e0 d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d0e0
c000e9e4:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e9e6:	01 c6                	add    esi,eax
c000e9e8:	39 d6                	cmp    esi,edx
c000e9ea:	7e 3c                	jle    c000ea28 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e9ec:	29 c2                	sub    edx,eax
c000e9ee:	eb 04                	jmp    c000e9f4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e9f0:	39 c2                	cmp    edx,eax
c000e9f2:	7d 05                	jge    c000e9f9 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e9f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e9f7:	eb 20                	jmp    c000ea19 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e9f9:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e9fb:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e9fe:	39 d1                	cmp    ecx,edx
c000ea00:	7e 04                	jle    c000ea06 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000ea02:	29 c2                	sub    edx,eax
c000ea04:	eb 10                	jmp    c000ea16 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000ea06:	8b 35 e0 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0e0
c000ea0c:	03 0e                	add    ecx,DWORD PTR [esi]
c000ea0e:	39 d1                	cmp    ecx,edx
c000ea10:	7e 16                	jle    c000ea28 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000ea12:	29 c2                	sub    edx,eax
c000ea14:	29 fa                	sub    edx,edi
c000ea16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ea19:	8d 14 d0             	lea    edx,[eax+edx*8]
c000ea1c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ea1e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ea21:	89 03                	mov    DWORD PTR [ebx],eax
c000ea23:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000ea26:	eb 1d                	jmp    c000ea45 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000ea28:	83 ec 0c             	sub    esp,0xc
c000ea2b:	68 1e 44 02 c0       	push   0xc002441e
c000ea30:	e8 39 16 00 00       	call   c001006e <KePanic(char const*)>
c000ea35:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ea3b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ea42:	83 c4 10             	add    esp,0x10
c000ea45:	89 d8                	mov    eax,ebx
c000ea47:	5b                   	pop    ebx
c000ea48:	5e                   	pop    esi
c000ea49:	5f                   	pop    edi
c000ea4a:	c2 04 00             	ret    0x4
c000ea4d:	66 90                	xchg   ax,ax
c000ea4f:	90                   	nop

c000ea50 <KeSetupInterrupts()>:
c000ea50:	83 ec 10             	sub    esp,0x10
c000ea53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea5b:	90                   	nop
c000ea5c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ea64:	7f 5a                	jg     c000eac0 <KeSetupInterrupts()+0x70>
c000ea66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea6e:	66 90                	xchg   ax,ax
c000ea70:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ea75:	7f 41                	jg     c000eab8 <KeSetupInterrupts()+0x68>
c000ea77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea7b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea86:	01 d0                	add    eax,edx
c000ea88:	c7 04 85 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd1f00],0x0
c000ea93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea97:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eaa2:	01 d0                	add    eax,edx
c000eaa4:	c7 04 85 00 d1 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f00],0x0
c000eaaf:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000eab4:	eb ba                	jmp    c000ea70 <KeSetupInterrupts()+0x20>
c000eab6:	66 90                	xchg   ax,ax
c000eab8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000eabd:	eb 9d                	jmp    c000ea5c <KeSetupInterrupts()+0xc>
c000eabf:	90                   	nop
c000eac0:	90                   	nop
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	c3                   	ret    
c000eac5:	8d 76 00             	lea    esi,[esi+0x0]

c000eac8 <int_handler>:
c000eac8:	83 ec 2c             	sub    esp,0x2c
c000eacb:	90                   	nop
c000eacc:	a0 44 f1 02 c0       	mov    al,ds:0xc002f144
c000ead1:	0f b6 c0             	movzx  eax,al
c000ead4:	85 c0                	test   eax,eax
c000ead6:	74 04                	je     c000eadc <int_handler+0x14>
c000ead8:	fa                   	cli    
c000ead9:	f4                   	hlt    
c000eada:	eb f0                	jmp    c000eacc <int_handler+0x4>
c000eadc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eae0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000eae3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eae7:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000eaec:	7e 1a                	jle    c000eb08 <int_handler+0x40>
c000eaee:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000eaf3:	7f 13                	jg     c000eb08 <int_handler+0x40>
c000eaf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaf9:	83 e8 20             	sub    eax,0x20
c000eafc:	83 ec 0c             	sub    esp,0xc
c000eaff:	50                   	push   eax
c000eb00:	e8 5c c0 00 00       	call   c001ab61 <HalEndOfInterrupt(int)>
c000eb05:	83 c4 10             	add    esp,0x10
c000eb08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb0c:	c1 e0 04             	shl    eax,0x4
c000eb0f:	05 00 e1 02 c0       	add    eax,0xc002e100
c000eb14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb1c:	c1 e0 04             	shl    eax,0x4
c000eb1f:	05 00 d1 02 c0       	add    eax,0xc002d100
c000eb24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb28:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000eb30:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000eb35:	0f 8f ad 00 00 00    	jg     c000ebe8 <int_handler+0x120>
c000eb3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb3f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eb46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb4a:	01 d0                	add    eax,edx
c000eb4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb4e:	85 c0                	test   eax,eax
c000eb50:	0f 84 86 00 00 00    	je     c000ebdc <int_handler+0x114>
c000eb56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000eb5d:	83 f8 60             	cmp    eax,0x60
c000eb60:	75 46                	jne    c000eba8 <int_handler+0xe0>
c000eb62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb66:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eb6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb71:	01 d0                	add    eax,edx
c000eb73:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb79:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb84:	01 ca                	add    edx,ecx
c000eb86:	8b 12                	mov    edx,DWORD PTR [edx]
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	52                   	push   edx
c000eb8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb90:	ff d0                	call   eax
c000eb92:	83 c4 10             	add    esp,0x10
c000eb95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eba5:	eb 4d                	jmp    c000ebf4 <int_handler+0x12c>
c000eba7:	90                   	nop
c000eba8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebac:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ebb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebb7:	01 d0                	add    eax,edx
c000ebb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebbf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ebc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ebca:	01 ca                	add    edx,ecx
c000ebcc:	8b 12                	mov    edx,DWORD PTR [edx]
c000ebce:	83 ec 08             	sub    esp,0x8
c000ebd1:	52                   	push   edx
c000ebd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ebd6:	ff d0                	call   eax
c000ebd8:	83 c4 10             	add    esp,0x10
c000ebdb:	90                   	nop
c000ebdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000ebe1:	e9 4a ff ff ff       	jmp    c000eb30 <int_handler+0x68>
c000ebe6:	66 90                	xchg   ax,ax
c000ebe8:	b8 00 00 00 00       	mov    eax,0x0
c000ebed:	ba 00 00 00 00       	mov    edx,0x0
c000ebf2:	66 90                	xchg   ax,ax
c000ebf4:	83 c4 2c             	add    esp,0x2c
c000ebf7:	c3                   	ret    

c000ebf8 <KeDisplayProgramFault(char const*)>:
c000ebf8:	83 ec 0c             	sub    esp,0xc
c000ebfb:	83 ec 0c             	sub    esp,0xc
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	e8 75 83 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ec0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ec14:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ec1a:	85 c0                	test   eax,eax
c000ec1c:	74 22                	je     c000ec40 <KeDisplayProgramFault(char const*)+0x48>
c000ec1e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ec23:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ec28:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ec2e:	6a 04                	push   0x4
c000ec30:	6a 0f                	push   0xf
c000ec32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec36:	50                   	push   eax
c000ec37:	e8 6a 3d 00 00       	call   c00129a6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ec3c:	83 c4 10             	add    esp,0x10
c000ec3f:	90                   	nop
c000ec40:	90                   	nop
c000ec41:	83 c4 0c             	add    esp,0xc
c000ec44:	c3                   	ret    
c000ec45:	8d 76 00             	lea    esi,[esi+0x0]

c000ec48 <KeGeneralProtectionFault(void*, void*)>:
c000ec48:	83 ec 0c             	sub    esp,0xc
c000ec4b:	83 ec 0c             	sub    esp,0xc
c000ec4e:	68 38 44 02 c0       	push   0xc0024438
c000ec53:	e8 24 83 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	83 ec 08             	sub    esp,0x8
c000ec5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec66:	e8 b5 b4 00 00       	call   c001a120 <HalHandleGeneralProtectionFault(void*, void*)>
c000ec6b:	83 c4 10             	add    esp,0x10
c000ec6e:	0f b6 c0             	movzx  eax,al
c000ec71:	85 c0                	test   eax,eax
c000ec73:	75 2f                	jne    c000eca4 <KeGeneralProtectionFault(void*, void*)+0x5c>
c000ec75:	83 ec 0c             	sub    esp,0xc
c000ec78:	68 43 44 02 c0       	push   0xc0024443
c000ec7d:	e8 76 ff ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ec82:	83 c4 10             	add    esp,0x10
c000ec85:	83 ec 0c             	sub    esp,0xc
c000ec88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec8c:	e8 f3 b5 00 00       	call   c001a284 <HalDisplayDebugInfo(void*)>
c000ec91:	83 c4 10             	add    esp,0x10
c000ec94:	83 ec 0c             	sub    esp,0xc
c000ec97:	6a 00                	push   0x0
c000ec99:	e8 52 8f 00 00       	call   c0017bf0 <Thr::terminateFromIRQ(int)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	eb 05                	jmp    c000eca8 <KeGeneralProtectionFault(void*, void*)+0x60>
c000eca3:	90                   	nop
c000eca4:	90                   	nop
c000eca5:	8d 76 00             	lea    esi,[esi+0x0]
c000eca8:	83 c4 0c             	add    esp,0xc
c000ecab:	c3                   	ret    

c000ecac <KePageFault(void*, void*)>:
c000ecac:	83 ec 0c             	sub    esp,0xc
c000ecaf:	83 ec 0c             	sub    esp,0xc
c000ecb2:	68 5c 44 02 c0       	push   0xc002445c
c000ecb7:	e8 c0 82 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ecbc:	83 c4 10             	add    esp,0x10
c000ecbf:	83 ec 08             	sub    esp,0x8
c000ecc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecca:	e8 44 b5 00 00       	call   c001a213 <HalHandlePageFault(void*, void*)>
c000eccf:	83 c4 10             	add    esp,0x10
c000ecd2:	0f b6 c0             	movzx  eax,al
c000ecd5:	85 c0                	test   eax,eax
c000ecd7:	75 2f                	jne    c000ed08 <KePageFault(void*, void*)+0x5c>
c000ecd9:	83 ec 0c             	sub    esp,0xc
c000ecdc:	68 69 44 02 c0       	push   0xc0024469
c000ece1:	e8 12 ff ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ece6:	83 c4 10             	add    esp,0x10
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecf0:	e8 8f b5 00 00       	call   c001a284 <HalDisplayDebugInfo(void*)>
c000ecf5:	83 c4 10             	add    esp,0x10
c000ecf8:	83 ec 0c             	sub    esp,0xc
c000ecfb:	6a 00                	push   0x0
c000ecfd:	e8 ee 8e 00 00       	call   c0017bf0 <Thr::terminateFromIRQ(int)>
c000ed02:	83 c4 10             	add    esp,0x10
c000ed05:	eb 05                	jmp    c000ed0c <KePageFault(void*, void*)+0x60>
c000ed07:	90                   	nop
c000ed08:	90                   	nop
c000ed09:	8d 76 00             	lea    esi,[esi+0x0]
c000ed0c:	83 c4 0c             	add    esp,0xc
c000ed0f:	c3                   	ret    

c000ed10 <KeNonMaskableInterrupt(void*, void*)>:
c000ed10:	83 ec 0c             	sub    esp,0xc
c000ed13:	e8 fa b8 00 00       	call   c001a612 <HalReceivedNMI()>
c000ed18:	90                   	nop
c000ed19:	83 c4 0c             	add    esp,0xc
c000ed1c:	c3                   	ret    
c000ed1d:	8d 76 00             	lea    esi,[esi+0x0]

c000ed20 <KeOtherFault(void*, void*)>:
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	83 ec 0c             	sub    esp,0xc
c000ed26:	68 74 44 02 c0       	push   0xc0024474
c000ed2b:	e8 c8 fe ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ed30:	83 c4 10             	add    esp,0x10
c000ed33:	83 ec 0c             	sub    esp,0xc
c000ed36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed3a:	e8 45 b5 00 00       	call   c001a284 <HalDisplayDebugInfo(void*)>
c000ed3f:	83 c4 10             	add    esp,0x10
c000ed42:	83 ec 0c             	sub    esp,0xc
c000ed45:	6a 00                	push   0x0
c000ed47:	e8 a4 8e 00 00       	call   c0017bf0 <Thr::terminateFromIRQ(int)>
c000ed4c:	83 c4 10             	add    esp,0x10
c000ed4f:	90                   	nop
c000ed50:	83 c4 0c             	add    esp,0xc
c000ed53:	c3                   	ret    

c000ed54 <KeOpcodeFault(void*, void*)>:
c000ed54:	55                   	push   ebp
c000ed55:	89 e5                	mov    ebp,esp
c000ed57:	83 ec 08             	sub    esp,0x8
c000ed5a:	83 ec 08             	sub    esp,0x8
c000ed5d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ed60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ed63:	e8 da b4 00 00       	call   c001a242 <HalHandleOpcodeFault(void*, void*)>
c000ed68:	83 c4 10             	add    esp,0x10
c000ed6b:	0f b6 c0             	movzx  eax,al
c000ed6e:	85 c0                	test   eax,eax
c000ed70:	75 2e                	jne    c000eda0 <KeOpcodeFault(void*, void*)+0x4c>
c000ed72:	83 ec 0c             	sub    esp,0xc
c000ed75:	68 9c 44 02 c0       	push   0xc002449c
c000ed7a:	e8 79 fe ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ed7f:	83 c4 10             	add    esp,0x10
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ed88:	e8 f7 b4 00 00       	call   c001a284 <HalDisplayDebugInfo(void*)>
c000ed8d:	83 c4 10             	add    esp,0x10
c000ed90:	83 ec 0c             	sub    esp,0xc
c000ed93:	6a 00                	push   0x0
c000ed95:	e8 56 8e 00 00       	call   c0017bf0 <Thr::terminateFromIRQ(int)>
c000ed9a:	83 c4 10             	add    esp,0x10
c000ed9d:	eb 05                	jmp    c000eda4 <KeOpcodeFault(void*, void*)+0x50>
c000ed9f:	90                   	nop
c000eda0:	90                   	nop
c000eda1:	8d 76 00             	lea    esi,[esi+0x0]
c000eda4:	c9                   	leave  
c000eda5:	c3                   	ret    
c000eda6:	66 90                	xchg   ax,ax

c000eda8 <KeDoubleFault(void*, void*)>:
c000eda8:	55                   	push   ebp
c000eda9:	89 e5                	mov    ebp,esp
c000edab:	83 ec 08             	sub    esp,0x8
c000edae:	83 ec 0c             	sub    esp,0xc
c000edb1:	68 a9 44 02 c0       	push   0xc00244a9
c000edb6:	e8 b3 12 00 00       	call   c001006e <KePanic(char const*)>
c000edbb:	83 c4 10             	add    esp,0x10
c000edbe:	90                   	nop
c000edbf:	c9                   	leave  
c000edc0:	c3                   	ret    
c000edc1:	90                   	nop

c000edc2 <GDTEntry::setBase(unsigned int)>:
c000edc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000edca:	89 c1                	mov    ecx,eax
c000edcc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000edd0:	c1 e9 10             	shr    ecx,0x10
c000edd3:	c1 e8 18             	shr    eax,0x18
c000edd6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000edd9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eddc:	c3                   	ret    
c000eddd:	90                   	nop

c000edde <GDTEntry::setLimit(unsigned int)>:
c000edde:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ede2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ede6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ede9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edec:	83 e2 f0             	and    edx,0xfffffff0
c000edef:	c1 e8 10             	shr    eax,0x10
c000edf2:	83 e0 0f             	and    eax,0xf
c000edf5:	09 d0                	or     eax,edx
c000edf7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edfa:	c3                   	ret    
c000edfb:	90                   	nop

c000edfc <GDT::GDT()>:
c000edfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee10:	90                   	nop
c000ee11:	c3                   	ret    

c000ee12 <GDT::addEntry(GDTEntry)>:
c000ee12:	53                   	push   ebx
c000ee13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee1b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee21:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ee25:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ee29:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee2c:	c1 e0 03             	shl    eax,0x3
c000ee2f:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee31:	5b                   	pop    ebx
c000ee32:	c3                   	ret    
c000ee33:	90                   	nop

c000ee34 <GDT::getNumberOfEntries()>:
c000ee34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee38:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <GDT::flush()>:
c000ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee40:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee42:	83 c0 04             	add    eax,0x4
c000ee45:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee4c:	a3 02 f1 02 c0       	mov    ds:0xc002f102,eax
c000ee51:	66 89 15 00 f1 02 c0 	mov    WORD PTR ds:0xc002f100,dx
c000ee58:	e9 fd 14 ff ff       	jmp    c000035a <loadGDT>
c000ee5d:	90                   	nop

c000ee5e <GDT::setup()>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	53                   	push   ebx
c000ee61:	83 ec 30             	sub    esp,0x30
c000ee64:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ee68:	6a 00                	push   0x0
c000ee6a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ee6e:	56                   	push   esi
c000ee6f:	e8 4e ff ff ff       	call   c000edc2 <GDTEntry::setBase(unsigned int)>
c000ee74:	6a 00                	push   0x0
c000ee76:	56                   	push   esi
c000ee77:	e8 62 ff ff ff       	call   c000edde <GDTEntry::setLimit(unsigned int)>
c000ee7c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ee84:	6a 00                	push   0x0
c000ee86:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ee8a:	56                   	push   esi
c000ee8b:	e8 32 ff ff ff       	call   c000edc2 <GDTEntry::setBase(unsigned int)>
c000ee90:	68 ff ff ff 00       	push   0xffffff
c000ee95:	56                   	push   esi
c000ee96:	e8 43 ff ff ff       	call   c000edde <GDTEntry::setLimit(unsigned int)>
c000ee9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ee9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000eea7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000eeab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb0:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eeb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eebd:	89 f8                	mov    eax,edi
c000eebf:	89 fa                	mov    edx,edi
c000eec1:	80 e4 f7             	and    ah,0xf7
c000eec4:	80 ce 60             	or     dh,0x60
c000eec7:	89 c7                	mov    edi,eax
c000eec9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000eecd:	80 cc 60             	or     ah,0x60
c000eed0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eed4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eed8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000eedc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eee0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eee4:	83 c4 20             	add    esp,0x20
c000eee7:	6a 00                	push   0x0
c000eee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c000eeed:	50                   	push   eax
c000eeee:	e8 cf fe ff ff       	call   c000edc2 <GDTEntry::setBase(unsigned int)>
c000eef3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000eef7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000eefb:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000eeff:	83 e0 3f             	and    eax,0x3f
c000ef02:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ef06:	6a 00                	push   0x0
c000ef08:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ef0c:	50                   	push   eax
c000ef0d:	e8 b0 fe ff ff       	call   c000edc2 <GDTEntry::setBase(unsigned int)>
c000ef12:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ef16:	83 e0 3f             	and    eax,0x3f
c000ef19:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ef1d:	83 c4 0c             	add    esp,0xc
c000ef20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef28:	53                   	push   ebx
c000ef29:	e8 e4 fe ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c000ef2e:	83 c4 0c             	add    esp,0xc
c000ef31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef39:	53                   	push   ebx
c000ef3a:	e8 d3 fe ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c000ef3f:	83 c4 0c             	add    esp,0xc
c000ef42:	57                   	push   edi
c000ef43:	56                   	push   esi
c000ef44:	53                   	push   ebx
c000ef45:	e8 c8 fe ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c000ef4a:	83 c4 0c             	add    esp,0xc
c000ef4d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef51:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef55:	53                   	push   ebx
c000ef56:	e8 b7 fe ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c000ef5b:	83 c4 0c             	add    esp,0xc
c000ef5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ef62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ef66:	53                   	push   ebx
c000ef67:	e8 a6 fe ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c000ef6c:	83 c4 0c             	add    esp,0xc
c000ef6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef77:	53                   	push   ebx
c000ef78:	e8 95 fe ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c000ef7d:	83 c4 0c             	add    esp,0xc
c000ef80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef88:	53                   	push   ebx
c000ef89:	e8 84 fe ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c000ef8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef91:	e8 a6 fe ff ff       	call   c000ee3c <GDT::flush()>
c000ef96:	83 c4 40             	add    esp,0x40
c000ef99:	5b                   	pop    ebx
c000ef9a:	5e                   	pop    esi
c000ef9b:	5f                   	pop    edi
c000ef9c:	c3                   	ret    

c000ef9d <idleFunction(void*)>:
c000ef9d:	83 ec 0c             	sub    esp,0xc
c000efa0:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000efa7:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000efae:	75 01                	jne    c000efb1 <idleFunction(void*)+0x14>
c000efb0:	fb                   	sti    
c000efb1:	e8 f7 b6 00 00       	call   c001a6ad <HalSystemIdle()>
c000efb6:	e8 cb 34 01 00       	call   c0022486 <idleCommon()>
c000efbb:	eb f4                	jmp    c000efb1 <idleFunction(void*)+0x14>
c000efbd:	66 90                	xchg   ax,ax
c000efbf:	90                   	nop

c000efc0 <IDTEntry::IDTEntry(bool)>:
c000efc0:	53                   	push   ebx
c000efc1:	83 ec 04             	sub    esp,0x4
c000efc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efc8:	88 04 24             	mov    BYTE PTR [esp],al
c000efcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efcf:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efe1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efe4:	83 e2 f0             	and    edx,0xfffffff0
c000efe7:	83 ca 0e             	or     edx,0xe
c000efea:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eff1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eff4:	83 e2 ef             	and    edx,0xffffffef
c000eff7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000effa:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000effe:	85 c0                	test   eax,eax
c000f000:	74 06                	je     c000f008 <IDTEntry::IDTEntry(bool)+0x48>
c000f002:	b2 03                	mov    dl,0x3
c000f004:	eb 06                	jmp    c000f00c <IDTEntry::IDTEntry(bool)+0x4c>
c000f006:	66 90                	xchg   ax,ax
c000f008:	b2 00                	mov    dl,0x0
c000f00a:	66 90                	xchg   ax,ax
c000f00c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f010:	83 e2 03             	and    edx,0x3
c000f013:	89 d3                	mov    ebx,edx
c000f015:	c1 e3 05             	shl    ebx,0x5
c000f018:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f01b:	83 e2 9f             	and    edx,0xffffff9f
c000f01e:	88 d1                	mov    cl,dl
c000f020:	88 da                	mov    dl,bl
c000f022:	09 ca                	or     edx,ecx
c000f024:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f027:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f02b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f02e:	83 ca 80             	or     edx,0xffffff80
c000f031:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f034:	90                   	nop
c000f035:	83 c4 04             	add    esp,0x4
c000f038:	5b                   	pop    ebx
c000f039:	c3                   	ret    

c000f03a <IDTEntry::setOffset(unsigned int)>:
c000f03a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	66 89 02             	mov    WORD PTR [edx],ax
c000f045:	c1 e8 10             	shr    eax,0x10
c000f048:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f04c:	c3                   	ret    
c000f04d:	90                   	nop
c000f04e:	66 90                	xchg   ax,ax

c000f050 <IDT::IDT()>:
c000f050:	90                   	nop
c000f051:	c3                   	ret    

c000f052 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f056:	83 c0 30             	add    eax,0x30
c000f059:	c3                   	ret    

c000f05a <IDT::addEntry(IDTEntry, int)>:
c000f05a:	53                   	push   ebx
c000f05b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f05f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f063:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f06b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f06e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f072:	5b                   	pop    ebx
c000f073:	c3                   	ret    

c000f074 <IDT::addEntry(int, void (*)(), bool)>:
c000f074:	53                   	push   ebx
c000f075:	83 ec 10             	sub    esp,0x10
c000f078:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f07d:	50                   	push   eax
c000f07e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f082:	53                   	push   ebx
c000f083:	e8 38 ff ff ff       	call   c000efc0 <IDTEntry::IDTEntry(bool)>
c000f088:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f08c:	53                   	push   ebx
c000f08d:	e8 a8 ff ff ff       	call   c000f03a <IDTEntry::setOffset(unsigned int)>
c000f092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f096:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f09a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0a2:	e8 b3 ff ff ff       	call   c000f05a <IDT::addEntry(IDTEntry, int)>
c000f0a7:	83 c4 30             	add    esp,0x30
c000f0aa:	5b                   	pop    ebx
c000f0ab:	c3                   	ret    

c000f0ac <IDT::flush()>:
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	66 c7 05 08 f1 02 c0 ff 07 	mov    WORD PTR ds:0xc002f108,0x7ff
c000f0b9:	a3 0a f1 02 c0       	mov    ds:0xc002f10a,eax
c000f0be:	0f 01 1d 08 f1 02 c0 	lidtd  ds:0xc002f108
c000f0c5:	c3                   	ret    

c000f0c6 <IDT::setup()>:
c000f0c6:	57                   	push   edi
c000f0c7:	56                   	push   esi
c000f0c8:	53                   	push   ebx
c000f0c9:	83 ec 10             	sub    esp,0x10
c000f0cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f0d0:	6a 00                	push   0x0
c000f0d2:	68 60 17 02 c0       	push   0xc0021760
c000f0d7:	6a 00                	push   0x0
c000f0d9:	53                   	push   ebx
c000f0da:	e8 95 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f0df:	6a 00                	push   0x0
c000f0e1:	68 70 17 02 c0       	push   0xc0021770
c000f0e6:	6a 01                	push   0x1
c000f0e8:	53                   	push   ebx
c000f0e9:	e8 86 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f0ee:	83 c4 20             	add    esp,0x20
c000f0f1:	6a 00                	push   0x0
c000f0f3:	68 7a 17 02 c0       	push   0xc002177a
c000f0f8:	6a 02                	push   0x2
c000f0fa:	53                   	push   ebx
c000f0fb:	e8 74 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f100:	6a 00                	push   0x0
c000f102:	68 84 17 02 c0       	push   0xc0021784
c000f107:	6a 03                	push   0x3
c000f109:	53                   	push   ebx
c000f10a:	e8 65 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f10f:	83 c4 20             	add    esp,0x20
c000f112:	6a 00                	push   0x0
c000f114:	68 8e 17 02 c0       	push   0xc002178e
c000f119:	6a 04                	push   0x4
c000f11b:	53                   	push   ebx
c000f11c:	e8 53 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f121:	6a 00                	push   0x0
c000f123:	68 98 17 02 c0       	push   0xc0021798
c000f128:	6a 05                	push   0x5
c000f12a:	53                   	push   ebx
c000f12b:	e8 44 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f130:	83 c4 20             	add    esp,0x20
c000f133:	6a 00                	push   0x0
c000f135:	68 a2 17 02 c0       	push   0xc00217a2
c000f13a:	6a 06                	push   0x6
c000f13c:	53                   	push   ebx
c000f13d:	e8 32 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f142:	6a 00                	push   0x0
c000f144:	68 ac 17 02 c0       	push   0xc00217ac
c000f149:	6a 07                	push   0x7
c000f14b:	53                   	push   ebx
c000f14c:	e8 23 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f151:	83 c4 20             	add    esp,0x20
c000f154:	6a 00                	push   0x0
c000f156:	68 b6 17 02 c0       	push   0xc00217b6
c000f15b:	6a 08                	push   0x8
c000f15d:	53                   	push   ebx
c000f15e:	e8 11 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f163:	6a 00                	push   0x0
c000f165:	68 be 17 02 c0       	push   0xc00217be
c000f16a:	6a 09                	push   0x9
c000f16c:	53                   	push   ebx
c000f16d:	e8 02 ff ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f172:	83 c4 20             	add    esp,0x20
c000f175:	6a 00                	push   0x0
c000f177:	68 c8 17 02 c0       	push   0xc00217c8
c000f17c:	6a 0a                	push   0xa
c000f17e:	53                   	push   ebx
c000f17f:	e8 f0 fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f184:	6a 00                	push   0x0
c000f186:	68 d0 17 02 c0       	push   0xc00217d0
c000f18b:	6a 0b                	push   0xb
c000f18d:	53                   	push   ebx
c000f18e:	e8 e1 fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f193:	83 c4 20             	add    esp,0x20
c000f196:	6a 00                	push   0x0
c000f198:	68 d8 17 02 c0       	push   0xc00217d8
c000f19d:	6a 0c                	push   0xc
c000f19f:	53                   	push   ebx
c000f1a0:	e8 cf fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f1a5:	6a 00                	push   0x0
c000f1a7:	68 e0 17 02 c0       	push   0xc00217e0
c000f1ac:	6a 0d                	push   0xd
c000f1ae:	53                   	push   ebx
c000f1af:	e8 c0 fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f1b4:	83 c4 20             	add    esp,0x20
c000f1b7:	6a 00                	push   0x0
c000f1b9:	68 fa 17 02 c0       	push   0xc00217fa
c000f1be:	6a 0e                	push   0xe
c000f1c0:	53                   	push   ebx
c000f1c1:	e8 ae fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f1c6:	6a 00                	push   0x0
c000f1c8:	68 02 18 02 c0       	push   0xc0021802
c000f1cd:	6a 0f                	push   0xf
c000f1cf:	53                   	push   ebx
c000f1d0:	e8 9f fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f1d5:	83 c4 20             	add    esp,0x20
c000f1d8:	6a 00                	push   0x0
c000f1da:	68 0c 18 02 c0       	push   0xc002180c
c000f1df:	6a 10                	push   0x10
c000f1e1:	53                   	push   ebx
c000f1e2:	e8 8d fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f1e7:	6a 00                	push   0x0
c000f1e9:	68 16 18 02 c0       	push   0xc0021816
c000f1ee:	6a 11                	push   0x11
c000f1f0:	53                   	push   ebx
c000f1f1:	e8 7e fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f1f6:	83 c4 20             	add    esp,0x20
c000f1f9:	6a 00                	push   0x0
c000f1fb:	68 20 18 02 c0       	push   0xc0021820
c000f200:	6a 12                	push   0x12
c000f202:	53                   	push   ebx
c000f203:	e8 6c fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f208:	6a 01                	push   0x1
c000f20a:	68 ba 18 02 c0       	push   0xc00218ba
c000f20f:	6a 60                	push   0x60
c000f211:	53                   	push   ebx
c000f212:	e8 5d fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f217:	83 c4 20             	add    esp,0x20
c000f21a:	6a 00                	push   0x0
c000f21c:	68 c1 18 02 c0       	push   0xc00218c1
c000f221:	6a 20                	push   0x20
c000f223:	53                   	push   ebx
c000f224:	e8 4b fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f229:	6a 00                	push   0x0
c000f22b:	68 ac 18 02 c0       	push   0xc00218ac
c000f230:	6a 21                	push   0x21
c000f232:	53                   	push   ebx
c000f233:	e8 3c fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f238:	83 c4 20             	add    esp,0x20
c000f23b:	6a 00                	push   0x0
c000f23d:	68 b3 18 02 c0       	push   0xc00218b3
c000f242:	6a 22                	push   0x22
c000f244:	53                   	push   ebx
c000f245:	e8 2a fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f24a:	6a 00                	push   0x0
c000f24c:	68 2a 18 02 c0       	push   0xc002182a
c000f251:	6a 23                	push   0x23
c000f253:	53                   	push   ebx
c000f254:	e8 1b fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f259:	83 c4 20             	add    esp,0x20
c000f25c:	6a 00                	push   0x0
c000f25e:	68 34 18 02 c0       	push   0xc0021834
c000f263:	6a 24                	push   0x24
c000f265:	53                   	push   ebx
c000f266:	e8 09 fe ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f26b:	6a 00                	push   0x0
c000f26d:	68 3e 18 02 c0       	push   0xc002183e
c000f272:	6a 25                	push   0x25
c000f274:	53                   	push   ebx
c000f275:	e8 fa fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f27a:	83 c4 20             	add    esp,0x20
c000f27d:	6a 00                	push   0x0
c000f27f:	68 48 18 02 c0       	push   0xc0021848
c000f284:	6a 26                	push   0x26
c000f286:	53                   	push   ebx
c000f287:	e8 e8 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f28c:	6a 00                	push   0x0
c000f28e:	68 52 18 02 c0       	push   0xc0021852
c000f293:	6a 27                	push   0x27
c000f295:	53                   	push   ebx
c000f296:	e8 d9 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f29b:	83 c4 20             	add    esp,0x20
c000f29e:	6a 00                	push   0x0
c000f2a0:	68 5c 18 02 c0       	push   0xc002185c
c000f2a5:	6a 28                	push   0x28
c000f2a7:	53                   	push   ebx
c000f2a8:	e8 c7 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f2ad:	6a 00                	push   0x0
c000f2af:	68 66 18 02 c0       	push   0xc0021866
c000f2b4:	6a 29                	push   0x29
c000f2b6:	53                   	push   ebx
c000f2b7:	e8 b8 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f2bc:	83 c4 20             	add    esp,0x20
c000f2bf:	6a 00                	push   0x0
c000f2c1:	68 70 18 02 c0       	push   0xc0021870
c000f2c6:	6a 2a                	push   0x2a
c000f2c8:	53                   	push   ebx
c000f2c9:	e8 a6 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f2ce:	6a 00                	push   0x0
c000f2d0:	68 7a 18 02 c0       	push   0xc002187a
c000f2d5:	6a 2b                	push   0x2b
c000f2d7:	53                   	push   ebx
c000f2d8:	e8 97 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f2dd:	83 c4 20             	add    esp,0x20
c000f2e0:	6a 00                	push   0x0
c000f2e2:	68 84 18 02 c0       	push   0xc0021884
c000f2e7:	6a 2c                	push   0x2c
c000f2e9:	53                   	push   ebx
c000f2ea:	e8 85 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f2ef:	6a 00                	push   0x0
c000f2f1:	68 8e 18 02 c0       	push   0xc002188e
c000f2f6:	6a 2d                	push   0x2d
c000f2f8:	53                   	push   ebx
c000f2f9:	e8 76 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f2fe:	83 c4 20             	add    esp,0x20
c000f301:	6a 00                	push   0x0
c000f303:	68 98 18 02 c0       	push   0xc0021898
c000f308:	6a 2e                	push   0x2e
c000f30a:	53                   	push   ebx
c000f30b:	e8 64 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f310:	6a 00                	push   0x0
c000f312:	68 a2 18 02 c0       	push   0xc00218a2
c000f317:	6a 2f                	push   0x2f
c000f319:	53                   	push   ebx
c000f31a:	e8 55 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f31f:	83 c4 20             	add    esp,0x20
c000f322:	6a 00                	push   0x0
c000f324:	68 c4 19 02 c0       	push   0xc00219c4
c000f329:	6a 30                	push   0x30
c000f32b:	53                   	push   ebx
c000f32c:	e8 43 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f331:	6a 00                	push   0x0
c000f333:	68 ce 19 02 c0       	push   0xc00219ce
c000f338:	6a 31                	push   0x31
c000f33a:	53                   	push   ebx
c000f33b:	e8 34 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f340:	83 c4 20             	add    esp,0x20
c000f343:	6a 00                	push   0x0
c000f345:	68 d8 19 02 c0       	push   0xc00219d8
c000f34a:	6a 32                	push   0x32
c000f34c:	53                   	push   ebx
c000f34d:	e8 22 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f352:	6a 00                	push   0x0
c000f354:	68 e2 19 02 c0       	push   0xc00219e2
c000f359:	6a 33                	push   0x33
c000f35b:	53                   	push   ebx
c000f35c:	e8 13 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f361:	83 c4 20             	add    esp,0x20
c000f364:	6a 00                	push   0x0
c000f366:	68 ec 19 02 c0       	push   0xc00219ec
c000f36b:	6a 34                	push   0x34
c000f36d:	53                   	push   ebx
c000f36e:	e8 01 fd ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f373:	6a 00                	push   0x0
c000f375:	68 f6 19 02 c0       	push   0xc00219f6
c000f37a:	6a 35                	push   0x35
c000f37c:	53                   	push   ebx
c000f37d:	e8 f2 fc ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f382:	83 c4 20             	add    esp,0x20
c000f385:	6a 00                	push   0x0
c000f387:	68 00 1a 02 c0       	push   0xc0021a00
c000f38c:	6a 36                	push   0x36
c000f38e:	53                   	push   ebx
c000f38f:	e8 e0 fc ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f394:	6a 00                	push   0x0
c000f396:	68 0a 1a 02 c0       	push   0xc0021a0a
c000f39b:	6a 37                	push   0x37
c000f39d:	53                   	push   ebx
c000f39e:	e8 d1 fc ff ff       	call   c000f074 <IDT::addEntry(int, void (*)(), bool)>
c000f3a3:	83 c4 1c             	add    esp,0x1c
c000f3a6:	6a 03                	push   0x3
c000f3a8:	6a 02                	push   0x2
c000f3aa:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000f3b0:	e8 9f 49 00 00       	call   c0013d54 <VAS::allocatePages(int, int)>
c000f3b5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f3bc:	89 c6                	mov    esi,eax
c000f3be:	e8 9c 09 00 00       	call   c000fd5f <malloc>
c000f3c3:	81 c6 00 20 00 00    	add    esi,0x2000
c000f3c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3cc:	89 c7                	mov    edi,eax
c000f3ce:	e8 3d 3a 00 00       	call   c0012e10 <TSS::TSS()>
c000f3d3:	83 c4 0c             	add    esp,0xc
c000f3d6:	68 b6 17 02 c0       	push   0xc00217b6
c000f3db:	56                   	push   esi
c000f3dc:	57                   	push   edi
c000f3dd:	e8 72 3a 00 00       	call   c0012e54 <TSS::setup(unsigned long, unsigned long)>
c000f3e2:	89 c6                	mov    esi,eax
c000f3e4:	58                   	pop    eax
c000f3e5:	5a                   	pop    edx
c000f3e6:	6a 00                	push   0x0
c000f3e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3ec:	50                   	push   eax
c000f3ed:	e8 ce fb ff ff       	call   c000efc0 <IDTEntry::IDTEntry(bool)>
c000f3f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3f6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3fb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f402:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f408:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f40c:	80 ce 05             	or     dh,0x5
c000f40f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f412:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f416:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f41a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f41d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f420:	e8 87 fc ff ff       	call   c000f0ac <IDT::flush()>
c000f425:	83 c4 20             	add    esp,0x20
c000f428:	5b                   	pop    ebx
c000f429:	5e                   	pop    esi
c000f42a:	5f                   	pop    edi
c000f42b:	c3                   	ret    

c000f42c <CPU::current()>:
c000f42c:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000f431:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f437:	c3                   	ret    

c000f438 <operator new(unsigned long)>:
c000f438:	e9 22 09 00 00       	jmp    c000fd5f <malloc>

c000f43d <operator delete(void*)>:
c000f43d:	e9 3d 09 00 00       	jmp    c000fd7f <rfree>

c000f442 <disableIRQs()>:
c000f442:	fa                   	cli    
c000f443:	c3                   	ret    

c000f444 <enableIRQs()>:
c000f444:	fb                   	sti    
c000f445:	c3                   	ret    

c000f446 <lockScheduler()>:
c000f446:	fa                   	cli    
c000f447:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c000f44d:	c3                   	ret    

c000f44e <unlockScheduler()>:
c000f44e:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000f455:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000f45c:	75 01                	jne    c000f45f <unlockScheduler()+0x11>
c000f45e:	fb                   	sti    
c000f45f:	c3                   	ret    

c000f460 <lockStuff()>:
c000f460:	fa                   	cli    
c000f461:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c000f467:	ff 05 4c fa 02 c0    	inc    DWORD PTR ds:0xc002fa4c
c000f46d:	c3                   	ret    

c000f46e <unlockStuff()>:
c000f46e:	83 ec 0c             	sub    esp,0xc
c000f471:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c000f476:	48                   	dec    eax
c000f477:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c000f47c:	75 18                	jne    c000f496 <unlockStuff()+0x28>
c000f47e:	83 3d 48 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa48,0x0
c000f485:	74 0f                	je     c000f496 <unlockStuff()+0x28>
c000f487:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c000f491:	e8 4a 7e 00 00       	call   c00172e0 <schedule()>
c000f496:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000f49d:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000f4a4:	75 01                	jne    c000f4a7 <unlockStuff()+0x39>
c000f4a6:	fb                   	sti    
c000f4a7:	83 c4 0c             	add    esp,0xc
c000f4aa:	c3                   	ret    

c000f4ab <Virt::getAKernelVAS()>:
c000f4ab:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c000f4b0:	c3                   	ret    

c000f4b1 <__not_memcpy>:
c000f4b1:	57                   	push   edi
c000f4b2:	56                   	push   esi
c000f4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f4bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f4bf:	89 c7                	mov    edi,eax
c000f4c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	c3                   	ret    

c000f4c6 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f4c6:	55                   	push   ebp
c000f4c7:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4cc:	57                   	push   edi
c000f4cd:	56                   	push   esi
c000f4ce:	53                   	push   ebx
c000f4cf:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f4d4:	81 ec ac 00 00 00    	sub    esp,0xac
c000f4da:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f4e1:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f4e6:	99                   	cdq    
c000f4e7:	f7 f9                	idiv   ecx
c000f4e9:	89 d5                	mov    ebp,edx
c000f4eb:	99                   	cdq    
c000f4ec:	f7 f9                	idiv   ecx
c000f4ee:	8d 42 30             	lea    eax,[edx+0x30]
c000f4f1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f4f5:	8d 45 30             	lea    eax,[ebp+0x30]
c000f4f8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f4fc:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f503:	99                   	cdq    
c000f504:	f7 fb                	idiv   ebx
c000f506:	bb 64 00 00 00       	mov    ebx,0x64
c000f50b:	99                   	cdq    
c000f50c:	f7 f9                	idiv   ecx
c000f50e:	8d 42 30             	lea    eax,[edx+0x30]
c000f511:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f515:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f51c:	99                   	cdq    
c000f51d:	f7 fb                	idiv   ebx
c000f51f:	31 db                	xor    ebx,ebx
c000f521:	99                   	cdq    
c000f522:	f7 f9                	idiv   ecx
c000f524:	8d 42 30             	lea    eax,[edx+0x30]
c000f527:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f52b:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f537:	0f be 8b 24 f1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd0edc]
c000f53e:	83 f9 59             	cmp    ecx,0x59
c000f541:	74 1c                	je     c000f55f <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f543:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f54a:	83 f9 4d             	cmp    ecx,0x4d
c000f54d:	0f 84 e3 00 00 00    	je     c000f636 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f553:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f55a:	e9 d7 00 00 00       	jmp    c000f636 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f55f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f564:	74 27                	je     c000f58d <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f566:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f56a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f56f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f573:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f577:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f57b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f57f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f583:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f587:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f58b:	eb 15                	jmp    c000f5a2 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f58d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f591:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f595:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f599:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f59d:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f5a2:	50                   	push   eax
c000f5a3:	50                   	push   eax
c000f5a4:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f5a8:	57                   	push   edi
c000f5a9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f5ad:	56                   	push   esi
c000f5ae:	e8 8d 12 ff ff       	call   c0000840 <strcat>
c000f5b3:	83 c4 10             	add    esp,0x10
c000f5b6:	83 fb 02             	cmp    ebx,0x2
c000f5b9:	74 1a                	je     c000f5d5 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f5bb:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f5c0:	a1 28 f1 02 c0       	mov    eax,ds:0xc002f128
c000f5c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f5c9:	55                   	push   ebp
c000f5ca:	55                   	push   ebp
c000f5cb:	57                   	push   edi
c000f5cc:	56                   	push   esi
c000f5cd:	e8 6e 12 ff ff       	call   c0000840 <strcat>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	43                   	inc    ebx
c000f5d6:	83 fb 03             	cmp    ebx,0x3
c000f5d9:	0f 85 58 ff ff ff    	jne    c000f537 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f5df:	51                   	push   ecx
c000f5e0:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f5e7:	6a 00                	push   0x0
c000f5e9:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f5f0:	e8 fb 0e ff ff       	call   c00004f0 <memset>
c000f5f5:	89 34 24             	mov    DWORD PTR [esp],esi
c000f5f8:	e8 73 0f ff ff       	call   c0000570 <strlen>
c000f5fd:	83 c4 10             	add    esp,0x10
c000f600:	40                   	inc    eax
c000f601:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f608:	72 17                	jb     c000f621 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f60a:	52                   	push   edx
c000f60b:	52                   	push   edx
c000f60c:	56                   	push   esi
c000f60d:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f614:	e8 27 10 ff ff       	call   c0000640 <strcpy>
c000f619:	83 c4 10             	add    esp,0x10
c000f61c:	e9 8a 00 00 00       	jmp    c000f6ab <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f621:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f628:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f62f:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f632:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f634:	eb 75                	jmp    c000f6ab <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f636:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f63a:	89 ef                	mov    edi,ebp
c000f63c:	50                   	push   eax
c000f63d:	c1 ff 1f             	sar    edi,0x1f
c000f640:	50                   	push   eax
c000f641:	57                   	push   edi
c000f642:	55                   	push   ebp
c000f643:	e8 70 04 00 00       	call   c000fab8 <KeGetDigitsInNumber(long long)>
c000f648:	83 c4 10             	add    esp,0x10
c000f64b:	48                   	dec    eax
c000f64c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f650:	75 1c                	jne    c000f66e <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f652:	83 f9 44             	cmp    ecx,0x44
c000f655:	75 09                	jne    c000f660 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f657:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000f65e:	eb 0c                	jmp    c000f66c <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f660:	83 f9 4d             	cmp    ecx,0x4d
c000f663:	75 2b                	jne    c000f690 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f665:	80 3d 41 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f141,0x0
c000f66c:	74 22                	je     c000f690 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f66e:	89 e8                	mov    eax,ebp
c000f670:	b9 0a 00 00 00       	mov    ecx,0xa
c000f675:	99                   	cdq    
c000f676:	f7 f9                	idiv   ecx
c000f678:	89 d5                	mov    ebp,edx
c000f67a:	99                   	cdq    
c000f67b:	f7 f9                	idiv   ecx
c000f67d:	83 c2 30             	add    edx,0x30
c000f680:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f684:	8d 55 30             	lea    edx,[ebp+0x30]
c000f687:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f68b:	e9 0d ff ff ff       	jmp    c000f59d <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f690:	89 e8                	mov    eax,ebp
c000f692:	b9 0a 00 00 00       	mov    ecx,0xa
c000f697:	99                   	cdq    
c000f698:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f69d:	f7 f9                	idiv   ecx
c000f69f:	83 c2 30             	add    edx,0x30
c000f6a2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f6a6:	e9 f7 fe ff ff       	jmp    c000f5a2 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f6ab:	81 c4 ac 00 00 00    	add    esp,0xac
c000f6b1:	5b                   	pop    ebx
c000f6b2:	5e                   	pop    esi
c000f6b3:	5f                   	pop    edi
c000f6b4:	5d                   	pop    ebp
c000f6b5:	c3                   	ret    

c000f6b6 <KeFormatShortDate(char*, int, int, int, int)>:
c000f6b6:	83 ec 14             	sub    esp,0x14
c000f6b9:	6a 00                	push   0x0
c000f6bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6cf:	e8 f2 fd ff ff       	call   c000f4c6 <KeFormatDate(char*, int, int, int, int, bool)>
c000f6d4:	83 c4 2c             	add    esp,0x2c
c000f6d7:	c3                   	ret    

c000f6d8 <KeFormatLongDate(char*, int, int, int, int)>:
c000f6d8:	83 ec 14             	sub    esp,0x14
c000f6db:	6a 01                	push   0x1
c000f6dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6f1:	e8 d0 fd ff ff       	call   c000f4c6 <KeFormatDate(char*, int, int, int, int, bool)>
c000f6f6:	83 c4 2c             	add    esp,0x2c
c000f6f9:	c3                   	ret    

c000f6fa <KeSetLocale(klocale_t)>:
c000f6fa:	57                   	push   edi
c000f6fb:	b9 09 00 00 00       	mov    ecx,0x9
c000f700:	56                   	push   esi
c000f701:	bf 20 f1 02 c0       	mov    edi,0xc002f120
c000f706:	fc                   	cld    
c000f707:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f70b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f70d:	5e                   	pop    esi
c000f70e:	5f                   	pop    edi
c000f70f:	c3                   	ret    

c000f710 <KeInitialiseLocale()>:
c000f710:	57                   	push   edi
c000f711:	56                   	push   esi
c000f712:	83 ec 3c             	sub    esp,0x3c
c000f715:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f71d:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f725:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f72d:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f735:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f73c:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f744:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f74c:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f753:	68 b6 44 02 c0       	push   0xc00244b6
c000f758:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f75c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f760:	50                   	push   eax
c000f761:	e8 da 0e ff ff       	call   c0000640 <strcpy>
c000f766:	83 ec 20             	sub    esp,0x20
c000f769:	b9 09 00 00 00       	mov    ecx,0x9
c000f76e:	fc                   	cld    
c000f76f:	89 e7                	mov    edi,esp
c000f771:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f773:	e8 82 ff ff ff       	call   c000f6fa <KeSetLocale(klocale_t)>
c000f778:	83 c4 64             	add    esp,0x64
c000f77b:	5e                   	pop    esi
c000f77c:	5f                   	pop    edi
c000f77d:	c3                   	ret    

c000f77e <KeFormatCurrency(char*, int, long long, long long)>:
c000f77e:	c3                   	ret    

c000f77f <KeFormatCurrency(char*, int, double)>:
c000f77f:	c3                   	ret    

c000f780 <KeFormatNumber(char*, long long, long long)>:
c000f780:	c3                   	ret    

c000f781 <KeFormatNumber(char*, double)>:
c000f781:	c3                   	ret    
c000f782:	66 90                	xchg   ax,ax

c000f784 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f784:	55                   	push   ebp
c000f785:	57                   	push   edi
c000f786:	56                   	push   esi
c000f787:	53                   	push   ebx
c000f788:	83 ec 5c             	sub    esp,0x5c
c000f78b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f78f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f793:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f797:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f79b:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f79f:	bb 8f 31 02 c0       	mov    ebx,0xc002318f
c000f7a4:	bd 11 00 00 00       	mov    ebp,0x11
c000f7a9:	89 d0                	mov    eax,edx
c000f7ab:	83 e0 01             	and    eax,0x1
c000f7ae:	74 10                	je     c000f7c0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f7b0:	8a 03                	mov    al,BYTE PTR [ebx]
c000f7b2:	88 02                	mov    BYTE PTR [edx],al
c000f7b4:	8d 52 01             	lea    edx,[edx+0x1]
c000f7b7:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f7ba:	83 ed 01             	sub    ebp,0x1
c000f7bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f7c0:	89 d0                	mov    eax,edx
c000f7c2:	83 e0 02             	and    eax,0x2
c000f7c5:	74 11                	je     c000f7d8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f7c7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f7ca:	66 89 02             	mov    WORD PTR [edx],ax
c000f7cd:	8d 52 02             	lea    edx,[edx+0x2]
c000f7d0:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f7d3:	83 ed 02             	sub    ebp,0x2
c000f7d6:	66 90                	xchg   ax,ax
c000f7d8:	89 e8                	mov    eax,ebp
c000f7da:	c1 e8 02             	shr    eax,0x2
c000f7dd:	fc                   	cld    
c000f7de:	89 d7                	mov    edi,edx
c000f7e0:	89 de                	mov    esi,ebx
c000f7e2:	89 c1                	mov    ecx,eax
c000f7e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f7e6:	89 f3                	mov    ebx,esi
c000f7e8:	89 fa                	mov    edx,edi
c000f7ea:	b9 00 00 00 00       	mov    ecx,0x0
c000f7ef:	89 e8                	mov    eax,ebp
c000f7f1:	83 e0 02             	and    eax,0x2
c000f7f4:	74 0e                	je     c000f804 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f7f6:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f7fa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f7fe:	8d 41 02             	lea    eax,[ecx+0x2]
c000f801:	89 c1                	mov    ecx,eax
c000f803:	90                   	nop
c000f804:	89 e8                	mov    eax,ebp
c000f806:	83 e0 01             	and    eax,0x1
c000f809:	74 09                	je     c000f814 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f80b:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f80e:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f811:	8d 76 00             	lea    esi,[esi+0x0]
c000f814:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f818:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f81c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f820:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f824:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f828:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f82c:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f831:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f835:	89 c2                	mov    edx,eax
c000f837:	c1 fa 1f             	sar    edx,0x1f
c000f83a:	52                   	push   edx
c000f83b:	50                   	push   eax
c000f83c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f840:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f844:	e8 6b 25 01 00       	call   c0021db4 <__udivdi3>
c000f849:	83 c4 10             	add    esp,0x10
c000f84c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f850:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f854:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f858:	80 f4 00             	xor    ah,0x0
c000f85b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f85f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f863:	80 f4 00             	xor    ah,0x0
c000f866:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f86a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f86e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f872:	89 f8                	mov    eax,edi
c000f874:	09 f0                	or     eax,esi
c000f876:	74 04                	je     c000f87c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f878:	eb b2                	jmp    c000f82c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f87a:	66 90                	xchg   ax,ax
c000f87c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f880:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f883:	90                   	nop
c000f884:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f888:	89 c1                	mov    ecx,eax
c000f88a:	89 c3                	mov    ebx,eax
c000f88c:	c1 fb 1f             	sar    ebx,0x1f
c000f88f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f897:	53                   	push   ebx
c000f898:	51                   	push   ecx
c000f899:	52                   	push   edx
c000f89a:	50                   	push   eax
c000f89b:	e8 14 26 01 00       	call   c0021eb4 <__umoddi3>
c000f8a0:	83 c4 10             	add    esp,0x10
c000f8a3:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f8a8:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f8ac:	01 c8                	add    eax,ecx
c000f8ae:	8a 10                	mov    dl,BYTE PTR [eax]
c000f8b0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f8b4:	88 10                	mov    BYTE PTR [eax],dl
c000f8b6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f8ba:	89 c2                	mov    edx,eax
c000f8bc:	c1 fa 1f             	sar    edx,0x1f
c000f8bf:	52                   	push   edx
c000f8c0:	50                   	push   eax
c000f8c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8c9:	e8 e6 24 01 00       	call   c0021db4 <__udivdi3>
c000f8ce:	83 c4 10             	add    esp,0x10
c000f8d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8dd:	80 f4 00             	xor    ah,0x0
c000f8e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8e8:	80 f4 00             	xor    ah,0x0
c000f8eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8f7:	89 f8                	mov    eax,edi
c000f8f9:	09 f0                	or     eax,esi
c000f8fb:	74 03                	je     c000f900 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f8fd:	eb 85                	jmp    c000f884 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f8ff:	90                   	nop
c000f900:	90                   	nop
c000f901:	83 c4 5c             	add    esp,0x5c
c000f904:	5b                   	pop    ebx
c000f905:	5e                   	pop    esi
c000f906:	5f                   	pop    edi
c000f907:	5d                   	pop    ebp
c000f908:	c3                   	ret    
c000f909:	8d 76 00             	lea    esi,[esi+0x0]

c000f90c <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f90c:	55                   	push   ebp
c000f90d:	57                   	push   edi
c000f90e:	56                   	push   esi
c000f90f:	53                   	push   ebx
c000f910:	83 ec 5c             	sub    esp,0x5c
c000f913:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f917:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f91b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f91f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f923:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f927:	bb 8f 31 02 c0       	mov    ebx,0xc002318f
c000f92c:	bd 11 00 00 00       	mov    ebp,0x11
c000f931:	89 d0                	mov    eax,edx
c000f933:	83 e0 01             	and    eax,0x1
c000f936:	74 10                	je     c000f948 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f938:	8a 03                	mov    al,BYTE PTR [ebx]
c000f93a:	88 02                	mov    BYTE PTR [edx],al
c000f93c:	8d 52 01             	lea    edx,[edx+0x1]
c000f93f:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f942:	83 ed 01             	sub    ebp,0x1
c000f945:	8d 76 00             	lea    esi,[esi+0x0]
c000f948:	89 d0                	mov    eax,edx
c000f94a:	83 e0 02             	and    eax,0x2
c000f94d:	74 11                	je     c000f960 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f94f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f952:	66 89 02             	mov    WORD PTR [edx],ax
c000f955:	8d 52 02             	lea    edx,[edx+0x2]
c000f958:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f95b:	83 ed 02             	sub    ebp,0x2
c000f95e:	66 90                	xchg   ax,ax
c000f960:	89 e8                	mov    eax,ebp
c000f962:	c1 e8 02             	shr    eax,0x2
c000f965:	fc                   	cld    
c000f966:	89 d7                	mov    edi,edx
c000f968:	89 de                	mov    esi,ebx
c000f96a:	89 c1                	mov    ecx,eax
c000f96c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f96e:	89 f3                	mov    ebx,esi
c000f970:	89 fa                	mov    edx,edi
c000f972:	b9 00 00 00 00       	mov    ecx,0x0
c000f977:	89 e8                	mov    eax,ebp
c000f979:	83 e0 02             	and    eax,0x2
c000f97c:	74 0e                	je     c000f98c <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f97e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f982:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f986:	8d 41 02             	lea    eax,[ecx+0x2]
c000f989:	89 c1                	mov    ecx,eax
c000f98b:	90                   	nop
c000f98c:	89 e8                	mov    eax,ebp
c000f98e:	83 e0 01             	and    eax,0x1
c000f991:	74 09                	je     c000f99c <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f993:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f996:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f999:	8d 76 00             	lea    esi,[esi+0x0]
c000f99c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f9a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f9a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f9a9:	79 1d                	jns    c000f9c8 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f9ab:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f9af:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f9b4:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f9b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f9bc:	8d 50 01             	lea    edx,[eax+0x1]
c000f9bf:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f9c3:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f9c6:	66 90                	xchg   ax,ax
c000f9c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9d0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f9d4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f9d8:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f9dd:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f9e1:	89 c2                	mov    edx,eax
c000f9e3:	c1 fa 1f             	sar    edx,0x1f
c000f9e6:	52                   	push   edx
c000f9e7:	50                   	push   eax
c000f9e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f9ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f9f0:	e8 bf 23 01 00       	call   c0021db4 <__udivdi3>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f9fc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000fa00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa04:	80 f4 00             	xor    ah,0x0
c000fa07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa0b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fa0f:	80 f4 00             	xor    ah,0x0
c000fa12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa16:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fa1a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fa1e:	89 f8                	mov    eax,edi
c000fa20:	09 f0                	or     eax,esi
c000fa22:	74 04                	je     c000fa28 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000fa24:	eb b2                	jmp    c000f9d8 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000fa26:	66 90                	xchg   ax,ax
c000fa28:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fa2c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa2f:	90                   	nop
c000fa30:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fa34:	89 c1                	mov    ecx,eax
c000fa36:	89 c3                	mov    ebx,eax
c000fa38:	c1 fb 1f             	sar    ebx,0x1f
c000fa3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fa43:	53                   	push   ebx
c000fa44:	51                   	push   ecx
c000fa45:	52                   	push   edx
c000fa46:	50                   	push   eax
c000fa47:	e8 e8 21 01 00       	call   c0021c34 <__moddi3>
c000fa4c:	83 c4 10             	add    esp,0x10
c000fa4f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000fa54:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000fa58:	01 c8                	add    eax,ecx
c000fa5a:	8a 10                	mov    dl,BYTE PTR [eax]
c000fa5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fa60:	88 10                	mov    BYTE PTR [eax],dl
c000fa62:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fa66:	89 c2                	mov    edx,eax
c000fa68:	c1 fa 1f             	sar    edx,0x1f
c000fa6b:	52                   	push   edx
c000fa6c:	50                   	push   eax
c000fa6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa75:	e8 6e 20 01 00       	call   c0021ae8 <__divdi3>
c000fa7a:	83 c4 10             	add    esp,0x10
c000fa7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fa85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa89:	80 f4 00             	xor    ah,0x0
c000fa8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fa90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa94:	80 f4 00             	xor    ah,0x0
c000fa97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fa9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa9f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000faa3:	89 f8                	mov    eax,edi
c000faa5:	09 f0                	or     eax,esi
c000faa7:	74 03                	je     c000faac <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000faa9:	eb 85                	jmp    c000fa30 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000faab:	90                   	nop
c000faac:	90                   	nop
c000faad:	83 c4 5c             	add    esp,0x5c
c000fab0:	5b                   	pop    ebx
c000fab1:	5e                   	pop    esi
c000fab2:	5f                   	pop    edi
c000fab3:	5d                   	pop    ebp
c000fab4:	c3                   	ret    
c000fab5:	8d 76 00             	lea    esi,[esi+0x0]

c000fab8 <KeGetDigitsInNumber(long long)>:
c000fab8:	56                   	push   esi
c000fab9:	53                   	push   ebx
c000faba:	83 ec 24             	sub    esp,0x24
c000fabd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fac5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fac9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000facd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fad5:	8d 76 00             	lea    esi,[esi+0x0]
c000fad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fadc:	80 f4 00             	xor    ah,0x0
c000fadf:	89 c3                	mov    ebx,eax
c000fae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fae5:	80 f4 00             	xor    ah,0x0
c000fae8:	89 c6                	mov    esi,eax
c000faea:	89 f0                	mov    eax,esi
c000faec:	09 d8                	or     eax,ebx
c000faee:	74 28                	je     c000fb18 <KeGetDigitsInNumber(long long)+0x60>
c000faf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000faf8:	6a 00                	push   0x0
c000fafa:	6a 0a                	push   0xa
c000fafc:	52                   	push   edx
c000fafd:	50                   	push   eax
c000fafe:	e8 e5 1f 01 00       	call   c0021ae8 <__divdi3>
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb0e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fb13:	eb c3                	jmp    c000fad8 <KeGetDigitsInNumber(long long)+0x20>
c000fb15:	8d 76 00             	lea    esi,[esi+0x0]
c000fb18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb1c:	83 c4 24             	add    esp,0x24
c000fb1f:	5b                   	pop    ebx
c000fb20:	5e                   	pop    esi
c000fb21:	c3                   	ret    
c000fb22:	66 90                	xchg   ax,ax

c000fb24 <KeItoa(unsigned long long, char*)>:
c000fb24:	83 ec 1c             	sub    esp,0x1c
c000fb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb37:	6a 0a                	push   0xa
c000fb39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb45:	e8 3a fc ff ff       	call   c000f784 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fb4a:	83 c4 10             	add    esp,0x10
c000fb4d:	90                   	nop
c000fb4e:	83 c4 1c             	add    esp,0x1c
c000fb51:	c3                   	ret    
c000fb52:	66 90                	xchg   ax,ax

c000fb54 <KeItoa(long long, char*)>:
c000fb54:	83 ec 1c             	sub    esp,0x1c
c000fb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb67:	6a 0a                	push   0xa
c000fb69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb75:	e8 92 fd ff ff       	call   c000f90c <KeBasedSignedIntegerToString(long long, char*, int)>
c000fb7a:	83 c4 10             	add    esp,0x10
c000fb7d:	90                   	nop
c000fb7e:	83 c4 1c             	add    esp,0x1c
c000fb81:	c3                   	ret    
c000fb82:	66 90                	xchg   ax,ax

c000fb84 <KeXtoa(unsigned long long, char*)>:
c000fb84:	83 ec 1c             	sub    esp,0x1c
c000fb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb97:	6a 10                	push   0x10
c000fb99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fba5:	e8 da fb ff ff       	call   c000f784 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	90                   	nop
c000fbae:	83 c4 1c             	add    esp,0x1c
c000fbb1:	c3                   	ret    

c000fbb2 <sbrk>:
c000fbb2:	55                   	push   ebp
c000fbb3:	57                   	push   edi
c000fbb4:	56                   	push   esi
c000fbb5:	53                   	push   ebx
c000fbb6:	83 ec 1c             	sub    esp,0x1c
c000fbb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbbd:	85 c0                	test   eax,eax
c000fbbf:	74 61                	je     c000fc22 <sbrk+0x70>
c000fbc1:	78 66                	js     c000fc29 <sbrk+0x77>
c000fbc3:	8b 15 10 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f10
c000fbc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fbcd:	05 ff 0f 00 00       	add    eax,0xfff
c000fbd2:	89 c5                	mov    ebp,eax
c000fbd4:	78 6b                	js     c000fc41 <sbrk+0x8f>
c000fbd6:	c1 fd 0c             	sar    ebp,0xc
c000fbd9:	bb 00 00 00 00       	mov    ebx,0x0
c000fbde:	8b 35 70 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f270
c000fbe4:	8b 3d 10 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f10
c000fbea:	e8 73 06 00 00       	call   c0010262 <Phys::allocatePage()>
c000fbef:	68 01 04 00 00       	push   0x401
c000fbf4:	57                   	push   edi
c000fbf5:	50                   	push   eax
c000fbf6:	56                   	push   esi
c000fbf7:	e8 54 40 00 00       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fbfc:	81 05 10 6f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026f10,0x1000
c000fc06:	83 c3 01             	add    ebx,0x1
c000fc09:	83 c4 10             	add    esp,0x10
c000fc0c:	39 dd                	cmp    ebp,ebx
c000fc0e:	75 ce                	jne    c000fbde <sbrk+0x2c>
c000fc10:	0f 20 d8             	mov    eax,cr3
c000fc13:	0f 22 d8             	mov    cr3,eax
c000fc16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc1a:	83 c4 1c             	add    esp,0x1c
c000fc1d:	5b                   	pop    ebx
c000fc1e:	5e                   	pop    esi
c000fc1f:	5f                   	pop    edi
c000fc20:	5d                   	pop    ebp
c000fc21:	c3                   	ret    
c000fc22:	a1 10 6f 02 c0       	mov    eax,ds:0xc0026f10
c000fc27:	eb f1                	jmp    c000fc1a <sbrk+0x68>
c000fc29:	83 ec 08             	sub    esp,0x8
c000fc2c:	50                   	push   eax
c000fc2d:	68 bc 44 02 c0       	push   0xc00244bc
c000fc32:	e8 45 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fc37:	83 c4 10             	add    esp,0x10
c000fc3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fc3f:	eb d9                	jmp    c000fc1a <sbrk+0x68>
c000fc41:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fc47:	eb 8d                	jmp    c000fbd6 <sbrk+0x24>

c000fc49 <sbrk_thunk>:
c000fc49:	83 ec 0c             	sub    esp,0xc
c000fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc50:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fc55:	7f 10                	jg     c000fc67 <sbrk_thunk+0x1e>
c000fc57:	83 ec 0c             	sub    esp,0xc
c000fc5a:	50                   	push   eax
c000fc5b:	e8 52 ff ff ff       	call   c000fbb2 <sbrk>
c000fc60:	83 c4 10             	add    esp,0x10
c000fc63:	83 c4 0c             	add    esp,0xc
c000fc66:	c3                   	ret    
c000fc67:	83 ec 08             	sub    esp,0x8
c000fc6a:	50                   	push   eax
c000fc6b:	68 ec 44 02 c0       	push   0xc00244ec
c000fc70:	e8 07 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fc75:	83 c4 10             	add    esp,0x10
c000fc78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fc7d:	eb e4                	jmp    c000fc63 <sbrk_thunk+0x1a>

c000fc7f <mmap>:
c000fc7f:	55                   	push   ebp
c000fc80:	57                   	push   edi
c000fc81:	56                   	push   esi
c000fc82:	53                   	push   ebx
c000fc83:	83 ec 18             	sub    esp,0x18
c000fc86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc8a:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fc90:	89 fb                	mov    ebx,edi
c000fc92:	c1 eb 0c             	shr    ebx,0xc
c000fc95:	53                   	push   ebx
c000fc96:	e8 d2 38 00 00       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c000fc9b:	89 c5                	mov    ebp,eax
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	85 db                	test   ebx,ebx
c000fca2:	7e 2f                	jle    c000fcd3 <mmap+0x54>
c000fca4:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fcaa:	01 c7                	add    edi,eax
c000fcac:	89 c3                	mov    ebx,eax
c000fcae:	8b 35 70 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f270
c000fcb4:	e8 a9 05 00 00       	call   c0010262 <Phys::allocatePage()>
c000fcb9:	68 01 04 00 00       	push   0x401
c000fcbe:	53                   	push   ebx
c000fcbf:	50                   	push   eax
c000fcc0:	56                   	push   esi
c000fcc1:	e8 8a 3f 00 00       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fcc6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	39 fb                	cmp    ebx,edi
c000fcd1:	75 db                	jne    c000fcae <mmap+0x2f>
c000fcd3:	89 e8                	mov    eax,ebp
c000fcd5:	83 c4 0c             	add    esp,0xc
c000fcd8:	5b                   	pop    ebx
c000fcd9:	5e                   	pop    esi
c000fcda:	5f                   	pop    edi
c000fcdb:	5d                   	pop    ebp
c000fcdc:	c3                   	ret    

c000fcdd <munmap>:
c000fcdd:	83 ec 18             	sub    esp,0x18
c000fce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce4:	e8 8c 3b 00 00       	call   c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c000fce9:	b8 00 00 00 00       	mov    eax,0x0
c000fcee:	83 c4 1c             	add    esp,0x1c
c000fcf1:	c3                   	ret    

c000fcf2 <liballoc_lock()>:
c000fcf2:	fa                   	cli    
c000fcf3:	83 05 50 fa 02 c0 01 	add    DWORD PTR ds:0xc002fa50,0x1
c000fcfa:	b8 00 00 00 00       	mov    eax,0x0
c000fcff:	c3                   	ret    

c000fd00 <liballoc_unlock()>:
c000fd00:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fd08:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000fd0f:	75 01                	jne    c000fd12 <liballoc_unlock()+0x12>
c000fd11:	fb                   	sti    
c000fd12:	b8 00 00 00 00       	mov    eax,0x0
c000fd17:	c3                   	ret    

c000fd18 <liballoc_alloc(int)>:
c000fd18:	83 ec 10             	sub    esp,0x10
c000fd1b:	6a 01                	push   0x1
c000fd1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd21:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000fd27:	e8 28 40 00 00       	call   c0013d54 <VAS::allocatePages(int, int)>
c000fd2c:	83 c4 1c             	add    esp,0x1c
c000fd2f:	c3                   	ret    

c000fd30 <liballoc_free(void*, int)>:
c000fd30:	83 ec 14             	sub    esp,0x14
c000fd33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd37:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000fd3d:	e8 70 3c 00 00       	call   c00139b2 <VAS::freeAllocatedPages(unsigned long)>
c000fd42:	b8 00 00 00 00       	mov    eax,0x0
c000fd47:	83 c4 1c             	add    esp,0x1c
c000fd4a:	c3                   	ret    

c000fd4b <realloc>:
c000fd4b:	83 ec 14             	sub    esp,0x14
c000fd4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd56:	e8 fc 19 ff ff       	call   c0001757 <dlrealloc>
c000fd5b:	83 c4 1c             	add    esp,0x1c
c000fd5e:	c3                   	ret    

c000fd5f <malloc>:
c000fd5f:	83 ec 18             	sub    esp,0x18
c000fd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd66:	e8 af 14 ff ff       	call   c000121a <dlmalloc>
c000fd6b:	83 c4 1c             	add    esp,0x1c
c000fd6e:	c3                   	ret    

c000fd6f <free>:
c000fd6f:	83 ec 18             	sub    esp,0x18
c000fd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd76:	e8 d8 0f ff ff       	call   c0000d53 <dlfree>
c000fd7b:	83 c4 1c             	add    esp,0x1c
c000fd7e:	c3                   	ret    

c000fd7f <rfree>:
c000fd7f:	83 ec 18             	sub    esp,0x18
c000fd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd86:	e8 c8 0f ff ff       	call   c0000d53 <dlfree>
c000fd8b:	83 c4 1c             	add    esp,0x1c
c000fd8e:	c3                   	ret    

c000fd8f <calloc>:
c000fd8f:	56                   	push   esi
c000fd90:	53                   	push   ebx
c000fd91:	83 ec 10             	sub    esp,0x10
c000fd94:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd98:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fd9d:	53                   	push   ebx
c000fd9e:	e8 bc ff ff ff       	call   c000fd5f <malloc>
c000fda3:	89 c6                	mov    esi,eax
c000fda5:	83 c4 0c             	add    esp,0xc
c000fda8:	53                   	push   ebx
c000fda9:	6a 00                	push   0x0
c000fdab:	50                   	push   eax
c000fdac:	e8 3f 07 ff ff       	call   c00004f0 <memset>
c000fdb1:	89 f0                	mov    eax,esi
c000fdb3:	83 c4 14             	add    esp,0x14
c000fdb6:	5b                   	pop    ebx
c000fdb7:	5e                   	pop    esi
c000fdb8:	c3                   	ret    
c000fdb9:	66 90                	xchg   ax,ax
c000fdbb:	90                   	nop

c000fdbc <KeMailboxTryPost(Mailbox*, void*)>:
c000fdbc:	83 ec 10             	sub    esp,0x10
c000fdbf:	fa                   	cli    
c000fdc0:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fdc5:	83 c0 01             	add    eax,0x1
c000fdc8:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000fdcd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fdd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdd9:	85 c0                	test   eax,eax
c000fddb:	75 23                	jne    c000fe00 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fde5:	89 10                	mov    DWORD PTR [eax],edx
c000fde7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdee:	8d 50 01             	lea    edx,[eax+0x1]
c000fdf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdf5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdf8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fdfd:	8d 76 00             	lea    esi,[esi+0x0]
c000fe00:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fe08:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fe0d:	85 c0                	test   eax,eax
c000fe0f:	75 03                	jne    c000fe14 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fe11:	fb                   	sti    
c000fe12:	66 90                	xchg   ax,ax
c000fe14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe18:	83 c4 10             	add    esp,0x10
c000fe1b:	c3                   	ret    

c000fe1c <KeMailboxTryGet(Mailbox*, void**)>:
c000fe1c:	83 ec 10             	sub    esp,0x10
c000fe1f:	fa                   	cli    
c000fe20:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fe25:	83 c0 01             	add    eax,0x1
c000fe28:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000fe2d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe39:	83 f8 01             	cmp    eax,0x1
c000fe3c:	75 22                	jne    c000fe60 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fe3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe42:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe48:	89 10                	mov    DWORD PTR [eax],edx
c000fe4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe51:	8d 50 ff             	lea    edx,[eax-0x1]
c000fe54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fe5b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fe60:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fe68:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fe6d:	85 c0                	test   eax,eax
c000fe6f:	75 03                	jne    c000fe74 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fe71:	fb                   	sti    
c000fe72:	66 90                	xchg   ax,ax
c000fe74:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	c3                   	ret    

c000fe7c <KeMailboxCreate()>:
c000fe7c:	83 ec 1c             	sub    esp,0x1c
c000fe7f:	83 ec 0c             	sub    esp,0xc
c000fe82:	6a 08                	push   0x8
c000fe84:	e8 d6 fe ff ff       	call   c000fd5f <malloc>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fea9:	83 c4 1c             	add    esp,0x1c
c000feac:	c3                   	ret    
c000fead:	8d 76 00             	lea    esi,[esi+0x0]

c000feb0 <KeMailboxPost(Mailbox*, void*)>:
c000feb0:	83 ec 1c             	sub    esp,0x1c
c000feb3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000feb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000febc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fec0:	e8 f7 fe ff ff       	call   c000fdbc <KeMailboxTryPost(Mailbox*, void*)>
c000fec5:	83 c4 08             	add    esp,0x8
c000fec8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fecc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fed0:	83 f0 01             	xor    eax,0x1
c000fed3:	0f b6 c0             	movzx  eax,al
c000fed6:	85 c0                	test   eax,eax
c000fed8:	74 26                	je     c000ff00 <KeMailboxPost(Mailbox*, void*)+0x50>
c000feda:	fa                   	cli    
c000fedb:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fee0:	83 c0 01             	add    eax,0x1
c000fee3:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000fee8:	e8 f3 73 00 00       	call   c00172e0 <schedule()>
c000feed:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fef5:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fefa:	85 c0                	test   eax,eax
c000fefc:	75 02                	jne    c000ff00 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fefe:	fb                   	sti    
c000feff:	90                   	nop
c000ff00:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ff05:	85 c0                	test   eax,eax
c000ff07:	75 03                	jne    c000ff0c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ff09:	eb ad                	jmp    c000feb8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ff0b:	90                   	nop
c000ff0c:	90                   	nop
c000ff0d:	83 c4 1c             	add    esp,0x1c
c000ff10:	c3                   	ret    
c000ff11:	8d 76 00             	lea    esi,[esi+0x0]

c000ff14 <KeMailboxGet(Mailbox*, void**)>:
c000ff14:	83 ec 1c             	sub    esp,0x1c
c000ff17:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ff1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff24:	e8 f3 fe ff ff       	call   c000fe1c <KeMailboxTryGet(Mailbox*, void**)>
c000ff29:	83 c4 08             	add    esp,0x8
c000ff2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ff30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ff34:	83 f0 01             	xor    eax,0x1
c000ff37:	0f b6 c0             	movzx  eax,al
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	74 26                	je     c000ff64 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ff3e:	fa                   	cli    
c000ff3f:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000ff44:	83 c0 01             	add    eax,0x1
c000ff47:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000ff4c:	e8 8f 73 00 00       	call   c00172e0 <schedule()>
c000ff51:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000ff59:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000ff5e:	85 c0                	test   eax,eax
c000ff60:	75 02                	jne    c000ff64 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ff62:	fb                   	sti    
c000ff63:	90                   	nop
c000ff64:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ff69:	85 c0                	test   eax,eax
c000ff6b:	75 03                	jne    c000ff70 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000ff6d:	eb ad                	jmp    c000ff1c <KeMailboxGet(Mailbox*, void**)+0x8>
c000ff6f:	90                   	nop
c000ff70:	90                   	nop
c000ff71:	83 c4 1c             	add    esp,0x1c
c000ff74:	c3                   	ret    
c000ff75:	8d 76 00             	lea    esi,[esi+0x0]

c000ff78 <KeMailboxDestroy(Mailbox*)>:
c000ff78:	83 ec 0c             	sub    esp,0xc
c000ff7b:	83 ec 0c             	sub    esp,0xc
c000ff7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff82:	e8 e8 fd ff ff       	call   c000fd6f <free>
c000ff87:	83 c4 10             	add    esp,0x10
c000ff8a:	90                   	nop
c000ff8b:	83 c4 0c             	add    esp,0xc
c000ff8e:	c3                   	ret    

c000ff8f <KeEntryPoint>:
c000ff8f:	57                   	push   edi
c000ff90:	bf f9 03 00 00       	mov    edi,0x3f9
c000ff95:	56                   	push   esi
c000ff96:	31 f6                	xor    esi,esi
c000ff98:	53                   	push   ebx
c000ff99:	83 ec 20             	sub    esp,0x20
c000ff9c:	e8 4b d3 ff ff       	call   c000d2ec <KeInitialiseBootConfigurationFlags()>
c000ffa1:	89 f0                	mov    eax,esi
c000ffa3:	89 fa                	mov    edx,edi
c000ffa5:	ee                   	out    dx,al
c000ffa6:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ffab:	b0 80                	mov    al,0x80
c000ffad:	89 da                	mov    edx,ebx
c000ffaf:	ee                   	out    dx,al
c000ffb0:	b1 03                	mov    cl,0x3
c000ffb2:	ba f8 03 00 00       	mov    edx,0x3f8
c000ffb7:	88 c8                	mov    al,cl
c000ffb9:	ee                   	out    dx,al
c000ffba:	89 f0                	mov    eax,esi
c000ffbc:	89 fa                	mov    edx,edi
c000ffbe:	ee                   	out    dx,al
c000ffbf:	88 c8                	mov    al,cl
c000ffc1:	89 da                	mov    edx,ebx
c000ffc3:	ee                   	out    dx,al
c000ffc4:	b0 c7                	mov    al,0xc7
c000ffc6:	ba fa 03 00 00       	mov    edx,0x3fa
c000ffcb:	ee                   	out    dx,al
c000ffcc:	b0 0b                	mov    al,0xb
c000ffce:	ba fc 03 00 00       	mov    edx,0x3fc
c000ffd3:	ee                   	out    dx,al
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	68 fb 44 02 c0       	push   0xc00244fb
c000ffdc:	e8 9b 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ffe1:	e8 14 d3 ff ff       	call   c000d2fa <KeDisplaySplashScreen()>
c000ffe6:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ffeb:	05 ff 0f 00 00       	add    eax,0xfff
c000fff0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fff5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fff8:	e8 f6 03 00 00       	call   c00103f3 <Phys::physicalMemorySetup(unsigned int)>
c000fffd:	e8 49 37 00 00       	call   c001374b <Virt::virtualMemorySetup()>
c0010002:	e8 1f d2 ff ff       	call   c000d226 <KeInitialiseAtexit()>
c0010007:	58                   	pop    eax
c0010008:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c001000c:	53                   	push   ebx
c001000d:	e8 20 3a 00 00       	call   c0013a32 <VAS::VAS()>
c0010012:	89 1d 70 f2 02 c0    	mov    DWORD PTR ds:0xc002f270,ebx
c0010018:	e8 b1 1f 01 00       	call   c0021fce <_init>
c001001d:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c0010024:	e8 36 fd ff ff       	call   c000fd5f <malloc>
c0010029:	89 04 24             	mov    DWORD PTR [esp],eax
c001002c:	89 c6                	mov    esi,eax
c001002e:	e8 a7 e2 ff ff       	call   c000e2da <Computer::Computer()>
c0010033:	53                   	push   ebx
c0010034:	89 35 d4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d4,esi
c001003a:	6a 00                	push   0x0
c001003c:	6a 00                	push   0x0
c001003e:	56                   	push   esi
c001003f:	e8 4c e3 ff ff       	call   c000e390 <Computer::open(int, int, void*)>
c0010044:	83 c4 14             	add    esp,0x14
c0010047:	53                   	push   ebx
c0010048:	e8 9b 3a 00 00       	call   c0013ae8 <VAS::~VAS()>
c001004d:	83 c4 30             	add    esp,0x30
c0010050:	5b                   	pop    ebx
c0010051:	5e                   	pop    esi
c0010052:	5f                   	pop    edi
c0010053:	c3                   	ret    

c0010054 <Mutex::Mutex()>:
c0010054:	83 ec 0c             	sub    esp,0xc
c0010057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005b:	83 ec 08             	sub    esp,0x8
c001005e:	6a 01                	push   0x1
c0010060:	50                   	push   eax
c0010061:	e8 56 0c 00 00       	call   c0010cbc <Semaphore::Semaphore(int)>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	90                   	nop
c001006a:	83 c4 0c             	add    esp,0xc
c001006d:	c3                   	ret    

c001006e <KePanic(char const*)>:
c001006e:	c6 05 44 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f144,0x1
c0010075:	e9 db a7 00 00       	jmp    c001a855 <HalPanic(char const*)>

c001007a <Phys::allocateDMA(unsigned long)>:
c001007a:	55                   	push   ebp
c001007b:	31 ed                	xor    ebp,ebp
c001007d:	57                   	push   edi
c001007e:	56                   	push   esi
c001007f:	53                   	push   ebx
c0010080:	31 db                	xor    ebx,ebx
c0010082:	83 ec 1c             	sub    esp,0x1c
c0010085:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010089:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010091:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010097:	31 c0                	xor    eax,eax
c0010099:	c1 ef 0c             	shr    edi,0xc
c001009c:	eb 1b                	jmp    c00100b9 <Phys::allocateDMA(unsigned long)+0x3f>
c001009e:	85 c0                	test   eax,eax
c00100a0:	75 06                	jne    c00100a8 <Phys::allocateDMA(unsigned long)+0x2e>
c00100a2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00100a6:	89 dd                	mov    ebp,ebx
c00100a8:	8d 70 01             	lea    esi,[eax+0x1]
c00100ab:	39 f7                	cmp    edi,esi
c00100ad:	74 37                	je     c00100e6 <Phys::allocateDMA(unsigned long)+0x6c>
c00100af:	89 f0                	mov    eax,esi
c00100b1:	83 c3 01             	add    ebx,0x1
c00100b4:	83 fb 0f             	cmp    ebx,0xf
c00100b7:	7f 13                	jg     c00100cc <Phys::allocateDMA(unsigned long)+0x52>
c00100b9:	80 bb 60 f1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd0ea0],0x0
c00100c0:	74 dc                	je     c001009e <Phys::allocateDMA(unsigned long)+0x24>
c00100c2:	31 c0                	xor    eax,eax
c00100c4:	83 c3 01             	add    ebx,0x1
c00100c7:	83 fb 0f             	cmp    ebx,0xf
c00100ca:	7e ed                	jle    c00100b9 <Phys::allocateDMA(unsigned long)+0x3f>
c00100cc:	83 ec 0c             	sub    esp,0xc
c00100cf:	68 14 45 02 c0       	push   0xc0024514
c00100d4:	e8 95 ff ff ff       	call   c001006e <KePanic(char const*)>
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	31 c0                	xor    eax,eax
c00100de:	83 c4 1c             	add    esp,0x1c
c00100e1:	5b                   	pop    ebx
c00100e2:	5e                   	pop    esi
c00100e3:	5f                   	pop    edi
c00100e4:	5d                   	pop    ebp
c00100e5:	c3                   	ret    
c00100e6:	89 e9                	mov    ecx,ebp
c00100e8:	c1 f9 04             	sar    ecx,0x4
c00100eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00100ef:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00100f3:	89 ca                	mov    edx,ecx
c00100f5:	83 ea 01             	sub    edx,0x1
c00100f8:	79 03                	jns    c00100fd <Phys::allocateDMA(unsigned long)+0x83>
c00100fa:	8d 51 0e             	lea    edx,[ecx+0xe]
c00100fd:	c1 fa 04             	sar    edx,0x4
c0010100:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0010104:	74 08                	je     c001010e <Phys::allocateDMA(unsigned long)+0x94>
c0010106:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001010a:	31 c0                	xor    eax,eax
c001010c:	eb b6                	jmp    c00100c4 <Phys::allocateDMA(unsigned long)+0x4a>
c001010e:	85 f6                	test   esi,esi
c0010110:	74 17                	je     c0010129 <Phys::allocateDMA(unsigned long)+0xaf>
c0010112:	8d 95 60 f1 02 c0    	lea    edx,[ebp-0x3ffd0ea0]
c0010118:	8d 84 05 61 f1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd0e9f]
c001011f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010122:	83 c2 01             	add    edx,0x1
c0010125:	39 d0                	cmp    eax,edx
c0010127:	75 f6                	jne    c001011f <Phys::allocateDMA(unsigned long)+0xa5>
c0010129:	a1 58 f1 02 c0       	mov    eax,ds:0xc002f158
c001012e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010132:	01 f8                	add    eax,edi
c0010134:	85 d2                	test   edx,edx
c0010136:	a3 58 f1 02 c0       	mov    ds:0xc002f158,eax
c001013b:	74 17                	je     c0010154 <Phys::allocateDMA(unsigned long)+0xda>
c001013d:	83 ec 0c             	sub    esp,0xc
c0010140:	68 14 45 02 c0       	push   0xc0024514
c0010145:	e8 24 ff ff ff       	call   c001006e <KePanic(char const*)>
c001014a:	83 c4 10             	add    esp,0x10
c001014d:	89 f0                	mov    eax,esi
c001014f:	e9 5d ff ff ff       	jmp    c00100b1 <Phys::allocateDMA(unsigned long)+0x37>
c0010154:	c1 e5 0c             	shl    ebp,0xc
c0010157:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c001015d:	e9 7c ff ff ff       	jmp    c00100de <Phys::allocateDMA(unsigned long)+0x64>

c0010162 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010162:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010166:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001016c:	a1 58 f1 02 c0       	mov    eax,ds:0xc002f158
c0010171:	c1 ea 0c             	shr    edx,0xc
c0010174:	29 d0                	sub    eax,edx
c0010176:	a3 58 f1 02 c0       	mov    ds:0xc002f158,eax
c001017b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0010184:	c1 e8 0c             	shr    eax,0xc
c0010187:	85 d2                	test   edx,edx
c0010189:	74 11                	je     c001019c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c001018b:	05 60 f1 02 c0       	add    eax,0xc002f160
c0010190:	01 c2                	add    edx,eax
c0010192:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010195:	83 c0 01             	add    eax,0x1
c0010198:	39 d0                	cmp    eax,edx
c001019a:	75 f6                	jne    c0010192 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001019c:	c3                   	ret    

c001019d <Phys::setPageState(unsigned long, bool)>:
c001019d:	57                   	push   edi
c001019e:	56                   	push   esi
c001019f:	8b 35 14 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f14
c00101a5:	53                   	push   ebx
c00101a6:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00101ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00101b3:	0f b6 c0             	movzx  eax,al
c00101b6:	89 ca                	mov    edx,ecx
c00101b8:	83 e1 07             	and    ecx,0x7
c00101bb:	c1 ea 03             	shr    edx,0x3
c00101be:	d3 c3                	rol    ebx,cl
c00101c0:	01 d6                	add    esi,edx
c00101c2:	d3 e0                	shl    eax,cl
c00101c4:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00101c7:	21 fb                	and    ebx,edi
c00101c9:	88 1e                	mov    BYTE PTR [esi],bl
c00101cb:	8b 1d 14 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026f14
c00101d1:	01 da                	add    edx,ebx
c00101d3:	8a 0a                	mov    cl,BYTE PTR [edx]
c00101d5:	09 c8                	or     eax,ecx
c00101d7:	88 02                	mov    BYTE PTR [edx],al
c00101d9:	5b                   	pop    ebx
c00101da:	5e                   	pop    esi
c00101db:	5f                   	pop    edi
c00101dc:	c3                   	ret    

c00101dd <Phys::getPageState(unsigned long)>:
c00101dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101e1:	8b 15 14 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f14
c00101e7:	89 c8                	mov    eax,ecx
c00101e9:	83 e1 07             	and    ecx,0x7
c00101ec:	c1 e8 03             	shr    eax,0x3
c00101ef:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00101f3:	d3 f8                	sar    eax,cl
c00101f5:	83 e0 01             	and    eax,0x1
c00101f8:	c3                   	ret    

c00101f9 <Phys::freePage(unsigned long)>:
c00101f9:	53                   	push   ebx
c00101fa:	83 ec 08             	sub    esp,0x8
c00101fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010201:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0010207:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001020d:	76 41                	jbe    c0010250 <Phys::freePage(unsigned long)+0x57>
c001020f:	c1 e8 0c             	shr    eax,0xc
c0010212:	50                   	push   eax
c0010213:	89 c3                	mov    ebx,eax
c0010215:	e8 c3 ff ff ff       	call   c00101dd <Phys::getPageState(unsigned long)>
c001021a:	5a                   	pop    edx
c001021b:	84 c0                	test   al,al
c001021d:	74 20                	je     c001023f <Phys::freePage(unsigned long)+0x46>
c001021f:	83 ec 08             	sub    esp,0x8
c0010222:	a1 58 f1 02 c0       	mov    eax,ds:0xc002f158
c0010227:	6a 00                	push   0x0
c0010229:	83 e8 01             	sub    eax,0x1
c001022c:	53                   	push   ebx
c001022d:	a3 58 f1 02 c0       	mov    ds:0xc002f158,eax
c0010232:	e8 66 ff ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c0010237:	83 c4 10             	add    esp,0x10
c001023a:	83 c4 08             	add    esp,0x8
c001023d:	5b                   	pop    ebx
c001023e:	c3                   	ret    
c001023f:	c7 44 24 10 19 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024619
c0010247:	83 c4 08             	add    esp,0x8
c001024a:	5b                   	pop    ebx
c001024b:	e9 1e fe ff ff       	jmp    c001006e <KePanic(char const*)>
c0010250:	68 00 10 00 00       	push   0x1000
c0010255:	50                   	push   eax
c0010256:	e8 07 ff ff ff       	call   c0010162 <Phys::freeDMA(unsigned long, unsigned long)>
c001025b:	59                   	pop    ecx
c001025c:	5b                   	pop    ebx
c001025d:	83 c4 08             	add    esp,0x8
c0010260:	5b                   	pop    ebx
c0010261:	c3                   	ret    

c0010262 <Phys::allocatePage()>:
c0010262:	56                   	push   esi
c0010263:	53                   	push   ebx
c0010264:	83 ec 14             	sub    esp,0x14
c0010267:	8b 35 4c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f14c
c001026d:	89 f3                	mov    ebx,esi
c001026f:	eb 0a                	jmp    c001027b <Phys::allocatePage()+0x19>
c0010271:	89 1d 4c f1 02 c0    	mov    DWORD PTR ds:0xc002f14c,ebx
c0010277:	39 de                	cmp    esi,ebx
c0010279:	74 26                	je     c00102a1 <Phys::allocatePage()+0x3f>
c001027b:	53                   	push   ebx
c001027c:	e8 5c ff ff ff       	call   c00101dd <Phys::getPageState(unsigned long)>
c0010281:	59                   	pop    ecx
c0010282:	84 c0                	test   al,al
c0010284:	74 67                	je     c00102ed <Phys::allocatePage()+0x8b>
c0010286:	83 c3 01             	add    ebx,0x1
c0010289:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001028f:	75 e0                	jne    c0010271 <Phys::allocatePage()+0xf>
c0010291:	31 db                	xor    ebx,ebx
c0010293:	c7 05 4c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f14c,0x0
c001029d:	39 de                	cmp    esi,ebx
c001029f:	75 da                	jne    c001027b <Phys::allocatePage()+0x19>
c00102a1:	83 ec 0c             	sub    esp,0xc
c00102a4:	a0 70 f1 02 c0       	mov    al,ds:0xc002f170
c00102a9:	83 f0 01             	xor    eax,0x1
c00102ac:	a2 70 f1 02 c0       	mov    ds:0xc002f170,al
c00102b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00102b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00102b9:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00102bf:	51                   	push   ecx
c00102c0:	e8 d3 44 00 00       	call   c0014798 <VAS::scanForEviction()>
c00102c5:	83 c4 10             	add    esp,0x10
c00102c8:	85 c0                	test   eax,eax
c00102ca:	75 48                	jne    c0010314 <Phys::allocatePage()+0xb2>
c00102cc:	83 ec 0c             	sub    esp,0xc
c00102cf:	68 3c 45 02 c0       	push   0xc002453c
c00102d4:	e8 95 fd ff ff       	call   c001006e <KePanic(char const*)>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	8b 1d 4c f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f14c
c00102e2:	53                   	push   ebx
c00102e3:	e8 f5 fe ff ff       	call   c00101dd <Phys::getPageState(unsigned long)>
c00102e8:	59                   	pop    ecx
c00102e9:	84 c0                	test   al,al
c00102eb:	75 99                	jne    c0010286 <Phys::allocatePage()+0x24>
c00102ed:	6a 01                	push   0x1
c00102ef:	53                   	push   ebx
c00102f0:	e8 a8 fe ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c00102f5:	8b 1d 58 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f158
c00102fb:	a1 4c f1 02 c0       	mov    eax,ds:0xc002f14c
c0010300:	83 c3 01             	add    ebx,0x1
c0010303:	5e                   	pop    esi
c0010304:	89 1d 58 f1 02 c0    	mov    DWORD PTR ds:0xc002f158,ebx
c001030a:	c1 e0 0c             	shl    eax,0xc
c001030d:	5a                   	pop    edx
c001030e:	83 c4 14             	add    esp,0x14
c0010311:	5b                   	pop    ebx
c0010312:	5e                   	pop    esi
c0010313:	c3                   	ret    
c0010314:	83 ec 08             	sub    esp,0x8
c0010317:	8b 15 58 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f158
c001031d:	6a 01                	push   0x1
c001031f:	83 c2 01             	add    edx,0x1
c0010322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010326:	89 15 58 f1 02 c0    	mov    DWORD PTR ds:0xc002f158,edx
c001032c:	89 c2                	mov    edx,eax
c001032e:	c1 ea 0c             	shr    edx,0xc
c0010331:	52                   	push   edx
c0010332:	e8 66 fe ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c0010337:	83 c4 10             	add    esp,0x10
c001033a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001033e:	eb ce                	jmp    c001030e <Phys::allocatePage()+0xac>

c0010340 <Phys::allocateContiguousPages(int)>:
c0010340:	57                   	push   edi
c0010341:	56                   	push   esi
c0010342:	53                   	push   ebx
c0010343:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010347:	fa                   	cli    
c0010348:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c001034e:	83 ec 0c             	sub    esp,0xc
c0010351:	83 c2 01             	add    edx,0x1
c0010354:	68 6c 45 02 c0       	push   0xc002456c
c0010359:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c001035f:	31 db                	xor    ebx,ebx
c0010361:	e8 16 6c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	85 db                	test   ebx,ebx
c001036b:	75 11                	jne    c001037e <Phys::allocateContiguousPages(int)+0x3e>
c001036d:	e8 f0 fe ff ff       	call   c0010262 <Phys::allocatePage()>
c0010372:	83 ff 01             	cmp    edi,0x1
c0010375:	89 c6                	mov    esi,eax
c0010377:	74 21                	je     c001039a <Phys::allocateContiguousPages(int)+0x5a>
c0010379:	bb 01 00 00 00       	mov    ebx,0x1
c001037e:	e8 df fe ff ff       	call   c0010262 <Phys::allocatePage()>
c0010383:	89 da                	mov    edx,ebx
c0010385:	c1 e2 0c             	shl    edx,0xc
c0010388:	01 f2                	add    edx,esi
c001038a:	39 c2                	cmp    edx,eax
c001038c:	74 24                	je     c00103b2 <Phys::allocateContiguousPages(int)+0x72>
c001038e:	bb 01 00 00 00       	mov    ebx,0x1
c0010393:	89 c6                	mov    esi,eax
c0010395:	83 ff 01             	cmp    edi,0x1
c0010398:	75 e4                	jne    c001037e <Phys::allocateContiguousPages(int)+0x3e>
c001039a:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00103a2:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00103a7:	85 c0                	test   eax,eax
c00103a9:	75 01                	jne    c00103ac <Phys::allocateContiguousPages(int)+0x6c>
c00103ab:	fb                   	sti    
c00103ac:	89 f0                	mov    eax,esi
c00103ae:	5b                   	pop    ebx
c00103af:	5e                   	pop    esi
c00103b0:	5f                   	pop    edi
c00103b1:	c3                   	ret    
c00103b2:	83 c3 01             	add    ebx,0x1
c00103b5:	39 fb                	cmp    ebx,edi
c00103b7:	75 b0                	jne    c0010369 <Phys::allocateContiguousPages(int)+0x29>
c00103b9:	eb df                	jmp    c001039a <Phys::allocateContiguousPages(int)+0x5a>

c00103bb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00103bb:	56                   	push   esi
c00103bc:	53                   	push   ebx
c00103bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103c1:	39 1d 50 f1 02 c0    	cmp    DWORD PTR ds:0xc002f150,ebx
c00103c7:	73 06                	jae    c00103cf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00103c9:	89 1d 50 f1 02 c0    	mov    DWORD PTR ds:0xc002f150,ebx
c00103cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103d3:	c1 eb 0c             	shr    ebx,0xc
c00103d6:	c1 e8 0c             	shr    eax,0xc
c00103d9:	39 d8                	cmp    eax,ebx
c00103db:	73 13                	jae    c00103f0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00103dd:	6a 00                	push   0x0
c00103df:	8d 70 01             	lea    esi,[eax+0x1]
c00103e2:	50                   	push   eax
c00103e3:	e8 b5 fd ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c00103e8:	5a                   	pop    edx
c00103e9:	89 f0                	mov    eax,esi
c00103eb:	59                   	pop    ecx
c00103ec:	39 f3                	cmp    ebx,esi
c00103ee:	75 ed                	jne    c00103dd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00103f0:	5b                   	pop    ebx
c00103f1:	5e                   	pop    esi
c00103f2:	c3                   	ret    

c00103f3 <Phys::physicalMemorySetup(unsigned int)>:
c00103f3:	55                   	push   ebp
c00103f4:	57                   	push   edi
c00103f5:	56                   	push   esi
c00103f6:	53                   	push   ebx
c00103f7:	83 ec 40             	sub    esp,0x40
c00103fa:	6a 10                	push   0x10
c00103fc:	6a 00                	push   0x0
c00103fe:	68 60 f1 02 c0       	push   0xc002f160
c0010403:	e8 e8 00 ff ff       	call   c00004f0 <memset>
c0010408:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001040c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010411:	05 00 10 00 00       	add    eax,0x1000
c0010416:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001041a:	5b                   	pop    ebx
c001041b:	31 db                	xor    ebx,ebx
c001041d:	5e                   	pop    esi
c001041e:	50                   	push   eax
c001041f:	68 2f 46 02 c0       	push   0xc002462f
c0010424:	e8 53 6b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	83 ec 08             	sub    esp,0x8
c001042f:	6a 01                	push   0x1
c0010431:	53                   	push   ebx
c0010432:	83 c3 01             	add    ebx,0x1
c0010435:	e8 63 fd ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010443:	75 e7                	jne    c001042c <Phys::physicalMemorySetup(unsigned int)+0x39>
c0010445:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001044c:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010453:	c1 e0 08             	shl    eax,0x8
c0010456:	09 c2                	or     edx,eax
c0010458:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001045c:	0f 84 98 01 00 00    	je     c00105fa <Phys::physicalMemorySetup(unsigned int)+0x207>
c0010462:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010466:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001046e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010473:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010477:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001047f:	eb 1c                	jmp    c001049d <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0010481:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010485:	83 c3 18             	add    ebx,0x18
c0010488:	83 c6 01             	add    esi,0x1
c001048b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001048f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010493:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010497:	0f 84 6d 01 00 00    	je     c001060a <Phys::physicalMemorySetup(unsigned int)+0x217>
c001049d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00104a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00104a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00104a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00104aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00104ae:	8b 33                	mov    esi,DWORD PTR [ebx]
c00104b0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00104b3:	01 f0                	add    eax,esi
c00104b5:	55                   	push   ebp
c00104b6:	11 fa                	adc    edx,edi
c00104b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104bc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00104c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104c4:	51                   	push   ecx
c00104c5:	56                   	push   esi
c00104c6:	68 cc 45 02 c0       	push   0xc00245cc
c00104cb:	e8 ac 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00104d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104d4:	83 c4 10             	add    esp,0x10
c00104d7:	09 f8                	or     eax,edi
c00104d9:	0f 85 2b 01 00 00    	jne    c001060a <Phys::physicalMemorySetup(unsigned int)+0x217>
c00104df:	83 fd 01             	cmp    ebp,0x1
c00104e2:	75 9d                	jne    c0010481 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104e4:	ba 00 00 08 00       	mov    edx,0x80000
c00104e9:	89 c1                	mov    ecx,eax
c00104eb:	39 f2                	cmp    edx,esi
c00104ed:	19 f9                	sbb    ecx,edi
c00104ef:	0f 82 ab 00 00 00    	jb     c00105a0 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c00104f5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00104f9:	89 c1                	mov    ecx,eax
c00104fb:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00104ff:	0f 83 9b 00 00 00    	jae    c00105a0 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010505:	ba 00 00 0a 00       	mov    edx,0xa0000
c001050a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001050e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010512:	39 fa                	cmp    edx,edi
c0010514:	19 e8                	sbb    eax,ebp
c0010516:	0f 82 b0 01 00 00    	jb     c00106cc <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c001051c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010520:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010524:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001052a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001052f:	83 d5 ff             	adc    ebp,0xffffffff
c0010532:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010536:	31 c0                	xor    eax,eax
c0010538:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001053c:	39 fa                	cmp    edx,edi
c001053e:	89 c1                	mov    ecx,eax
c0010540:	19 e9                	sbb    ecx,ebp
c0010542:	0f 83 39 ff ff ff    	jae    c0010481 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010548:	be 00 00 08 00       	mov    esi,0x80000
c001054d:	83 ec 04             	sub    esp,0x4
c0010550:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010554:	57                   	push   edi
c0010555:	56                   	push   esi
c0010556:	68 f0 45 02 c0       	push   0xc00245f0
c001055b:	e8 1c 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010560:	5d                   	pop    ebp
c0010561:	58                   	pop    eax
c0010562:	57                   	push   edi
c0010563:	56                   	push   esi
c0010564:	e8 52 fe ff ff       	call   c00103bb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010569:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001056d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010571:	83 c4 0c             	add    esp,0xc
c0010574:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010578:	8b 15 5c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f15c
c001057e:	01 d0                	add    eax,edx
c0010580:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010587:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c001058c:	52                   	push   edx
c001058d:	50                   	push   eax
c001058e:	68 55 46 02 c0       	push   0xc0024655
c0010593:	e8 e4 69 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010598:	83 c4 10             	add    esp,0x10
c001059b:	e9 e1 fe ff ff       	jmp    c0010481 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00105a0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00105a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00105ac:	39 ea                	cmp    edx,ebp
c00105ae:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00105b2:	0f 82 c9 fe ff ff    	jb     c0010481 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00105b8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00105bd:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00105c1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00105c5:	0f 83 b6 fe ff ff    	jae    c0010481 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00105cb:	39 ee                	cmp    esi,ebp
c00105cd:	89 f8                	mov    eax,edi
c00105cf:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00105d3:	0f 83 74 ff ff ff    	jae    c001054d <Phys::physicalMemorySetup(unsigned int)+0x15a>
c00105d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105e1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00105e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00105e9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00105ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00105f5:	e9 53 ff ff ff       	jmp    c001054d <Phys::physicalMemorySetup(unsigned int)+0x15a>
c00105fa:	83 ec 0c             	sub    esp,0xc
c00105fd:	68 47 46 02 c0       	push   0xc0024647
c0010602:	e8 67 fa ff ff       	call   c001006e <KePanic(char const*)>
c0010607:	83 c4 10             	add    esp,0x10
c001060a:	83 ec 08             	sub    esp,0x8
c001060d:	bb 60 00 00 00       	mov    ebx,0x60
c0010612:	6a 00                	push   0x0
c0010614:	6a 06                	push   0x6
c0010616:	e8 82 fb ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c001061b:	58                   	pop    eax
c001061c:	5a                   	pop    edx
c001061d:	6a 00                	push   0x0
c001061f:	6a 07                	push   0x7
c0010621:	e8 77 fb ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c0010626:	8b 0d 5c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f15c
c001062c:	83 c4 10             	add    esp,0x10
c001062f:	83 c1 02             	add    ecx,0x2
c0010632:	89 0d 5c f1 02 c0    	mov    DWORD PTR ds:0xc002f15c,ecx
c0010638:	83 ec 08             	sub    esp,0x8
c001063b:	6a 00                	push   0x0
c001063d:	53                   	push   ebx
c001063e:	83 c3 01             	add    ebx,0x1
c0010641:	e8 57 fb ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	81 fb 80 00 00 00    	cmp    ebx,0x80
c001064f:	75 e7                	jne    c0010638 <Phys::physicalMemorySetup(unsigned int)+0x245>
c0010651:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c0010656:	bb 40 01 00 00       	mov    ebx,0x140
c001065b:	83 c0 20             	add    eax,0x20
c001065e:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c0010663:	eb 26                	jmp    c001068b <Phys::physicalMemorySetup(unsigned int)+0x298>
c0010665:	83 ec 08             	sub    esp,0x8
c0010668:	6a 00                	push   0x0
c001066a:	53                   	push   ebx
c001066b:	83 c3 01             	add    ebx,0x1
c001066e:	e8 2a fb ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c0010673:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c0010678:	83 c4 10             	add    esp,0x10
c001067b:	83 c0 01             	add    eax,0x1
c001067e:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0010684:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c0010689:	74 07                	je     c0010692 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c001068b:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010690:	7e d3                	jle    c0010665 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0010692:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010697:	3d ff 07 00 00       	cmp    eax,0x7ff
c001069c:	7f 26                	jg     c00106c4 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c001069e:	83 ec 08             	sub    esp,0x8
c00106a1:	6a 00                	push   0x0
c00106a3:	53                   	push   ebx
c00106a4:	83 c3 01             	add    ebx,0x1
c00106a7:	e8 f1 fa ff ff       	call   c001019d <Phys::setPageState(unsigned long, bool)>
c00106ac:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c00106b1:	83 c4 10             	add    esp,0x10
c00106b4:	83 c0 01             	add    eax,0x1
c00106b7:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00106bd:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c00106c2:	75 d3                	jne    c0010697 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00106c4:	83 c4 3c             	add    esp,0x3c
c00106c7:	5b                   	pop    ebx
c00106c8:	5e                   	pop    esi
c00106c9:	5f                   	pop    edi
c00106ca:	5d                   	pop    ebp
c00106cb:	c3                   	ret    
c00106cc:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00106d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00106dc:	e9 3b fe ff ff       	jmp    c001051c <Phys::physicalMemorySetup(unsigned int)+0x129>
c00106e1:	90                   	nop

c00106e2 <Pipe::isAtty()>:
c00106e2:	31 c0                	xor    eax,eax
c00106e4:	c3                   	ret    
c00106e5:	90                   	nop

c00106e6 <Pipe::~Pipe()>:
c00106e6:	83 ec 0c             	sub    esp,0xc
c00106e9:	ba b4 46 02 c0       	mov    edx,0xc00246b4
c00106ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f2:	89 10                	mov    DWORD PTR [eax],edx
c00106f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f8:	83 ec 0c             	sub    esp,0xc
c00106fb:	50                   	push   eax
c00106fc:	e8 f1 2b 00 00       	call   c00132f2 <UnixFile::~UnixFile()>
c0010701:	83 c4 10             	add    esp,0x10
c0010704:	90                   	nop
c0010705:	83 c4 0c             	add    esp,0xc
c0010708:	c3                   	ret    
c0010709:	90                   	nop

c001070a <Pipe::~Pipe()>:
c001070a:	83 ec 0c             	sub    esp,0xc
c001070d:	83 ec 0c             	sub    esp,0xc
c0010710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010714:	e8 cd ff ff ff       	call   c00106e6 <Pipe::~Pipe()>
c0010719:	83 c4 10             	add    esp,0x10
c001071c:	83 ec 08             	sub    esp,0x8
c001071f:	6a 20                	push   0x20
c0010721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010725:	e8 bf cc ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001072a:	83 c4 10             	add    esp,0x10
c001072d:	83 c4 0c             	add    esp,0xc
c0010730:	c3                   	ret    
c0010731:	90                   	nop

c0010732 <Pipe::write(unsigned long long, void*, int*)>:
c0010732:	55                   	push   ebp
c0010733:	57                   	push   edi
c0010734:	56                   	push   esi
c0010735:	53                   	push   ebx
c0010736:	83 ec 1c             	sub    esp,0x1c
c0010739:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001073d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010741:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010744:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010748:	89 04 24             	mov    DWORD PTR [esp],eax
c001074b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001074f:	89 d8                	mov    eax,ebx
c0010751:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010754:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010758:	89 d6                	mov    esi,edx
c001075a:	89 d7                	mov    edi,edx
c001075c:	c1 ff 1f             	sar    edi,0x1f
c001075f:	03 34 24             	add    esi,DWORD PTR [esp]
c0010762:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010766:	c1 f8 1f             	sar    eax,0x1f
c0010769:	39 f3                	cmp    ebx,esi
c001076b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001076f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010773:	19 f8                	sbb    eax,edi
c0010775:	b8 01 00 00 00       	mov    eax,0x1
c001077a:	72 6e                	jb     c00107ea <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001077c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001077f:	01 d0                	add    eax,edx
c0010781:	99                   	cdq    
c0010782:	f7 fb                	idiv   ebx
c0010784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010788:	29 d3                	sub    ebx,edx
c001078a:	89 d7                	mov    edi,edx
c001078c:	89 de                	mov    esi,ebx
c001078e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010791:	c1 fb 1f             	sar    ebx,0x1f
c0010794:	39 f2                	cmp    edx,esi
c0010796:	19 d8                	sbb    eax,ebx
c0010798:	b8 00 00 00 00       	mov    eax,0x0
c001079d:	72 04                	jb     c00107a3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001079f:	89 d0                	mov    eax,edx
c00107a1:	29 f0                	sub    eax,esi
c00107a3:	89 d3                	mov    ebx,edx
c00107a5:	29 c3                	sub    ebx,eax
c00107a7:	74 0b                	je     c00107b4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00107a9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00107ac:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00107b0:	89 d9                	mov    ecx,ebx
c00107b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107b4:	85 c0                	test   eax,eax
c00107b6:	74 0d                	je     c00107c5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00107b8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00107bc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00107bf:	89 de                	mov    esi,ebx
c00107c1:	89 c1                	mov    ecx,eax
c00107c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107c5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00107c8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00107cd:	75 10                	jne    c00107df <Pipe::write(unsigned long long, void*, int*)+0xad>
c00107cf:	83 ec 0c             	sub    esp,0xc
c00107d2:	68 71 46 02 c0       	push   0xc0024671
c00107d7:	e8 92 f8 ff ff       	call   c001006e <KePanic(char const*)>
c00107dc:	83 c4 10             	add    esp,0x10
c00107df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00107e3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00107e6:	89 08                	mov    DWORD PTR [eax],ecx
c00107e8:	31 c0                	xor    eax,eax
c00107ea:	83 c4 1c             	add    esp,0x1c
c00107ed:	5b                   	pop    ebx
c00107ee:	5e                   	pop    esi
c00107ef:	5f                   	pop    edi
c00107f0:	5d                   	pop    ebp
c00107f1:	c3                   	ret    

c00107f2 <Pipe::read(unsigned long long, void*, int*)>:
c00107f2:	55                   	push   ebp
c00107f3:	57                   	push   edi
c00107f4:	56                   	push   esi
c00107f5:	53                   	push   ebx
c00107f6:	83 ec 1c             	sub    esp,0x1c
c00107f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010801:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010805:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010808:	89 c8                	mov    eax,ecx
c001080a:	99                   	cdq    
c001080b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001080f:	74 27                	je     c0010838 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010811:	39 f9                	cmp    ecx,edi
c0010813:	89 d1                	mov    ecx,edx
c0010815:	19 f1                	sbb    ecx,esi
c0010817:	73 1f                	jae    c0010838 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010819:	fa                   	cli    
c001081a:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c0010820:	e8 bb 6a 00 00       	call   c00172e0 <schedule()>
c0010825:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c001082c:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c0010833:	75 d0                	jne    c0010805 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010835:	fb                   	sti    
c0010836:	eb cd                	jmp    c0010805 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010838:	39 f8                	cmp    eax,edi
c001083a:	89 d1                	mov    ecx,edx
c001083c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001083f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010843:	19 f1                	sbb    ecx,esi
c0010845:	73 07                	jae    c001084e <Pipe::read(unsigned long long, void*, int*)+0x5c>
c0010847:	89 04 24             	mov    DWORD PTR [esp],eax
c001084a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001084e:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010851:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010854:	29 f7                	sub    edi,esi
c0010856:	89 f8                	mov    eax,edi
c0010858:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001085c:	99                   	cdq    
c001085d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010864:	19 d0                	sbb    eax,edx
c0010866:	73 07                	jae    c001086f <Pipe::read(unsigned long long, void*, int*)+0x7d>
c0010868:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001086b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001086f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010872:	89 ea                	mov    edx,ebp
c0010874:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010878:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001087d:	74 0d                	je     c001088c <Pipe::read(unsigned long long, void*, int*)+0x9a>
c001087f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010882:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010886:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001088a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001088c:	85 d2                	test   edx,edx
c001088e:	74 11                	je     c00108a1 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010894:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010897:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001089b:	89 d1                	mov    ecx,edx
c001089d:	89 c7                	mov    edi,eax
c001089f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00108a4:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00108a7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00108aa:	99                   	cdq    
c00108ab:	89 f7                	mov    edi,esi
c00108ad:	03 04 24             	add    eax,DWORD PTR [esp]
c00108b0:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00108b4:	c1 ff 1f             	sar    edi,0x1f
c00108b7:	57                   	push   edi
c00108b8:	56                   	push   esi
c00108b9:	52                   	push   edx
c00108ba:	50                   	push   eax
c00108bb:	e8 f4 15 01 00       	call   c0021eb4 <__umoddi3>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00108c6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00108cb:	75 10                	jne    c00108dd <Pipe::read(unsigned long long, void*, int*)+0xeb>
c00108cd:	83 ec 0c             	sub    esp,0xc
c00108d0:	68 8e 46 02 c0       	push   0xc002468e
c00108d5:	e8 94 f7 ff ff       	call   c001006e <KePanic(char const*)>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00108e1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00108e4:	89 10                	mov    DWORD PTR [eax],edx
c00108e6:	83 c4 1c             	add    esp,0x1c
c00108e9:	31 c0                	xor    eax,eax
c00108eb:	5b                   	pop    ebx
c00108ec:	5e                   	pop    esi
c00108ed:	5f                   	pop    edi
c00108ee:	5d                   	pop    ebp
c00108ef:	c3                   	ret    

c00108f0 <Pipe::Pipe(int)>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f7:	83 ec 08             	sub    esp,0x8
c00108fa:	6a 00                	push   0x0
c00108fc:	50                   	push   eax
c00108fd:	e8 0a 28 00 00       	call   c001310c <UnixFile::UnixFile(int)>
c0010902:	83 c4 10             	add    esp,0x10
c0010905:	ba b4 46 02 c0       	mov    edx,0xc00246b4
c001090a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090e:	89 10                	mov    DWORD PTR [eax],edx
c0010910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010914:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010918:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001091b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010935:	83 ec 0c             	sub    esp,0xc
c0010938:	50                   	push   eax
c0010939:	e8 21 f4 ff ff       	call   c000fd5f <malloc>
c001093e:	83 c4 10             	add    esp,0x10
c0010941:	89 c2                	mov    edx,eax
c0010943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010947:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010952:	90                   	nop
c0010953:	83 c4 0c             	add    esp,0xc
c0010956:	c3                   	ret    

c0010957 <KePowerThread(void*)>:
c0010957:	83 ec 0c             	sub    esp,0xc
c001095a:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0010961:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c0010968:	75 01                	jne    c001096b <KePowerThread(void*)+0x14>
c001096a:	fb                   	sti    
c001096b:	c6 05 80 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f180,0x0
c0010972:	50                   	push   eax
c0010973:	50                   	push   eax
c0010974:	6a 00                	push   0x0
c0010976:	6a 0a                	push   0xa
c0010978:	e8 6f 6b 00 00       	call   c00174ec <sleep(unsigned long long)>
c001097d:	83 05 c4 f1 02 c0 0a 	add    DWORD PTR ds:0xc002f1c4,0xa
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	eb e2                	jmp    c001096b <KePowerThread(void*)+0x14>

c0010989 <KeChangePowerSettings(PowerSettings)>:
c0010989:	57                   	push   edi
c001098a:	b9 09 00 00 00       	mov    ecx,0x9
c001098f:	56                   	push   esi
c0010990:	bf a0 f1 02 c0       	mov    edi,0xc002f1a0
c0010995:	fc                   	cld    
c0010996:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001099a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001099c:	5e                   	pop    esi
c001099d:	5f                   	pop    edi
c001099e:	c3                   	ret    

c001099f <KeUserIOReceived()>:
c001099f:	c7 05 c4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1c4,0x0
c00109a9:	c3                   	ret    

c00109aa <KeHandlePowerButton()>:
c00109aa:	a1 a0 f1 02 c0       	mov    eax,ds:0xc002f1a0
c00109af:	83 f8 02             	cmp    eax,0x2
c00109b2:	75 05                	jne    c00109b9 <KeHandlePowerButton()+0xf>
c00109b4:	e9 85 d9 ff ff       	jmp    c000e33e <KeShutdown()>
c00109b9:	48                   	dec    eax
c00109ba:	75 05                	jne    c00109c1 <KeHandlePowerButton()+0x17>
c00109bc:	e9 a1 d9 ff ff       	jmp    c000e362 <KeSleep()>
c00109c1:	c3                   	ret    

c00109c2 <KeHandleSleepButton()>:
c00109c2:	a1 a4 f1 02 c0       	mov    eax,ds:0xc002f1a4
c00109c7:	83 f8 02             	cmp    eax,0x2
c00109ca:	75 05                	jne    c00109d1 <KeHandleSleepButton()+0xf>
c00109cc:	e9 6d d9 ff ff       	jmp    c000e33e <KeShutdown()>
c00109d1:	48                   	dec    eax
c00109d2:	75 05                	jne    c00109d9 <KeHandleSleepButton()+0x17>
c00109d4:	e9 89 d9 ff ff       	jmp    c000e362 <KeSleep()>
c00109d9:	c3                   	ret    

c00109da <KeSetupPowerManager()>:
c00109da:	83 ec 0c             	sub    esp,0xc
c00109dd:	c7 05 c4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1c4,0x0
c00109e7:	68 f0 00 00 00       	push   0xf0
c00109ec:	c6 05 80 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f180,0x0
c00109f3:	6a 00                	push   0x0
c00109f5:	68 57 09 01 c0       	push   0xc0010957
c00109fa:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0010a00:	e8 1b 66 00 00       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c0010a05:	c7 05 a0 f1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x2
c0010a0f:	c7 05 a4 f1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x1
c0010a19:	c7 05 a8 f1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002f1a8,0x3
c0010a23:	c7 05 ac f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1ac,0x0
c0010a2d:	c7 05 b8 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1b8,0x0
c0010a37:	c7 05 b0 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1b0,0x0
c0010a41:	c7 05 bc f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1bc,0x0
c0010a4b:	c7 05 b4 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1b4,0x3c
c0010a55:	c7 05 c0 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1c0,0x3c
c0010a5f:	83 c4 1c             	add    esp,0x1c
c0010a62:	c3                   	ret    

c0010a63 <KeRand()>:
c0010a63:	69 05 c8 f1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002f1c8,0x2875
c0010a6d:	69 0d cc f1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002f1cc,0xa2e7b175
c0010a77:	53                   	push   ebx
c0010a78:	01 c1                	add    ecx,eax
c0010a7a:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a7f:	f7 25 c8 f1 02 c0    	mul    DWORD PTR ds:0xc002f1c8
c0010a85:	01 ca                	add    edx,ecx
c0010a87:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a8c:	83 d2 00             	adc    edx,0x0
c0010a8f:	a3 c8 f1 02 c0       	mov    ds:0xc002f1c8,eax
c0010a94:	0f b7 da             	movzx  ebx,dx
c0010a97:	89 da                	mov    edx,ebx
c0010a99:	89 1d cc f1 02 c0    	mov    DWORD PTR ds:0xc002f1cc,ebx
c0010a9f:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010aa3:	5b                   	pop    ebx
c0010aa4:	c3                   	ret    

c0010aa5 <KeSeedRand(unsigned int)>:
c0010aa5:	53                   	push   ebx
c0010aa6:	83 ec 08             	sub    esp,0x8
c0010aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aad:	e8 ac a0 00 00       	call   c001ab5e <HalGetRand()>
c0010ab2:	c7 05 cc f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1cc,0x0
c0010abc:	31 d8                	xor    eax,ebx
c0010abe:	a3 c8 f1 02 c0       	mov    ds:0xc002f1c8,eax
c0010ac3:	e8 9b ff ff ff       	call   c0010a63 <KeRand()>
c0010ac8:	83 c4 08             	add    esp,0x8
c0010acb:	5b                   	pop    ebx
c0010acc:	eb 95                	jmp    c0010a63 <KeRand()>

c0010ace <KeInitRand()>:
c0010ace:	83 ec 0c             	sub    esp,0xc
c0010ad1:	e8 93 9e 00 00       	call   c001a969 <HalQueryPerformanceCounter()>
c0010ad6:	0f 20 da             	mov    edx,cr3
c0010ad9:	0f 22 da             	mov    cr3,edx
c0010adc:	0f 20 da             	mov    edx,cr3
c0010adf:	0f 22 da             	mov    cr3,edx
c0010ae2:	0f 20 da             	mov    edx,cr3
c0010ae5:	0f 22 da             	mov    cr3,edx
c0010ae8:	0f 20 da             	mov    edx,cr3
c0010aeb:	0f 22 da             	mov    cr3,edx
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010af6:	50                   	push   eax
c0010af7:	e8 a9 ff ff ff       	call   c0010aa5 <KeSeedRand(unsigned int)>
c0010afc:	83 c4 1c             	add    esp,0x1c
c0010aff:	c3                   	ret    

c0010b00 <KeResolveCompatibilitySymbol(char*)>:
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	83 ec 08             	sub    esp,0x8
c0010b06:	68 c8 46 02 c0       	push   0xc00246c8
c0010b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0f:	e8 3c fc fe ff       	call   c0000750 <strcmp>
c0010b14:	83 c4 10             	add    esp,0x10
c0010b17:	85 c0                	test   eax,eax
c0010b19:	0f 94 c0             	sete   al
c0010b1c:	0f b6 c0             	movzx  eax,al
c0010b1f:	85 c0                	test   eax,eax
c0010b21:	74 0d                	je     c0010b30 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010b23:	b8 d4 d0 02 c0       	mov    eax,0xc002d0d4
c0010b28:	e9 8b 01 00 00       	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b30:	83 ec 08             	sub    esp,0x8
c0010b33:	68 d1 46 02 c0       	push   0xc00246d1
c0010b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b3c:	e8 0f fc fe ff       	call   c0000750 <strcmp>
c0010b41:	83 c4 10             	add    esp,0x10
c0010b44:	85 c0                	test   eax,eax
c0010b46:	0f 94 c0             	sete   al
c0010b49:	0f b6 c0             	movzx  eax,al
c0010b4c:	85 c0                	test   eax,eax
c0010b4e:	74 0c                	je     c0010b5c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b50:	b8 b4 1d 02 c0       	mov    eax,0xc0021db4
c0010b55:	e9 5e 01 00 00       	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b5a:	66 90                	xchg   ax,ax
c0010b5c:	83 ec 08             	sub    esp,0x8
c0010b5f:	68 db 46 02 c0       	push   0xc00246db
c0010b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b68:	e8 e3 fb fe ff       	call   c0000750 <strcmp>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	85 c0                	test   eax,eax
c0010b72:	0f 94 c0             	sete   al
c0010b75:	0f b6 c0             	movzx  eax,al
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 0c                	je     c0010b88 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b7c:	b8 e8 1a 02 c0       	mov    eax,0xc0021ae8
c0010b81:	e9 32 01 00 00       	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b86:	66 90                	xchg   ax,ax
c0010b88:	83 ec 08             	sub    esp,0x8
c0010b8b:	68 e4 46 02 c0       	push   0xc00246e4
c0010b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b94:	e8 b7 fb fe ff       	call   c0000750 <strcmp>
c0010b99:	83 c4 10             	add    esp,0x10
c0010b9c:	85 c0                	test   eax,eax
c0010b9e:	0f 94 c0             	sete   al
c0010ba1:	0f b6 c0             	movzx  eax,al
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	74 0c                	je     c0010bb4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010ba8:	b8 6e 00 01 c0       	mov    eax,0xc001006e
c0010bad:	e9 06 01 00 00       	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bb2:	66 90                	xchg   ax,ax
c0010bb4:	83 ec 08             	sub    esp,0x8
c0010bb7:	68 f7 46 02 c0       	push   0xc00246f7
c0010bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc0:	e8 8b fb fe ff       	call   c0000750 <strcmp>
c0010bc5:	83 c4 10             	add    esp,0x10
c0010bc8:	85 c0                	test   eax,eax
c0010bca:	0f 94 c0             	sete   al
c0010bcd:	0f b6 c0             	movzx  eax,al
c0010bd0:	85 c0                	test   eax,eax
c0010bd2:	74 0c                	je     c0010be0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010bd4:	b8 29 d3 00 c0       	mov    eax,0xc000d329
c0010bd9:	e9 da 00 00 00       	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bde:	66 90                	xchg   ax,ax
c0010be0:	83 ec 08             	sub    esp,0x8
c0010be3:	68 14 47 02 c0       	push   0xc0024714
c0010be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bec:	e8 5f fb fe ff       	call   c0000750 <strcmp>
c0010bf1:	83 c4 10             	add    esp,0x10
c0010bf4:	85 c0                	test   eax,eax
c0010bf6:	0f 94 c0             	sete   al
c0010bf9:	0f b6 c0             	movzx  eax,al
c0010bfc:	85 c0                	test   eax,eax
c0010bfe:	74 0c                	je     c0010c0c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010c00:	b8 b4 1e 02 c0       	mov    eax,0xc0021eb4
c0010c05:	e9 ae 00 00 00       	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c0a:	66 90                	xchg   ax,ax
c0010c0c:	83 ec 08             	sub    esp,0x8
c0010c0f:	68 1e 47 02 c0       	push   0xc002471e
c0010c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c18:	e8 33 fb fe ff       	call   c0000750 <strcmp>
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	85 c0                	test   eax,eax
c0010c22:	0f 94 c0             	sete   al
c0010c25:	0f b6 c0             	movzx  eax,al
c0010c28:	85 c0                	test   eax,eax
c0010c2a:	74 0c                	je     c0010c38 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010c2c:	b8 34 1c 02 c0       	mov    eax,0xc0021c34
c0010c31:	e9 82 00 00 00       	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c36:	66 90                	xchg   ax,ax
c0010c38:	83 ec 08             	sub    esp,0x8
c0010c3b:	68 27 47 02 c0       	push   0xc0024727
c0010c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c44:	e8 07 fb fe ff       	call   c0000750 <strcmp>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	85 c0                	test   eax,eax
c0010c4e:	0f 94 c0             	sete   al
c0010c51:	0f b6 c0             	movzx  eax,al
c0010c54:	85 c0                	test   eax,eax
c0010c56:	74 08                	je     c0010c60 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010c58:	b8 d8 d0 02 c0       	mov    eax,0xc002d0d8
c0010c5d:	eb 59                	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c5f:	90                   	nop
c0010c60:	83 ec 08             	sub    esp,0x8
c0010c63:	68 3f 47 02 c0       	push   0xc002473f
c0010c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c6c:	e8 df fa fe ff       	call   c0000750 <strcmp>
c0010c71:	83 c4 10             	add    esp,0x10
c0010c74:	85 c0                	test   eax,eax
c0010c76:	0f 94 c0             	sete   al
c0010c79:	0f b6 c0             	movzx  eax,al
c0010c7c:	85 c0                	test   eax,eax
c0010c7e:	74 08                	je     c0010c88 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010c80:	b8 d8 d0 02 c0       	mov    eax,0xc002d0d8
c0010c85:	eb 31                	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c87:	90                   	nop
c0010c88:	83 ec 08             	sub    esp,0x8
c0010c8b:	68 4c 47 02 c0       	push   0xc002474c
c0010c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c94:	e8 b7 fa fe ff       	call   c0000750 <strcmp>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	85 c0                	test   eax,eax
c0010c9e:	0f 94 c0             	sete   al
c0010ca1:	0f b6 c0             	movzx  eax,al
c0010ca4:	85 c0                	test   eax,eax
c0010ca6:	74 08                	je     c0010cb0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010ca8:	b8 d9 d0 02 c0       	mov    eax,0xc002d0d9
c0010cad:	eb 09                	jmp    c0010cb8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010caf:	90                   	nop
c0010cb0:	b8 00 00 00 00       	mov    eax,0x0
c0010cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb8:	83 c4 0c             	add    esp,0xc
c0010cbb:	c3                   	ret    

c0010cbc <Semaphore::Semaphore(int)>:
c0010cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cc4:	89 10                	mov    DWORD PTR [eax],edx
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010ce7:	90                   	nop
c0010ce8:	c3                   	ret    
c0010ce9:	90                   	nop
c0010cea:	66 90                	xchg   ax,ax

c0010cec <Semaphore::tryAcquire()>:
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	fa                   	cli    
c0010cf0:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010cf5:	83 c0 01             	add    eax,0x1
c0010cf8:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0010cfd:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010d02:	83 c0 01             	add    eax,0x1
c0010d05:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d17:	39 c2                	cmp    edx,eax
c0010d19:	7d 59                	jge    c0010d74 <Semaphore::tryAcquire()+0x88>
c0010d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d22:	8d 50 01             	lea    edx,[eax+0x1]
c0010d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d29:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d2c:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010d31:	83 e8 01             	sub    eax,0x1
c0010d34:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010d39:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010d3e:	85 c0                	test   eax,eax
c0010d40:	75 1a                	jne    c0010d5c <Semaphore::tryAcquire()+0x70>
c0010d42:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010d47:	85 c0                	test   eax,eax
c0010d49:	74 11                	je     c0010d5c <Semaphore::tryAcquire()+0x70>
c0010d4b:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010d55:	e8 86 65 00 00       	call   c00172e0 <schedule()>
c0010d5a:	66 90                	xchg   ax,ax
c0010d5c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010d64:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010d69:	85 c0                	test   eax,eax
c0010d6b:	75 03                	jne    c0010d70 <Semaphore::tryAcquire()+0x84>
c0010d6d:	fb                   	sti    
c0010d6e:	66 90                	xchg   ax,ax
c0010d70:	b0 01                	mov    al,0x1
c0010d72:	eb 48                	jmp    c0010dbc <Semaphore::tryAcquire()+0xd0>
c0010d74:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010d79:	83 e8 01             	sub    eax,0x1
c0010d7c:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010d81:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010d86:	85 c0                	test   eax,eax
c0010d88:	75 1a                	jne    c0010da4 <Semaphore::tryAcquire()+0xb8>
c0010d8a:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010d8f:	85 c0                	test   eax,eax
c0010d91:	74 11                	je     c0010da4 <Semaphore::tryAcquire()+0xb8>
c0010d93:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010d9d:	e8 3e 65 00 00       	call   c00172e0 <schedule()>
c0010da2:	66 90                	xchg   ax,ax
c0010da4:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010dac:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010db1:	85 c0                	test   eax,eax
c0010db3:	75 03                	jne    c0010db8 <Semaphore::tryAcquire()+0xcc>
c0010db5:	fb                   	sti    
c0010db6:	66 90                	xchg   ax,ax
c0010db8:	b0 00                	mov    al,0x0
c0010dba:	66 90                	xchg   ax,ax
c0010dbc:	83 c4 0c             	add    esp,0xc
c0010dbf:	c3                   	ret    

c0010dc0 <Semaphore::assertLocked(char const*)>:
c0010dc0:	83 ec 0c             	sub    esp,0xc
c0010dc3:	fa                   	cli    
c0010dc4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010dc9:	83 c0 01             	add    eax,0x1
c0010dcc:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0010dd1:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010dd6:	83 c0 01             	add    eax,0x1
c0010dd9:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010deb:	39 c2                	cmp    edx,eax
c0010ded:	7d 11                	jge    c0010e00 <Semaphore::assertLocked(char const*)+0x40>
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010df6:	e8 73 f2 ff ff       	call   c001006e <KePanic(char const*)>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	66 90                	xchg   ax,ax
c0010e00:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010e05:	83 e8 01             	sub    eax,0x1
c0010e08:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010e0d:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010e12:	85 c0                	test   eax,eax
c0010e14:	75 1a                	jne    c0010e30 <Semaphore::assertLocked(char const*)+0x70>
c0010e16:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010e1b:	85 c0                	test   eax,eax
c0010e1d:	74 11                	je     c0010e30 <Semaphore::assertLocked(char const*)+0x70>
c0010e1f:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010e29:	e8 b2 64 00 00       	call   c00172e0 <schedule()>
c0010e2e:	66 90                	xchg   ax,ax
c0010e30:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010e38:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010e3d:	85 c0                	test   eax,eax
c0010e3f:	75 03                	jne    c0010e44 <Semaphore::assertLocked(char const*)+0x84>
c0010e41:	fb                   	sti    
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	90                   	nop
c0010e45:	83 c4 0c             	add    esp,0xc
c0010e48:	c3                   	ret    
c0010e49:	90                   	nop
c0010e4a:	66 90                	xchg   ax,ax

c0010e4c <Semaphore::acquire(int)>:
c0010e4c:	83 ec 1c             	sub    esp,0x1c
c0010e4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010e54:	0f 84 ae 00 00 00    	je     c0010f08 <Semaphore::acquire(int)+0xbc>
c0010e5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e62:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010e67:	90                   	nop
c0010e68:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010e6d:	85 c0                	test   eax,eax
c0010e6f:	0f 84 87 00 00 00    	je     c0010efc <Semaphore::acquire(int)+0xb0>
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e7c:	e8 6b fe ff ff       	call   c0010cec <Semaphore::tryAcquire()>
c0010e81:	83 c4 10             	add    esp,0x10
c0010e84:	83 f0 01             	xor    eax,0x1
c0010e87:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010e8b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010e8f:	83 f0 01             	xor    eax,0x1
c0010e92:	0f b6 c0             	movzx  eax,al
c0010e95:	85 c0                	test   eax,eax
c0010e97:	75 5f                	jne    c0010ef8 <Semaphore::acquire(int)+0xac>
c0010e99:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010e9e:	7f 34                	jg     c0010ed4 <Semaphore::acquire(int)+0x88>
c0010ea0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ea4:	89 d0                	mov    eax,edx
c0010ea6:	c1 e0 02             	shl    eax,0x2
c0010ea9:	01 d0                	add    eax,edx
c0010eab:	01 c0                	add    eax,eax
c0010ead:	89 c2                	mov    edx,eax
c0010eaf:	c1 fa 1f             	sar    edx,0x1f
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	52                   	push   edx
c0010eb6:	50                   	push   eax
c0010eb7:	e8 18 66 00 00       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c0010ebc:	83 c4 10             	add    esp,0x10
c0010ebf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ec3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010ec7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010ecf:	eb 97                	jmp    c0010e68 <Semaphore::acquire(int)+0x1c>
c0010ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ed4:	83 ec 08             	sub    esp,0x8
c0010ed7:	6a 00                	push   0x0
c0010ed9:	68 90 01 00 00       	push   0x190
c0010ede:	e8 f1 65 00 00       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010eeb:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010ef0:	e9 73 ff ff ff       	jmp    c0010e68 <Semaphore::acquire(int)+0x1c>
c0010ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ef8:	90                   	nop
c0010ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0010efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f00:	e9 fb 00 00 00       	jmp    c0011000 <Semaphore::acquire(int)+0x1b4>
c0010f05:	8d 76 00             	lea    esi,[esi+0x0]
c0010f08:	fa                   	cli    
c0010f09:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010f0e:	83 c0 01             	add    eax,0x1
c0010f11:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0010f16:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010f1b:	83 c0 01             	add    eax,0x1
c0010f1e:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f27:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f30:	39 c2                	cmp    edx,eax
c0010f32:	7d 14                	jge    c0010f48 <Semaphore::acquire(int)+0xfc>
c0010f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f3b:	8d 50 01             	lea    edx,[eax+0x1]
c0010f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f45:	eb 6d                	jmp    c0010fb4 <Semaphore::acquire(int)+0x168>
c0010f47:	90                   	nop
c0010f48:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f5d:	85 c0                	test   eax,eax
c0010f5f:	75 13                	jne    c0010f74 <Semaphore::acquire(int)+0x128>
c0010f61:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f66:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f6f:	eb 17                	jmp    c0010f88 <Semaphore::acquire(int)+0x13c>
c0010f71:	8d 76 00             	lea    esi,[esi+0x0]
c0010f74:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f80:	8b 12                	mov    edx,DWORD PTR [edx]
c0010f82:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f85:	8d 76 00             	lea    esi,[esi+0x0]
c0010f88:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f96:	83 ec 0c             	sub    esp,0xc
c0010f99:	68 5c 47 02 c0       	push   0xc002475c
c0010f9e:	e8 d9 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	6a 05                	push   0x5
c0010fab:	e8 f0 63 00 00       	call   c00173a0 <blockTask(TaskState)>
c0010fb0:	83 c4 10             	add    esp,0x10
c0010fb3:	90                   	nop
c0010fb4:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010fb9:	83 e8 01             	sub    eax,0x1
c0010fbc:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010fc1:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010fc6:	85 c0                	test   eax,eax
c0010fc8:	75 1a                	jne    c0010fe4 <Semaphore::acquire(int)+0x198>
c0010fca:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010fcf:	85 c0                	test   eax,eax
c0010fd1:	74 11                	je     c0010fe4 <Semaphore::acquire(int)+0x198>
c0010fd3:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010fdd:	e8 fe 62 00 00       	call   c00172e0 <schedule()>
c0010fe2:	66 90                	xchg   ax,ax
c0010fe4:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010fec:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010ff1:	85 c0                	test   eax,eax
c0010ff3:	75 03                	jne    c0010ff8 <Semaphore::acquire(int)+0x1ac>
c0010ff5:	fb                   	sti    
c0010ff6:	66 90                	xchg   ax,ax
c0010ff8:	b8 00 00 00 00       	mov    eax,0x0
c0010ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0011000:	83 c4 1c             	add    esp,0x1c
c0011003:	c3                   	ret    

c0011004 <Semaphore::acquire()>:
c0011004:	83 ec 0c             	sub    esp,0xc
c0011007:	83 ec 08             	sub    esp,0x8
c001100a:	6a 00                	push   0x0
c001100c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011010:	e8 37 fe ff ff       	call   c0010e4c <Semaphore::acquire(int)>
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	90                   	nop
c0011019:	83 c4 0c             	add    esp,0xc
c001101c:	c3                   	ret    
c001101d:	90                   	nop
c001101e:	66 90                	xchg   ax,ax

c0011020 <Semaphore::release()>:
c0011020:	83 ec 1c             	sub    esp,0x1c
c0011023:	fa                   	cli    
c0011024:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0011029:	83 c0 01             	add    eax,0x1
c001102c:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0011031:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0011036:	83 c0 01             	add    eax,0x1
c0011039:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c001103e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011045:	85 c0                	test   eax,eax
c0011047:	74 2b                	je     c0011074 <Semaphore::release()+0x54>
c0011049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001104d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011050:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011058:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001105b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001105f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011062:	83 ec 0c             	sub    esp,0xc
c0011065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011069:	e8 ce 65 00 00       	call   c001763c <unblockTask(ThreadControlBlock*)>
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	eb 15                	jmp    c0011088 <Semaphore::release()+0x68>
c0011073:	90                   	nop
c0011074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011078:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001107b:	8d 50 ff             	lea    edx,[eax-0x1]
c001107e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011082:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011085:	8d 76 00             	lea    esi,[esi+0x0]
c0011088:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c001108d:	83 e8 01             	sub    eax,0x1
c0011090:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0011095:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c001109a:	85 c0                	test   eax,eax
c001109c:	75 1a                	jne    c00110b8 <Semaphore::release()+0x98>
c001109e:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c00110a3:	85 c0                	test   eax,eax
c00110a5:	74 11                	je     c00110b8 <Semaphore::release()+0x98>
c00110a7:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c00110b1:	e8 2a 62 00 00       	call   c00172e0 <schedule()>
c00110b6:	66 90                	xchg   ax,ax
c00110b8:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00110c0:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00110c5:	85 c0                	test   eax,eax
c00110c7:	75 03                	jne    c00110cc <Semaphore::release()+0xac>
c00110c9:	fb                   	sti    
c00110ca:	66 90                	xchg   ax,ax
c00110cc:	90                   	nop
c00110cd:	83 c4 1c             	add    esp,0x1c
c00110d0:	c3                   	ret    

c00110d1 <KiSigKill(int)>:
c00110d1:	83 ec 0c             	sub    esp,0xc
c00110d4:	6a 00                	push   0x0
c00110d6:	6a 00                	push   0x0
c00110d8:	6a ff                	push   0xffffffff
c00110da:	6a 01                	push   0x1
c00110dc:	e8 71 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110e1:	83 c4 1c             	add    esp,0x1c
c00110e4:	c3                   	ret    

c00110e5 <KiDefaultSignalHandlerIgnore(int)>:
c00110e5:	c3                   	ret    

c00110e6 <KiDefaultSignalHandlerPause(int)>:
c00110e6:	57                   	push   edi
c00110e7:	b9 07 00 00 00       	mov    ecx,0x7
c00110ec:	56                   	push   esi
c00110ed:	be b7 47 02 c0       	mov    esi,0xc00247b7
c00110f2:	83 ec 24             	sub    esp,0x24
c00110f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00110f9:	fc                   	cld    
c00110fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011100:	50                   	push   eax
c0011101:	6a 00                	push   0x0
c0011103:	6a 00                	push   0x0
c0011105:	6a 27                	push   0x27
c0011107:	e8 46 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001110c:	83 c4 34             	add    esp,0x34
c001110f:	5e                   	pop    esi
c0011110:	5f                   	pop    edi
c0011111:	c3                   	ret    

c0011112 <KiDefaultSignalHandlerResume(int)>:
c0011112:	57                   	push   edi
c0011113:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011118:	56                   	push   esi
c0011119:	be d3 47 02 c0       	mov    esi,0xc00247d3
c001111e:	83 ec 24             	sub    esp,0x24
c0011121:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011125:	fc                   	cld    
c0011126:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011128:	8d 44 24 03          	lea    eax,[esp+0x3]
c001112c:	50                   	push   eax
c001112d:	6a 00                	push   0x0
c001112f:	6a 00                	push   0x0
c0011131:	6a 27                	push   0x27
c0011133:	e8 1a 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011138:	83 c4 34             	add    esp,0x34
c001113b:	5e                   	pop    esi
c001113c:	5f                   	pop    edi
c001113d:	c3                   	ret    

c001113e <KeDeinitSignals(SigHandlerBlock*)>:
c001113e:	e9 2c ec ff ff       	jmp    c000fd6f <free>

c0011143 <KeInitSignals()>:
c0011143:	53                   	push   ebx
c0011144:	83 ec 14             	sub    esp,0x14
c0011147:	68 c8 00 00 00       	push   0xc8
c001114c:	e8 0e ec ff ff       	call   c000fd5f <malloc>
c0011151:	83 c4 0c             	add    esp,0xc
c0011154:	89 c3                	mov    ebx,eax
c0011156:	6a 04                	push   0x4
c0011158:	6a 00                	push   0x0
c001115a:	50                   	push   eax
c001115b:	e8 90 f3 fe ff       	call   c00004f0 <memset>
c0011160:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c001116a:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011174:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001117b:	83 c4 0c             	add    esp,0xc
c001117e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011184:	6a 20                	push   0x20
c0011186:	6a 00                	push   0x0
c0011188:	50                   	push   eax
c0011189:	e8 62 f3 fe ff       	call   c00004f0 <memset>
c001118e:	83 c4 0c             	add    esp,0xc
c0011191:	6a 44                	push   0x44
c0011193:	6a 00                	push   0x0
c0011195:	53                   	push   ebx
c0011196:	e8 55 f3 fe ff       	call   c00004f0 <memset>
c001119b:	83 c4 0c             	add    esp,0xc
c001119e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c00111a4:	6a 11                	push   0x11
c00111a6:	6a 00                	push   0x0
c00111a8:	50                   	push   eax
c00111a9:	e8 42 f3 fe ff       	call   c00004f0 <memset>
c00111ae:	89 d8                	mov    eax,ebx
c00111b0:	83 c4 18             	add    esp,0x18
c00111b3:	5b                   	pop    ebx
c00111b4:	c3                   	ret    

c00111b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00111b5:	53                   	push   ebx
c00111b6:	b8 01 00 00 00       	mov    eax,0x1
c00111bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00111bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00111c3:	83 f9 10             	cmp    ecx,0x10
c00111c6:	7f 21                	jg     c00111e9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00111c8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00111cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cf:	89 03                	mov    DWORD PTR [ebx],eax
c00111d1:	b8 01 00 00 00       	mov    eax,0x1
c00111d6:	d3 e0                	shl    eax,cl
c00111d8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00111dc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00111df:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00111e7:	31 c0                	xor    eax,eax
c00111e9:	5b                   	pop    ebx
c00111ea:	c3                   	ret    

c00111eb <KeRaiseSignal(SigHandlerBlock*, int)>:
c00111eb:	55                   	push   ebp
c00111ec:	57                   	push   edi
c00111ed:	bf 08 00 00 00       	mov    edi,0x8
c00111f2:	56                   	push   esi
c00111f3:	53                   	push   ebx
c00111f4:	83 ec 14             	sub    esp,0x14
c00111f7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00111fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00111ff:	68 f0 47 02 c0       	push   0xc00247f0
c0011204:	e8 73 5d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011209:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011210:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011216:	83 c4 10             	add    esp,0x10
c0011219:	31 c9                	xor    ecx,ecx
c001121b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001121f:	99                   	cdq    
c0011220:	f7 ff                	idiv   edi
c0011222:	8d 42 24             	lea    eax,[edx+0x24]
c0011225:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011229:	85 f6                	test   esi,esi
c001122b:	75 1a                	jne    c0011247 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c001122d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011231:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011235:	50                   	push   eax
c0011236:	50                   	push   eax
c0011237:	52                   	push   edx
c0011238:	68 06 48 02 c0       	push   0xc0024806
c001123d:	e8 3a 5d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011242:	83 c4 10             	add    esp,0x10
c0011245:	eb 1b                	jmp    c0011262 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011247:	41                   	inc    ecx
c0011248:	83 f9 08             	cmp    ecx,0x8
c001124b:	75 ce                	jne    c001121b <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001124d:	83 ec 0c             	sub    esp,0xc
c0011250:	be 01 00 00 00       	mov    esi,0x1
c0011255:	68 27 48 02 c0       	push   0xc0024827
c001125a:	e8 1d 5d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	83 c4 0c             	add    esp,0xc
c0011265:	89 f0                	mov    eax,esi
c0011267:	5b                   	pop    ebx
c0011268:	5e                   	pop    esi
c0011269:	5f                   	pop    edi
c001126a:	5d                   	pop    ebp
c001126b:	c3                   	ret    

c001126c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001126c:	55                   	push   ebp
c001126d:	57                   	push   edi
c001126e:	56                   	push   esi
c001126f:	53                   	push   ebx
c0011270:	83 ec 1c             	sub    esp,0x1c
c0011273:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011277:	85 db                	test   ebx,ebx
c0011279:	0f 84 e0 00 00 00    	je     c001135f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001127f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011286:	0f 84 d3 00 00 00    	je     c001135f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001128c:	31 c9                	xor    ecx,ecx
c001128e:	bf 08 00 00 00       	mov    edi,0x8
c0011293:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011299:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001129c:	99                   	cdq    
c001129d:	f7 ff                	idiv   edi
c001129f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00112a6:	85 ed                	test   ebp,ebp
c00112a8:	0f 84 d2 00 00 00    	je     c0011380 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c00112ae:	89 e9                	mov    ecx,ebp
c00112b0:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00112b6:	bf 01 00 00 00       	mov    edi,0x1
c00112bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112bf:	d3 e7                	shl    edi,cl
c00112c1:	31 c9                	xor    ecx,ecx
c00112c3:	b8 01 00 00 00       	mov    eax,0x1
c00112c8:	d3 e0                	shl    eax,cl
c00112ca:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c00112ce:	74 0a                	je     c00112da <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c00112d0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00112d4:	0f 85 85 00 00 00    	jne    c001135f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00112da:	41                   	inc    ecx
c00112db:	83 f9 11             	cmp    ecx,0x11
c00112de:	75 e3                	jne    c00112c3 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00112e0:	46                   	inc    esi
c00112e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112e5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00112eb:	09 f8                	or     eax,edi
c00112ed:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00112f8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00112fe:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011305:	31 c0                	xor    eax,eax
c0011307:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001130f:	74 09                	je     c001131a <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011311:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011318:	eb 06                	jmp    c0011320 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c001131a:	40                   	inc    eax
c001131b:	83 f8 08             	cmp    eax,0x8
c001131e:	75 e7                	jne    c0011307 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011320:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011323:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011327:	83 fd 09             	cmp    ebp,0x9
c001132a:	89 2a                	mov    DWORD PTR [edx],ebp
c001132c:	75 14                	jne    c0011342 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c001132e:	83 ec 0c             	sub    esp,0xc
c0011331:	68 38 48 02 c0       	push   0xc0024838
c0011336:	e8 41 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001133b:	b8 d1 10 01 c0       	mov    eax,0xc00110d1
c0011340:	eb 39                	jmp    c001137b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011342:	83 f8 01             	cmp    eax,0x1
c0011345:	75 1c                	jne    c0011363 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011347:	83 ec 0c             	sub    esp,0xc
c001134a:	f7 d7                	not    edi
c001134c:	68 42 48 02 c0       	push   0xc0024842
c0011351:	e8 26 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011356:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	31 c0                	xor    eax,eax
c0011361:	eb 30                	jmp    c0011393 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011363:	85 c0                	test   eax,eax
c0011365:	75 2c                	jne    c0011393 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011367:	83 ec 0c             	sub    esp,0xc
c001136a:	68 4f 48 02 c0       	push   0xc002484f
c001136f:	e8 08 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011374:	8b 04 ad 20 6f 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd90e0]
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	eb 13                	jmp    c0011393 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011380:	46                   	inc    esi
c0011381:	41                   	inc    ecx
c0011382:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011388:	83 f9 08             	cmp    ecx,0x8
c001138b:	0f 85 02 ff ff ff    	jne    c0011293 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011391:	eb cc                	jmp    c001135f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011393:	83 c4 1c             	add    esp,0x1c
c0011396:	5b                   	pop    ebx
c0011397:	5e                   	pop    esi
c0011398:	5f                   	pop    edi
c0011399:	5d                   	pop    ebp
c001139a:	c3                   	ret    

c001139b <KiCheckSignalZ>:
c001139b:	80 3d d8 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d8,0x0
c00113a2:	74 43                	je     c00113e7 <KiCheckSignalZ+0x4c>
c00113a4:	83 ec 24             	sub    esp,0x24
c00113a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00113ab:	50                   	push   eax
c00113ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113b4:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00113ba:	e8 ad fe ff ff       	call   c001126c <KeCheckSignal(SigHandlerBlock*, int*)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	31 d2                	xor    edx,edx
c00113c4:	85 c0                	test   eax,eax
c00113c6:	74 19                	je     c00113e1 <KiCheckSignalZ+0x46>
c00113c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00113ce:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00113d1:	89 02                	mov    DWORD PTR [edx],eax
c00113d3:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00113da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113de:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00113e1:	89 d0                	mov    eax,edx
c00113e3:	83 c4 1c             	add    esp,0x1c
c00113e6:	c3                   	ret    
c00113e7:	31 d2                	xor    edx,edx
c00113e9:	89 d0                	mov    eax,edx
c00113eb:	c3                   	ret    

c00113ec <KeCompleteSignal(SigHandlerBlock*, int)>:
c00113ec:	56                   	push   esi
c00113ed:	53                   	push   ebx
c00113ee:	bb 01 00 00 00       	mov    ebx,0x1
c00113f3:	52                   	push   edx
c00113f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00113f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00113fc:	d3 e3                	shl    ebx,cl
c00113fe:	83 f9 10             	cmp    ecx,0x10
c0011401:	7f 08                	jg     c001140b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011403:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011409:	75 10                	jne    c001141b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001140b:	83 ec 0c             	sub    esp,0xc
c001140e:	68 72 48 02 c0       	push   0xc0024872
c0011413:	e8 56 ec ff ff       	call   c001006e <KePanic(char const*)>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	f7 d3                	not    ebx
c001141d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011423:	58                   	pop    eax
c0011424:	5b                   	pop    ebx
c0011425:	5e                   	pop    esi
c0011426:	c3                   	ret    

c0011427 <KiFinishSignalZ>:
c0011427:	53                   	push   ebx
c0011428:	83 ec 08             	sub    esp,0x8
c001142b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011434:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011437:	83 fa 08             	cmp    edx,0x8
c001143a:	75 0c                	jne    c0011448 <KiFinishSignalZ+0x21>
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	50                   	push   eax
c0011440:	e8 f7 61 00 00       	call   c001763c <unblockTask(ThreadControlBlock*)>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	50                   	push   eax
c0011449:	50                   	push   eax
c001144a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001144d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011452:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011455:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001145b:	e8 8c ff ff ff       	call   c00113ec <KeCompleteSignal(SigHandlerBlock*, int)>
c0011460:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011466:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001146d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011474:	83 c4 18             	add    esp,0x18
c0011477:	5b                   	pop    ebx
c0011478:	c3                   	ret    

c0011479 <SysSeekDir(regs*)>:
c0011479:	31 c0                	xor    eax,eax
c001147b:	31 d2                	xor    edx,edx
c001147d:	c3                   	ret    

c001147e <SysTellDir(regs*)>:
c001147e:	31 c0                	xor    eax,eax
c0011480:	31 d2                	xor    edx,edx
c0011482:	c3                   	ret    

c0011483 <SysVerify(regs*)>:
c0011483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011487:	31 d2                	xor    edx,edx
c0011489:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001148c:	c3                   	ret    

c001148d <SysGetArgc(regs*)>:
c001148d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011492:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011495:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001149b:	89 c2                	mov    edx,eax
c001149d:	c1 fa 1f             	sar    edx,0x1f
c00114a0:	c3                   	ret    

c00114a1 <SysTTYName(regs*)>:
c00114a1:	b8 01 00 00 00       	mov    eax,0x1
c00114a6:	31 d2                	xor    edx,edx
c00114a8:	c3                   	ret    

c00114a9 <SysFormatDisk(regs*)>:
c00114a9:	56                   	push   esi
c00114aa:	53                   	push   ebx
c00114ab:	83 ec 04             	sub    esp,0x4
c00114ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00114b2:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c00114b8:	eb 28                	jmp    c00114e2 <SysFormatDisk(regs*)+0x39>
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00114c0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00114c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00114c5:	51                   	push   ecx
c00114c6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00114c9:	51                   	push   ecx
c00114ca:	50                   	push   eax
c00114cb:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00114d2:	50                   	push   eax
c00114d3:	53                   	push   ebx
c00114d4:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00114d7:	83 c4 20             	add    esp,0x20
c00114da:	83 f8 08             	cmp    eax,0x8
c00114dd:	75 14                	jne    c00114f3 <SysFormatDisk(regs*)+0x4a>
c00114df:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00114e2:	85 db                	test   ebx,ebx
c00114e4:	75 d4                	jne    c00114ba <SysFormatDisk(regs*)+0x11>
c00114e6:	83 c4 04             	add    esp,0x4
c00114e9:	b8 03 00 00 00       	mov    eax,0x3
c00114ee:	31 d2                	xor    edx,edx
c00114f0:	5b                   	pop    ebx
c00114f1:	5e                   	pop    esi
c00114f2:	c3                   	ret    
c00114f3:	85 c0                	test   eax,eax
c00114f5:	74 1f                	je     c0011516 <SysFormatDisk(regs*)+0x6d>
c00114f7:	83 f8 09             	cmp    eax,0x9
c00114fa:	74 0d                	je     c0011509 <SysFormatDisk(regs*)+0x60>
c00114fc:	83 c4 04             	add    esp,0x4
c00114ff:	b8 02 00 00 00       	mov    eax,0x2
c0011504:	31 d2                	xor    edx,edx
c0011506:	5b                   	pop    ebx
c0011507:	5e                   	pop    esi
c0011508:	c3                   	ret    
c0011509:	83 c4 04             	add    esp,0x4
c001150c:	b8 01 00 00 00       	mov    eax,0x1
c0011511:	31 d2                	xor    edx,edx
c0011513:	5b                   	pop    ebx
c0011514:	5e                   	pop    esi
c0011515:	c3                   	ret    
c0011516:	83 c4 04             	add    esp,0x4
c0011519:	31 c0                	xor    eax,eax
c001151b:	31 d2                	xor    edx,edx
c001151d:	5b                   	pop    ebx
c001151e:	5e                   	pop    esi
c001151f:	c3                   	ret    

c0011520 <SysSetDiskVolumeLabel(regs*)>:
c0011520:	56                   	push   esi
c0011521:	53                   	push   ebx
c0011522:	83 ec 04             	sub    esp,0x4
c0011525:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011529:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001152c:	83 f8 19             	cmp    eax,0x19
c001152f:	77 33                	ja     c0011564 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011531:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c0011538:	85 c9                	test   ecx,ecx
c001153a:	74 28                	je     c0011564 <SysSetDiskVolumeLabel(regs*)+0x44>
c001153c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001153f:	85 db                	test   ebx,ebx
c0011541:	74 21                	je     c0011564 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011543:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011549:	85 d2                	test   edx,edx
c001154b:	74 17                	je     c0011564 <SysSetDiskVolumeLabel(regs*)+0x44>
c001154d:	8b 32                	mov    esi,DWORD PTR [edx]
c001154f:	53                   	push   ebx
c0011550:	50                   	push   eax
c0011551:	51                   	push   ecx
c0011552:	52                   	push   edx
c0011553:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011556:	83 c4 10             	add    esp,0x10
c0011559:	89 c2                	mov    edx,eax
c001155b:	83 c4 04             	add    esp,0x4
c001155e:	c1 fa 1f             	sar    edx,0x1f
c0011561:	5b                   	pop    ebx
c0011562:	5e                   	pop    esi
c0011563:	c3                   	ret    
c0011564:	83 c4 04             	add    esp,0x4
c0011567:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001156c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011571:	5b                   	pop    ebx
c0011572:	5e                   	pop    esi
c0011573:	c3                   	ret    

c0011574 <SysGetDiskVolumeLabel(regs*)>:
c0011574:	57                   	push   edi
c0011575:	56                   	push   esi
c0011576:	53                   	push   ebx
c0011577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001157e:	83 fa 19             	cmp    edx,0x19
c0011581:	77 3c                	ja     c00115bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011583:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c001158a:	85 c9                	test   ecx,ecx
c001158c:	74 31                	je     c00115bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c001158e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011591:	85 db                	test   ebx,ebx
c0011593:	74 2a                	je     c00115bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011595:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011598:	85 f6                	test   esi,esi
c001159a:	74 23                	je     c00115bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c001159c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00115a2:	85 c0                	test   eax,eax
c00115a4:	74 19                	je     c00115bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c00115a6:	83 ec 0c             	sub    esp,0xc
c00115a9:	8b 38                	mov    edi,DWORD PTR [eax]
c00115ab:	56                   	push   esi
c00115ac:	53                   	push   ebx
c00115ad:	52                   	push   edx
c00115ae:	51                   	push   ecx
c00115af:	50                   	push   eax
c00115b0:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00115b3:	83 c4 20             	add    esp,0x20
c00115b6:	89 c2                	mov    edx,eax
c00115b8:	5b                   	pop    ebx
c00115b9:	c1 fa 1f             	sar    edx,0x1f
c00115bc:	5e                   	pop    esi
c00115bd:	5f                   	pop    edi
c00115be:	c3                   	ret    
c00115bf:	5b                   	pop    ebx
c00115c0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00115c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ca:	5e                   	pop    esi
c00115cb:	5f                   	pop    edi
c00115cc:	c3                   	ret    

c00115cd <SysRealpath(regs*)>:
c00115cd:	83 ec 0c             	sub    esp,0xc
c00115d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00115d7:	85 d2                	test   edx,edx
c00115d9:	74 07                	je     c00115e2 <SysRealpath(regs*)+0x15>
c00115db:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115de:	85 c0                	test   eax,eax
c00115e0:	75 0b                	jne    c00115ed <SysRealpath(regs*)+0x20>
c00115e2:	b8 01 00 00 00       	mov    eax,0x1
c00115e7:	31 d2                	xor    edx,edx
c00115e9:	83 c4 0c             	add    esp,0xc
c00115ec:	c3                   	ret    
c00115ed:	6a 00                	push   0x0
c00115ef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00115f5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00115f8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00115fe:	51                   	push   ecx
c00115ff:	52                   	push   edx
c0011600:	50                   	push   eax
c0011601:	e8 6c 68 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011606:	83 c4 10             	add    esp,0x10
c0011609:	31 c0                	xor    eax,eax
c001160b:	31 d2                	xor    edx,edx
c001160d:	83 c4 0c             	add    esp,0xc
c0011610:	c3                   	ret    

c0011611 <SysReadDir(regs*)>:
c0011611:	53                   	push   ebx
c0011612:	83 ec 18             	sub    esp,0x18
c0011615:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011619:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001161c:	83 f8 02             	cmp    eax,0x2
c001161f:	76 61                	jbe    c0011682 <SysReadDir(regs*)+0x71>
c0011621:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011628:	77 49                	ja     c0011673 <SysReadDir(regs*)+0x62>
c001162a:	83 ec 0c             	sub    esp,0xc
c001162d:	50                   	push   eax
c001162e:	e8 ce 1d 00 00       	call   c0013401 <KeGetFileFromDescriptor(int)>
c0011633:	83 c4 10             	add    esp,0x10
c0011636:	85 c0                	test   eax,eax
c0011638:	74 39                	je     c0011673 <SysReadDir(regs*)+0x62>
c001163a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011642:	83 ec 0c             	sub    esp,0xc
c0011645:	8b 10                	mov    edx,DWORD PTR [eax]
c0011647:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001164b:	51                   	push   ecx
c001164c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001164f:	51                   	push   ecx
c0011650:	6a 00                	push   0x0
c0011652:	68 10 01 00 00       	push   0x110
c0011657:	50                   	push   eax
c0011658:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001165b:	83 c4 20             	add    esp,0x20
c001165e:	85 c0                	test   eax,eax
c0011660:	74 29                	je     c001168b <SysReadDir(regs*)+0x7a>
c0011662:	83 f8 07             	cmp    eax,0x7
c0011665:	74 1b                	je     c0011682 <SysReadDir(regs*)+0x71>
c0011667:	b8 02 00 00 00       	mov    eax,0x2
c001166c:	31 d2                	xor    edx,edx
c001166e:	83 c4 18             	add    esp,0x18
c0011671:	5b                   	pop    ebx
c0011672:	c3                   	ret    
c0011673:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011678:	ba ff ff ff ff       	mov    edx,0xffffffff
c001167d:	83 c4 18             	add    esp,0x18
c0011680:	5b                   	pop    ebx
c0011681:	c3                   	ret    
c0011682:	b8 01 00 00 00       	mov    eax,0x1
c0011687:	31 d2                	xor    edx,edx
c0011689:	eb e3                	jmp    c001166e <SysReadDir(regs*)+0x5d>
c001168b:	31 c0                	xor    eax,eax
c001168d:	31 d2                	xor    edx,edx
c001168f:	eb dd                	jmp    c001166e <SysReadDir(regs*)+0x5d>

c0011691 <SysIsATTY(regs*)>:
c0011691:	83 ec 0c             	sub    esp,0xc
c0011694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011698:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001169b:	83 f8 02             	cmp    eax,0x2
c001169e:	76 07                	jbe    c00116a7 <SysIsATTY(regs*)+0x16>
c00116a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a5:	75 26                	jne    c00116cd <SysIsATTY(regs*)+0x3c>
c00116a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116af:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00116b5:	85 c0                	test   eax,eax
c00116b7:	74 24                	je     c00116dd <SysIsATTY(regs*)+0x4c>
c00116b9:	83 ec 0c             	sub    esp,0xc
c00116bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00116be:	50                   	push   eax
c00116bf:	ff 12                	call   DWORD PTR [edx]
c00116c1:	31 d2                	xor    edx,edx
c00116c3:	0f b6 c0             	movzx  eax,al
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	83 c4 0c             	add    esp,0xc
c00116cc:	c3                   	ret    
c00116cd:	83 ec 0c             	sub    esp,0xc
c00116d0:	50                   	push   eax
c00116d1:	e8 2b 1d 00 00       	call   c0013401 <KeGetFileFromDescriptor(int)>
c00116d6:	83 c4 10             	add    esp,0x10
c00116d9:	85 c0                	test   eax,eax
c00116db:	75 dc                	jne    c00116b9 <SysIsATTY(regs*)+0x28>
c00116dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116e7:	83 c4 0c             	add    esp,0xc
c00116ea:	c3                   	ret    

c00116eb <SysSeek(regs*)>:
c00116eb:	53                   	push   ebx
c00116ec:	83 ec 08             	sub    esp,0x8
c00116ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116f6:	8d 50 fd             	lea    edx,[eax-0x3]
c00116f9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00116ff:	77 39                	ja     c001173a <SysSeek(regs*)+0x4f>
c0011701:	83 ec 0c             	sub    esp,0xc
c0011704:	50                   	push   eax
c0011705:	e8 f7 1c 00 00       	call   c0013401 <KeGetFileFromDescriptor(int)>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	85 c0                	test   eax,eax
c001170f:	74 29                	je     c001173a <SysSeek(regs*)+0x4f>
c0011711:	83 ec 04             	sub    esp,0x4
c0011714:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011717:	31 db                	xor    ebx,ebx
c0011719:	53                   	push   ebx
c001171a:	51                   	push   ecx
c001171b:	50                   	push   eax
c001171c:	e8 45 6b ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0011721:	83 c4 10             	add    esp,0x10
c0011724:	85 c0                	test   eax,eax
c0011726:	0f 95 c0             	setne  al
c0011729:	31 d2                	xor    edx,edx
c001172b:	0f b6 c0             	movzx  eax,al
c001172e:	f7 d8                	neg    eax
c0011730:	83 d2 00             	adc    edx,0x0
c0011733:	83 c4 08             	add    esp,0x8
c0011736:	f7 da                	neg    edx
c0011738:	5b                   	pop    ebx
c0011739:	c3                   	ret    
c001173a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001173f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011744:	83 c4 08             	add    esp,0x8
c0011747:	5b                   	pop    ebx
c0011748:	c3                   	ret    

c0011749 <SysTell(regs*)>:
c0011749:	53                   	push   ebx
c001174a:	83 ec 08             	sub    esp,0x8
c001174d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011751:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011754:	83 f8 02             	cmp    eax,0x2
c0011757:	76 56                	jbe    c00117af <SysTell(regs*)+0x66>
c0011759:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001175e:	76 19                	jbe    c0011779 <SysTell(regs*)+0x30>
c0011760:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011763:	31 d2                	xor    edx,edx
c0011765:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001176b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011772:	31 c0                	xor    eax,eax
c0011774:	83 c4 08             	add    esp,0x8
c0011777:	5b                   	pop    ebx
c0011778:	c3                   	ret    
c0011779:	83 ec 0c             	sub    esp,0xc
c001177c:	50                   	push   eax
c001177d:	e8 7f 1c 00 00       	call   c0013401 <KeGetFileFromDescriptor(int)>
c0011782:	83 c4 10             	add    esp,0x10
c0011785:	85 c0                	test   eax,eax
c0011787:	74 26                	je     c00117af <SysTell(regs*)+0x66>
c0011789:	83 ec 08             	sub    esp,0x8
c001178c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001178f:	52                   	push   edx
c0011790:	50                   	push   eax
c0011791:	e8 7c 6b ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	85 c0                	test   eax,eax
c001179b:	0f 95 c0             	setne  al
c001179e:	31 d2                	xor    edx,edx
c00117a0:	0f b6 c0             	movzx  eax,al
c00117a3:	f7 d8                	neg    eax
c00117a5:	83 d2 00             	adc    edx,0x0
c00117a8:	83 c4 08             	add    esp,0x8
c00117ab:	f7 da                	neg    edx
c00117ad:	5b                   	pop    ebx
c00117ae:	c3                   	ret    
c00117af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117b9:	83 c4 08             	add    esp,0x8
c00117bc:	5b                   	pop    ebx
c00117bd:	c3                   	ret    

c00117be <SysSize(regs*)>:
c00117be:	53                   	push   ebx
c00117bf:	83 ec 18             	sub    esp,0x18
c00117c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117c6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117c9:	83 f8 02             	cmp    eax,0x2
c00117cc:	76 5b                	jbe    c0011829 <SysSize(regs*)+0x6b>
c00117ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117d3:	76 19                	jbe    c00117ee <SysSize(regs*)+0x30>
c00117d5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117d8:	31 d2                	xor    edx,edx
c00117da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117e7:	31 c0                	xor    eax,eax
c00117e9:	83 c4 18             	add    esp,0x18
c00117ec:	5b                   	pop    ebx
c00117ed:	c3                   	ret    
c00117ee:	83 ec 0c             	sub    esp,0xc
c00117f1:	50                   	push   eax
c00117f2:	e8 0a 1c 00 00       	call   c0013401 <KeGetFileFromDescriptor(int)>
c00117f7:	83 c4 10             	add    esp,0x10
c00117fa:	85 c0                	test   eax,eax
c00117fc:	74 2b                	je     c0011829 <SysSize(regs*)+0x6b>
c00117fe:	83 ec 04             	sub    esp,0x4
c0011801:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011805:	52                   	push   edx
c0011806:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011809:	52                   	push   edx
c001180a:	50                   	push   eax
c001180b:	e8 9a 6c ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	85 c0                	test   eax,eax
c0011815:	0f 95 c0             	setne  al
c0011818:	31 d2                	xor    edx,edx
c001181a:	0f b6 c0             	movzx  eax,al
c001181d:	f7 d8                	neg    eax
c001181f:	83 d2 00             	adc    edx,0x0
c0011822:	83 c4 18             	add    esp,0x18
c0011825:	f7 da                	neg    edx
c0011827:	5b                   	pop    ebx
c0011828:	c3                   	ret    
c0011829:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001182e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011833:	83 c4 18             	add    esp,0x18
c0011836:	5b                   	pop    ebx
c0011837:	c3                   	ret    

c0011838 <SysSizeFromFilename(regs*)>:
c0011838:	55                   	push   ebp
c0011839:	57                   	push   edi
c001183a:	56                   	push   esi
c001183b:	53                   	push   ebx
c001183c:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011842:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011849:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001184c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001184f:	85 f6                	test   esi,esi
c0011851:	74 34                	je     c0011887 <SysSizeFromFilename(regs*)+0x4f>
c0011853:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011859:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001185c:	83 f8 02             	cmp    eax,0x2
c001185f:	76 2d                	jbe    c001188e <SysSizeFromFilename(regs*)+0x56>
c0011861:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011866:	76 3b                	jbe    c00118a3 <SysSizeFromFilename(regs*)+0x6b>
c0011868:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001186b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011871:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011878:	81 c4 4c 02 00 00    	add    esp,0x24c
c001187e:	31 c0                	xor    eax,eax
c0011880:	5b                   	pop    ebx
c0011881:	31 d2                	xor    edx,edx
c0011883:	5e                   	pop    esi
c0011884:	5f                   	pop    edi
c0011885:	5d                   	pop    ebp
c0011886:	c3                   	ret    
c0011887:	89 f8                	mov    eax,edi
c0011889:	83 f8 02             	cmp    eax,0x2
c001188c:	77 d3                	ja     c0011861 <SysSizeFromFilename(regs*)+0x29>
c001188e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011894:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011899:	5b                   	pop    ebx
c001189a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001189f:	5e                   	pop    esi
c00118a0:	5f                   	pop    edi
c00118a1:	5d                   	pop    ebp
c00118a2:	c3                   	ret    
c00118a3:	83 ec 0c             	sub    esp,0xc
c00118a6:	68 14 01 00 00       	push   0x114
c00118ab:	e8 af e4 ff ff       	call   c000fd5f <malloc>
c00118b0:	6a 01                	push   0x1
c00118b2:	89 c5                	mov    ebp,eax
c00118b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118bc:	50                   	push   eax
c00118bd:	57                   	push   edi
c00118be:	55                   	push   ebp
c00118bf:	e8 c8 67 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00118c4:	83 c4 20             	add    esp,0x20
c00118c7:	85 ed                	test   ebp,ebp
c00118c9:	74 c3                	je     c001188e <SysSizeFromFilename(regs*)+0x56>
c00118cb:	83 ec 04             	sub    esp,0x4
c00118ce:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118d2:	50                   	push   eax
c00118d3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00118d6:	51                   	push   ecx
c00118d7:	55                   	push   ebp
c00118d8:	e8 cd 6b ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00118dd:	89 c3                	mov    ebx,eax
c00118df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00118e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00118e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	85 db                	test   ebx,ebx
c00118ed:	75 9f                	jne    c001188e <SysSizeFromFilename(regs*)+0x56>
c00118ef:	6a 00                	push   0x0
c00118f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118f9:	05 0c 01 00 00       	add    eax,0x10c
c00118fe:	50                   	push   eax
c00118ff:	57                   	push   edi
c0011900:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011907:	53                   	push   ebx
c0011908:	e8 65 65 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001190d:	58                   	pop    eax
c001190e:	5a                   	pop    edx
c001190f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011913:	50                   	push   eax
c0011914:	53                   	push   ebx
c0011915:	e8 df 5f ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c001191a:	83 c4 10             	add    esp,0x10
c001191d:	83 f8 01             	cmp    eax,0x1
c0011920:	74 1a                	je     c001193c <SysSizeFromFilename(regs*)+0x104>
c0011922:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011927:	74 26                	je     c001194f <SysSizeFromFilename(regs*)+0x117>
c0011929:	85 f6                	test   esi,esi
c001192b:	0f 84 47 ff ff ff    	je     c0011878 <SysSizeFromFilename(regs*)+0x40>
c0011931:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011937:	e9 3c ff ff ff       	jmp    c0011878 <SysSizeFromFilename(regs*)+0x40>
c001193c:	85 f6                	test   esi,esi
c001193e:	0f 84 34 ff ff ff    	je     c0011878 <SysSizeFromFilename(regs*)+0x40>
c0011944:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001194a:	e9 29 ff ff ff       	jmp    c0011878 <SysSizeFromFilename(regs*)+0x40>
c001194f:	85 f6                	test   esi,esi
c0011951:	0f 84 21 ff ff ff    	je     c0011878 <SysSizeFromFilename(regs*)+0x40>
c0011957:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001195d:	e9 16 ff ff ff       	jmp    c0011878 <SysSizeFromFilename(regs*)+0x40>

c0011962 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011962:	55                   	push   ebp
c0011963:	57                   	push   edi
c0011964:	56                   	push   esi
c0011965:	53                   	push   ebx
c0011966:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001196c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011973:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011976:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011979:	85 f6                	test   esi,esi
c001197b:	74 34                	je     c00119b1 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001197d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011983:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011986:	83 f8 02             	cmp    eax,0x2
c0011989:	76 2d                	jbe    c00119b8 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001198b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011990:	76 3b                	jbe    c00119cd <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011992:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011995:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001199b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119a2:	81 c4 4c 02 00 00    	add    esp,0x24c
c00119a8:	31 c0                	xor    eax,eax
c00119aa:	5b                   	pop    ebx
c00119ab:	31 d2                	xor    edx,edx
c00119ad:	5e                   	pop    esi
c00119ae:	5f                   	pop    edi
c00119af:	5d                   	pop    ebp
c00119b0:	c3                   	ret    
c00119b1:	89 f8                	mov    eax,edi
c00119b3:	83 f8 02             	cmp    eax,0x2
c00119b6:	77 d3                	ja     c001198b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00119b8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00119be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119c3:	5b                   	pop    ebx
c00119c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119c9:	5e                   	pop    esi
c00119ca:	5f                   	pop    edi
c00119cb:	5d                   	pop    ebp
c00119cc:	c3                   	ret    
c00119cd:	83 ec 0c             	sub    esp,0xc
c00119d0:	68 14 01 00 00       	push   0x114
c00119d5:	e8 85 e3 ff ff       	call   c000fd5f <malloc>
c00119da:	6a 00                	push   0x0
c00119dc:	89 c5                	mov    ebp,eax
c00119de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119e6:	50                   	push   eax
c00119e7:	57                   	push   edi
c00119e8:	55                   	push   ebp
c00119e9:	e8 9e 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00119ee:	83 c4 20             	add    esp,0x20
c00119f1:	85 ed                	test   ebp,ebp
c00119f3:	74 c3                	je     c00119b8 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00119f5:	83 ec 04             	sub    esp,0x4
c00119f8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00119fc:	50                   	push   eax
c00119fd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011a00:	51                   	push   ecx
c0011a01:	55                   	push   ebp
c0011a02:	e8 a3 6a ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0011a07:	89 c3                	mov    ebx,eax
c0011a09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011a0c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011a0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	85 db                	test   ebx,ebx
c0011a17:	75 9f                	jne    c00119b8 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011a19:	6a 00                	push   0x0
c0011a1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a23:	05 0c 01 00 00       	add    eax,0x10c
c0011a28:	50                   	push   eax
c0011a29:	57                   	push   edi
c0011a2a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011a31:	53                   	push   ebx
c0011a32:	e8 3b 64 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011a37:	58                   	pop    eax
c0011a38:	5a                   	pop    edx
c0011a39:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a3d:	50                   	push   eax
c0011a3e:	53                   	push   ebx
c0011a3f:	e8 b5 5e ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	83 f8 01             	cmp    eax,0x1
c0011a4a:	74 1a                	je     c0011a66 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011a4c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a51:	74 26                	je     c0011a79 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011a53:	85 f6                	test   esi,esi
c0011a55:	0f 84 47 ff ff ff    	je     c00119a2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a5b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011a61:	e9 3c ff ff ff       	jmp    c00119a2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a66:	85 f6                	test   esi,esi
c0011a68:	0f 84 34 ff ff ff    	je     c00119a2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a6e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011a74:	e9 29 ff ff ff       	jmp    c00119a2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a79:	85 f6                	test   esi,esi
c0011a7b:	0f 84 21 ff ff ff    	je     c00119a2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a81:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a87:	e9 16 ff ff ff       	jmp    c00119a2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011a8c <SysClose(regs*)>:
c0011a8c:	53                   	push   ebx
c0011a8d:	83 ec 08             	sub    esp,0x8
c0011a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a97:	83 f8 02             	cmp    eax,0x2
c0011a9a:	76 41                	jbe    c0011add <SysClose(regs*)+0x51>
c0011a9c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011aa2:	83 fa 01             	cmp    edx,0x1
c0011aa5:	76 2d                	jbe    c0011ad4 <SysClose(regs*)+0x48>
c0011aa7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011aac:	77 2f                	ja     c0011add <SysClose(regs*)+0x51>
c0011aae:	83 ec 0c             	sub    esp,0xc
c0011ab1:	50                   	push   eax
c0011ab2:	e8 4a 19 00 00       	call   c0013401 <KeGetFileFromDescriptor(int)>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	89 c3                	mov    ebx,eax
c0011abc:	85 c0                	test   eax,eax
c0011abe:	74 1d                	je     c0011add <SysClose(regs*)+0x51>
c0011ac0:	83 ec 0c             	sub    esp,0xc
c0011ac3:	50                   	push   eax
c0011ac4:	e8 3d 67 ff ff       	call   c0008206 <File::close()>
c0011ac9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011acb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ace:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	31 c0                	xor    eax,eax
c0011ad6:	31 d2                	xor    edx,edx
c0011ad8:	83 c4 08             	add    esp,0x8
c0011adb:	5b                   	pop    ebx
c0011adc:	c3                   	ret    
c0011add:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ae2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ae7:	83 c4 08             	add    esp,0x8
c0011aea:	5b                   	pop    ebx
c0011aeb:	c3                   	ret    

c0011aec <SysOpenDir(regs*)>:
c0011aec:	56                   	push   esi
c0011aed:	53                   	push   ebx
c0011aee:	83 ec 04             	sub    esp,0x4
c0011af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011af5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011af8:	85 c9                	test   ecx,ecx
c0011afa:	74 5d                	je     c0011b59 <SysOpenDir(regs*)+0x6d>
c0011afc:	83 ec 0c             	sub    esp,0xc
c0011aff:	68 14 01 00 00       	push   0x114
c0011b04:	e8 56 e2 ff ff       	call   c000fd5f <malloc>
c0011b09:	83 c4 0c             	add    esp,0xc
c0011b0c:	89 c6                	mov    esi,eax
c0011b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b16:	50                   	push   eax
c0011b17:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011b1a:	52                   	push   edx
c0011b1b:	56                   	push   esi
c0011b1c:	e8 49 6b ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	85 f6                	test   esi,esi
c0011b26:	74 31                	je     c0011b59 <SysOpenDir(regs*)+0x6d>
c0011b28:	83 ec 0c             	sub    esp,0xc
c0011b2b:	56                   	push   esi
c0011b2c:	e8 01 6c ff ff       	call   c0008732 <Directory::open()>
c0011b31:	83 c4 10             	add    esp,0x10
c0011b34:	85 c0                	test   eax,eax
c0011b36:	75 21                	jne    c0011b59 <SysOpenDir(regs*)+0x6d>
c0011b38:	83 ec 0c             	sub    esp,0xc
c0011b3b:	56                   	push   esi
c0011b3c:	e8 c3 15 00 00       	call   c0013104 <UnixFile::getFileDescriptor()>
c0011b41:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b44:	83 c4 10             	add    esp,0x10
c0011b47:	89 02                	mov    DWORD PTR [edx],eax
c0011b49:	c1 f8 1f             	sar    eax,0x1f
c0011b4c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b4f:	83 c4 04             	add    esp,0x4
c0011b52:	31 c0                	xor    eax,eax
c0011b54:	31 d2                	xor    edx,edx
c0011b56:	5b                   	pop    ebx
c0011b57:	5e                   	pop    esi
c0011b58:	c3                   	ret    
c0011b59:	83 c4 04             	add    esp,0x4
c0011b5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b66:	5b                   	pop    ebx
c0011b67:	5e                   	pop    esi
c0011b68:	c3                   	ret    

c0011b69 <SysMakeDir(regs*)>:
c0011b69:	56                   	push   esi
c0011b6a:	53                   	push   ebx
c0011b6b:	83 ec 10             	sub    esp,0x10
c0011b6e:	68 14 01 00 00       	push   0x114
c0011b73:	e8 e7 e1 ff ff       	call   c000fd5f <malloc>
c0011b78:	83 c4 0c             	add    esp,0xc
c0011b7b:	89 c3                	mov    ebx,eax
c0011b7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b85:	50                   	push   eax
c0011b86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b8a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011b8d:	52                   	push   edx
c0011b8e:	53                   	push   ebx
c0011b8f:	e8 d6 6a ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011b94:	83 c4 10             	add    esp,0x10
c0011b97:	85 db                	test   ebx,ebx
c0011b99:	74 2c                	je     c0011bc7 <SysMakeDir(regs*)+0x5e>
c0011b9b:	83 ec 0c             	sub    esp,0xc
c0011b9e:	53                   	push   ebx
c0011b9f:	e8 6e 6d ff ff       	call   c0008912 <Directory::create()>
c0011ba4:	89 c6                	mov    esi,eax
c0011ba6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ba8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bae:	83 c4 10             	add    esp,0x10
c0011bb1:	31 c0                	xor    eax,eax
c0011bb3:	85 f6                	test   esi,esi
c0011bb5:	0f 95 c0             	setne  al
c0011bb8:	31 d2                	xor    edx,edx
c0011bba:	f7 d8                	neg    eax
c0011bbc:	83 d2 00             	adc    edx,0x0
c0011bbf:	83 c4 04             	add    esp,0x4
c0011bc2:	f7 da                	neg    edx
c0011bc4:	5b                   	pop    ebx
c0011bc5:	5e                   	pop    esi
c0011bc6:	c3                   	ret    
c0011bc7:	83 c4 04             	add    esp,0x4
c0011bca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bd4:	5b                   	pop    ebx
c0011bd5:	5e                   	pop    esi
c0011bd6:	c3                   	ret    

c0011bd7 <SysCloseDir(regs*)>:
c0011bd7:	53                   	push   ebx
c0011bd8:	83 ec 08             	sub    esp,0x8
c0011bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011be2:	8d 50 fd             	lea    edx,[eax-0x3]
c0011be5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011beb:	77 2f                	ja     c0011c1c <SysCloseDir(regs*)+0x45>
c0011bed:	83 ec 0c             	sub    esp,0xc
c0011bf0:	50                   	push   eax
c0011bf1:	e8 0b 18 00 00       	call   c0013401 <KeGetFileFromDescriptor(int)>
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	89 c3                	mov    ebx,eax
c0011bfb:	85 c0                	test   eax,eax
c0011bfd:	74 1d                	je     c0011c1c <SysCloseDir(regs*)+0x45>
c0011bff:	83 ec 0c             	sub    esp,0xc
c0011c02:	50                   	push   eax
c0011c03:	e8 86 6b ff ff       	call   c000878e <Directory::close()>
c0011c08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	31 c0                	xor    eax,eax
c0011c15:	31 d2                	xor    edx,edx
c0011c17:	83 c4 08             	add    esp,0x8
c0011c1a:	5b                   	pop    ebx
c0011c1b:	c3                   	ret    
c0011c1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c21:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c26:	83 c4 08             	add    esp,0x8
c0011c29:	5b                   	pop    ebx
c0011c2a:	c3                   	ret    

c0011c2b <SysWait(regs*)>:
c0011c2b:	83 ec 10             	sub    esp,0x10
c0011c2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c32:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c35:	52                   	push   edx
c0011c36:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011c39:	51                   	push   ecx
c0011c3a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c3d:	50                   	push   eax
c0011c3e:	e8 99 57 00 00       	call   c00173dc <waitTask(int, int*, int)>
c0011c43:	83 c4 1c             	add    esp,0x1c
c0011c46:	89 c2                	mov    edx,eax
c0011c48:	c1 fa 1f             	sar    edx,0x1f
c0011c4b:	c3                   	ret    

c0011c4c <SysNotImpl(regs*)>:
c0011c4c:	83 ec 18             	sub    esp,0x18
c0011c4f:	68 83 48 02 c0       	push   0xc0024883
c0011c54:	e8 15 e4 ff ff       	call   c001006e <KePanic(char const*)>
c0011c59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c63:	83 c4 1c             	add    esp,0x1c
c0011c66:	c3                   	ret    

c0011c67 <SysPanic(regs*)>:
c0011c67:	83 ec 18             	sub    esp,0x18
c0011c6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c6e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c71:	50                   	push   eax
c0011c72:	e8 f7 e3 ff ff       	call   c001006e <KePanic(char const*)>
c0011c77:	b8 01 00 00 00       	mov    eax,0x1
c0011c7c:	31 d2                	xor    edx,edx
c0011c7e:	83 c4 1c             	add    esp,0x1c
c0011c81:	c3                   	ret    

c0011c82 <SysRmdir(regs*)>:
c0011c82:	56                   	push   esi
c0011c83:	53                   	push   ebx
c0011c84:	83 ec 20             	sub    esp,0x20
c0011c87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c8b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011c8e:	68 14 01 00 00       	push   0x114
c0011c93:	e8 c7 e0 ff ff       	call   c000fd5f <malloc>
c0011c98:	6a 00                	push   0x0
c0011c9a:	89 c3                	mov    ebx,eax
c0011c9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ca1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ca4:	50                   	push   eax
c0011ca5:	56                   	push   esi
c0011ca6:	53                   	push   ebx
c0011ca7:	e8 e0 63 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011cac:	83 c4 14             	add    esp,0x14
c0011caf:	53                   	push   ebx
c0011cb0:	e8 c1 66 ff ff       	call   c0008376 <File::unlink()>
c0011cb5:	83 c4 10             	add    esp,0x10
c0011cb8:	85 db                	test   ebx,ebx
c0011cba:	74 14                	je     c0011cd0 <SysRmdir(regs*)+0x4e>
c0011cbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cc0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc2:	83 ec 0c             	sub    esp,0xc
c0011cc5:	53                   	push   ebx
c0011cc6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011cc9:	83 c4 10             	add    esp,0x10
c0011ccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd0:	85 c0                	test   eax,eax
c0011cd2:	0f 95 c0             	setne  al
c0011cd5:	31 d2                	xor    edx,edx
c0011cd7:	0f b6 c0             	movzx  eax,al
c0011cda:	f7 d8                	neg    eax
c0011cdc:	83 d2 00             	adc    edx,0x0
c0011cdf:	83 c4 14             	add    esp,0x14
c0011ce2:	f7 da                	neg    edx
c0011ce4:	5b                   	pop    ebx
c0011ce5:	5e                   	pop    esi
c0011ce6:	c3                   	ret    

c0011ce7 <SysUnlink(regs*)>:
c0011ce7:	56                   	push   esi
c0011ce8:	53                   	push   ebx
c0011ce9:	83 ec 20             	sub    esp,0x20
c0011cec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cf0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011cf3:	68 14 01 00 00       	push   0x114
c0011cf8:	e8 62 e0 ff ff       	call   c000fd5f <malloc>
c0011cfd:	6a 00                	push   0x0
c0011cff:	89 c3                	mov    ebx,eax
c0011d01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d09:	50                   	push   eax
c0011d0a:	56                   	push   esi
c0011d0b:	53                   	push   ebx
c0011d0c:	e8 7b 63 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011d11:	83 c4 14             	add    esp,0x14
c0011d14:	53                   	push   ebx
c0011d15:	e8 5c 66 ff ff       	call   c0008376 <File::unlink()>
c0011d1a:	83 c4 10             	add    esp,0x10
c0011d1d:	85 db                	test   ebx,ebx
c0011d1f:	74 14                	je     c0011d35 <SysUnlink(regs*)+0x4e>
c0011d21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d25:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	53                   	push   ebx
c0011d2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d2e:	83 c4 10             	add    esp,0x10
c0011d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d35:	85 c0                	test   eax,eax
c0011d37:	0f 95 c0             	setne  al
c0011d3a:	31 d2                	xor    edx,edx
c0011d3c:	0f b6 c0             	movzx  eax,al
c0011d3f:	f7 d8                	neg    eax
c0011d41:	83 d2 00             	adc    edx,0x0
c0011d44:	83 c4 14             	add    esp,0x14
c0011d47:	f7 da                	neg    edx
c0011d49:	5b                   	pop    ebx
c0011d4a:	5e                   	pop    esi
c0011d4b:	c3                   	ret    

c0011d4c <SysGetArgv(regs*)>:
c0011d4c:	83 ec 0c             	sub    esp,0xc
c0011d4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d53:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d56:	85 c0                	test   eax,eax
c0011d58:	78 2c                	js     c0011d86 <SysGetArgv(regs*)+0x3a>
c0011d5a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d60:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011d63:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011d69:	7d 1b                	jge    c0011d86 <SysGetArgv(regs*)+0x3a>
c0011d6b:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011d72:	85 c0                	test   eax,eax
c0011d74:	74 18                	je     c0011d8e <SysGetArgv(regs*)+0x42>
c0011d76:	83 ec 08             	sub    esp,0x8
c0011d79:	50                   	push   eax
c0011d7a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011d7d:	50                   	push   eax
c0011d7e:	e8 bd e8 fe ff       	call   c0000640 <strcpy>
c0011d83:	83 c4 10             	add    esp,0x10
c0011d86:	31 c0                	xor    eax,eax
c0011d88:	31 d2                	xor    edx,edx
c0011d8a:	83 c4 0c             	add    esp,0xc
c0011d8d:	c3                   	ret    
c0011d8e:	b8 01 00 00 00       	mov    eax,0x1
c0011d93:	31 d2                	xor    edx,edx
c0011d95:	83 c4 0c             	add    esp,0xc
c0011d98:	c3                   	ret    

c0011d99 <SysUSleep(regs*)>:
c0011d99:	83 ec 1c             	sub    esp,0x1c
c0011d9c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011da0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011da3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011da6:	6a 00                	push   0x0
c0011da8:	6a 64                	push   0x64
c0011daa:	52                   	push   edx
c0011dab:	50                   	push   eax
c0011dac:	e8 03 00 01 00       	call   c0021db4 <__udivdi3>
c0011db1:	83 c4 18             	add    esp,0x18
c0011db4:	52                   	push   edx
c0011db5:	50                   	push   eax
c0011db6:	e8 19 57 00 00       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c0011dbb:	31 c0                	xor    eax,eax
c0011dbd:	31 d2                	xor    edx,edx
c0011dbf:	83 c4 1c             	add    esp,0x1c
c0011dc2:	c3                   	ret    

c0011dc3 <SysSpawn(regs*)>:
c0011dc3:	56                   	push   esi
c0011dc4:	53                   	push   ebx
c0011dc5:	83 ec 04             	sub    esp,0x4
c0011dc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dcc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011dcf:	85 f6                	test   esi,esi
c0011dd1:	75 0a                	jne    c0011ddd <SysSpawn(regs*)+0x1a>
c0011dd3:	83 c4 04             	add    esp,0x4
c0011dd6:	31 c0                	xor    eax,eax
c0011dd8:	31 d2                	xor    edx,edx
c0011dda:	5b                   	pop    ebx
c0011ddb:	5e                   	pop    esi
c0011ddc:	c3                   	ret    
c0011ddd:	83 ec 0c             	sub    esp,0xc
c0011de0:	68 c4 07 00 00       	push   0x7c4
c0011de5:	e8 75 df ff ff       	call   c000fd5f <malloc>
c0011dea:	83 c4 10             	add    esp,0x10
c0011ded:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011df0:	89 c6                	mov    esi,eax
c0011df2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011df5:	85 c9                	test   ecx,ecx
c0011df7:	74 39                	je     c0011e32 <SysSpawn(regs*)+0x6f>
c0011df9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e01:	52                   	push   edx
c0011e02:	50                   	push   eax
c0011e03:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e06:	50                   	push   eax
c0011e07:	56                   	push   esi
c0011e08:	e8 9b 4d 00 00       	call   c0016ba8 <Process::Process(char const*, Process*, char**)>
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011e17:	75 ba                	jne    c0011dd3 <SysSpawn(regs*)+0x10>
c0011e19:	83 ec 0c             	sub    esp,0xc
c0011e1c:	56                   	push   esi
c0011e1d:	e8 56 53 00 00       	call   c0017178 <Process::createUserThread()>
c0011e22:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	89 c2                	mov    edx,eax
c0011e29:	83 c4 04             	add    esp,0x4
c0011e2c:	c1 fa 1f             	sar    edx,0x1f
c0011e2f:	5b                   	pop    ebx
c0011e30:	5e                   	pop    esi
c0011e31:	c3                   	ret    
c0011e32:	31 c0                	xor    eax,eax
c0011e34:	eb cb                	jmp    c0011e01 <SysSpawn(regs*)+0x3e>

c0011e36 <SysGetEnv(regs*)>:
c0011e36:	57                   	push   edi
c0011e37:	56                   	push   esi
c0011e38:	53                   	push   ebx
c0011e39:	83 ec 1c             	sub    esp,0x1c
c0011e3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011e40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e45:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e48:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e4b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011e4e:	51                   	push   ecx
c0011e4f:	e8 45 cb ff ff       	call   c000e999 <KeGetProcessTotalEnvCount(Process*)>
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	39 c7                	cmp    edi,eax
c0011e59:	7c 14                	jl     c0011e6f <SysGetEnv(regs*)+0x39>
c0011e5b:	85 f6                	test   esi,esi
c0011e5d:	75 0b                	jne    c0011e6a <SysGetEnv(regs*)+0x34>
c0011e5f:	83 c4 10             	add    esp,0x10
c0011e62:	31 c0                	xor    eax,eax
c0011e64:	5b                   	pop    ebx
c0011e65:	31 d2                	xor    edx,edx
c0011e67:	5e                   	pop    esi
c0011e68:	5f                   	pop    edi
c0011e69:	c3                   	ret    
c0011e6a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e6d:	eb f0                	jmp    c0011e5f <SysGetEnv(regs*)+0x29>
c0011e6f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011e73:	83 ec 04             	sub    esp,0x4
c0011e76:	57                   	push   edi
c0011e77:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e7d:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011e80:	57                   	push   edi
c0011e81:	50                   	push   eax
c0011e82:	e8 32 cb ff ff       	call   c000e9b9 <KeGetProcessEnvPair(Process*, int)>
c0011e87:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e8e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011e92:	83 c4 0c             	add    esp,0xc
c0011e95:	85 d2                	test   edx,edx
c0011e97:	75 23                	jne    c0011ebc <SysGetEnv(regs*)+0x86>
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	50                   	push   eax
c0011e9d:	e8 ce e6 fe ff       	call   c0000570 <strlen>
c0011ea2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ea5:	89 c3                	mov    ebx,eax
c0011ea7:	e8 c4 e6 fe ff       	call   c0000570 <strlen>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	31 d2                	xor    edx,edx
c0011eb8:	5b                   	pop    ebx
c0011eb9:	5e                   	pop    esi
c0011eba:	5f                   	pop    edi
c0011ebb:	c3                   	ret    
c0011ebc:	83 ec 08             	sub    esp,0x8
c0011ebf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011ec2:	50                   	push   eax
c0011ec3:	56                   	push   esi
c0011ec4:	e8 77 e7 fe ff       	call   c0000640 <strcpy>
c0011ec9:	58                   	pop    eax
c0011eca:	5a                   	pop    edx
c0011ecb:	68 9d 48 02 c0       	push   0xc002489d
c0011ed0:	56                   	push   esi
c0011ed1:	e8 6a e9 fe ff       	call   c0000840 <strcat>
c0011ed6:	59                   	pop    ecx
c0011ed7:	5b                   	pop    ebx
c0011ed8:	57                   	push   edi
c0011ed9:	56                   	push   esi
c0011eda:	e8 61 e9 fe ff       	call   c0000840 <strcat>
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	e9 78 ff ff ff       	jmp    c0011e5f <SysGetEnv(regs*)+0x29>

c0011ee7 <SysSetFatAttrib(regs*)>:
c0011ee7:	57                   	push   edi
c0011ee8:	56                   	push   esi
c0011ee9:	53                   	push   ebx
c0011eea:	83 ec 1c             	sub    esp,0x1c
c0011eed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011ef1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011ef4:	68 14 01 00 00       	push   0x114
c0011ef9:	e8 61 de ff ff       	call   c000fd5f <malloc>
c0011efe:	83 c4 0c             	add    esp,0xc
c0011f01:	89 c3                	mov    ebx,eax
c0011f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f0b:	50                   	push   eax
c0011f0c:	57                   	push   edi
c0011f0d:	53                   	push   ebx
c0011f0e:	e8 77 62 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011f13:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011f16:	83 c4 0c             	add    esp,0xc
c0011f19:	0f b6 d4             	movzx  edx,ah
c0011f1c:	0f b6 c0             	movzx  eax,al
c0011f1f:	52                   	push   edx
c0011f20:	50                   	push   eax
c0011f21:	53                   	push   ebx
c0011f22:	e8 e9 64 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	85 db                	test   ebx,ebx
c0011f2c:	74 14                	je     c0011f42 <SysSetFatAttrib(regs*)+0x5b>
c0011f2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f34:	83 ec 0c             	sub    esp,0xc
c0011f37:	53                   	push   ebx
c0011f38:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f42:	85 c0                	test   eax,eax
c0011f44:	0f 95 c0             	setne  al
c0011f47:	31 d2                	xor    edx,edx
c0011f49:	0f b6 c0             	movzx  eax,al
c0011f4c:	f7 d8                	neg    eax
c0011f4e:	83 d2 00             	adc    edx,0x0
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	f7 da                	neg    edx
c0011f56:	5b                   	pop    ebx
c0011f57:	5e                   	pop    esi
c0011f58:	5f                   	pop    edi
c0011f59:	c3                   	ret    

c0011f5a <SysShutdown(regs*)>:
c0011f5a:	83 ec 1c             	sub    esp,0x1c
c0011f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f61:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011f64:	85 c9                	test   ecx,ecx
c0011f66:	74 18                	je     c0011f80 <SysShutdown(regs*)+0x26>
c0011f68:	83 f9 01             	cmp    ecx,0x1
c0011f6b:	74 26                	je     c0011f93 <SysShutdown(regs*)+0x39>
c0011f6d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f72:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f77:	83 f9 02             	cmp    ecx,0x2
c0011f7a:	74 24                	je     c0011fa0 <SysShutdown(regs*)+0x46>
c0011f7c:	83 c4 1c             	add    esp,0x1c
c0011f7f:	c3                   	ret    
c0011f80:	e8 b9 c3 ff ff       	call   c000e33e <KeShutdown()>
c0011f85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f8f:	83 c4 1c             	add    esp,0x1c
c0011f92:	c3                   	ret    
c0011f93:	e8 ca c3 ff ff       	call   c000e362 <KeSleep()>
c0011f98:	31 c0                	xor    eax,eax
c0011f9a:	31 d2                	xor    edx,edx
c0011f9c:	83 c4 1c             	add    esp,0x1c
c0011f9f:	c3                   	ret    
c0011fa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011fa4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011fa8:	e8 c1 c3 ff ff       	call   c000e36e <KeRestart()>
c0011fad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fb5:	eb c5                	jmp    c0011f7c <SysShutdown(regs*)+0x22>

c0011fb7 <SysPipe(regs*)>:
c0011fb7:	57                   	push   edi
c0011fb8:	56                   	push   esi
c0011fb9:	53                   	push   ebx
c0011fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011fc4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011fc7:	6a 20                	push   0x20
c0011fc9:	e8 91 dd ff ff       	call   c000fd5f <malloc>
c0011fce:	89 c3                	mov    ebx,eax
c0011fd0:	58                   	pop    eax
c0011fd1:	5a                   	pop    edx
c0011fd2:	68 00 50 00 00       	push   0x5000
c0011fd7:	53                   	push   ebx
c0011fd8:	e8 13 e9 ff ff       	call   c00108f0 <Pipe::Pipe(int)>
c0011fdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fe0:	e8 1f 11 00 00       	call   c0013104 <UnixFile::getFileDescriptor()>
c0011fe5:	89 07                	mov    DWORD PTR [edi],eax
c0011fe7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fea:	e8 15 11 00 00       	call   c0013104 <UnixFile::getFileDescriptor()>
c0011fef:	83 c4 10             	add    esp,0x10
c0011ff2:	89 06                	mov    DWORD PTR [esi],eax
c0011ff4:	31 d2                	xor    edx,edx
c0011ff6:	5b                   	pop    ebx
c0011ff7:	31 c0                	xor    eax,eax
c0011ff9:	5e                   	pop    esi
c0011ffa:	5f                   	pop    edi
c0011ffb:	c3                   	ret    

c0011ffc <SysGetUnixTime(regs*)>:
c0011ffc:	57                   	push   edi
c0011ffd:	56                   	push   esi
c0011ffe:	53                   	push   ebx
c0011fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012003:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012006:	83 f8 01             	cmp    eax,0x1
c0012009:	74 4b                	je     c0012056 <SysGetUnixTime(regs*)+0x5a>
c001200b:	83 f8 02             	cmp    eax,0x2
c001200e:	74 17                	je     c0012027 <SysGetUnixTime(regs*)+0x2b>
c0012010:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0012015:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001201b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001201f:	5b                   	pop    ebx
c0012020:	5e                   	pop    esi
c0012021:	5f                   	pop    edi
c0012022:	e9 13 71 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0012027:	8b 35 50 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb50
c001202d:	8b 3d 54 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb54
c0012033:	89 f0                	mov    eax,esi
c0012035:	89 fa                	mov    edx,edi
c0012037:	01 f0                	add    eax,esi
c0012039:	11 fa                	adc    edx,edi
c001203b:	01 f0                	add    eax,esi
c001203d:	11 fa                	adc    edx,edi
c001203f:	89 c1                	mov    ecx,eax
c0012041:	89 d3                	mov    ebx,edx
c0012043:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0012047:	c1 e1 05             	shl    ecx,0x5
c001204a:	01 c8                	add    eax,ecx
c001204c:	11 da                	adc    edx,ebx
c001204e:	01 f0                	add    eax,esi
c0012050:	5b                   	pop    ebx
c0012051:	11 fa                	adc    edx,edi
c0012053:	5e                   	pop    esi
c0012054:	5f                   	pop    edi
c0012055:	c3                   	ret    
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001205e:	be 40 42 0f 00       	mov    esi,0xf4240
c0012063:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012069:	50                   	push   eax
c001206a:	e8 cb 70 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c001206f:	83 c4 10             	add    esp,0x10
c0012072:	69 da 40 42 0f 00    	imul   ebx,edx,0xf4240
c0012078:	f7 e6                	mul    esi
c001207a:	01 da                	add    edx,ebx
c001207c:	5b                   	pop    ebx
c001207d:	5e                   	pop    esi
c001207e:	5f                   	pop    edi
c001207f:	c3                   	ret    

c0012080 <string_ends_with(char const*, char const*)>:
c0012080:	57                   	push   edi
c0012081:	56                   	push   esi
c0012082:	53                   	push   ebx
c0012083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012087:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001208b:	83 ec 0c             	sub    esp,0xc
c001208e:	53                   	push   ebx
c001208f:	e8 dc e4 fe ff       	call   c0000570 <strlen>
c0012094:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012097:	89 c6                	mov    esi,eax
c0012099:	e8 d2 e4 fe ff       	call   c0000570 <strlen>
c001209e:	83 c4 10             	add    esp,0x10
c00120a1:	39 c6                	cmp    esi,eax
c00120a3:	7d 06                	jge    c00120ab <string_ends_with(char const*, char const*)+0x2b>
c00120a5:	5b                   	pop    ebx
c00120a6:	31 c0                	xor    eax,eax
c00120a8:	5e                   	pop    esi
c00120a9:	5f                   	pop    edi
c00120aa:	c3                   	ret    
c00120ab:	83 ec 08             	sub    esp,0x8
c00120ae:	29 c6                	sub    esi,eax
c00120b0:	57                   	push   edi
c00120b1:	01 f3                	add    ebx,esi
c00120b3:	53                   	push   ebx
c00120b4:	e8 97 e6 fe ff       	call   c0000750 <strcmp>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	85 c0                	test   eax,eax
c00120be:	5b                   	pop    ebx
c00120bf:	0f 94 c0             	sete   al
c00120c2:	5e                   	pop    esi
c00120c3:	0f b6 c0             	movzx  eax,al
c00120c6:	5f                   	pop    edi
c00120c7:	c3                   	ret    

c00120c8 <SysOpen(regs*)>:
c00120c8:	56                   	push   esi
c00120c9:	53                   	push   ebx
c00120ca:	81 ec 04 01 00 00    	sub    esp,0x104
c00120d0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00120d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120da:	85 c0                	test   eax,eax
c00120dc:	0f 84 bc 01 00 00    	je     c001229e <SysOpen(regs*)+0x1d6>
c00120e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120e5:	85 c0                	test   eax,eax
c00120e7:	0f 84 b1 01 00 00    	je     c001229e <SysOpen(regs*)+0x1d6>
c00120ed:	6a 00                	push   0x0
c00120ef:	68 9f 48 02 c0       	push   0xc002489f
c00120f4:	50                   	push   eax
c00120f5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00120f9:	56                   	push   esi
c00120fa:	e8 73 5d ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00120ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0012102:	e8 69 e4 fe ff       	call   c0000570 <strlen>
c0012107:	83 c4 10             	add    esp,0x10
c001210a:	83 e8 01             	sub    eax,0x1
c001210d:	74 21                	je     c0012130 <SysOpen(regs*)+0x68>
c001210f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012113:	eb 12                	jmp    c0012127 <SysOpen(regs*)+0x5f>
c0012115:	83 fa 3a             	cmp    edx,0x3a
c0012118:	74 12                	je     c001212c <SysOpen(regs*)+0x64>
c001211a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001211e:	83 e8 01             	sub    eax,0x1
c0012121:	74 0d                	je     c0012130 <SysOpen(regs*)+0x68>
c0012123:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012127:	83 fa 2e             	cmp    edx,0x2e
c001212a:	75 e9                	jne    c0012115 <SysOpen(regs*)+0x4d>
c001212c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012130:	83 ec 08             	sub    esp,0x8
c0012133:	68 a3 48 02 c0       	push   0xc00248a3
c0012138:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001213b:	50                   	push   eax
c001213c:	e8 3f ff ff ff       	call   c0012080 <string_ends_with(char const*, char const*)>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	85 c0                	test   eax,eax
c0012146:	74 1d                	je     c0012165 <SysOpen(regs*)+0x9d>
c0012148:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001214b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012151:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012158:	81 c4 04 01 00 00    	add    esp,0x104
c001215e:	31 c0                	xor    eax,eax
c0012160:	31 d2                	xor    edx,edx
c0012162:	5b                   	pop    ebx
c0012163:	5e                   	pop    esi
c0012164:	c3                   	ret    
c0012165:	83 ec 08             	sub    esp,0x8
c0012168:	68 a8 48 02 c0       	push   0xc00248a8
c001216d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012170:	50                   	push   eax
c0012171:	e8 0a ff ff ff       	call   c0012080 <string_ends_with(char const*, char const*)>
c0012176:	83 c4 10             	add    esp,0x10
c0012179:	85 c0                	test   eax,eax
c001217b:	75 cb                	jne    c0012148 <SysOpen(regs*)+0x80>
c001217d:	83 ec 08             	sub    esp,0x8
c0012180:	68 a4 48 02 c0       	push   0xc00248a4
c0012185:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012188:	50                   	push   eax
c0012189:	e8 c2 e5 fe ff       	call   c0000750 <strcmp>
c001218e:	83 c4 10             	add    esp,0x10
c0012191:	85 c0                	test   eax,eax
c0012193:	74 b3                	je     c0012148 <SysOpen(regs*)+0x80>
c0012195:	83 ec 08             	sub    esp,0x8
c0012198:	68 a3 48 02 c0       	push   0xc00248a3
c001219d:	56                   	push   esi
c001219e:	e8 dd fe ff ff       	call   c0012080 <string_ends_with(char const*, char const*)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	85 c0                	test   eax,eax
c00121a8:	75 9e                	jne    c0012148 <SysOpen(regs*)+0x80>
c00121aa:	83 ec 08             	sub    esp,0x8
c00121ad:	68 ad 48 02 c0       	push   0xc00248ad
c00121b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121b5:	50                   	push   eax
c00121b6:	e8 c5 fe ff ff       	call   c0012080 <string_ends_with(char const*, char const*)>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	85 c0                	test   eax,eax
c00121c0:	0f 85 eb 00 00 00    	jne    c00122b1 <SysOpen(regs*)+0x1e9>
c00121c6:	83 ec 08             	sub    esp,0x8
c00121c9:	68 b2 48 02 c0       	push   0xc00248b2
c00121ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121d1:	50                   	push   eax
c00121d2:	e8 a9 fe ff ff       	call   c0012080 <string_ends_with(char const*, char const*)>
c00121d7:	83 c4 10             	add    esp,0x10
c00121da:	85 c0                	test   eax,eax
c00121dc:	0f 85 cf 00 00 00    	jne    c00122b1 <SysOpen(regs*)+0x1e9>
c00121e2:	83 ec 08             	sub    esp,0x8
c00121e5:	68 ae 48 02 c0       	push   0xc00248ae
c00121ea:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00121ed:	51                   	push   ecx
c00121ee:	e8 5d e5 fe ff       	call   c0000750 <strcmp>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	85 c0                	test   eax,eax
c00121f8:	0f 84 b3 00 00 00    	je     c00122b1 <SysOpen(regs*)+0x1e9>
c00121fe:	83 ec 08             	sub    esp,0x8
c0012201:	68 ad 48 02 c0       	push   0xc00248ad
c0012206:	56                   	push   esi
c0012207:	e8 74 fe ff ff       	call   c0012080 <string_ends_with(char const*, char const*)>
c001220c:	83 c4 10             	add    esp,0x10
c001220f:	85 c0                	test   eax,eax
c0012211:	0f 85 9a 00 00 00    	jne    c00122b1 <SysOpen(regs*)+0x1e9>
c0012217:	83 ec 0c             	sub    esp,0xc
c001221a:	68 14 01 00 00       	push   0x114
c001221f:	e8 3b db ff ff       	call   c000fd5f <malloc>
c0012224:	83 c4 0c             	add    esp,0xc
c0012227:	89 c6                	mov    esi,eax
c0012229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001222e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012231:	50                   	push   eax
c0012232:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012235:	52                   	push   edx
c0012236:	56                   	push   esi
c0012237:	e8 4e 5f ff ff       	call   c000818a <File::File(char const*, Process*)>
c001223c:	83 c4 10             	add    esp,0x10
c001223f:	85 f6                	test   esi,esi
c0012241:	74 5b                	je     c001229e <SysOpen(regs*)+0x1d6>
c0012243:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012246:	0f b6 c2             	movzx  eax,dl
c0012249:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001224c:	89 d0                	mov    eax,edx
c001224e:	83 e0 01             	and    eax,0x1
c0012251:	f6 c2 02             	test   dl,0x2
c0012254:	74 03                	je     c0012259 <SysOpen(regs*)+0x191>
c0012256:	83 c8 02             	or     eax,0x2
c0012259:	f6 c2 04             	test   dl,0x4
c001225c:	74 03                	je     c0012261 <SysOpen(regs*)+0x199>
c001225e:	83 c8 04             	or     eax,0x4
c0012261:	f6 c2 08             	test   dl,0x8
c0012264:	74 03                	je     c0012269 <SysOpen(regs*)+0x1a1>
c0012266:	83 c8 0a             	or     eax,0xa
c0012269:	80 e2 10             	and    dl,0x10
c001226c:	74 03                	je     c0012271 <SysOpen(regs*)+0x1a9>
c001226e:	83 c8 12             	or     eax,0x12
c0012271:	83 ec 08             	sub    esp,0x8
c0012274:	50                   	push   eax
c0012275:	56                   	push   esi
c0012276:	e8 2d 5f ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	85 c0                	test   eax,eax
c0012280:	75 1c                	jne    c001229e <SysOpen(regs*)+0x1d6>
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	56                   	push   esi
c0012286:	e8 79 0e 00 00       	call   c0013104 <UnixFile::getFileDescriptor()>
c001228b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	89 02                	mov    DWORD PTR [edx],eax
c0012293:	c1 f8 1f             	sar    eax,0x1f
c0012296:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012299:	e9 ba fe ff ff       	jmp    c0012158 <SysOpen(regs*)+0x90>
c001229e:	81 c4 04 01 00 00    	add    esp,0x104
c00122a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122ae:	5b                   	pop    ebx
c00122af:	5e                   	pop    esi
c00122b0:	c3                   	ret    
c00122b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122b4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00122ba:	e9 92 fe ff ff       	jmp    c0012151 <SysOpen(regs*)+0x89>

c00122bf <KeSystemCall(regs*, void*)>:
c00122bf:	53                   	push   ebx
c00122c0:	83 ec 08             	sub    esp,0x8
c00122c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00122ca:	83 f8 48             	cmp    eax,0x48
c00122cd:	77 16                	ja     c00122e5 <KeSystemCall(regs*, void*)+0x26>
c00122cf:	8b 14 85 80 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9080]
c00122d6:	85 d2                	test   edx,edx
c00122d8:	74 0b                	je     c00122e5 <KeSystemCall(regs*, void*)+0x26>
c00122da:	83 ec 0c             	sub    esp,0xc
c00122dd:	53                   	push   ebx
c00122de:	ff d2                	call   edx
c00122e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00122e3:	eb 0d                	jmp    c00122f2 <KeSystemCall(regs*, void*)+0x33>
c00122e5:	52                   	push   edx
c00122e6:	52                   	push   edx
c00122e7:	50                   	push   eax
c00122e8:	68 b7 48 02 c0       	push   0xc00248b7
c00122ed:	e8 8a 4c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00122f2:	83 c4 10             	add    esp,0x10
c00122f5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00122fa:	31 d2                	xor    edx,edx
c00122fc:	83 c4 08             	add    esp,0x8
c00122ff:	5b                   	pop    ebx
c0012300:	c3                   	ret    
c0012301:	90                   	nop

c0012302 <VgaText::isAtty()>:
c0012302:	b0 01                	mov    al,0x1
c0012304:	c3                   	ret    
c0012305:	90                   	nop

c0012306 <VgaText::~VgaText()>:
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	ba 20 49 02 c0       	mov    edx,0xc0024920
c001230e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012312:	89 10                	mov    DWORD PTR [eax],edx
c0012314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012318:	83 ec 0c             	sub    esp,0xc
c001231b:	50                   	push   eax
c001231c:	e8 d1 0f 00 00       	call   c00132f2 <UnixFile::~UnixFile()>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	90                   	nop
c0012325:	83 c4 0c             	add    esp,0xc
c0012328:	c3                   	ret    
c0012329:	90                   	nop

c001232a <VgaText::~VgaText()>:
c001232a:	83 ec 0c             	sub    esp,0xc
c001232d:	83 ec 0c             	sub    esp,0xc
c0012330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012334:	e8 cd ff ff ff       	call   c0012306 <VgaText::~VgaText()>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	83 ec 08             	sub    esp,0x8
c001233f:	68 84 01 00 00       	push   0x184
c0012344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012348:	e8 9c b0 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001234d:	83 c4 10             	add    esp,0x10
c0012350:	83 c4 0c             	add    esp,0xc
c0012353:	c3                   	ret    

c0012354 <VgaText::read(unsigned long long, void*, int*)>:
c0012354:	83 ec 10             	sub    esp,0x10
c0012357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001235b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001235f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012363:	e8 3d 82 ff ff       	call   c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>
c0012368:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001236c:	89 02                	mov    DWORD PTR [edx],eax
c001236e:	31 c0                	xor    eax,eax
c0012370:	83 c4 1c             	add    esp,0x1c
c0012373:	c3                   	ret    

c0012374 <setTerminalScrollLock(bool)>:
c0012374:	c3                   	ret    

c0012375 <doTerminalCycle()>:
c0012375:	c3                   	ret    

c0012376 <addToTerminalCycle(VgaText*)>:
c0012376:	c3                   	ret    

c0012377 <scrollTerminalScrollLock(int)>:
c0012377:	c3                   	ret    

c0012378 <VgaText::updateTitle()>:
c0012378:	c3                   	ret    
c0012379:	90                   	nop

c001237a <VgaText::load()>:
c001237a:	c3                   	ret    
c001237b:	90                   	nop

c001237c <VgaText::updateCursor()>:
c001237c:	83 ec 14             	sub    esp,0x14
c001237f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012383:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012386:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012389:	e8 86 97 00 00       	call   c001bb14 <HalConsoleCursorUpdate(int, int)>
c001238e:	83 c4 1c             	add    esp,0x1c
c0012391:	c3                   	ret    

c0012392 <VgaText::doANSI_SGR(int)>:
c0012392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001239a:	85 d2                	test   edx,edx
c001239c:	75 0b                	jne    c00123a9 <VgaText::doANSI_SGR(int)+0x17>
c001239e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00123a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00123a4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00123a7:	eb 59                	jmp    c0012402 <VgaText::doANSI_SGR(int)+0x70>
c00123a9:	83 fa 07             	cmp    edx,0x7
c00123ac:	75 0b                	jne    c00123b9 <VgaText::doANSI_SGR(int)+0x27>
c00123ae:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00123b1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00123b4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00123b7:	eb 49                	jmp    c0012402 <VgaText::doANSI_SGR(int)+0x70>
c00123b9:	83 fa 1b             	cmp    edx,0x1b
c00123bc:	74 e0                	je     c001239e <VgaText::doANSI_SGR(int)+0xc>
c00123be:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00123c1:	83 f9 07             	cmp    ecx,0x7
c00123c4:	77 09                	ja     c00123cf <VgaText::doANSI_SGR(int)+0x3d>
c00123c6:	8b 14 8d e0 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f20]
c00123cd:	eb 20                	jmp    c00123ef <VgaText::doANSI_SGR(int)+0x5d>
c00123cf:	8d 4a d8             	lea    ecx,[edx-0x28]
c00123d2:	83 f9 07             	cmp    ecx,0x7
c00123d5:	77 09                	ja     c00123e0 <VgaText::doANSI_SGR(int)+0x4e>
c00123d7:	8b 14 8d e0 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f20]
c00123de:	eb 22                	jmp    c0012402 <VgaText::doANSI_SGR(int)+0x70>
c00123e0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00123e3:	83 f9 07             	cmp    ecx,0x7
c00123e6:	77 0b                	ja     c00123f3 <VgaText::doANSI_SGR(int)+0x61>
c00123e8:	8b 14 95 98 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9068]
c00123ef:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00123f2:	c3                   	ret    
c00123f3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00123f6:	83 f9 07             	cmp    ecx,0x7
c00123f9:	77 0a                	ja     c0012405 <VgaText::doANSI_SGR(int)+0x73>
c00123fb:	8b 14 95 70 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9090]
c0012402:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012405:	c3                   	ret    

c0012406 <VgaText::setDefaultBgColour(VgaColour)>:
c0012406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001240a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001240e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012411:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012414:	c3                   	ret    
c0012415:	90                   	nop

c0012416 <VgaText::setDefaultFgColour(VgaColour)>:
c0012416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001241a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001241e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012421:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012424:	c3                   	ret    
c0012425:	90                   	nop

c0012426 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012426:	53                   	push   ebx
c0012427:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001242b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012433:	51                   	push   ecx
c0012434:	e8 cd ff ff ff       	call   c0012406 <VgaText::setDefaultBgColour(VgaColour)>
c0012439:	58                   	pop    eax
c001243a:	5a                   	pop    edx
c001243b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001243f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012443:	5b                   	pop    ebx
c0012444:	eb d0                	jmp    c0012416 <VgaText::setDefaultFgColour(VgaColour)>

c0012446 <VgaText::setTitleTextColour(VgaColour)>:
c0012446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001244e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012451:	c3                   	ret    

c0012452 <VgaText::setTitleColour(VgaColour)>:
c0012452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012456:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001245a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001245d:	c3                   	ret    

c001245e <VgaText::setTitle(char*)>:
c001245e:	c3                   	ret    
c001245f:	90                   	nop

c0012460 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012464:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012469:	83 e0 0f             	and    eax,0xf
c001246c:	c1 e2 04             	shl    edx,0x4
c001246f:	09 d0                	or     eax,edx
c0012471:	c3                   	ret    

c0012472 <VgaText::scrollScreen()>:
c0012472:	55                   	push   ebp
c0012473:	57                   	push   edi
c0012474:	56                   	push   esi
c0012475:	be 01 00 00 00       	mov    esi,0x1
c001247a:	53                   	push   ebx
c001247b:	83 ec 0c             	sub    esp,0xc
c001247e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012482:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012485:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001248b:	31 ff                	xor    edi,edi
c001248d:	01 e9                	add    ecx,ebp
c001248f:	8a 01                	mov    al,BYTE PTR [ecx]
c0012491:	83 fe 18             	cmp    esi,0x18
c0012494:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001249a:	75 20                	jne    c00124bc <VgaText::scrollScreen()+0x4a>
c001249c:	f7 c7 01 00 00 00    	test   edi,0x1
c00124a2:	74 15                	je     c00124b9 <VgaText::scrollScreen()+0x47>
c00124a4:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00124a8:	50                   	push   eax
c00124a9:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00124ad:	50                   	push   eax
c00124ae:	e8 ad ff ff ff       	call   c0012460 <VgaText::combineColours(unsigned char, unsigned char)>
c00124b3:	5a                   	pop    edx
c00124b4:	5a                   	pop    edx
c00124b5:	88 01                	mov    BYTE PTR [ecx],al
c00124b7:	eb 03                	jmp    c00124bc <VgaText::scrollScreen()+0x4a>
c00124b9:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00124bc:	47                   	inc    edi
c00124bd:	41                   	inc    ecx
c00124be:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00124c4:	75 c9                	jne    c001248f <VgaText::scrollScreen()+0x1d>
c00124c6:	46                   	inc    esi
c00124c7:	83 fe 19             	cmp    esi,0x19
c00124ca:	75 b9                	jne    c0012485 <VgaText::scrollScreen()+0x13>
c00124cc:	39 1d d4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1d4,ebx
c00124d2:	75 1f                	jne    c00124f3 <VgaText::scrollScreen()+0x81>
c00124d4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00124d8:	74 05                	je     c00124df <VgaText::scrollScreen()+0x6d>
c00124da:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00124dd:	eb 14                	jmp    c00124f3 <VgaText::scrollScreen()+0x81>
c00124df:	50                   	push   eax
c00124e0:	50                   	push   eax
c00124e1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00124e5:	50                   	push   eax
c00124e6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00124ea:	50                   	push   eax
c00124eb:	e8 b8 94 00 00       	call   c001b9a8 <HalConsoleScroll(int, int)>
c00124f0:	83 c4 10             	add    esp,0x10
c00124f3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00124f7:	83 c4 0c             	add    esp,0xc
c00124fa:	5b                   	pop    ebx
c00124fb:	5e                   	pop    esi
c00124fc:	5f                   	pop    edi
c00124fd:	5d                   	pop    ebp
c00124fe:	e9 79 fe ff ff       	jmp    c001237c <VgaText::updateCursor()>
c0012503:	90                   	nop

c0012504 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012504:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012509:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001250e:	c1 e0 08             	shl    eax,0x8
c0012511:	09 d0                	or     eax,edx
c0012513:	c3                   	ret    

c0012514 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012514:	55                   	push   ebp
c0012515:	57                   	push   edi
c0012516:	56                   	push   esi
c0012517:	53                   	push   ebx
c0012518:	83 ec 1c             	sub    esp,0x1c
c001251b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001251f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012527:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c001252a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001252e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012536:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001253a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001253e:	85 ed                	test   ebp,ebp
c0012540:	75 14                	jne    c0012556 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012542:	c7 44 24 30 cb 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc00248cb
c001254a:	83 c4 1c             	add    esp,0x1c
c001254d:	5b                   	pop    ebx
c001254e:	5e                   	pop    esi
c001254f:	5f                   	pop    edi
c0012550:	5d                   	pop    ebp
c0012551:	e9 18 db ff ff       	jmp    c001006e <KePanic(char const*)>
c0012556:	50                   	push   eax
c0012557:	50                   	push   eax
c0012558:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001255d:	50                   	push   eax
c001255e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012563:	50                   	push   eax
c0012564:	e8 f7 fe ff ff       	call   c0012460 <VgaText::combineColours(unsigned char, unsigned char)>
c0012569:	5a                   	pop    edx
c001256a:	0f be c9             	movsx  ecx,cl
c001256d:	5a                   	pop    edx
c001256e:	0f b6 c0             	movzx  eax,al
c0012571:	50                   	push   eax
c0012572:	51                   	push   ecx
c0012573:	e8 8c ff ff ff       	call   c0012504 <VgaText::combineCharAndColour(char, unsigned char)>
c0012578:	6b d6 50             	imul   edx,esi,0x50
c001257b:	83 c4 10             	add    esp,0x10
c001257e:	01 da                	add    edx,ebx
c0012580:	0f b7 d2             	movzx  edx,dx
c0012583:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012588:	39 3d d4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1d4,edi
c001258e:	75 28                	jne    c00125b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012590:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012594:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012598:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c001259c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00125a0:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00125a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125a8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00125ac:	83 c4 1c             	add    esp,0x1c
c00125af:	5b                   	pop    ebx
c00125b0:	5e                   	pop    esi
c00125b1:	5f                   	pop    edi
c00125b2:	5d                   	pop    ebp
c00125b3:	e9 f8 94 00 00       	jmp    c001bab0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00125b8:	83 c4 1c             	add    esp,0x1c
c00125bb:	5b                   	pop    ebx
c00125bc:	5e                   	pop    esi
c00125bd:	5f                   	pop    edi
c00125be:	5d                   	pop    ebp
c00125bf:	c3                   	ret    

c00125c0 <VgaText::getCursorX()>:
c00125c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00125c7:	c3                   	ret    

c00125c8 <VgaText::getCursorY()>:
c00125c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125cc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00125cf:	c3                   	ret    

c00125d0 <VgaText::setCursor(int, int)>:
c00125d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125d8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00125db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00125e2:	e9 95 fd ff ff       	jmp    c001237c <VgaText::updateCursor()>

c00125e7 <setActiveTerminal(VgaText*)>:
c00125e7:	53                   	push   ebx
c00125e8:	83 ec 08             	sub    esp,0x8
c00125eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125ef:	85 db                	test   ebx,ebx
c00125f1:	75 11                	jne    c0012604 <setActiveTerminal(VgaText*)+0x1d>
c00125f3:	c7 44 24 10 db 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248db
c00125fb:	83 c4 08             	add    esp,0x8
c00125fe:	5b                   	pop    ebx
c00125ff:	e9 6a da ff ff       	jmp    c001006e <KePanic(char const*)>
c0012604:	a1 d4 f1 02 c0       	mov    eax,ds:0xc002f1d4
c0012609:	85 c0                	test   eax,eax
c001260b:	74 0c                	je     c0012619 <setActiveTerminal(VgaText*)+0x32>
c001260d:	83 ec 0c             	sub    esp,0xc
c0012610:	50                   	push   eax
c0012611:	e8 66 fd ff ff       	call   c001237c <VgaText::updateCursor()>
c0012616:	83 c4 10             	add    esp,0x10
c0012619:	89 1d d4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1d4,ebx
c001261f:	50                   	push   eax
c0012620:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012623:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012626:	53                   	push   ebx
c0012627:	e8 a4 ff ff ff       	call   c00125d0 <VgaText::setCursor(int, int)>
c001262c:	83 c4 18             	add    esp,0x18
c001262f:	5b                   	pop    ebx
c0012630:	c3                   	ret    
c0012631:	90                   	nop

c0012632 <VgaText::clearScreen()>:
c0012632:	57                   	push   edi
c0012633:	56                   	push   esi
c0012634:	31 f6                	xor    esi,esi
c0012636:	53                   	push   ebx
c0012637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001263b:	52                   	push   edx
c001263c:	6a 00                	push   0x0
c001263e:	6a 00                	push   0x0
c0012640:	53                   	push   ebx
c0012641:	e8 8a ff ff ff       	call   c00125d0 <VgaText::setCursor(int, int)>
c0012646:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012653:	7e 20                	jle    c0012675 <VgaText::clearScreen()+0x43>
c0012655:	31 ff                	xor    edi,edi
c0012657:	50                   	push   eax
c0012658:	50                   	push   eax
c0012659:	56                   	push   esi
c001265a:	57                   	push   edi
c001265b:	47                   	inc    edi
c001265c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001265f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012662:	6a 20                	push   0x20
c0012664:	53                   	push   ebx
c0012665:	e8 aa fe ff ff       	call   c0012514 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001266a:	83 c4 20             	add    esp,0x20
c001266d:	83 ff 50             	cmp    edi,0x50
c0012670:	75 e5                	jne    c0012657 <VgaText::clearScreen()+0x25>
c0012672:	46                   	inc    esi
c0012673:	eb db                	jmp    c0012650 <VgaText::clearScreen()+0x1e>
c0012675:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001267c:	5b                   	pop    ebx
c001267d:	5e                   	pop    esi
c001267e:	5f                   	pop    edi
c001267f:	c3                   	ret    

c0012680 <VgaText::setCursorX(int)>:
c0012680:	83 ec 10             	sub    esp,0x10
c0012683:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012687:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001268a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001268e:	50                   	push   eax
c001268f:	e8 3c ff ff ff       	call   c00125d0 <VgaText::setCursor(int, int)>
c0012694:	83 c4 1c             	add    esp,0x1c
c0012697:	c3                   	ret    

c0012698 <VgaText::setCursorY(int)>:
c0012698:	83 ec 10             	sub    esp,0x10
c001269b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001269f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126a3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00126a6:	50                   	push   eax
c00126a7:	e8 24 ff ff ff       	call   c00125d0 <VgaText::setCursor(int, int)>
c00126ac:	83 c4 1c             	add    esp,0x1c
c00126af:	c3                   	ret    

c00126b0 <VgaText::incrementCursor(bool)>:
c00126b0:	56                   	push   esi
c00126b1:	53                   	push   ebx
c00126b2:	51                   	push   ecx
c00126b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00126be:	40                   	inc    eax
c00126bf:	83 f8 50             	cmp    eax,0x50
c00126c2:	74 05                	je     c00126c9 <VgaText::incrementCursor(bool)+0x19>
c00126c4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00126c7:	eb 24                	jmp    c00126ed <VgaText::incrementCursor(bool)+0x3d>
c00126c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00126cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00126d3:	8d 50 01             	lea    edx,[eax+0x1]
c00126d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00126d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00126dc:	75 0f                	jne    c00126ed <VgaText::incrementCursor(bool)+0x3d>
c00126de:	83 ec 0c             	sub    esp,0xc
c00126e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00126e4:	53                   	push   ebx
c00126e5:	e8 88 fd ff ff       	call   c0012472 <VgaText::scrollScreen()>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	89 f0                	mov    eax,esi
c00126ef:	84 c0                	test   al,al
c00126f1:	74 0c                	je     c00126ff <VgaText::incrementCursor(bool)+0x4f>
c00126f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126f7:	5a                   	pop    edx
c00126f8:	5b                   	pop    ebx
c00126f9:	5e                   	pop    esi
c00126fa:	e9 7d fc ff ff       	jmp    c001237c <VgaText::updateCursor()>
c00126ff:	58                   	pop    eax
c0012700:	5b                   	pop    ebx
c0012701:	5e                   	pop    esi
c0012702:	c3                   	ret    
c0012703:	90                   	nop

c0012704 <VgaText::decrementCursor(bool)>:
c0012704:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012708:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001270c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001270f:	85 c0                	test   eax,eax
c0012711:	74 04                	je     c0012717 <VgaText::decrementCursor(bool)+0x13>
c0012713:	48                   	dec    eax
c0012714:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012717:	84 c9                	test   cl,cl
c0012719:	74 09                	je     c0012724 <VgaText::decrementCursor(bool)+0x20>
c001271b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001271f:	e9 58 fc ff ff       	jmp    c001237c <VgaText::updateCursor()>
c0012724:	c3                   	ret    
c0012725:	90                   	nop

c0012726 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012726:	53                   	push   ebx
c0012727:	83 ec 08             	sub    esp,0x8
c001272a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001272f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012733:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001273b:	83 f8 07             	cmp    eax,0x7
c001273e:	75 21                	jne    c0012761 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012740:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012748:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012750:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012758:	83 c4 08             	add    esp,0x8
c001275b:	5b                   	pop    ebx
c001275c:	e9 ca 62 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012761:	83 f8 0d             	cmp    eax,0xd
c0012764:	75 09                	jne    c001276f <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012766:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001276d:	eb 2d                	jmp    c001279c <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001276f:	83 f8 0a             	cmp    eax,0xa
c0012772:	75 31                	jne    c00127a5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012774:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012777:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001277e:	8d 50 01             	lea    edx,[eax+0x1]
c0012781:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012784:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012787:	75 0f                	jne    c0012798 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012789:	83 ec 0c             	sub    esp,0xc
c001278c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001278f:	53                   	push   ebx
c0012790:	e8 dd fc ff ff       	call   c0012472 <VgaText::scrollScreen()>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001279c:	83 c4 08             	add    esp,0x8
c001279f:	5b                   	pop    ebx
c00127a0:	e9 d7 fb ff ff       	jmp    c001237c <VgaText::updateCursor()>
c00127a5:	83 f8 08             	cmp    eax,0x8
c00127a8:	75 25                	jne    c00127cf <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00127aa:	50                   	push   eax
c00127ab:	50                   	push   eax
c00127ac:	6a 01                	push   0x1
c00127ae:	53                   	push   ebx
c00127af:	e8 50 ff ff ff       	call   c0012704 <VgaText::decrementCursor(bool)>
c00127b4:	5a                   	pop    edx
c00127b5:	59                   	pop    ecx
c00127b6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00127b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00127bc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00127bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00127c2:	6a 20                	push   0x20
c00127c4:	53                   	push   ebx
c00127c5:	e8 4a fd ff ff       	call   c0012514 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00127ca:	83 c4 28             	add    esp,0x28
c00127cd:	5b                   	pop    ebx
c00127ce:	c3                   	ret    
c00127cf:	83 ec 08             	sub    esp,0x8
c00127d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00127d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00127d8:	51                   	push   ecx
c00127d9:	52                   	push   edx
c00127da:	50                   	push   eax
c00127db:	53                   	push   ebx
c00127dc:	e8 33 fd ff ff       	call   c0012514 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00127e1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00127e5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00127ed:	83 c4 28             	add    esp,0x28
c00127f0:	5b                   	pop    ebx
c00127f1:	e9 ba fe ff ff       	jmp    c00126b0 <VgaText::incrementCursor(bool)>

c00127f6 <VgaText::putchar(char)>:
c00127f6:	57                   	push   edi
c00127f7:	56                   	push   esi
c00127f8:	53                   	push   ebx
c00127f9:	83 ec 10             	sub    esp,0x10
c00127fc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012800:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012804:	89 f8                	mov    eax,edi
c0012806:	0f be c0             	movsx  eax,al
c0012809:	83 f8 5b             	cmp    eax,0x5b
c001280c:	75 18                	jne    c0012826 <VgaText::putchar(char)+0x30>
c001280e:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012812:	74 20                	je     c0012834 <VgaText::putchar(char)+0x3e>
c0012814:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001281a:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012821:	e9 c1 00 00 00       	jmp    c00128e7 <VgaText::putchar(char)+0xf1>
c0012826:	83 f8 1b             	cmp    eax,0x1b
c0012829:	75 09                	jne    c0012834 <VgaText::putchar(char)+0x3e>
c001282b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001282f:	e9 b3 00 00 00       	jmp    c00128e7 <VgaText::putchar(char)+0xf1>
c0012834:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012837:	84 c9                	test   cl,cl
c0012839:	0f 84 98 00 00 00    	je     c00128d7 <VgaText::putchar(char)+0xe1>
c001283f:	8d 77 c0             	lea    esi,[edi-0x40]
c0012842:	89 f2                	mov    edx,esi
c0012844:	80 fa 3e             	cmp    dl,0x3e
c0012847:	77 78                	ja     c00128c1 <VgaText::putchar(char)+0xcb>
c0012849:	83 f8 6d             	cmp    eax,0x6d
c001284c:	75 47                	jne    c0012895 <VgaText::putchar(char)+0x9f>
c001284e:	31 f6                	xor    esi,esi
c0012850:	31 d2                	xor    edx,edx
c0012852:	31 c0                	xor    eax,eax
c0012854:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012857:	7e 2d                	jle    c0012886 <VgaText::putchar(char)+0x90>
c0012859:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001285e:	83 fa 3b             	cmp    edx,0x3b
c0012861:	75 17                	jne    c001287a <VgaText::putchar(char)+0x84>
c0012863:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0012867:	50                   	push   eax
c0012868:	53                   	push   ebx
c0012869:	e8 24 fb ff ff       	call   c0012392 <VgaText::doANSI_SGR(int)>
c001286e:	59                   	pop    ecx
c001286f:	31 d2                	xor    edx,edx
c0012871:	5f                   	pop    edi
c0012872:	31 c0                	xor    eax,eax
c0012874:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012878:	eb 09                	jmp    c0012883 <VgaText::putchar(char)+0x8d>
c001287a:	6b c0 0a             	imul   eax,eax,0xa
c001287d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012881:	88 ca                	mov    dl,cl
c0012883:	46                   	inc    esi
c0012884:	eb ce                	jmp    c0012854 <VgaText::putchar(char)+0x5e>
c0012886:	84 d2                	test   dl,dl
c0012888:	74 2f                	je     c00128b9 <VgaText::putchar(char)+0xc3>
c001288a:	50                   	push   eax
c001288b:	53                   	push   ebx
c001288c:	e8 01 fb ff ff       	call   c0012392 <VgaText::doANSI_SGR(int)>
c0012891:	58                   	pop    eax
c0012892:	5a                   	pop    edx
c0012893:	eb 24                	jmp    c00128b9 <VgaText::putchar(char)+0xc3>
c0012895:	83 f8 4a             	cmp    eax,0x4a
c0012898:	75 1f                	jne    c00128b9 <VgaText::putchar(char)+0xc3>
c001289a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001289e:	75 19                	jne    c00128b9 <VgaText::putchar(char)+0xc3>
c00128a0:	83 ec 0c             	sub    esp,0xc
c00128a3:	53                   	push   ebx
c00128a4:	e8 89 fd ff ff       	call   c0012632 <VgaText::clearScreen()>
c00128a9:	83 c4 0c             	add    esp,0xc
c00128ac:	6a 00                	push   0x0
c00128ae:	6a 00                	push   0x0
c00128b0:	53                   	push   ebx
c00128b1:	e8 1a fd ff ff       	call   c00125d0 <VgaText::setCursor(int, int)>
c00128b6:	83 c4 10             	add    esp,0x10
c00128b9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00128bf:	eb 26                	jmp    c00128e7 <VgaText::putchar(char)+0xf1>
c00128c1:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00128c4:	83 f8 0e             	cmp    eax,0xe
c00128c7:	7f 1e                	jg     c00128e7 <VgaText::putchar(char)+0xf1>
c00128c9:	8d 48 01             	lea    ecx,[eax+0x1]
c00128cc:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00128cf:	89 f9                	mov    ecx,edi
c00128d1:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00128d5:	eb 10                	jmp    c00128e7 <VgaText::putchar(char)+0xf1>
c00128d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00128da:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00128dd:	50                   	push   eax
c00128de:	53                   	push   ebx
c00128df:	e8 42 fe ff ff       	call   c0012726 <VgaText::putchar(char, VgaColour, VgaColour)>
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	83 c4 10             	add    esp,0x10
c00128ea:	5b                   	pop    ebx
c00128eb:	5e                   	pop    esi
c00128ec:	5f                   	pop    edi
c00128ed:	c3                   	ret    

c00128ee <VgaText::putx(unsigned int)>:
c00128ee:	57                   	push   edi
c00128ef:	b9 11 00 00 00       	mov    ecx,0x11
c00128f4:	56                   	push   esi
c00128f5:	be 8f 31 02 c0       	mov    esi,0xc002318f
c00128fa:	53                   	push   ebx
c00128fb:	83 ec 20             	sub    esp,0x20
c00128fe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012902:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012906:	fc                   	cld    
c0012907:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012909:	be 08 00 00 00       	mov    esi,0x8
c001290e:	50                   	push   eax
c001290f:	50                   	push   eax
c0012910:	89 d8                	mov    eax,ebx
c0012912:	c1 e3 04             	shl    ebx,0x4
c0012915:	c1 e8 1c             	shr    eax,0x1c
c0012918:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001291d:	50                   	push   eax
c001291e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012922:	e8 cf fe ff ff       	call   c00127f6 <VgaText::putchar(char)>
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	4e                   	dec    esi
c001292b:	75 e1                	jne    c001290e <VgaText::putx(unsigned int)+0x20>
c001292d:	83 c4 20             	add    esp,0x20
c0012930:	5b                   	pop    ebx
c0012931:	5e                   	pop    esi
c0012932:	5f                   	pop    edi
c0012933:	c3                   	ret    

c0012934 <VgaText::puts(char const*)>:
c0012934:	53                   	push   ebx
c0012935:	83 ec 08             	sub    esp,0x8
c0012938:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001293c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001293f:	85 c0                	test   eax,eax
c0012941:	74 12                	je     c0012955 <VgaText::puts(char const*)+0x21>
c0012943:	43                   	inc    ebx
c0012944:	51                   	push   ecx
c0012945:	51                   	push   ecx
c0012946:	50                   	push   eax
c0012947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001294b:	e8 a6 fe ff ff       	call   c00127f6 <VgaText::putchar(char)>
c0012950:	83 c4 10             	add    esp,0x10
c0012953:	eb e7                	jmp    c001293c <VgaText::puts(char const*)+0x8>
c0012955:	83 c4 08             	add    esp,0x8
c0012958:	5b                   	pop    ebx
c0012959:	c3                   	ret    

c001295a <VgaText::write(unsigned long long, void*, int*)>:
c001295a:	55                   	push   ebp
c001295b:	57                   	push   edi
c001295c:	56                   	push   esi
c001295d:	53                   	push   ebx
c001295e:	83 ec 0c             	sub    esp,0xc
c0012961:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012965:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012969:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001296d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012974:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012977:	39 eb                	cmp    ebx,ebp
c0012979:	74 13                	je     c001298e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001297b:	43                   	inc    ebx
c001297c:	50                   	push   eax
c001297d:	50                   	push   eax
c001297e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012982:	50                   	push   eax
c0012983:	56                   	push   esi
c0012984:	e8 6d fe ff ff       	call   c00127f6 <VgaText::putchar(char)>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	eb e9                	jmp    c0012977 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001298e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012999:	89 38                	mov    DWORD PTR [eax],edi
c001299b:	83 c4 0c             	add    esp,0xc
c001299e:	31 c0                	xor    eax,eax
c00129a0:	5b                   	pop    ebx
c00129a1:	5e                   	pop    esi
c00129a2:	5f                   	pop    edi
c00129a3:	5d                   	pop    ebp
c00129a4:	c3                   	ret    
c00129a5:	90                   	nop

c00129a6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00129a6:	55                   	push   ebp
c00129a7:	57                   	push   edi
c00129a8:	56                   	push   esi
c00129a9:	53                   	push   ebx
c00129aa:	83 ec 1c             	sub    esp,0x1c
c00129ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00129b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00129b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129b9:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00129bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00129c0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00129c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129c8:	85 db                	test   ebx,ebx
c00129ca:	75 14                	jne    c00129e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00129cc:	c7 44 24 30 e9 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc00248e9
c00129d4:	83 c4 1c             	add    esp,0x1c
c00129d7:	5b                   	pop    ebx
c00129d8:	5e                   	pop    esi
c00129d9:	5f                   	pop    edi
c00129da:	5d                   	pop    ebp
c00129db:	e9 8e d6 ff ff       	jmp    c001006e <KePanic(char const*)>
c00129e0:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00129e7:	50                   	push   eax
c00129e8:	50                   	push   eax
c00129e9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00129ee:	50                   	push   eax
c00129ef:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00129f4:	50                   	push   eax
c00129f5:	e8 66 fa ff ff       	call   c0012460 <VgaText::combineColours(unsigned char, unsigned char)>
c00129fa:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00129fe:	83 c4 10             	add    esp,0x10
c0012a01:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012a04:	0f b6 e8             	movzx  ebp,al
c0012a07:	0f b7 c9             	movzx  ecx,cx
c0012a0a:	01 c9                	add    ecx,ecx
c0012a0c:	01 cb                	add    ebx,ecx
c0012a0e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a11:	85 c0                	test   eax,eax
c0012a13:	0f 84 ef 00 00 00    	je     c0012b08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012a19:	83 f8 0d             	cmp    eax,0xd
c0012a1c:	75 0c                	jne    c0012a2a <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012a1e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012a25:	e9 d8 00 00 00       	jmp    c0012b02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a2a:	83 f8 0a             	cmp    eax,0xa
c0012a2d:	75 44                	jne    c0012a73 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012a2f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012a32:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012a39:	8d 48 01             	lea    ecx,[eax+0x1]
c0012a3c:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012a3f:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012a42:	75 0f                	jne    c0012a53 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012a44:	83 ec 0c             	sub    esp,0xc
c0012a47:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012a4a:	57                   	push   edi
c0012a4b:	e8 22 fa ff ff       	call   c0012472 <VgaText::scrollScreen()>
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	83 ec 0c             	sub    esp,0xc
c0012a56:	57                   	push   edi
c0012a57:	e8 20 f9 ff ff       	call   c001237c <VgaText::updateCursor()>
c0012a5c:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a60:	83 c4 10             	add    esp,0x10
c0012a63:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012a66:	0f b7 db             	movzx  ebx,bx
c0012a69:	01 db                	add    ebx,ebx
c0012a6b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a6e:	e9 8f 00 00 00       	jmp    c0012b02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a73:	83 f8 08             	cmp    eax,0x8
c0012a76:	75 34                	jne    c0012aac <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012a78:	51                   	push   ecx
c0012a79:	51                   	push   ecx
c0012a7a:	6a 01                	push   0x1
c0012a7c:	57                   	push   edi
c0012a7d:	e8 82 fc ff ff       	call   c0012704 <VgaText::decrementCursor(bool)>
c0012a82:	5b                   	pop    ebx
c0012a83:	58                   	pop    eax
c0012a84:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012a87:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012a8a:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012a8d:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012a90:	6a 20                	push   0x20
c0012a92:	57                   	push   edi
c0012a93:	e8 7c fa ff ff       	call   c0012514 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012a98:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a9c:	83 c4 20             	add    esp,0x20
c0012a9f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012aa2:	0f b7 db             	movzx  ebx,bx
c0012aa5:	01 db                	add    ebx,ebx
c0012aa7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012aaa:	eb 56                	jmp    c0012b02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012aac:	52                   	push   edx
c0012aad:	52                   	push   edx
c0012aae:	55                   	push   ebp
c0012aaf:	50                   	push   eax
c0012ab0:	e8 4f fa ff ff       	call   c0012504 <VgaText::combineCharAndColour(char, unsigned char)>
c0012ab5:	83 c4 10             	add    esp,0x10
c0012ab8:	66 89 03             	mov    WORD PTR [ebx],ax
c0012abb:	39 3d d4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1d4,edi
c0012ac1:	75 1d                	jne    c0012ae0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012ac3:	83 ec 0c             	sub    esp,0xc
c0012ac6:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012ac9:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012acc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ad0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ad4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ad7:	50                   	push   eax
c0012ad8:	e8 d3 8f 00 00       	call   c001bab0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012add:	83 c4 20             	add    esp,0x20
c0012ae0:	83 c3 02             	add    ebx,0x2
c0012ae3:	50                   	push   eax
c0012ae4:	50                   	push   eax
c0012ae5:	6a 00                	push   0x0
c0012ae7:	57                   	push   edi
c0012ae8:	e8 c3 fb ff ff       	call   c00126b0 <VgaText::incrementCursor(bool)>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012af4:	75 0c                	jne    c0012b02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012af6:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012afa:	0f b7 db             	movzx  ebx,bx
c0012afd:	01 db                	add    ebx,ebx
c0012aff:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012b02:	46                   	inc    esi
c0012b03:	e9 06 ff ff ff       	jmp    c0012a0e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	57                   	push   edi
c0012b0c:	e8 6b f8 ff ff       	call   c001237c <VgaText::updateCursor()>
c0012b11:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012b18:	83 c4 2c             	add    esp,0x2c
c0012b1b:	5b                   	pop    ebx
c0012b1c:	5e                   	pop    esi
c0012b1d:	5f                   	pop    edi
c0012b1e:	5d                   	pop    ebp
c0012b1f:	c3                   	ret    

c0012b20 <VgaText::VgaText(char const*)>:
c0012b20:	56                   	push   esi
c0012b21:	53                   	push   ebx
c0012b22:	83 ec 04             	sub    esp,0x4
c0012b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b29:	83 ec 08             	sub    esp,0x8
c0012b2c:	6a 00                	push   0x0
c0012b2e:	50                   	push   eax
c0012b2f:	e8 d8 05 00 00       	call   c001310c <UnixFile::UnixFile(int)>
c0012b34:	83 c4 10             	add    esp,0x10
c0012b37:	ba 20 49 02 c0       	mov    edx,0xc0024920
c0012b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b40:	89 10                	mov    DWORD PTR [eax],edx
c0012b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b46:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b51:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b5c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b64:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b77:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b82:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b8d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012b94:	83 ec 0c             	sub    esp,0xc
c0012b97:	68 f9 48 02 c0       	push   0xc00248f9
c0012b9c:	e8 db 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012baf:	83 ec 0c             	sub    esp,0xc
c0012bb2:	6a 01                	push   0x1
c0012bb4:	e8 b4 09 00 00       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0012bb9:	83 c4 10             	add    esp,0x10
c0012bbc:	89 c2                	mov    edx,eax
c0012bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012bc5:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c0012bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bd2:	89 c6                	mov    esi,eax
c0012bd4:	e8 89 d6 ff ff       	call   c0010262 <Phys::allocatePage()>
c0012bd9:	68 05 0c 00 00       	push   0xc05
c0012bde:	56                   	push   esi
c0012bdf:	50                   	push   eax
c0012be0:	53                   	push   ebx
c0012be1:	e8 6a 10 00 00       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bf0:	83 ec 04             	sub    esp,0x4
c0012bf3:	68 a0 0f 00 00       	push   0xfa0
c0012bf8:	6a 00                	push   0x0
c0012bfa:	50                   	push   eax
c0012bfb:	e8 f0 d8 fe ff       	call   c00004f0 <memset>
c0012c00:	83 c4 10             	add    esp,0x10
c0012c03:	83 ec 04             	sub    esp,0x4
c0012c06:	6a 00                	push   0x0
c0012c08:	6a 07                	push   0x7
c0012c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c0e:	e8 13 f8 ff ff       	call   c0012426 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012c13:	83 c4 10             	add    esp,0x10
c0012c16:	83 ec 04             	sub    esp,0x4
c0012c19:	6a 00                	push   0x0
c0012c1b:	6a 00                	push   0x0
c0012c1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c21:	e8 aa f9 ff ff       	call   c00125d0 <VgaText::setCursor(int, int)>
c0012c26:	83 c4 10             	add    esp,0x10
c0012c29:	83 ec 0c             	sub    esp,0xc
c0012c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c30:	e8 fd f9 ff ff       	call   c0012632 <VgaText::clearScreen()>
c0012c35:	83 c4 10             	add    esp,0x10
c0012c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c44:	05 82 00 00 00       	add    eax,0x82
c0012c49:	83 ec 04             	sub    esp,0x4
c0012c4c:	68 80 00 00 00       	push   0x80
c0012c51:	6a 00                	push   0x0
c0012c53:	50                   	push   eax
c0012c54:	e8 97 d8 fe ff       	call   c00004f0 <memset>
c0012c59:	83 c4 10             	add    esp,0x10
c0012c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c60:	05 02 01 00 00       	add    eax,0x102
c0012c65:	83 ec 04             	sub    esp,0x4
c0012c68:	68 80 00 00 00       	push   0x80
c0012c6d:	6a 00                	push   0x0
c0012c6f:	50                   	push   eax
c0012c70:	e8 7b d8 fe ff       	call   c00004f0 <memset>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	90                   	nop
c0012c79:	83 c4 04             	add    esp,0x4
c0012c7c:	5b                   	pop    ebx
c0012c7d:	5e                   	pop    esi
c0012c7e:	c3                   	ret    
c0012c7f:	90                   	nop

c0012c80 <VgaText::receiveKey(unsigned char)>:
c0012c80:	55                   	push   ebp
c0012c81:	57                   	push   edi
c0012c82:	56                   	push   esi
c0012c83:	53                   	push   ebx
c0012c84:	83 ec 2c             	sub    esp,0x2c
c0012c87:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012c8b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012c8f:	89 ef                	mov    edi,ebp
c0012c91:	81 e7 ff 00 00 00    	and    edi,0xff
c0012c97:	0f 84 66 01 00 00    	je     c0012e03 <VgaText::receiveKey(unsigned char)+0x183>
c0012c9d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012ca3:	83 ff 08             	cmp    edi,0x8
c0012ca6:	75 73                	jne    c0012d1b <VgaText::receiveKey(unsigned char)+0x9b>
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	56                   	push   esi
c0012cac:	e8 bf d8 fe ff       	call   c0000570 <strlen>
c0012cb1:	83 c4 10             	add    esp,0x10
c0012cb4:	85 c0                	test   eax,eax
c0012cb6:	0f 84 02 01 00 00    	je     c0012dbe <VgaText::receiveKey(unsigned char)+0x13e>
c0012cbc:	50                   	push   eax
c0012cbd:	50                   	push   eax
c0012cbe:	6a 08                	push   0x8
c0012cc0:	53                   	push   ebx
c0012cc1:	e8 30 fb ff ff       	call   c00127f6 <VgaText::putchar(char)>
c0012cc6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cc9:	e8 a2 d8 fe ff       	call   c0000570 <strlen>
c0012cce:	83 c4 10             	add    esp,0x10
c0012cd1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012cd9:	83 fa 0d             	cmp    edx,0xd
c0012cdc:	89 d0                	mov    eax,edx
c0012cde:	0f 95 c1             	setne  cl
c0012ce1:	83 fa 1f             	cmp    edx,0x1f
c0012ce4:	0f 9e c2             	setle  dl
c0012ce7:	0f b6 d2             	movzx  edx,dl
c0012cea:	85 ca                	test   edx,ecx
c0012cec:	74 17                	je     c0012d05 <VgaText::receiveKey(unsigned char)+0x85>
c0012cee:	83 e8 08             	sub    eax,0x8
c0012cf1:	3c 02                	cmp    al,0x2
c0012cf3:	76 10                	jbe    c0012d05 <VgaText::receiveKey(unsigned char)+0x85>
c0012cf5:	55                   	push   ebp
c0012cf6:	55                   	push   ebp
c0012cf7:	68 0c 49 02 c0       	push   0xc002490c
c0012cfc:	53                   	push   ebx
c0012cfd:	e8 32 fc ff ff       	call   c0012934 <VgaText::puts(char const*)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	83 ec 0c             	sub    esp,0xc
c0012d08:	56                   	push   esi
c0012d09:	e8 62 d8 fe ff       	call   c0000570 <strlen>
c0012d0e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012d16:	e9 a0 00 00 00       	jmp    c0012dbb <VgaText::receiveKey(unsigned char)+0x13b>
c0012d1b:	83 ec 0c             	sub    esp,0xc
c0012d1e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012d24:	50                   	push   eax
c0012d25:	e8 46 d8 fe ff       	call   c0000570 <strlen>
c0012d2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d31:	e8 3a d8 fe ff       	call   c0000570 <strlen>
c0012d36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d3a:	83 c4 10             	add    esp,0x10
c0012d3d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012d41:	3d 80 00 00 00       	cmp    eax,0x80
c0012d46:	0f 87 b7 00 00 00    	ja     c0012e03 <VgaText::receiveKey(unsigned char)+0x183>
c0012d4c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012d4f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012d52:	3c 1e                	cmp    al,0x1e
c0012d54:	0f 96 c0             	setbe  al
c0012d57:	80 fa 01             	cmp    dl,0x1
c0012d5a:	0f 97 c2             	seta   dl
c0012d5d:	0f b6 d2             	movzx  edx,dl
c0012d60:	85 c2                	test   edx,eax
c0012d62:	74 2e                	je     c0012d92 <VgaText::receiveKey(unsigned char)+0x112>
c0012d64:	83 ff 0d             	cmp    edi,0xd
c0012d67:	74 29                	je     c0012d92 <VgaText::receiveKey(unsigned char)+0x112>
c0012d69:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012d6c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d6f:	68 12 49 02 c0       	push   0xc0024912
c0012d74:	53                   	push   ebx
c0012d75:	e8 2c fc ff ff       	call   c00129a6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012d7a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012d7d:	8d 45 40             	lea    eax,[ebp+0x40]
c0012d80:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d83:	0f b6 c0             	movzx  eax,al
c0012d86:	50                   	push   eax
c0012d87:	53                   	push   ebx
c0012d88:	e8 99 f9 ff ff       	call   c0012726 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012d8d:	83 c4 20             	add    esp,0x20
c0012d90:	eb 11                	jmp    c0012da3 <VgaText::receiveKey(unsigned char)+0x123>
c0012d92:	89 e8                	mov    eax,ebp
c0012d94:	51                   	push   ecx
c0012d95:	0f be c0             	movsx  eax,al
c0012d98:	51                   	push   ecx
c0012d99:	50                   	push   eax
c0012d9a:	53                   	push   ebx
c0012d9b:	e8 56 fa ff ff       	call   c00127f6 <VgaText::putchar(char)>
c0012da0:	83 c4 10             	add    esp,0x10
c0012da3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012da8:	89 e8                	mov    eax,ebp
c0012daa:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012dae:	52                   	push   edx
c0012daf:	52                   	push   edx
c0012db0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012db4:	50                   	push   eax
c0012db5:	56                   	push   esi
c0012db6:	e8 85 da fe ff       	call   c0000840 <strcat>
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012dc4:	b0 01                	mov    al,0x1
c0012dc6:	83 ff 1c             	cmp    edi,0x1c
c0012dc9:	77 0e                	ja     c0012dd9 <VgaText::receiveKey(unsigned char)+0x159>
c0012dcb:	b8 08 04 00 10       	mov    eax,0x10000408
c0012dd0:	89 f9                	mov    ecx,edi
c0012dd2:	d3 e8                	shr    eax,cl
c0012dd4:	f7 d0                	not    eax
c0012dd6:	83 e0 01             	and    eax,0x1
c0012dd9:	84 c0                	test   al,al
c0012ddb:	74 04                	je     c0012de1 <VgaText::receiveKey(unsigned char)+0x161>
c0012ddd:	84 d2                	test   dl,dl
c0012ddf:	74 22                	je     c0012e03 <VgaText::receiveKey(unsigned char)+0x183>
c0012de1:	81 c3 02 01 00 00    	add    ebx,0x102
c0012de7:	50                   	push   eax
c0012de8:	50                   	push   eax
c0012de9:	56                   	push   esi
c0012dea:	53                   	push   ebx
c0012deb:	e8 50 da fe ff       	call   c0000840 <strcat>
c0012df0:	83 c4 0c             	add    esp,0xc
c0012df3:	68 80 00 00 00       	push   0x80
c0012df8:	6a 00                	push   0x0
c0012dfa:	56                   	push   esi
c0012dfb:	e8 f0 d6 fe ff       	call   c00004f0 <memset>
c0012e00:	83 c4 10             	add    esp,0x10
c0012e03:	83 c4 2c             	add    esp,0x2c
c0012e06:	5b                   	pop    ebx
c0012e07:	5e                   	pop    esi
c0012e08:	5f                   	pop    edi
c0012e09:	5d                   	pop    ebp
c0012e0a:	c3                   	ret    
c0012e0b:	90                   	nop

c0012e0c <VgaText::doUpdate()>:
c0012e0c:	c3                   	ret    
c0012e0d:	66 90                	xchg   ax,ax
c0012e0f:	90                   	nop

c0012e10 <TSS::TSS()>:
c0012e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012e1b:	90                   	nop
c0012e1c:	c3                   	ret    
c0012e1d:	90                   	nop
c0012e1e:	66 90                	xchg   ax,ax

c0012e20 <TSS::setESP(unsigned long)>:
c0012e20:	55                   	push   ebp
c0012e21:	89 e5                	mov    ebp,esp
c0012e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e29:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e2f:	90                   	nop
c0012e30:	5d                   	pop    ebp
c0012e31:	c3                   	ret    
c0012e32:	66 90                	xchg   ax,ax

c0012e34 <TSS::flush()>:
c0012e34:	55                   	push   ebp
c0012e35:	89 e5                	mov    ebp,esp
c0012e37:	83 ec 10             	sub    esp,0x10
c0012e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e3f:	83 c8 03             	or     eax,0x3
c0012e42:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012e46:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012e4a:	66 89 d0             	mov    ax,dx
c0012e4d:	0f 00 d8             	ltr    ax
c0012e50:	90                   	nop
c0012e51:	c9                   	leave  
c0012e52:	c3                   	ret    
c0012e53:	90                   	nop

c0012e54 <TSS::setup(unsigned long, unsigned long)>:
c0012e54:	55                   	push   ebp
c0012e55:	89 e5                	mov    ebp,esp
c0012e57:	83 ec 18             	sub    esp,0x18
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	6a 68                	push   0x68
c0012e5f:	e8 fb ce ff ff       	call   c000fd5f <malloc>
c0012e64:	83 c4 10             	add    esp,0x10
c0012e67:	89 c2                	mov    edx,eax
c0012e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e75:	83 ec 08             	sub    esp,0x8
c0012e78:	50                   	push   eax
c0012e79:	68 34 49 02 c0       	push   0xc0024934
c0012e7e:	e8 f9 40 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e8c:	83 ec 04             	sub    esp,0x4
c0012e8f:	6a 68                	push   0x68
c0012e91:	6a 00                	push   0x0
c0012e93:	50                   	push   eax
c0012e94:	e8 57 d6 fe ff       	call   c00004f0 <memset>
c0012e99:	83 c4 10             	add    esp,0x10
c0012e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ea2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eae:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ebd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ec3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ec6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ecf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ed2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012edb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ede:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ee7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eea:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ef6:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f02:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f0e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012f11:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f1a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012f1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f26:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012f2d:	83 ec 0c             	sub    esp,0xc
c0012f30:	68 4b 49 02 c0       	push   0xc002494b
c0012f35:	e8 42 40 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012f3a:	83 c4 10             	add    esp,0x10
c0012f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f43:	0f 20 da             	mov    edx,cr3
c0012f46:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012f49:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012f4c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012f4f:	83 ec 0c             	sub    esp,0xc
c0012f52:	68 4e 49 02 c0       	push   0xc002494e
c0012f57:	e8 20 40 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012f5c:	83 c4 10             	add    esp,0x10
c0012f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f65:	83 ec 08             	sub    esp,0x8
c0012f68:	50                   	push   eax
c0012f69:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012f6c:	50                   	push   eax
c0012f6d:	e8 50 be ff ff       	call   c000edc2 <GDTEntry::setBase(unsigned int)>
c0012f72:	83 c4 10             	add    esp,0x10
c0012f75:	83 ec 08             	sub    esp,0x8
c0012f78:	6a 68                	push   0x68
c0012f7a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012f7d:	50                   	push   eax
c0012f7e:	e8 5b be ff ff       	call   c000edde <GDTEntry::setLimit(unsigned int)>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012f8a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012f8d:	83 e0 0f             	and    eax,0xf
c0012f90:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012f93:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012f96:	83 c8 40             	or     eax,0x40
c0012f99:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012f9c:	83 ec 0c             	sub    esp,0xc
c0012f9f:	68 51 49 02 c0       	push   0xc0024951
c0012fa4:	e8 d3 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0012fb1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012fb7:	83 ec 08             	sub    esp,0x8
c0012fba:	50                   	push   eax
c0012fbb:	68 54 49 02 c0       	push   0xc0024954
c0012fc0:	e8 b7 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0012fcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012fd3:	05 64 01 00 00       	add    eax,0x164
c0012fd8:	83 ec 04             	sub    esp,0x4
c0012fdb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012fde:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012fe1:	50                   	push   eax
c0012fe2:	e8 2b be ff ff       	call   c000ee12 <GDT::addEntry(GDTEntry)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	89 c2                	mov    edx,eax
c0012fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fef:	89 10                	mov    DWORD PTR [eax],edx
c0012ff1:	83 ec 0c             	sub    esp,0xc
c0012ff4:	68 69 49 02 c0       	push   0xc0024969
c0012ff9:	e8 7e 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012ffe:	83 c4 10             	add    esp,0x10
c0013001:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0013006:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001300c:	05 64 01 00 00       	add    eax,0x164
c0013011:	83 ec 0c             	sub    esp,0xc
c0013014:	50                   	push   eax
c0013015:	e8 22 be ff ff       	call   c000ee3c <GDT::flush()>
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	68 6c 49 02 c0       	push   0xc002496c
c0013025:	e8 52 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013030:	8b 00                	mov    eax,DWORD PTR [eax]
c0013032:	c9                   	leave  
c0013033:	c3                   	ret    

c0013034 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0013034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001303c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001303f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013044:	75 08                	jne    c001304e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0013046:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001304c:	eb 38                	jmp    c0013086 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001304e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013053:	75 17                	jne    c001306c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0013055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001305a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001305d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013063:	8b 10                	mov    edx,DWORD PTR [eax]
c0013065:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013069:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001306c:	89 c1                	mov    ecx,eax
c001306e:	83 e1 fd             	and    ecx,0xfffffffd
c0013071:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0013077:	74 cd                	je     c0013046 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013079:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001307e:	83 e0 ef             	and    eax,0xffffffef
c0013081:	83 f8 08             	cmp    eax,0x8
c0013084:	76 c0                	jbe    c0013046 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013086:	31 c0                	xor    eax,eax
c0013088:	c3                   	ret    
c0013089:	90                   	nop

c001308a <ReservedFilename::isAtty()>:
c001308a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001308e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013091:	31 c0                	xor    eax,eax
c0013093:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0013099:	74 09                	je     c00130a4 <ReservedFilename::isAtty()+0x1a>
c001309b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00130a1:	0f 94 c0             	sete   al
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop

c00130a6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00130a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00130ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00130b5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00130ba:	75 08                	jne    c00130c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00130bc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00130c2:	eb 3d                	jmp    c0013101 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00130c4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00130c9:	75 17                	jne    c00130e2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00130cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00130d3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00130d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00130db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130df:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00130e2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00130e7:	75 04                	jne    c00130ed <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00130e9:	89 0a                	mov    DWORD PTR [edx],ecx
c00130eb:	eb 14                	jmp    c0013101 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00130ed:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00130f2:	74 c8                	je     c00130bc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00130f4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00130f9:	83 e0 ef             	and    eax,0xffffffef
c00130fc:	83 f8 08             	cmp    eax,0x8
c00130ff:	76 bb                	jbe    c00130bc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013101:	31 c0                	xor    eax,eax
c0013103:	c3                   	ret    

c0013104 <UnixFile::getFileDescriptor()>:
c0013104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001310b:	c3                   	ret    

c001310c <UnixFile::UnixFile(int)>:
c001310c:	53                   	push   ebx
c001310d:	83 ec 28             	sub    esp,0x28
c0013110:	ba bc 49 02 c0       	mov    edx,0xc00249bc
c0013115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013119:	89 10                	mov    DWORD PTR [eax],edx
c001311b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0013123:	0f 8f 90 01 00 00    	jg     c00132b9 <UnixFile::UnixFile(int)+0x1ad>
c0013129:	a1 20 71 02 c0       	mov    eax,ds:0xc0027120
c001312e:	8d 50 01             	lea    edx,[eax+0x1]
c0013131:	89 15 20 71 02 c0    	mov    DWORD PTR ds:0xc0027120,edx
c0013137:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001313b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001313e:	83 ec 08             	sub    esp,0x8
c0013141:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013145:	68 58 f2 02 c0       	push   0xc002f258
c001314a:	e8 9f f3 00 00       	call   c00224ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	a0 54 f2 02 c0       	mov    al,ds:0xc002f254
c0013157:	83 f0 01             	xor    eax,0x1
c001315a:	0f b6 c0             	movzx  eax,al
c001315d:	85 c0                	test   eax,eax
c001315f:	0f 84 55 01 00 00    	je     c00132ba <UnixFile::UnixFile(int)+0x1ae>
c0013165:	c6 05 54 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f254,0x1
c001316c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001317b:	e8 df cb ff ff       	call   c000fd5f <malloc>
c0013180:	83 c4 10             	add    esp,0x10
c0013183:	89 c3                	mov    ebx,eax
c0013185:	83 ec 08             	sub    esp,0x8
c0013188:	68 03 ff ff 0f       	push   0xfffff03
c001318d:	53                   	push   ebx
c001318e:	e8 2d 01 00 00       	call   c00132c0 <ReservedFilename::ReservedFilename(int)>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	89 1d 4c f2 02 c0    	mov    DWORD PTR ds:0xc002f24c,ebx
c001319c:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ab:	e8 af cb ff ff       	call   c000fd5f <malloc>
c00131b0:	83 c4 10             	add    esp,0x10
c00131b3:	89 c3                	mov    ebx,eax
c00131b5:	83 ec 08             	sub    esp,0x8
c00131b8:	68 01 ff ff 0f       	push   0xfffff01
c00131bd:	53                   	push   ebx
c00131be:	e8 fd 00 00 00       	call   c00132c0 <ReservedFilename::ReservedFilename(int)>
c00131c3:	83 c4 10             	add    esp,0x10
c00131c6:	89 1d 50 f2 02 c0    	mov    DWORD PTR ds:0xc002f250,ebx
c00131cc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00131d4:	83 ec 0c             	sub    esp,0xc
c00131d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00131db:	e8 7f cb ff ff       	call   c000fd5f <malloc>
c00131e0:	83 c4 10             	add    esp,0x10
c00131e3:	89 c3                	mov    ebx,eax
c00131e5:	83 ec 08             	sub    esp,0x8
c00131e8:	68 00 ff ff 0f       	push   0xfffff00
c00131ed:	53                   	push   ebx
c00131ee:	e8 cd 00 00 00       	call   c00132c0 <ReservedFilename::ReservedFilename(int)>
c00131f3:	83 c4 10             	add    esp,0x10
c00131f6:	89 1d 44 f2 02 c0    	mov    DWORD PTR ds:0xc002f244,ebx
c00131fc:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001320b:	e8 4f cb ff ff       	call   c000fd5f <malloc>
c0013210:	83 c4 10             	add    esp,0x10
c0013213:	89 c3                	mov    ebx,eax
c0013215:	83 ec 08             	sub    esp,0x8
c0013218:	68 02 ff ff 0f       	push   0xfffff02
c001321d:	53                   	push   ebx
c001321e:	e8 9d 00 00 00       	call   c00132c0 <ReservedFilename::ReservedFilename(int)>
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	89 1d 48 f2 02 c0    	mov    DWORD PTR ds:0xc002f248,ebx
c001322c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013234:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013239:	7f 7f                	jg     c00132ba <UnixFile::UnixFile(int)+0x1ae>
c001323b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0013243:	83 ec 0c             	sub    esp,0xc
c0013246:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001324a:	e8 10 cb ff ff       	call   c000fd5f <malloc>
c001324f:	83 c4 10             	add    esp,0x10
c0013252:	89 c3                	mov    ebx,eax
c0013254:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013258:	05 10 ff ff 0f       	add    eax,0xfffff10
c001325d:	83 ec 08             	sub    esp,0x8
c0013260:	50                   	push   eax
c0013261:	53                   	push   ebx
c0013262:	e8 59 00 00 00       	call   c00132c0 <ReservedFilename::ReservedFilename(int)>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326e:	89 1c 85 20 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0de0],ebx
c0013275:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001327d:	83 ec 0c             	sub    esp,0xc
c0013280:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013284:	e8 d6 ca ff ff       	call   c000fd5f <malloc>
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	89 c3                	mov    ebx,eax
c001328e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013292:	05 20 ff ff 0f       	add    eax,0xfffff20
c0013297:	83 ec 08             	sub    esp,0x8
c001329a:	50                   	push   eax
c001329b:	53                   	push   ebx
c001329c:	e8 1f 00 00 00       	call   c00132c0 <ReservedFilename::ReservedFilename(int)>
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a8:	89 1c 85 e0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e20],ebx
c00132af:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00132b4:	e9 7b ff ff ff       	jmp    c0013234 <UnixFile::UnixFile(int)+0x128>
c00132b9:	90                   	nop
c00132ba:	83 c4 28             	add    esp,0x28
c00132bd:	5b                   	pop    ebx
c00132be:	c3                   	ret    
c00132bf:	90                   	nop

c00132c0 <ReservedFilename::ReservedFilename(int)>:
c00132c0:	83 ec 0c             	sub    esp,0xc
c00132c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c7:	83 ec 08             	sub    esp,0x8
c00132ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ce:	50                   	push   eax
c00132cf:	e8 38 fe ff ff       	call   c001310c <UnixFile::UnixFile(int)>
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	ba d8 49 02 c0       	mov    edx,0xc00249d8
c00132dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e0:	89 10                	mov    DWORD PTR [eax],edx
c00132e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00132ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00132ed:	90                   	nop
c00132ee:	83 c4 0c             	add    esp,0xc
c00132f1:	c3                   	ret    

c00132f2 <UnixFile::~UnixFile()>:
c00132f2:	83 ec 1c             	sub    esp,0x1c
c00132f5:	ba bc 49 02 c0       	mov    edx,0xc00249bc
c00132fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132fe:	89 10                	mov    DWORD PTR [eax],edx
c0013300:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013304:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013307:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001330c:	7f 76                	jg     c0013384 <UnixFile::~UnixFile()+0x92>
c001330e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013316:	83 ec 0c             	sub    esp,0xc
c0013319:	68 58 f2 02 c0       	push   0xc002f258
c001331e:	e8 9f f2 00 00       	call   c00225c2 <LinkedList<UnixFile>::getFirstElement()>
c0013323:	83 c4 10             	add    esp,0x10
c0013326:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001332a:	83 ec 0c             	sub    esp,0xc
c001332d:	68 58 f2 02 c0       	push   0xc002f258
c0013332:	e8 93 f2 00 00       	call   c00225ca <LinkedList<UnixFile>::removeFirst()>
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001333e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013342:	74 43                	je     c0013387 <UnixFile::~UnixFile()+0x95>
c0013344:	83 ec 08             	sub    esp,0x8
c0013347:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001334b:	68 58 f2 02 c0       	push   0xc002f258
c0013350:	e8 99 f1 00 00       	call   c00224ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013355:	83 c4 10             	add    esp,0x10
c0013358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001335c:	8d 50 01             	lea    edx,[eax+0x1]
c001335f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013363:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013368:	0f 94 c0             	sete   al
c001336b:	0f b6 c0             	movzx  eax,al
c001336e:	85 c0                	test   eax,eax
c0013370:	74 a4                	je     c0013316 <UnixFile::~UnixFile()+0x24>
c0013372:	83 ec 0c             	sub    esp,0xc
c0013375:	68 70 49 02 c0       	push   0xc0024970
c001337a:	e8 ef cc ff ff       	call   c001006e <KePanic(char const*)>
c001337f:	83 c4 10             	add    esp,0x10
c0013382:	eb 92                	jmp    c0013316 <UnixFile::~UnixFile()+0x24>
c0013384:	90                   	nop
c0013385:	eb 01                	jmp    c0013388 <UnixFile::~UnixFile()+0x96>
c0013387:	90                   	nop
c0013388:	90                   	nop
c0013389:	83 c4 1c             	add    esp,0x1c
c001338c:	c3                   	ret    
c001338d:	90                   	nop

c001338e <UnixFile::~UnixFile()>:
c001338e:	83 ec 0c             	sub    esp,0xc
c0013391:	83 ec 0c             	sub    esp,0xc
c0013394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013398:	e8 55 ff ff ff       	call   c00132f2 <UnixFile::~UnixFile()>
c001339d:	83 c4 10             	add    esp,0x10
c00133a0:	83 ec 08             	sub    esp,0x8
c00133a3:	6a 0c                	push   0xc
c00133a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a9:	e8 3b a0 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	83 c4 0c             	add    esp,0xc
c00133b4:	c3                   	ret    
c00133b5:	90                   	nop

c00133b6 <ReservedFilename::~ReservedFilename()>:
c00133b6:	83 ec 0c             	sub    esp,0xc
c00133b9:	ba d8 49 02 c0       	mov    edx,0xc00249d8
c00133be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c2:	89 10                	mov    DWORD PTR [eax],edx
c00133c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c8:	83 ec 0c             	sub    esp,0xc
c00133cb:	50                   	push   eax
c00133cc:	e8 21 ff ff ff       	call   c00132f2 <UnixFile::~UnixFile()>
c00133d1:	83 c4 10             	add    esp,0x10
c00133d4:	90                   	nop
c00133d5:	83 c4 0c             	add    esp,0xc
c00133d8:	c3                   	ret    
c00133d9:	90                   	nop

c00133da <ReservedFilename::~ReservedFilename()>:
c00133da:	83 ec 0c             	sub    esp,0xc
c00133dd:	83 ec 0c             	sub    esp,0xc
c00133e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e4:	e8 cd ff ff ff       	call   c00133b6 <ReservedFilename::~ReservedFilename()>
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	83 ec 08             	sub    esp,0x8
c00133ef:	6a 0c                	push   0xc
c00133f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133f5:	e8 ef 9f ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00133fa:	83 c4 10             	add    esp,0x10
c00133fd:	83 c4 0c             	add    esp,0xc
c0013400:	c3                   	ret    

c0013401 <KeGetFileFromDescriptor(int)>:
c0013401:	53                   	push   ebx
c0013402:	83 ec 10             	sub    esp,0x10
c0013405:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013409:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001340f:	53                   	push   ebx
c0013410:	68 90 49 02 c0       	push   0xc0024990
c0013415:	e8 62 3b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013423:	7f 30                	jg     c0013455 <KeGetFileFromDescriptor(int)+0x54>
c0013425:	83 ec 0c             	sub    esp,0xc
c0013428:	68 58 f2 02 c0       	push   0xc002f258
c001342d:	e8 90 f1 00 00       	call   c00225c2 <LinkedList<UnixFile>::getFirstElement()>
c0013432:	83 c4 10             	add    esp,0x10
c0013435:	8d 50 ff             	lea    edx,[eax-0x1]
c0013438:	83 fa fd             	cmp    edx,0xfffffffd
c001343b:	76 04                	jbe    c0013441 <KeGetFileFromDescriptor(int)+0x40>
c001343d:	31 c0                	xor    eax,eax
c001343f:	eb 6e                	jmp    c00134af <KeGetFileFromDescriptor(int)+0xae>
c0013441:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013444:	74 69                	je     c00134af <KeGetFileFromDescriptor(int)+0xae>
c0013446:	52                   	push   edx
c0013447:	52                   	push   edx
c0013448:	50                   	push   eax
c0013449:	68 58 f2 02 c0       	push   0xc002f258
c001344e:	e8 19 f2 00 00       	call   c002266c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013453:	eb dd                	jmp    c0013432 <KeGetFileFromDescriptor(int)+0x31>
c0013455:	a1 4c f2 02 c0       	mov    eax,ds:0xc002f24c
c001345a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013460:	74 4d                	je     c00134af <KeGetFileFromDescriptor(int)+0xae>
c0013462:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c0013467:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001346d:	74 40                	je     c00134af <KeGetFileFromDescriptor(int)+0xae>
c001346f:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0013474:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001347a:	74 33                	je     c00134af <KeGetFileFromDescriptor(int)+0xae>
c001347c:	a1 44 f2 02 c0       	mov    eax,ds:0xc002f244
c0013481:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013487:	74 26                	je     c00134af <KeGetFileFromDescriptor(int)+0xae>
c0013489:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001348f:	83 f8 08             	cmp    eax,0x8
c0013492:	77 09                	ja     c001349d <KeGetFileFromDescriptor(int)+0x9c>
c0013494:	8b 04 85 20 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0de0]
c001349b:	eb 12                	jmp    c00134af <KeGetFileFromDescriptor(int)+0xae>
c001349d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00134a3:	83 fb 08             	cmp    ebx,0x8
c00134a6:	77 95                	ja     c001343d <KeGetFileFromDescriptor(int)+0x3c>
c00134a8:	8b 04 9d e0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e20]
c00134af:	83 c4 08             	add    esp,0x8
c00134b2:	5b                   	pop    ebx
c00134b3:	c3                   	ret    

c00134b4 <__static_initialization_and_destruction_0(int, int)>:
c00134b4:	83 ec 0c             	sub    esp,0xc
c00134b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00134bc:	75 34                	jne    c00134f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00134be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00134c6:	75 2a                	jne    c00134f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00134c8:	83 ec 0c             	sub    esp,0xc
c00134cb:	68 58 f2 02 c0       	push   0xc002f258
c00134d0:	e8 d7 ef 00 00       	call   c00224ac <LinkedList<UnixFile>::LinkedList()>
c00134d5:	83 c4 10             	add    esp,0x10
c00134d8:	83 ec 04             	sub    esp,0x4
c00134db:	68 7c 69 02 c0       	push   0xc002697c
c00134e0:	68 58 f2 02 c0       	push   0xc002f258
c00134e5:	68 aa 24 02 c0       	push   0xc00224aa
c00134ea:	e8 aa 9e ff ff       	call   c000d399 <__cxa_atexit>
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	90                   	nop
c00134f3:	83 c4 0c             	add    esp,0xc
c00134f6:	c3                   	ret    

c00134f7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00134f7:	83 ec 0c             	sub    esp,0xc
c00134fa:	83 ec 08             	sub    esp,0x8
c00134fd:	68 ff ff 00 00       	push   0xffff
c0013502:	6a 01                	push   0x1
c0013504:	e8 ab ff ff ff       	call   c00134b4 <__static_initialization_and_destruction_0(int, int)>
c0013509:	83 c4 10             	add    esp,0x10
c001350c:	83 c4 0c             	add    esp,0xc
c001350f:	c3                   	ret    

c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013510:	53                   	push   ebx
c0013511:	8b 15 28 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027128
c0013517:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001351b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001351f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013525:	89 d8                	mov    eax,ebx
c0013527:	d1 e8                	shr    eax,1
c0013529:	01 d0                	add    eax,edx
c001352b:	80 e3 01             	and    bl,0x1
c001352e:	8a 10                	mov    dl,BYTE PTR [eax]
c0013530:	75 09                	jne    c001353b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013532:	83 e2 f0             	and    edx,0xfffffff0
c0013535:	09 ca                	or     edx,ecx
c0013537:	88 10                	mov    BYTE PTR [eax],dl
c0013539:	5b                   	pop    ebx
c001353a:	c3                   	ret    
c001353b:	83 e2 0f             	and    edx,0xf
c001353e:	0f b6 c9             	movzx  ecx,cl
c0013541:	c1 e1 04             	shl    ecx,0x4
c0013544:	09 ca                	or     edx,ecx
c0013546:	88 10                	mov    BYTE PTR [eax],dl
c0013548:	5b                   	pop    ebx
c0013549:	c3                   	ret    

c001354a <Virt::getPageState(unsigned long)>:
c001354a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001354e:	8b 0d 28 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027128
c0013554:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001355a:	89 d0                	mov    eax,edx
c001355c:	d1 e8                	shr    eax,1
c001355e:	80 e2 01             	and    dl,0x1
c0013561:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013564:	74 03                	je     c0013569 <Virt::getPageState(unsigned long)+0x1f>
c0013566:	c1 e8 04             	shr    eax,0x4
c0013569:	83 e0 0f             	and    eax,0xf
c001356c:	c3                   	ret    

c001356d <Virt::allocateKernelVirtualPages(int)>:
c001356d:	55                   	push   ebp
c001356e:	31 ed                	xor    ebp,ebp
c0013570:	57                   	push   edi
c0013571:	31 ff                	xor    edi,edi
c0013573:	56                   	push   esi
c0013574:	53                   	push   ebx
c0013575:	31 db                	xor    ebx,ebx
c0013577:	83 ec 0c             	sub    esp,0xc
c001357a:	8b 35 24 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027124
c0013580:	56                   	push   esi
c0013581:	e8 c4 ff ff ff       	call   c001354a <Virt::getPageState(unsigned long)>
c0013586:	5a                   	pop    edx
c0013587:	84 c0                	test   al,al
c0013589:	75 41                	jne    c00135cc <Virt::allocateKernelVirtualPages(int)+0x5f>
c001358b:	85 db                	test   ebx,ebx
c001358d:	75 02                	jne    c0013591 <Virt::allocateKernelVirtualPages(int)+0x24>
c001358f:	89 f5                	mov    ebp,esi
c0013591:	83 c3 01             	add    ebx,0x1
c0013594:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013598:	74 5f                	je     c00135f9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c001359a:	83 c6 01             	add    esi,0x1
c001359d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00135a3:	76 34                	jbe    c00135d9 <Virt::allocateKernelVirtualPages(int)+0x6c>
c00135a5:	c7 05 24 71 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027124,0xc8000
c00135af:	f7 c7 01 00 00 00    	test   edi,0x1
c00135b5:	75 2a                	jne    c00135e1 <Virt::allocateKernelVirtualPages(int)+0x74>
c00135b7:	be 00 80 0c 00       	mov    esi,0xc8000
c00135bc:	bf 01 00 00 00       	mov    edi,0x1
c00135c1:	56                   	push   esi
c00135c2:	e8 83 ff ff ff       	call   c001354a <Virt::getPageState(unsigned long)>
c00135c7:	5a                   	pop    edx
c00135c8:	84 c0                	test   al,al
c00135ca:	74 bf                	je     c001358b <Virt::allocateKernelVirtualPages(int)+0x1e>
c00135cc:	31 db                	xor    ebx,ebx
c00135ce:	83 c6 01             	add    esi,0x1
c00135d1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00135d7:	77 cc                	ja     c00135a5 <Virt::allocateKernelVirtualPages(int)+0x38>
c00135d9:	89 35 24 71 02 c0    	mov    DWORD PTR ds:0xc0027124,esi
c00135df:	eb 9f                	jmp    c0013580 <Virt::allocateKernelVirtualPages(int)+0x13>
c00135e1:	83 ec 0c             	sub    esp,0xc
c00135e4:	68 ec 49 02 c0       	push   0xc00249ec
c00135e9:	e8 80 ca ff ff       	call   c001006e <KePanic(char const*)>
c00135ee:	8b 35 24 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027124
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	eb 87                	jmp    c0013580 <Virt::allocateKernelVirtualPages(int)+0x13>
c00135f9:	89 2d 24 71 02 c0    	mov    DWORD PTR ds:0xc0027124,ebp
c00135ff:	83 fb 01             	cmp    ebx,0x1
c0013602:	74 6f                	je     c0013673 <Virt::allocateKernelVirtualPages(int)+0x106>
c0013604:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013608:	85 c9                	test   ecx,ecx
c001360a:	74 49                	je     c0013655 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001360c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013610:	89 e8                	mov    eax,ebp
c0013612:	31 db                	xor    ebx,ebx
c0013614:	8d 79 ff             	lea    edi,[ecx-0x1]
c0013617:	eb 18                	jmp    c0013631 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013619:	6a 01                	push   0x1
c001361b:	83 c3 01             	add    ebx,0x1
c001361e:	50                   	push   eax
c001361f:	e8 ec fe ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013624:	58                   	pop    eax
c0013625:	5a                   	pop    edx
c0013626:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001362a:	74 29                	je     c0013655 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001362c:	a1 24 71 02 c0       	mov    eax,ds:0xc0027124
c0013631:	8d 50 01             	lea    edx,[eax+0x1]
c0013634:	85 db                	test   ebx,ebx
c0013636:	89 15 24 71 02 c0    	mov    DWORD PTR ds:0xc0027124,edx
c001363c:	74 24                	je     c0013662 <Virt::allocateKernelVirtualPages(int)+0xf5>
c001363e:	39 df                	cmp    edi,ebx
c0013640:	75 d7                	jne    c0013619 <Virt::allocateKernelVirtualPages(int)+0xac>
c0013642:	6a 03                	push   0x3
c0013644:	83 c3 01             	add    ebx,0x1
c0013647:	50                   	push   eax
c0013648:	e8 c3 fe ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001364d:	59                   	pop    ecx
c001364e:	5e                   	pop    esi
c001364f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013653:	75 d7                	jne    c001362c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013655:	83 c4 0c             	add    esp,0xc
c0013658:	89 e8                	mov    eax,ebp
c001365a:	5b                   	pop    ebx
c001365b:	c1 e0 0c             	shl    eax,0xc
c001365e:	5e                   	pop    esi
c001365f:	5f                   	pop    edi
c0013660:	5d                   	pop    ebp
c0013661:	c3                   	ret    
c0013662:	6a 02                	push   0x2
c0013664:	bb 01 00 00 00       	mov    ebx,0x1
c0013669:	50                   	push   eax
c001366a:	e8 a1 fe ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001366f:	58                   	pop    eax
c0013670:	5a                   	pop    edx
c0013671:	eb b9                	jmp    c001362c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013673:	6a 04                	push   0x4
c0013675:	8d 45 01             	lea    eax,[ebp+0x1]
c0013678:	55                   	push   ebp
c0013679:	a3 24 71 02 c0       	mov    ds:0xc0027124,eax
c001367e:	e8 8d fe ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013683:	5b                   	pop    ebx
c0013684:	89 e8                	mov    eax,ebp
c0013686:	5e                   	pop    esi
c0013687:	c1 e0 0c             	shl    eax,0xc
c001368a:	83 c4 0c             	add    esp,0xc
c001368d:	5b                   	pop    ebx
c001368e:	5e                   	pop    esi
c001368f:	5f                   	pop    edi
c0013690:	5d                   	pop    ebp
c0013691:	c3                   	ret    

c0013692 <Virt::freeSwapfilePage(unsigned long)>:
c0013692:	53                   	push   ebx
c0013693:	8b 15 6c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f26c
c0013699:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001369d:	b8 01 00 00 00       	mov    eax,0x1
c00136a2:	89 cb                	mov    ebx,ecx
c00136a4:	d3 e0                	shl    eax,cl
c00136a6:	c1 eb 05             	shr    ebx,0x5
c00136a9:	f7 d0                	not    eax
c00136ab:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00136ae:	21 c1                	and    ecx,eax
c00136b0:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00136b3:	5b                   	pop    ebx
c00136b4:	c3                   	ret    

c00136b5 <Virt::swapIDToSector(unsigned long)>:
c00136b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136b9:	8b 15 2c 71 02 c0    	mov    edx,DWORD PTR ds:0xc002712c
c00136bf:	8b 0d 34 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027134
c00136c5:	0f af c2             	imul   eax,edx
c00136c8:	01 c8                	add    eax,ecx
c00136ca:	c3                   	ret    

c00136cb <Virt::allocateSwapfilePage()>:
c00136cb:	55                   	push   ebp
c00136cc:	31 d2                	xor    edx,edx
c00136ce:	57                   	push   edi
c00136cf:	56                   	push   esi
c00136d0:	53                   	push   ebx
c00136d1:	83 ec 0c             	sub    esp,0xc
c00136d4:	8b 0d 2c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002712c
c00136da:	a1 30 71 02 c0       	mov    eax,ds:0xc0027130
c00136df:	f7 f1                	div    ecx
c00136e1:	39 0d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ecx
c00136e7:	72 2f                	jb     c0013718 <Virt::allocateSwapfilePage()+0x4d>
c00136e9:	8b 35 6c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f26c
c00136ef:	8b 16                	mov    edx,DWORD PTR [esi]
c00136f1:	f6 c2 01             	test   dl,0x1
c00136f4:	74 3e                	je     c0013734 <Virt::allocateSwapfilePage()+0x69>
c00136f6:	31 c9                	xor    ecx,ecx
c00136f8:	bf 01 00 00 00       	mov    edi,0x1
c00136fd:	eb 12                	jmp    c0013711 <Virt::allocateSwapfilePage()+0x46>
c00136ff:	89 fd                	mov    ebp,edi
c0013701:	89 ca                	mov    edx,ecx
c0013703:	d3 e5                	shl    ebp,cl
c0013705:	c1 ea 05             	shr    edx,0x5
c0013708:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001370b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001370d:	85 ea                	test   edx,ebp
c001370f:	74 2c                	je     c001373d <Virt::allocateSwapfilePage()+0x72>
c0013711:	83 c1 01             	add    ecx,0x1
c0013714:	39 c8                	cmp    eax,ecx
c0013716:	77 e7                	ja     c00136ff <Virt::allocateSwapfilePage()+0x34>
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	68 6f 4f 02 c0       	push   0xc0024f6f
c0013720:	e8 49 c9 ff ff       	call   c001006e <KePanic(char const*)>
c0013725:	83 c4 10             	add    esp,0x10
c0013728:	31 c9                	xor    ecx,ecx
c001372a:	83 c4 0c             	add    esp,0xc
c001372d:	89 c8                	mov    eax,ecx
c001372f:	5b                   	pop    ebx
c0013730:	5e                   	pop    esi
c0013731:	5f                   	pop    edi
c0013732:	5d                   	pop    ebp
c0013733:	c3                   	ret    
c0013734:	89 f3                	mov    ebx,esi
c0013736:	bd 01 00 00 00       	mov    ebp,0x1
c001373b:	31 c9                	xor    ecx,ecx
c001373d:	09 ea                	or     edx,ebp
c001373f:	89 c8                	mov    eax,ecx
c0013741:	89 13                	mov    DWORD PTR [ebx],edx
c0013743:	83 c4 0c             	add    esp,0xc
c0013746:	5b                   	pop    ebx
c0013747:	5e                   	pop    esi
c0013748:	5f                   	pop    edi
c0013749:	5d                   	pop    ebp
c001374a:	c3                   	ret    

c001374b <Virt::virtualMemorySetup()>:
c001374b:	53                   	push   ebx
c001374c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013751:	6a 0f                	push   0xf
c0013753:	53                   	push   ebx
c0013754:	83 c3 01             	add    ebx,0x1
c0013757:	e8 b4 fd ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001375c:	58                   	pop    eax
c001375d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013763:	5a                   	pop    edx
c0013764:	75 eb                	jne    c0013751 <Virt::virtualMemorySetup()+0x6>
c0013766:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001376b:	6a 00                	push   0x0
c001376d:	53                   	push   ebx
c001376e:	83 c3 01             	add    ebx,0x1
c0013771:	e8 9a fd ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013776:	59                   	pop    ecx
c0013777:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001377d:	58                   	pop    eax
c001377e:	75 eb                	jne    c001376b <Virt::virtualMemorySetup()+0x20>
c0013780:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013785:	6a 0f                	push   0xf
c0013787:	53                   	push   ebx
c0013788:	83 c3 01             	add    ebx,0x1
c001378b:	e8 80 fd ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013790:	58                   	pop    eax
c0013791:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013797:	5a                   	pop    edx
c0013798:	75 eb                	jne    c0013785 <Virt::virtualMemorySetup()+0x3a>
c001379a:	5b                   	pop    ebx
c001379b:	c3                   	ret    

c001379c <Virt::setupPageSwapping(int)>:
c001379c:	53                   	push   ebx
c001379d:	83 ec 0c             	sub    esp,0xc
c00137a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137a4:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c00137a9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00137af:	8b 10                	mov    edx,DWORD PTR [eax]
c00137b1:	53                   	push   ebx
c00137b2:	c1 e3 0b             	shl    ebx,0xb
c00137b5:	68 86 4f 02 c0       	push   0xc0024f86
c00137ba:	50                   	push   eax
c00137bb:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00137be:	89 1d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,ebx
c00137c4:	c6 05 38 71 02 c0 43 	mov    BYTE PTR ds:0xc0027138,0x43
c00137cb:	c1 eb 08             	shr    ebx,0x8
c00137ce:	a3 34 71 02 c0       	mov    ds:0xc0027134,eax
c00137d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137d6:	c7 05 2c 71 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002712c,0x8
c00137e0:	e8 7a c5 ff ff       	call   c000fd5f <malloc>
c00137e5:	83 c4 0c             	add    esp,0xc
c00137e8:	89 c1                	mov    ecx,eax
c00137ea:	a3 6c f2 02 c0       	mov    ds:0xc002f26c,eax
c00137ef:	31 d2                	xor    edx,edx
c00137f1:	a1 30 71 02 c0       	mov    eax,ds:0xc0027130
c00137f6:	f7 35 2c 71 02 c0    	div    DWORD PTR ds:0xc002712c
c00137fc:	c1 e8 05             	shr    eax,0x5
c00137ff:	50                   	push   eax
c0013800:	6a 00                	push   0x0
c0013802:	51                   	push   ecx
c0013803:	e8 e8 cc fe ff       	call   c00004f0 <memset>
c0013808:	83 c4 18             	add    esp,0x18
c001380b:	5b                   	pop    ebx
c001380c:	c3                   	ret    
c001380d:	90                   	nop

c001380e <VAS::setCPUSpecific(unsigned long)>:
c001380e:	c3                   	ret    
c001380f:	90                   	nop

c0013810 <VAS::VAS(VAS*)>:
c0013810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013814:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001381b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013826:	90                   	nop
c0013827:	c3                   	ret    

c0013828 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001382c:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013831:	89 c2                	mov    edx,eax
c0013833:	c1 e8 0a             	shr    eax,0xa
c0013836:	c1 ea 16             	shr    edx,0x16
c0013839:	83 f9 01             	cmp    ecx,0x1
c001383c:	19 c9                	sbb    ecx,ecx
c001383e:	c1 e2 0c             	shl    edx,0xc
c0013841:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013847:	25 fc 0f 00 00       	and    eax,0xffc
c001384c:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013853:	01 d0                	add    eax,edx
c0013855:	c3                   	ret    

c0013856 <VAS::getPageTableEntry(unsigned long)>:
c0013856:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001385a:	89 ca                	mov    edx,ecx
c001385c:	c1 e9 0a             	shr    ecx,0xa
c001385f:	c1 ea 16             	shr    edx,0x16
c0013862:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013868:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001386e:	c1 e0 0c             	shl    eax,0xc
c0013871:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013874:	c3                   	ret    

c0013875 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013875:	55                   	push   ebp
c0013876:	57                   	push   edi
c0013877:	bf 01 00 00 00       	mov    edi,0x1
c001387c:	56                   	push   esi
c001387d:	53                   	push   ebx
c001387e:	83 ec 1c             	sub    esp,0x1c
c0013881:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013885:	c1 ee 0c             	shr    esi,0xc
c0013888:	eb 48                	jmp    c00138d2 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001388a:	83 ec 08             	sub    esp,0x8
c001388d:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c0013892:	55                   	push   ebp
c0013893:	50                   	push   eax
c0013894:	e8 bd ff ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c0013899:	83 c4 10             	add    esp,0x10
c001389c:	8b 10                	mov    edx,DWORD PTR [eax]
c001389e:	f6 c6 04             	test   dh,0x4
c00138a1:	75 70                	jne    c0013913 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00138a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138a9:	83 fb 04             	cmp    ebx,0x4
c00138ac:	0f 84 8a 00 00 00    	je     c001393c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00138b2:	83 fb 02             	cmp    ebx,0x2
c00138b5:	0f 84 9a 00 00 00    	je     c0013955 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00138bb:	83 fb 03             	cmp    ebx,0x3
c00138be:	0f 84 be 00 00 00    	je     c0013982 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00138c4:	83 fb 01             	cmp    ebx,0x1
c00138c7:	0f 84 a2 00 00 00    	je     c001396f <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00138cd:	83 c6 01             	add    esi,0x1
c00138d0:	31 ff                	xor    edi,edi
c00138d2:	56                   	push   esi
c00138d3:	89 f5                	mov    ebp,esi
c00138d5:	e8 70 fc ff ff       	call   c001354a <Virt::getPageState(unsigned long)>
c00138da:	c1 e5 0c             	shl    ebp,0xc
c00138dd:	0f b6 d8             	movzx  ebx,al
c00138e0:	5a                   	pop    edx
c00138e1:	85 db                	test   ebx,ebx
c00138e3:	75 a5                	jne    c001388a <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00138e5:	83 ec 0c             	sub    esp,0xc
c00138e8:	68 9d 4f 02 c0       	push   0xc0024f9d
c00138ed:	e8 7c c7 ff ff       	call   c001006e <KePanic(char const*)>
c00138f2:	5a                   	pop    edx
c00138f3:	59                   	pop    ecx
c00138f4:	55                   	push   ebp
c00138f5:	8b 2d 70 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f270
c00138fb:	55                   	push   ebp
c00138fc:	e8 55 ff ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c0013901:	83 c4 10             	add    esp,0x10
c0013904:	8b 10                	mov    edx,DWORD PTR [eax]
c0013906:	f6 c6 04             	test   dh,0x4
c0013909:	75 08                	jne    c0013913 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001390b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013911:	eb ba                	jmp    c00138cd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013917:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001391d:	83 ec 0c             	sub    esp,0xc
c0013920:	52                   	push   edx
c0013921:	e8 d3 c8 ff ff       	call   c00101f9 <Phys::freePage(unsigned long)>
c0013926:	83 c4 10             	add    esp,0x10
c0013929:	83 fb 04             	cmp    ebx,0x4
c001392c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013930:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013936:	0f 85 76 ff ff ff    	jne    c00138b2 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001393c:	83 e7 01             	and    edi,0x1
c001393f:	75 46                	jne    c0013987 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013941:	c7 44 24 30 0c 4a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024a0c
c0013949:	83 c4 1c             	add    esp,0x1c
c001394c:	5b                   	pop    ebx
c001394d:	5e                   	pop    esi
c001394e:	5f                   	pop    edi
c001394f:	5d                   	pop    ebp
c0013950:	e9 19 c7 ff ff       	jmp    c001006e <KePanic(char const*)>
c0013955:	83 e7 01             	and    edi,0x1
c0013958:	75 15                	jne    c001396f <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001395a:	83 ec 0c             	sub    esp,0xc
c001395d:	68 b9 4f 02 c0       	push   0xc0024fb9
c0013962:	e8 07 c7 ff ff       	call   c001006e <KePanic(char const*)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	e9 5e ff ff ff       	jmp    c00138cd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001396f:	83 ec 08             	sub    esp,0x8
c0013972:	6a 00                	push   0x0
c0013974:	56                   	push   esi
c0013975:	e8 96 fb ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001397a:	83 c4 10             	add    esp,0x10
c001397d:	e9 4b ff ff ff       	jmp    c00138cd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013982:	83 e7 01             	and    edi,0x1
c0013985:	75 16                	jne    c001399d <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013987:	83 ec 08             	sub    esp,0x8
c001398a:	6a 00                	push   0x0
c001398c:	56                   	push   esi
c001398d:	e8 7e fb ff ff       	call   c0013510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013992:	83 c4 10             	add    esp,0x10
c0013995:	83 c4 1c             	add    esp,0x1c
c0013998:	5b                   	pop    ebx
c0013999:	5e                   	pop    esi
c001399a:	5f                   	pop    edi
c001399b:	5d                   	pop    ebp
c001399c:	c3                   	ret    
c001399d:	c7 44 24 30 d5 4f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024fd5
c00139a5:	83 c4 1c             	add    esp,0x1c
c00139a8:	5b                   	pop    ebx
c00139a9:	5e                   	pop    esi
c00139aa:	5f                   	pop    edi
c00139ab:	5d                   	pop    ebp
c00139ac:	e9 bd c6 ff ff       	jmp    c001006e <KePanic(char const*)>
c00139b1:	90                   	nop

c00139b2 <VAS::freeAllocatedPages(unsigned long)>:
c00139b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00139ba:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00139be:	74 09                	je     c00139c9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00139c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00139c4:	e9 ac fe ff ff       	jmp    c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c00139c9:	c7 44 24 04 30 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a30
c00139d1:	e9 a6 35 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c00139d6 <VAS::virtualToPhysical(unsigned long)>:
c00139d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139da:	50                   	push   eax
c00139db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00139df:	52                   	push   edx
c00139e0:	e8 71 fe ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c00139e5:	59                   	pop    ecx
c00139e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00139e8:	5a                   	pop    edx
c00139e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139ee:	c3                   	ret    
c00139ef:	90                   	nop

c00139f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00139f0:	55                   	push   ebp
c00139f1:	57                   	push   edi
c00139f2:	56                   	push   esi
c00139f3:	53                   	push   ebx
c00139f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139f8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00139fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a00:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a04:	85 db                	test   ebx,ebx
c0013a06:	7e 24                	jle    c0013a2c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013a08:	c1 e3 0c             	shl    ebx,0xc
c0013a0b:	01 f3                	add    ebx,esi
c0013a0d:	56                   	push   esi
c0013a0e:	81 c6 00 10 00 00    	add    esi,0x1000
c0013a14:	55                   	push   ebp
c0013a15:	e8 3c fe ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c0013a1a:	5a                   	pop    edx
c0013a1b:	59                   	pop    ecx
c0013a1c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013a22:	21 f9                	and    ecx,edi
c0013a24:	09 d1                	or     ecx,edx
c0013a26:	39 f3                	cmp    ebx,esi
c0013a28:	89 08                	mov    DWORD PTR [eax],ecx
c0013a2a:	75 e1                	jne    c0013a0d <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013a2c:	5b                   	pop    ebx
c0013a2d:	5e                   	pop    esi
c0013a2e:	5f                   	pop    edi
c0013a2f:	5d                   	pop    ebp
c0013a30:	c3                   	ret    
c0013a31:	90                   	nop

c0013a32 <VAS::VAS()>:
c0013a32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a4c:	a3 70 f2 02 c0       	mov    ds:0xc002f270,eax
c0013a51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a55:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013a59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a5d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a64:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013a6b:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c0013a70:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013a75:	29 c2                	sub    edx,eax
c0013a77:	89 d0                	mov    eax,edx
c0013a79:	05 ff 0f 00 00       	add    eax,0xfff
c0013a7e:	c1 e8 0c             	shr    eax,0xc
c0013a81:	89 c2                	mov    edx,eax
c0013a83:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013a88:	6a 04                	push   0x4
c0013a8a:	6a ff                	push   0xffffffff
c0013a8c:	52                   	push   edx
c0013a8d:	50                   	push   eax
c0013a8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a92:	e8 59 ff ff ff       	call   c00139f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013a97:	83 c4 14             	add    esp,0x14
c0013a9a:	90                   	nop
c0013a9b:	c3                   	ret    

c0013a9c <VAS::setToWriteCombining(unsigned long, int)>:
c0013a9c:	a1 48 fb 02 c0       	mov    eax,ds:0xc002fb48
c0013aa1:	50                   	push   eax
c0013aa2:	6a ff                	push   0xffffffff
c0013aa4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013aa8:	52                   	push   edx
c0013aa9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013aad:	51                   	push   ecx
c0013aae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ab2:	50                   	push   eax
c0013ab3:	e8 38 ff ff ff       	call   c00139f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013ab8:	83 c4 14             	add    esp,0x14
c0013abb:	c3                   	ret    

c0013abc <VAS::mapOtherVASIn(bool, VAS*)>:
c0013abc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ac0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013aca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013acf:	83 f8 01             	cmp    eax,0x1
c0013ad2:	19 c0                	sbb    eax,eax
c0013ad4:	83 ca 03             	or     edx,0x3
c0013ad7:	83 e0 fc             	and    eax,0xfffffffc
c0013ada:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013ae1:	0f 20 d8             	mov    eax,cr3
c0013ae4:	0f 22 d8             	mov    cr3,eax
c0013ae7:	c3                   	ret    

c0013ae8 <VAS::~VAS()>:
c0013ae8:	83 ec 2c             	sub    esp,0x2c
c0013aeb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013af3:	fa                   	cli    
c0013af4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0013af9:	83 c0 01             	add    eax,0x1
c0013afc:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0013b01:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013b0b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013b11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b15:	6a 01                	push   0x1
c0013b17:	50                   	push   eax
c0013b18:	e8 9f ff ff ff       	call   c0013abc <VAS::mapOtherVASIn(bool, VAS*)>
c0013b1d:	83 c4 0c             	add    esp,0xc
c0013b20:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013b28:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013b30:	0f 8f d8 00 00 00    	jg     c0013c0e <VAS::~VAS()+0x126>
c0013b36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b41:	c1 e2 02             	shl    edx,0x2
c0013b44:	01 d0                	add    eax,edx
c0013b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b50:	83 e0 01             	and    eax,0x1
c0013b53:	0f 84 ab 00 00 00    	je     c0013c04 <VAS::~VAS()+0x11c>
c0013b59:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013b61:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013b69:	7f 74                	jg     c0013bdf <VAS::~VAS()+0xf7>
c0013b6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b6f:	c1 e0 0a             	shl    eax,0xa
c0013b72:	89 c2                	mov    edx,eax
c0013b74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b78:	01 d0                	add    eax,edx
c0013b7a:	c1 e0 0c             	shl    eax,0xc
c0013b7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b81:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013b8b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013b91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013b95:	6a 01                	push   0x1
c0013b97:	50                   	push   eax
c0013b98:	e8 8b fc ff ff       	call   c0013828 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013b9d:	83 c4 0c             	add    esp,0xc
c0013ba0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013baa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bb2:	25 01 04 00 00       	and    eax,0x401
c0013bb7:	3d 01 04 00 00       	cmp    eax,0x401
c0013bbc:	75 1a                	jne    c0013bd8 <VAS::~VAS()+0xf0>
c0013bbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bc2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013bc7:	83 ec 0c             	sub    esp,0xc
c0013bca:	50                   	push   eax
c0013bcb:	e8 29 c6 ff ff       	call   c00101f9 <Phys::freePage(unsigned long)>
c0013bd0:	83 c4 10             	add    esp,0x10
c0013bd3:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013bd8:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013bdd:	eb 82                	jmp    c0013b61 <VAS::~VAS()+0x79>
c0013bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be3:	25 00 04 00 00       	and    eax,0x400
c0013be8:	74 1a                	je     c0013c04 <VAS::~VAS()+0x11c>
c0013bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013bf3:	83 ec 0c             	sub    esp,0xc
c0013bf6:	50                   	push   eax
c0013bf7:	e8 fd c5 ff ff       	call   c00101f9 <Phys::freePage(unsigned long)>
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c04:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013c09:	e9 1a ff ff ff       	jmp    c0013b28 <VAS::~VAS()+0x40>
c0013c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c15:	83 ec 0c             	sub    esp,0xc
c0013c18:	50                   	push   eax
c0013c19:	e8 57 fc ff ff       	call   c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c0013c1e:	83 c4 10             	add    esp,0x10
c0013c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	50                   	push   eax
c0013c2c:	e8 c8 c5 ff ff       	call   c00101f9 <Phys::freePage(unsigned long)>
c0013c31:	83 c4 10             	add    esp,0x10
c0013c34:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c39:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0013c41:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0013c46:	85 c0                	test   eax,eax
c0013c48:	75 01                	jne    c0013c4b <VAS::~VAS()+0x163>
c0013c4a:	fb                   	sti    
c0013c4b:	90                   	nop
c0013c4c:	83 c4 2c             	add    esp,0x2c
c0013c4f:	c3                   	ret    

c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013c50:	55                   	push   ebp
c0013c51:	57                   	push   edi
c0013c52:	56                   	push   esi
c0013c53:	53                   	push   ebx
c0013c54:	83 ec 1c             	sub    esp,0x1c
c0013c57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013c5b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013c5f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013c65:	77 08                	ja     c0013c6f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013c67:	0f 20 d8             	mov    eax,cr3
c0013c6a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013c6d:	75 49                	jne    c0013cb8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c73:	09 d8                	or     eax,ebx
c0013c75:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c7a:	75 59                	jne    c0013cd5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013c7c:	89 de                	mov    esi,ebx
c0013c7e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013c81:	c1 ee 16             	shr    esi,0x16
c0013c84:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013c8b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013c8f:	74 56                	je     c0013ce7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013c91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013c95:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013c99:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013c9f:	c1 eb 0a             	shr    ebx,0xa
c0013ca2:	c1 e6 0c             	shl    esi,0xc
c0013ca5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013cab:	09 d0                	or     eax,edx
c0013cad:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013cb0:	83 c4 1c             	add    esp,0x1c
c0013cb3:	5b                   	pop    ebx
c0013cb4:	5e                   	pop    esi
c0013cb5:	5f                   	pop    edi
c0013cb6:	5d                   	pop    ebp
c0013cb7:	c3                   	ret    
c0013cb8:	83 ec 0c             	sub    esp,0xc
c0013cbb:	68 54 4a 02 c0       	push   0xc0024a54
c0013cc0:	e8 b7 32 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013cc5:	83 c4 10             	add    esp,0x10
c0013cc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ccc:	09 d8                	or     eax,ebx
c0013cce:	a9 ff 0f 00 00       	test   eax,0xfff
c0013cd3:	74 a7                	je     c0013c7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013cd5:	83 ec 0c             	sub    esp,0xc
c0013cd8:	68 bc 4a 02 c0       	push   0xc0024abc
c0013cdd:	e8 8c c3 ff ff       	call   c001006e <KePanic(char const*)>
c0013ce2:	83 c4 10             	add    esp,0x10
c0013ce5:	eb 95                	jmp    c0013c7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013ce7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ceb:	e8 72 c5 ff ff       	call   c0010262 <Phys::allocatePage()>
c0013cf0:	83 ec 0c             	sub    esp,0xc
c0013cf3:	89 c5                	mov    ebp,eax
c0013cf5:	8b 0d 70 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f270
c0013cfb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013cff:	6a 01                	push   0x1
c0013d01:	e8 67 f8 ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0013d06:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d0d:	6a 01                	push   0x1
c0013d0f:	50                   	push   eax
c0013d10:	55                   	push   ebp
c0013d11:	81 cd 07 04 00 00    	or     ebp,0x407
c0013d17:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d1b:	51                   	push   ecx
c0013d1c:	e8 19 01 00 00       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d21:	83 c4 1c             	add    esp,0x1c
c0013d24:	68 00 10 00 00       	push   0x1000
c0013d29:	6a 00                	push   0x0
c0013d2b:	50                   	push   eax
c0013d2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d30:	e8 bb c7 fe ff       	call   c00004f0 <memset>
c0013d35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013d39:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013d3c:	e8 34 fb ff ff       	call   c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c0013d41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d45:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013d4e:	e9 3e ff ff ff       	jmp    c0013c91 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013d53:	90                   	nop

c0013d54 <VAS::allocatePages(int, int)>:
c0013d54:	55                   	push   ebp
c0013d55:	57                   	push   edi
c0013d56:	56                   	push   esi
c0013d57:	53                   	push   ebx
c0013d58:	83 ec 1c             	sub    esp,0x1c
c0013d5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013d5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013d63:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013d67:	75 71                	jne    c0013dda <VAS::allocatePages(int, int)+0x86>
c0013d69:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d70:	85 c0                	test   eax,eax
c0013d72:	74 4d                	je     c0013dc1 <VAS::allocatePages(int, int)+0x6d>
c0013d74:	89 dd                	mov    ebp,ebx
c0013d76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d7a:	c1 e5 0c             	shl    ebp,0xc
c0013d7d:	01 c5                	add    ebp,eax
c0013d7f:	85 db                	test   ebx,ebx
c0013d81:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013d84:	7e 29                	jle    c0013daf <VAS::allocatePages(int, int)+0x5b>
c0013d86:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d8a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d8e:	81 cf 00 04 00 00    	or     edi,0x400
c0013d94:	e8 c9 c4 ff ff       	call   c0010262 <Phys::allocatePage()>
c0013d99:	57                   	push   edi
c0013d9a:	53                   	push   ebx
c0013d9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013da1:	50                   	push   eax
c0013da2:	56                   	push   esi
c0013da3:	e8 a8 fe ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013da8:	83 c4 10             	add    esp,0x10
c0013dab:	39 dd                	cmp    ebp,ebx
c0013dad:	75 e5                	jne    c0013d94 <VAS::allocatePages(int, int)+0x40>
c0013daf:	0f 20 d8             	mov    eax,cr3
c0013db2:	0f 22 d8             	mov    cr3,eax
c0013db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013db9:	83 c4 1c             	add    esp,0x1c
c0013dbc:	5b                   	pop    ebx
c0013dbd:	5e                   	pop    esi
c0013dbe:	5f                   	pop    edi
c0013dbf:	5d                   	pop    ebp
c0013dc0:	c3                   	ret    
c0013dc1:	83 ec 0c             	sub    esp,0xc
c0013dc4:	68 e0 4a 02 c0       	push   0xc0024ae0
c0013dc9:	e8 a0 c2 ff ff       	call   c001006e <KePanic(char const*)>
c0013dce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	eb 9a                	jmp    c0013d74 <VAS::allocatePages(int, int)+0x20>
c0013dda:	83 ec 0c             	sub    esp,0xc
c0013ddd:	53                   	push   ebx
c0013dde:	e8 8a f7 ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0013de3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013def:	77 37                	ja     c0013e28 <VAS::allocatePages(int, int)+0xd4>
c0013df1:	85 db                	test   ebx,ebx
c0013df3:	7e ba                	jle    c0013daf <VAS::allocatePages(int, int)+0x5b>
c0013df5:	c1 e3 0c             	shl    ebx,0xc
c0013df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013dfc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013e00:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013e03:	81 cf 00 04 00 00    	or     edi,0x400
c0013e09:	89 c3                	mov    ebx,eax
c0013e0b:	e8 52 c4 ff ff       	call   c0010262 <Phys::allocatePage()>
c0013e10:	57                   	push   edi
c0013e11:	53                   	push   ebx
c0013e12:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013e18:	50                   	push   eax
c0013e19:	56                   	push   esi
c0013e1a:	e8 31 fe ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e1f:	83 c4 10             	add    esp,0x10
c0013e22:	39 dd                	cmp    ebp,ebx
c0013e24:	75 e5                	jne    c0013e0b <VAS::allocatePages(int, int)+0xb7>
c0013e26:	eb 87                	jmp    c0013daf <VAS::allocatePages(int, int)+0x5b>
c0013e28:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e2c:	a1 4c fb 02 c0       	mov    eax,ds:0xc002fb4c
c0013e31:	09 c2                	or     edx,eax
c0013e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013e37:	eb b8                	jmp    c0013df1 <VAS::allocatePages(int, int)+0x9d>
c0013e39:	90                   	nop

c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013e3a:	55                   	push   ebp
c0013e3b:	57                   	push   edi
c0013e3c:	56                   	push   esi
c0013e3d:	53                   	push   ebx
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e45:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013e49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013e4d:	85 db                	test   ebx,ebx
c0013e4f:	7e 2f                	jle    c0013e80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013e51:	c1 e3 0c             	shl    ebx,0xc
c0013e54:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e58:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013e5c:	01 d3                	add    ebx,edx
c0013e5e:	55                   	push   ebp
c0013e5f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e67:	29 c2                	sub    edx,eax
c0013e69:	01 f2                	add    edx,esi
c0013e6b:	52                   	push   edx
c0013e6c:	56                   	push   esi
c0013e6d:	81 c6 00 10 00 00    	add    esi,0x1000
c0013e73:	57                   	push   edi
c0013e74:	e8 d7 fd ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e79:	83 c4 10             	add    esp,0x10
c0013e7c:	39 de                	cmp    esi,ebx
c0013e7e:	75 de                	jne    c0013e5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013e80:	0f 20 d8             	mov    eax,cr3
c0013e83:	0f 22 d8             	mov    cr3,eax
c0013e86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e8a:	83 c4 0c             	add    esp,0xc
c0013e8d:	5b                   	pop    ebx
c0013e8e:	5e                   	pop    esi
c0013e8f:	5f                   	pop    edi
c0013e90:	5d                   	pop    ebp
c0013e91:	c3                   	ret    

c0013e92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013e92:	55                   	push   ebp
c0013e93:	57                   	push   edi
c0013e94:	56                   	push   esi
c0013e95:	53                   	push   ebx
c0013e96:	83 ec 1c             	sub    esp,0x1c
c0013e99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013e9d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013ea1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013ea5:	09 f8                	or     eax,edi
c0013ea7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013eab:	a9 ff 0f 00 00       	test   eax,0xfff
c0013eb0:	75 4f                	jne    c0013f01 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013eb2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013eb6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013eb9:	c1 eb 16             	shr    ebx,0x16
c0013ebc:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013ec3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013ec7:	74 52                	je     c0013f1b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013ec9:	0f b6 f2             	movzx  esi,dl
c0013ecc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013ed0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013ed4:	c1 e8 0a             	shr    eax,0xa
c0013ed7:	83 fe 01             	cmp    esi,0x1
c0013eda:	19 d2                	sbb    edx,edx
c0013edc:	c1 e3 0c             	shl    ebx,0xc
c0013edf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013ee5:	25 fc 0f 00 00       	and    eax,0xffc
c0013eea:	01 d8                	add    eax,ebx
c0013eec:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013ef0:	09 d9                	or     ecx,ebx
c0013ef2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013ef9:	83 c4 1c             	add    esp,0x1c
c0013efc:	5b                   	pop    ebx
c0013efd:	5e                   	pop    esi
c0013efe:	5f                   	pop    edi
c0013eff:	5d                   	pop    ebp
c0013f00:	c3                   	ret    
c0013f01:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013f05:	83 ec 0c             	sub    esp,0xc
c0013f08:	68 0c 4b 02 c0       	push   0xc0024b0c
c0013f0d:	e8 5c c1 ff ff       	call   c001006e <KePanic(char const*)>
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f19:	eb 97                	jmp    c0013eb2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013f1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013f1f:	e8 3e c3 ff ff       	call   c0010262 <Phys::allocatePage()>
c0013f24:	83 ec 0c             	sub    esp,0xc
c0013f27:	89 c5                	mov    ebp,eax
c0013f29:	8b 0d 70 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f270
c0013f2f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013f33:	6a 01                	push   0x1
c0013f35:	e8 33 f6 ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0013f3a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013f41:	6a 01                	push   0x1
c0013f43:	50                   	push   eax
c0013f44:	55                   	push   ebp
c0013f45:	81 cd 07 04 00 00    	or     ebp,0x407
c0013f4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013f4f:	51                   	push   ecx
c0013f50:	e8 e5 fe ff ff       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f55:	83 c4 1c             	add    esp,0x1c
c0013f58:	68 00 10 00 00       	push   0x1000
c0013f5d:	6a 00                	push   0x0
c0013f5f:	50                   	push   eax
c0013f60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f64:	e8 87 c5 fe ff       	call   c00004f0 <memset>
c0013f69:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013f6d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013f70:	e8 00 f9 ff ff       	call   c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c0013f75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013f78:	83 c4 10             	add    esp,0x10
c0013f7b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013f7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f82:	e9 42 ff ff ff       	jmp    c0013ec9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013f87:	90                   	nop

c0013f88 <VAS::VAS(bool)>:
c0013f88:	53                   	push   ebx
c0013f89:	83 ec 28             	sub    esp,0x28
c0013f8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fa3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013faa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fae:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013fb2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013fb5:	e8 a8 c2 ff ff       	call   c0010262 <Phys::allocatePage()>
c0013fba:	89 c2                	mov    edx,eax
c0013fbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013fc3:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c0013fc9:	83 ec 0c             	sub    esp,0xc
c0013fcc:	6a 01                	push   0x1
c0013fce:	e8 9a f5 ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	89 c2                	mov    edx,eax
c0013fd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013fdf:	83 ec 0c             	sub    esp,0xc
c0013fe2:	6a 03                	push   0x3
c0013fe4:	6a 01                	push   0x1
c0013fe6:	52                   	push   edx
c0013fe7:	50                   	push   eax
c0013fe8:	53                   	push   ebx
c0013fe9:	e8 4c fe ff ff       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013fee:	83 c4 20             	add    esp,0x20
c0013ff1:	89 c2                	mov    edx,eax
c0013ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ff7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013ffa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014002:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001400a:	7f 1d                	jg     c0014029 <VAS::VAS(bool)+0xa1>
c001400c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014010:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014013:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014017:	c1 e2 02             	shl    edx,0x2
c001401a:	01 d0                	add    eax,edx
c001401c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014022:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014027:	eb d9                	jmp    c0014002 <VAS::VAS(bool)+0x7a>
c0014029:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0014031:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0014039:	7f 59                	jg     c0014094 <VAS::VAS(bool)+0x10c>
c001403b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001403f:	2d 00 02 00 00       	sub    eax,0x200
c0014044:	c1 e0 0c             	shl    eax,0xc
c0014047:	89 c2                	mov    edx,eax
c0014049:	a1 4c fb 02 c0       	mov    eax,ds:0xc002fb4c
c001404e:	89 d1                	mov    ecx,edx
c0014050:	09 c1                	or     ecx,eax
c0014052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014056:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014059:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001405d:	c1 e2 02             	shl    edx,0x2
c0014060:	01 d0                	add    eax,edx
c0014062:	83 c9 05             	or     ecx,0x5
c0014065:	89 ca                	mov    edx,ecx
c0014067:	89 10                	mov    DWORD PTR [eax],edx
c0014069:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001406d:	2d 40 03 00 00       	sub    eax,0x340
c0014072:	83 f8 7f             	cmp    eax,0x7f
c0014075:	77 16                	ja     c001408d <VAS::VAS(bool)+0x105>
c0014077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001407b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001407e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014082:	c1 e2 02             	shl    edx,0x2
c0014085:	01 d0                	add    eax,edx
c0014087:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001408d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014092:	eb 9d                	jmp    c0014031 <VAS::VAS(bool)+0xa9>
c0014094:	8b 15 4c fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb4c
c001409a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001409e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00140a1:	05 20 0c 00 00       	add    eax,0xc20
c00140a6:	81 ca 03 40 00 00    	or     edx,0x4003
c00140ac:	89 10                	mov    DWORD PTR [eax],edx
c00140ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00140b5:	a1 4c fb 02 c0       	mov    eax,ds:0xc002fb4c
c00140ba:	09 c2                	or     edx,eax
c00140bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00140c3:	05 fc 0f 00 00       	add    eax,0xffc
c00140c8:	83 ca 03             	or     edx,0x3
c00140cb:	89 10                	mov    DWORD PTR [eax],edx
c00140cd:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c00140d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00140d8:	83 ec 0c             	sub    esp,0xc
c00140db:	50                   	push   eax
c00140dc:	e8 d1 5b ff ff       	call   c0009cb2 <Device::getName()>
c00140e1:	83 c4 10             	add    esp,0x10
c00140e4:	83 ec 08             	sub    esp,0x8
c00140e7:	68 ef 4f 02 c0       	push   0xc0024fef
c00140ec:	50                   	push   eax
c00140ed:	e8 5e c6 fe ff       	call   c0000750 <strcmp>
c00140f2:	83 c4 10             	add    esp,0x10
c00140f5:	85 c0                	test   eax,eax
c00140f7:	0f 94 c0             	sete   al
c00140fa:	0f b6 c0             	movzx  eax,al
c00140fd:	85 c0                	test   eax,eax
c00140ff:	74 68                	je     c0014169 <VAS::VAS(bool)+0x1e1>
c0014101:	fa                   	cli    
c0014102:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0014107:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001410d:	05 68 09 00 00       	add    eax,0x968
c0014112:	83 ec 0c             	sub    esp,0xc
c0014115:	50                   	push   eax
c0014116:	e8 37 af ff ff       	call   c000f052 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001411b:	83 c4 10             	add    esp,0x10
c001411e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014123:	89 c3                	mov    ebx,eax
c0014125:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001412a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014130:	05 68 09 00 00       	add    eax,0x968
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	50                   	push   eax
c0014139:	e8 14 af ff ff       	call   c000f052 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	83 ec 08             	sub    esp,0x8
c0014144:	50                   	push   eax
c0014145:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014149:	e8 08 f7 ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	8b 00                	mov    eax,DWORD PTR [eax]
c0014153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014158:	6a 11                	push   0x11
c001415a:	53                   	push   ebx
c001415b:	50                   	push   eax
c001415c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014160:	e8 eb fa ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	fb                   	sti    
c0014169:	90                   	nop
c001416a:	83 c4 28             	add    esp,0x28
c001416d:	5b                   	pop    ebx
c001416e:	c3                   	ret    
c001416f:	90                   	nop

c0014170 <VAS::evict(unsigned long)>:
c0014170:	55                   	push   ebp
c0014171:	57                   	push   edi
c0014172:	56                   	push   esi
c0014173:	53                   	push   ebx
c0014174:	83 ec 24             	sub    esp,0x24
c0014177:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001417b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001417f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014183:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014188:	50                   	push   eax
c0014189:	68 fd 4f 02 c0       	push   0xc0024ffd
c001418e:	e8 e9 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014193:	e8 33 f5 ff ff       	call   c00136cb <Virt::allocateSwapfilePage()>
c0014198:	83 c4 10             	add    esp,0x10
c001419b:	89 c7                	mov    edi,eax
c001419d:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c00141a2:	85 c0                	test   eax,eax
c00141a4:	7e 40                	jle    c00141e6 <VAS::evict(unsigned long)+0x76>
c00141a6:	89 ee                	mov    esi,ebp
c00141a8:	31 db                	xor    ebx,ebx
c00141aa:	83 ec 0c             	sub    esp,0xc
c00141ad:	57                   	push   edi
c00141ae:	e8 02 f5 ff ff       	call   c00136b5 <Virt::swapIDToSector(unsigned long)>
c00141b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00141b6:	01 d8                	add    eax,ebx
c00141b8:	6a 01                	push   0x1
c00141ba:	31 d2                	xor    edx,edx
c00141bc:	83 c3 01             	add    ebx,0x1
c00141bf:	52                   	push   edx
c00141c0:	81 c6 00 02 00 00    	add    esi,0x200
c00141c6:	50                   	push   eax
c00141c7:	0f be 05 38 71 02 c0 	movsx  eax,BYTE PTR ds:0xc0027138
c00141ce:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c00141d5:	50                   	push   eax
c00141d6:	e8 39 69 ff ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c00141db:	83 c4 20             	add    esp,0x20
c00141de:	39 1d 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,ebx
c00141e4:	7f c4                	jg     c00141aa <VAS::evict(unsigned long)+0x3a>
c00141e6:	83 ec 08             	sub    esp,0x8
c00141e9:	c1 e7 0c             	shl    edi,0xc
c00141ec:	55                   	push   ebp
c00141ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f1:	50                   	push   eax
c00141f2:	e8 5f f6 ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c00141f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00141f9:	89 d3                	mov    ebx,edx
c00141fb:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014201:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014207:	09 d7                	or     edi,edx
c0014209:	89 38                	mov    DWORD PTR [eax],edi
c001420b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001420e:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c0014214:	83 c2 01             	add    edx,0x1
c0014217:	89 15 68 f2 02 c0    	mov    DWORD PTR ds:0xc002f268,edx
c001421d:	e8 d7 bf ff ff       	call   c00101f9 <Phys::freePage(unsigned long)>
c0014222:	0f 20 d8             	mov    eax,cr3
c0014225:	0f 22 d8             	mov    cr3,eax
c0014228:	8b 0d 68 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f268
c001422e:	51                   	push   ecx
c001422f:	55                   	push   ebp
c0014230:	53                   	push   ebx
c0014231:	68 30 4b 02 c0       	push   0xc0024b30
c0014236:	e8 41 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001423b:	83 c4 18             	add    esp,0x18
c001423e:	a1 64 f2 02 c0       	mov    eax,ds:0xc002f264
c0014243:	50                   	push   eax
c0014244:	8d 50 01             	lea    edx,[eax+0x1]
c0014247:	68 12 50 02 c0       	push   0xc0025012
c001424c:	89 15 64 f2 02 c0    	mov    DWORD PTR ds:0xc002f264,edx
c0014252:	e8 25 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014257:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001425c:	c7 44 24 40 24 50 02 c0 	mov    DWORD PTR [esp+0x40],0xc0025024
c0014264:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014268:	83 c4 2c             	add    esp,0x2c
c001426b:	5b                   	pop    ebx
c001426c:	5e                   	pop    esi
c001426d:	5f                   	pop    edi
c001426e:	5d                   	pop    ebp
c001426f:	e9 08 2d ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0014274 <VAS::canLockPage(unsigned long)>:
c0014274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014278:	50                   	push   eax
c0014279:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001427d:	52                   	push   edx
c001427e:	e8 d3 f5 ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c0014283:	59                   	pop    ecx
c0014284:	8b 00                	mov    eax,DWORD PTR [eax]
c0014286:	5a                   	pop    edx
c0014287:	c1 e8 0b             	shr    eax,0xb
c001428a:	83 e0 01             	and    eax,0x1
c001428d:	c3                   	ret    

c001428e <VAS::unlockPage(unsigned long)>:
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014295:	50                   	push   eax
c0014296:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001429a:	52                   	push   edx
c001429b:	e8 b6 f5 ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c00142a0:	59                   	pop    ecx
c00142a1:	5a                   	pop    edx
c00142a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00142a4:	f6 c6 08             	test   dh,0x8
c00142a7:	75 09                	jne    c00142b2 <VAS::unlockPage(unsigned long)+0x24>
c00142a9:	80 ce 08             	or     dh,0x8
c00142ac:	89 10                	mov    DWORD PTR [eax],edx
c00142ae:	83 c4 0c             	add    esp,0xc
c00142b1:	c3                   	ret    
c00142b2:	c7 44 24 10 64 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b64
c00142ba:	83 c4 0c             	add    esp,0xc
c00142bd:	e9 ac bd ff ff       	jmp    c001006e <KePanic(char const*)>

c00142c2 <VAS::canLockPages(unsigned long, int)>:
c00142c2:	55                   	push   ebp
c00142c3:	57                   	push   edi
c00142c4:	56                   	push   esi
c00142c5:	53                   	push   ebx
c00142c6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00142ca:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00142ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142d2:	85 ff                	test   edi,edi
c00142d4:	7e 23                	jle    c00142f9 <VAS::canLockPages(unsigned long, int)+0x37>
c00142d6:	31 f6                	xor    esi,esi
c00142d8:	eb 0d                	jmp    c00142e7 <VAS::canLockPages(unsigned long, int)+0x25>
c00142da:	81 c3 00 10 00 00    	add    ebx,0x1000
c00142e0:	83 c6 01             	add    esi,0x1
c00142e3:	39 f7                	cmp    edi,esi
c00142e5:	74 0d                	je     c00142f4 <VAS::canLockPages(unsigned long, int)+0x32>
c00142e7:	53                   	push   ebx
c00142e8:	55                   	push   ebp
c00142e9:	e8 86 ff ff ff       	call   c0014274 <VAS::canLockPage(unsigned long)>
c00142ee:	5a                   	pop    edx
c00142ef:	84 c0                	test   al,al
c00142f1:	59                   	pop    ecx
c00142f2:	75 e6                	jne    c00142da <VAS::canLockPages(unsigned long, int)+0x18>
c00142f4:	5b                   	pop    ebx
c00142f5:	5e                   	pop    esi
c00142f6:	5f                   	pop    edi
c00142f7:	5d                   	pop    ebp
c00142f8:	c3                   	ret    
c00142f9:	b0 01                	mov    al,0x1
c00142fb:	eb f7                	jmp    c00142f4 <VAS::canLockPages(unsigned long, int)+0x32>
c00142fd:	90                   	nop

c00142fe <VAS::unlockPages(unsigned long, int)>:
c00142fe:	55                   	push   ebp
c00142ff:	57                   	push   edi
c0014300:	56                   	push   esi
c0014301:	53                   	push   ebx
c0014302:	83 ec 0c             	sub    esp,0xc
c0014305:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014309:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001430d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014311:	85 ff                	test   edi,edi
c0014313:	7e 1c                	jle    c0014331 <VAS::unlockPages(unsigned long, int)+0x33>
c0014315:	31 f6                	xor    esi,esi
c0014317:	83 ec 08             	sub    esp,0x8
c001431a:	83 c6 01             	add    esi,0x1
c001431d:	53                   	push   ebx
c001431e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014324:	55                   	push   ebp
c0014325:	e8 64 ff ff ff       	call   c001428e <VAS::unlockPage(unsigned long)>
c001432a:	83 c4 10             	add    esp,0x10
c001432d:	39 f7                	cmp    edi,esi
c001432f:	75 e6                	jne    c0014317 <VAS::unlockPages(unsigned long, int)+0x19>
c0014331:	83 c4 0c             	add    esp,0xc
c0014334:	5b                   	pop    ebx
c0014335:	5e                   	pop    esi
c0014336:	5f                   	pop    edi
c0014337:	5d                   	pop    ebp
c0014338:	c3                   	ret    
c0014339:	90                   	nop

c001433a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001433a:	55                   	push   ebp
c001433b:	57                   	push   edi
c001433c:	56                   	push   esi
c001433d:	53                   	push   ebx
c001433e:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0014344:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c001434b:	89 f3                	mov    ebx,esi
c001434d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014353:	53                   	push   ebx
c0014354:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c001435b:	50                   	push   eax
c001435c:	e8 f5 f4 ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c0014361:	5a                   	pop    edx
c0014362:	89 c5                	mov    ebp,eax
c0014364:	59                   	pop    ecx
c0014365:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c001436b:	0f 87 cb 00 00 00    	ja     c001443c <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0014371:	83 ec 08             	sub    esp,0x8
c0014374:	56                   	push   esi
c0014375:	68 94 4b 02 c0       	push   0xc0024b94
c001437a:	e8 fd 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001437f:	5e                   	pop    esi
c0014380:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0014385:	5f                   	pop    edi
c0014386:	50                   	push   eax
c0014387:	68 c4 4b 02 c0       	push   0xc0024bc4
c001438c:	e8 eb 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014391:	58                   	pop    eax
c0014392:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0014398:	5a                   	pop    edx
c0014399:	51                   	push   ecx
c001439a:	68 e8 4b 02 c0       	push   0xc0024be8
c001439f:	e8 d8 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143a4:	83 c4 10             	add    esp,0x10
c00143a7:	85 db                	test   ebx,ebx
c00143a9:	74 5b                	je     c0014406 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00143ab:	85 ed                	test   ebp,ebp
c00143ad:	74 21                	je     c00143d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c00143af:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00143b2:	f7 c6 00 02 00 00    	test   esi,0x200
c00143b8:	0f 85 c5 00 00 00    	jne    c0014483 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00143be:	89 f0                	mov    eax,esi
c00143c0:	25 01 04 00 00       	and    eax,0x401
c00143c5:	3d 00 04 00 00       	cmp    eax,0x400
c00143ca:	0f 84 39 01 00 00    	je     c0014509 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00143d0:	83 ec 08             	sub    esp,0x8
c00143d3:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00143d8:	50                   	push   eax
c00143d9:	68 dc 4d 02 c0       	push   0xc0024ddc
c00143de:	e8 99 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143e3:	5a                   	pop    edx
c00143e4:	8b 1d 50 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa50
c00143ea:	59                   	pop    ecx
c00143eb:	53                   	push   ebx
c00143ec:	68 00 4e 02 c0       	push   0xc0024e00
c00143f1:	e8 86 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143f6:	83 c4 10             	add    esp,0x10
c00143f9:	31 c0                	xor    eax,eax
c00143fb:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014401:	5b                   	pop    ebx
c0014402:	5e                   	pop    esi
c0014403:	5f                   	pop    edi
c0014404:	5d                   	pop    ebp
c0014405:	c3                   	ret    
c0014406:	83 ec 08             	sub    esp,0x8
c0014409:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c001440e:	50                   	push   eax
c001440f:	68 0c 4c 02 c0       	push   0xc0024c0c
c0014414:	e8 63 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014419:	58                   	pop    eax
c001441a:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0014420:	5a                   	pop    edx
c0014421:	51                   	push   ecx
c0014422:	68 30 4c 02 c0       	push   0xc0024c30
c0014427:	e8 50 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001442c:	83 c4 10             	add    esp,0x10
c001442f:	31 c0                	xor    eax,eax
c0014431:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014437:	5b                   	pop    ebx
c0014438:	5e                   	pop    esi
c0014439:	5f                   	pop    edi
c001443a:	5d                   	pop    ebp
c001443b:	c3                   	ret    
c001443c:	83 ec 0c             	sub    esp,0xc
c001443f:	68 39 50 02 c0       	push   0xc0025039
c0014444:	e8 25 bc ff ff       	call   c001006e <KePanic(char const*)>
c0014449:	5f                   	pop    edi
c001444a:	58                   	pop    eax
c001444b:	56                   	push   esi
c001444c:	68 94 4b 02 c0       	push   0xc0024b94
c0014451:	e8 26 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014456:	58                   	pop    eax
c0014457:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c001445d:	5a                   	pop    edx
c001445e:	51                   	push   ecx
c001445f:	68 c4 4b 02 c0       	push   0xc0024bc4
c0014464:	e8 13 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014469:	5e                   	pop    esi
c001446a:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001446f:	5f                   	pop    edi
c0014470:	50                   	push   eax
c0014471:	68 e8 4b 02 c0       	push   0xc0024be8
c0014476:	e8 01 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001447b:	83 c4 10             	add    esp,0x10
c001447e:	e9 28 ff ff ff       	jmp    c00143ab <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0014483:	83 ec 0c             	sub    esp,0xc
c0014486:	68 54 4c 02 c0       	push   0xc0024c54
c001448b:	e8 ec 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014490:	e8 cd bd ff ff       	call   c0010262 <Phys::allocatePage()>
c0014495:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014498:	83 ca 01             	or     edx,0x1
c001449b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001449e:	0f 20 da             	mov    edx,cr3
c00144a1:	0f 22 da             	mov    cr3,edx
c00144a4:	ba 00 10 00 00       	mov    edx,0x1000
c00144a9:	89 de                	mov    esi,ebx
c00144ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00144af:	89 d1                	mov    ecx,edx
c00144b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144b3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00144b6:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00144bc:	09 c8                	or     eax,ecx
c00144be:	83 c8 02             	or     eax,0x2
c00144c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00144c4:	0f 20 d8             	mov    eax,cr3
c00144c7:	0f 22 d8             	mov    cr3,eax
c00144ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c00144ce:	89 df                	mov    edi,ebx
c00144d0:	89 d1                	mov    ecx,edx
c00144d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144d4:	8b 35 2c fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa2c
c00144da:	59                   	pop    ecx
c00144db:	5b                   	pop    ebx
c00144dc:	56                   	push   esi
c00144dd:	68 74 4c 02 c0       	push   0xc0024c74
c00144e2:	e8 95 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144e7:	5f                   	pop    edi
c00144e8:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00144ed:	5d                   	pop    ebp
c00144ee:	50                   	push   eax
c00144ef:	68 98 4c 02 c0       	push   0xc0024c98
c00144f4:	e8 83 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144f9:	83 c4 10             	add    esp,0x10
c00144fc:	b0 01                	mov    al,0x1
c00144fe:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014504:	5b                   	pop    ebx
c0014505:	5e                   	pop    esi
c0014506:	5f                   	pop    edi
c0014507:	5d                   	pop    ebp
c0014508:	c3                   	ret    
c0014509:	83 ec 08             	sub    esp,0x8
c001450c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014511:	c1 ee 0c             	shr    esi,0xc
c0014514:	50                   	push   eax
c0014515:	68 bc 4c 02 c0       	push   0xc0024cbc
c001451a:	e8 5d 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001451f:	e8 3e bd ff ff       	call   c0010262 <Phys::allocatePage()>
c0014524:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c001452a:	89 c7                	mov    edi,eax
c001452c:	58                   	pop    eax
c001452d:	5a                   	pop    edx
c001452e:	51                   	push   ecx
c001452f:	68 e0 4c 02 c0       	push   0xc0024ce0
c0014534:	e8 43 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014539:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001453c:	83 c4 10             	add    esp,0x10
c001453f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0014545:	09 fa                	or     edx,edi
c0014547:	81 ca 01 08 00 00    	or     edx,0x801
c001454d:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014550:	8b 3d 2c 71 02 c0    	mov    edi,DWORD PTR ds:0xc002712c
c0014556:	85 ff                	test   edi,edi
c0014558:	7e 65                	jle    c00145bf <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c001455a:	89 dd                	mov    ebp,ebx
c001455c:	31 ff                	xor    edi,edi
c001455e:	83 ec 08             	sub    esp,0x8
c0014561:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014566:	50                   	push   eax
c0014567:	68 94 4d 02 c0       	push   0xc0024d94
c001456c:	e8 0b 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014571:	89 34 24             	mov    DWORD PTR [esp],esi
c0014574:	e8 3c f1 ff ff       	call   c00136b5 <Virt::swapIDToSector(unsigned long)>
c0014579:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001457c:	01 f8                	add    eax,edi
c001457e:	6a 01                	push   0x1
c0014580:	31 d2                	xor    edx,edx
c0014582:	83 c7 01             	add    edi,0x1
c0014585:	52                   	push   edx
c0014586:	81 c5 00 02 00 00    	add    ebp,0x200
c001458c:	50                   	push   eax
c001458d:	0f be 05 38 71 02 c0 	movsx  eax,BYTE PTR ds:0xc0027138
c0014594:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001459b:	50                   	push   eax
c001459c:	e8 07 65 ff ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c00145a1:	83 c4 18             	add    esp,0x18
c00145a4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00145a9:	50                   	push   eax
c00145aa:	68 b8 4d 02 c0       	push   0xc0024db8
c00145af:	e8 c8 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145b4:	83 c4 10             	add    esp,0x10
c00145b7:	39 3d 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edi
c00145bd:	7f 9f                	jg     c001455e <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c00145bf:	83 ec 08             	sub    esp,0x8
c00145c2:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00145c7:	50                   	push   eax
c00145c8:	68 04 4d 02 c0       	push   0xc0024d04
c00145cd:	e8 aa 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145d2:	83 c4 0c             	add    esp,0xc
c00145d5:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00145da:	83 e8 01             	sub    eax,0x1
c00145dd:	50                   	push   eax
c00145de:	a3 68 f2 02 c0       	mov    ds:0xc002f268,eax
c00145e3:	53                   	push   ebx
c00145e4:	68 4b 50 02 c0       	push   0xc002504b
c00145e9:	e8 8e 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00145f1:	e8 9c f0 ff ff       	call   c0013692 <Virt::freeSwapfilePage(unsigned long)>
c00145f6:	58                   	pop    eax
c00145f7:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c00145fd:	5a                   	pop    edx
c00145fe:	51                   	push   ecx
c00145ff:	68 28 4d 02 c0       	push   0xc0024d28
c0014604:	e8 73 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014609:	0f 20 d8             	mov    eax,cr3
c001460c:	0f 22 d8             	mov    cr3,eax
c001460f:	c7 04 24 60 50 02 c0 	mov    DWORD PTR [esp],0xc0025060
c0014616:	e8 61 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001461b:	5b                   	pop    ebx
c001461c:	8b 3d 2c fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa2c
c0014622:	5e                   	pop    esi
c0014623:	57                   	push   edi
c0014624:	68 4c 4d 02 c0       	push   0xc0024d4c
c0014629:	e8 4e 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001462e:	5d                   	pop    ebp
c001462f:	58                   	pop    eax
c0014630:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014635:	50                   	push   eax
c0014636:	68 70 4d 02 c0       	push   0xc0024d70
c001463b:	e8 3c 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014640:	83 c4 10             	add    esp,0x10
c0014643:	b0 01                	mov    al,0x1
c0014645:	e9 b1 fd ff ff       	jmp    c00143fb <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c001464a <VAS::lockPage(unsigned long)>:
c001464a:	56                   	push   esi
c001464b:	53                   	push   ebx
c001464c:	83 ec 04             	sub    esp,0x4
c001464f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014657:	50                   	push   eax
c0014658:	56                   	push   esi
c0014659:	e8 f8 f1 ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c001465e:	5a                   	pop    edx
c001465f:	89 c3                	mov    ebx,eax
c0014661:	59                   	pop    ecx
c0014662:	8b 00                	mov    eax,DWORD PTR [eax]
c0014664:	a8 01                	test   al,0x1
c0014666:	74 10                	je     c0014678 <VAS::lockPage(unsigned long)+0x2e>
c0014668:	f6 c4 08             	test   ah,0x8
c001466b:	74 28                	je     c0014695 <VAS::lockPage(unsigned long)+0x4b>
c001466d:	80 e4 f7             	and    ah,0xf7
c0014670:	89 03                	mov    DWORD PTR [ebx],eax
c0014672:	83 c4 04             	add    esp,0x4
c0014675:	5b                   	pop    ebx
c0014676:	5e                   	pop    esi
c0014677:	c3                   	ret    
c0014678:	83 ec 08             	sub    esp,0x8
c001467b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014680:	50                   	push   eax
c0014681:	56                   	push   esi
c0014682:	e8 b3 fc ff ff       	call   c001433a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014687:	83 c4 10             	add    esp,0x10
c001468a:	84 c0                	test   al,al
c001468c:	74 19                	je     c00146a7 <VAS::lockPage(unsigned long)+0x5d>
c001468e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014690:	f6 c4 08             	test   ah,0x8
c0014693:	75 d8                	jne    c001466d <VAS::lockPage(unsigned long)+0x23>
c0014695:	c7 44 24 10 64 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b64
c001469d:	83 c4 04             	add    esp,0x4
c00146a0:	5b                   	pop    ebx
c00146a1:	5e                   	pop    esi
c00146a2:	e9 c7 b9 ff ff       	jmp    c001006e <KePanic(char const*)>
c00146a7:	83 ec 0c             	sub    esp,0xc
c00146aa:	68 24 4e 02 c0       	push   0xc0024e24
c00146af:	e8 ba b9 ff ff       	call   c001006e <KePanic(char const*)>
c00146b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146b6:	83 c4 10             	add    esp,0x10
c00146b9:	eb ad                	jmp    c0014668 <VAS::lockPage(unsigned long)+0x1e>
c00146bb:	90                   	nop

c00146bc <VAS::lockPages(unsigned long, int)>:
c00146bc:	55                   	push   ebp
c00146bd:	57                   	push   edi
c00146be:	56                   	push   esi
c00146bf:	53                   	push   ebx
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00146c7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00146cb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00146cf:	85 ff                	test   edi,edi
c00146d1:	7e 1c                	jle    c00146ef <VAS::lockPages(unsigned long, int)+0x33>
c00146d3:	31 f6                	xor    esi,esi
c00146d5:	83 ec 08             	sub    esp,0x8
c00146d8:	83 c6 01             	add    esi,0x1
c00146db:	53                   	push   ebx
c00146dc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00146e2:	55                   	push   ebp
c00146e3:	e8 62 ff ff ff       	call   c001464a <VAS::lockPage(unsigned long)>
c00146e8:	83 c4 10             	add    esp,0x10
c00146eb:	39 f7                	cmp    edi,esi
c00146ed:	75 e6                	jne    c00146d5 <VAS::lockPages(unsigned long, int)+0x19>
c00146ef:	83 c4 0c             	add    esp,0xc
c00146f2:	5b                   	pop    ebx
c00146f3:	5e                   	pop    esi
c00146f4:	5f                   	pop    edi
c00146f5:	5d                   	pop    ebp
c00146f6:	c3                   	ret    
c00146f7:	90                   	nop

c00146f8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00146f8:	55                   	push   ebp
c00146f9:	57                   	push   edi
c00146fa:	56                   	push   esi
c00146fb:	53                   	push   ebx
c00146fc:	83 ec 28             	sub    esp,0x28
c00146ff:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014703:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014707:	50                   	push   eax
c0014708:	e8 60 ee ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c001470d:	83 c4 0c             	add    esp,0xc
c0014710:	89 c5                	mov    ebp,eax
c0014712:	6a 07                	push   0x7
c0014714:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014718:	52                   	push   edx
c0014719:	56                   	push   esi
c001471a:	e8 35 f6 ff ff       	call   c0013d54 <VAS::allocatePages(int, int)>
c001471f:	83 c4 10             	add    esp,0x10
c0014722:	89 c7                	mov    edi,eax
c0014724:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014728:	85 c9                	test   ecx,ecx
c001472a:	74 2f                	je     c001475b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001472c:	31 db                	xor    ebx,ebx
c001472e:	e8 2f bb ff ff       	call   c0010262 <Phys::allocatePage()>
c0014733:	83 c3 01             	add    ebx,0x1
c0014736:	6a 03                	push   0x3
c0014738:	55                   	push   ebp
c0014739:	50                   	push   eax
c001473a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001473e:	56                   	push   esi
c001473f:	e8 0c f5 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014744:	6a 07                	push   0x7
c0014746:	57                   	push   edi
c0014747:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001474b:	50                   	push   eax
c001474c:	56                   	push   esi
c001474d:	e8 fe f4 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014752:	83 c4 20             	add    esp,0x20
c0014755:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014759:	75 d3                	jne    c001472e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001475b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001475f:	89 28                	mov    DWORD PTR [eax],ebp
c0014761:	83 c4 1c             	add    esp,0x1c
c0014764:	89 f8                	mov    eax,edi
c0014766:	5b                   	pop    ebx
c0014767:	5e                   	pop    esi
c0014768:	5f                   	pop    edi
c0014769:	5d                   	pop    ebp
c001476a:	c3                   	ret    
c001476b:	90                   	nop

c001476c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001476c:	53                   	push   ebx
c001476d:	83 ec 14             	sub    esp,0x14
c0014770:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014774:	68 54 4e 02 c0       	push   0xc0024e54
c0014779:	e8 fe 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001477e:	c7 04 24 b4 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eb4
c0014785:	e8 f2 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001478a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001478e:	83 c4 18             	add    esp,0x18
c0014791:	5b                   	pop    ebx
c0014792:	e9 de f0 ff ff       	jmp    c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c0014797:	90                   	nop

c0014798 <VAS::scanForEviction()>:
c0014798:	57                   	push   edi
c0014799:	56                   	push   esi
c001479a:	31 f6                	xor    esi,esi
c001479c:	53                   	push   ebx
c001479d:	83 ec 18             	sub    esp,0x18
c00147a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00147a4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00147a9:	50                   	push   eax
c00147aa:	68 30 4f 02 c0       	push   0xc0024f30
c00147af:	e8 c8 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147b4:	c7 04 24 67 50 02 c0 	mov    DWORD PTR [esp],0xc0025067
c00147bb:	e8 bc 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147c0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00147c3:	83 c4 10             	add    esp,0x10
c00147c6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00147cc:	75 0e                	jne    c00147dc <VAS::scanForEviction()+0x44>
c00147ce:	89 da                	mov    edx,ebx
c00147d0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00147d3:	c1 ea 16             	shr    edx,0x16
c00147d6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00147da:	74 5b                	je     c0014837 <VAS::scanForEviction()+0x9f>
c00147dc:	83 ec 08             	sub    esp,0x8
c00147df:	53                   	push   ebx
c00147e0:	57                   	push   edi
c00147e1:	e8 70 f0 ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c00147e6:	83 c4 10             	add    esp,0x10
c00147e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00147eb:	89 d1                	mov    ecx,edx
c00147ed:	c1 e9 0c             	shr    ecx,0xc
c00147f0:	74 10                	je     c0014802 <VAS::scanForEviction()+0x6a>
c00147f2:	89 d1                	mov    ecx,edx
c00147f4:	81 e1 01 08 00 00    	and    ecx,0x801
c00147fa:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014800:	74 40                	je     c0014842 <VAS::scanForEviction()+0xaa>
c0014802:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014808:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001480e:	76 2d                	jbe    c001483d <VAS::scanForEviction()+0xa5>
c0014810:	83 c6 01             	add    esi,0x1
c0014813:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001481a:	83 fe 03             	cmp    esi,0x3
c001481d:	74 32                	je     c0014851 <VAS::scanForEviction()+0xb9>
c001481f:	31 db                	xor    ebx,ebx
c0014821:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014827:	75 b3                	jne    c00147dc <VAS::scanForEviction()+0x44>
c0014829:	89 da                	mov    edx,ebx
c001482b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001482e:	c1 ea 16             	shr    edx,0x16
c0014831:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014835:	75 a5                	jne    c00147dc <VAS::scanForEviction()+0x44>
c0014837:	81 c3 00 00 40 00    	add    ebx,0x400000
c001483d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014840:	eb 84                	jmp    c00147c6 <VAS::scanForEviction()+0x2e>
c0014842:	f6 c2 20             	test   dl,0x20
c0014845:	74 13                	je     c001485a <VAS::scanForEviction()+0xc2>
c0014847:	83 e2 df             	and    edx,0xffffffdf
c001484a:	89 10                	mov    DWORD PTR [eax],edx
c001484c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001484f:	eb b1                	jmp    c0014802 <VAS::scanForEviction()+0x6a>
c0014851:	83 c4 10             	add    esp,0x10
c0014854:	31 c0                	xor    eax,eax
c0014856:	5b                   	pop    ebx
c0014857:	5e                   	pop    esi
c0014858:	5f                   	pop    edi
c0014859:	c3                   	ret    
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	89 d0                	mov    eax,edx
c001485f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014864:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014868:	53                   	push   ebx
c0014869:	68 83 50 02 c0       	push   0xc0025083
c001486e:	e8 09 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014873:	58                   	pop    eax
c0014874:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014877:	5a                   	pop    edx
c0014878:	51                   	push   ecx
c0014879:	57                   	push   edi
c001487a:	e8 f1 f8 ff ff       	call   c0014170 <VAS::evict(unsigned long)>
c001487f:	5b                   	pop    ebx
c0014880:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014883:	5e                   	pop    esi
c0014884:	50                   	push   eax
c0014885:	68 97 50 02 c0       	push   0xc0025097
c001488a:	e8 ed 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001488f:	58                   	pop    eax
c0014890:	5a                   	pop    edx
c0014891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014895:	50                   	push   eax
c0014896:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001489a:	68 aa 50 02 c0       	push   0xc00250aa
c001489f:	e8 d8 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148a4:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00148a7:	81 c1 00 10 00 00    	add    ecx,0x1000
c00148ad:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00148b0:	8b 3d 50 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa50
c00148b6:	5b                   	pop    ebx
c00148b7:	5e                   	pop    esi
c00148b8:	57                   	push   edi
c00148b9:	68 50 4f 02 c0       	push   0xc0024f50
c00148be:	e8 b9 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148ca:	83 c4 10             	add    esp,0x10
c00148cd:	5b                   	pop    ebx
c00148ce:	5e                   	pop    esi
c00148cf:	5f                   	pop    edi
c00148d0:	c3                   	ret    

c00148d1 <mapVASFirstTime>:
c00148d1:	55                   	push   ebp
c00148d2:	57                   	push   edi
c00148d3:	56                   	push   esi
c00148d4:	53                   	push   ebx
c00148d5:	83 ec 0c             	sub    esp,0xc
c00148d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00148e0:	83 fa 01             	cmp    edx,0x1
c00148e3:	0f 84 cb 00 00 00    	je     c00149b4 <mapVASFirstTime+0xe3>
c00148e9:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00148ec:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00148ef:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00148f4:	c1 e5 15             	shl    ebp,0x15
c00148f7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00148fc:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014902:	29 eb                	sub    ebx,ebp
c0014904:	29 ef                	sub    edi,ebp
c0014906:	e8 57 b9 ff ff       	call   c0010262 <Phys::allocatePage()>
c001490b:	83 ec 0c             	sub    esp,0xc
c001490e:	68 03 04 00 00       	push   0x403
c0014913:	6a 01                	push   0x1
c0014915:	53                   	push   ebx
c0014916:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001491c:	50                   	push   eax
c001491d:	56                   	push   esi
c001491e:	e8 17 f5 ff ff       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014923:	83 c4 20             	add    esp,0x20
c0014926:	39 fb                	cmp    ebx,edi
c0014928:	75 dc                	jne    c0014906 <mapVASFirstTime+0x35>
c001492a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001492f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014934:	29 eb                	sub    ebx,ebp
c0014936:	29 ef                	sub    edi,ebp
c0014938:	e8 25 b9 ff ff       	call   c0010262 <Phys::allocatePage()>
c001493d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014941:	83 fa 01             	cmp    edx,0x1
c0014944:	19 d2                	sbb    edx,edx
c0014946:	83 ec 0c             	sub    esp,0xc
c0014949:	83 e2 04             	and    edx,0x4
c001494c:	81 c2 03 04 00 00    	add    edx,0x403
c0014952:	52                   	push   edx
c0014953:	6a 01                	push   0x1
c0014955:	53                   	push   ebx
c0014956:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001495c:	50                   	push   eax
c001495d:	56                   	push   esi
c001495e:	e8 d7 f4 ff ff       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014963:	83 c4 20             	add    esp,0x20
c0014966:	39 df                	cmp    edi,ebx
c0014968:	75 ce                	jne    c0014938 <mapVASFirstTime+0x67>
c001496a:	83 ec 0c             	sub    esp,0xc
c001496d:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c0014972:	6a 04                	push   0x4
c0014974:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c001497a:	6a ff                	push   0xffffffff
c001497c:	c1 eb 0c             	shr    ebx,0xc
c001497f:	53                   	push   ebx
c0014980:	68 00 80 02 c0       	push   0xc0028000
c0014985:	56                   	push   esi
c0014986:	e8 65 f0 ff ff       	call   c00139f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001498b:	83 c4 14             	add    esp,0x14
c001498e:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c0014993:	6a 04                	push   0x4
c0014995:	6a ff                	push   0xffffffff
c0014997:	53                   	push   ebx
c0014998:	68 00 80 02 c0       	push   0xc0028000
c001499d:	50                   	push   eax
c001499e:	e8 4d f0 ff ff       	call   c00139f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00149a3:	0f 20 d8             	mov    eax,cr3
c00149a6:	0f 22 d8             	mov    cr3,eax
c00149a9:	83 c4 20             	add    esp,0x20
c00149ac:	83 c4 0c             	add    esp,0xc
c00149af:	5b                   	pop    ebx
c00149b0:	5e                   	pop    esi
c00149b1:	5f                   	pop    edi
c00149b2:	5d                   	pop    ebp
c00149b3:	c3                   	ret    
c00149b4:	83 ec 0c             	sub    esp,0xc
c00149b7:	68 b7 50 02 c0       	push   0xc00250b7
c00149bc:	e8 bb 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00149c1:	83 c4 10             	add    esp,0x10
c00149c4:	83 c4 0c             	add    esp,0xc
c00149c7:	5b                   	pop    ebx
c00149c8:	5e                   	pop    esi
c00149c9:	5f                   	pop    edi
c00149ca:	5d                   	pop    ebp
c00149cb:	c3                   	ret    

c00149cc <SysAlarm(regs*)>:
c00149cc:	53                   	push   ebx
c00149cd:	83 ec 10             	sub    esp,0x10
c00149d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149d4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149d7:	68 d0 50 02 c0       	push   0xc00250d0
c00149dc:	e8 9b 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00149e1:	83 c4 0c             	add    esp,0xc
c00149e4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149e7:	31 d2                	xor    edx,edx
c00149e9:	52                   	push   edx
c00149ea:	50                   	push   eax
c00149eb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00149f1:	e8 ca 09 00 00       	call   c00153c0 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c00149f6:	83 c4 18             	add    esp,0x18
c00149f9:	5b                   	pop    ebx
c00149fa:	c3                   	ret    

c00149fb <SysEject(regs*)>:
c00149fb:	83 ec 0c             	sub    esp,0xc
c00149fe:	83 ca ff             	or     edx,0xffffffff
c0014a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a05:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014a08:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014a0d:	83 e9 41             	sub    ecx,0x41
c0014a10:	83 f9 19             	cmp    ecx,0x19
c0014a13:	77 18                	ja     c0014a2d <SysEject(regs*)+0x32>
c0014a15:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0014a1c:	85 c9                	test   ecx,ecx
c0014a1e:	74 0d                	je     c0014a2d <SysEject(regs*)+0x32>
c0014a20:	83 ec 0c             	sub    esp,0xc
c0014a23:	51                   	push   ecx
c0014a24:	e8 15 60 ff ff       	call   c000aa3e <LogicalDisk::eject()>
c0014a29:	83 c4 10             	add    esp,0x10
c0014a2c:	99                   	cdq    
c0014a2d:	83 c4 0c             	add    esp,0xc
c0014a30:	c3                   	ret    

c0014a31 <SysExit(regs*)>:
c0014a31:	83 ec 18             	sub    esp,0x18
c0014a34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a38:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a3b:	e8 a0 30 00 00       	call   c0017ae0 <terminateTask(int)>
c0014a40:	83 c8 ff             	or     eax,0xffffffff
c0014a43:	83 c4 1c             	add    esp,0x1c
c0014a46:	89 c2                	mov    edx,eax
c0014a48:	c3                   	ret    

c0014a49 <SysGetCwd(regs*)>:
c0014a49:	83 ec 10             	sub    esp,0x10
c0014a4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a50:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014a53:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a5b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a5e:	e8 bb 33 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c0014a63:	83 c4 1c             	add    esp,0x1c
c0014a66:	99                   	cdq    
c0014a67:	c3                   	ret    

c0014a68 <SysGetPID(regs*)>:
c0014a68:	83 ec 14             	sub    esp,0x14
c0014a6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a73:	ff 30                	push   DWORD PTR [eax]
c0014a75:	68 e5 50 02 c0       	push   0xc00250e5
c0014a7a:	e8 fd 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014a7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a87:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a89:	83 c4 1c             	add    esp,0x1c
c0014a8c:	99                   	cdq    
c0014a8d:	c3                   	ret    

c0014a8e <SysGetRAMData(regs*)>:
c0014a8e:	8b 0d 5c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f15c
c0014a94:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0014a99:	03 05 58 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f158
c0014a9f:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014aa5:	99                   	cdq    
c0014aa6:	f7 f9                	idiv   ecx
c0014aa8:	c1 e0 18             	shl    eax,0x18
c0014aab:	09 c8                	or     eax,ecx
c0014aad:	99                   	cdq    
c0014aae:	c3                   	ret    

c0014aaf <SysGetVGAPtr(regs*)>:
c0014aaf:	55                   	push   ebp
c0014ab0:	57                   	push   edi
c0014ab1:	56                   	push   esi
c0014ab2:	53                   	push   ebx
c0014ab3:	83 ec 1c             	sub    esp,0x1c
c0014ab6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014aba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014abd:	83 f8 ff             	cmp    eax,0xffffffff
c0014ac0:	74 23                	je     c0014ae5 <SysGetVGAPtr(regs*)+0x36>
c0014ac2:	83 ec 0c             	sub    esp,0xc
c0014ac5:	50                   	push   eax
c0014ac6:	e8 c1 2a 00 00       	call   c001758c <Thr::processFromPID(int)>
c0014acb:	31 d2                	xor    edx,edx
c0014acd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ad1:	83 c4 10             	add    esp,0x10
c0014ad4:	b8 01 00 00 00       	mov    eax,0x1
c0014ad9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ade:	75 11                	jne    c0014af1 <SysGetVGAPtr(regs*)+0x42>
c0014ae0:	e9 95 00 00 00       	jmp    c0014b7a <SysGetVGAPtr(regs*)+0xcb>
c0014ae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014af5:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014af9:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014aff:	74 0c                	je     c0014b0d <SysGetVGAPtr(regs*)+0x5e>
c0014b01:	83 ec 0c             	sub    esp,0xc
c0014b04:	55                   	push   ebp
c0014b05:	e8 dd da ff ff       	call   c00125e7 <setActiveTerminal(VgaText*)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014b10:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014b13:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014b18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014b1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b20:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014b26:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014b29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b2c:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b36:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014b39:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014b40:	c1 e8 07             	shr    eax,0x7
c0014b43:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014b49:	50                   	push   eax
c0014b4a:	50                   	push   eax
c0014b4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b4e:	ff b0 a8 0f 00 00    	push   DWORD PTR [eax+0xfa8]
c0014b54:	68 f4 50 02 c0       	push   0xc00250f4
c0014b59:	e8 1e 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014b5e:	5a                   	pop    edx
c0014b5f:	59                   	pop    ecx
c0014b60:	68 fd 50 02 c0       	push   0xc00250fd
c0014b65:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b68:	05 ac 0f 00 00       	add    eax,0xfac
c0014b6d:	50                   	push   eax
c0014b6e:	e8 cd ba fe ff       	call   c0000640 <strcpy>
c0014b73:	83 c4 10             	add    esp,0x10
c0014b76:	31 c0                	xor    eax,eax
c0014b78:	31 d2                	xor    edx,edx
c0014b7a:	83 c4 1c             	add    esp,0x1c
c0014b7d:	5b                   	pop    ebx
c0014b7e:	5e                   	pop    esi
c0014b7f:	5f                   	pop    edi
c0014b80:	5d                   	pop    ebp
c0014b81:	c3                   	ret    
c0014b82:	66 90                	xchg   ax,ax

c0014b84 <SysKill(regs*)>:
c0014b84:	53                   	push   ebx
c0014b85:	83 ec 08             	sub    esp,0x8
c0014b88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b8c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014b90:	75 16                	jne    c0014ba8 <SysKill(regs*)+0x24>
c0014b92:	83 ec 0c             	sub    esp,0xc
c0014b95:	68 07 51 02 c0       	push   0xc0025107
c0014b9a:	e8 cf b4 ff ff       	call   c001006e <KePanic(char const*)>
c0014b9f:	83 c4 10             	add    esp,0x10
c0014ba2:	e9 89 00 00 00       	jmp    c0014c30 <SysKill(regs*)+0xac>
c0014ba7:	90                   	nop
c0014ba8:	83 ec 0c             	sub    esp,0xc
c0014bab:	68 6c fa 02 c0       	push   0xc002fa6c
c0014bb0:	e8 b3 d5 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0014bb8:	83 c4 10             	add    esp,0x10
c0014bbb:	85 c0                	test   eax,eax
c0014bbd:	74 19                	je     c0014bd8 <SysKill(regs*)+0x54>
c0014bbf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014bc2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014bc5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014bc7:	74 33                	je     c0014bfc <SysKill(regs*)+0x78>
c0014bc9:	52                   	push   edx
c0014bca:	52                   	push   edx
c0014bcb:	50                   	push   eax
c0014bcc:	68 6c fa 02 c0       	push   0xc002fa6c
c0014bd1:	e8 9e da 00 00       	call   c0022674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014bd6:	eb e0                	jmp    c0014bb8 <SysKill(regs*)+0x34>
c0014bd8:	83 ec 0c             	sub    esp,0xc
c0014bdb:	68 60 fa 02 c0       	push   0xc002fa60
c0014be0:	e8 83 d5 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014be5:	8d 76 00             	lea    esi,[esi+0x0]
c0014be8:	83 c4 10             	add    esp,0x10
c0014beb:	85 c0                	test   eax,eax
c0014bed:	74 41                	je     c0014c30 <SysKill(regs*)+0xac>
c0014bef:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014bf2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014bf5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014bf7:	75 27                	jne    c0014c20 <SysKill(regs*)+0x9c>
c0014bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bfc:	51                   	push   ecx
c0014bfd:	51                   	push   ecx
c0014bfe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c09:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014c0f:	e8 d7 c5 ff ff       	call   c00111eb <KeRaiseSignal(SigHandlerBlock*, int)>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	31 c0                	xor    eax,eax
c0014c19:	31 d2                	xor    edx,edx
c0014c1b:	eb 1b                	jmp    c0014c38 <SysKill(regs*)+0xb4>
c0014c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c20:	52                   	push   edx
c0014c21:	52                   	push   edx
c0014c22:	50                   	push   eax
c0014c23:	68 60 fa 02 c0       	push   0xc002fa60
c0014c28:	e8 47 da 00 00       	call   c0022674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014c2d:	eb b9                	jmp    c0014be8 <SysKill(regs*)+0x64>
c0014c2f:	90                   	nop
c0014c30:	83 c8 ff             	or     eax,0xffffffff
c0014c33:	89 c2                	mov    edx,eax
c0014c35:	8d 76 00             	lea    esi,[esi+0x0]
c0014c38:	83 c4 08             	add    esp,0x8
c0014c3b:	5b                   	pop    ebx
c0014c3c:	c3                   	ret    

c0014c3d <SysLoadDLL(regs*)>:
c0014c3d:	56                   	push   esi
c0014c3e:	53                   	push   ebx
c0014c3f:	31 d2                	xor    edx,edx
c0014c41:	51                   	push   ecx
c0014c42:	b8 01 00 00 00       	mov    eax,0x1
c0014c47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c4b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014c4f:	0f 84 8c 00 00 00    	je     c0014ce1 <SysLoadDLL(regs*)+0xa4>
c0014c55:	83 ec 0c             	sub    esp,0xc
c0014c58:	68 14 01 00 00       	push   0x114
c0014c5d:	e8 fd b0 ff ff       	call   c000fd5f <malloc>
c0014c62:	83 c4 0c             	add    esp,0xc
c0014c65:	89 c3                	mov    ebx,eax
c0014c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c6c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c72:	53                   	push   ebx
c0014c73:	e8 12 35 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014c78:	83 c4 10             	add    esp,0x10
c0014c7b:	31 d2                	xor    edx,edx
c0014c7d:	b8 02 00 00 00       	mov    eax,0x2
c0014c82:	85 db                	test   ebx,ebx
c0014c84:	74 5b                	je     c0014ce1 <SysLoadDLL(regs*)+0xa4>
c0014c86:	83 ec 0c             	sub    esp,0xc
c0014c89:	53                   	push   ebx
c0014c8a:	e8 dd 37 ff ff       	call   c000846c <File::exists()>
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	84 c0                	test   al,al
c0014c94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c96:	75 11                	jne    c0014ca9 <SysLoadDLL(regs*)+0x6c>
c0014c98:	83 ec 0c             	sub    esp,0xc
c0014c9b:	53                   	push   ebx
c0014c9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c9f:	83 c4 10             	add    esp,0x10
c0014ca2:	b8 03 00 00 00       	mov    eax,0x3
c0014ca7:	eb 36                	jmp    c0014cdf <SysLoadDLL(regs*)+0xa2>
c0014ca9:	83 ec 0c             	sub    esp,0xc
c0014cac:	53                   	push   ebx
c0014cad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014cb0:	58                   	pop    eax
c0014cb1:	5a                   	pop    edx
c0014cb2:	6a 00                	push   0x0
c0014cb4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014cb7:	e8 7c 1a 00 00       	call   c0016738 <Thr::loadDLL(char const*, bool)>
c0014cbc:	83 c4 10             	add    esp,0x10
c0014cbf:	89 c1                	mov    ecx,eax
c0014cc1:	31 d2                	xor    edx,edx
c0014cc3:	b8 04 00 00 00       	mov    eax,0x4
c0014cc8:	85 c9                	test   ecx,ecx
c0014cca:	74 15                	je     c0014ce1 <SysLoadDLL(regs*)+0xa4>
c0014ccc:	53                   	push   ebx
c0014ccd:	53                   	push   ebx
c0014cce:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c0014cd4:	51                   	push   ecx
c0014cd5:	e8 b0 1c 00 00       	call   c001698a <Thr::executeDLL(unsigned long, void*)>
c0014cda:	83 c4 10             	add    esp,0x10
c0014cdd:	31 c0                	xor    eax,eax
c0014cdf:	31 d2                	xor    edx,edx
c0014ce1:	59                   	pop    ecx
c0014ce2:	5b                   	pop    ebx
c0014ce3:	5e                   	pop    esi
c0014ce4:	c3                   	ret    

c0014ce5 <SysPause(regs*)>:
c0014ce5:	83 ec 18             	sub    esp,0x18
c0014ce8:	6a 08                	push   0x8
c0014cea:	e8 b1 26 00 00       	call   c00173a0 <blockTask(TaskState)>
c0014cef:	31 c0                	xor    eax,eax
c0014cf1:	31 d2                	xor    edx,edx
c0014cf3:	83 c4 1c             	add    esp,0x1c
c0014cf6:	c3                   	ret    

c0014cf7 <SysPthreadCreate(regs*)>:
c0014cf7:	83 ec 18             	sub    esp,0x18
c0014cfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014d02:	e8 71 24 00 00       	call   c0017178 <Process::createUserThread()>
c0014d07:	31 c0                	xor    eax,eax
c0014d09:	31 d2                	xor    edx,edx
c0014d0b:	83 c4 1c             	add    esp,0x1c
c0014d0e:	c3                   	ret    

c0014d0f <SysPthreadGetTID(regs*)>:
c0014d0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d17:	99                   	cdq    
c0014d18:	c3                   	ret    

c0014d19 <SysInternalPthreadGetContext(regs*)>:
c0014d19:	31 c0                	xor    eax,eax
c0014d1b:	31 d2                	xor    edx,edx
c0014d1d:	c3                   	ret    

c0014d1e <SysInternalPthreadGetStartLocation(regs*)>:
c0014d1e:	31 c0                	xor    eax,eax
c0014d20:	31 d2                	xor    edx,edx
c0014d22:	c3                   	ret    

c0014d23 <SysPthreadJoin(regs*)>:
c0014d23:	31 c0                	xor    eax,eax
c0014d25:	31 d2                	xor    edx,edx
c0014d27:	c3                   	ret    

c0014d28 <SysPthreadExit(regs*)>:
c0014d28:	83 ec 18             	sub    esp,0x18
c0014d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d2f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d32:	e8 a9 2d 00 00       	call   c0017ae0 <terminateTask(int)>
c0014d37:	83 c8 ff             	or     eax,0xffffffff
c0014d3a:	83 c4 1c             	add    esp,0x1c
c0014d3d:	89 c2                	mov    edx,eax
c0014d3f:	c3                   	ret    

c0014d40 <SysRead(regs*)>:
c0014d40:	57                   	push   edi
c0014d41:	56                   	push   esi
c0014d42:	53                   	push   ebx
c0014d43:	83 ec 10             	sub    esp,0x10
c0014d46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014d4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014d4d:	83 f8 02             	cmp    eax,0x2
c0014d50:	77 10                	ja     c0014d62 <SysRead(regs*)+0x22>
c0014d52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d5a:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014d60:	eb 0e                	jmp    c0014d70 <SysRead(regs*)+0x30>
c0014d62:	83 ec 0c             	sub    esp,0xc
c0014d65:	50                   	push   eax
c0014d66:	e8 96 e6 ff ff       	call   c0013401 <KeGetFileFromDescriptor(int)>
c0014d6b:	83 c4 10             	add    esp,0x10
c0014d6e:	89 c1                	mov    ecx,eax
c0014d70:	83 c8 ff             	or     eax,0xffffffff
c0014d73:	85 c9                	test   ecx,ecx
c0014d75:	89 c2                	mov    edx,eax
c0014d77:	74 28                	je     c0014da1 <SysRead(regs*)+0x61>
c0014d79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d81:	31 ff                	xor    edi,edi
c0014d83:	83 ec 0c             	sub    esp,0xc
c0014d86:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014d88:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014d8c:	52                   	push   edx
c0014d8d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d90:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014d93:	57                   	push   edi
c0014d94:	56                   	push   esi
c0014d95:	51                   	push   ecx
c0014d96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014d9d:	83 c4 20             	add    esp,0x20
c0014da0:	99                   	cdq    
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	5b                   	pop    ebx
c0014da5:	5e                   	pop    esi
c0014da6:	5f                   	pop    edi
c0014da7:	c3                   	ret    

c0014da8 <SysRegisterSignal(regs*)>:
c0014da8:	83 ec 18             	sub    esp,0x18
c0014dab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014daf:	6a 00                	push   0x0
c0014db1:	6a 00                	push   0x0
c0014db3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014db6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014db9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dc1:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014dc7:	e8 e9 c3 ff ff       	call   c00111b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014dcc:	83 c4 2c             	add    esp,0x2c
c0014dcf:	99                   	cdq    
c0014dd0:	c3                   	ret    

c0014dd1 <SysRegistryGetTypeFromPath(regs*)>:
c0014dd1:	53                   	push   ebx
c0014dd2:	81 ec 40 01 00 00    	sub    esp,0x140
c0014dd8:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014ddf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014de2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014de5:	e8 52 92 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	89 c1                	mov    ecx,eax
c0014def:	85 c0                	test   eax,eax
c0014df1:	74 15                	je     c0014e08 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014df3:	50                   	push   eax
c0014df4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014df8:	50                   	push   eax
c0014df9:	51                   	push   ecx
c0014dfa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dfd:	e8 1e 8e ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	99                   	cdq    
c0014e06:	eb 05                	jmp    c0014e0d <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014e08:	83 c8 ff             	or     eax,0xffffffff
c0014e0b:	89 c2                	mov    edx,eax
c0014e0d:	81 c4 38 01 00 00    	add    esp,0x138
c0014e13:	5b                   	pop    ebx
c0014e14:	c3                   	ret    

c0014e15 <SysRegistryReadExtent(regs*)>:
c0014e15:	83 ec 1c             	sub    esp,0x1c
c0014e18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e1c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014e1f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014e22:	85 c0                	test   eax,eax
c0014e24:	79 1f                	jns    c0014e45 <SysRegistryReadExtent(regs*)+0x30>
c0014e26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014e2b:	52                   	push   edx
c0014e2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014e30:	52                   	push   edx
c0014e31:	50                   	push   eax
c0014e32:	51                   	push   ecx
c0014e33:	e8 da 8c ff ff       	call   c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014e38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014e40:	83 c4 10             	add    esp,0x10
c0014e43:	eb 14                	jmp    c0014e59 <SysRegistryReadExtent(regs*)+0x44>
c0014e45:	83 ec 04             	sub    esp,0x4
c0014e48:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014e4b:	50                   	push   eax
c0014e4c:	51                   	push   ecx
c0014e4d:	e8 5a 87 ff ff       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	31 c0                	xor    eax,eax
c0014e57:	31 d2                	xor    edx,edx
c0014e59:	83 c4 1c             	add    esp,0x1c
c0014e5c:	c3                   	ret    

c0014e5d <SysRegistryPathToExtentLookup(regs*)>:
c0014e5d:	83 ec 14             	sub    esp,0x14
c0014e60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e64:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014e67:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e6a:	e8 cd 91 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e6f:	83 c4 1c             	add    esp,0x1c
c0014e72:	99                   	cdq    
c0014e73:	c3                   	ret    

c0014e74 <SysRegistryEnterDirectory(regs*)>:
c0014e74:	83 ec 14             	sub    esp,0x14
c0014e77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e7b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014e7e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e81:	e8 9d 87 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c0014e86:	83 c4 1c             	add    esp,0x1c
c0014e89:	99                   	cdq    
c0014e8a:	c3                   	ret    

c0014e8b <SysRegistryGetNext(regs*)>:
c0014e8b:	83 ec 14             	sub    esp,0x14
c0014e8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e92:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014e95:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e98:	e8 c5 87 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c0014e9d:	83 c4 1c             	add    esp,0x1c
c0014ea0:	99                   	cdq    
c0014ea1:	c3                   	ret    

c0014ea2 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014ea2:	57                   	push   edi
c0014ea3:	56                   	push   esi
c0014ea4:	53                   	push   ebx
c0014ea5:	81 ec 34 01 00 00    	sub    esp,0x134
c0014eab:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014eb2:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014eb6:	57                   	push   edi
c0014eb7:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014eba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ebd:	e8 5e 8d ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014ec2:	89 c3                	mov    ebx,eax
c0014ec4:	58                   	pop    eax
c0014ec5:	5a                   	pop    edx
c0014ec6:	57                   	push   edi
c0014ec7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014eca:	e8 71 b7 fe ff       	call   c0000640 <strcpy>
c0014ecf:	89 d8                	mov    eax,ebx
c0014ed1:	81 c4 40 01 00 00    	add    esp,0x140
c0014ed7:	99                   	cdq    
c0014ed8:	5b                   	pop    ebx
c0014ed9:	5e                   	pop    esi
c0014eda:	5f                   	pop    edi
c0014edb:	c3                   	ret    

c0014edc <SysRegistryOpen(regs*)>:
c0014edc:	83 ec 18             	sub    esp,0x18
c0014edf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ee3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014ee6:	e8 51 85 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014eeb:	83 c4 1c             	add    esp,0x1c
c0014eee:	99                   	cdq    
c0014eef:	c3                   	ret    

c0014ef0 <SysRegistryClose(regs*)>:
c0014ef0:	83 ec 18             	sub    esp,0x18
c0014ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ef7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014efa:	e8 5b 86 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014eff:	31 c0                	xor    eax,eax
c0014f01:	31 d2                	xor    edx,edx
c0014f03:	83 c4 1c             	add    esp,0x1c
c0014f06:	c3                   	ret    

c0014f07 <SysRegistryEasyReadString(regs*)>:
c0014f07:	57                   	push   edi
c0014f08:	56                   	push   esi
c0014f09:	53                   	push   ebx
c0014f0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f0e:	83 ec 0c             	sub    esp,0xc
c0014f11:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014f14:	e8 23 85 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014f19:	5a                   	pop    edx
c0014f1a:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014f1d:	59                   	pop    ecx
c0014f1e:	89 c3                	mov    ebx,eax
c0014f20:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014f23:	50                   	push   eax
c0014f24:	e8 13 91 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	89 c1                	mov    ecx,eax
c0014f2e:	b8 01 00 00 00       	mov    eax,0x1
c0014f33:	85 c9                	test   ecx,ecx
c0014f35:	7e 16                	jle    c0014f4d <SysRegistryEasyReadString(regs*)+0x46>
c0014f37:	50                   	push   eax
c0014f38:	57                   	push   edi
c0014f39:	51                   	push   ecx
c0014f3a:	53                   	push   ebx
c0014f3b:	e8 6c 86 ff ff       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0014f40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f43:	e8 12 86 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014f48:	83 c4 10             	add    esp,0x10
c0014f4b:	31 c0                	xor    eax,eax
c0014f4d:	5b                   	pop    ebx
c0014f4e:	31 d2                	xor    edx,edx
c0014f50:	5e                   	pop    esi
c0014f51:	5f                   	pop    edi
c0014f52:	c3                   	ret    

c0014f53 <SysRegistryEasyReadInteger(regs*)>:
c0014f53:	56                   	push   esi
c0014f54:	53                   	push   ebx
c0014f55:	83 ec 10             	sub    esp,0x10
c0014f58:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014f5c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014f5f:	e8 d8 84 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014f64:	5a                   	pop    edx
c0014f65:	89 c3                	mov    ebx,eax
c0014f67:	59                   	pop    ecx
c0014f68:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014f6b:	50                   	push   eax
c0014f6c:	e8 cb 90 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014f71:	83 c4 10             	add    esp,0x10
c0014f74:	89 c1                	mov    ecx,eax
c0014f76:	b8 01 00 00 00       	mov    eax,0x1
c0014f7b:	85 c9                	test   ecx,ecx
c0014f7d:	7e 18                	jle    c0014f97 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014f7f:	50                   	push   eax
c0014f80:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014f83:	51                   	push   ecx
c0014f84:	53                   	push   ebx
c0014f85:	e8 88 8b ff ff       	call   c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014f8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f8d:	e8 c8 85 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014f92:	83 c4 10             	add    esp,0x10
c0014f95:	31 c0                	xor    eax,eax
c0014f97:	59                   	pop    ecx
c0014f98:	31 d2                	xor    edx,edx
c0014f9a:	5b                   	pop    ebx
c0014f9b:	5e                   	pop    esi
c0014f9c:	c3                   	ret    

c0014f9d <SysSbrk(regs*)>:
c0014f9d:	56                   	push   esi
c0014f9e:	53                   	push   ebx
c0014f9f:	50                   	push   eax
c0014fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fa5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fa9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fac:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014faf:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014fb5:	85 db                	test   ebx,ebx
c0014fb7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014fba:	74 02                	je     c0014fbe <SysSbrk(regs*)+0x21>
c0014fbc:	79 06                	jns    c0014fc4 <SysSbrk(regs*)+0x27>
c0014fbe:	89 f0                	mov    eax,esi
c0014fc0:	31 d2                	xor    edx,edx
c0014fc2:	eb 2a                	jmp    c0014fee <SysSbrk(regs*)+0x51>
c0014fc4:	83 c8 ff             	or     eax,0xffffffff
c0014fc7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014fcd:	89 c2                	mov    edx,eax
c0014fcf:	77 1d                	ja     c0014fee <SysSbrk(regs*)+0x51>
c0014fd1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014fd7:	50                   	push   eax
c0014fd8:	c1 ea 0c             	shr    edx,0xc
c0014fdb:	68 07 0c 00 00       	push   0xc07
c0014fe0:	52                   	push   edx
c0014fe1:	51                   	push   ecx
c0014fe2:	e8 6d ed ff ff       	call   c0013d54 <VAS::allocatePages(int, int)>
c0014fe7:	89 f0                	mov    eax,esi
c0014fe9:	31 d2                	xor    edx,edx
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	59                   	pop    ecx
c0014fef:	5b                   	pop    ebx
c0014ff0:	5e                   	pop    esi
c0014ff1:	c3                   	ret    

c0014ff2 <SysSetCwd(regs*)>:
c0014ff2:	83 ec 14             	sub    esp,0x14
c0014ff5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ffc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015001:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015004:	e8 02 35 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0015009:	83 c4 1c             	add    esp,0x1c
c001500c:	99                   	cdq    
c001500d:	c3                   	ret    

c001500e <SysSetTime(regs*)>:
c001500e:	55                   	push   ebp
c001500f:	31 d2                	xor    edx,edx
c0015011:	57                   	push   edi
c0015012:	56                   	push   esi
c0015013:	be 18 00 00 00       	mov    esi,0x18
c0015018:	53                   	push   ebx
c0015019:	bb 3c 00 00 00       	mov    ebx,0x3c
c001501e:	83 ec 20             	sub    esp,0x20
c0015021:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0015025:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015028:	f7 f3                	div    ebx
c001502a:	89 d7                	mov    edi,edx
c001502c:	31 d2                	xor    edx,edx
c001502e:	f7 f3                	div    ebx
c0015030:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015033:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015037:	bb 10 0e 00 00       	mov    ebx,0xe10
c001503c:	31 d2                	xor    edx,edx
c001503e:	f7 f3                	div    ebx
c0015040:	31 d2                	xor    edx,edx
c0015042:	f7 f6                	div    esi
c0015044:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0015047:	89 d5                	mov    ebp,edx
c0015049:	89 c3                	mov    ebx,eax
c001504b:	be 0c 00 00 00       	mov    esi,0xc
c0015050:	83 e3 1f             	and    ebx,0x1f
c0015053:	c1 e8 05             	shr    eax,0x5
c0015056:	43                   	inc    ebx
c0015057:	31 d2                	xor    edx,edx
c0015059:	f7 f6                	div    esi
c001505b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001505f:	57                   	push   edi
c0015060:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015064:	55                   	push   ebp
c0015065:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0015069:	56                   	push   esi
c001506a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001506e:	53                   	push   ebx
c001506f:	68 28 51 02 c0       	push   0xc0025128
c0015074:	e8 03 1f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015079:	83 c4 1c             	add    esp,0x1c
c001507c:	57                   	push   edi
c001507d:	c1 e7 10             	shl    edi,0x10
c0015080:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015084:	55                   	push   ebp
c0015085:	56                   	push   esi
c0015086:	c1 e6 10             	shl    esi,0x10
c0015089:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001508d:	53                   	push   ebx
c001508e:	68 4a 51 02 c0       	push   0xc002514a
c0015093:	e8 e4 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015098:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001509d:	31 d2                	xor    edx,edx
c001509f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00150a5:	31 c0                	xor    eax,eax
c00150a7:	88 d8                	mov    al,bl
c00150a9:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c00150ad:	0f b7 d8             	movzx  ebx,ax
c00150b0:	09 f3                	or     ebx,esi
c00150b2:	89 d8                	mov    eax,ebx
c00150b4:	89 eb                	mov    ebx,ebp
c00150b6:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c00150ba:	88 da                	mov    dl,bl
c00150bc:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c00150c0:	83 c4 1c             	add    esp,0x1c
c00150c3:	89 d6                	mov    esi,edx
c00150c5:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c00150cb:	09 fe                	or     esi,edi
c00150cd:	56                   	push   esi
c00150ce:	50                   	push   eax
c00150cf:	51                   	push   ecx
c00150d0:	e8 a7 44 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c00150d5:	83 c4 2c             	add    esp,0x2c
c00150d8:	83 f0 01             	xor    eax,0x1
c00150db:	5b                   	pop    ebx
c00150dc:	0f b6 c0             	movzx  eax,al
c00150df:	5e                   	pop    esi
c00150e0:	31 d2                	xor    edx,edx
c00150e2:	5f                   	pop    edi
c00150e3:	5d                   	pop    ebp
c00150e4:	c3                   	ret    

c00150e5 <SysSymlink(regs*)>:
c00150e5:	56                   	push   esi
c00150e6:	83 c8 ff             	or     eax,0xffffffff
c00150e9:	53                   	push   ebx
c00150ea:	89 c2                	mov    edx,eax
c00150ec:	81 ec 34 02 00 00    	sub    esp,0x234
c00150f2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00150f9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00150fd:	74 50                	je     c001514f <SysSymlink(regs*)+0x6a>
c00150ff:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0015102:	85 c9                	test   ecx,ecx
c0015104:	74 49                	je     c001514f <SysSymlink(regs*)+0x6a>
c0015106:	6a 01                	push   0x1
c0015108:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001510d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015110:	05 0c 01 00 00       	add    eax,0x10c
c0015115:	50                   	push   eax
c0015116:	51                   	push   ecx
c0015117:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001511b:	56                   	push   esi
c001511c:	e8 51 2d ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015121:	6a 01                	push   0x1
c0015123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015128:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001512b:	05 0c 01 00 00       	add    eax,0x10c
c0015130:	50                   	push   eax
c0015131:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015134:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001513b:	53                   	push   ebx
c001513c:	e8 31 2d ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015141:	83 c4 18             	add    esp,0x18
c0015144:	56                   	push   esi
c0015145:	53                   	push   ebx
c0015146:	e8 55 29 ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c001514b:	83 c4 10             	add    esp,0x10
c001514e:	99                   	cdq    
c001514f:	81 c4 34 02 00 00    	add    esp,0x234
c0015155:	5b                   	pop    ebx
c0015156:	5e                   	pop    esi
c0015157:	c3                   	ret    

c0015158 <SysTimezone(regs*)>:
c0015158:	83 ec 0c             	sub    esp,0xc
c001515b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001515f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015163:	75 17                	jne    c001517c <SysTimezone(regs*)+0x24>
c0015165:	83 ec 0c             	sub    esp,0xc
c0015168:	68 6c 51 02 c0       	push   0xc002516c
c001516d:	e8 0a 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015172:	83 c8 ff             	or     eax,0xffffffff
c0015175:	83 c4 10             	add    esp,0x10
c0015178:	89 c2                	mov    edx,eax
c001517a:	eb 16                	jmp    c0015192 <SysTimezone(regs*)+0x3a>
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015182:	e8 82 3e ff ff       	call   c0009009 <KeSetTimezone(int)>
c0015187:	31 d2                	xor    edx,edx
c0015189:	83 f0 01             	xor    eax,0x1
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	0f b6 c0             	movzx  eax,al
c0015192:	83 c4 0c             	add    esp,0xc
c0015195:	c3                   	ret    

c0015196 <SysTruncate(regs*)>:
c0015196:	55                   	push   ebp
c0015197:	57                   	push   edi
c0015198:	31 ff                	xor    edi,edi
c001519a:	56                   	push   esi
c001519b:	53                   	push   ebx
c001519c:	83 ec 0c             	sub    esp,0xc
c001519f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151a3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00151a6:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00151a9:	89 ce                	mov    esi,ecx
c00151ab:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00151af:	0f 84 9a 00 00 00    	je     c001524f <SysTruncate(regs*)+0xb9>
c00151b5:	83 ec 0c             	sub    esp,0xc
c00151b8:	68 14 01 00 00       	push   0x114
c00151bd:	e8 9d ab ff ff       	call   c000fd5f <malloc>
c00151c2:	83 c4 0c             	add    esp,0xc
c00151c5:	89 c3                	mov    ebx,eax
c00151c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00151cf:	55                   	push   ebp
c00151d0:	53                   	push   ebx
c00151d1:	e8 b4 2f ff ff       	call   c000818a <File::File(char const*, Process*)>
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	31 d2                	xor    edx,edx
c00151db:	b8 03 00 00 00       	mov    eax,0x3
c00151e0:	85 db                	test   ebx,ebx
c00151e2:	0f 84 a2 00 00 00    	je     c001528a <SysTruncate(regs*)+0xf4>
c00151e8:	51                   	push   ecx
c00151e9:	51                   	push   ecx
c00151ea:	6a 02                	push   0x2
c00151ec:	53                   	push   ebx
c00151ed:	e8 b6 2f ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c00151f2:	83 c4 10             	add    esp,0x10
c00151f5:	85 c0                	test   eax,eax
c00151f7:	74 13                	je     c001520c <SysTruncate(regs*)+0x76>
c00151f9:	83 ec 0c             	sub    esp,0xc
c00151fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151fe:	53                   	push   ebx
c00151ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	b8 04 00 00 00       	mov    eax,0x4
c001520a:	eb 7c                	jmp    c0015288 <SysTruncate(regs*)+0xf2>
c001520c:	52                   	push   edx
c001520d:	57                   	push   edi
c001520e:	56                   	push   esi
c001520f:	53                   	push   ebx
c0015210:	e8 a7 30 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	85 c0                	test   eax,eax
c001521a:	74 1b                	je     c0015237 <SysTruncate(regs*)+0xa1>
c001521c:	83 ec 0c             	sub    esp,0xc
c001521f:	53                   	push   ebx
c0015220:	e8 e1 2f ff ff       	call   c0008206 <File::close()>
c0015225:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001522a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	b8 05 00 00 00       	mov    eax,0x5
c0015235:	eb 51                	jmp    c0015288 <SysTruncate(regs*)+0xf2>
c0015237:	83 ec 0c             	sub    esp,0xc
c001523a:	53                   	push   ebx
c001523b:	e8 c6 2f ff ff       	call   c0008206 <File::close()>
c0015240:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015242:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015245:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	31 c0                	xor    eax,eax
c001524d:	eb 39                	jmp    c0015288 <SysTruncate(regs*)+0xf2>
c001524f:	31 d2                	xor    edx,edx
c0015251:	b8 01 00 00 00       	mov    eax,0x1
c0015256:	83 fd 02             	cmp    ebp,0x2
c0015259:	7e 2f                	jle    c001528a <SysTruncate(regs*)+0xf4>
c001525b:	83 ec 0c             	sub    esp,0xc
c001525e:	51                   	push   ecx
c001525f:	e8 9d e1 ff ff       	call   c0013401 <KeGetFileFromDescriptor(int)>
c0015264:	83 c4 10             	add    esp,0x10
c0015267:	89 c1                	mov    ecx,eax
c0015269:	31 d2                	xor    edx,edx
c001526b:	b8 02 00 00 00       	mov    eax,0x2
c0015270:	85 c9                	test   ecx,ecx
c0015272:	74 16                	je     c001528a <SysTruncate(regs*)+0xf4>
c0015274:	50                   	push   eax
c0015275:	57                   	push   edi
c0015276:	56                   	push   esi
c0015277:	51                   	push   ecx
c0015278:	e8 3f 30 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c001527d:	83 c4 10             	add    esp,0x10
c0015280:	85 c0                	test   eax,eax
c0015282:	0f 95 c0             	setne  al
c0015285:	0f b6 c0             	movzx  eax,al
c0015288:	31 d2                	xor    edx,edx
c001528a:	83 c4 0c             	add    esp,0xc
c001528d:	5b                   	pop    ebx
c001528e:	5e                   	pop    esi
c001528f:	5f                   	pop    edi
c0015290:	5d                   	pop    ebp
c0015291:	c3                   	ret    

c0015292 <SysWrite(regs*)>:
c0015292:	57                   	push   edi
c0015293:	56                   	push   esi
c0015294:	53                   	push   ebx
c0015295:	83 ec 10             	sub    esp,0x10
c0015298:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001529c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001529f:	83 f8 02             	cmp    eax,0x2
c00152a2:	77 10                	ja     c00152b4 <SysWrite(regs*)+0x22>
c00152a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152ac:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00152b2:	eb 0e                	jmp    c00152c2 <SysWrite(regs*)+0x30>
c00152b4:	83 ec 0c             	sub    esp,0xc
c00152b7:	50                   	push   eax
c00152b8:	e8 44 e1 ff ff       	call   c0013401 <KeGetFileFromDescriptor(int)>
c00152bd:	83 c4 10             	add    esp,0x10
c00152c0:	89 c1                	mov    ecx,eax
c00152c2:	83 c8 ff             	or     eax,0xffffffff
c00152c5:	85 c9                	test   ecx,ecx
c00152c7:	89 c2                	mov    edx,eax
c00152c9:	74 28                	je     c00152f3 <SysWrite(regs*)+0x61>
c00152cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00152d3:	31 ff                	xor    edi,edi
c00152d5:	83 ec 0c             	sub    esp,0xc
c00152d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00152da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00152de:	52                   	push   edx
c00152df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00152e2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00152e5:	57                   	push   edi
c00152e6:	56                   	push   esi
c00152e7:	51                   	push   ecx
c00152e8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00152eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00152ef:	83 c4 20             	add    esp,0x20
c00152f2:	99                   	cdq    
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	5b                   	pop    ebx
c00152f7:	5e                   	pop    esi
c00152f8:	5f                   	pop    edi
c00152f9:	c3                   	ret    

c00152fa <SysWsbe(regs*)>:
c00152fa:	55                   	push   ebp
c00152fb:	57                   	push   edi
c00152fc:	56                   	push   esi
c00152fd:	53                   	push   ebx
c00152fe:	83 ec 3c             	sub    esp,0x3c
c0015301:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015305:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c001530c:	75 2d                	jne    c001533b <SysWsbe(regs*)+0x41>
c001530e:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015315:	75 24                	jne    c001533b <SysWsbe(regs*)+0x41>
c0015317:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001531e:	75 1b                	jne    c001533b <SysWsbe(regs*)+0x41>
c0015320:	6a 01                	push   0x1
c0015322:	6a 00                	push   0x0
c0015324:	68 79 9f 00 c0       	push   0xc0009f79
c0015329:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c001532f:	e8 ec 1c 00 00       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c0015334:	83 c4 10             	add    esp,0x10
c0015337:	31 c0                	xor    eax,eax
c0015339:	eb 52                	jmp    c001538d <SysWsbe(regs*)+0x93>
c001533b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001533f:	be 81 51 02 c0       	mov    esi,0xc0025181
c0015344:	b9 0b 00 00 00       	mov    ecx,0xb
c0015349:	fc                   	cld    
c001534a:	83 ec 0c             	sub    esp,0xc
c001534d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001534f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015358:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001535b:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015361:	8b 06                	mov    eax,DWORD PTR [esi]
c0015363:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015366:	57                   	push   edi
c0015367:	e8 04 b2 fe ff       	call   c0000570 <strlen>
c001536c:	5a                   	pop    edx
c001536d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015371:	52                   	push   edx
c0015372:	31 d2                	xor    edx,edx
c0015374:	57                   	push   edi
c0015375:	52                   	push   edx
c0015376:	50                   	push   eax
c0015377:	56                   	push   esi
c0015378:	ff d5                	call   ebp
c001537a:	83 c4 14             	add    esp,0x14
c001537d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015380:	e8 5b 27 00 00       	call   c0017ae0 <terminateTask(int)>
c0015385:	83 c4 10             	add    esp,0x10
c0015388:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001538d:	83 c4 3c             	add    esp,0x3c
c0015390:	31 d2                	xor    edx,edx
c0015392:	5b                   	pop    ebx
c0015393:	5e                   	pop    esi
c0015394:	5f                   	pop    edi
c0015395:	5d                   	pop    ebp
c0015396:	c3                   	ret    

c0015397 <SysYield(regs*)>:
c0015397:	83 ec 0c             	sub    esp,0xc
c001539a:	fa                   	cli    
c001539b:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c00153a1:	e8 3a 1f 00 00       	call   c00172e0 <schedule()>
c00153a6:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00153ad:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00153b4:	75 01                	jne    c00153b7 <SysYield(regs*)+0x20>
c00153b6:	fb                   	sti    
c00153b7:	31 c0                	xor    eax,eax
c00153b9:	31 d2                	xor    edx,edx
c00153bb:	83 c4 0c             	add    esp,0xc
c00153be:	c3                   	ret    
c00153bf:	90                   	nop

c00153c0 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00153c0:	55                   	push   ebp
c00153c1:	57                   	push   edi
c00153c2:	56                   	push   esi
c00153c3:	53                   	push   ebx
c00153c4:	83 ec 2c             	sub    esp,0x2c
c00153c7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00153cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00153d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153d7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00153db:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c00153de:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c00153e2:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00153e6:	c1 e0 08             	shl    eax,0x8
c00153e9:	09 c1                	or     ecx,eax
c00153eb:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00153ef:	c1 e0 10             	shl    eax,0x10
c00153f2:	09 c1                	or     ecx,eax
c00153f4:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00153f8:	83 e0 7f             	and    eax,0x7f
c00153fb:	c1 e0 18             	shl    eax,0x18
c00153fe:	09 c8                	or     eax,ecx
c0015400:	89 c5                	mov    ebp,eax
c0015402:	89 f8                	mov    eax,edi
c0015404:	80 f4 00             	xor    ah,0x0
c0015407:	89 c3                	mov    ebx,eax
c0015409:	89 e8                	mov    eax,ebp
c001540b:	80 f4 00             	xor    ah,0x0
c001540e:	89 c6                	mov    esi,eax
c0015410:	89 f0                	mov    eax,esi
c0015412:	09 d8                	or     eax,ebx
c0015414:	74 42                	je     c0015458 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015416:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001541a:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c001541d:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015421:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015425:	c1 e0 08             	shl    eax,0x8
c0015428:	09 c6                	or     esi,eax
c001542a:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001542e:	c1 e0 10             	shl    eax,0x10
c0015431:	09 c6                	or     esi,eax
c0015433:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015437:	83 e0 7f             	and    eax,0x7f
c001543a:	c1 e0 18             	shl    eax,0x18
c001543d:	09 f0                	or     eax,esi
c001543f:	89 c3                	mov    ebx,eax
c0015441:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0015446:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c001544c:	29 c1                	sub    ecx,eax
c001544e:	19 d3                	sbb    ebx,edx
c0015450:	89 c8                	mov    eax,ecx
c0015452:	89 da                	mov    edx,ebx
c0015454:	eb 0e                	jmp    c0015464 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015456:	66 90                	xchg   ax,ax
c0015458:	b8 00 00 00 00       	mov    eax,0x0
c001545d:	ba 00 00 00 00       	mov    edx,0x0
c0015462:	66 90                	xchg   ax,ax
c0015464:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015468:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001546c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015470:	80 f4 00             	xor    ah,0x0
c0015473:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001547b:	80 f4 00             	xor    ah,0x0
c001547e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015482:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015486:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001548a:	89 e8                	mov    eax,ebp
c001548c:	09 f8                	or     eax,edi
c001548e:	74 30                	je     c00154c0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0015490:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c0015496:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c001549c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00154a4:	01 c8                	add    eax,ecx
c00154a6:	11 da                	adc    edx,ebx
c00154a8:	89 c6                	mov    esi,eax
c00154aa:	83 e6 ff             	and    esi,0xffffffff
c00154ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00154b0:	89 d0                	mov    eax,edx
c00154b2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00154b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154bb:	eb 13                	jmp    c00154d0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00154bd:	8d 76 00             	lea    esi,[esi+0x0]
c00154c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00154c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00154cf:	90                   	nop
c00154d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154d4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00154d7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00154db:	89 cf                	mov    edi,ecx
c00154dd:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c00154e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00154e3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00154e7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00154ec:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c00154ef:	83 e1 00             	and    ecx,0x0
c00154f2:	09 ca                	or     edx,ecx
c00154f4:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00154f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00154fb:	c1 ea 08             	shr    edx,0x8
c00154fe:	0f b6 d2             	movzx  edx,dl
c0015501:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015504:	83 e1 00             	and    ecx,0x0
c0015507:	09 ca                	or     edx,ecx
c0015509:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001550c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015510:	c1 ea 10             	shr    edx,0x10
c0015513:	0f b6 d2             	movzx  edx,dl
c0015516:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015519:	83 e1 00             	and    ecx,0x0
c001551c:	09 ca                	or     edx,ecx
c001551e:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015521:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015525:	c1 ea 18             	shr    edx,0x18
c0015528:	83 e2 7f             	and    edx,0x7f
c001552b:	89 d3                	mov    ebx,edx
c001552d:	83 e3 7f             	and    ebx,0x7f
c0015530:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015533:	83 e2 80             	and    edx,0xffffff80
c0015536:	88 d1                	mov    cl,dl
c0015538:	88 da                	mov    dl,bl
c001553a:	09 ca                	or     edx,ecx
c001553c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001553f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015543:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015547:	83 c4 2c             	add    esp,0x2c
c001554a:	5b                   	pop    ebx
c001554b:	5e                   	pop    esi
c001554c:	5f                   	pop    edi
c001554d:	5d                   	pop    ebp
c001554e:	c3                   	ret    
c001554f:	90                   	nop

c0015550 <KeCheckAlarm(ThreadControlBlock*)>:
c0015550:	55                   	push   ebp
c0015551:	57                   	push   edi
c0015552:	56                   	push   esi
c0015553:	53                   	push   ebx
c0015554:	83 ec 0c             	sub    esp,0xc
c0015557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001555b:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001555e:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015562:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015566:	c1 e5 08             	shl    ebp,0x8
c0015569:	09 fd                	or     ebp,edi
c001556b:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c001556f:	c1 e7 10             	shl    edi,0x10
c0015572:	09 ef                	or     edi,ebp
c0015574:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015578:	83 e0 7f             	and    eax,0x7f
c001557b:	c1 e0 18             	shl    eax,0x18
c001557e:	09 f8                	or     eax,edi
c0015580:	89 c1                	mov    ecx,eax
c0015582:	89 d0                	mov    eax,edx
c0015584:	80 f4 00             	xor    ah,0x0
c0015587:	89 c3                	mov    ebx,eax
c0015589:	89 c8                	mov    eax,ecx
c001558b:	80 f4 00             	xor    ah,0x0
c001558e:	89 c6                	mov    esi,eax
c0015590:	89 f0                	mov    eax,esi
c0015592:	09 d8                	or     eax,ebx
c0015594:	0f 84 9e 00 00 00    	je     c0015638 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c001559a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001559e:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00155a1:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00155a5:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00155a9:	c1 e6 08             	shl    esi,0x8
c00155ac:	09 de                	or     esi,ebx
c00155ae:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00155b2:	c1 e3 10             	shl    ebx,0x10
c00155b5:	09 f3                	or     ebx,esi
c00155b7:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00155bb:	83 e1 7f             	and    ecx,0x7f
c00155be:	c1 e1 18             	shl    ecx,0x18
c00155c1:	09 d9                	or     ecx,ebx
c00155c3:	89 ca                	mov    edx,ecx
c00155c5:	89 c1                	mov    ecx,eax
c00155c7:	89 d3                	mov    ebx,edx
c00155c9:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00155ce:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00155d4:	39 c8                	cmp    eax,ecx
c00155d6:	89 d0                	mov    eax,edx
c00155d8:	19 d8                	sbb    eax,ebx
c00155da:	72 5c                	jb     c0015638 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00155dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e0:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00155e7:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00155ea:	83 e2 00             	and    edx,0x0
c00155ed:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00155f0:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00155f3:	83 e2 00             	and    edx,0x0
c00155f6:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c00155f9:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c00155fc:	83 e2 00             	and    edx,0x0
c00155ff:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015602:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015605:	83 e2 80             	and    edx,0xffffff80
c0015608:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001560b:	83 ec 0c             	sub    esp,0xc
c001560e:	68 ad 51 02 c0       	push   0xc00251ad
c0015613:	e8 64 19 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015618:	83 c4 10             	add    esp,0x10
c001561b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001561f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015622:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015628:	83 ec 08             	sub    esp,0x8
c001562b:	6a 0e                	push   0xe
c001562d:	50                   	push   eax
c001562e:	e8 b8 bb ff ff       	call   c00111eb <KeRaiseSignal(SigHandlerBlock*, int)>
c0015633:	83 c4 10             	add    esp,0x10
c0015636:	66 90                	xchg   ax,ax
c0015638:	90                   	nop
c0015639:	83 c4 0c             	add    esp,0xc
c001563c:	5b                   	pop    ebx
c001563d:	5e                   	pop    esi
c001563e:	5f                   	pop    edi
c001563f:	5d                   	pop    ebp
c0015640:	c3                   	ret    

c0015641 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015641:	55                   	push   ebp
c0015642:	57                   	push   edi
c0015643:	56                   	push   esi
c0015644:	53                   	push   ebx
c0015645:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001564b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015653:	0f 95 c0             	setne  al
c0015656:	31 d2                	xor    edx,edx
c0015658:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015660:	0f 94 c2             	sete   dl
c0015663:	85 c2                	test   edx,eax
c0015665:	74 34                	je     c001569b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015667:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015672:	74 27                	je     c001569b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015674:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001567b:	05 00 10 00 00       	add    eax,0x1000
c0015680:	89 c1                	mov    ecx,eax
c0015682:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015687:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001568d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015694:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001569b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00156a2:	83 ec 0c             	sub    esp,0xc
c00156a5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00156ab:	6a 01                	push   0x1
c00156ad:	e8 bb de ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c00156b2:	83 c4 10             	add    esp,0x10
c00156b5:	89 c3                	mov    ebx,eax
c00156b7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00156bd:	0f 86 26 01 00 00    	jbe    c00157e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00156c3:	c1 ee 0c             	shr    esi,0xc
c00156c6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00156cd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00156d1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00156d9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00156e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156e4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00156eb:	29 ef                	sub    edi,ebp
c00156ed:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00156f1:	0f 83 f9 00 00 00    	jae    c00157f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c00156f7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00156fd:	76 05                	jbe    c0015704 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00156ff:	bf 00 10 00 00       	mov    edi,0x1000
c0015704:	83 ec 0c             	sub    esp,0xc
c0015707:	31 d2                	xor    edx,edx
c0015709:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015710:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015712:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015716:	50                   	push   eax
c0015717:	8d 74 24 30          	lea    esi,[esp+0x30]
c001571b:	56                   	push   esi
c001571c:	52                   	push   edx
c001571d:	57                   	push   edi
c001571e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015725:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015728:	83 c4 20             	add    esp,0x20
c001572b:	85 c0                	test   eax,eax
c001572d:	75 06                	jne    c0015735 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001572f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015733:	74 13                	je     c0015748 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015735:	83 ec 0c             	sub    esp,0xc
c0015738:	53                   	push   ebx
c0015739:	e8 37 e1 ff ff       	call   c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c001573e:	83 c4 10             	add    esp,0x10
c0015741:	31 c0                	xor    eax,eax
c0015743:	e9 80 01 00 00       	jmp    c00158c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015748:	fa                   	cli    
c0015749:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c001574f:	e8 0e ab ff ff       	call   c0010262 <Phys::allocatePage()>
c0015754:	6a 07                	push   0x7
c0015756:	89 c7                	mov    edi,eax
c0015758:	53                   	push   ebx
c0015759:	50                   	push   eax
c001575a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001575f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015762:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015768:	e8 e3 e4 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001576d:	83 c4 0c             	add    esp,0xc
c0015770:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015777:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001577d:	6a 00                	push   0x0
c001577f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015784:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015787:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001578d:	e8 2a e3 ff ff       	call   c0013abc <VAS::mapOtherVASIn(bool, VAS*)>
c0015792:	58                   	pop    eax
c0015793:	5a                   	pop    edx
c0015794:	68 07 0c 00 00       	push   0xc07
c0015799:	55                   	push   ebp
c001579a:	57                   	push   edi
c001579b:	89 df                	mov    edi,ebx
c001579d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00157a4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157aa:	6a 00                	push   0x0
c00157ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157b4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157ba:	e8 d3 e6 ff ff       	call   c0013e92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00157bf:	b9 00 10 00 00       	mov    ecx,0x1000
c00157c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00157c6:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00157cd:	83 c4 20             	add    esp,0x20
c00157d0:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00157d7:	75 01                	jne    c00157da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00157d9:	fb                   	sti    
c00157da:	81 c5 00 10 00 00    	add    ebp,0x1000
c00157e0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00157e4:	e9 f0 fe ff ff       	jmp    c00156d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00157e9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00157f0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00157f7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00157fd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015803:	0f 86 b1 00 00 00    	jbe    c00158ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015809:	fa                   	cli    
c001580a:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c0015810:	c1 ee 0c             	shr    esi,0xc
c0015813:	51                   	push   ecx
c0015814:	31 ff                	xor    edi,edi
c0015816:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001581d:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015823:	6a 00                	push   0x0
c0015825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001582a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001582d:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015833:	e8 84 e2 ff ff       	call   c0013abc <VAS::mapOtherVASIn(bool, VAS*)>
c0015838:	83 c4 10             	add    esp,0x10
c001583b:	e8 22 aa ff ff       	call   c0010262 <Phys::allocatePage()>
c0015840:	47                   	inc    edi
c0015841:	6a 07                	push   0x7
c0015843:	53                   	push   ebx
c0015844:	50                   	push   eax
c0015845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015849:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001584f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015852:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015858:	e8 f3 e3 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001585d:	58                   	pop    eax
c001585e:	5a                   	pop    edx
c001585f:	68 07 0c 00 00       	push   0xc07
c0015864:	55                   	push   ebp
c0015865:	81 c5 00 10 00 00    	add    ebp,0x1000
c001586b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001586f:	50                   	push   eax
c0015870:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015877:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001587d:	6a 00                	push   0x0
c001587f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015884:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015887:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001588d:	e8 00 e6 ff ff       	call   c0013e92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015892:	83 c4 1c             	add    esp,0x1c
c0015895:	68 00 10 00 00       	push   0x1000
c001589a:	6a 00                	push   0x0
c001589c:	53                   	push   ebx
c001589d:	e8 4e ac fe ff       	call   c00004f0 <memset>
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	39 fe                	cmp    esi,edi
c00158a7:	77 92                	ja     c001583b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00158a9:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00158b0:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00158b7:	75 01                	jne    c00158ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00158b9:	fb                   	sti    
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	53                   	push   ebx
c00158be:	e8 b2 df ff ff       	call   c0013875 <Virt::freeKernelVirtualPages(unsigned long)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	b0 01                	mov    al,0x1
c00158c8:	81 c4 2c 10 00 00    	add    esp,0x102c
c00158ce:	5b                   	pop    ebx
c00158cf:	5e                   	pop    esi
c00158d0:	5f                   	pop    edi
c00158d1:	5d                   	pop    ebp
c00158d2:	c3                   	ret    

c00158d3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00158d3:	55                   	push   ebp
c00158d4:	57                   	push   edi
c00158d5:	56                   	push   esi
c00158d6:	53                   	push   ebx
c00158d7:	83 ec 68             	sub    esp,0x68
c00158da:	68 14 01 00 00       	push   0x114
c00158df:	e8 7b a4 ff ff       	call   c000fd5f <malloc>
c00158e4:	83 c4 0c             	add    esp,0xc
c00158e7:	89 c6                	mov    esi,eax
c00158e9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00158ed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00158f1:	50                   	push   eax
c00158f2:	e8 93 28 ff ff       	call   c000818a <File::File(char const*, Process*)>
c00158f7:	58                   	pop    eax
c00158f8:	5a                   	pop    edx
c00158f9:	6a 01                	push   0x1
c00158fb:	56                   	push   esi
c00158fc:	e8 a7 28 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015901:	83 c4 10             	add    esp,0x10
c0015904:	85 c0                	test   eax,eax
c0015906:	0f 85 f1 01 00 00    	jne    c0015afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c001590c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015914:	83 ec 0c             	sub    esp,0xc
c0015917:	6a 34                	push   0x34
c0015919:	e8 41 a4 ff ff       	call   c000fd5f <malloc>
c001591e:	89 c3                	mov    ebx,eax
c0015920:	58                   	pop    eax
c0015921:	8b 06                	mov    eax,DWORD PTR [esi]
c0015923:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015927:	57                   	push   edi
c0015928:	53                   	push   ebx
c0015929:	6a 00                	push   0x0
c001592b:	6a 34                	push   0x34
c001592d:	56                   	push   esi
c001592e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015931:	83 c4 20             	add    esp,0x20
c0015934:	85 c0                	test   eax,eax
c0015936:	0f 85 c1 01 00 00    	jne    c0015afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c001593c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015942:	0f 85 b5 01 00 00    	jne    c0015afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c0015948:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001594b:	85 c0                	test   eax,eax
c001594d:	0f 84 aa 01 00 00    	je     c0015afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c0015953:	31 d2                	xor    edx,edx
c0015955:	55                   	push   ebp
c0015956:	52                   	push   edx
c0015957:	50                   	push   eax
c0015958:	56                   	push   esi
c0015959:	e8 08 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	85 c0                	test   eax,eax
c0015963:	0f 85 94 01 00 00    	jne    c0015afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c0015969:	83 ec 0c             	sub    esp,0xc
c001596c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001596f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015973:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015977:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001597b:	0f af c2             	imul   eax,edx
c001597e:	50                   	push   eax
c001597f:	e8 db a3 ff ff       	call   c000fd5f <malloc>
c0015984:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015986:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001598a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001598d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015991:	31 ff                	xor    edi,edi
c0015993:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015997:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001599b:	0f af c2             	imul   eax,edx
c001599e:	99                   	cdq    
c001599f:	52                   	push   edx
c00159a0:	50                   	push   eax
c00159a1:	56                   	push   esi
c00159a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159a5:	83 c4 20             	add    esp,0x20
c00159a8:	0f b7 c7             	movzx  eax,di
c00159ab:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00159af:	0f 83 98 00 00 00    	jae    c0015a4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17a>
c00159b5:	6b c0 28             	imul   eax,eax,0x28
c00159b8:	52                   	push   edx
c00159b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159bd:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00159c1:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00159c4:	6b d2 28             	imul   edx,edx,0x28
c00159c7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00159cb:	31 d2                	xor    edx,edx
c00159cd:	52                   	push   edx
c00159ce:	50                   	push   eax
c00159cf:	56                   	push   esi
c00159d0:	e8 91 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00159d5:	83 c4 0c             	add    esp,0xc
c00159d8:	6a 20                	push   0x20
c00159da:	6a 00                	push   0x0
c00159dc:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00159e0:	55                   	push   ebp
c00159e1:	e8 0a ab fe ff       	call   c00004f0 <memset>
c00159e6:	59                   	pop    ecx
c00159e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00159e9:	8d 54 24 38          	lea    edx,[esp+0x38]
c00159ed:	52                   	push   edx
c00159ee:	55                   	push   ebp
c00159ef:	6a 00                	push   0x0
c00159f1:	6a 1f                	push   0x1f
c00159f3:	56                   	push   esi
c00159f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159f7:	83 c4 18             	add    esp,0x18
c00159fa:	55                   	push   ebp
c00159fb:	68 be 51 02 c0       	push   0xc00251be
c0015a00:	e8 4b ad fe ff       	call   c0000750 <strcmp>
c0015a05:	83 c4 10             	add    esp,0x10
c0015a08:	85 c0                	test   eax,eax
c0015a0a:	75 27                	jne    c0015a33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x160>
c0015a0c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015a10:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015a14:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015a1a:	83 ec 0c             	sub    esp,0xc
c0015a1d:	83 c8 80             	or     eax,0xffffff80
c0015a20:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015a26:	68 cd 51 02 c0       	push   0xc00251cd
c0015a2b:	e8 4c 15 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015a30:	83 c4 10             	add    esp,0x10
c0015a33:	47                   	inc    edi
c0015a34:	55                   	push   ebp
c0015a35:	55                   	push   ebp
c0015a36:	8d 44 24 38          	lea    eax,[esp+0x38]
c0015a3a:	50                   	push   eax
c0015a3b:	68 df 51 02 c0       	push   0xc00251df
c0015a40:	e8 37 15 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015a45:	83 c4 10             	add    esp,0x10
c0015a48:	e9 5b ff ff ff       	jmp    c00159a8 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015a4d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015a50:	85 c0                	test   eax,eax
c0015a52:	0f 84 a5 00 00 00    	je     c0015afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c0015a58:	31 d2                	xor    edx,edx
c0015a5a:	57                   	push   edi
c0015a5b:	52                   	push   edx
c0015a5c:	50                   	push   eax
c0015a5d:	56                   	push   esi
c0015a5e:	e8 03 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015a63:	83 c4 10             	add    esp,0x10
c0015a66:	85 c0                	test   eax,eax
c0015a68:	0f 85 8f 00 00 00    	jne    c0015afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c0015a6e:	83 ec 0c             	sub    esp,0xc
c0015a71:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015a75:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015a79:	31 ed                	xor    ebp,ebp
c0015a7b:	0f af c2             	imul   eax,edx
c0015a7e:	50                   	push   eax
c0015a7f:	e8 db a2 ff ff       	call   c000fd5f <malloc>
c0015a84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015a88:	59                   	pop    ecx
c0015a89:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015a8b:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015a8f:	50                   	push   eax
c0015a90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015a94:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015a98:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015a9c:	0f af c2             	imul   eax,edx
c0015a9f:	99                   	cdq    
c0015aa0:	52                   	push   edx
c0015aa1:	50                   	push   eax
c0015aa2:	56                   	push   esi
c0015aa3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015aa6:	83 c4 20             	add    esp,0x20
c0015aa9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ab1:	0f b7 fd             	movzx  edi,bp
c0015ab4:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0015ab8:	0f 83 80 00 00 00    	jae    c0015b3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x26b>
c0015abe:	c1 e7 05             	shl    edi,0x5
c0015ac1:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c0015ac5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015ac8:	75 6e                	jne    c0015b38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x265>
c0015aca:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015acd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ad1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ad8:	52                   	push   edx
c0015ad9:	31 d2                	xor    edx,edx
c0015adb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015ade:	52                   	push   edx
c0015adf:	50                   	push   eax
c0015ae0:	56                   	push   esi
c0015ae1:	e8 80 27 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015ae6:	83 c4 10             	add    esp,0x10
c0015ae9:	85 c0                	test   eax,eax
c0015aeb:	74 17                	je     c0015b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x231>
c0015aed:	83 ec 0c             	sub    esp,0xc
c0015af0:	68 f6 51 02 c0       	push   0xc00251f6
c0015af5:	e8 82 14 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	31 c0                	xor    eax,eax
c0015aff:	e9 8a 00 00 00       	jmp    c0015b8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x2bb>
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015b0a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015b0d:	50                   	push   eax
c0015b0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015b12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b16:	56                   	push   esi
c0015b17:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015b1e:	e8 1e fb ff ff       	call   c0015641 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015b23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b27:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015b2b:	83 c4 20             	add    esp,0x20
c0015b2e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015b32:	73 04                	jae    c0015b38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x265>
c0015b34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b38:	45                   	inc    ebp
c0015b39:	e9 73 ff ff ff       	jmp    c0015ab1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1de>
c0015b3e:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015b42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b4a:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015b59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015b5e:	05 00 10 00 00       	add    eax,0x1000
c0015b63:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b6a:	e8 00 a2 ff ff       	call   c000fd6f <free>
c0015b6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b72:	e8 f8 a1 ff ff       	call   c000fd6f <free>
c0015b77:	58                   	pop    eax
c0015b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b7c:	e8 ee a1 ff ff       	call   c000fd6f <free>
c0015b81:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b84:	e8 7d 26 ff ff       	call   c0008206 <File::close()>
c0015b89:	83 c4 10             	add    esp,0x10
c0015b8c:	b0 01                	mov    al,0x1
c0015b8e:	83 c4 5c             	add    esp,0x5c
c0015b91:	5b                   	pop    ebx
c0015b92:	5e                   	pop    esi
c0015b93:	5f                   	pop    edi
c0015b94:	5d                   	pop    ebp
c0015b95:	c3                   	ret    

c0015b96 <Thr::runtimeReferenceHelper()>:
c0015b96:	83 ec 18             	sub    esp,0x18
c0015b99:	68 fe 51 02 c0       	push   0xc00251fe
c0015b9e:	e8 d9 13 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015ba3:	fa                   	cli    
c0015ba4:	83 c4 10             	add    esp,0x10
c0015ba7:	eb fe                	jmp    c0015ba7 <Thr::runtimeReferenceHelper()+0x11>

c0015ba9 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015ba9:	57                   	push   edi
c0015baa:	56                   	push   esi
c0015bab:	53                   	push   ebx
c0015bac:	31 db                	xor    ebx,ebx
c0015bae:	39 1d 20 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa20,ebx
c0015bb4:	7e 3c                	jle    c0015bf2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015bb6:	8b 34 9d a0 f9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0660]
c0015bbd:	31 ff                	xor    edi,edi
c0015bbf:	39 3c 9d a0 f8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0760],edi
c0015bc6:	7e 27                	jle    c0015bef <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015bc8:	50                   	push   eax
c0015bc9:	50                   	push   eax
c0015bca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015bce:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bd0:	03 04 9d 20 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd06e0]
c0015bd7:	50                   	push   eax
c0015bd8:	e8 73 ab fe ff       	call   c0000750 <strcmp>
c0015bdd:	83 c4 10             	add    esp,0x10
c0015be0:	85 c0                	test   eax,eax
c0015be2:	75 05                	jne    c0015be9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015be4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015be7:	eb 0b                	jmp    c0015bf4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015be9:	83 c6 10             	add    esi,0x10
c0015bec:	47                   	inc    edi
c0015bed:	eb d0                	jmp    c0015bbf <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015bef:	43                   	inc    ebx
c0015bf0:	eb bc                	jmp    c0015bae <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015bf2:	31 c0                	xor    eax,eax
c0015bf4:	5b                   	pop    ebx
c0015bf5:	5e                   	pop    esi
c0015bf6:	5f                   	pop    edi
c0015bf7:	c3                   	ret    

c0015bf8 <Thr::loadKernelSymbolTable(char const*)>:
c0015bf8:	55                   	push   ebp
c0015bf9:	57                   	push   edi
c0015bfa:	56                   	push   esi
c0015bfb:	53                   	push   ebx
c0015bfc:	83 ec 68             	sub    esp,0x68
c0015bff:	8b 35 78 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa78
c0015c05:	68 14 01 00 00       	push   0x114
c0015c0a:	e8 50 a1 ff ff       	call   c000fd5f <malloc>
c0015c0f:	83 c4 0c             	add    esp,0xc
c0015c12:	89 c3                	mov    ebx,eax
c0015c14:	56                   	push   esi
c0015c15:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015c19:	50                   	push   eax
c0015c1a:	e8 6b 25 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015c1f:	5e                   	pop    esi
c0015c20:	5f                   	pop    edi
c0015c21:	6a 01                	push   0x1
c0015c23:	53                   	push   ebx
c0015c24:	e8 7f 25 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	85 c0                	test   eax,eax
c0015c2e:	74 0a                	je     c0015c3a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015c30:	83 ec 0c             	sub    esp,0xc
c0015c33:	68 20 52 02 c0       	push   0xc0025220
c0015c38:	eb 34                	jmp    c0015c6e <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015c3a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015c42:	83 ec 0c             	sub    esp,0xc
c0015c45:	6a 34                	push   0x34
c0015c47:	e8 13 a1 ff ff       	call   c000fd5f <malloc>
c0015c4c:	59                   	pop    ecx
c0015c4d:	89 c7                	mov    edi,eax
c0015c4f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015c53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c55:	56                   	push   esi
c0015c56:	57                   	push   edi
c0015c57:	6a 00                	push   0x0
c0015c59:	6a 34                	push   0x34
c0015c5b:	53                   	push   ebx
c0015c5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c5f:	83 c4 20             	add    esp,0x20
c0015c62:	85 c0                	test   eax,eax
c0015c64:	74 17                	je     c0015c7d <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015c66:	83 ec 0c             	sub    esp,0xc
c0015c69:	68 37 52 02 c0       	push   0xc0025237
c0015c6e:	e8 fb a3 ff ff       	call   c001006e <KePanic(char const*)>
c0015c73:	83 c4 10             	add    esp,0x10
c0015c76:	31 c0                	xor    eax,eax
c0015c78:	e9 31 02 00 00       	jmp    c0015eae <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015c7d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015c83:	75 e1                	jne    c0015c66 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c85:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015c88:	85 c0                	test   eax,eax
c0015c8a:	74 da                	je     c0015c66 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c8c:	52                   	push   edx
c0015c8d:	31 d2                	xor    edx,edx
c0015c8f:	52                   	push   edx
c0015c90:	50                   	push   eax
c0015c91:	53                   	push   ebx
c0015c92:	e8 cf 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015c97:	83 c4 10             	add    esp,0x10
c0015c9a:	85 c0                	test   eax,eax
c0015c9c:	75 c8                	jne    c0015c66 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c9e:	83 ec 0c             	sub    esp,0xc
c0015ca1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015ca5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ca9:	31 ed                	xor    ebp,ebp
c0015cab:	0f af c2             	imul   eax,edx
c0015cae:	50                   	push   eax
c0015caf:	e8 ab a0 ff ff       	call   c000fd5f <malloc>
c0015cb4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015cb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cba:	89 34 24             	mov    DWORD PTR [esp],esi
c0015cbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cc1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015cc5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015cc9:	0f af c2             	imul   eax,edx
c0015ccc:	99                   	cdq    
c0015ccd:	52                   	push   edx
c0015cce:	50                   	push   eax
c0015ccf:	53                   	push   ebx
c0015cd0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cd3:	83 c4 20             	add    esp,0x20
c0015cd6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015cde:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015ce6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015cee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015cf6:	0f b7 f5             	movzx  esi,bp
c0015cf9:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015cfd:	0f 83 a7 00 00 00    	jae    c0015daa <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015d03:	6b f6 28             	imul   esi,esi,0x28
c0015d06:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015d0a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015d0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015d11:	50                   	push   eax
c0015d12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d16:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015d1a:	8b 16                	mov    edx,DWORD PTR [esi]
c0015d1c:	6b c0 28             	imul   eax,eax,0x28
c0015d1f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015d23:	89 d0                	mov    eax,edx
c0015d25:	31 d2                	xor    edx,edx
c0015d27:	52                   	push   edx
c0015d28:	50                   	push   eax
c0015d29:	53                   	push   ebx
c0015d2a:	e8 37 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015d2f:	83 c4 0c             	add    esp,0xc
c0015d32:	6a 20                	push   0x20
c0015d34:	6a 00                	push   0x0
c0015d36:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015d3a:	52                   	push   edx
c0015d3b:	e8 b0 a7 fe ff       	call   c00004f0 <memset>
c0015d40:	58                   	pop    eax
c0015d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d43:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015d47:	51                   	push   ecx
c0015d48:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015d4c:	52                   	push   edx
c0015d4d:	6a 00                	push   0x0
c0015d4f:	6a 1f                	push   0x1f
c0015d51:	53                   	push   ebx
c0015d52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d55:	83 c4 18             	add    esp,0x18
c0015d58:	68 4e 52 02 c0       	push   0xc002524e
c0015d5d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015d61:	52                   	push   edx
c0015d62:	e8 e9 a9 fe ff       	call   c0000750 <strcmp>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	85 c0                	test   eax,eax
c0015d6c:	75 0f                	jne    c0015d7d <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015d6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d7d:	50                   	push   eax
c0015d7e:	50                   	push   eax
c0015d7f:	68 56 52 02 c0       	push   0xc0025256
c0015d84:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015d88:	50                   	push   eax
c0015d89:	e8 c2 a9 fe ff       	call   c0000750 <strcmp>
c0015d8e:	83 c4 10             	add    esp,0x10
c0015d91:	85 c0                	test   eax,eax
c0015d93:	75 0f                	jne    c0015da4 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015d95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015d9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015da0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015da4:	45                   	inc    ebp
c0015da5:	e9 4c ff ff ff       	jmp    c0015cf6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015daa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015daf:	75 10                	jne    c0015dc1 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015db1:	83 ec 0c             	sub    esp,0xc
c0015db4:	68 5e 52 02 c0       	push   0xc002525e
c0015db9:	e8 b0 a2 ff ff       	call   c001006e <KePanic(char const*)>
c0015dbe:	83 c4 10             	add    esp,0x10
c0015dc1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015dc6:	75 10                	jne    c0015dd8 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	68 5e 52 02 c0       	push   0xc002525e
c0015dd0:	e8 99 a2 ff ff       	call   c001006e <KePanic(char const*)>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	31 d2                	xor    edx,edx
c0015dda:	50                   	push   eax
c0015ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ddf:	52                   	push   edx
c0015de0:	50                   	push   eax
c0015de1:	53                   	push   ebx
c0015de2:	e8 7f 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015de7:	5a                   	pop    edx
c0015de8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dec:	e8 6e 9f ff ff       	call   c000fd5f <malloc>
c0015df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015df9:	31 c9                	xor    ecx,ecx
c0015dfb:	5e                   	pop    esi
c0015dfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dfe:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015e02:	55                   	push   ebp
c0015e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e07:	51                   	push   ecx
c0015e08:	52                   	push   edx
c0015e09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015e0d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015e11:	53                   	push   ebx
c0015e12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e15:	83 c4 14             	add    esp,0x14
c0015e18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e1c:	e8 3e 9f ff ff       	call   c000fd5f <malloc>
c0015e21:	89 c6                	mov    esi,eax
c0015e23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e25:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e28:	56                   	push   esi
c0015e29:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015e2d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015e31:	51                   	push   ecx
c0015e32:	52                   	push   edx
c0015e33:	53                   	push   ebx
c0015e34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e3b:	8b 15 20 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa20
c0015e41:	83 c4 1c             	add    esp,0x1c
c0015e44:	c1 e8 04             	shr    eax,0x4
c0015e47:	89 04 95 a0 f8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0760],eax
c0015e4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e52:	31 d2                	xor    edx,edx
c0015e54:	52                   	push   edx
c0015e55:	50                   	push   eax
c0015e56:	53                   	push   ebx
c0015e57:	e8 0a 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e5c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e5e:	31 d2                	xor    edx,edx
c0015e60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e63:	56                   	push   esi
c0015e64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e68:	52                   	push   edx
c0015e69:	50                   	push   eax
c0015e6a:	53                   	push   ebx
c0015e6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e6e:	83 c4 14             	add    esp,0x14
c0015e71:	53                   	push   ebx
c0015e72:	e8 8f 23 ff ff       	call   c0008206 <File::close()>
c0015e77:	5d                   	pop    ebp
c0015e78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e7c:	e8 ee 9e ff ff       	call   c000fd6f <free>
c0015e81:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015e84:	e8 e6 9e ff ff       	call   c000fd6f <free>
c0015e89:	a1 20 fa 02 c0       	mov    eax,ds:0xc002fa20
c0015e8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015e92:	8d 50 01             	lea    edx,[eax+0x1]
c0015e95:	89 0c 85 a0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0660],ecx
c0015e9c:	89 34 85 20 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd06e0],esi
c0015ea3:	89 15 20 fa 02 c0    	mov    DWORD PTR ds:0xc002fa20,edx
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	b0 01                	mov    al,0x1
c0015eae:	83 c4 5c             	add    esp,0x5c
c0015eb1:	5b                   	pop    ebx
c0015eb2:	5e                   	pop    esi
c0015eb3:	5f                   	pop    edi
c0015eb4:	5d                   	pop    ebp
c0015eb5:	c3                   	ret    

c0015eb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015eb6:	55                   	push   ebp
c0015eb7:	57                   	push   edi
c0015eb8:	56                   	push   esi
c0015eb9:	53                   	push   ebx
c0015eba:	81 ec 78 03 00 00    	sub    esp,0x378
c0015ec0:	8a 84 24 94 03 00 00 	mov    al,BYTE PTR [esp+0x394]
c0015ec7:	8b 1d 78 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa78
c0015ecd:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
c0015ed1:	68 14 01 00 00       	push   0x114
c0015ed6:	e8 84 9e ff ff       	call   c000fd5f <malloc>
c0015edb:	83 c4 0c             	add    esp,0xc
c0015ede:	89 c5                	mov    ebp,eax
c0015ee0:	53                   	push   ebx
c0015ee1:	ff b4 24 88 03 00 00 	push   DWORD PTR [esp+0x388]
c0015ee8:	50                   	push   eax
c0015ee9:	e8 9c 22 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015eee:	5e                   	pop    esi
c0015eef:	5f                   	pop    edi
c0015ef0:	6a 01                	push   0x1
c0015ef2:	55                   	push   ebp
c0015ef3:	e8 b0 22 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015ef8:	83 c4 10             	add    esp,0x10
c0015efb:	85 c0                	test   eax,eax
c0015efd:	0f 85 70 07 00 00    	jne    c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f03:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0015f0b:	83 ec 0c             	sub    esp,0xc
c0015f0e:	6a 34                	push   0x34
c0015f10:	e8 4a 9e ff ff       	call   c000fd5f <malloc>
c0015f15:	5b                   	pop    ebx
c0015f16:	89 c7                	mov    edi,eax
c0015f18:	8d 5c 24 64          	lea    ebx,[esp+0x64]
c0015f1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015f1f:	53                   	push   ebx
c0015f20:	57                   	push   edi
c0015f21:	6a 00                	push   0x0
c0015f23:	6a 34                	push   0x34
c0015f25:	55                   	push   ebp
c0015f26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f29:	83 c4 20             	add    esp,0x20
c0015f2c:	85 c0                	test   eax,eax
c0015f2e:	0f 85 3f 07 00 00    	jne    c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f34:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015f3a:	0f 85 33 07 00 00    	jne    c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f40:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015f43:	85 c0                	test   eax,eax
c0015f45:	0f 84 28 07 00 00    	je     c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f4b:	31 d2                	xor    edx,edx
c0015f4d:	51                   	push   ecx
c0015f4e:	52                   	push   edx
c0015f4f:	50                   	push   eax
c0015f50:	55                   	push   ebp
c0015f51:	e8 10 23 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015f56:	83 c4 10             	add    esp,0x10
c0015f59:	85 c0                	test   eax,eax
c0015f5b:	0f 85 12 07 00 00    	jne    c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f61:	83 ec 0c             	sub    esp,0xc
c0015f64:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015f67:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015f6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015f6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015f73:	0f af c2             	imul   eax,edx
c0015f76:	50                   	push   eax
c0015f77:	e8 e3 9d ff ff       	call   c000fd5f <malloc>
c0015f7c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f7f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015f83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015f8a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015f8e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015f92:	0f af c2             	imul   eax,edx
c0015f95:	99                   	cdq    
c0015f96:	52                   	push   edx
c0015f97:	50                   	push   eax
c0015f98:	55                   	push   ebp
c0015f99:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f9c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015f9f:	83 c4 20             	add    esp,0x20
c0015fa2:	85 c0                	test   eax,eax
c0015fa4:	0f 84 c9 06 00 00    	je     c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015faa:	52                   	push   edx
c0015fab:	31 d2                	xor    edx,edx
c0015fad:	52                   	push   edx
c0015fae:	50                   	push   eax
c0015faf:	55                   	push   ebp
c0015fb0:	e8 b1 22 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	85 c0                	test   eax,eax
c0015fba:	0f 85 b3 06 00 00    	jne    c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015fc0:	83 ec 0c             	sub    esp,0xc
c0015fc3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015fc7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015fcb:	31 f6                	xor    esi,esi
c0015fcd:	0f af c2             	imul   eax,edx
c0015fd0:	50                   	push   eax
c0015fd1:	e8 89 9d ff ff       	call   c000fd5f <malloc>
c0015fd6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015fdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fe0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fe4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015fe8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015fec:	0f af c2             	imul   eax,edx
c0015fef:	99                   	cdq    
c0015ff0:	52                   	push   edx
c0015ff1:	50                   	push   eax
c0015ff2:	55                   	push   ebp
c0015ff3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ff6:	83 c4 20             	add    esp,0x20
c0015ff9:	0f b7 de             	movzx  ebx,si
c0015ffc:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0016000:	0f 83 87 00 00 00    	jae    c001608d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016006:	c1 e3 05             	shl    ebx,0x5
c0016009:	03 5c 24 20          	add    ebx,DWORD PTR [esp+0x20]
c001600d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016010:	75 75                	jne    c0016087 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016012:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016015:	31 d2                	xor    edx,edx
c0016017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001601b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001601e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016022:	50                   	push   eax
c0016023:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016026:	52                   	push   edx
c0016027:	50                   	push   eax
c0016028:	55                   	push   ebp
c0016029:	e8 38 22 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001602e:	83 c4 10             	add    esp,0x10
c0016031:	85 c0                	test   eax,eax
c0016033:	0f 85 3a 06 00 00    	jne    c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0016039:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0016040:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016043:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0016047:	31 d2                	xor    edx,edx
c0016049:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001604d:	83 ec 0c             	sub    esp,0xc
c0016050:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016054:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c001605b:	50                   	push   eax
c001605c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016060:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016064:	52                   	push   edx
c0016065:	50                   	push   eax
c0016066:	55                   	push   ebp
c0016067:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001606a:	83 c4 1c             	add    esp,0x1c
c001606d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016070:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016073:	50                   	push   eax
c0016074:	6a 00                	push   0x0
c0016076:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001607a:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c001607e:	50                   	push   eax
c001607f:	e8 6c a4 fe ff       	call   c00004f0 <memset>
c0016084:	83 c4 10             	add    esp,0x10
c0016087:	46                   	inc    esi
c0016088:	e9 6c ff ff ff       	jmp    c0015ff9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001608d:	53                   	push   ebx
c001608e:	31 db                	xor    ebx,ebx
c0016090:	68 00 01 00 00       	push   0x100
c0016095:	6a 00                	push   0x0
c0016097:	8d 44 24 6c          	lea    eax,[esp+0x6c]
c001609b:	50                   	push   eax
c001609c:	e8 4f a4 fe ff       	call   c00004f0 <memset>
c00160a1:	83 c4 0c             	add    esp,0xc
c00160a4:	68 00 01 00 00       	push   0x100
c00160a9:	6a 00                	push   0x0
c00160ab:	8d 84 24 6c 01 00 00 	lea    eax,[esp+0x16c]
c00160b2:	50                   	push   eax
c00160b3:	e8 38 a4 fe ff       	call   c00004f0 <memset>
c00160b8:	83 c4 10             	add    esp,0x10
c00160bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00160c3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00160cb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00160d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00160db:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00160e3:	0f b7 f3             	movzx  esi,bx
c00160e6:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00160ea:	0f 83 2d 01 00 00    	jae    c001621d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00160f0:	6b f6 28             	imul   esi,esi,0x28
c00160f3:	03 74 24 14          	add    esi,DWORD PTR [esp+0x14]
c00160f7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00160fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160fe:	52                   	push   edx
c00160ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016103:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016107:	8b 06                	mov    eax,DWORD PTR [esi]
c0016109:	6b d2 28             	imul   edx,edx,0x28
c001610c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016110:	31 d2                	xor    edx,edx
c0016112:	52                   	push   edx
c0016113:	50                   	push   eax
c0016114:	55                   	push   ebp
c0016115:	e8 4c 21 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001611a:	83 c4 0c             	add    esp,0xc
c001611d:	6a 20                	push   0x20
c001611f:	6a 00                	push   0x0
c0016121:	8d 8c 24 6c 02 00 00 	lea    ecx,[esp+0x26c]
c0016128:	51                   	push   ecx
c0016129:	e8 c2 a3 fe ff       	call   c00004f0 <memset>
c001612e:	59                   	pop    ecx
c001612f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016132:	8d 54 24 68          	lea    edx,[esp+0x68]
c0016136:	52                   	push   edx
c0016137:	8d 8c 24 70 02 00 00 	lea    ecx,[esp+0x270]
c001613e:	51                   	push   ecx
c001613f:	6a 00                	push   0x0
c0016141:	6a 1f                	push   0x1f
c0016143:	55                   	push   ebp
c0016144:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016147:	83 c4 1c             	add    esp,0x1c
c001614a:	6a 09                	push   0x9
c001614c:	68 78 52 02 c0       	push   0xc0025278
c0016151:	8d 8c 24 6c 02 00 00 	lea    ecx,[esp+0x26c]
c0016158:	51                   	push   ecx
c0016159:	e8 22 a2 fe ff       	call   c0000380 <memcmp>
c001615e:	83 c4 10             	add    esp,0x10
c0016161:	85 c0                	test   eax,eax
c0016163:	75 21                	jne    c0016186 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016169:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001616d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016171:	89 54 84 60          	mov    DWORD PTR [esp+eax*4+0x60],edx
c0016175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016178:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c001617f:	89 c8                	mov    eax,ecx
c0016181:	40                   	inc    eax
c0016182:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016186:	50                   	push   eax
c0016187:	6a 09                	push   0x9
c0016189:	68 82 52 02 c0       	push   0xc0025282
c001618e:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0016195:	50                   	push   eax
c0016196:	e8 e5 a1 fe ff       	call   c0000380 <memcmp>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	85 c0                	test   eax,eax
c00161a0:	75 21                	jne    c00161c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00161a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161ae:	89 54 84 60          	mov    DWORD PTR [esp+eax*4+0x60],edx
c00161b2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00161b5:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c00161bc:	89 c8                	mov    eax,ecx
c00161be:	40                   	inc    eax
c00161bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161c3:	50                   	push   eax
c00161c4:	50                   	push   eax
c00161c5:	68 4e 52 02 c0       	push   0xc002524e
c00161ca:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c00161d1:	50                   	push   eax
c00161d2:	e8 79 a5 fe ff       	call   c0000750 <strcmp>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	85 c0                	test   eax,eax
c00161dc:	75 0f                	jne    c00161ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00161de:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00161e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00161ed:	50                   	push   eax
c00161ee:	50                   	push   eax
c00161ef:	68 56 52 02 c0       	push   0xc0025256
c00161f4:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c00161fb:	50                   	push   eax
c00161fc:	e8 4f a5 fe ff       	call   c0000750 <strcmp>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	85 c0                	test   eax,eax
c0016206:	75 0f                	jne    c0016217 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016208:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001620b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001620f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016213:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016217:	43                   	inc    ebx
c0016218:	e9 c6 fe ff ff       	jmp    c00160e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001621d:	31 d2                	xor    edx,edx
c001621f:	50                   	push   eax
c0016220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016224:	52                   	push   edx
c0016225:	50                   	push   eax
c0016226:	55                   	push   ebp
c0016227:	e8 3a 20 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001622c:	58                   	pop    eax
c001622d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016231:	e8 29 9b ff ff       	call   c000fd5f <malloc>
c0016236:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016239:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001623d:	31 d2                	xor    edx,edx
c001623f:	58                   	pop    eax
c0016240:	8d 5c 24 64          	lea    ebx,[esp+0x64]
c0016244:	53                   	push   ebx
c0016245:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016249:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001624d:	52                   	push   edx
c001624e:	50                   	push   eax
c001624f:	55                   	push   ebp
c0016250:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016253:	83 c4 14             	add    esp,0x14
c0016256:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001625a:	e8 00 9b ff ff       	call   c000fd5f <malloc>
c001625f:	31 d2                	xor    edx,edx
c0016261:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016265:	83 c4 0c             	add    esp,0xc
c0016268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001626c:	52                   	push   edx
c001626d:	50                   	push   eax
c001626e:	55                   	push   ebp
c001626f:	e8 f2 1f ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016274:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016277:	31 d2                	xor    edx,edx
c0016279:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001627c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016280:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016284:	52                   	push   edx
c0016285:	50                   	push   eax
c0016286:	55                   	push   ebp
c0016287:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001628a:	83 c4 20             	add    esp,0x20
c001628d:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c0016292:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001629a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001629e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162a2:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00162a6:	0f 84 cb 03 00 00    	je     c0016677 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c1>
c00162ac:	8b 84 94 60 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x160]
c00162b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162b7:	31 d2                	xor    edx,edx
c00162b9:	c1 e8 03             	shr    eax,0x3
c00162bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00162c0:	51                   	push   ecx
c00162c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00162c5:	8b 44 84 64          	mov    eax,DWORD PTR [esp+eax*4+0x64]
c00162c9:	52                   	push   edx
c00162ca:	50                   	push   eax
c00162cb:	55                   	push   ebp
c00162cc:	e8 95 1f ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00162d1:	5b                   	pop    ebx
c00162d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00162d6:	ff b4 84 6c 01 00 00 	push   DWORD PTR [esp+eax*4+0x16c]
c00162dd:	e8 7d 9a ff ff       	call   c000fd5f <malloc>
c00162e2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00162e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00162e9:	31 d2                	xor    edx,edx
c00162eb:	5e                   	pop    esi
c00162ec:	8d 44 24 68          	lea    eax,[esp+0x68]
c00162f0:	50                   	push   eax
c00162f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00162f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162f9:	8b 84 84 74 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x174]
c0016300:	52                   	push   edx
c0016301:	50                   	push   eax
c0016302:	55                   	push   ebp
c0016303:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016306:	83 c4 20             	add    esp,0x20
c0016309:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0016311:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0016315:	39 4c 24 30          	cmp    DWORD PTR [esp+0x30],ecx
c0016319:	0f 8d 3c 03 00 00    	jge    c001665b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a5>
c001631f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016323:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016327:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001632b:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001632e:	83 ec 0c             	sub    esp,0xc
c0016331:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016335:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016339:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001633d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016341:	c1 e8 08             	shr    eax,0x8
c0016344:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0016348:	89 c3                	mov    ebx,eax
c001634a:	c1 e3 04             	shl    ebx,0x4
c001634d:	03 5c 24 50          	add    ebx,DWORD PTR [esp+0x50]
c0016351:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016354:	03 33                	add    esi,DWORD PTR [ebx]
c0016356:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001635a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001635e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016362:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016366:	56                   	push   esi
c0016367:	68 8c 52 02 c0       	push   0xc002528c
c001636c:	e8 0b 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016371:	83 c4 20             	add    esp,0x20
c0016374:	c6 44 24 4a 00       	mov    BYTE PTR [esp+0x4a],0x0
c0016379:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001637e:	0f 85 92 00 00 00    	jne    c0016416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x560>
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	56                   	push   esi
c0016388:	e8 1c f8 ff ff       	call   c0015ba9 <Thr::getAddressOfKernelSymbol(char const*)>
c001638d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	c6 44 24 4a 01       	mov    BYTE PTR [esp+0x4a],0x1
c0016399:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001639e:	75 76                	jne    c0016416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x560>
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	56                   	push   esi
c00163a4:	e8 57 a7 ff ff       	call   c0010b00 <KeResolveCompatibilitySymbol(char*)>
c00163a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00163ad:	83 c4 10             	add    esp,0x10
c00163b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00163b5:	75 5f                	jne    c0016416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x560>
c00163b7:	50                   	push   eax
c00163b8:	50                   	push   eax
c00163b9:	56                   	push   esi
c00163ba:	68 bf 52 02 c0       	push   0xc00252bf
c00163bf:	e8 b8 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00163c4:	58                   	pop    eax
c00163c5:	5a                   	pop    edx
c00163c6:	68 d9 52 02 c0       	push   0xc00252d9
c00163cb:	8d b4 24 6c 02 00 00 	lea    esi,[esp+0x26c]
c00163d2:	56                   	push   esi
c00163d3:	e8 68 a2 fe ff       	call   c0000640 <strcpy>
c00163d8:	59                   	pop    ecx
c00163d9:	58                   	pop    eax
c00163da:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00163de:	03 03                	add    eax,DWORD PTR [ebx]
c00163e0:	50                   	push   eax
c00163e1:	56                   	push   esi
c00163e2:	e8 59 a4 fe ff       	call   c0000840 <strcat>
c00163e7:	58                   	pop    eax
c00163e8:	5a                   	pop    edx
c00163e9:	68 7b 54 02 c0       	push   0xc002547b
c00163ee:	56                   	push   esi
c00163ef:	e8 4c a4 fe ff       	call   c0000840 <strcat>
c00163f4:	83 c4 10             	add    esp,0x10
c00163f7:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00163fc:	0f 84 13 02 00 00    	je     c0016615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c0016402:	83 ec 0c             	sub    esp,0xc
c0016405:	56                   	push   esi
c0016406:	e8 63 9c ff ff       	call   c001006e <KePanic(char const*)>
c001640b:	83 c4 10             	add    esp,0x10
c001640e:	8a 44 24 4b          	mov    al,BYTE PTR [esp+0x4b]
c0016412:	88 44 24 4a          	mov    BYTE PTR [esp+0x4a],al
c0016416:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c001641b:	83 f8 01             	cmp    eax,0x1
c001641e:	0f 85 de 00 00 00    	jne    c0016502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64c>
c0016424:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001642b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001642f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0016433:	01 c3                	add    ebx,eax
c0016435:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0016439:	81 7c 24 24 01 04 00 00 	cmp    DWORD PTR [esp+0x24],0x401
c0016441:	0f 94 c0             	sete   al
c0016444:	81 7c 24 24 01 01 00 00 	cmp    DWORD PTR [esp+0x24],0x101
c001644c:	0f 94 c2             	sete   dl
c001644f:	09 d0                	or     eax,edx
c0016451:	80 7c 24 4a 00       	cmp    BYTE PTR [esp+0x4a],0x0
c0016456:	0f b6 c0             	movzx  eax,al
c0016459:	74 54                	je     c00164af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f9>
c001645b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001645f:	83 ec 0c             	sub    esp,0xc
c0016462:	68 f0 52 02 c0       	push   0xc00252f0
c0016467:	e8 10 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001646c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0016470:	83 c4 10             	add    esp,0x10
c0016473:	03 33                	add    esi,DWORD PTR [ebx]
c0016475:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016479:	85 c0                	test   eax,eax
c001647b:	75 15                	jne    c0016492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c001647d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016481:	66 83 f8 0c          	cmp    ax,0xc
c0016485:	76 05                	jbe    c001648c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d6>
c0016487:	b8 0c 00 00 00       	mov    eax,0xc
c001648c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016490:	76 62                	jbe    c00164f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0016492:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016497:	0f 84 78 01 00 00    	je     c0016615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c001649d:	83 ec 0c             	sub    esp,0xc
c00164a0:	68 fa 52 02 c0       	push   0xc00252fa
c00164a5:	e8 c4 9b ff ff       	call   c001006e <KePanic(char const*)>
c00164aa:	83 c4 10             	add    esp,0x10
c00164ad:	eb 45                	jmp    c00164f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c00164af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00164b3:	03 33                	add    esi,DWORD PTR [ebx]
c00164b5:	85 c0                	test   eax,eax
c00164b7:	75 0a                	jne    c00164c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60d>
c00164b9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00164bd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00164c1:	76 0a                	jbe    c00164cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x617>
c00164c3:	83 ec 0c             	sub    esp,0xc
c00164c6:	68 16 53 02 c0       	push   0xc0025316
c00164cb:	eb 0c                	jmp    c00164d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x623>
c00164cd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00164d1:	83 ec 0c             	sub    esp,0xc
c00164d4:	68 1f 53 02 c0       	push   0xc002531f
c00164d9:	e8 9e 0a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	8d 86 00 00 00 28    	lea    eax,[esi+0x28000000]
c00164e7:	3d ff ff ff 00       	cmp    eax,0xffffff
c00164ec:	77 06                	ja     c00164f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c00164ee:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00164f2:	03 33                	add    esi,DWORD PTR [ebx]
c00164f4:	56                   	push   esi
c00164f5:	53                   	push   ebx
c00164f6:	ff 33                	push   DWORD PTR [ebx]
c00164f8:	68 28 53 02 c0       	push   0xc0025328
c00164fd:	e9 c2 00 00 00       	jmp    c00165c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70e>
c0016502:	83 f8 02             	cmp    eax,0x2
c0016505:	0f 85 e1 00 00 00    	jne    c00165ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001650b:	8b 9c 24 84 03 00 00 	mov    ebx,DWORD PTR [esp+0x384]
c0016512:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c0016516:	03 5c 24 2c          	add    ebx,DWORD PTR [esp+0x2c]
c001651a:	81 7c 24 24 01 04 00 00 	cmp    DWORD PTR [esp+0x24],0x401
c0016522:	74 21                	je     c0016545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68f>
c0016524:	81 7c 24 24 01 01 00 00 	cmp    DWORD PTR [esp+0x24],0x101
c001652c:	74 17                	je     c0016545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68f>
c001652e:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0016532:	b8 0a 00 00 00       	mov    eax,0xa
c0016537:	83 fa 0e             	cmp    edx,0xe
c001653a:	77 03                	ja     c001653f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x689>
c001653c:	8d 42 fc             	lea    eax,[edx-0x4]
c001653f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016543:	76 48                	jbe    c001658d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c0016545:	56                   	push   esi
c0016546:	53                   	push   ebx
c0016547:	ff 33                	push   DWORD PTR [ebx]
c0016549:	68 99 53 02 c0       	push   0xc0025399
c001654e:	e8 29 0a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016553:	58                   	pop    eax
c0016554:	ff 33                	push   DWORD PTR [ebx]
c0016556:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c001655d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016565:	68 63 53 02 c0       	push   0xc0025363
c001656a:	e8 0d 0a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001656f:	83 c4 20             	add    esp,0x20
c0016572:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016577:	0f 84 98 00 00 00    	je     c0016615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c001657d:	83 ec 0c             	sub    esp,0xc
c0016580:	68 d7 53 02 c0       	push   0xc00253d7
c0016585:	e8 e4 9a ff ff       	call   c001006e <KePanic(char const*)>
c001658a:	83 c4 10             	add    esp,0x10
c001658d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001658f:	80 7c 24 4a 00       	cmp    BYTE PTR [esp+0x4a],0x0
c0016594:	74 13                	je     c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f3>
c0016596:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001659a:	2b b4 24 84 03 00 00 	sub    esi,DWORD PTR [esp+0x384]
c00165a1:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00165a5:	01 c6                	add    esi,eax
c00165a7:	eb 06                	jmp    c00165af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f9>
c00165a9:	89 c6                	mov    esi,eax
c00165ab:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00165af:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00165b3:	3d fe ff 0f 00       	cmp    eax,0xffffe
c00165b8:	77 02                	ja     c00165bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c00165ba:	89 c6                	mov    esi,eax
c00165bc:	56                   	push   esi
c00165bd:	53                   	push   ebx
c00165be:	50                   	push   eax
c00165bf:	68 f3 53 02 c0       	push   0xc00253f3
c00165c4:	e8 b3 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00165c9:	59                   	pop    ecx
c00165ca:	ff 33                	push   DWORD PTR [ebx]
c00165cc:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c00165d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00165d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00165db:	68 63 53 02 c0       	push   0xc0025363
c00165e0:	e8 97 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00165e5:	89 33                	mov    DWORD PTR [ebx],esi
c00165e7:	83 c4 20             	add    esp,0x20
c00165ea:	eb 66                	jmp    c0016652 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x79c>
c00165ec:	52                   	push   edx
c00165ed:	52                   	push   edx
c00165ee:	50                   	push   eax
c00165ef:	68 30 54 02 c0       	push   0xc0025430
c00165f4:	e8 83 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00165f9:	83 c4 10             	add    esp,0x10
c00165fc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016601:	74 12                	je     c0016615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c0016603:	83 ec 0c             	sub    esp,0xc
c0016606:	68 3b 54 02 c0       	push   0xc002543b
c001660b:	e8 5e 9a ff ff       	call   c001006e <KePanic(char const*)>
c0016610:	83 c4 10             	add    esp,0x10
c0016613:	eb 3d                	jmp    c0016652 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x79c>
c0016615:	83 ec 0c             	sub    esp,0xc
c0016618:	55                   	push   ebp
c0016619:	e8 e8 1b ff ff       	call   c0008206 <File::close()>
c001661e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016621:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016624:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016627:	59                   	pop    ecx
c0016628:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001662c:	e8 3e 97 ff ff       	call   c000fd6f <free>
c0016631:	5b                   	pop    ebx
c0016632:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016636:	e8 34 97 ff ff       	call   c000fd6f <free>
c001663b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001663e:	e8 2c 97 ff ff       	call   c000fd6f <free>
c0016643:	5e                   	pop    esi
c0016644:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016648:	e8 22 97 ff ff       	call   c000fd6f <free>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	eb 21                	jmp    c0016673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0016652:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0016656:	e9 b6 fc ff ff       	jmp    c0016311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c001665b:	83 ec 0c             	sub    esp,0xc
c001665e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016662:	e8 08 97 ff ff       	call   c000fd6f <free>
c0016667:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	e9 2b fc ff ff       	jmp    c001629e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0016673:	31 c0                	xor    eax,eax
c0016675:	eb 33                	jmp    c00166aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7f4>
c0016677:	83 ec 0c             	sub    esp,0xc
c001667a:	55                   	push   ebp
c001667b:	e8 86 1b ff ff       	call   c0008206 <File::close()>
c0016680:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016683:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016686:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016689:	58                   	pop    eax
c001668a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001668e:	e8 dc 96 ff ff       	call   c000fd6f <free>
c0016693:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016696:	e8 d4 96 ff ff       	call   c000fd6f <free>
c001669b:	5a                   	pop    edx
c001669c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166a0:	e8 ca 96 ff ff       	call   c000fd6f <free>
c00166a5:	83 c4 10             	add    esp,0x10
c00166a8:	b0 01                	mov    al,0x1
c00166aa:	81 c4 6c 03 00 00    	add    esp,0x36c
c00166b0:	5b                   	pop    ebx
c00166b1:	5e                   	pop    esi
c00166b2:	5f                   	pop    edi
c00166b3:	5d                   	pop    ebp
c00166b4:	c3                   	ret    

c00166b5 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00166b5:	56                   	push   esi
c00166b6:	31 d2                	xor    edx,edx
c00166b8:	53                   	push   ebx
c00166b9:	8b 1d 80 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f280
c00166bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166c3:	39 d3                	cmp    ebx,edx
c00166c5:	7e 1b                	jle    c00166e2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00166c7:	8b 04 95 a0 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b60]
c00166ce:	39 c8                	cmp    eax,ecx
c00166d0:	77 0d                	ja     c00166df <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00166d2:	8b 34 95 a0 f2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0d60]
c00166d9:	01 c6                	add    esi,eax
c00166db:	39 ce                	cmp    esi,ecx
c00166dd:	77 05                	ja     c00166e4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00166df:	42                   	inc    edx
c00166e0:	eb e1                	jmp    c00166c3 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00166e2:	31 c0                	xor    eax,eax
c00166e4:	5b                   	pop    ebx
c00166e5:	5e                   	pop    esi
c00166e6:	c3                   	ret    

c00166e7 <Thr::getDriverNameFromAddress(unsigned long)>:
c00166e7:	53                   	push   ebx
c00166e8:	31 c0                	xor    eax,eax
c00166ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00166ee:	8b 1d 80 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f280
c00166f4:	39 c3                	cmp    ebx,eax
c00166f6:	7e 22                	jle    c001671a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00166f8:	8b 14 85 a0 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b60]
c00166ff:	39 ca                	cmp    edx,ecx
c0016701:	77 14                	ja     c0016717 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016703:	03 14 85 a0 f2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0d60]
c001670a:	39 ca                	cmp    edx,ecx
c001670c:	76 09                	jbe    c0016717 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001670e:	8b 04 85 a0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0960]
c0016715:	eb 05                	jmp    c001671c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016717:	40                   	inc    eax
c0016718:	eb da                	jmp    c00166f4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001671a:	31 c0                	xor    eax,eax
c001671c:	5b                   	pop    ebx
c001671d:	c3                   	ret    

c001671e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001671e:	53                   	push   ebx
c001671f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016723:	53                   	push   ebx
c0016724:	e8 8c ff ff ff       	call   c00166b5 <Thr::getDriverBaseFromAddress(unsigned long)>
c0016729:	5a                   	pop    edx
c001672a:	31 d2                	xor    edx,edx
c001672c:	85 c0                	test   eax,eax
c001672e:	74 04                	je     c0016734 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016730:	89 da                	mov    edx,ebx
c0016732:	29 c2                	sub    edx,eax
c0016734:	89 d0                	mov    eax,edx
c0016736:	5b                   	pop    ebx
c0016737:	c3                   	ret    

c0016738 <Thr::loadDLL(char const*, bool)>:
c0016738:	55                   	push   ebp
c0016739:	57                   	push   edi
c001673a:	56                   	push   esi
c001673b:	53                   	push   ebx
c001673c:	81 ec 34 01 00 00    	sub    esp,0x134
c0016742:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016749:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016750:	56                   	push   esi
c0016751:	68 53 54 02 c0       	push   0xc0025453
c0016756:	e8 21 08 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001675b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016762:	e8 f8 95 ff ff       	call   c000fd5f <malloc>
c0016767:	83 c4 0c             	add    esp,0xc
c001676a:	89 c3                	mov    ebx,eax
c001676c:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0016772:	56                   	push   esi
c0016773:	50                   	push   eax
c0016774:	e8 11 1a ff ff       	call   c000818a <File::File(char const*, Process*)>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	85 db                	test   ebx,ebx
c001677e:	75 3c                	jne    c00167bc <Thr::loadDLL(char const*, bool)+0x84>
c0016780:	89 f8                	mov    eax,edi
c0016782:	84 c0                	test   al,al
c0016784:	0f 84 f3 01 00 00    	je     c001697d <Thr::loadDLL(char const*, bool)+0x245>
c001678a:	55                   	push   ebp
c001678b:	55                   	push   ebp
c001678c:	68 64 54 02 c0       	push   0xc0025464
c0016791:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0016795:	55                   	push   ebp
c0016796:	e8 a5 9e fe ff       	call   c0000640 <strcpy>
c001679b:	58                   	pop    eax
c001679c:	5a                   	pop    edx
c001679d:	56                   	push   esi
c001679e:	55                   	push   ebp
c001679f:	e8 9c a0 fe ff       	call   c0000840 <strcat>
c00167a4:	59                   	pop    ecx
c00167a5:	58                   	pop    eax
c00167a6:	68 7b 54 02 c0       	push   0xc002547b
c00167ab:	55                   	push   ebp
c00167ac:	e8 8f a0 fe ff       	call   c0000840 <strcat>
c00167b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00167b4:	e8 b5 98 ff ff       	call   c001006e <KePanic(char const*)>
c00167b9:	83 c4 10             	add    esp,0x10
c00167bc:	51                   	push   ecx
c00167bd:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00167c1:	50                   	push   eax
c00167c2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00167c6:	50                   	push   eax
c00167c7:	53                   	push   ebx
c00167c8:	e8 dd 1c ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	89 c5                	mov    ebp,eax
c00167d2:	85 db                	test   ebx,ebx
c00167d4:	74 0c                	je     c00167e2 <Thr::loadDLL(char const*, bool)+0xaa>
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167db:	53                   	push   ebx
c00167dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	83 ec 0c             	sub    esp,0xc
c00167e5:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00167ea:	50                   	push   eax
c00167eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167f3:	55                   	push   ebp
c00167f4:	68 7d 54 02 c0       	push   0xc002547d
c00167f9:	e8 7e 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00167fe:	83 c4 20             	add    esp,0x20
c0016801:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016806:	75 0a                	jne    c0016812 <Thr::loadDLL(char const*, bool)+0xda>
c0016808:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001680c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016810:	75 3c                	jne    c001684e <Thr::loadDLL(char const*, bool)+0x116>
c0016812:	89 f8                	mov    eax,edi
c0016814:	84 c0                	test   al,al
c0016816:	0f 84 49 01 00 00    	je     c0016965 <Thr::loadDLL(char const*, bool)+0x22d>
c001681c:	51                   	push   ecx
c001681d:	51                   	push   ecx
c001681e:	68 9e 54 02 c0       	push   0xc002549e
c0016823:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016827:	53                   	push   ebx
c0016828:	e8 13 9e fe ff       	call   c0000640 <strcpy>
c001682d:	5d                   	pop    ebp
c001682e:	58                   	pop    eax
c001682f:	56                   	push   esi
c0016830:	53                   	push   ebx
c0016831:	e8 0a a0 fe ff       	call   c0000840 <strcat>
c0016836:	58                   	pop    eax
c0016837:	5a                   	pop    edx
c0016838:	68 7b 54 02 c0       	push   0xc002547b
c001683d:	53                   	push   ebx
c001683e:	e8 fd 9f fe ff       	call   c0000840 <strcat>
c0016843:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016846:	e8 23 98 ff ff       	call   c001006e <KePanic(char const*)>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	52                   	push   edx
c001684f:	6a 03                	push   0x3
c0016851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016855:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016859:	05 ff 0f 00 00       	add    eax,0xfff
c001685e:	83 d2 00             	adc    edx,0x0
c0016861:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016865:	50                   	push   eax
c0016866:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c001686c:	e8 e3 d4 ff ff       	call   c0013d54 <VAS::allocatePages(int, int)>
c0016871:	59                   	pop    ecx
c0016872:	89 c3                	mov    ebx,eax
c0016874:	5d                   	pop    ebp
c0016875:	50                   	push   eax
c0016876:	68 3a 46 02 c0       	push   0xc002463a
c001687b:	e8 fc 06 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016880:	89 34 24             	mov    DWORD PTR [esp],esi
c0016883:	e8 e8 9c fe ff       	call   c0000570 <strlen>
c0016888:	8b 2d 80 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f280
c001688e:	40                   	inc    eax
c001688f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016892:	e8 c8 94 ff ff       	call   c000fd5f <malloc>
c0016897:	89 04 ad a0 f6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0960],eax
c001689e:	58                   	pop    eax
c001689f:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c00168a4:	5a                   	pop    edx
c00168a5:	56                   	push   esi
c00168a6:	ff 34 85 a0 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0960]
c00168ad:	e8 8e 9d fe ff       	call   c0000640 <strcpy>
c00168b2:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c00168b7:	8d 50 01             	lea    edx,[eax+0x1]
c00168ba:	89 1c 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],ebx
c00168c1:	89 15 80 f2 02 c0    	mov    DWORD PTR ds:0xc002f280,edx
c00168c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168cb:	83 c4 0c             	add    esp,0xc
c00168ce:	89 14 85 a0 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d60],edx
c00168d5:	6a 01                	push   0x1
c00168d7:	53                   	push   ebx
c00168d8:	56                   	push   esi
c00168d9:	e8 d8 f5 ff ff       	call   c0015eb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00168de:	83 c4 10             	add    esp,0x10
c00168e1:	0f b6 c0             	movzx  eax,al
c00168e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168e8:	85 c0                	test   eax,eax
c00168ea:	0f 85 89 00 00 00    	jne    c0016979 <Thr::loadDLL(char const*, bool)+0x241>
c00168f0:	89 f8                	mov    eax,edi
c00168f2:	84 c0                	test   al,al
c00168f4:	74 73                	je     c0016969 <Thr::loadDLL(char const*, bool)+0x231>
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	68 b7 54 02 c0       	push   0xc00254b7
c00168fe:	e8 6b 97 ff ff       	call   c001006e <KePanic(char const*)>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	eb 61                	jmp    c0016969 <Thr::loadDLL(char const*, bool)+0x231>
c0016908:	50                   	push   eax
c0016909:	50                   	push   eax
c001690a:	89 e8                	mov    eax,ebp
c001690c:	c1 e0 0c             	shl    eax,0xc
c001690f:	01 d8                	add    eax,ebx
c0016911:	50                   	push   eax
c0016912:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c0016918:	e8 39 cf ff ff       	call   c0013856 <VAS::getPageTableEntry(unsigned long)>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	8b 00                	mov    eax,DWORD PTR [eax]
c0016922:	a8 60                	test   al,0x60
c0016924:	75 11                	jne    c0016937 <Thr::loadDLL(char const*, bool)+0x1ff>
c0016926:	83 ec 0c             	sub    esp,0xc
c0016929:	25 00 f0 ff ff       	and    eax,0xfffff000
c001692e:	50                   	push   eax
c001692f:	e8 c5 98 ff ff       	call   c00101f9 <Phys::freePage(unsigned long)>
c0016934:	83 c4 10             	add    esp,0x10
c0016937:	45                   	inc    ebp
c0016938:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001693c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016940:	05 ff 0f 00 00       	add    eax,0xfff
c0016945:	bf 00 00 00 00       	mov    edi,0x0
c001694a:	83 d2 00             	adc    edx,0x0
c001694d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016951:	c1 ea 0c             	shr    edx,0xc
c0016954:	39 c5                	cmp    ebp,eax
c0016956:	89 d1                	mov    ecx,edx
c0016958:	89 f8                	mov    eax,edi
c001695a:	19 c8                	sbb    eax,ecx
c001695c:	72 aa                	jb     c0016908 <Thr::loadDLL(char const*, bool)+0x1d0>
c001695e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016963:	75 18                	jne    c001697d <Thr::loadDLL(char const*, bool)+0x245>
c0016965:	31 db                	xor    ebx,ebx
c0016967:	eb 14                	jmp    c001697d <Thr::loadDLL(char const*, bool)+0x245>
c0016969:	83 ec 0c             	sub    esp,0xc
c001696c:	68 d6 54 02 c0       	push   0xc00254d6
c0016971:	e8 f8 96 ff ff       	call   c001006e <KePanic(char const*)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	31 ed                	xor    ebp,ebp
c001697b:	eb bb                	jmp    c0016938 <Thr::loadDLL(char const*, bool)+0x200>
c001697d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016983:	89 d8                	mov    eax,ebx
c0016985:	5b                   	pop    ebx
c0016986:	5e                   	pop    esi
c0016987:	5f                   	pop    edi
c0016988:	5d                   	pop    ebp
c0016989:	c3                   	ret    

c001698a <Thr::executeDLL(unsigned long, void*)>:
c001698a:	56                   	push   esi
c001698b:	53                   	push   ebx
c001698c:	52                   	push   edx
c001698d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016991:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016995:	85 db                	test   ebx,ebx
c0016997:	75 10                	jne    c00169a9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	68 f2 54 02 c0       	push   0xc00254f2
c00169a1:	e8 c8 96 ff ff       	call   c001006e <KePanic(char const*)>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	50                   	push   eax
c00169aa:	50                   	push   eax
c00169ab:	53                   	push   ebx
c00169ac:	68 1c 55 02 c0       	push   0xc002551c
c00169b1:	e8 c6 05 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00169b6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00169ba:	89 d8                	mov    eax,ebx
c00169bc:	83 c4 14             	add    esp,0x14
c00169bf:	5b                   	pop    ebx
c00169c0:	5e                   	pop    esi
c00169c1:	ff e0                	jmp    eax

c00169c3 <KeProcessExec(Process*, char const*)>:
c00169c3:	56                   	push   esi
c00169c4:	53                   	push   ebx
c00169c5:	83 ec 04             	sub    esp,0x4
c00169c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169cc:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c00169d2:	85 f6                	test   esi,esi
c00169d4:	74 16                	je     c00169ec <KeProcessExec(Process*, char const*)+0x29>
c00169d6:	83 ec 0c             	sub    esp,0xc
c00169d9:	56                   	push   esi
c00169da:	e8 09 d1 ff ff       	call   c0013ae8 <VAS::~VAS()>
c00169df:	58                   	pop    eax
c00169e0:	5a                   	pop    edx
c00169e1:	6a 14                	push   0x14
c00169e3:	56                   	push   esi
c00169e4:	e8 00 6a ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	83 ec 0c             	sub    esp,0xc
c00169ef:	6a 14                	push   0x14
c00169f1:	e8 69 93 ff ff       	call   c000fd5f <malloc>
c00169f6:	89 c6                	mov    esi,eax
c00169f8:	58                   	pop    eax
c00169f9:	5a                   	pop    edx
c00169fa:	6a 00                	push   0x0
c00169fc:	56                   	push   esi
c00169fd:	e8 86 d5 ff ff       	call   c0013f88 <VAS::VAS(bool)>
c0016a02:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016a08:	59                   	pop    ecx
c0016a09:	5e                   	pop    esi
c0016a0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a0e:	50                   	push   eax
c0016a0f:	53                   	push   ebx
c0016a10:	e8 be ee ff ff       	call   c00158d3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016a15:	83 c4 14             	add    esp,0x14
c0016a18:	31 c0                	xor    eax,eax
c0016a1a:	5b                   	pop    ebx
c0016a1b:	5e                   	pop    esi
c0016a1c:	c3                   	ret    
c0016a1d:	66 90                	xchg   ax,ax
c0016a1f:	90                   	nop

c0016a20 <userModeEntryPoint(void*)>:
c0016a20:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0016a28:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0016a2d:	85 c0                	test   eax,eax
c0016a2f:	75 03                	jne    c0016a34 <userModeEntryPoint(void*)+0x14>
c0016a31:	fb                   	sti    
c0016a32:	66 90                	xchg   ax,ax
c0016a34:	fb                   	sti    
c0016a35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a3d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016a43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a47:	e9 f3 97 fe ff       	jmp    c000023f <goToUsermode>

c0016a4c <changeTSS>:
c0016a4c:	83 ec 14             	sub    esp,0x14
c0016a4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a54:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016a57:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016a5c:	c1 e2 15             	shl    edx,0x15
c0016a5f:	29 d0                	sub    eax,edx
c0016a61:	50                   	push   eax
c0016a62:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0016a67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a6d:	05 68 11 00 00       	add    eax,0x1168
c0016a72:	50                   	push   eax
c0016a73:	e8 a8 c3 ff ff       	call   c0012e20 <TSS::setESP(unsigned long)>
c0016a78:	83 c4 1c             	add    esp,0x1c
c0016a7b:	c3                   	ret    

c0016a7c <switchToThread(ThreadControlBlock*)>:
c0016a7c:	57                   	push   edi
c0016a7d:	8b 0d 4c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa4c
c0016a83:	56                   	push   esi
c0016a84:	85 c9                	test   ecx,ecx
c0016a86:	53                   	push   ebx
c0016a87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a8b:	0f 85 9b 00 00 00    	jne    c0016b2c <switchToThread(ThreadControlBlock*)+0xb0>
c0016a91:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016a95:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016a9b:	0f 84 87 00 00 00    	je     c0016b28 <switchToThread(ThreadControlBlock*)+0xac>
c0016aa1:	b8 00 04 00 00       	mov    eax,0x400
c0016aa6:	29 d0                	sub    eax,edx
c0016aa8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016aab:	d1 f8                	sar    eax,1
c0016aad:	01 d0                	add    eax,edx
c0016aaf:	90                   	nop
c0016ab0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016ab3:	e8 b1 3e 00 00       	call   c001a969 <HalQueryPerformanceCounter()>
c0016ab8:	a3 90 fa 02 c0       	mov    ds:0xc002fa90,eax
c0016abd:	89 15 94 fa 02 c0    	mov    DWORD PTR ds:0xc002fa94,edx
c0016ac3:	89 c6                	mov    esi,eax
c0016ac5:	89 d7                	mov    edi,edx
c0016ac7:	2b 35 80 fa 02 c0    	sub    esi,DWORD PTR ds:0xc002fa80
c0016acd:	a3 80 fa 02 c0       	mov    ds:0xc002fa80,eax
c0016ad2:	1b 3d 84 fa 02 c0    	sbb    edi,DWORD PTR ds:0xc002fa84
c0016ad8:	89 35 88 fa 02 c0    	mov    DWORD PTR ds:0xc002fa88,esi
c0016ade:	89 3d 8c fa 02 c0    	mov    DWORD PTR ds:0xc002fa8c,edi
c0016ae4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016aea:	89 15 84 fa 02 c0    	mov    DWORD PTR ds:0xc002fa84,edx
c0016af0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016af3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016af6:	01 c6                	add    esi,eax
c0016af8:	11 d7                	adc    edi,edx
c0016afa:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016afd:	83 ec 0c             	sub    esp,0xc
c0016b00:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016b03:	53                   	push   ebx
c0016b04:	e8 6e 97 fe ff       	call   c0000277 <switchToThreadASM>
c0016b09:	0f 20 c0             	mov    eax,cr0
c0016b0c:	83 c8 08             	or     eax,0x8
c0016b0f:	0f 22 c0             	mov    cr0,eax
c0016b12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b1e:	5b                   	pop    ebx
c0016b1f:	5e                   	pop    esi
c0016b20:	5f                   	pop    edi
c0016b21:	e9 2a ea ff ff       	jmp    c0015550 <KeCheckAlarm(ThreadControlBlock*)>
c0016b26:	66 90                	xchg   ax,ax
c0016b28:	31 c0                	xor    eax,eax
c0016b2a:	eb 84                	jmp    c0016ab0 <switchToThread(ThreadControlBlock*)+0x34>
c0016b2c:	5b                   	pop    ebx
c0016b2d:	c7 05 48 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x1
c0016b37:	5e                   	pop    esi
c0016b38:	5f                   	pop    edi
c0016b39:	c3                   	ret    
c0016b3a:	66 90                	xchg   ax,ax

c0016b3c <Process::addArgs(char**)>:
c0016b3c:	57                   	push   edi
c0016b3d:	56                   	push   esi
c0016b3e:	53                   	push   ebx
c0016b3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b47:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016b51:	85 ff                	test   edi,edi
c0016b53:	74 4f                	je     c0016ba4 <Process::addArgs(char**)+0x68>
c0016b55:	8b 07                	mov    eax,DWORD PTR [edi]
c0016b57:	85 c0                	test   eax,eax
c0016b59:	74 49                	je     c0016ba4 <Process::addArgs(char**)+0x68>
c0016b5b:	31 db                	xor    ebx,ebx
c0016b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b60:	83 ec 0c             	sub    esp,0xc
c0016b63:	50                   	push   eax
c0016b64:	e8 07 9a fe ff       	call   c0000570 <strlen>
c0016b69:	83 c0 01             	add    eax,0x1
c0016b6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b6f:	e8 eb 91 ff ff       	call   c000fd5f <malloc>
c0016b74:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c0016b7b:	5a                   	pop    edx
c0016b7c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0016b7f:	59                   	pop    ecx
c0016b80:	83 c3 01             	add    ebx,0x1
c0016b83:	52                   	push   edx
c0016b84:	50                   	push   eax
c0016b85:	e8 b6 9a fe ff       	call   c0000640 <strcpy>
c0016b8a:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c0016b90:	83 c4 10             	add    esp,0x10
c0016b93:	83 c1 01             	add    ecx,0x1
c0016b96:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c0016b9c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016b9f:	85 c0                	test   eax,eax
c0016ba1:	75 bd                	jne    c0016b60 <Process::addArgs(char**)+0x24>
c0016ba3:	90                   	nop
c0016ba4:	5b                   	pop    ebx
c0016ba5:	5e                   	pop    esi
c0016ba6:	5f                   	pop    edi
c0016ba7:	c3                   	ret    

c0016ba8 <Process::Process(char const*, Process*, char**)>:
c0016ba8:	56                   	push   esi
c0016ba9:	53                   	push   ebx
c0016baa:	83 ec 14             	sub    esp,0x14
c0016bad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb1:	05 0c 02 00 00       	add    eax,0x20c
c0016bb6:	bb 07 00 00 00       	mov    ebx,0x7
c0016bbb:	89 c6                	mov    esi,eax
c0016bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0016bc0:	85 db                	test   ebx,ebx
c0016bc2:	78 14                	js     c0016bd8 <Process::Process(char const*, Process*, char**)+0x30>
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	56                   	push   esi
c0016bc8:	e8 b3 ba 00 00       	call   c0022680 <ThreadControlBlock::ThreadControlBlock()>
c0016bcd:	83 c4 10             	add    esp,0x10
c0016bd0:	83 c6 73             	add    esi,0x73
c0016bd3:	83 eb 01             	sub    ebx,0x1
c0016bd6:	eb e8                	jmp    c0016bc0 <Process::Process(char const*, Process*, char**)+0x18>
c0016bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdc:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be7:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016bee:	83 ec 0c             	sub    esp,0xc
c0016bf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bf5:	e8 dc 7c ff ff       	call   c000e8d6 <KeNewProcessEnv(Process*)>
c0016bfa:	83 c4 10             	add    esp,0x10
c0016bfd:	89 c2                	mov    edx,eax
c0016bff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c03:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016c16:	a1 3c 71 02 c0       	mov    eax,ds:0xc002713c
c0016c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0016c1e:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0016c24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c28:	89 02                	mov    DWORD PTR [edx],eax
c0016c2a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016c32:	83 ec 0c             	sub    esp,0xc
c0016c35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c39:	e8 21 91 ff ff       	call   c000fd5f <malloc>
c0016c3e:	83 c4 10             	add    esp,0x10
c0016c41:	89 c3                	mov    ebx,eax
c0016c43:	83 ec 08             	sub    esp,0x8
c0016c46:	6a 00                	push   0x0
c0016c48:	53                   	push   ebx
c0016c49:	e8 3a d3 ff ff       	call   c0013f88 <VAS::VAS(bool)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c55:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c71:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016c77:	e8 c7 a4 ff ff       	call   c0011143 <KeInitSignals()>
c0016c7c:	89 c2                	mov    edx,eax
c0016c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c82:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c8c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c92:	85 c0                	test   eax,eax
c0016c94:	74 42                	je     c0016cd8 <Process::Process(char const*, Process*, char**)+0x130>
c0016c96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c9a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ca0:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016caa:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016cba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cc4:	05 0c 01 00 00       	add    eax,0x10c
c0016cc9:	83 ec 08             	sub    esp,0x8
c0016ccc:	52                   	push   edx
c0016ccd:	50                   	push   eax
c0016cce:	e8 6d 99 fe ff       	call   c0000640 <strcpy>
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	eb 7c                	jmp    c0016d54 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016cd8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ce7:	e8 73 90 ff ff       	call   c000fd5f <malloc>
c0016cec:	83 c4 10             	add    esp,0x10
c0016cef:	89 c3                	mov    ebx,eax
c0016cf1:	83 ec 08             	sub    esp,0x8
c0016cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cf8:	53                   	push   ebx
c0016cf9:	e8 22 be ff ff       	call   c0012b20 <VgaText::VgaText(char const*)>
c0016cfe:	83 c4 10             	add    esp,0x10
c0016d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d05:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016d0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d0f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d15:	83 ec 0c             	sub    esp,0xc
c0016d18:	50                   	push   eax
c0016d19:	e8 58 b6 ff ff       	call   c0012376 <addToTerminalCycle(VgaText*)>
c0016d1e:	83 c4 10             	add    esp,0x10
c0016d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d25:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d2b:	83 ec 0c             	sub    esp,0xc
c0016d2e:	50                   	push   eax
c0016d2f:	e8 b3 b8 ff ff       	call   c00125e7 <setActiveTerminal(VgaText*)>
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d3b:	05 0c 01 00 00       	add    eax,0x10c
c0016d40:	83 ec 08             	sub    esp,0x8
c0016d43:	68 3b 55 02 c0       	push   0xc002553b
c0016d48:	50                   	push   eax
c0016d49:	e8 f2 98 fe ff       	call   c0000640 <strcpy>
c0016d4e:	83 c4 10             	add    esp,0x10
c0016d51:	8d 76 00             	lea    esi,[esi+0x0]
c0016d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d58:	83 c0 0c             	add    eax,0xc
c0016d5b:	83 ec 08             	sub    esp,0x8
c0016d5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d62:	50                   	push   eax
c0016d63:	e8 d8 98 fe ff       	call   c0000640 <strcpy>
c0016d68:	83 c4 10             	add    esp,0x10
c0016d6b:	83 ec 08             	sub    esp,0x8
c0016d6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d76:	e8 c1 fd ff ff       	call   c0016b3c <Process::addArgs(char**)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d82:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016d88:	83 e2 7f             	and    edx,0x7f
c0016d8b:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016d91:	83 ec 08             	sub    esp,0x8
c0016d94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d9c:	e8 32 eb ff ff       	call   c00158d3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016da1:	83 c4 10             	add    esp,0x10
c0016da4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016da8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016dac:	83 f0 01             	xor    eax,0x1
c0016daf:	88 c2                	mov    dl,al
c0016db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db5:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0016dc1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016dc6:	52                   	push   edx
c0016dc7:	50                   	push   eax
c0016dc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dcc:	68 94 55 02 c0       	push   0xc0025594
c0016dd1:	e8 a6 01 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016dd6:	83 c4 10             	add    esp,0x10
c0016dd9:	90                   	nop
c0016dda:	83 c4 14             	add    esp,0x14
c0016ddd:	5b                   	pop    ebx
c0016dde:	5e                   	pop    esi
c0016ddf:	c3                   	ret    

c0016de0 <Process::Process(bool, char const*, Process*, char**)>:
c0016de0:	56                   	push   esi
c0016de1:	53                   	push   ebx
c0016de2:	83 ec 24             	sub    esp,0x24
c0016de5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016de9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016df1:	05 0c 02 00 00       	add    eax,0x20c
c0016df6:	bb 07 00 00 00       	mov    ebx,0x7
c0016dfb:	89 c6                	mov    esi,eax
c0016dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016e00:	85 db                	test   ebx,ebx
c0016e02:	78 14                	js     c0016e18 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	56                   	push   esi
c0016e08:	e8 73 b8 00 00       	call   c0022680 <ThreadControlBlock::ThreadControlBlock()>
c0016e0d:	83 c4 10             	add    esp,0x10
c0016e10:	83 c6 73             	add    esi,0x73
c0016e13:	83 eb 01             	sub    ebx,0x1
c0016e16:	eb e8                	jmp    c0016e00 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e1c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016e23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e27:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016e2e:	83 ec 0c             	sub    esp,0xc
c0016e31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e35:	e8 9c 7a ff ff       	call   c000e8d6 <KeNewProcessEnv(Process*)>
c0016e3a:	83 c4 10             	add    esp,0x10
c0016e3d:	89 c2                	mov    edx,eax
c0016e3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e43:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016e49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e4d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016e56:	a1 3c 71 02 c0       	mov    eax,ds:0xc002713c
c0016e5b:	8d 50 01             	lea    edx,[eax+0x1]
c0016e5e:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0016e64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e68:	89 02                	mov    DWORD PTR [edx],eax
c0016e6a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016e72:	83 ec 0c             	sub    esp,0xc
c0016e75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016e79:	e8 e1 8e ff ff       	call   c000fd5f <malloc>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	89 c3                	mov    ebx,eax
c0016e83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016e88:	83 ec 08             	sub    esp,0x8
c0016e8b:	50                   	push   eax
c0016e8c:	53                   	push   ebx
c0016e8d:	e8 f6 d0 ff ff       	call   c0013f88 <VAS::VAS(bool)>
c0016e92:	83 c4 10             	add    esp,0x10
c0016e95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e99:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ea3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016ead:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016eb1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016eb5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016ebb:	e8 83 a2 ff ff       	call   c0011143 <KeInitSignals()>
c0016ec0:	89 c2                	mov    edx,eax
c0016ec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ec6:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016ecc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ed0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ed6:	85 c0                	test   eax,eax
c0016ed8:	74 42                	je     c0016f1c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016eda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ede:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ee4:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016eea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016eee:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016ef4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ef8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016efe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016f04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f08:	05 0c 01 00 00       	add    eax,0x10c
c0016f0d:	83 ec 08             	sub    esp,0x8
c0016f10:	52                   	push   edx
c0016f11:	50                   	push   eax
c0016f12:	e8 29 97 fe ff       	call   c0000640 <strcpy>
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	eb 7c                	jmp    c0016f98 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016f1c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016f24:	83 ec 0c             	sub    esp,0xc
c0016f27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f2b:	e8 2f 8e ff ff       	call   c000fd5f <malloc>
c0016f30:	83 c4 10             	add    esp,0x10
c0016f33:	89 c3                	mov    ebx,eax
c0016f35:	83 ec 08             	sub    esp,0x8
c0016f38:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f3c:	53                   	push   ebx
c0016f3d:	e8 de bb ff ff       	call   c0012b20 <VgaText::VgaText(char const*)>
c0016f42:	83 c4 10             	add    esp,0x10
c0016f45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f49:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016f4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f53:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016f59:	83 ec 0c             	sub    esp,0xc
c0016f5c:	50                   	push   eax
c0016f5d:	e8 14 b4 ff ff       	call   c0012376 <addToTerminalCycle(VgaText*)>
c0016f62:	83 c4 10             	add    esp,0x10
c0016f65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f69:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016f6f:	83 ec 0c             	sub    esp,0xc
c0016f72:	50                   	push   eax
c0016f73:	e8 6f b6 ff ff       	call   c00125e7 <setActiveTerminal(VgaText*)>
c0016f78:	83 c4 10             	add    esp,0x10
c0016f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f7f:	05 0c 01 00 00       	add    eax,0x10c
c0016f84:	83 ec 08             	sub    esp,0x8
c0016f87:	68 3b 55 02 c0       	push   0xc002553b
c0016f8c:	50                   	push   eax
c0016f8d:	e8 ae 96 fe ff       	call   c0000640 <strcpy>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]
c0016f98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f9c:	83 c0 0c             	add    eax,0xc
c0016f9f:	83 ec 08             	sub    esp,0x8
c0016fa2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fa6:	50                   	push   eax
c0016fa7:	e8 94 96 fe ff       	call   c0000640 <strcpy>
c0016fac:	83 c4 10             	add    esp,0x10
c0016faf:	83 ec 08             	sub    esp,0x8
c0016fb2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fba:	e8 7d fb ff ff       	call   c0016b3c <Process::addArgs(char**)>
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	90                   	nop
c0016fc3:	83 c4 24             	add    esp,0x24
c0016fc6:	5b                   	pop    ebx
c0016fc7:	5e                   	pop    esi
c0016fc8:	c3                   	ret    
c0016fc9:	8d 76 00             	lea    esi,[esi+0x0]

c0016fcc <taskStartupFunction>:
c0016fcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fd1:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016fd4:	c3                   	ret    
c0016fd5:	8d 76 00             	lea    esi,[esi+0x0]

c0016fd8 <KeDisablePreemption()>:
c0016fd8:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0016fdd:	85 c0                	test   eax,eax
c0016fdf:	75 13                	jne    c0016ff4 <KeDisablePreemption()+0x1c>
c0016fe1:	8a 15 d8 d0 02 c0    	mov    dl,BYTE PTR ds:0xc002d0d8
c0016fe7:	c6 05 d8 d0 02 c0 00 	mov    BYTE PTR ds:0xc002d0d8,0x0
c0016fee:	88 15 28 fa 02 c0    	mov    BYTE PTR ds:0xc002fa28,dl
c0016ff4:	83 c0 01             	add    eax,0x1
c0016ff7:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0016ffc:	c3                   	ret    
c0016ffd:	8d 76 00             	lea    esi,[esi+0x0]

c0017000 <KeRestorePreemption()>:
c0017000:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0017005:	83 e8 01             	sub    eax,0x1
c0017008:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c001700d:	75 0d                	jne    c001701c <KeRestorePreemption()+0x1c>
c001700f:	a0 28 fa 02 c0       	mov    al,ds:0xc002fa28
c0017014:	a2 d8 d0 02 c0       	mov    ds:0xc002d0d8,al
c0017019:	8d 76 00             	lea    esi,[esi+0x0]
c001701c:	c3                   	ret    
c001701d:	90                   	nop
c001701e:	66 90                	xchg   ax,ax

c0017020 <Process::createThread(void (*)(void*), void*, int)>:
c0017020:	55                   	push   ebp
c0017021:	31 c9                	xor    ecx,ecx
c0017023:	57                   	push   edi
c0017024:	56                   	push   esi
c0017025:	53                   	push   ebx
c0017026:	83 ec 0c             	sub    esp,0xc
c0017029:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001702d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0017034:	89 f2                	mov    edx,esi
c0017036:	66 90                	xchg   ax,ax
c0017038:	0f b7 c2             	movzx  eax,dx
c001703b:	80 e2 01             	and    dl,0x1
c001703e:	74 18                	je     c0017058 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0017040:	d1 f8                	sar    eax,1
c0017042:	83 c1 01             	add    ecx,0x1
c0017045:	89 c2                	mov    edx,eax
c0017047:	83 f9 10             	cmp    ecx,0x10
c001704a:	75 ec                	jne    c0017038 <Process::createThread(void (*)(void*), void*, int)+0x18>
c001704c:	83 c4 0c             	add    esp,0xc
c001704f:	31 db                	xor    ebx,ebx
c0017051:	89 d8                	mov    eax,ebx
c0017053:	5b                   	pop    ebx
c0017054:	5e                   	pop    esi
c0017055:	5f                   	pop    edi
c0017056:	5d                   	pop    ebp
c0017057:	c3                   	ret    
c0017058:	b8 01 00 00 00       	mov    eax,0x1
c001705d:	d3 e0                	shl    eax,cl
c001705f:	09 c6                	or     esi,eax
c0017061:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0017064:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c001706b:	01 c0                	add    eax,eax
c001706d:	01 c8                	add    eax,ecx
c001706f:	01 c0                	add    eax,eax
c0017071:	01 c8                	add    eax,ecx
c0017073:	8d 04 80             	lea    eax,[eax+eax*4]
c0017076:	01 d8                	add    eax,ebx
c0017078:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001707f:	75 0b                	jne    c001708c <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0017081:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001708b:	90                   	nop
c001708c:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017092:	83 ec 0c             	sub    esp,0xc
c0017095:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017098:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001709b:	01 c0                	add    eax,eax
c001709d:	01 c8                	add    eax,ecx
c001709f:	01 c0                	add    eax,eax
c00170a1:	01 c8                	add    eax,ecx
c00170a3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00170a6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00170a9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00170af:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00170b5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00170b9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00170bf:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00170c5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00170cb:	89 ca                	mov    edx,ecx
c00170cd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00170d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00170d8:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c00170e2:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c00170ec:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c00170f3:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c00170fa:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0017101:	f7 da                	neg    edx
c0017103:	c1 e2 15             	shl    edx,0x15
c0017106:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001710c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017112:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017116:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017120:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017126:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001712c:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0017132:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001713c:	83 e2 80             	and    edx,0xffffff80
c001713f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017149:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c001714f:	68 00 01 00 00       	push   0x100
c0017154:	e8 06 8c ff ff       	call   c000fd5f <malloc>
c0017159:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001715c:	58                   	pop    eax
c001715d:	5a                   	pop    edx
c001715e:	53                   	push   ebx
c001715f:	68 6c fa 02 c0       	push   0xc002fa6c
c0017164:	e8 c3 b0 00 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017169:	89 d8                	mov    eax,ebx
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	83 c4 0c             	add    esp,0xc
c0017171:	5b                   	pop    ebx
c0017172:	5e                   	pop    esi
c0017173:	5f                   	pop    edi
c0017174:	5d                   	pop    ebp
c0017175:	c3                   	ret    
c0017176:	66 90                	xchg   ax,ax

c0017178 <Process::createUserThread()>:
c0017178:	83 ec 0c             	sub    esp,0xc
c001717b:	68 80 00 00 00       	push   0x80
c0017180:	6a 00                	push   0x0
c0017182:	68 20 6a 01 c0       	push   0xc0016a20
c0017187:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001718b:	50                   	push   eax
c001718c:	e8 8f fe ff ff       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c0017191:	83 c4 1c             	add    esp,0x1c
c0017194:	c3                   	ret    
c0017195:	8d 76 00             	lea    esi,[esi+0x0]

c0017198 <setupMultitasking(void (*)())>:
c0017198:	56                   	push   esi
c0017199:	53                   	push   ebx
c001719a:	83 ec 04             	sub    esp,0x4
c001719d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00171a1:	eb 11                	jmp    c00171b4 <setupMultitasking(void (*)())+0x1c>
c00171a3:	90                   	nop
c00171a4:	83 ec 0c             	sub    esp,0xc
c00171a7:	68 6c fa 02 c0       	push   0xc002fa6c
c00171ac:	e8 bf af 00 00       	call   c0022170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	83 ec 0c             	sub    esp,0xc
c00171b7:	68 6c fa 02 c0       	push   0xc002fa6c
c00171bc:	e8 8b af 00 00       	call   c002214c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00171c1:	83 c4 10             	add    esp,0x10
c00171c4:	84 c0                	test   al,al
c00171c6:	74 dc                	je     c00171a4 <setupMultitasking(void (*)())+0xc>
c00171c8:	83 ec 0c             	sub    esp,0xc
c00171cb:	68 c4 07 00 00       	push   0x7c4
c00171d0:	e8 8a 8b ff ff       	call   c000fd5f <malloc>
c00171d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00171dc:	89 c3                	mov    ebx,eax
c00171de:	6a 00                	push   0x0
c00171e0:	68 3f 55 02 c0       	push   0xc002553f
c00171e5:	6a 01                	push   0x1
c00171e7:	50                   	push   eax
c00171e8:	e8 f3 fb ff ff       	call   c0016de0 <Process::Process(bool, char const*, Process*, char**)>
c00171ed:	83 c4 14             	add    esp,0x14
c00171f0:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c00171f6:	89 1d 78 fa 02 c0    	mov    DWORD PTR ds:0xc002fa78,ebx
c00171fc:	50                   	push   eax
c00171fd:	e8 e5 b3 ff ff       	call   c00125e7 <setActiveTerminal(VgaText*)>
c0017202:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0017209:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017213:	83 c8 01             	or     eax,0x1
c0017216:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c001721d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017223:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017226:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017230:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017236:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001723c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017246:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017250:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001725a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017260:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001726a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017270:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001727a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0017281:	e8 d9 8a ff ff       	call   c000fd5f <malloc>
c0017286:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0017290:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0017296:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c001729d:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00172a4:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00172ab:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00172b2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00172b8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00172be:	5a                   	pop    edx
c00172bf:	59                   	pop    ecx
c00172c0:	68 3b 55 02 c0       	push   0xc002553b
c00172c5:	50                   	push   eax
c00172c6:	e8 75 93 fe ff       	call   c0000640 <strcpy>
c00172cb:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c00172d2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00172d6:	83 c4 14             	add    esp,0x14
c00172d9:	5b                   	pop    ebx
c00172da:	5e                   	pop    esi
c00172db:	e9 89 8f fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c00172e0 <schedule()>:
c00172e0:	8b 15 4c fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa4c
c00172e6:	85 d2                	test   edx,edx
c00172e8:	74 0e                	je     c00172f8 <schedule()+0x18>
c00172ea:	c7 05 48 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x1
c00172f4:	c3                   	ret    
c00172f5:	8d 76 00             	lea    esi,[esi+0x0]
c00172f8:	53                   	push   ebx
c00172f9:	83 ec 14             	sub    esp,0x14
c00172fc:	68 6c fa 02 c0       	push   0xc002fa6c
c0017301:	e8 46 ae 00 00       	call   c002214c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017306:	83 c4 10             	add    esp,0x10
c0017309:	84 c0                	test   al,al
c001730b:	75 3f                	jne    c001734c <schedule()+0x6c>
c001730d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017312:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017315:	83 fa 01             	cmp    edx,0x1
c0017318:	74 3a                	je     c0017354 <schedule()+0x74>
c001731a:	66 90                	xchg   ax,ax
c001731c:	83 ec 0c             	sub    esp,0xc
c001731f:	68 6c fa 02 c0       	push   0xc002fa6c
c0017324:	e8 3f ae 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017329:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c0017330:	89 c3                	mov    ebx,eax
c0017332:	e8 39 ae 00 00       	call   c0022170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017337:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001733e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017341:	e8 36 f7 ff ff       	call   c0016a7c <switchToThread(ThreadControlBlock*)>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	8d 76 00             	lea    esi,[esi+0x0]
c001734c:	83 c4 08             	add    esp,0x8
c001734f:	5b                   	pop    ebx
c0017350:	c3                   	ret    
c0017351:	8d 76 00             	lea    esi,[esi+0x0]
c0017354:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001735b:	83 ec 08             	sub    esp,0x8
c001735e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017363:	50                   	push   eax
c0017364:	68 6c fa 02 c0       	push   0xc002fa6c
c0017369:	e8 be ae 00 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	eb a9                	jmp    c001731c <schedule()+0x3c>
c0017373:	90                   	nop

c0017374 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017374:	83 ec 0c             	sub    esp,0xc
c0017377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001737c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017380:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017383:	e8 58 ff ff ff       	call   c00172e0 <schedule()>
c0017388:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017390:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017395:	85 c0                	test   eax,eax
c0017397:	75 03                	jne    c001739c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0017399:	fb                   	sti    
c001739a:	66 90                	xchg   ax,ax
c001739c:	83 c4 0c             	add    esp,0xc
c001739f:	c3                   	ret    

c00173a0 <blockTask(TaskState)>:
c00173a0:	83 ec 0c             	sub    esp,0xc
c00173a3:	fa                   	cli    
c00173a4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00173a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173ad:	83 c0 01             	add    eax,0x1
c00173b0:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00173b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00173bd:	e8 1e ff ff ff       	call   c00172e0 <schedule()>
c00173c2:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00173ca:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c00173d0:	85 d2                	test   edx,edx
c00173d2:	75 04                	jne    c00173d8 <blockTask(TaskState)+0x38>
c00173d4:	fb                   	sti    
c00173d5:	8d 76 00             	lea    esi,[esi+0x0]
c00173d8:	83 c4 0c             	add    esp,0xc
c00173db:	c3                   	ret    

c00173dc <waitTask(int, int*, int)>:
c00173dc:	83 ec 18             	sub    esp,0x18
c00173df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173e8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00173eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173f4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00173f7:	6a 07                	push   0x7
c00173f9:	e8 a2 ff ff ff       	call   c00173a0 <blockTask(TaskState)>
c00173fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017403:	83 c4 10             	add    esp,0x10
c0017406:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017409:	85 d2                	test   edx,edx
c001740b:	74 0b                	je     c0017418 <waitTask(int, int*, int)+0x3c>
c001740d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017410:	89 02                	mov    DWORD PTR [edx],eax
c0017412:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017417:	90                   	nop
c0017418:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001741b:	83 c4 0c             	add    esp,0xc
c001741e:	c3                   	ret    
c001741f:	90                   	nop

c0017420 <milliTenthSleepUntil(unsigned long long)>:
c0017420:	83 ec 0c             	sub    esp,0xc
c0017423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017427:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001742b:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0017431:	89 d1                	mov    ecx,edx
c0017433:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c0017439:	73 05                	jae    c0017440 <milliTenthSleepUntil(unsigned long long)+0x20>
c001743b:	90                   	nop
c001743c:	83 c4 0c             	add    esp,0xc
c001743f:	c3                   	ret    
c0017440:	fa                   	cli    
c0017441:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017447:	83 ec 08             	sub    esp,0x8
c001744a:	83 c1 01             	add    ecx,0x1
c001744d:	89 0d 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,ecx
c0017453:	8b 0d 4c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa4c
c0017459:	83 c1 01             	add    ecx,0x1
c001745c:	89 0d 4c fa 02 c0    	mov    DWORD PTR ds:0xc002fa4c,ecx
c0017462:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017468:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001746b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001746e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017473:	50                   	push   eax
c0017474:	68 60 fa 02 c0       	push   0xc002fa60
c0017479:	e8 ae ad 00 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001747e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017485:	e8 16 ff ff ff       	call   c00173a0 <blockTask(TaskState)>
c001748a:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c001748f:	83 c4 10             	add    esp,0x10
c0017492:	83 e8 01             	sub    eax,0x1
c0017495:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c001749a:	85 c0                	test   eax,eax
c001749c:	75 0a                	jne    c00174a8 <milliTenthSleepUntil(unsigned long long)+0x88>
c001749e:	8b 15 48 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa48
c00174a4:	85 d2                	test   edx,edx
c00174a6:	75 18                	jne    c00174c0 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00174a8:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00174b0:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00174b5:	85 c0                	test   eax,eax
c00174b7:	75 83                	jne    c001743c <milliTenthSleepUntil(unsigned long long)+0x1c>
c00174b9:	fb                   	sti    
c00174ba:	83 c4 0c             	add    esp,0xc
c00174bd:	c3                   	ret    
c00174be:	66 90                	xchg   ax,ax
c00174c0:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c00174ca:	e8 11 fe ff ff       	call   c00172e0 <schedule()>
c00174cf:	eb d7                	jmp    c00174a8 <milliTenthSleepUntil(unsigned long long)+0x88>
c00174d1:	8d 76 00             	lea    esi,[esi+0x0]

c00174d4 <milliTenthSleep(unsigned long long)>:
c00174d4:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00174d9:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00174df:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00174e3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00174e7:	e9 34 ff ff ff       	jmp    c0017420 <milliTenthSleepUntil(unsigned long long)>

c00174ec <sleep(unsigned long long)>:
c00174ec:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c00174f4:	b8 10 27 00 00       	mov    eax,0x2710
c00174f9:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00174fd:	01 ca                	add    edx,ecx
c00174ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017503:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017507:	eb cb                	jmp    c00174d4 <milliTenthSleep(unsigned long long)>
c0017509:	8d 76 00             	lea    esi,[esi+0x0]

c001750c <sleep(unsigned int)>:
c001750c:	83 ec 14             	sub    esp,0x14
c001750f:	b8 10 27 00 00       	mov    eax,0x2710
c0017514:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017518:	52                   	push   edx
c0017519:	50                   	push   eax
c001751a:	e8 b5 ff ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c001751f:	83 c4 1c             	add    esp,0x1c
c0017522:	c3                   	ret    
c0017523:	90                   	nop

c0017524 <milliTenthSleep(unsigned int)>:
c0017524:	83 ec 14             	sub    esp,0x14
c0017527:	31 d2                	xor    edx,edx
c0017529:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001752d:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c0017533:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c0017539:	52                   	push   edx
c001753a:	50                   	push   eax
c001753b:	e8 e0 fe ff ff       	call   c0017420 <milliTenthSleepUntil(unsigned long long)>
c0017540:	83 c4 1c             	add    esp,0x1c
c0017543:	c3                   	ret    

c0017544 <taskReturned>:
c0017544:	83 ec 18             	sub    esp,0x18
c0017547:	68 c8 55 02 c0       	push   0xc00255c8
c001754c:	e8 1d 8b ff ff       	call   c001006e <KePanic(char const*)>
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	83 ec 0c             	sub    esp,0xc
c0017557:	6a 02                	push   0x2
c0017559:	e8 42 fe ff ff       	call   c00173a0 <blockTask(TaskState)>
c001755e:	fa                   	cli    
c001755f:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017564:	83 c0 01             	add    eax,0x1
c0017567:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c001756c:	e8 6f fd ff ff       	call   c00172e0 <schedule()>
c0017571:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017579:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c001757f:	83 c4 10             	add    esp,0x10
c0017582:	85 d2                	test   edx,edx
c0017584:	75 ce                	jne    c0017554 <taskReturned+0x10>
c0017586:	fb                   	sti    
c0017587:	eb cb                	jmp    c0017554 <taskReturned+0x10>
c0017589:	8d 76 00             	lea    esi,[esi+0x0]

c001758c <Thr::processFromPID(int)>:
c001758c:	57                   	push   edi
c001758d:	56                   	push   esi
c001758e:	53                   	push   ebx
c001758f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017593:	fa                   	cli    
c0017594:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017599:	83 ec 0c             	sub    esp,0xc
c001759c:	83 c0 01             	add    eax,0x1
c001759f:	68 6c fa 02 c0       	push   0xc002fa6c
c00175a4:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00175a9:	e8 ba ab 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175ae:	83 c4 10             	add    esp,0x10
c00175b1:	89 c7                	mov    edi,eax
c00175b3:	eb 17                	jmp    c00175cc <Thr::processFromPID(int)+0x40>
c00175b5:	8d 76 00             	lea    esi,[esi+0x0]
c00175b8:	83 ec 0c             	sub    esp,0xc
c00175bb:	68 6c fa 02 c0       	push   0xc002fa6c
c00175c0:	e8 a3 ab 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	39 f8                	cmp    eax,edi
c00175ca:	74 50                	je     c001761c <Thr::processFromPID(int)+0x90>
c00175cc:	83 ec 0c             	sub    esp,0xc
c00175cf:	68 6c fa 02 c0       	push   0xc002fa6c
c00175d4:	e8 8f ab 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175d9:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c00175e0:	89 c3                	mov    ebx,eax
c00175e2:	e8 89 ab 00 00       	call   c0022170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00175e7:	59                   	pop    ecx
c00175e8:	58                   	pop    eax
c00175e9:	53                   	push   ebx
c00175ea:	68 6c fa 02 c0       	push   0xc002fa6c
c00175ef:	e8 38 ac 00 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00175f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	39 30                	cmp    DWORD PTR [eax],esi
c00175fc:	75 ba                	jne    c00175b8 <Thr::processFromPID(int)+0x2c>
c00175fe:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017606:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c001760c:	85 d2                	test   edx,edx
c001760e:	74 08                	je     c0017618 <Thr::processFromPID(int)+0x8c>
c0017610:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017613:	5b                   	pop    ebx
c0017614:	5e                   	pop    esi
c0017615:	5f                   	pop    edi
c0017616:	c3                   	ret    
c0017617:	90                   	nop
c0017618:	fb                   	sti    
c0017619:	eb f5                	jmp    c0017610 <Thr::processFromPID(int)+0x84>
c001761b:	90                   	nop
c001761c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017624:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017629:	85 c0                	test   eax,eax
c001762b:	75 07                	jne    c0017634 <Thr::processFromPID(int)+0xa8>
c001762d:	fb                   	sti    
c001762e:	31 c0                	xor    eax,eax
c0017630:	5b                   	pop    ebx
c0017631:	5e                   	pop    esi
c0017632:	5f                   	pop    edi
c0017633:	c3                   	ret    
c0017634:	5b                   	pop    ebx
c0017635:	31 c0                	xor    eax,eax
c0017637:	5e                   	pop    esi
c0017638:	5f                   	pop    edi
c0017639:	c3                   	ret    
c001763a:	66 90                	xchg   ax,ax

c001763c <unblockTask(ThreadControlBlock*)>:
c001763c:	53                   	push   ebx
c001763d:	83 ec 08             	sub    esp,0x8
c0017640:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017644:	fa                   	cli    
c0017645:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c001764b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001764e:	83 c2 01             	add    edx,0x1
c0017651:	85 c0                	test   eax,eax
c0017653:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c0017659:	74 6d                	je     c00176c8 <unblockTask(ThreadControlBlock*)+0x8c>
c001765b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001765e:	83 f8 01             	cmp    eax,0x1
c0017661:	74 39                	je     c001769c <unblockTask(ThreadControlBlock*)+0x60>
c0017663:	83 ec 0c             	sub    esp,0xc
c0017666:	68 6c fa 02 c0       	push   0xc002fa6c
c001766b:	e8 f8 aa 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017670:	83 c4 10             	add    esp,0x10
c0017673:	85 c0                	test   eax,eax
c0017675:	75 1d                	jne    c0017694 <unblockTask(ThreadControlBlock*)+0x58>
c0017677:	eb 63                	jmp    c00176dc <unblockTask(ThreadControlBlock*)+0xa0>
c0017679:	8d 76 00             	lea    esi,[esi+0x0]
c001767c:	83 ec 08             	sub    esp,0x8
c001767f:	50                   	push   eax
c0017680:	68 6c fa 02 c0       	push   0xc002fa6c
c0017685:	e8 ea af 00 00       	call   c0022674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001768a:	83 c4 10             	add    esp,0x10
c001768d:	85 c0                	test   eax,eax
c001768f:	74 4b                	je     c00176dc <unblockTask(ThreadControlBlock*)+0xa0>
c0017691:	8d 76 00             	lea    esi,[esi+0x0]
c0017694:	39 c3                	cmp    ebx,eax
c0017696:	75 e4                	jne    c001767c <unblockTask(ThreadControlBlock*)+0x40>
c0017698:	eb 12                	jmp    c00176ac <unblockTask(ThreadControlBlock*)+0x70>
c001769a:	66 90                	xchg   ax,ax
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	68 5d 55 02 c0       	push   0xc002555d
c00176a4:	e8 d3 f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00176b4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00176b9:	85 c0                	test   eax,eax
c00176bb:	75 03                	jne    c00176c0 <unblockTask(ThreadControlBlock*)+0x84>
c00176bd:	fb                   	sti    
c00176be:	66 90                	xchg   ax,ax
c00176c0:	83 c4 08             	add    esp,0x8
c00176c3:	5b                   	pop    ebx
c00176c4:	c3                   	ret    
c00176c5:	8d 76 00             	lea    esi,[esi+0x0]
c00176c8:	83 ec 0c             	sub    esp,0xc
c00176cb:	68 46 55 02 c0       	push   0xc0025546
c00176d0:	e8 a7 f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00176d5:	83 c4 10             	add    esp,0x10
c00176d8:	eb d2                	jmp    c00176ac <unblockTask(ThreadControlBlock*)+0x70>
c00176da:	66 90                	xchg   ax,ax
c00176dc:	83 ec 08             	sub    esp,0x8
c00176df:	53                   	push   ebx
c00176e0:	68 6c fa 02 c0       	push   0xc002fa6c
c00176e5:	e8 42 ab 00 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	eb bd                	jmp    c00176ac <unblockTask(ThreadControlBlock*)+0x70>
c00176ef:	90                   	nop

c00176f0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00176f0:	55                   	push   ebp
c00176f1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00176f6:	57                   	push   edi
c00176f7:	56                   	push   esi
c00176f8:	53                   	push   ebx
c00176f9:	83 ec 1c             	sub    esp,0x1c
c00176fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017700:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017703:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017706:	d3 c0                	rol    eax,cl
c0017708:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001770f:	21 c8                	and    eax,ecx
c0017711:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017718:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001771b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017723:	0f 85 b7 01 00 00    	jne    c00178e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017729:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001772f:	85 ed                	test   ebp,ebp
c0017731:	7e 29                	jle    c001775c <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017733:	31 f6                	xor    esi,esi
c0017735:	8d 76 00             	lea    esi,[esi+0x0]
c0017738:	83 ec 0c             	sub    esp,0xc
c001773b:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017742:	83 c6 01             	add    esi,0x1
c0017745:	57                   	push   edi
c0017746:	e8 24 86 ff ff       	call   c000fd6f <free>
c001774b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001774e:	83 c4 10             	add    esp,0x10
c0017751:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017757:	7f df                	jg     c0017738 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017759:	8d 76 00             	lea    esi,[esi+0x0]
c001775c:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0017766:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017769:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c001776f:	89 f7                	mov    edi,esi
c0017771:	85 ed                	test   ebp,ebp
c0017773:	74 1b                	je     c0017790 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0017775:	83 ec 0c             	sub    esp,0xc
c0017778:	55                   	push   ebp
c0017779:	e8 74 70 ff ff       	call   c000e7f2 <EnvVarContainer::~EnvVarContainer()>
c001777e:	59                   	pop    ecx
c001777f:	5e                   	pop    esi
c0017780:	6a 0c                	push   0xc
c0017782:	55                   	push   ebp
c0017783:	e8 61 5c ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0017788:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001778b:	83 c4 10             	add    esp,0x10
c001778e:	89 f7                	mov    edi,esi
c0017790:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017796:	85 c0                	test   eax,eax
c0017798:	0f 84 b6 00 00 00    	je     c0017854 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c001779e:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00177a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00177a5:	31 c9                	xor    ecx,ecx
c00177a7:	eb 17                	jmp    c00177c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00177a9:	8d 76 00             	lea    esi,[esi+0x0]
c00177ac:	83 c1 01             	add    ecx,0x1
c00177af:	83 f9 10             	cmp    ecx,0x10
c00177b2:	0f 84 9c 00 00 00    	je     c0017854 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00177b8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00177be:	66 90                	xchg   ax,ax
c00177c0:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00177c7:	d3 fa                	sar    edx,cl
c00177c9:	80 e2 01             	and    dl,0x1
c00177cc:	74 de                	je     c00177ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00177ce:	8d 14 89             	lea    edx,[ecx+ecx*4]
c00177d1:	01 d2                	add    edx,edx
c00177d3:	01 ca                	add    edx,ecx
c00177d5:	01 d2                	add    edx,edx
c00177d7:	01 ca                	add    edx,ecx
c00177d9:	8d 14 92             	lea    edx,[edx+edx*4]
c00177dc:	01 d0                	add    eax,edx
c00177de:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00177e4:	83 fd 07             	cmp    ebp,0x7
c00177e7:	75 c3                	jne    c00177ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00177e9:	05 40 02 00 00       	add    eax,0x240
c00177ee:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00177f1:	83 fd ff             	cmp    ebp,0xffffffff
c00177f4:	0f 8c ee 00 00 00    	jl     c00178e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00177fa:	0f 84 ac 01 00 00    	je     c00179ac <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017800:	85 ed                	test   ebp,ebp
c0017802:	0f 84 90 01 00 00    	je     c0017998 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017808:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001780a:	75 a0                	jne    c00177ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001780c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017812:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017816:	01 d0                	add    eax,edx
c0017818:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001781c:	83 ec 0c             	sub    esp,0xc
c001781f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017825:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017828:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001782e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017835:	50                   	push   eax
c0017836:	e8 01 fe ff ff       	call   c001763c <unblockTask(ThreadControlBlock*)>
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017845:	89 f7                	mov    edi,esi
c0017847:	83 c1 01             	add    ecx,0x1
c001784a:	83 f9 10             	cmp    ecx,0x10
c001784d:	0f 85 65 ff ff ff    	jne    c00177b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017853:	90                   	nop
c0017854:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001785a:	85 c0                	test   eax,eax
c001785c:	74 62                	je     c00178c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001785e:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017864:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001786a:	74 54                	je     c00178c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001786c:	83 ec 0c             	sub    esp,0xc
c001786f:	68 6c fa 02 c0       	push   0xc002fa6c
c0017874:	e8 ef a8 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017879:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c0017880:	89 c7                	mov    edi,eax
c0017882:	e8 c5 a8 00 00       	call   c002214c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017887:	83 c4 10             	add    esp,0x10
c001788a:	84 c0                	test   al,al
c001788c:	0f 84 ce 00 00 00    	je     c0017960 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c0017892:	66 90                	xchg   ax,ax
c0017894:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017897:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001789d:	85 d2                	test   edx,edx
c001789f:	74 0f                	je     c00178b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00178a1:	83 ec 0c             	sub    esp,0xc
c00178a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00178a6:	52                   	push   edx
c00178a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00178aa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00178ba:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00178bd:	8d 76 00             	lea    esi,[esi+0x0]
c00178c0:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00178c6:	85 db                	test   ebx,ebx
c00178c8:	74 16                	je     c00178e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00178ca:	83 ec 0c             	sub    esp,0xc
c00178cd:	53                   	push   ebx
c00178ce:	e8 15 c2 ff ff       	call   c0013ae8 <VAS::~VAS()>
c00178d3:	58                   	pop    eax
c00178d4:	5a                   	pop    edx
c00178d5:	6a 14                	push   0x14
c00178d7:	53                   	push   ebx
c00178d8:	e8 0c 5b ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00178dd:	83 c4 10             	add    esp,0x10
c00178e0:	83 c4 1c             	add    esp,0x1c
c00178e3:	5b                   	pop    ebx
c00178e4:	5e                   	pop    esi
c00178e5:	5f                   	pop    edi
c00178e6:	5d                   	pop    ebp
c00178e7:	c3                   	ret    
c00178e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00178ec:	83 ec 0c             	sub    esp,0xc
c00178ef:	68 fc 55 02 c0       	push   0xc00255fc
c00178f4:	e8 75 87 ff ff       	call   c001006e <KePanic(char const*)>
c00178f9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00178fc:	83 c4 10             	add    esp,0x10
c00178ff:	89 f7                	mov    edi,esi
c0017901:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017905:	e9 a2 fe ff ff       	jmp    c00177ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001790a:	66 90                	xchg   ax,ax
c001790c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017912:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017918:	75 1e                	jne    c0017938 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001791a:	83 ec 0c             	sub    esp,0xc
c001791d:	68 64 56 02 c0       	push   0xc0025664
c0017922:	e8 55 f6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017927:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001792e:	e8 6d fa ff ff       	call   c00173a0 <blockTask(TaskState)>
c0017933:	83 c4 10             	add    esp,0x10
c0017936:	66 90                	xchg   ax,ax
c0017938:	83 ec 08             	sub    esp,0x8
c001793b:	56                   	push   esi
c001793c:	68 6c fa 02 c0       	push   0xc002fa6c
c0017941:	e8 e6 a8 00 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017946:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c001794d:	e8 16 a8 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	39 f8                	cmp    eax,edi
c0017957:	0f 84 37 ff ff ff    	je     c0017894 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c001795d:	8d 76 00             	lea    esi,[esi+0x0]
c0017960:	83 ec 0c             	sub    esp,0xc
c0017963:	68 6c fa 02 c0       	push   0xc002fa6c
c0017968:	e8 fb a7 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001796d:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c0017974:	89 c6                	mov    esi,eax
c0017976:	e8 f5 a7 00 00       	call   c0022170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001797b:	83 c4 10             	add    esp,0x10
c001797e:	39 f3                	cmp    ebx,esi
c0017980:	74 b6                	je     c0017938 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017982:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017985:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017988:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c001798e:	75 a8                	jne    c0017938 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017990:	e9 77 ff ff ff       	jmp    c001790c <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c0017995:	8d 76 00             	lea    esi,[esi+0x0]
c0017998:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001799c:	83 ec 0c             	sub    esp,0xc
c001799f:	68 30 56 02 c0       	push   0xc0025630
c00179a4:	e9 4b ff ff ff       	jmp    c00178f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00179a9:	8d 76 00             	lea    esi,[esi+0x0]
c00179ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00179ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00179b2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00179b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00179b8:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00179be:	01 d7                	add    edi,edx
c00179c0:	89 f8                	mov    eax,edi
c00179c2:	e9 51 fe ff ff       	jmp    c0017818 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c00179c7:	90                   	nop

c00179c8 <cleanerTaskFunction(void*)>:
c00179c8:	53                   	push   ebx
c00179c9:	83 ec 08             	sub    esp,0x8
c00179cc:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00179d4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00179d9:	85 c0                	test   eax,eax
c00179db:	75 03                	jne    c00179e0 <cleanerTaskFunction(void*)+0x18>
c00179dd:	fb                   	sti    
c00179de:	66 90                	xchg   ax,ax
c00179e0:	fa                   	cli    
c00179e1:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00179e6:	83 c0 01             	add    eax,0x1
c00179e9:	80 3d 34 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa34,0x0
c00179f0:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00179f5:	0f 85 c9 00 00 00    	jne    c0017ac4 <cleanerTaskFunction(void*)+0xfc>
c00179fb:	83 ec 0c             	sub    esp,0xc
c00179fe:	6a 02                	push   0x2
c0017a00:	e8 6f f9 ff ff       	call   c0017374 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	c6 05 34 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa34,0x0
c0017a0f:	fa                   	cli    
c0017a10:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017a16:	8b 1d 4c fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa4c
c0017a1c:	83 c1 01             	add    ecx,0x1
c0017a1f:	83 c3 01             	add    ebx,0x1
c0017a22:	89 0d 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,ecx
c0017a28:	89 1d 4c fa 02 c0    	mov    DWORD PTR ds:0xc002fa4c,ebx
c0017a2e:	fa                   	cli    
c0017a2f:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017a34:	83 c0 01             	add    eax,0x1
c0017a37:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017a3c:	eb 2a                	jmp    c0017a68 <cleanerTaskFunction(void*)+0xa0>
c0017a3e:	66 90                	xchg   ax,ax
c0017a40:	83 ec 0c             	sub    esp,0xc
c0017a43:	68 54 fa 02 c0       	push   0xc002fa54
c0017a48:	e8 1b a7 00 00       	call   c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017a4d:	c7 04 24 54 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa54
c0017a54:	89 c3                	mov    ebx,eax
c0017a56:	e8 15 a7 00 00       	call   c0022170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a5e:	e8 8d fc ff ff       	call   c00176f0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	66 90                	xchg   ax,ax
c0017a68:	83 ec 0c             	sub    esp,0xc
c0017a6b:	68 54 fa 02 c0       	push   0xc002fa54
c0017a70:	e8 d7 a6 00 00       	call   c002214c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	84 c0                	test   al,al
c0017a7a:	74 c4                	je     c0017a40 <cleanerTaskFunction(void*)+0x78>
c0017a7c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017a84:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017a8a:	85 d2                	test   edx,edx
c0017a8c:	75 02                	jne    c0017a90 <cleanerTaskFunction(void*)+0xc8>
c0017a8e:	fb                   	sti    
c0017a8f:	90                   	nop
c0017a90:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0017a95:	83 e8 01             	sub    eax,0x1
c0017a98:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0017a9d:	0f 85 29 ff ff ff    	jne    c00179cc <cleanerTaskFunction(void*)+0x4>
c0017aa3:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0017aa8:	85 c0                	test   eax,eax
c0017aaa:	0f 84 1c ff ff ff    	je     c00179cc <cleanerTaskFunction(void*)+0x4>
c0017ab0:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0017aba:	e8 21 f8 ff ff       	call   c00172e0 <schedule()>
c0017abf:	e9 08 ff ff ff       	jmp    c00179cc <cleanerTaskFunction(void*)+0x4>
c0017ac4:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017acc:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017ad1:	85 c0                	test   eax,eax
c0017ad3:	0f 85 2f ff ff ff    	jne    c0017a08 <cleanerTaskFunction(void*)+0x40>
c0017ad9:	fb                   	sti    
c0017ada:	e9 29 ff ff ff       	jmp    c0017a08 <cleanerTaskFunction(void*)+0x40>
c0017adf:	90                   	nop

c0017ae0 <terminateTask(int)>:
c0017ae0:	83 ec 14             	sub    esp,0x14
c0017ae3:	fa                   	cli    
c0017ae4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017ae9:	83 c0 01             	add    eax,0x1
c0017aec:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017af1:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0017af6:	83 c0 01             	add    eax,0x1
c0017af9:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0017afe:	fa                   	cli    
c0017aff:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017b04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b08:	83 c0 01             	add    eax,0x1
c0017b0b:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b15:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017b18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b1d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017b20:	50                   	push   eax
c0017b21:	68 54 fa 02 c0       	push   0xc002fa54
c0017b26:	e8 01 a7 00 00       	call   c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017b3a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017b3f:	85 c0                	test   eax,eax
c0017b41:	0f 84 81 00 00 00    	je     c0017bc8 <terminateTask(int)+0xe8>
c0017b47:	83 ec 0c             	sub    esp,0xc
c0017b4a:	c6 05 34 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa34,0x1
c0017b51:	50                   	push   eax
c0017b52:	e8 e5 fa ff ff       	call   c001763c <unblockTask(ThreadControlBlock*)>
c0017b57:	83 c4 10             	add    esp,0x10
c0017b5a:	66 90                	xchg   ax,ax
c0017b5c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017b64:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017b69:	85 c0                	test   eax,eax
c0017b6b:	75 03                	jne    c0017b70 <terminateTask(int)+0x90>
c0017b6d:	fb                   	sti    
c0017b6e:	66 90                	xchg   ax,ax
c0017b70:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0017b75:	83 e8 01             	sub    eax,0x1
c0017b78:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0017b7d:	75 09                	jne    c0017b88 <terminateTask(int)+0xa8>
c0017b7f:	83 3d 48 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa48,0x0
c0017b86:	75 54                	jne    c0017bdc <terminateTask(int)+0xfc>
c0017b88:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017b90:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017b96:	85 c9                	test   ecx,ecx
c0017b98:	75 06                	jne    c0017ba0 <terminateTask(int)+0xc0>
c0017b9a:	66 90                	xchg   ax,ax
c0017b9c:	fb                   	sti    
c0017b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017ba0:	fa                   	cli    
c0017ba1:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017ba6:	83 c0 01             	add    eax,0x1
c0017ba9:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017bae:	e8 2d f7 ff ff       	call   c00172e0 <schedule()>
c0017bb3:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017bbb:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017bc1:	85 d2                	test   edx,edx
c0017bc3:	75 db                	jne    c0017ba0 <terminateTask(int)+0xc0>
c0017bc5:	eb d5                	jmp    c0017b9c <terminateTask(int)+0xbc>
c0017bc7:	90                   	nop
c0017bc8:	83 ec 0c             	sub    esp,0xc
c0017bcb:	68 74 55 02 c0       	push   0xc0025574
c0017bd0:	e8 a7 f3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017bd5:	83 c4 10             	add    esp,0x10
c0017bd8:	eb 82                	jmp    c0017b5c <terminateTask(int)+0x7c>
c0017bda:	66 90                	xchg   ax,ax
c0017bdc:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0017be6:	e8 f5 f6 ff ff       	call   c00172e0 <schedule()>
c0017beb:	eb 9b                	jmp    c0017b88 <terminateTask(int)+0xa8>
c0017bed:	8d 76 00             	lea    esi,[esi+0x0]

c0017bf0 <Thr::terminateFromIRQ(int)>:
c0017bf0:	83 ec 18             	sub    esp,0x18
c0017bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bf7:	50                   	push   eax
c0017bf8:	e8 e3 fe ff ff       	call   c0017ae0 <terminateTask(int)>
c0017bfd:	8d 76 00             	lea    esi,[esi+0x0]

c0017c00 <__static_initialization_and_destruction_0(int, int)>:
c0017c00:	83 ec 0c             	sub    esp,0xc
c0017c03:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017c08:	0f 85 8e 00 00 00    	jne    c0017c9c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017c0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017c16:	0f 85 80 00 00 00    	jne    c0017c9c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017c1c:	83 ec 0c             	sub    esp,0xc
c0017c1f:	68 6c fa 02 c0       	push   0xc002fa6c
c0017c24:	e8 a3 aa 00 00       	call   c00226cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017c29:	83 c4 10             	add    esp,0x10
c0017c2c:	83 ec 04             	sub    esp,0x4
c0017c2f:	68 7c 69 02 c0       	push   0xc002697c
c0017c34:	68 6c fa 02 c0       	push   0xc002fa6c
c0017c39:	68 7c 26 02 c0       	push   0xc002267c
c0017c3e:	e8 56 57 ff ff       	call   c000d399 <__cxa_atexit>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	83 ec 0c             	sub    esp,0xc
c0017c49:	68 60 fa 02 c0       	push   0xc002fa60
c0017c4e:	e8 79 aa 00 00       	call   c00226cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	83 ec 04             	sub    esp,0x4
c0017c59:	68 7c 69 02 c0       	push   0xc002697c
c0017c5e:	68 60 fa 02 c0       	push   0xc002fa60
c0017c63:	68 7c 26 02 c0       	push   0xc002267c
c0017c68:	e8 2c 57 ff ff       	call   c000d399 <__cxa_atexit>
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	83 ec 0c             	sub    esp,0xc
c0017c73:	68 54 fa 02 c0       	push   0xc002fa54
c0017c78:	e8 4f aa 00 00       	call   c00226cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017c7d:	83 c4 10             	add    esp,0x10
c0017c80:	83 ec 04             	sub    esp,0x4
c0017c83:	68 7c 69 02 c0       	push   0xc002697c
c0017c88:	68 54 fa 02 c0       	push   0xc002fa54
c0017c8d:	68 7c 26 02 c0       	push   0xc002267c
c0017c92:	e8 02 57 ff ff       	call   c000d399 <__cxa_atexit>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	66 90                	xchg   ax,ax
c0017c9c:	90                   	nop
c0017c9d:	83 c4 0c             	add    esp,0xc
c0017ca0:	c3                   	ret    
c0017ca1:	8d 76 00             	lea    esi,[esi+0x0]

c0017ca4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017ca4:	83 ec 0c             	sub    esp,0xc
c0017ca7:	83 ec 08             	sub    esp,0x8
c0017caa:	68 ff ff 00 00       	push   0xffff
c0017caf:	6a 01                	push   0x1
c0017cb1:	e8 4a ff ff ff       	call   c0017c00 <__static_initialization_and_destruction_0(int, int)>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	83 c4 0c             	add    esp,0xc
c0017cbc:	c3                   	ret    

c0017cbd <Vm::inbv(unsigned short)>:
c0017cbd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017cc1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017cc6:	74 02                	je     c0017cca <Vm::inbv(unsigned short)+0xd>
c0017cc8:	ec                   	in     al,dx
c0017cc9:	c3                   	ret    
c0017cca:	a0 b0 fa 02 c0       	mov    al,ds:0xc002fab0
c0017ccf:	c3                   	ret    

c0017cd0 <Vm::outbv(unsigned short, unsigned char)>:
c0017cd0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cd8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017cdd:	74 02                	je     c0017ce1 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017cdf:	ee                   	out    dx,al
c0017ce0:	c3                   	ret    
c0017ce1:	8b 0d b0 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fab0
c0017ce7:	8d 51 01             	lea    edx,[ecx+0x1]
c0017cea:	88 81 c0 fa 02 c0    	mov    BYTE PTR [ecx-0x3ffd0540],al
c0017cf0:	89 15 b0 fa 02 c0    	mov    DWORD PTR ds:0xc002fab0,edx
c0017cf6:	83 fa 20             	cmp    edx,0x20
c0017cf9:	75 e5                	jne    c0017ce0 <Vm::outbv(unsigned short, unsigned char)+0x10>
c0017cfb:	c7 05 b0 fa 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fab0,0x1f
c0017d05:	c3                   	ret    

c0017d06 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017d06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d10:	c1 e0 04             	shl    eax,0x4
c0017d13:	01 d0                	add    eax,edx
c0017d15:	c3                   	ret    

c0017d16 <Vm::getSegment(unsigned int)>:
c0017d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d1a:	c1 e8 10             	shr    eax,0x10
c0017d1d:	c3                   	ret    

c0017d1e <Vm::getOffset(unsigned int)>:
c0017d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d22:	c3                   	ret    

c0017d23 <Vm::mainloop2()>:
c0017d23:	83 ec 18             	sub    esp,0x18
c0017d26:	fa                   	cli    
c0017d27:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017d2c:	6a 02                	push   0x2
c0017d2e:	83 c0 01             	add    eax,0x1
c0017d31:	c6 05 a9 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa9,0x1
c0017d38:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017d3d:	e8 32 f6 ff ff       	call   c0017374 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017d42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d47:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017d4b:	52                   	push   edx
c0017d4c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017d50:	52                   	push   edx
c0017d51:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017d55:	52                   	push   edx
c0017d56:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017d5a:	50                   	push   eax
c0017d5b:	e8 af 84 fe ff       	call   c000020f <goToVM86>
c0017d60:	83 c4 2c             	add    esp,0x2c
c0017d63:	c3                   	ret    

c0017d64 <Vm::mainVm8086Loop(void*)>:
c0017d64:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017d6c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017d71:	85 c0                	test   eax,eax
c0017d73:	75 01                	jne    c0017d76 <Vm::mainVm8086Loop(void*)+0x12>
c0017d75:	fb                   	sti    
c0017d76:	eb ab                	jmp    c0017d23 <Vm::mainloop2()>

c0017d78 <Vm::mainloop3(unsigned long)>:
c0017d78:	83 ec 18             	sub    esp,0x18
c0017d7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d7f:	fa                   	cli    
c0017d80:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017d86:	6a 02                	push   0x2
c0017d88:	83 c2 01             	add    edx,0x1
c0017d8b:	c6 05 a8 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa8,0x1
c0017d92:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c0017d98:	a3 a4 fa 02 c0       	mov    ds:0xc002faa4,eax
c0017d9d:	e8 d2 f5 ff ff       	call   c0017374 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017da2:	83 c4 1c             	add    esp,0x1c
c0017da5:	e9 79 ff ff ff       	jmp    c0017d23 <Vm::mainloop2()>

c0017daa <Vm::initialise8086()>:
c0017daa:	83 ec 0c             	sub    esp,0xc
c0017dad:	68 80 00 00 00       	push   0x80
c0017db2:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017db7:	6a 00                	push   0x0
c0017db9:	68 64 7d 01 c0       	push   0xc0017d64
c0017dbe:	50                   	push   eax
c0017dbf:	e8 5c f2 ff ff       	call   c0017020 <Process::createThread(void (*)(void*), void*, int)>
c0017dc4:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017dcb:	a3 ac fa 02 c0       	mov    ds:0xc002faac,eax
c0017dd0:	68 10 01 00 00       	push   0x110
c0017dd5:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017dda:	6a 00                	push   0x0
c0017ddc:	6a 00                	push   0x0
c0017dde:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017de4:	52                   	push   edx
c0017de5:	e8 50 c0 ff ff       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017dea:	83 c4 2c             	add    esp,0x2c
c0017ded:	c3                   	ret    

c0017dee <Vm::resetConventionalMemory8086()>:
c0017dee:	c3                   	ret    

c0017def <Vm::finish8086()>:
c0017def:	53                   	push   ebx
c0017df0:	83 ec 08             	sub    esp,0x8
c0017df3:	eb 17                	jmp    c0017e0c <Vm::finish8086()+0x1d>
c0017df5:	e8 e6 f4 ff ff       	call   c00172e0 <schedule()>
c0017dfa:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017e02:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017e08:	85 c9                	test   ecx,ecx
c0017e0a:	74 51                	je     c0017e5d <Vm::finish8086()+0x6e>
c0017e0c:	fa                   	cli    
c0017e0d:	8b 1d 50 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa50
c0017e13:	83 c3 01             	add    ebx,0x1
c0017e16:	80 3d a8 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa8,0x0
c0017e1d:	89 1d 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,ebx
c0017e23:	74 d0                	je     c0017df5 <Vm::finish8086()+0x6>
c0017e25:	83 ec 0c             	sub    esp,0xc
c0017e28:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017e2d:	8b 1d a4 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002faa4
c0017e33:	50                   	push   eax
c0017e34:	c6 05 a8 fa 02 c0 00 	mov    BYTE PTR ds:0xc002faa8,0x0
c0017e3b:	e8 fc f7 ff ff       	call   c001763c <unblockTask(ThreadControlBlock*)>
c0017e40:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017e48:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017e4e:	83 c4 10             	add    esp,0x10
c0017e51:	85 d2                	test   edx,edx
c0017e53:	75 01                	jne    c0017e56 <Vm::finish8086()+0x67>
c0017e55:	fb                   	sti    
c0017e56:	89 d8                	mov    eax,ebx
c0017e58:	83 c4 08             	add    esp,0x8
c0017e5b:	5b                   	pop    ebx
c0017e5c:	c3                   	ret    
c0017e5d:	fb                   	sti    
c0017e5e:	eb ac                	jmp    c0017e0c <Vm::finish8086()+0x1d>

c0017e60 <Vm::getOutput8086(unsigned char*)>:
c0017e60:	57                   	push   edi
c0017e61:	8b 0d b0 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fab0
c0017e67:	56                   	push   esi
c0017e68:	be c0 fa 02 c0       	mov    esi,0xc002fac0
c0017e6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017e71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e73:	a1 b0 fa 02 c0       	mov    eax,ds:0xc002fab0
c0017e78:	5e                   	pop    esi
c0017e79:	c7 05 b0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fab0,0x0
c0017e83:	5f                   	pop    edi
c0017e84:	c3                   	ret    

c0017e85 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017e85:	55                   	push   ebp
c0017e86:	57                   	push   edi
c0017e87:	56                   	push   esi
c0017e88:	53                   	push   ebx
c0017e89:	83 ec 2c             	sub    esp,0x2c
c0017e8c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017e90:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017e94:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017e98:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0017e9c:	80 3d a0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa0,0x0
c0017ea3:	75 1f                	jne    c0017ec4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017ea5:	e9 bb 00 00 00       	jmp    c0017f65 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe0>
c0017eaa:	e8 31 f4 ff ff       	call   c00172e0 <schedule()>
c0017eaf:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017eb7:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017ebc:	85 c0                	test   eax,eax
c0017ebe:	0f 84 9b 00 00 00    	je     c0017f5f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xda>
c0017ec4:	fa                   	cli    
c0017ec5:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017eca:	83 c0 01             	add    eax,0x1
c0017ecd:	80 3d a9 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa9,0x0
c0017ed4:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017ed9:	74 cf                	je     c0017eaa <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x25>
c0017edb:	83 ec 04             	sub    esp,0x4
c0017ede:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017ee3:	c7 05 b0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fab0,0x0
c0017eed:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017ef1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017ef5:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017ef9:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017efd:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017f01:	0f b7 f6             	movzx  esi,si
c0017f04:	6a 20                	push   0x20
c0017f06:	0f b7 db             	movzx  ebx,bx
c0017f09:	6a 00                	push   0x0
c0017f0b:	68 c0 fa 02 c0       	push   0xc002fac0
c0017f10:	e8 db 85 fe ff       	call   c00004f0 <memset>
c0017f15:	5a                   	pop    edx
c0017f16:	59                   	pop    ecx
c0017f17:	56                   	push   esi
c0017f18:	53                   	push   ebx
c0017f19:	e8 e8 fd ff ff       	call   c0017d06 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	89 c7                	mov    edi,eax
c0017f23:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017f27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017f2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017f2d:	c6 05 a9 fa 02 c0 00 	mov    BYTE PTR ds:0xc002faa9,0x0
c0017f34:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017f3c:	8b 1d 50 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa50
c0017f42:	85 db                	test   ebx,ebx
c0017f44:	75 01                	jne    c0017f47 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc2>
c0017f46:	fb                   	sti    
c0017f47:	83 ec 0c             	sub    esp,0xc
c0017f4a:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017f4f:	50                   	push   eax
c0017f50:	e8 e7 f6 ff ff       	call   c001763c <unblockTask(ThreadControlBlock*)>
c0017f55:	83 c4 3c             	add    esp,0x3c
c0017f58:	b0 01                	mov    al,0x1
c0017f5a:	5b                   	pop    ebx
c0017f5b:	5e                   	pop    esi
c0017f5c:	5f                   	pop    edi
c0017f5d:	5d                   	pop    ebp
c0017f5e:	c3                   	ret    
c0017f5f:	fb                   	sti    
c0017f60:	e9 5f ff ff ff       	jmp    c0017ec4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017f65:	83 ec 0c             	sub    esp,0xc
c0017f68:	68 14 01 00 00       	push   0x114
c0017f6d:	e8 ed 7d ff ff       	call   c000fd5f <malloc>
c0017f72:	83 c4 0c             	add    esp,0xc
c0017f75:	89 c2                	mov    edx,eax
c0017f77:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017f7c:	50                   	push   eax
c0017f7d:	68 8c 56 02 c0       	push   0xc002568c
c0017f82:	52                   	push   edx
c0017f83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017f87:	e8 fe 01 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017f8c:	58                   	pop    eax
c0017f8d:	5a                   	pop    edx
c0017f8e:	6a 12                	push   0x12
c0017f90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f94:	52                   	push   edx
c0017f95:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017f99:	e8 0a 02 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017f9e:	59                   	pop    ecx
c0017f9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fa3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017fa7:	8b 02                	mov    eax,DWORD PTR [edx]
c0017fa9:	51                   	push   ecx
c0017faa:	6a 00                	push   0x0
c0017fac:	6a 00                	push   0x0
c0017fae:	68 00 00 11 00       	push   0x110000
c0017fb3:	52                   	push   edx
c0017fb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fb8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017fbb:	83 c4 14             	add    esp,0x14
c0017fbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fc2:	52                   	push   edx
c0017fc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017fc7:	e8 3a 02 ff ff       	call   c0008206 <File::close()>
c0017fcc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fd0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017fd2:	89 14 24             	mov    DWORD PTR [esp],edx
c0017fd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017fd8:	c6 05 a0 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa0,0x1
c0017fdf:	83 c4 10             	add    esp,0x10
c0017fe2:	e9 dd fe ff ff       	jmp    c0017ec4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>

c0017fe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017fe7:	55                   	push   ebp
c0017fe8:	57                   	push   edi
c0017fe9:	56                   	push   esi
c0017fea:	53                   	push   ebx
c0017feb:	83 ec 2c             	sub    esp,0x2c
c0017fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ff2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017ff6:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017ffa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ffe:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0018002:	80 3d a0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa0,0x0
c0018009:	0f 84 59 01 00 00    	je     c0018168 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c001800f:	83 ec 08             	sub    esp,0x8
c0018012:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0018016:	51                   	push   ecx
c0018017:	68 f0 56 02 c0       	push   0xc00256f0
c001801c:	e8 5b ef fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	eb 1a                	jmp    c0018040 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0018026:	e8 b5 f2 ff ff       	call   c00172e0 <schedule()>
c001802b:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0018033:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0018038:	85 c0                	test   eax,eax
c001803a:	0f 84 22 01 00 00    	je     c0018162 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17b>
c0018040:	fa                   	cli    
c0018041:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0018047:	8a 1d a9 fa 02 c0    	mov    bl,BYTE PTR ds:0xc002faa9
c001804d:	83 c2 01             	add    edx,0x1
c0018050:	84 db                	test   bl,bl
c0018052:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c0018058:	74 cc                	je     c0018026 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c001805a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001805e:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0018063:	83 ec 04             	sub    esp,0x4
c0018066:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001806a:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001806e:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0018072:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0018076:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001807a:	c7 05 b0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fab0,0x0
c0018084:	6a 20                	push   0x20
c0018086:	6a 00                	push   0x0
c0018088:	68 c0 fa 02 c0       	push   0xc002fac0
c001808d:	e8 5e 84 fe ff       	call   c00004f0 <memset>
c0018092:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018099:	e8 c1 7c ff ff       	call   c000fd5f <malloc>
c001809e:	83 c4 0c             	add    esp,0xc
c00180a1:	89 c7                	mov    edi,eax
c00180a3:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c00180a8:	50                   	push   eax
c00180a9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180ad:	50                   	push   eax
c00180ae:	57                   	push   edi
c00180af:	e8 d6 00 ff ff       	call   c000818a <File::File(char const*, Process*)>
c00180b4:	83 c4 10             	add    esp,0x10
c00180b7:	85 ff                	test   edi,edi
c00180b9:	0f 84 66 01 00 00    	je     c0018225 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23e>
c00180bf:	83 ec 04             	sub    esp,0x4
c00180c2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00180c6:	50                   	push   eax
c00180c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00180cb:	50                   	push   eax
c00180cc:	57                   	push   edi
c00180cd:	e8 d8 03 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00180d2:	8a 4c 24 23          	mov    cl,BYTE PTR [esp+0x23]
c00180d6:	83 c4 10             	add    esp,0x10
c00180d9:	84 c9                	test   cl,cl
c00180db:	0f 85 e9 00 00 00    	jne    c00181ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e3>
c00180e1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00180e5:	83 ec 08             	sub    esp,0x8
c00180e8:	6a 01                	push   0x1
c00180ea:	57                   	push   edi
c00180eb:	e8 b8 00 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c00180f0:	83 c4 10             	add    esp,0x10
c00180f3:	85 c0                	test   eax,eax
c00180f5:	0f 85 fd 00 00 00    	jne    c00181f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c00180fb:	83 ec 08             	sub    esp,0x8
c00180fe:	0f b7 c5             	movzx  eax,bp
c0018101:	0f b7 f6             	movzx  esi,si
c0018104:	56                   	push   esi
c0018105:	50                   	push   eax
c0018106:	e8 fb fb ff ff       	call   c0017d06 <Vm::realToLinear(unsigned short, unsigned short)>
c001810b:	5a                   	pop    edx
c001810c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001810e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0018112:	52                   	push   edx
c0018113:	50                   	push   eax
c0018114:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018118:	56                   	push   esi
c0018119:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001811d:	55                   	push   ebp
c001811e:	57                   	push   edi
c001811f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018122:	83 c4 14             	add    esp,0x14
c0018125:	57                   	push   edi
c0018126:	e8 db 00 ff ff       	call   c0008206 <File::close()>
c001812b:	c6 05 a9 fa 02 c0 00 	mov    BYTE PTR ds:0xc002faa9,0x0
c0018132:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001813a:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	85 c0                	test   eax,eax
c0018144:	75 01                	jne    c0018147 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x160>
c0018146:	fb                   	sti    
c0018147:	83 ec 0c             	sub    esp,0xc
c001814a:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c001814f:	50                   	push   eax
c0018150:	e8 e7 f4 ff ff       	call   c001763c <unblockTask(ThreadControlBlock*)>
c0018155:	83 c4 10             	add    esp,0x10
c0018158:	83 c4 2c             	add    esp,0x2c
c001815b:	88 d8                	mov    al,bl
c001815d:	5b                   	pop    ebx
c001815e:	5e                   	pop    esi
c001815f:	5f                   	pop    edi
c0018160:	5d                   	pop    ebp
c0018161:	c3                   	ret    
c0018162:	fb                   	sti    
c0018163:	e9 d8 fe ff ff       	jmp    c0018040 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0018168:	83 ec 0c             	sub    esp,0xc
c001816b:	68 14 01 00 00       	push   0x114
c0018170:	e8 ea 7b ff ff       	call   c000fd5f <malloc>
c0018175:	83 c4 0c             	add    esp,0xc
c0018178:	89 c3                	mov    ebx,eax
c001817a:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001817f:	50                   	push   eax
c0018180:	68 8c 56 02 c0       	push   0xc002568c
c0018185:	53                   	push   ebx
c0018186:	e8 ff ff fe ff       	call   c000818a <File::File(char const*, Process*)>
c001818b:	58                   	pop    eax
c001818c:	5a                   	pop    edx
c001818d:	6a 12                	push   0x12
c001818f:	53                   	push   ebx
c0018190:	e8 13 00 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0018195:	59                   	pop    ecx
c0018196:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018198:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c001819c:	51                   	push   ecx
c001819d:	6a 00                	push   0x0
c001819f:	6a 00                	push   0x0
c00181a1:	68 00 00 11 00       	push   0x110000
c00181a6:	53                   	push   ebx
c00181a7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00181aa:	83 c4 14             	add    esp,0x14
c00181ad:	53                   	push   ebx
c00181ae:	e8 53 00 ff ff       	call   c0008206 <File::close()>
c00181b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00181b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00181bb:	c6 05 a0 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa0,0x1
c00181c2:	83 c4 10             	add    esp,0x10
c00181c5:	e9 45 fe ff ff       	jmp    c001800f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c00181ca:	83 ec 0c             	sub    esp,0xc
c00181cd:	68 bb 56 02 c0       	push   0xc00256bb
c00181d2:	e8 97 7e ff ff       	call   c001006e <KePanic(char const*)>
c00181d7:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00181df:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00181e4:	83 c4 10             	add    esp,0x10
c00181e7:	85 c0                	test   eax,eax
c00181e9:	75 01                	jne    c00181ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c00181eb:	fb                   	sti    
c00181ec:	83 c4 2c             	add    esp,0x2c
c00181ef:	31 db                	xor    ebx,ebx
c00181f1:	88 d8                	mov    al,bl
c00181f3:	5b                   	pop    ebx
c00181f4:	5e                   	pop    esi
c00181f5:	5f                   	pop    edi
c00181f6:	5d                   	pop    ebp
c00181f7:	c3                   	ret    
c00181f8:	83 ec 0c             	sub    esp,0xc
c00181fb:	68 d4 56 02 c0       	push   0xc00256d4
c0018200:	e8 69 7e ff ff       	call   c001006e <KePanic(char const*)>
c0018205:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001820d:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	85 c0                	test   eax,eax
c0018217:	75 d3                	jne    c00181ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c0018219:	fb                   	sti    
c001821a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001821e:	88 cb                	mov    bl,cl
c0018220:	e9 33 ff ff ff       	jmp    c0018158 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x171>
c0018225:	83 ec 0c             	sub    esp,0xc
c0018228:	68 a7 56 02 c0       	push   0xc00256a7
c001822d:	eb a3                	jmp    c00181d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>

c001822f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001822f:	57                   	push   edi
c0018230:	56                   	push   esi
c0018231:	53                   	push   ebx
c0018232:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001823a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001823e:	83 e8 06             	sub    eax,0x6
c0018241:	0f b7 c0             	movzx  eax,ax
c0018244:	50                   	push   eax
c0018245:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001824a:	50                   	push   eax
c001824b:	e8 b6 fa ff ff       	call   c0017d06 <Vm::realToLinear(unsigned short, unsigned short)>
c0018250:	5a                   	pop    edx
c0018251:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018254:	5b                   	pop    ebx
c0018255:	8d 56 fa             	lea    edx,[esi-0x6]
c0018258:	8b 59 38             	mov    ebx,DWORD PTR [ecx+0x38]
c001825b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018261:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018264:	8d 53 02             	lea    edx,[ebx+0x2]
c0018267:	66 89 10             	mov    WORD PTR [eax],dx
c001826a:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c001826e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018272:	8b 59 40             	mov    ebx,DWORD PTR [ecx+0x40]
c0018275:	66 8b 71 40          	mov    si,WORD PTR [ecx+0x40]
c0018279:	0f b6 d7             	movzx  edx,bh
c001827c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018280:	c1 e2 08             	shl    edx,0x8
c0018283:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c0018289:	80 7e 61 00          	cmp    BYTE PTR [esi+0x61],0x0
c001828d:	0f b6 f3             	movzx  esi,bl
c0018290:	74 2c                	je     c00182be <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x8f>
c0018292:	09 f2                	or     edx,esi
c0018294:	80 ce 02             	or     dh,0x2
c0018297:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001829b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182a0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00182a4:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00182ac:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00182af:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00182b7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00182ba:	5b                   	pop    ebx
c00182bb:	5e                   	pop    esi
c00182bc:	5f                   	pop    edi
c00182bd:	c3                   	ret    
c00182be:	09 f2                	or     edx,esi
c00182c0:	80 e6 fd             	and    dh,0xfd
c00182c3:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00182c7:	eb d2                	jmp    c001829b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6c>

c00182c9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00182c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00182ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00182d3:	c1 e0 04             	shl    eax,0x4
c00182d6:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00182d9:	c3                   	ret    

c00182da <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00182da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00182df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00182e4:	c1 e0 04             	shl    eax,0x4
c00182e7:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00182eb:	c3                   	ret    

c00182ec <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00182ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00182f1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00182f6:	c1 e0 04             	shl    eax,0x4
c00182f9:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00182fc:	c3                   	ret    

c00182fd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00182fd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018302:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018307:	c1 e0 04             	shl    eax,0x4
c001830a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001830e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018311:	c3                   	ret    

c0018312 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018312:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018317:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001831c:	c1 e0 04             	shl    eax,0x4
c001831f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018323:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018327:	c3                   	ret    

c0018328 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018328:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001832d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018332:	c1 e0 04             	shl    eax,0x4
c0018335:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018339:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001833c:	c3                   	ret    

c001833d <Vm::faultHandler(regs*)>:
c001833d:	55                   	push   ebp
c001833e:	57                   	push   edi
c001833f:	56                   	push   esi
c0018340:	53                   	push   ebx
c0018341:	83 ec 1c             	sub    esp,0x1c
c0018344:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018348:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001834b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001834f:	89 c6                	mov    esi,eax
c0018351:	52                   	push   edx
c0018352:	0f b7 c0             	movzx  eax,ax
c0018355:	50                   	push   eax
c0018356:	e8 ab f9 ff ff       	call   c0017d06 <Vm::realToLinear(unsigned short, unsigned short)>
c001835b:	59                   	pop    ecx
c001835c:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001835f:	5f                   	pop    edi
c0018360:	0f b7 d5             	movzx  edx,bp
c0018363:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
c0018366:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001836a:	89 c1                	mov    ecx,eax
c001836c:	0f b7 c7             	movzx  eax,di
c001836f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018373:	50                   	push   eax
c0018374:	52                   	push   edx
c0018375:	e8 8c f9 ff ff       	call   c0017d06 <Vm::realToLinear(unsigned short, unsigned short)>
c001837a:	83 c4 08             	add    esp,0x8
c001837d:	c6 44 24 06 06       	mov    BYTE PTR [esp+0x6],0x6
c0018382:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0018387:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c001838c:	8a 11                	mov    dl,BYTE PTR [ecx]
c001838e:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018392:	83 ea 26             	sub    edx,0x26
c0018395:	0f b6 d2             	movzx  edx,dl
c0018398:	81 fa d5 00 00 00    	cmp    edx,0xd5
c001839e:	0f 87 04 04 00 00    	ja     c00187a8 <Vm::faultHandler(regs*)+0x46b>
c00183a4:	ff 24 95 74 57 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda88c]
c00183ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183b0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00183b4:	b0 01                	mov    al,0x1
c00183b6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00183b9:	83 c5 01             	add    ebp,0x1
c00183bc:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c00183bf:	83 c4 1c             	add    esp,0x1c
c00183c2:	5b                   	pop    ebx
c00183c3:	5e                   	pop    esi
c00183c4:	5f                   	pop    edi
c00183c5:	5d                   	pop    ebp
c00183c6:	c3                   	ret    
c00183c7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00183ca:	c6 44 24 06 02       	mov    BYTE PTR [esp+0x6],0x2
c00183cf:	83 c2 01             	add    edx,0x1
c00183d2:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00183d5:	83 c1 01             	add    ecx,0x1
c00183d8:	eb b2                	jmp    c001838c <Vm::faultHandler(regs*)+0x4f>
c00183da:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00183dd:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c00183e2:	83 c2 01             	add    edx,0x1
c00183e5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00183e8:	eb eb                	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c00183ea:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00183ed:	c6 44 24 06 05       	mov    BYTE PTR [esp+0x6],0x5
c00183f2:	83 c2 01             	add    edx,0x1
c00183f5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00183f8:	eb db                	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c00183fa:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00183fd:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0018402:	83 c2 01             	add    edx,0x1
c0018405:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018408:	eb cb                	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c001840a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001840d:	c6 44 24 06 03       	mov    BYTE PTR [esp+0x6],0x3
c0018412:	83 c2 01             	add    edx,0x1
c0018415:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018418:	eb bb                	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c001841a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001841d:	c6 44 24 06 04       	mov    BYTE PTR [esp+0x6],0x4
c0018422:	83 c2 01             	add    edx,0x1
c0018425:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018428:	eb ab                	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c001842a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001842d:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0018432:	83 c2 01             	add    edx,0x1
c0018435:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018438:	eb 9b                	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c001843a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001843d:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0018442:	83 c2 01             	add    edx,0x1
c0018445:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018448:	eb 8b                	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c001844a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001844d:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018452:	74 0d                	je     c0018461 <Vm::faultHandler(regs*)+0x124>
c0018454:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001845b:	0f 87 8a 06 00 00    	ja     c0018aeb <Vm::faultHandler(regs*)+0x7ae>
c0018461:	83 ec 0c             	sub    esp,0xc
c0018464:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018468:	0f b7 f6             	movzx  esi,si
c001846b:	50                   	push   eax
c001846c:	e8 4c f8 ff ff       	call   c0017cbd <Vm::inbv(unsigned short)>
c0018471:	83 c4 0c             	add    esp,0xc
c0018474:	0f b6 c0             	movzx  eax,al
c0018477:	50                   	push   eax
c0018478:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001847c:	50                   	push   eax
c001847d:	56                   	push   esi
c001847e:	e8 7a fe ff ff       	call   c00182fd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018489:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001848d:	0f 84 d6 05 00 00    	je     c0018a69 <Vm::faultHandler(regs*)+0x72c>
c0018493:	83 e8 01             	sub    eax,0x1
c0018496:	0f b7 c0             	movzx  eax,ax
c0018499:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001849c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001849f:	83 c0 01             	add    eax,0x1
c00184a2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00184a5:	83 c4 1c             	add    esp,0x1c
c00184a8:	b0 01                	mov    al,0x1
c00184aa:	5b                   	pop    ebx
c00184ab:	5e                   	pop    esi
c00184ac:	5f                   	pop    edi
c00184ad:	5d                   	pop    ebp
c00184ae:	c3                   	ret    
c00184af:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00184b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00184b5:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00184ba:	0f 85 98 04 00 00    	jne    c0018958 <Vm::faultHandler(regs*)+0x61b>
c00184c0:	0f b7 c8             	movzx  ecx,ax
c00184c3:	0f b7 f6             	movzx  esi,si
c00184c6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00184c9:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00184ce:	0f 84 35 05 00 00    	je     c0018a09 <Vm::faultHandler(regs*)+0x6cc>
c00184d4:	ed                   	in     eax,dx
c00184d5:	83 ec 04             	sub    esp,0x4
c00184d8:	50                   	push   eax
c00184d9:	51                   	push   ecx
c00184da:	56                   	push   esi
c00184db:	e8 48 fe ff ff       	call   c0018328 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00184e0:	83 c4 10             	add    esp,0x10
c00184e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00184e6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00184ea:	0f 84 9d 05 00 00    	je     c0018a8d <Vm::faultHandler(regs*)+0x750>
c00184f0:	83 e8 04             	sub    eax,0x4
c00184f3:	25 ff ff 00 00       	and    eax,0xffff
c00184f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00184fb:	eb 9f                	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c00184fd:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018502:	83 f8 06             	cmp    eax,0x6
c0018505:	0f 87 60 03 00 00    	ja     c001886b <Vm::faultHandler(regs*)+0x52e>
c001850b:	ff 24 85 cc 5a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda534]
c0018512:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018517:	83 f8 06             	cmp    eax,0x6
c001851a:	0f 87 f6 02 00 00    	ja     c0018816 <Vm::faultHandler(regs*)+0x4d9>
c0018520:	ff 24 85 e8 5a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda518]
c0018527:	83 ec 08             	sub    esp,0x8
c001852a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001852e:	50                   	push   eax
c001852f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018533:	50                   	push   eax
c0018534:	e8 97 f7 ff ff       	call   c0017cd0 <Vm::outbv(unsigned short, unsigned char)>
c0018539:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001853c:	83 c4 10             	add    esp,0x10
c001853f:	83 c0 02             	add    eax,0x2
c0018542:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018545:	b0 01                	mov    al,0x1
c0018547:	e9 73 fe ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c001854c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018550:	3d ee 00 00 00       	cmp    eax,0xee
c0018555:	0f 84 5a 04 00 00    	je     c00189b5 <Vm::faultHandler(regs*)+0x678>
c001855b:	83 ec 0c             	sub    esp,0xc
c001855e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018562:	52                   	push   edx
c0018563:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018567:	56                   	push   esi
c0018568:	51                   	push   ecx
c0018569:	50                   	push   eax
c001856a:	53                   	push   ebx
c001856b:	e8 bf fc ff ff       	call   c001822f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018570:	83 c4 20             	add    esp,0x20
c0018573:	b0 01                	mov    al,0x1
c0018575:	e9 45 fe ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c001857a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001857e:	89 d1                	mov    ecx,edx
c0018580:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0018583:	c1 e1 08             	shl    ecx,0x8
c0018586:	09 ca                	or     edx,ecx
c0018588:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001858b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001858f:	89 d1                	mov    ecx,edx
c0018591:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0018595:	c1 e1 08             	shl    ecx,0x8
c0018598:	09 ca                	or     edx,ecx
c001859a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001859d:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00185a1:	89 d1                	mov    ecx,edx
c00185a3:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00185a7:	c1 e1 08             	shl    ecx,0x8
c00185aa:	09 ca                	or     edx,ecx
c00185ac:	81 ca 00 02 02 00    	or     edx,0x20200
c00185b2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00185b5:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00185b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00185bf:	d1 e8                	shr    eax,1
c00185c1:	83 e0 01             	and    eax,0x1
c00185c4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00185c7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00185ca:	83 c0 06             	add    eax,0x6
c00185cd:	25 ff ff 00 00       	and    eax,0xffff
c00185d2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00185d5:	b0 01                	mov    al,0x1
c00185d7:	e9 e3 fd ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c00185dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00185df:	83 ec 0c             	sub    esp,0xc
c00185e2:	b0 00                	mov    al,0x0
c00185e4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00185e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00185eb:	50                   	push   eax
c00185ec:	e8 cc f6 ff ff       	call   c0017cbd <Vm::inbv(unsigned short)>
c00185f1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00185f4:	0f b6 c0             	movzx  eax,al
c00185f7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00185fa:	09 c2                	or     edx,eax
c00185fc:	83 c1 02             	add    ecx,0x2
c00185ff:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018602:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	b0 01                	mov    al,0x1
c001860a:	e9 b0 fd ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c001860f:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018614:	0f 85 7a 03 00 00    	jne    c0018994 <Vm::faultHandler(regs*)+0x657>
c001861a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001861d:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018623:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018626:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001862a:	66 ed                	in     ax,dx
c001862c:	0f b7 c0             	movzx  eax,ax
c001862f:	09 f0                	or     eax,esi
c0018631:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018634:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018637:	83 c0 02             	add    eax,0x2
c001863a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001863d:	83 c4 1c             	add    esp,0x1c
c0018640:	b0 01                	mov    al,0x1
c0018642:	5b                   	pop    ebx
c0018643:	5e                   	pop    esi
c0018644:	5f                   	pop    edi
c0018645:	5d                   	pop    ebp
c0018646:	c3                   	ret    
c0018647:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001864a:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001864f:	0f 84 d7 02 00 00    	je     c001892c <Vm::faultHandler(regs*)+0x5ef>
c0018655:	83 ef 04             	sub    edi,0x4
c0018658:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001865e:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018664:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018667:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001866a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018670:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018674:	0f 84 22 fe ff ff    	je     c001849c <Vm::faultHandler(regs*)+0x15f>
c001867a:	80 ce 02             	or     dh,0x2
c001867d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018680:	e9 17 fe ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018685:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001868a:	0f 84 6b 02 00 00    	je     c00188fb <Vm::faultHandler(regs*)+0x5be>
c0018690:	8b 10                	mov    edx,DWORD PTR [eax]
c0018692:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018698:	81 ca 00 02 02 00    	or     edx,0x20200
c001869e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00186a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186a3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00186a9:	c1 e8 09             	shr    eax,0x9
c00186ac:	83 e0 01             	and    eax,0x1
c00186af:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00186b2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00186b5:	83 c0 04             	add    eax,0x4
c00186b8:	25 ff ff 00 00       	and    eax,0xffff
c00186bd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00186c0:	e9 d7 fd ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c00186c5:	83 ec 08             	sub    esp,0x8
c00186c8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00186cc:	50                   	push   eax
c00186cd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00186d1:	50                   	push   eax
c00186d2:	e8 f9 f5 ff ff       	call   c0017cd0 <Vm::outbv(unsigned short, unsigned char)>
c00186d7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	83 c2 01             	add    edx,0x1
c00186e0:	b0 01                	mov    al,0x1
c00186e2:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00186e5:	e9 d5 fc ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c00186ea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00186ed:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00186f0:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00186f5:	0f 84 ac 02 00 00    	je     c00189a7 <Vm::faultHandler(regs*)+0x66a>
c00186fb:	ef                   	out    dx,eax
c00186fc:	e9 9b fd ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018701:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018704:	83 c2 01             	add    edx,0x1
c0018707:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001870a:	e9 c6 fc ff ff       	jmp    c00183d5 <Vm::faultHandler(regs*)+0x98>
c001870f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018714:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018718:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001871b:	83 c0 01             	add    eax,0x1
c001871e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018721:	b0 01                	mov    al,0x1
c0018723:	e9 97 fc ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c0018728:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001872b:	83 ec 0c             	sub    esp,0xc
c001872e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018732:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0018738:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001873b:	50                   	push   eax
c001873c:	e8 7c f5 ff ff       	call   c0017cbd <Vm::inbv(unsigned short)>
c0018741:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018744:	0f b6 c0             	movzx  eax,al
c0018747:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001874a:	09 c7                	or     edi,eax
c001874c:	83 c5 01             	add    ebp,0x1
c001874f:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018752:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	b0 01                	mov    al,0x1
c001875a:	e9 60 fc ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c001875f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018762:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018767:	0f 85 34 02 00 00    	jne    c00189a1 <Vm::faultHandler(regs*)+0x664>
c001876d:	66 ed                	in     ax,dx
c001876f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018772:	0f b7 c0             	movzx  eax,ax
c0018775:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c001877b:	09 d0                	or     eax,edx
c001877d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018780:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018783:	83 c1 01             	add    ecx,0x1
c0018786:	b0 01                	mov    al,0x1
c0018788:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c001878b:	e9 2f fc ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c0018790:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018793:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018797:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001879c:	0f 84 0c 02 00 00    	je     c00189ae <Vm::faultHandler(regs*)+0x671>
c00187a2:	ef                   	out    dx,eax
c00187a3:	e9 8c fe ff ff       	jmp    c0018634 <Vm::faultHandler(regs*)+0x2f7>
c00187a8:	0f b6 74 24 04       	movzx  esi,BYTE PTR [esp+0x4]
c00187ad:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00187b1:	50                   	push   eax
c00187b2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00187b6:	50                   	push   eax
c00187b7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00187bb:	50                   	push   eax
c00187bc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00187c0:	50                   	push   eax
c00187c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00187c5:	50                   	push   eax
c00187c6:	56                   	push   esi
c00187c7:	56                   	push   esi
c00187c8:	68 44 57 02 c0       	push   0xc0025744
c00187cd:	e8 aa e7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00187d2:	83 c4 20             	add    esp,0x20
c00187d5:	eb 05                	jmp    c00187dc <Vm::faultHandler(regs*)+0x49f>
c00187d7:	83 f8 5a             	cmp    eax,0x5a
c00187da:	74 27                	je     c0018803 <Vm::faultHandler(regs*)+0x4c6>
c00187dc:	83 ec 0c             	sub    esp,0xc
c00187df:	6a 60                	push   0x60
c00187e1:	e8 d7 f4 ff ff       	call   c0017cbd <Vm::inbv(unsigned short)>
c00187e6:	83 c4 10             	add    esp,0x10
c00187e9:	0f b6 c0             	movzx  eax,al
c00187ec:	83 f8 1c             	cmp    eax,0x1c
c00187ef:	75 e6                	jne    c00187d7 <Vm::faultHandler(regs*)+0x49a>
c00187f1:	eb 10                	jmp    c0018803 <Vm::faultHandler(regs*)+0x4c6>
c00187f3:	83 ec 0c             	sub    esp,0xc
c00187f6:	6a 60                	push   0x60
c00187f8:	e8 c0 f4 ff ff       	call   c0017cbd <Vm::inbv(unsigned short)>
c00187fd:	83 c4 10             	add    esp,0x10
c0018800:	0f b6 c0             	movzx  eax,al
c0018803:	83 f8 1c             	cmp    eax,0x1c
c0018806:	74 eb                	je     c00187f3 <Vm::faultHandler(regs*)+0x4b6>
c0018808:	83 f8 5a             	cmp    eax,0x5a
c001880b:	74 e6                	je     c00187f3 <Vm::faultHandler(regs*)+0x4b6>
c001880d:	31 c0                	xor    eax,eax
c001880f:	e9 ab fb ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c0018814:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018816:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0018819:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c001881e:	0f 85 9a 00 00 00    	jne    c00188be <Vm::faultHandler(regs*)+0x581>
c0018824:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018827:	0f b7 c5             	movzx  eax,bp
c001882a:	81 e1 00 04 00 00    	and    ecx,0x400
c0018830:	0f b7 d6             	movzx  edx,si
c0018833:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018836:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001883b:	0f 84 f8 01 00 00    	je     c0018a39 <Vm::faultHandler(regs*)+0x6fc>
c0018841:	83 ec 08             	sub    esp,0x8
c0018844:	50                   	push   eax
c0018845:	52                   	push   edx
c0018846:	e8 a1 fa ff ff       	call   c00182ec <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001884b:	83 c4 10             	add    esp,0x10
c001884e:	89 fa                	mov    edx,edi
c0018850:	ef                   	out    dx,eax
c0018851:	85 c9                	test   ecx,ecx
c0018853:	0f 84 44 02 00 00    	je     c0018a9d <Vm::faultHandler(regs*)+0x760>
c0018859:	8d 45 fc             	lea    eax,[ebp-0x4]
c001885c:	25 ff ff 00 00       	and    eax,0xffff
c0018861:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018864:	e9 33 fc ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018869:	8b 33                	mov    esi,DWORD PTR [ebx]
c001886b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001886e:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018873:	74 0b                	je     c0018880 <Vm::faultHandler(regs*)+0x543>
c0018875:	3d ff ff 00 00       	cmp    eax,0xffff
c001887a:	0f 87 3a 02 00 00    	ja     c0018aba <Vm::faultHandler(regs*)+0x77d>
c0018880:	83 ec 08             	sub    esp,0x8
c0018883:	0f b7 c0             	movzx  eax,ax
c0018886:	50                   	push   eax
c0018887:	0f b7 c6             	movzx  eax,si
c001888a:	50                   	push   eax
c001888b:	e8 39 fa ff ff       	call   c00182c9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018890:	5e                   	pop    esi
c0018891:	0f b6 c0             	movzx  eax,al
c0018894:	5f                   	pop    edi
c0018895:	50                   	push   eax
c0018896:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001889a:	50                   	push   eax
c001889b:	e8 30 f4 ff ff       	call   c0017cd0 <Vm::outbv(unsigned short, unsigned char)>
c00188a0:	83 c4 10             	add    esp,0x10
c00188a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00188a6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00188aa:	0f 84 ae 01 00 00    	je     c0018a5e <Vm::faultHandler(regs*)+0x721>
c00188b0:	83 e8 01             	sub    eax,0x1
c00188b3:	0f b7 c0             	movzx  eax,ax
c00188b6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00188b9:	e9 de fb ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c00188be:	81 fd ff ff 00 00    	cmp    ebp,0xffff
c00188c4:	0f 86 5a ff ff ff    	jbe    c0018824 <Vm::faultHandler(regs*)+0x4e7>
c00188ca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00188ce:	50                   	push   eax
c00188cf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00188d3:	50                   	push   eax
c00188d4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00188d8:	50                   	push   eax
c00188d9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00188dd:	50                   	push   eax
c00188de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00188e2:	50                   	push   eax
c00188e3:	6a 6f                	push   0x6f
c00188e5:	6a 6f                	push   0x6f
c00188e7:	68 14 57 02 c0       	push   0xc0025714
c00188ec:	e8 8b e6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00188f1:	83 c4 20             	add    esp,0x20
c00188f4:	31 c0                	xor    eax,eax
c00188f6:	e9 c4 fa ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c00188fb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188fe:	81 ca 00 02 02 00    	or     edx,0x20200
c0018904:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018907:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001890a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018910:	c1 e8 09             	shr    eax,0x9
c0018913:	83 e0 01             	and    eax,0x1
c0018916:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018919:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001891c:	83 c0 02             	add    eax,0x2
c001891f:	25 ff ff 00 00       	and    eax,0xffff
c0018924:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018927:	e9 70 fb ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c001892c:	83 ef 02             	sub    edi,0x2
c001892f:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018935:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018938:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001893c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018942:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018946:	0f 84 28 01 00 00    	je     c0018a74 <Vm::faultHandler(regs*)+0x737>
c001894c:	80 ce 02             	or     dh,0x2
c001894f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018953:	e9 44 fb ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018958:	3d ff ff 00 00       	cmp    eax,0xffff
c001895d:	0f 86 5d fb ff ff    	jbe    c00184c0 <Vm::faultHandler(regs*)+0x183>
c0018963:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018967:	50                   	push   eax
c0018968:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001896c:	50                   	push   eax
c001896d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018971:	50                   	push   eax
c0018972:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018976:	50                   	push   eax
c0018977:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001897b:	50                   	push   eax
c001897c:	6a 6d                	push   0x6d
c001897e:	6a 6d                	push   0x6d
c0018980:	68 14 57 02 c0       	push   0xc0025714
c0018985:	e8 f2 e5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001898a:	83 c4 20             	add    esp,0x20
c001898d:	31 c0                	xor    eax,eax
c001898f:	e9 2b fa ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c0018994:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018998:	ed                   	in     eax,dx
c0018999:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001899c:	e9 93 fc ff ff       	jmp    c0018634 <Vm::faultHandler(regs*)+0x2f7>
c00189a1:	ed                   	in     eax,dx
c00189a2:	e9 d6 fd ff ff       	jmp    c001877d <Vm::faultHandler(regs*)+0x440>
c00189a7:	66 ef                	out    dx,ax
c00189a9:	e9 ee fa ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c00189ae:	66 ef                	out    dx,ax
c00189b0:	e9 7f fc ff ff       	jmp    c0018634 <Vm::faultHandler(regs*)+0x2f7>
c00189b5:	83 ec 0c             	sub    esp,0xc
c00189b8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c00189bb:	57                   	push   edi
c00189bc:	e8 b7 f3 ff ff       	call   c0017d78 <Vm::mainloop3(unsigned long)>
c00189c1:	83 c4 10             	add    esp,0x10
c00189c4:	b0 01                	mov    al,0x1
c00189c6:	e9 f4 f9 ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c00189cb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00189ce:	e9 43 fe ff ff       	jmp    c0018816 <Vm::faultHandler(regs*)+0x4d9>
c00189d3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00189d6:	e9 3b fe ff ff       	jmp    c0018816 <Vm::faultHandler(regs*)+0x4d9>
c00189db:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00189de:	e9 33 fe ff ff       	jmp    c0018816 <Vm::faultHandler(regs*)+0x4d9>
c00189e3:	89 ee                	mov    esi,ebp
c00189e5:	e9 2c fe ff ff       	jmp    c0018816 <Vm::faultHandler(regs*)+0x4d9>
c00189ea:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00189ed:	e9 79 fe ff ff       	jmp    c001886b <Vm::faultHandler(regs*)+0x52e>
c00189f2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00189f5:	e9 71 fe ff ff       	jmp    c001886b <Vm::faultHandler(regs*)+0x52e>
c00189fa:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00189fd:	e9 69 fe ff ff       	jmp    c001886b <Vm::faultHandler(regs*)+0x52e>
c0018a02:	89 ee                	mov    esi,ebp
c0018a04:	e9 62 fe ff ff       	jmp    c001886b <Vm::faultHandler(regs*)+0x52e>
c0018a09:	66 ed                	in     ax,dx
c0018a0b:	83 ec 04             	sub    esp,0x4
c0018a0e:	0f b7 c0             	movzx  eax,ax
c0018a11:	50                   	push   eax
c0018a12:	51                   	push   ecx
c0018a13:	56                   	push   esi
c0018a14:	e8 f9 f8 ff ff       	call   c0018312 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018a19:	83 c4 10             	add    esp,0x10
c0018a1c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a1f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a23:	0f 84 84 00 00 00    	je     c0018aad <Vm::faultHandler(regs*)+0x770>
c0018a29:	83 e8 02             	sub    eax,0x2
c0018a2c:	25 ff ff 00 00       	and    eax,0xffff
c0018a31:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018a34:	e9 63 fa ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018a39:	83 ec 08             	sub    esp,0x8
c0018a3c:	50                   	push   eax
c0018a3d:	52                   	push   edx
c0018a3e:	e8 97 f8 ff ff       	call   c00182da <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018a43:	83 c4 10             	add    esp,0x10
c0018a46:	89 fa                	mov    edx,edi
c0018a48:	66 ef                	out    dx,ax
c0018a4a:	85 c9                	test   ecx,ecx
c0018a4c:	74 32                	je     c0018a80 <Vm::faultHandler(regs*)+0x743>
c0018a4e:	8d 45 fe             	lea    eax,[ebp-0x2]
c0018a51:	25 ff ff 00 00       	and    eax,0xffff
c0018a56:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018a59:	e9 3e fa ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018a5e:	83 c0 01             	add    eax,0x1
c0018a61:	0f b7 c0             	movzx  eax,ax
c0018a64:	e9 4d fe ff ff       	jmp    c00188b6 <Vm::faultHandler(regs*)+0x579>
c0018a69:	83 c0 01             	add    eax,0x1
c0018a6c:	0f b7 c0             	movzx  eax,ax
c0018a6f:	e9 25 fa ff ff       	jmp    c0018499 <Vm::faultHandler(regs*)+0x15c>
c0018a74:	80 e6 fd             	and    dh,0xfd
c0018a77:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a7b:	e9 1c fa ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018a80:	8d 45 02             	lea    eax,[ebp+0x2]
c0018a83:	25 ff ff 00 00       	and    eax,0xffff
c0018a88:	e9 29 fe ff ff       	jmp    c00188b6 <Vm::faultHandler(regs*)+0x579>
c0018a8d:	83 c0 04             	add    eax,0x4
c0018a90:	25 ff ff 00 00       	and    eax,0xffff
c0018a95:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018a98:	e9 ff f9 ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018a9d:	8d 45 04             	lea    eax,[ebp+0x4]
c0018aa0:	25 ff ff 00 00       	and    eax,0xffff
c0018aa5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018aa8:	e9 ef f9 ff ff       	jmp    c001849c <Vm::faultHandler(regs*)+0x15f>
c0018aad:	83 c0 02             	add    eax,0x2
c0018ab0:	25 ff ff 00 00       	and    eax,0xffff
c0018ab5:	e9 df f9 ff ff       	jmp    c0018499 <Vm::faultHandler(regs*)+0x15c>
c0018aba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018abe:	50                   	push   eax
c0018abf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018ac3:	50                   	push   eax
c0018ac4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018ac8:	50                   	push   eax
c0018ac9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018acd:	50                   	push   eax
c0018ace:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018ad2:	50                   	push   eax
c0018ad3:	6a 6e                	push   0x6e
c0018ad5:	6a 6e                	push   0x6e
c0018ad7:	68 14 57 02 c0       	push   0xc0025714
c0018adc:	e8 9b e4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018ae1:	83 c4 20             	add    esp,0x20
c0018ae4:	31 c0                	xor    eax,eax
c0018ae6:	e9 d4 f8 ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>
c0018aeb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018aef:	50                   	push   eax
c0018af0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018af4:	50                   	push   eax
c0018af5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018af9:	50                   	push   eax
c0018afa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018afe:	50                   	push   eax
c0018aff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018b03:	50                   	push   eax
c0018b04:	6a 6c                	push   0x6c
c0018b06:	6a 6c                	push   0x6c
c0018b08:	68 14 57 02 c0       	push   0xc0025714
c0018b0d:	e8 6a e4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018b12:	83 c4 20             	add    esp,0x20
c0018b15:	31 c0                	xor    eax,eax
c0018b17:	e9 a3 f8 ff ff       	jmp    c00183bf <Vm::faultHandler(regs*)+0x82>

c0018b1c <IOAPIC::close(int, int, void*)>:
c0018b1c:	b8 00 00 00 00       	mov    eax,0x0
c0018b21:	c3                   	ret    

c0018b22 <apicGetBase()>:
c0018b22:	55                   	push   ebp
c0018b23:	89 e5                	mov    ebp,esp
c0018b25:	83 ec 18             	sub    esp,0x18
c0018b28:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0018b2d:	83 e0 08             	and    eax,0x8
c0018b30:	0f b6 c0             	movzx  eax,al
c0018b33:	85 c0                	test   eax,eax
c0018b35:	75 07                	jne    c0018b3e <apicGetBase()+0x1c>
c0018b37:	b8 00 00 00 00       	mov    eax,0x0
c0018b3c:	eb 1b                	jmp    c0018b59 <apicGetBase()+0x37>
c0018b3e:	83 ec 0c             	sub    esp,0xc
c0018b41:	6a 1b                	push   0x1b
c0018b43:	e8 55 15 00 00       	call   c001a09d <x86rdmsr(unsigned int)>
c0018b48:	83 c4 10             	add    esp,0x10
c0018b4b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018b4e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018b51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018b54:	25 00 00 ff ff       	and    eax,0xffff0000
c0018b59:	c9                   	leave  
c0018b5a:	c3                   	ret    
c0018b5b:	90                   	nop

c0018b5c <IOAPIC::IOAPIC()>:
c0018b5c:	83 ec 0c             	sub    esp,0xc
c0018b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b63:	83 ec 08             	sub    esp,0x8
c0018b66:	68 04 5b 02 c0       	push   0xc0025b04
c0018b6b:	50                   	push   eax
c0018b6c:	e8 45 10 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0018b71:	83 c4 10             	add    esp,0x10
c0018b74:	ba 24 5b 02 c0       	mov    edx,0xc0025b24
c0018b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b7d:	89 10                	mov    DWORD PTR [eax],edx
c0018b7f:	90                   	nop
c0018b80:	83 c4 0c             	add    esp,0xc
c0018b83:	c3                   	ret    

c0018b84 <apicOpen()>:
c0018b84:	55                   	push   ebp
c0018b85:	89 e5                	mov    ebp,esp
c0018b87:	53                   	push   ebx
c0018b88:	83 ec 34             	sub    esp,0x34
c0018b8b:	83 ec 0c             	sub    esp,0xc
c0018b8e:	68 0c 5b 02 c0       	push   0xc0025b0c
c0018b93:	e8 e4 e3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018b98:	83 c4 10             	add    esp,0x10
c0018b9b:	a0 20 fb 02 c0       	mov    al,ds:0xc002fb20
c0018ba0:	83 f0 01             	xor    eax,0x1
c0018ba3:	0f b6 c0             	movzx  eax,al
c0018ba6:	85 c0                	test   eax,eax
c0018ba8:	0f 84 a3 00 00 00    	je     c0018c51 <apicOpen()+0xcd>
c0018bae:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018bb2:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c0018bb7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018bbb:	0f b6 c0             	movzx  eax,al
c0018bbe:	39 c2                	cmp    edx,eax
c0018bc0:	0f 83 84 00 00 00    	jae    c0018c4a <apicOpen()+0xc6>
c0018bc6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018bcd:	83 ec 0c             	sub    esp,0xc
c0018bd0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018bd3:	e8 87 71 ff ff       	call   c000fd5f <malloc>
c0018bd8:	83 c4 10             	add    esp,0x10
c0018bdb:	89 c3                	mov    ebx,eax
c0018bdd:	83 ec 0c             	sub    esp,0xc
c0018be0:	53                   	push   ebx
c0018be1:	e8 76 ff ff ff       	call   c0018b5c <IOAPIC::IOAPIC()>
c0018be6:	83 c4 10             	add    esp,0x10
c0018be9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018bec:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018bf0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018bf3:	89 14 85 00 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0500],edx
c0018bfa:	a1 e0 fa 02 c0       	mov    eax,ds:0xc002fae0
c0018bff:	83 c0 01             	add    eax,0x1
c0018c02:	a3 e0 fa 02 c0       	mov    ds:0xc002fae0,eax
c0018c07:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0018c0c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0018c12:	83 ec 08             	sub    esp,0x8
c0018c15:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018c18:	50                   	push   eax
c0018c19:	e8 36 0e ff ff       	call   c0009a54 <Device::addChild(Device*)>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c26:	83 c0 08             	add    eax,0x8
c0018c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c2b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018c2f:	6a 00                	push   0x0
c0018c31:	6a 00                	push   0x0
c0018c33:	52                   	push   edx
c0018c34:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018c37:	ff d0                	call   eax
c0018c39:	83 c4 10             	add    esp,0x10
c0018c3c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018c3f:	83 c0 01             	add    eax,0x1
c0018c42:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018c45:	e9 68 ff ff ff       	jmp    c0018bb2 <apicOpen()+0x2e>
c0018c4a:	c6 05 20 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb20,0x1
c0018c51:	e8 cc fe ff ff       	call   c0018b22 <apicGetBase()>
c0018c56:	05 f0 00 00 00       	add    eax,0xf0
c0018c5b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018c5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c63:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018c66:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018c6d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018c74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018c77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018c7a:	89 10                	mov    DWORD PTR [eax],edx
c0018c7c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018c83:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0018c88:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018c8b:	7d 7c                	jge    c0018d09 <apicOpen()+0x185>
c0018c8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018c90:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018c97:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018c9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018c9d:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ca4:	c1 e8 08             	shr    eax,0x8
c0018ca7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018cab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018cae:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018cb5:	c1 e8 18             	shr    eax,0x18
c0018cb8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018cbb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018cbf:	3d ff 00 00 00       	cmp    eax,0xff
c0018cc4:	75 3a                	jne    c0018d00 <apicOpen()+0x17c>
c0018cc6:	e8 57 fe ff ff       	call   c0018b22 <apicGetBase()>
c0018ccb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018ccf:	83 fa 01             	cmp    edx,0x1
c0018cd2:	75 07                	jne    c0018cdb <apicOpen()+0x157>
c0018cd4:	ba 60 03 00 00       	mov    edx,0x360
c0018cd9:	eb 05                	jmp    c0018ce0 <apicOpen()+0x15c>
c0018cdb:	ba 50 03 00 00       	mov    edx,0x350
c0018ce0:	01 d0                	add    eax,edx
c0018ce2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018ce5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cea:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018ced:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018cf4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018cf8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018cfb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018cfe:	89 10                	mov    DWORD PTR [eax],edx
c0018d00:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018d04:	e9 7a ff ff ff       	jmp    c0018c83 <apicOpen()+0xff>
c0018d09:	90                   	nop
c0018d0a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018d0d:	c9                   	leave  
c0018d0e:	c3                   	ret    
c0018d0f:	90                   	nop

c0018d10 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018d10:	55                   	push   ebp
c0018d11:	89 e5                	mov    ebp,esp
c0018d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d1c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018d1f:	72 1d                	jb     c0018d3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d24:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d2d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018d33:	01 d0                	add    eax,edx
c0018d35:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018d38:	73 04                	jae    c0018d3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018d3a:	b0 01                	mov    al,0x1
c0018d3c:	eb 02                	jmp    c0018d40 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018d3e:	b0 00                	mov    al,0x0
c0018d40:	5d                   	pop    ebp
c0018d41:	c3                   	ret    

c0018d42 <IOAPIC::read(int)>:
c0018d42:	55                   	push   ebp
c0018d43:	89 e5                	mov    ebp,esp
c0018d45:	83 ec 10             	sub    esp,0x10
c0018d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d4b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d51:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018d54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018d57:	0f b6 d0             	movzx  edx,al
c0018d5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018d5d:	89 10                	mov    DWORD PTR [eax],edx
c0018d5f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018d62:	83 c0 10             	add    eax,0x10
c0018d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d67:	c9                   	leave  
c0018d68:	c3                   	ret    
c0018d69:	90                   	nop

c0018d6a <IOAPIC::open(int, int, void*)>:
c0018d6a:	55                   	push   ebp
c0018d6b:	89 e5                	mov    ebp,esp
c0018d6d:	57                   	push   edi
c0018d6e:	56                   	push   esi
c0018d6f:	53                   	push   ebx
c0018d70:	83 ec 04             	sub    esp,0x4
c0018d73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018d79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018d88:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0018d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018da1:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0018da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dbd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018dc3:	0f b6 f0             	movzx  esi,al
c0018dc6:	89 d0                	mov    eax,edx
c0018dc8:	ba 00 00 00 00       	mov    edx,0x0
c0018dcd:	89 c7                	mov    edi,eax
c0018dcf:	83 e7 ff             	and    edi,0xffffffff
c0018dd2:	89 f9                	mov    ecx,edi
c0018dd4:	0f b6 da             	movzx  ebx,dl
c0018dd7:	89 c8                	mov    eax,ecx
c0018dd9:	89 da                	mov    edx,ebx
c0018ddb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018dde:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018de1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018de5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018de9:	83 e0 00             	and    eax,0x0
c0018dec:	09 d0                	or     eax,edx
c0018dee:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018df5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018dfb:	8d 50 01             	lea    edx,[eax+0x1]
c0018dfe:	88 d1                	mov    cl,dl
c0018e00:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018e03:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018e09:	0f b6 d0             	movzx  edx,al
c0018e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e0f:	83 c2 08             	add    edx,0x8
c0018e12:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018e16:	0f b6 c9             	movzx  ecx,cl
c0018e19:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018e1f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018e23:	6a 01                	push   0x1
c0018e25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e28:	e8 15 ff ff ff       	call   c0018d42 <IOAPIC::read(int)>
c0018e2d:	83 c4 08             	add    esp,0x8
c0018e30:	c1 f8 10             	sar    eax,0x10
c0018e33:	0f b6 c0             	movzx  eax,al
c0018e36:	8d 50 01             	lea    edx,[eax+0x1]
c0018e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e3c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018e42:	b8 00 00 00 00       	mov    eax,0x0
c0018e47:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018e4a:	5b                   	pop    ebx
c0018e4b:	5e                   	pop    esi
c0018e4c:	5f                   	pop    edi
c0018e4d:	5d                   	pop    ebp
c0018e4e:	c3                   	ret    
c0018e4f:	90                   	nop

c0018e50 <IOAPIC::write(int, int)>:
c0018e50:	55                   	push   ebp
c0018e51:	89 e5                	mov    ebp,esp
c0018e53:	83 ec 10             	sub    esp,0x10
c0018e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e59:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e5f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018e62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018e65:	0f b6 d0             	movzx  edx,al
c0018e68:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018e6b:	89 10                	mov    DWORD PTR [eax],edx
c0018e6d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018e70:	8d 50 10             	lea    edx,[eax+0x10]
c0018e73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018e76:	89 02                	mov    DWORD PTR [edx],eax
c0018e78:	90                   	nop
c0018e79:	c9                   	leave  
c0018e7a:	c3                   	ret    
c0018e7b:	90                   	nop

c0018e7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018e7c:	55                   	push   ebp
c0018e7d:	89 e5                	mov    ebp,esp
c0018e7f:	53                   	push   ebx
c0018e80:	83 ec 2c             	sub    esp,0x2c
c0018e83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018e86:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018e89:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018e8c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018e8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018e92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018e95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018e98:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018e9b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018e9e:	88 d8                	mov    al,bl
c0018ea0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018ea3:	88 c8                	mov    al,cl
c0018ea5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018ea8:	88 d0                	mov    al,dl
c0018eaa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018ead:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018eb1:	83 c0 08             	add    eax,0x8
c0018eb4:	01 c0                	add    eax,eax
c0018eb6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018eb9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018ebd:	83 c0 08             	add    eax,0x8
c0018ec0:	01 c0                	add    eax,eax
c0018ec2:	83 c0 01             	add    eax,0x1
c0018ec5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018ec8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018ecb:	50                   	push   eax
c0018ecc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018ecf:	e8 6e fe ff ff       	call   c0018d42 <IOAPIC::read(int)>
c0018ed4:	83 c4 08             	add    esp,0x8
c0018ed7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018eda:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018ee1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018ee4:	c1 e0 18             	shl    eax,0x18
c0018ee7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018eea:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018eed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018ef0:	52                   	push   edx
c0018ef1:	50                   	push   eax
c0018ef2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018ef5:	e8 56 ff ff ff       	call   c0018e50 <IOAPIC::write(int, int)>
c0018efa:	83 c4 0c             	add    esp,0xc
c0018efd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018f00:	50                   	push   eax
c0018f01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018f04:	e8 39 fe ff ff       	call   c0018d42 <IOAPIC::read(int)>
c0018f09:	83 c4 08             	add    esp,0x8
c0018f0c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018f0f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018f16:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018f1d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018f24:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018f28:	85 c0                	test   eax,eax
c0018f2a:	74 09                	je     c0018f35 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018f2c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018f33:	eb 07                	jmp    c0018f3c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018f35:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018f3c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018f40:	85 c0                	test   eax,eax
c0018f42:	74 09                	je     c0018f4d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018f44:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018f4b:	eb 07                	jmp    c0018f54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018f4d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018f54:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018f5b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018f5f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018f62:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018f65:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018f68:	52                   	push   edx
c0018f69:	50                   	push   eax
c0018f6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018f6d:	e8 de fe ff ff       	call   c0018e50 <IOAPIC::write(int, int)>
c0018f72:	83 c4 0c             	add    esp,0xc
c0018f75:	90                   	nop
c0018f76:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018f79:	c9                   	leave  
c0018f7a:	c3                   	ret    
c0018f7b:	90                   	nop

c0018f7c <noCopro(unsigned long)>:
c0018f7c:	c3                   	ret    
c0018f7d:	90                   	nop

c0018f7e <CPU::close(int, int, void*)>:
c0018f7e:	31 c0                	xor    eax,eax
c0018f80:	c3                   	ret    

c0018f81 <x86ReadCMOS(unsigned char)>:
c0018f81:	83 ec 14             	sub    esp,0x14
c0018f84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f88:	88 04 24             	mov    BYTE PTR [esp],al
c0018f8b:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0018f90:	0f b6 c0             	movzx  eax,al
c0018f93:	85 c0                	test   eax,eax
c0018f95:	74 04                	je     c0018f9b <x86ReadCMOS(unsigned char)+0x1a>
c0018f97:	b2 00                	mov    dl,0x0
c0018f99:	eb 02                	jmp    c0018f9d <x86ReadCMOS(unsigned char)+0x1c>
c0018f9b:	b2 80                	mov    dl,0x80
c0018f9d:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018fa0:	09 d0                	or     eax,edx
c0018fa2:	0f b6 c0             	movzx  eax,al
c0018fa5:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018fac:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018fb0:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018fb4:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018fb9:	ee                   	out    dx,al
c0018fba:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018fc1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018fc6:	89 c2                	mov    edx,eax
c0018fc8:	ec                   	in     al,dx
c0018fc9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018fcd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018fd1:	83 c4 14             	add    esp,0x14
c0018fd4:	c3                   	ret    

c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018fd5:	83 ec 18             	sub    esp,0x18
c0018fd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018fe0:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018fe4:	88 04 24             	mov    BYTE PTR [esp],al
c0018fe7:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0018fec:	0f b6 c0             	movzx  eax,al
c0018fef:	85 c0                	test   eax,eax
c0018ff1:	74 04                	je     c0018ff7 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018ff3:	b2 00                	mov    dl,0x0
c0018ff5:	eb 02                	jmp    c0018ff9 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018ff7:	b2 80                	mov    dl,0x80
c0018ff9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018ffd:	09 d0                	or     eax,edx
c0018fff:	0f b6 c0             	movzx  eax,al
c0019002:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019009:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001900d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019011:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019016:	ee                   	out    dx,al
c0019017:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001901b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019022:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019026:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001902a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001902f:	ee                   	out    dx,al
c0019030:	90                   	nop
c0019031:	83 c4 18             	add    esp,0x18
c0019034:	c3                   	ret    

c0019035 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019035:	60                   	pusha  
c0019036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001903a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001903e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019042:	9c                   	pushf  
c0019043:	fa                   	cli    
c0019044:	0f 09                	wbinvd 
c0019046:	0f 30                	wrmsr  
c0019048:	9d                   	popf   
c0019049:	89 c2                	mov    edx,eax
c001904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001904f:	89 10                	mov    DWORD PTR [eax],edx
c0019051:	61                   	popa   
c0019052:	90                   	nop
c0019053:	c3                   	ret    

c0019054 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019054:	60                   	pusha  
c0019055:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019059:	89 c1                	mov    ecx,eax
c001905b:	9c                   	pushf  
c001905c:	fa                   	cli    
c001905d:	0f 09                	wbinvd 
c001905f:	31 c0                	xor    eax,eax
c0019061:	31 d2                	xor    edx,edx
c0019063:	0f 32                	rdmsr  
c0019065:	9d                   	popf   
c0019066:	89 c2                	mov    edx,eax
c0019068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001906c:	89 10                	mov    DWORD PTR [eax],edx
c001906e:	61                   	popa   
c001906f:	90                   	nop
c0019070:	c3                   	ret    

c0019071 <AMD_K6_writeback(int, int, int)>:
c0019071:	83 ec 20             	sub    esp,0x20
c0019074:	a1 50 f1 02 c0       	mov    eax,ds:0xc002f150
c0019079:	c1 e8 14             	shr    eax,0x14
c001907c:	c1 e8 02             	shr    eax,0x2
c001907f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019083:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019088:	0f 85 9e 00 00 00    	jne    c001912c <AMD_K6_writeback(int, int, int)+0xbb>
c001908e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019092:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019096:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001909b:	75 19                	jne    c00190b6 <AMD_K6_writeback(int, int, int)+0x45>
c001909d:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00190a2:	7f 0a                	jg     c00190ae <AMD_K6_writeback(int, int, int)+0x3d>
c00190a4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00190ac:	eb 08                	jmp    c00190b6 <AMD_K6_writeback(int, int, int)+0x45>
c00190ae:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00190b6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00190bb:	7c 6e                	jl     c001912b <AMD_K6_writeback(int, int, int)+0xba>
c00190bd:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00190c2:	7e 09                	jle    c00190cd <AMD_K6_writeback(int, int, int)+0x5c>
c00190c4:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00190c9:	74 36                	je     c0019101 <AMD_K6_writeback(int, int, int)+0x90>
c00190cb:	eb 5e                	jmp    c001912b <AMD_K6_writeback(int, int, int)+0xba>
c00190cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190d1:	50                   	push   eax
c00190d2:	68 82 00 00 c0       	push   0xc0000082
c00190d7:	e8 78 ff ff ff       	call   c0019054 <AMD_K6_read_msr(unsigned int, REGS*)>
c00190dc:	83 c4 08             	add    esp,0x8
c00190df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00190e3:	01 c0                	add    eax,eax
c00190e5:	83 e0 7f             	and    eax,0x7f
c00190e8:	89 c2                	mov    edx,eax
c00190ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190ee:	50                   	push   eax
c00190ef:	6a 00                	push   0x0
c00190f1:	52                   	push   edx
c00190f2:	68 82 00 00 c0       	push   0xc0000082
c00190f7:	e8 39 ff ff ff       	call   c0019035 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00190fc:	83 c4 10             	add    esp,0x10
c00190ff:	eb 2b                	jmp    c001912c <AMD_K6_writeback(int, int, int)+0xbb>
c0019101:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019105:	50                   	push   eax
c0019106:	68 82 00 00 c0       	push   0xc0000082
c001910b:	e8 44 ff ff ff       	call   c0019054 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019110:	83 c4 08             	add    esp,0x8
c0019113:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019117:	50                   	push   eax
c0019118:	6a 00                	push   0x0
c001911a:	6a 00                	push   0x0
c001911c:	68 82 00 00 c0       	push   0xc0000082
c0019121:	e8 0f ff ff ff       	call   c0019035 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019126:	83 c4 10             	add    esp,0x10
c0019129:	eb 01                	jmp    c001912c <AMD_K6_writeback(int, int, int)+0xbb>
c001912b:	90                   	nop
c001912c:	90                   	nop
c001912d:	83 c4 20             	add    esp,0x20
c0019130:	c3                   	ret    

c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019131:	56                   	push   esi
c0019132:	53                   	push   ebx
c0019133:	a1 e0 73 02 c0       	mov    eax,ds:0xc00273e0
c0019138:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001913c:	75 32                	jne    c0019170 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001913e:	8b 15 44 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb44
c0019144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019148:	89 10                	mov    DWORD PTR [eax],edx
c001914a:	8b 15 40 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb40
c0019150:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019154:	89 10                	mov    DWORD PTR [eax],edx
c0019156:	8b 15 3c fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb3c
c001915c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019160:	89 10                	mov    DWORD PTR [eax],edx
c0019162:	8b 15 38 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb38
c0019168:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001916c:	89 10                	mov    DWORD PTR [eax],edx
c001916e:	eb 5c                	jmp    c00191cc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0019170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019174:	ba 00 00 00 00       	mov    edx,0x0
c0019179:	89 d1                	mov    ecx,edx
c001917b:	0f a2                	cpuid  
c001917d:	89 c6                	mov    esi,eax
c001917f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019183:	89 30                	mov    DWORD PTR [eax],esi
c0019185:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019189:	89 18                	mov    DWORD PTR [eax],ebx
c001918b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001918f:	89 08                	mov    DWORD PTR [eax],ecx
c0019191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019195:	89 10                	mov    DWORD PTR [eax],edx
c0019197:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001919b:	a3 e0 73 02 c0       	mov    ds:0xc00273e0,eax
c00191a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00191a6:	a3 44 fb 02 c0       	mov    ds:0xc002fb44,eax
c00191ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191af:	8b 00                	mov    eax,DWORD PTR [eax]
c00191b1:	a3 40 fb 02 c0       	mov    ds:0xc002fb40,eax
c00191b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00191bc:	a3 3c fb 02 c0       	mov    ds:0xc002fb3c,eax
c00191c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00191c7:	a3 38 fb 02 c0       	mov    ds:0xc002fb38,eax
c00191cc:	5b                   	pop    ebx
c00191cd:	5e                   	pop    esi
c00191ce:	c3                   	ret    

c00191cf <cpuidCheckEDX(unsigned int)>:
c00191cf:	83 ec 10             	sub    esp,0x10
c00191d2:	89 e0                	mov    eax,esp
c00191d4:	50                   	push   eax
c00191d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191d9:	50                   	push   eax
c00191da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191de:	50                   	push   eax
c00191df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191e3:	50                   	push   eax
c00191e4:	6a 01                	push   0x1
c00191e6:	e8 46 ff ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191eb:	83 c4 14             	add    esp,0x14
c00191ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00191f1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00191f5:	0f 95 c0             	setne  al
c00191f8:	83 c4 10             	add    esp,0x10
c00191fb:	c3                   	ret    

c00191fc <cpuidCheckECX(unsigned int)>:
c00191fc:	83 ec 10             	sub    esp,0x10
c00191ff:	89 e0                	mov    eax,esp
c0019201:	50                   	push   eax
c0019202:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019206:	50                   	push   eax
c0019207:	8d 44 24 10          	lea    eax,[esp+0x10]
c001920b:	50                   	push   eax
c001920c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019210:	50                   	push   eax
c0019211:	6a 01                	push   0x1
c0019213:	e8 19 ff ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019218:	83 c4 14             	add    esp,0x14
c001921b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001921f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019223:	0f 95 c0             	setne  al
c0019226:	83 c4 10             	add    esp,0x10
c0019229:	c3                   	ret    

c001922a <cpuidCheckExtendedEBX(unsigned int)>:
c001922a:	83 ec 10             	sub    esp,0x10
c001922d:	89 e0                	mov    eax,esp
c001922f:	50                   	push   eax
c0019230:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019234:	50                   	push   eax
c0019235:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019239:	50                   	push   eax
c001923a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001923e:	50                   	push   eax
c001923f:	6a 07                	push   0x7
c0019241:	e8 eb fe ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019246:	83 c4 14             	add    esp,0x14
c0019249:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001924d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019251:	0f 95 c0             	setne  al
c0019254:	83 c4 10             	add    esp,0x10
c0019257:	c3                   	ret    

c0019258 <cpuidCheckExtendedECX(unsigned int)>:
c0019258:	83 ec 10             	sub    esp,0x10
c001925b:	89 e0                	mov    eax,esp
c001925d:	50                   	push   eax
c001925e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019262:	50                   	push   eax
c0019263:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019267:	50                   	push   eax
c0019268:	8d 44 24 18          	lea    eax,[esp+0x18]
c001926c:	50                   	push   eax
c001926d:	6a 07                	push   0x7
c001926f:	e8 bd fe ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019274:	83 c4 14             	add    esp,0x14
c0019277:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001927b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001927f:	0f 95 c0             	setne  al
c0019282:	83 c4 10             	add    esp,0x10
c0019285:	c3                   	ret    

c0019286 <HalDetectFeatures()>:
c0019286:	57                   	push   edi
c0019287:	56                   	push   esi
c0019288:	53                   	push   ebx
c0019289:	81 ec 90 00 00 00    	sub    esp,0x90
c001928f:	83 ec 04             	sub    esp,0x4
c0019292:	6a 08                	push   0x8
c0019294:	6a 00                	push   0x0
c0019296:	68 70 fb 02 c0       	push   0xc002fb70
c001929b:	e8 50 72 fe ff       	call   c00004f0 <memset>
c00192a0:	83 c4 10             	add    esp,0x10
c00192a3:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00192a8:	83 c8 04             	or     eax,0x4
c00192ab:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00192b0:	83 ec 0c             	sub    esp,0xc
c00192b3:	68 48 5b 02 c0       	push   0xc0025b48
c00192b8:	e8 bf dc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	e8 34 6f fe ff       	call   c00001f9 <detectCPUID>
c00192c5:	85 c0                	test   eax,eax
c00192c7:	0f 95 c0             	setne  al
c00192ca:	83 e0 01             	and    eax,0x1
c00192cd:	83 e0 01             	and    eax,0x1
c00192d0:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00192d3:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00192d8:	83 e0 fd             	and    eax,0xfffffffd
c00192db:	88 c2                	mov    dl,al
c00192dd:	88 c8                	mov    al,cl
c00192df:	09 d0                	or     eax,edx
c00192e1:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00192e6:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00192eb:	83 e0 02             	and    eax,0x2
c00192ee:	0f b6 c0             	movzx  eax,al
c00192f1:	85 c0                	test   eax,eax
c00192f3:	0f 84 84 02 00 00    	je     c001957d <HalDetectFeatures()+0x2f7>
c00192f9:	83 ec 0c             	sub    esp,0xc
c00192fc:	6a 20                	push   0x20
c00192fe:	e8 cc fe ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	83 e0 01             	and    eax,0x1
c0019309:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019310:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019315:	83 e0 f7             	and    eax,0xfffffff7
c0019318:	88 c2                	mov    dl,al
c001931a:	88 c8                	mov    al,cl
c001931c:	09 d0                	or     eax,edx
c001931e:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	68 00 00 00 04       	push   0x4000000
c001932b:	e8 9f fe ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c0019330:	83 c4 10             	add    esp,0x10
c0019333:	89 c1                	mov    ecx,eax
c0019335:	83 e1 01             	and    ecx,0x1
c0019338:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c001933d:	83 e0 fe             	and    eax,0xfffffffe
c0019340:	88 c2                	mov    dl,al
c0019342:	88 c8                	mov    al,cl
c0019344:	09 d0                	or     eax,edx
c0019346:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c001934b:	83 ec 0c             	sub    esp,0xc
c001934e:	68 80 00 00 00       	push   0x80
c0019353:	e8 77 fe ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c0019358:	83 c4 10             	add    esp,0x10
c001935b:	89 c1                	mov    ecx,eax
c001935d:	c1 e1 07             	shl    ecx,0x7
c0019360:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019365:	83 e0 7f             	and    eax,0x7f
c0019368:	88 c2                	mov    dl,al
c001936a:	88 c8                	mov    al,cl
c001936c:	09 d0                	or     eax,edx
c001936e:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c0019373:	83 ec 0c             	sub    esp,0xc
c0019376:	68 00 00 80 00       	push   0x800000
c001937b:	e8 4f fe ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c0019380:	83 c4 10             	add    esp,0x10
c0019383:	83 e0 01             	and    eax,0x1
c0019386:	89 c1                	mov    ecx,eax
c0019388:	c1 e1 05             	shl    ecx,0x5
c001938b:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019390:	83 e0 df             	and    eax,0xffffffdf
c0019393:	88 c2                	mov    dl,al
c0019395:	88 c8                	mov    al,cl
c0019397:	09 d0                	or     eax,edx
c0019399:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001939e:	83 ec 0c             	sub    esp,0xc
c00193a1:	6a 01                	push   0x1
c00193a3:	e8 34 3f ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00193a8:	83 c4 10             	add    esp,0x10
c00193ab:	0f b6 c0             	movzx  eax,al
c00193ae:	85 c0                	test   eax,eax
c00193b0:	75 17                	jne    c00193c9 <HalDetectFeatures()+0x143>
c00193b2:	83 ec 0c             	sub    esp,0xc
c00193b5:	68 00 04 00 00       	push   0x400
c00193ba:	e8 1d 3f ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00193bf:	83 c4 10             	add    esp,0x10
c00193c2:	0f b6 c0             	movzx  eax,al
c00193c5:	85 c0                	test   eax,eax
c00193c7:	74 04                	je     c00193cd <HalDetectFeatures()+0x147>
c00193c9:	b0 01                	mov    al,0x1
c00193cb:	eb 02                	jmp    c00193cf <HalDetectFeatures()+0x149>
c00193cd:	b0 00                	mov    al,0x0
c00193cf:	0f b6 c0             	movzx  eax,al
c00193d2:	85 c0                	test   eax,eax
c00193d4:	74 0f                	je     c00193e5 <HalDetectFeatures()+0x15f>
c00193d6:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00193db:	83 e0 fe             	and    eax,0xfffffffe
c00193de:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00193e3:	eb 28                	jmp    c001940d <HalDetectFeatures()+0x187>
c00193e5:	83 ec 0c             	sub    esp,0xc
c00193e8:	68 00 02 00 00       	push   0x200
c00193ed:	e8 dd fd ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c00193f2:	83 c4 10             	add    esp,0x10
c00193f5:	89 c1                	mov    ecx,eax
c00193f7:	83 e1 01             	and    ecx,0x1
c00193fa:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00193ff:	83 e0 fe             	and    eax,0xfffffffe
c0019402:	88 c2                	mov    dl,al
c0019404:	88 c8                	mov    al,cl
c0019406:	09 d0                	or     eax,edx
c0019408:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001940d:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019412:	83 e0 01             	and    eax,0x1
c0019415:	0f b6 c0             	movzx  eax,al
c0019418:	85 c0                	test   eax,eax
c001941a:	74 1c                	je     c0019438 <HalDetectFeatures()+0x1b2>
c001941c:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019421:	83 e0 08             	and    eax,0x8
c0019424:	0f b6 c0             	movzx  eax,al
c0019427:	85 c0                	test   eax,eax
c0019429:	75 0d                	jne    c0019438 <HalDetectFeatures()+0x1b2>
c001942b:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019430:	83 e0 fe             	and    eax,0xfffffffe
c0019433:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019438:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019440:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019448:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019450:	85 c0                	test   eax,eax
c0019452:	0f 84 ab 00 00 00    	je     c0019503 <HalDetectFeatures()+0x27d>
c0019458:	83 ec 0c             	sub    esp,0xc
c001945b:	6a 01                	push   0x1
c001945d:	e8 9a fd ff ff       	call   c00191fc <cpuidCheckECX(unsigned int)>
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	83 e0 01             	and    eax,0x1
c0019468:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001946b:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019470:	83 e0 fd             	and    eax,0xfffffffd
c0019473:	88 c2                	mov    dl,al
c0019475:	88 c8                	mov    al,cl
c0019477:	09 d0                	or     eax,edx
c0019479:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c001947e:	83 ec 0c             	sub    esp,0xc
c0019481:	68 00 02 00 00       	push   0x200
c0019486:	e8 71 fd ff ff       	call   c00191fc <cpuidCheckECX(unsigned int)>
c001948b:	83 c4 10             	add    esp,0x10
c001948e:	83 e0 01             	and    eax,0x1
c0019491:	89 c1                	mov    ecx,eax
c0019493:	c1 e1 04             	shl    ecx,0x4
c0019496:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c001949b:	83 e0 ef             	and    eax,0xffffffef
c001949e:	88 c2                	mov    dl,al
c00194a0:	88 c8                	mov    al,cl
c00194a2:	09 d0                	or     eax,edx
c00194a4:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c00194a9:	83 ec 0c             	sub    esp,0xc
c00194ac:	68 00 00 08 00       	push   0x80000
c00194b1:	e8 46 fd ff ff       	call   c00191fc <cpuidCheckECX(unsigned int)>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	83 e0 01             	and    eax,0x1
c00194bc:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00194c3:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c00194c8:	83 e0 fb             	and    eax,0xfffffffb
c00194cb:	88 c2                	mov    dl,al
c00194cd:	88 c8                	mov    al,cl
c00194cf:	09 d0                	or     eax,edx
c00194d1:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c00194d6:	83 ec 0c             	sub    esp,0xc
c00194d9:	68 00 00 10 00       	push   0x100000
c00194de:	e8 19 fd ff ff       	call   c00191fc <cpuidCheckECX(unsigned int)>
c00194e3:	83 c4 10             	add    esp,0x10
c00194e6:	83 e0 01             	and    eax,0x1
c00194e9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00194f0:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c00194f5:	83 e0 f7             	and    eax,0xfffffff7
c00194f8:	88 c2                	mov    dl,al
c00194fa:	88 c8                	mov    al,cl
c00194fc:	09 d0                	or     eax,edx
c00194fe:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c0019503:	83 ec 0c             	sub    esp,0xc
c0019506:	8d 44 24 24          	lea    eax,[esp+0x24]
c001950a:	50                   	push   eax
c001950b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001950f:	50                   	push   eax
c0019510:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019514:	50                   	push   eax
c0019515:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019519:	50                   	push   eax
c001951a:	68 00 00 00 80       	push   0x80000000
c001951f:	e8 0d fc ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019524:	83 c4 20             	add    esp,0x20
c0019527:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001952b:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019530:	76 4b                	jbe    c001957d <HalDetectFeatures()+0x2f7>
c0019532:	83 ec 0c             	sub    esp,0xc
c0019535:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019539:	50                   	push   eax
c001953a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001953e:	50                   	push   eax
c001953f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019543:	50                   	push   eax
c0019544:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019548:	50                   	push   eax
c0019549:	68 01 00 00 80       	push   0x80000001
c001954e:	e8 de fb ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019553:	83 c4 20             	add    esp,0x20
c0019556:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001955b:	83 e0 bf             	and    eax,0xffffffbf
c001955e:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019563:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019568:	83 e0 fd             	and    eax,0xfffffffd
c001956b:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019570:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019575:	83 e0 fe             	and    eax,0xfffffffe
c0019578:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c001957d:	83 ec 0c             	sub    esp,0xc
c0019580:	68 00 04 00 00       	push   0x400
c0019585:	e8 52 3d ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001958a:	83 c4 10             	add    esp,0x10
c001958d:	0f b6 c0             	movzx  eax,al
c0019590:	85 c0                	test   eax,eax
c0019592:	74 0d                	je     c00195a1 <HalDetectFeatures()+0x31b>
c0019594:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019599:	83 e0 fb             	and    eax,0xfffffffb
c001959c:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00195a1:	c6 05 6c fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb6c,0x1
c00195a8:	83 ec 04             	sub    esp,0x4
c00195ab:	6a 0d                	push   0xd
c00195ad:	6a 00                	push   0x0
c00195af:	68 54 fb 02 c0       	push   0xc002fb54
c00195b4:	e8 37 6f fe ff       	call   c00004f0 <memset>
c00195b9:	83 c4 10             	add    esp,0x10
c00195bc:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00195c1:	83 e0 02             	and    eax,0x2
c00195c4:	0f b6 c0             	movzx  eax,al
c00195c7:	85 c0                	test   eax,eax
c00195c9:	0f 84 16 08 00 00    	je     c0019de5 <HalDetectFeatures()+0xb5f>
c00195cf:	83 ec 0c             	sub    esp,0xc
c00195d2:	6a 10                	push   0x10
c00195d4:	e8 f6 fb ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	83 e0 01             	and    eax,0x1
c00195df:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00195e6:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c00195eb:	83 e0 f7             	and    eax,0xfffffff7
c00195ee:	88 c2                	mov    dl,al
c00195f0:	88 c8                	mov    al,cl
c00195f2:	09 d0                	or     eax,edx
c00195f4:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c00195f9:	83 ec 0c             	sub    esp,0xc
c00195fc:	6a 40                	push   0x40
c00195fe:	e8 cc fb ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c0019603:	83 c4 10             	add    esp,0x10
c0019606:	83 e0 01             	and    eax,0x1
c0019609:	89 c1                	mov    ecx,eax
c001960b:	c1 e1 04             	shl    ecx,0x4
c001960e:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019613:	83 e0 ef             	and    eax,0xffffffef
c0019616:	88 c2                	mov    dl,al
c0019618:	88 c8                	mov    al,cl
c001961a:	09 d0                	or     eax,edx
c001961c:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019621:	83 ec 0c             	sub    esp,0xc
c0019624:	6a 08                	push   0x8
c0019626:	e8 a4 fb ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	83 e0 01             	and    eax,0x1
c0019631:	89 c1                	mov    ecx,eax
c0019633:	c1 e1 05             	shl    ecx,0x5
c0019636:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c001963b:	83 e0 df             	and    eax,0xffffffdf
c001963e:	88 c2                	mov    dl,al
c0019640:	88 c8                	mov    al,cl
c0019642:	09 d0                	or     eax,edx
c0019644:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019649:	83 ec 0c             	sub    esp,0xc
c001964c:	68 00 20 00 00       	push   0x2000
c0019651:	e8 79 fb ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c0019656:	83 c4 10             	add    esp,0x10
c0019659:	83 e0 01             	and    eax,0x1
c001965c:	89 c1                	mov    ecx,eax
c001965e:	c1 e1 06             	shl    ecx,0x6
c0019661:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019666:	83 e0 bf             	and    eax,0xffffffbf
c0019669:	88 c2                	mov    dl,al
c001966b:	88 c8                	mov    al,cl
c001966d:	09 d0                	or     eax,edx
c001966f:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019674:	83 ec 0c             	sub    esp,0xc
c0019677:	68 00 00 01 00       	push   0x10000
c001967c:	e8 4e fb ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c0019681:	83 c4 10             	add    esp,0x10
c0019684:	89 c1                	mov    ecx,eax
c0019686:	c1 e1 07             	shl    ecx,0x7
c0019689:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c001968e:	83 e0 7f             	and    eax,0x7f
c0019691:	88 c2                	mov    dl,al
c0019693:	88 c8                	mov    al,cl
c0019695:	09 d0                	or     eax,edx
c0019697:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c001969c:	83 ec 0c             	sub    esp,0xc
c001969f:	6a 01                	push   0x1
c00196a1:	e8 29 fb ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c00196a6:	83 c4 10             	add    esp,0x10
c00196a9:	83 e0 01             	and    eax,0x1
c00196ac:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00196b3:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c00196b8:	83 e0 f7             	and    eax,0xfffffff7
c00196bb:	88 c2                	mov    dl,al
c00196bd:	88 c8                	mov    al,cl
c00196bf:	09 d0                	or     eax,edx
c00196c1:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c00196c6:	83 ec 0c             	sub    esp,0xc
c00196c9:	68 00 08 00 00       	push   0x800
c00196ce:	e8 fc fa ff ff       	call   c00191cf <cpuidCheckEDX(unsigned int)>
c00196d3:	83 c4 10             	add    esp,0x10
c00196d6:	89 c1                	mov    ecx,eax
c00196d8:	83 e1 01             	and    ecx,0x1
c00196db:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c00196e0:	83 e0 fe             	and    eax,0xfffffffe
c00196e3:	88 c2                	mov    dl,al
c00196e5:	88 c8                	mov    al,cl
c00196e7:	09 d0                	or     eax,edx
c00196e9:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c00196ee:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c00196f3:	83 e0 40             	and    eax,0x40
c00196f6:	0f b6 c0             	movzx  eax,al
c00196f9:	85 c0                	test   eax,eax
c00196fb:	74 0a                	je     c0019707 <HalDetectFeatures()+0x481>
c00196fd:	c7 05 4c fb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002fb4c,0x100
c0019707:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c001970c:	83 e0 80             	and    eax,0xffffff80
c001970f:	0f b6 c0             	movzx  eax,al
c0019712:	85 c0                	test   eax,eax
c0019714:	74 0a                	je     c0019720 <HalDetectFeatures()+0x49a>
c0019716:	c7 05 48 fb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002fb48,0x80
c0019720:	83 ec 0c             	sub    esp,0xc
c0019723:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019727:	50                   	push   eax
c0019728:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001972c:	50                   	push   eax
c001972d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019731:	50                   	push   eax
c0019732:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019736:	50                   	push   eax
c0019737:	6a 00                	push   0x0
c0019739:	e8 f3 f9 ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001973e:	83 c4 20             	add    esp,0x20
c0019741:	c7 44 24 48 54 fb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002fb54
c0019749:	8d 44 24 10          	lea    eax,[esp+0x10]
c001974d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019751:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019759:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001975d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019761:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019765:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019769:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001976d:	89 c6                	mov    esi,eax
c001976f:	89 d7                	mov    edi,edx
c0019771:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019773:	89 c8                	mov    eax,ecx
c0019775:	89 fa                	mov    edx,edi
c0019777:	89 f3                	mov    ebx,esi
c0019779:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001977d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019785:	b8 58 fb 02 c0       	mov    eax,0xc002fb58
c001978a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001978e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019792:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019796:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001979e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00197a2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00197a6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00197aa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00197ae:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00197b2:	89 c6                	mov    esi,eax
c00197b4:	89 d7                	mov    edi,edx
c00197b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197b8:	89 c8                	mov    eax,ecx
c00197ba:	89 fa                	mov    edx,edi
c00197bc:	89 f3                	mov    ebx,esi
c00197be:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00197c2:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00197c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197ca:	b8 5c fb 02 c0       	mov    eax,0xc002fb5c
c00197cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00197d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00197da:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00197de:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00197e6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00197ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00197f1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00197f5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00197fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019800:	89 c6                	mov    esi,eax
c0019802:	89 d7                	mov    edi,edx
c0019804:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019806:	89 c8                	mov    eax,ecx
c0019808:	89 fa                	mov    edx,edi
c001980a:	89 f3                	mov    ebx,esi
c001980c:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019810:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019814:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019818:	83 ec 08             	sub    esp,0x8
c001981b:	68 5d 5b 02 c0       	push   0xc0025b5d
c0019820:	68 54 fb 02 c0       	push   0xc002fb54
c0019825:	e8 26 6f fe ff       	call   c0000750 <strcmp>
c001982a:	83 c4 10             	add    esp,0x10
c001982d:	85 c0                	test   eax,eax
c001982f:	74 19                	je     c001984a <HalDetectFeatures()+0x5c4>
c0019831:	83 ec 08             	sub    esp,0x8
c0019834:	68 6a 5b 02 c0       	push   0xc0025b6a
c0019839:	68 54 fb 02 c0       	push   0xc002fb54
c001983e:	e8 0d 6f fe ff       	call   c0000750 <strcmp>
c0019843:	83 c4 10             	add    esp,0x10
c0019846:	85 c0                	test   eax,eax
c0019848:	75 04                	jne    c001984e <HalDetectFeatures()+0x5c8>
c001984a:	b0 01                	mov    al,0x1
c001984c:	eb 02                	jmp    c0019850 <HalDetectFeatures()+0x5ca>
c001984e:	b0 00                	mov    al,0x0
c0019850:	0f b6 c0             	movzx  eax,al
c0019853:	85 c0                	test   eax,eax
c0019855:	74 0f                	je     c0019866 <HalDetectFeatures()+0x5e0>
c0019857:	c7 05 68 fb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x2
c0019861:	e9 0d 03 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019866:	83 ec 08             	sub    esp,0x8
c0019869:	68 77 5b 02 c0       	push   0xc0025b77
c001986e:	68 54 fb 02 c0       	push   0xc002fb54
c0019873:	e8 d8 6e fe ff       	call   c0000750 <strcmp>
c0019878:	83 c4 10             	add    esp,0x10
c001987b:	85 c0                	test   eax,eax
c001987d:	74 19                	je     c0019898 <HalDetectFeatures()+0x612>
c001987f:	83 ec 08             	sub    esp,0x8
c0019882:	68 84 5b 02 c0       	push   0xc0025b84
c0019887:	68 54 fb 02 c0       	push   0xc002fb54
c001988c:	e8 bf 6e fe ff       	call   c0000750 <strcmp>
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	85 c0                	test   eax,eax
c0019896:	75 04                	jne    c001989c <HalDetectFeatures()+0x616>
c0019898:	b0 01                	mov    al,0x1
c001989a:	eb 02                	jmp    c001989e <HalDetectFeatures()+0x618>
c001989c:	b0 00                	mov    al,0x0
c001989e:	0f b6 c0             	movzx  eax,al
c00198a1:	85 c0                	test   eax,eax
c00198a3:	74 0f                	je     c00198b4 <HalDetectFeatures()+0x62e>
c00198a5:	c7 05 68 fb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x4
c00198af:	e9 bf 02 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c00198b4:	83 ec 08             	sub    esp,0x8
c00198b7:	68 91 5b 02 c0       	push   0xc0025b91
c00198bc:	68 54 fb 02 c0       	push   0xc002fb54
c00198c1:	e8 8a 6e fe ff       	call   c0000750 <strcmp>
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	85 c0                	test   eax,eax
c00198cb:	74 19                	je     c00198e6 <HalDetectFeatures()+0x660>
c00198cd:	83 ec 08             	sub    esp,0x8
c00198d0:	68 9e 5b 02 c0       	push   0xc0025b9e
c00198d5:	68 54 fb 02 c0       	push   0xc002fb54
c00198da:	e8 71 6e fe ff       	call   c0000750 <strcmp>
c00198df:	83 c4 10             	add    esp,0x10
c00198e2:	85 c0                	test   eax,eax
c00198e4:	75 04                	jne    c00198ea <HalDetectFeatures()+0x664>
c00198e6:	b0 01                	mov    al,0x1
c00198e8:	eb 02                	jmp    c00198ec <HalDetectFeatures()+0x666>
c00198ea:	b0 00                	mov    al,0x0
c00198ec:	0f b6 c0             	movzx  eax,al
c00198ef:	85 c0                	test   eax,eax
c00198f1:	74 0f                	je     c0019902 <HalDetectFeatures()+0x67c>
c00198f3:	c7 05 68 fb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x5
c00198fd:	e9 71 02 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019902:	83 ec 08             	sub    esp,0x8
c0019905:	68 ab 5b 02 c0       	push   0xc0025bab
c001990a:	68 54 fb 02 c0       	push   0xc002fb54
c001990f:	e8 3c 6e fe ff       	call   c0000750 <strcmp>
c0019914:	83 c4 10             	add    esp,0x10
c0019917:	85 c0                	test   eax,eax
c0019919:	0f 94 c0             	sete   al
c001991c:	0f b6 c0             	movzx  eax,al
c001991f:	85 c0                	test   eax,eax
c0019921:	74 0f                	je     c0019932 <HalDetectFeatures()+0x6ac>
c0019923:	c7 05 68 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x1
c001992d:	e9 41 02 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019932:	83 ec 08             	sub    esp,0x8
c0019935:	68 b8 5b 02 c0       	push   0xc0025bb8
c001993a:	68 54 fb 02 c0       	push   0xc002fb54
c001993f:	e8 0c 6e fe ff       	call   c0000750 <strcmp>
c0019944:	83 c4 10             	add    esp,0x10
c0019947:	85 c0                	test   eax,eax
c0019949:	0f 94 c0             	sete   al
c001994c:	0f b6 c0             	movzx  eax,al
c001994f:	85 c0                	test   eax,eax
c0019951:	74 0f                	je     c0019962 <HalDetectFeatures()+0x6dc>
c0019953:	c7 05 68 fb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x3
c001995d:	e9 11 02 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019962:	83 ec 08             	sub    esp,0x8
c0019965:	68 77 5b 02 c0       	push   0xc0025b77
c001996a:	68 54 fb 02 c0       	push   0xc002fb54
c001996f:	e8 dc 6d fe ff       	call   c0000750 <strcmp>
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	85 c0                	test   eax,eax
c0019979:	0f 94 c0             	sete   al
c001997c:	0f b6 c0             	movzx  eax,al
c001997f:	85 c0                	test   eax,eax
c0019981:	74 0f                	je     c0019992 <HalDetectFeatures()+0x70c>
c0019983:	c7 05 68 fb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x6
c001998d:	e9 e1 01 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019992:	83 ec 08             	sub    esp,0x8
c0019995:	68 c5 5b 02 c0       	push   0xc0025bc5
c001999a:	68 54 fb 02 c0       	push   0xc002fb54
c001999f:	e8 ac 6d fe ff       	call   c0000750 <strcmp>
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	85 c0                	test   eax,eax
c00199a9:	0f 94 c0             	sete   al
c00199ac:	0f b6 c0             	movzx  eax,al
c00199af:	85 c0                	test   eax,eax
c00199b1:	74 0f                	je     c00199c2 <HalDetectFeatures()+0x73c>
c00199b3:	c7 05 68 fb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x7
c00199bd:	e9 b1 01 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c00199c2:	83 ec 08             	sub    esp,0x8
c00199c5:	68 d2 5b 02 c0       	push   0xc0025bd2
c00199ca:	68 54 fb 02 c0       	push   0xc002fb54
c00199cf:	e8 7c 6d fe ff       	call   c0000750 <strcmp>
c00199d4:	83 c4 10             	add    esp,0x10
c00199d7:	85 c0                	test   eax,eax
c00199d9:	0f 94 c0             	sete   al
c00199dc:	0f b6 c0             	movzx  eax,al
c00199df:	85 c0                	test   eax,eax
c00199e1:	74 0f                	je     c00199f2 <HalDetectFeatures()+0x76c>
c00199e3:	c7 05 68 fb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x8
c00199ed:	e9 81 01 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c00199f2:	83 ec 08             	sub    esp,0x8
c00199f5:	68 df 5b 02 c0       	push   0xc0025bdf
c00199fa:	68 54 fb 02 c0       	push   0xc002fb54
c00199ff:	e8 4c 6d fe ff       	call   c0000750 <strcmp>
c0019a04:	83 c4 10             	add    esp,0x10
c0019a07:	85 c0                	test   eax,eax
c0019a09:	0f 94 c0             	sete   al
c0019a0c:	0f b6 c0             	movzx  eax,al
c0019a0f:	85 c0                	test   eax,eax
c0019a11:	74 0f                	je     c0019a22 <HalDetectFeatures()+0x79c>
c0019a13:	c7 05 68 fb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x9
c0019a1d:	e9 51 01 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019a22:	83 ec 08             	sub    esp,0x8
c0019a25:	68 ec 5b 02 c0       	push   0xc0025bec
c0019a2a:	68 54 fb 02 c0       	push   0xc002fb54
c0019a2f:	e8 1c 6d fe ff       	call   c0000750 <strcmp>
c0019a34:	83 c4 10             	add    esp,0x10
c0019a37:	85 c0                	test   eax,eax
c0019a39:	0f 94 c0             	sete   al
c0019a3c:	0f b6 c0             	movzx  eax,al
c0019a3f:	85 c0                	test   eax,eax
c0019a41:	74 0f                	je     c0019a52 <HalDetectFeatures()+0x7cc>
c0019a43:	c7 05 68 fb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xa
c0019a4d:	e9 21 01 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019a52:	83 ec 08             	sub    esp,0x8
c0019a55:	68 f9 5b 02 c0       	push   0xc0025bf9
c0019a5a:	68 54 fb 02 c0       	push   0xc002fb54
c0019a5f:	e8 ec 6c fe ff       	call   c0000750 <strcmp>
c0019a64:	83 c4 10             	add    esp,0x10
c0019a67:	85 c0                	test   eax,eax
c0019a69:	0f 94 c0             	sete   al
c0019a6c:	0f b6 c0             	movzx  eax,al
c0019a6f:	85 c0                	test   eax,eax
c0019a71:	74 0f                	je     c0019a82 <HalDetectFeatures()+0x7fc>
c0019a73:	c7 05 68 fb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xb
c0019a7d:	e9 f1 00 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019a82:	83 ec 08             	sub    esp,0x8
c0019a85:	68 06 5c 02 c0       	push   0xc0025c06
c0019a8a:	68 54 fb 02 c0       	push   0xc002fb54
c0019a8f:	e8 bc 6c fe ff       	call   c0000750 <strcmp>
c0019a94:	83 c4 10             	add    esp,0x10
c0019a97:	85 c0                	test   eax,eax
c0019a99:	0f 94 c0             	sete   al
c0019a9c:	0f b6 c0             	movzx  eax,al
c0019a9f:	85 c0                	test   eax,eax
c0019aa1:	74 0f                	je     c0019ab2 <HalDetectFeatures()+0x82c>
c0019aa3:	c7 05 68 fb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xc
c0019aad:	e9 c1 00 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019ab2:	83 ec 08             	sub    esp,0x8
c0019ab5:	68 13 5c 02 c0       	push   0xc0025c13
c0019aba:	68 54 fb 02 c0       	push   0xc002fb54
c0019abf:	e8 8c 6c fe ff       	call   c0000750 <strcmp>
c0019ac4:	83 c4 10             	add    esp,0x10
c0019ac7:	85 c0                	test   eax,eax
c0019ac9:	0f 94 c0             	sete   al
c0019acc:	0f b6 c0             	movzx  eax,al
c0019acf:	85 c0                	test   eax,eax
c0019ad1:	74 0f                	je     c0019ae2 <HalDetectFeatures()+0x85c>
c0019ad3:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c0019add:	e9 91 00 00 00       	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019ae2:	83 ec 08             	sub    esp,0x8
c0019ae5:	68 20 5c 02 c0       	push   0xc0025c20
c0019aea:	68 54 fb 02 c0       	push   0xc002fb54
c0019aef:	e8 5c 6c fe ff       	call   c0000750 <strcmp>
c0019af4:	83 c4 10             	add    esp,0x10
c0019af7:	85 c0                	test   eax,eax
c0019af9:	0f 94 c0             	sete   al
c0019afc:	0f b6 c0             	movzx  eax,al
c0019aff:	85 c0                	test   eax,eax
c0019b01:	74 0c                	je     c0019b0f <HalDetectFeatures()+0x889>
c0019b03:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c0019b0d:	eb 64                	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019b0f:	83 ec 08             	sub    esp,0x8
c0019b12:	68 2d 5c 02 c0       	push   0xc0025c2d
c0019b17:	68 54 fb 02 c0       	push   0xc002fb54
c0019b1c:	e8 2f 6c fe ff       	call   c0000750 <strcmp>
c0019b21:	83 c4 10             	add    esp,0x10
c0019b24:	85 c0                	test   eax,eax
c0019b26:	0f 94 c0             	sete   al
c0019b29:	0f b6 c0             	movzx  eax,al
c0019b2c:	85 c0                	test   eax,eax
c0019b2e:	74 0c                	je     c0019b3c <HalDetectFeatures()+0x8b6>
c0019b30:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c0019b3a:	eb 37                	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019b3c:	83 ec 08             	sub    esp,0x8
c0019b3f:	68 3a 5c 02 c0       	push   0xc0025c3a
c0019b44:	68 54 fb 02 c0       	push   0xc002fb54
c0019b49:	e8 02 6c fe ff       	call   c0000750 <strcmp>
c0019b4e:	83 c4 10             	add    esp,0x10
c0019b51:	85 c0                	test   eax,eax
c0019b53:	0f 94 c0             	sete   al
c0019b56:	0f b6 c0             	movzx  eax,al
c0019b59:	85 c0                	test   eax,eax
c0019b5b:	74 0c                	je     c0019b69 <HalDetectFeatures()+0x8e3>
c0019b5d:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c0019b67:	eb 0a                	jmp    c0019b73 <HalDetectFeatures()+0x8ed>
c0019b69:	c7 05 68 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x0
c0019b73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b77:	83 f8 06             	cmp    eax,0x6
c0019b7a:	0f 86 cc 00 00 00    	jbe    c0019c4c <HalDetectFeatures()+0x9c6>
c0019b80:	83 ec 0c             	sub    esp,0xc
c0019b83:	68 80 00 00 00       	push   0x80
c0019b88:	e8 9d f6 ff ff       	call   c001922a <cpuidCheckExtendedEBX(unsigned int)>
c0019b8d:	83 c4 10             	add    esp,0x10
c0019b90:	89 c1                	mov    ecx,eax
c0019b92:	83 e1 01             	and    ecx,0x1
c0019b95:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019b9a:	83 e0 fe             	and    eax,0xfffffffe
c0019b9d:	88 c2                	mov    dl,al
c0019b9f:	88 c8                	mov    al,cl
c0019ba1:	09 d0                	or     eax,edx
c0019ba3:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019ba8:	83 ec 0c             	sub    esp,0xc
c0019bab:	68 00 00 10 00       	push   0x100000
c0019bb0:	e8 75 f6 ff ff       	call   c001922a <cpuidCheckExtendedEBX(unsigned int)>
c0019bb5:	83 c4 10             	add    esp,0x10
c0019bb8:	83 e0 01             	and    eax,0x1
c0019bbb:	89 c1                	mov    ecx,eax
c0019bbd:	c1 e1 06             	shl    ecx,0x6
c0019bc0:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019bc5:	83 e0 bf             	and    eax,0xffffffbf
c0019bc8:	88 c2                	mov    dl,al
c0019bca:	88 c8                	mov    al,cl
c0019bcc:	09 d0                	or     eax,edx
c0019bce:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019bd3:	83 ec 0c             	sub    esp,0xc
c0019bd6:	68 00 00 04 00       	push   0x40000
c0019bdb:	e8 4a f6 ff ff       	call   c001922a <cpuidCheckExtendedEBX(unsigned int)>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	83 e0 01             	and    eax,0x1
c0019be6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019be9:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019bee:	83 e0 fd             	and    eax,0xfffffffd
c0019bf1:	88 c2                	mov    dl,al
c0019bf3:	88 c8                	mov    al,cl
c0019bf5:	09 d0                	or     eax,edx
c0019bf7:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019bfc:	83 ec 0c             	sub    esp,0xc
c0019bff:	6a 04                	push   0x4
c0019c01:	e8 52 f6 ff ff       	call   c0019258 <cpuidCheckExtendedECX(unsigned int)>
c0019c06:	83 c4 10             	add    esp,0x10
c0019c09:	83 e0 01             	and    eax,0x1
c0019c0c:	89 c1                	mov    ecx,eax
c0019c0e:	c1 e1 05             	shl    ecx,0x5
c0019c11:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019c16:	83 e0 df             	and    eax,0xffffffdf
c0019c19:	88 c2                	mov    dl,al
c0019c1b:	88 c8                	mov    al,cl
c0019c1d:	09 d0                	or     eax,edx
c0019c1f:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019c24:	83 ec 0c             	sub    esp,0xc
c0019c27:	6a 20                	push   0x20
c0019c29:	e8 2a f6 ff ff       	call   c0019258 <cpuidCheckExtendedECX(unsigned int)>
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	83 e0 01             	and    eax,0x1
c0019c34:	89 c1                	mov    ecx,eax
c0019c36:	c1 e1 04             	shl    ecx,0x4
c0019c39:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019c3e:	83 e0 ef             	and    eax,0xffffffef
c0019c41:	88 c2                	mov    dl,al
c0019c43:	88 c8                	mov    al,cl
c0019c45:	09 d0                	or     eax,edx
c0019c47:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019c4c:	83 ec 0c             	sub    esp,0xc
c0019c4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c53:	50                   	push   eax
c0019c54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019c58:	50                   	push   eax
c0019c59:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c5d:	50                   	push   eax
c0019c5e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019c62:	50                   	push   eax
c0019c63:	6a 01                	push   0x1
c0019c65:	e8 c7 f4 ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019c6a:	83 c4 20             	add    esp,0x20
c0019c6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c71:	83 e0 0f             	and    eax,0xf
c0019c74:	a2 64 fb 02 c0       	mov    ds:0xc002fb64,al
c0019c79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c7d:	c1 e8 04             	shr    eax,0x4
c0019c80:	83 e0 0f             	and    eax,0xf
c0019c83:	a2 62 fb 02 c0       	mov    ds:0xc002fb62,al
c0019c88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c8c:	c1 e8 08             	shr    eax,0x8
c0019c8f:	83 e0 0f             	and    eax,0xf
c0019c92:	a2 61 fb 02 c0       	mov    ds:0xc002fb61,al
c0019c97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c9b:	c1 e8 0c             	shr    eax,0xc
c0019c9e:	83 e0 03             	and    eax,0x3
c0019ca1:	a2 63 fb 02 c0       	mov    ds:0xc002fb63,al
c0019ca6:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019cab:	0f b6 c0             	movzx  eax,al
c0019cae:	83 f8 06             	cmp    eax,0x6
c0019cb1:	74 0d                	je     c0019cc0 <HalDetectFeatures()+0xa3a>
c0019cb3:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019cb8:	0f b6 c0             	movzx  eax,al
c0019cbb:	83 f8 0f             	cmp    eax,0xf
c0019cbe:	75 18                	jne    c0019cd8 <HalDetectFeatures()+0xa52>
c0019cc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cc4:	c1 e8 10             	shr    eax,0x10
c0019cc7:	c1 e0 04             	shl    eax,0x4
c0019cca:	88 c2                	mov    dl,al
c0019ccc:	a0 62 fb 02 c0       	mov    al,ds:0xc002fb62
c0019cd1:	09 d0                	or     eax,edx
c0019cd3:	a2 62 fb 02 c0       	mov    ds:0xc002fb62,al
c0019cd8:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019cdd:	0f b6 c0             	movzx  eax,al
c0019ce0:	83 f8 0f             	cmp    eax,0xf
c0019ce3:	75 15                	jne    c0019cfa <HalDetectFeatures()+0xa74>
c0019ce5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ce9:	c1 e8 14             	shr    eax,0x14
c0019cec:	88 c2                	mov    dl,al
c0019cee:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019cf3:	01 d0                	add    eax,edx
c0019cf5:	a2 61 fb 02 c0       	mov    ds:0xc002fb61,al
c0019cfa:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019d02:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019d0a:	85 c0                	test   eax,eax
c0019d0c:	74 2d                	je     c0019d3b <HalDetectFeatures()+0xab5>
c0019d0e:	83 ec 0c             	sub    esp,0xc
c0019d11:	68 00 00 00 40       	push   0x40000000
c0019d16:	e8 e1 f4 ff ff       	call   c00191fc <cpuidCheckECX(unsigned int)>
c0019d1b:	83 c4 10             	add    esp,0x10
c0019d1e:	83 e0 01             	and    eax,0x1
c0019d21:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019d28:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019d2d:	83 e0 fb             	and    eax,0xfffffffb
c0019d30:	88 c2                	mov    dl,al
c0019d32:	88 c8                	mov    al,cl
c0019d34:	09 d0                	or     eax,edx
c0019d36:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019d3b:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019d40:	83 c8 04             	or     eax,0x4
c0019d43:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019d48:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019d4d:	83 c8 08             	or     eax,0x8
c0019d50:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019d55:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019d5a:	83 c8 10             	or     eax,0x10
c0019d5d:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019d62:	83 ec 0c             	sub    esp,0xc
c0019d65:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d69:	50                   	push   eax
c0019d6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019d6e:	50                   	push   eax
c0019d6f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d73:	50                   	push   eax
c0019d74:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d78:	50                   	push   eax
c0019d79:	68 00 00 00 80       	push   0x80000000
c0019d7e:	e8 ae f3 ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d83:	83 c4 20             	add    esp,0x20
c0019d86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d8a:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019d8f:	0f 86 96 01 00 00    	jbe    c0019f2b <HalDetectFeatures()+0xca5>
c0019d95:	83 ec 0c             	sub    esp,0xc
c0019d98:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d9c:	50                   	push   eax
c0019d9d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019da1:	50                   	push   eax
c0019da2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019da6:	50                   	push   eax
c0019da7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019dab:	50                   	push   eax
c0019dac:	68 01 00 00 80       	push   0x80000001
c0019db1:	e8 7b f3 ff ff       	call   c0019131 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019db6:	83 c4 20             	add    esp,0x20
c0019db9:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019dbe:	83 e0 7f             	and    eax,0x7f
c0019dc1:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019dc6:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019dcb:	83 e0 fb             	and    eax,0xfffffffb
c0019dce:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019dd3:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019dd8:	83 e0 fd             	and    eax,0xfffffffd
c0019ddb:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019de0:	e9 46 01 00 00       	jmp    c0019f2b <HalDetectFeatures()+0xca5>
c0019de5:	83 ec 08             	sub    esp,0x8
c0019de8:	68 ab 5b 02 c0       	push   0xc0025bab
c0019ded:	68 54 fb 02 c0       	push   0xc002fb54
c0019df2:	e8 49 68 fe ff       	call   c0000640 <strcpy>
c0019df7:	83 c4 10             	add    esp,0x10
c0019dfa:	c7 05 68 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x1
c0019e04:	e8 ba 63 fe ff       	call   c00001c3 <is486>
c0019e09:	85 c0                	test   eax,eax
c0019e0b:	0f 95 c0             	setne  al
c0019e0e:	0f b6 c0             	movzx  eax,al
c0019e11:	85 c0                	test   eax,eax
c0019e13:	0f 84 8d 00 00 00    	je     c0019ea6 <HalDetectFeatures()+0xc20>
c0019e19:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019e1e:	83 c8 04             	or     eax,0x4
c0019e21:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019e26:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019e2b:	83 c8 08             	or     eax,0x8
c0019e2e:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019e33:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019e38:	83 c8 10             	or     eax,0x10
c0019e3b:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019e40:	0f 20 c0             	mov    eax,cr0
c0019e43:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019e47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019e4b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019e52:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019e59:	83 e0 04             	and    eax,0x4
c0019e5c:	74 1e                	je     c0019e7c <HalDetectFeatures()+0xbf6>
c0019e5e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019e65:	83 e0 10             	and    eax,0x10
c0019e68:	75 12                	jne    c0019e7c <HalDetectFeatures()+0xbf6>
c0019e6a:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019e6f:	83 e0 f7             	and    eax,0xfffffff7
c0019e72:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019e77:	e9 af 00 00 00       	jmp    c0019f2b <HalDetectFeatures()+0xca5>
c0019e7c:	e8 1d 63 fe ff       	call   c000019e <hasLegacyFPU>
c0019e81:	83 e0 01             	and    eax,0x1
c0019e84:	83 e0 01             	and    eax,0x1
c0019e87:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e8e:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019e93:	83 e0 f7             	and    eax,0xfffffff7
c0019e96:	88 c2                	mov    dl,al
c0019e98:	88 c8                	mov    al,cl
c0019e9a:	09 d0                	or     eax,edx
c0019e9c:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019ea1:	e9 85 00 00 00       	jmp    c0019f2b <HalDetectFeatures()+0xca5>
c0019ea6:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019eab:	83 e0 fb             	and    eax,0xfffffffb
c0019eae:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019eb3:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019eb8:	83 e0 f7             	and    eax,0xfffffff7
c0019ebb:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019ec0:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019ec5:	83 e0 ef             	and    eax,0xffffffef
c0019ec8:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019ecd:	0f 20 c0             	mov    eax,cr0
c0019ed0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ed4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ed8:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019edf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019ee6:	83 e0 04             	and    eax,0x4
c0019ee9:	74 1b                	je     c0019f06 <HalDetectFeatures()+0xc80>
c0019eeb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019ef2:	83 e0 10             	and    eax,0x10
c0019ef5:	75 0f                	jne    c0019f06 <HalDetectFeatures()+0xc80>
c0019ef7:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019efc:	83 e0 f7             	and    eax,0xfffffff7
c0019eff:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019f04:	eb 25                	jmp    c0019f2b <HalDetectFeatures()+0xca5>
c0019f06:	e8 93 62 fe ff       	call   c000019e <hasLegacyFPU>
c0019f0b:	83 e0 01             	and    eax,0x1
c0019f0e:	83 e0 01             	and    eax,0x1
c0019f11:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019f18:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019f1d:	83 e0 f7             	and    eax,0xfffffff7
c0019f20:	88 c2                	mov    dl,al
c0019f22:	88 c8                	mov    al,cl
c0019f24:	09 d0                	or     eax,edx
c0019f26:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019f2b:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019f30:	83 e0 08             	and    eax,0x8
c0019f33:	0f b6 c0             	movzx  eax,al
c0019f36:	85 c0                	test   eax,eax
c0019f38:	75 25                	jne    c0019f5f <HalDetectFeatures()+0xcd9>
c0019f3a:	e8 5f 62 fe ff       	call   c000019e <hasLegacyFPU>
c0019f3f:	83 e0 01             	and    eax,0x1
c0019f42:	83 e0 01             	and    eax,0x1
c0019f45:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019f4c:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019f51:	83 e0 f7             	and    eax,0xfffffff7
c0019f54:	88 c2                	mov    dl,al
c0019f56:	88 c8                	mov    al,cl
c0019f58:	09 d0                	or     eax,edx
c0019f5a:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019f5f:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019f64:	83 e0 08             	and    eax,0x8
c0019f67:	0f b6 c0             	movzx  eax,al
c0019f6a:	85 c0                	test   eax,eax
c0019f6c:	74 0d                	je     c0019f7b <HalDetectFeatures()+0xcf5>
c0019f6e:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019f73:	83 c8 10             	or     eax,0x10
c0019f76:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019f7b:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019f80:	83 e0 10             	and    eax,0x10
c0019f83:	0f b6 c0             	movzx  eax,al
c0019f86:	85 c0                	test   eax,eax
c0019f88:	75 23                	jne    c0019fad <HalDetectFeatures()+0xd27>
c0019f8a:	e8 e7 7a 00 00       	call   c0021a76 <x87Detect>
c0019f8f:	83 e0 01             	and    eax,0x1
c0019f92:	83 e0 01             	and    eax,0x1
c0019f95:	89 c1                	mov    ecx,eax
c0019f97:	c1 e1 04             	shl    ecx,0x4
c0019f9a:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019f9f:	83 e0 ef             	and    eax,0xffffffef
c0019fa2:	88 c2                	mov    dl,al
c0019fa4:	88 c8                	mov    al,cl
c0019fa6:	09 d0                	or     eax,edx
c0019fa8:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019fad:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019fb2:	83 e0 01             	and    eax,0x1
c0019fb5:	0f b6 c0             	movzx  eax,al
c0019fb8:	85 c0                	test   eax,eax
c0019fba:	75 2d                	jne    c0019fe9 <HalDetectFeatures()+0xd63>
c0019fbc:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019fc1:	83 e0 02             	and    eax,0x2
c0019fc4:	0f b6 c0             	movzx  eax,al
c0019fc7:	85 c0                	test   eax,eax
c0019fc9:	75 1e                	jne    c0019fe9 <HalDetectFeatures()+0xd63>
c0019fcb:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019fd0:	83 e0 04             	and    eax,0x4
c0019fd3:	0f b6 c0             	movzx  eax,al
c0019fd6:	85 c0                	test   eax,eax
c0019fd8:	75 0f                	jne    c0019fe9 <HalDetectFeatures()+0xd63>
c0019fda:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019fdf:	83 e0 08             	and    eax,0x8
c0019fe2:	0f b6 c0             	movzx  eax,al
c0019fe5:	85 c0                	test   eax,eax
c0019fe7:	74 0d                	je     c0019ff6 <HalDetectFeatures()+0xd70>
c0019fe9:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019fee:	83 c8 80             	or     eax,0xffffff80
c0019ff1:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019ff6:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019ffb:	83 e0 10             	and    eax,0x10
c0019ffe:	0f b6 c0             	movzx  eax,al
c001a001:	85 c0                	test   eax,eax
c001a003:	74 2f                	je     c001a034 <HalDetectFeatures()+0xdae>
c001a005:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a00a:	83 e0 80             	and    eax,0xffffff80
c001a00d:	0f b6 c0             	movzx  eax,al
c001a010:	85 c0                	test   eax,eax
c001a012:	75 20                	jne    c001a034 <HalDetectFeatures()+0xdae>
c001a014:	e8 17 7a 00 00       	call   c0021a30 <sseDetect>
c001a019:	83 e0 01             	and    eax,0x1
c001a01c:	89 c1                	mov    ecx,eax
c001a01e:	c1 e1 07             	shl    ecx,0x7
c001a021:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a026:	83 e0 7f             	and    eax,0x7f
c001a029:	88 c2                	mov    dl,al
c001a02b:	88 c8                	mov    al,cl
c001a02d:	09 d0                	or     eax,edx
c001a02f:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001a034:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a039:	83 e0 80             	and    eax,0xffffff80
c001a03c:	0f b6 c0             	movzx  eax,al
c001a03f:	85 c0                	test   eax,eax
c001a041:	74 1c                	je     c001a05f <HalDetectFeatures()+0xdd9>
c001a043:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c001a048:	83 e0 20             	and    eax,0x20
c001a04b:	0f b6 c0             	movzx  eax,al
c001a04e:	85 c0                	test   eax,eax
c001a050:	75 0d                	jne    c001a05f <HalDetectFeatures()+0xdd9>
c001a052:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c001a057:	83 e0 df             	and    eax,0xffffffdf
c001a05a:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c001a05f:	c6 05 6c fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb6c,0x0
c001a066:	90                   	nop
c001a067:	81 c4 90 00 00 00    	add    esp,0x90
c001a06d:	5b                   	pop    ebx
c001a06e:	5e                   	pop    esi
c001a06f:	5f                   	pop    edi
c001a070:	c3                   	ret    

c001a071 <HalEnableNMI()>:
c001a071:	c6 05 50 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb50,0x1
c001a078:	6a 10                	push   0x10
c001a07a:	e8 02 ef ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001a07f:	83 c4 04             	add    esp,0x4
c001a082:	90                   	nop
c001a083:	c3                   	ret    

c001a084 <HalDisableNMI()>:
c001a084:	c6 05 50 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb50,0x0
c001a08b:	6a 10                	push   0x10
c001a08d:	e8 ef ee ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001a092:	83 c4 04             	add    esp,0x4
c001a095:	90                   	nop
c001a096:	c3                   	ret    

c001a097 <HalGetNMIState()>:
c001a097:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c001a09c:	c3                   	ret    

c001a09d <x86rdmsr(unsigned int)>:
c001a09d:	83 ec 1c             	sub    esp,0x1c
c001a0a0:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a0a5:	83 e0 08             	and    eax,0x8
c001a0a8:	0f b6 c0             	movzx  eax,al
c001a0ab:	85 c0                	test   eax,eax
c001a0ad:	75 10                	jne    c001a0bf <x86rdmsr(unsigned int)+0x22>
c001a0af:	83 ec 0c             	sub    esp,0xc
c001a0b2:	68 46 5c 02 c0       	push   0xc0025c46
c001a0b7:	e8 b2 5f ff ff       	call   c001006e <KePanic(char const*)>
c001a0bc:	83 c4 10             	add    esp,0x10
c001a0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a0c3:	89 c1                	mov    ecx,eax
c001a0c5:	0f 32                	rdmsr  
c001a0c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0d7:	83 c4 1c             	add    esp,0x1c
c001a0da:	c3                   	ret    

c001a0db <x86wrmsr(unsigned int, unsigned long long)>:
c001a0db:	83 ec 1c             	sub    esp,0x1c
c001a0de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a0e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a0ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0ee:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a0f3:	83 e0 08             	and    eax,0x8
c001a0f6:	0f b6 c0             	movzx  eax,al
c001a0f9:	85 c0                	test   eax,eax
c001a0fb:	75 10                	jne    c001a10d <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a0fd:	83 ec 0c             	sub    esp,0xc
c001a100:	68 4c 5c 02 c0       	push   0xc0025c4c
c001a105:	e8 64 5f ff ff       	call   c001006e <KePanic(char const*)>
c001a10a:	83 c4 10             	add    esp,0x10
c001a10d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a115:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a119:	0f 30                	wrmsr  
c001a11b:	90                   	nop
c001a11c:	83 c4 1c             	add    esp,0x1c
c001a11f:	c3                   	ret    

c001a120 <HalHandleGeneralProtectionFault(void*, void*)>:
c001a120:	83 ec 0c             	sub    esp,0xc
c001a123:	83 ec 0c             	sub    esp,0xc
c001a126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a12a:	e8 0e e2 ff ff       	call   c001833d <Vm::faultHandler(regs*)>
c001a12f:	83 c4 10             	add    esp,0x10
c001a132:	83 c4 0c             	add    esp,0xc
c001a135:	c3                   	ret    

c001a136 <HalFindRSDP()>:
c001a136:	83 ec 1c             	sub    esp,0x1c
c001a139:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c001a13e:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a143:	7e 17                	jle    c001a15c <HalFindRSDP()+0x26>
c001a145:	83 ec 0c             	sub    esp,0xc
c001a148:	68 00 04 00 00       	push   0x400
c001a14d:	e8 8a 31 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a152:	83 c4 10             	add    esp,0x10
c001a155:	0f b6 c0             	movzx  eax,al
c001a158:	85 c0                	test   eax,eax
c001a15a:	74 04                	je     c001a160 <HalFindRSDP()+0x2a>
c001a15c:	b0 01                	mov    al,0x1
c001a15e:	eb 02                	jmp    c001a162 <HalFindRSDP()+0x2c>
c001a160:	b0 00                	mov    al,0x0
c001a162:	0f b6 c0             	movzx  eax,al
c001a165:	85 c0                	test   eax,eax
c001a167:	74 1d                	je     c001a186 <HalFindRSDP()+0x50>
c001a169:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a16e:	83 e0 fb             	and    eax,0xfffffffb
c001a171:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001a176:	83 ec 0c             	sub    esp,0xc
c001a179:	68 52 5c 02 c0       	push   0xc0025c52
c001a17e:	e8 f9 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a183:	83 c4 10             	add    esp,0x10
c001a186:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a18b:	83 e0 04             	and    eax,0x4
c001a18e:	0f b6 c0             	movzx  eax,al
c001a191:	85 c0                	test   eax,eax
c001a193:	75 17                	jne    c001a1ac <HalFindRSDP()+0x76>
c001a195:	83 ec 0c             	sub    esp,0xc
c001a198:	68 61 5c 02 c0       	push   0xc0025c61
c001a19d:	e8 da cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a1a2:	83 c4 10             	add    esp,0x10
c001a1a5:	b8 00 00 00 00       	mov    eax,0x0
c001a1aa:	eb 63                	jmp    c001a20f <HalFindRSDP()+0xd9>
c001a1ac:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a1b4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a1bc:	77 2f                	ja     c001a1ed <HalFindRSDP()+0xb7>
c001a1be:	83 ec 04             	sub    esp,0x4
c001a1c1:	6a 08                	push   0x8
c001a1c3:	68 6b 5c 02 c0       	push   0xc0025c6b
c001a1c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1cc:	e8 af 61 fe ff       	call   c0000380 <memcmp>
c001a1d1:	83 c4 10             	add    esp,0x10
c001a1d4:	85 c0                	test   eax,eax
c001a1d6:	0f 94 c0             	sete   al
c001a1d9:	0f b6 c0             	movzx  eax,al
c001a1dc:	85 c0                	test   eax,eax
c001a1de:	74 06                	je     c001a1e6 <HalFindRSDP()+0xb0>
c001a1e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1e4:	eb 29                	jmp    c001a20f <HalFindRSDP()+0xd9>
c001a1e6:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a1eb:	eb c7                	jmp    c001a1b4 <HalFindRSDP()+0x7e>
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	68 74 5c 02 c0       	push   0xc0025c74
c001a1f5:	e8 82 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a1fa:	83 c4 10             	add    esp,0x10
c001a1fd:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a202:	83 e0 fb             	and    eax,0xfffffffb
c001a205:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001a20a:	b8 00 00 00 00       	mov    eax,0x0
c001a20f:	83 c4 1c             	add    esp,0x1c
c001a212:	c3                   	ret    

c001a213 <HalHandlePageFault(void*, void*)>:
c001a213:	83 ec 1c             	sub    esp,0x1c
c001a216:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a21b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a21d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a220:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a226:	0f 20 d2             	mov    edx,cr2
c001a229:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a22d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a231:	83 ec 08             	sub    esp,0x8
c001a234:	52                   	push   edx
c001a235:	50                   	push   eax
c001a236:	e8 ff a0 ff ff       	call   c001433a <VAS::tryLoadBackOffDisk(unsigned long)>
c001a23b:	83 c4 10             	add    esp,0x10
c001a23e:	83 c4 1c             	add    esp,0x1c
c001a241:	c3                   	ret    

c001a242 <HalHandleOpcodeFault(void*, void*)>:
c001a242:	83 ec 1c             	sub    esp,0x1c
c001a245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a249:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a24d:	a0 6c fb 02 c0       	mov    al,ds:0xc002fb6c
c001a252:	0f b6 c0             	movzx  eax,al
c001a255:	85 c0                	test   eax,eax
c001a257:	74 25                	je     c001a27e <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a259:	83 ec 0c             	sub    esp,0xc
c001a25c:	68 6c 5e 02 c0       	push   0xc0025e6c
c001a261:	e8 16 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a26d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a270:	8d 50 19             	lea    edx,[eax+0x19]
c001a273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a277:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a27a:	b0 01                	mov    al,0x1
c001a27c:	eb 02                	jmp    c001a280 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a27e:	b0 00                	mov    al,0x0
c001a280:	83 c4 1c             	add    esp,0x1c
c001a283:	c3                   	ret    

c001a284 <HalDisplayDebugInfo(void*)>:
c001a284:	83 ec 2c             	sub    esp,0x2c
c001a287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a28b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a28f:	0f 20 c0             	mov    eax,cr0
c001a292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a296:	0f 20 d0             	mov    eax,cr2
c001a299:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a29d:	0f 20 d8             	mov    eax,cr3
c001a2a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a2a4:	0f 20 e0             	mov    eax,cr4
c001a2a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a2ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2af:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a2b2:	83 ec 08             	sub    esp,0x8
c001a2b5:	50                   	push   eax
c001a2b6:	68 8e 5c 02 c0       	push   0xc0025c8e
c001a2bb:	e8 bc cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2c0:	83 c4 10             	add    esp,0x10
c001a2c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2c7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a2ca:	83 ec 08             	sub    esp,0x8
c001a2cd:	50                   	push   eax
c001a2ce:	68 7f 5c 02 c0       	push   0xc0025c7f
c001a2d3:	e8 a4 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2df:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a2e2:	83 ec 08             	sub    esp,0x8
c001a2e5:	50                   	push   eax
c001a2e6:	68 8a 5c 02 c0       	push   0xc0025c8a
c001a2eb:	e8 8c cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2f0:	83 c4 10             	add    esp,0x10
c001a2f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a2fa:	83 ec 08             	sub    esp,0x8
c001a2fd:	50                   	push   eax
c001a2fe:	68 99 5c 02 c0       	push   0xc0025c99
c001a303:	e8 74 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a308:	83 c4 10             	add    esp,0x10
c001a30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a30f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a312:	83 ec 08             	sub    esp,0x8
c001a315:	50                   	push   eax
c001a316:	68 a4 5c 02 c0       	push   0xc0025ca4
c001a31b:	e8 5c cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a320:	83 c4 10             	add    esp,0x10
c001a323:	83 ec 08             	sub    esp,0x8
c001a326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a32a:	68 af 5c 02 c0       	push   0xc0025caf
c001a32f:	e8 48 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a334:	83 c4 10             	add    esp,0x10
c001a337:	83 ec 08             	sub    esp,0x8
c001a33a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a33e:	68 ba 5c 02 c0       	push   0xc0025cba
c001a343:	e8 34 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a34f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a352:	c1 e0 05             	shl    eax,0x5
c001a355:	8d 90 40 71 02 c0    	lea    edx,[eax-0x3ffd8ec0]
c001a35b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a35f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a362:	83 ec 04             	sub    esp,0x4
c001a365:	52                   	push   edx
c001a366:	50                   	push   eax
c001a367:	68 c5 5c 02 c0       	push   0xc0025cc5
c001a36c:	e8 0b cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a371:	83 c4 10             	add    esp,0x10
c001a374:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a379:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a37f:	83 ec 0c             	sub    esp,0xc
c001a382:	50                   	push   eax
c001a383:	e8 5f 82 ff ff       	call   c00125e7 <setActiveTerminal(VgaText*)>
c001a388:	83 c4 10             	add    esp,0x10
c001a38b:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a390:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a396:	83 ec 08             	sub    esp,0x8
c001a399:	68 d4 5c 02 c0       	push   0xc0025cd4
c001a39e:	50                   	push   eax
c001a39f:	e8 90 85 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a3ac:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3b6:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a3b9:	83 ec 08             	sub    esp,0x8
c001a3bc:	52                   	push   edx
c001a3bd:	50                   	push   eax
c001a3be:	e8 2b 85 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a3cb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3d1:	83 ec 08             	sub    esp,0x8
c001a3d4:	68 e2 5c 02 c0       	push   0xc0025ce2
c001a3d9:	50                   	push   eax
c001a3da:	e8 55 85 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a3e7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3ed:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a3f2:	8b 12                	mov    edx,DWORD PTR [edx]
c001a3f4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a3f7:	83 c2 0c             	add    edx,0xc
c001a3fa:	83 ec 08             	sub    esp,0x8
c001a3fd:	52                   	push   edx
c001a3fe:	50                   	push   eax
c001a3ff:	e8 30 85 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a40c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a412:	83 ec 08             	sub    esp,0x8
c001a415:	68 eb 5c 02 c0       	push   0xc0025ceb
c001a41a:	50                   	push   eax
c001a41b:	e8 14 85 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a428:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a42e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a432:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a435:	83 ec 08             	sub    esp,0x8
c001a438:	52                   	push   edx
c001a439:	50                   	push   eax
c001a43a:	e8 af 84 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a43f:	83 c4 10             	add    esp,0x10
c001a442:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a447:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a44d:	83 ec 08             	sub    esp,0x8
c001a450:	68 f3 5c 02 c0       	push   0xc0025cf3
c001a455:	50                   	push   eax
c001a456:	e8 d9 84 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a45b:	83 c4 10             	add    esp,0x10
c001a45e:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a463:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a469:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a46d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a470:	83 ec 08             	sub    esp,0x8
c001a473:	52                   	push   edx
c001a474:	50                   	push   eax
c001a475:	e8 74 84 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a482:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a488:	83 ec 08             	sub    esp,0x8
c001a48b:	68 fb 5c 02 c0       	push   0xc0025cfb
c001a490:	50                   	push   eax
c001a491:	e8 9e 84 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a496:	83 c4 10             	add    esp,0x10
c001a499:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a49e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a4a8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a4ab:	83 ec 08             	sub    esp,0x8
c001a4ae:	52                   	push   edx
c001a4af:	50                   	push   eax
c001a4b0:	e8 39 84 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a4bd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4c3:	83 ec 08             	sub    esp,0x8
c001a4c6:	68 03 5d 02 c0       	push   0xc0025d03
c001a4cb:	50                   	push   eax
c001a4cc:	e8 63 84 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a4d1:	83 c4 10             	add    esp,0x10
c001a4d4:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a4d9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a4e3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a4e6:	83 ec 08             	sub    esp,0x8
c001a4e9:	52                   	push   edx
c001a4ea:	50                   	push   eax
c001a4eb:	e8 fe 83 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a4f0:	83 c4 10             	add    esp,0x10
c001a4f3:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a4f8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4fe:	83 ec 08             	sub    esp,0x8
c001a501:	68 0b 5d 02 c0       	push   0xc0025d0b
c001a506:	50                   	push   eax
c001a507:	e8 28 84 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a50c:	83 c4 10             	add    esp,0x10
c001a50f:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a514:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a51a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a51e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a521:	83 ec 08             	sub    esp,0x8
c001a524:	52                   	push   edx
c001a525:	50                   	push   eax
c001a526:	e8 c3 83 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a52b:	83 c4 10             	add    esp,0x10
c001a52e:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a533:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a539:	83 ec 08             	sub    esp,0x8
c001a53c:	68 13 5d 02 c0       	push   0xc0025d13
c001a541:	50                   	push   eax
c001a542:	e8 ed 83 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a547:	83 c4 10             	add    esp,0x10
c001a54a:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a54f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a555:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a559:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a55c:	83 ec 08             	sub    esp,0x8
c001a55f:	52                   	push   edx
c001a560:	50                   	push   eax
c001a561:	e8 88 83 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a566:	83 c4 10             	add    esp,0x10
c001a569:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a56e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a574:	83 ec 08             	sub    esp,0x8
c001a577:	68 1b 5d 02 c0       	push   0xc0025d1b
c001a57c:	50                   	push   eax
c001a57d:	e8 b2 83 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a58a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a590:	83 ec 08             	sub    esp,0x8
c001a593:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a597:	50                   	push   eax
c001a598:	e8 51 83 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a59d:	83 c4 10             	add    esp,0x10
c001a5a0:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a5a5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5ab:	83 ec 08             	sub    esp,0x8
c001a5ae:	68 24 5d 02 c0       	push   0xc0025d24
c001a5b3:	50                   	push   eax
c001a5b4:	e8 7b 83 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a5c1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5c7:	83 ec 08             	sub    esp,0x8
c001a5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5ce:	50                   	push   eax
c001a5cf:	e8 1a 83 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a5dc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5e2:	83 ec 08             	sub    esp,0x8
c001a5e5:	68 2c 5d 02 c0       	push   0xc0025d2c
c001a5ea:	50                   	push   eax
c001a5eb:	e8 44 83 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a5f8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5fe:	83 ec 08             	sub    esp,0x8
c001a601:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a605:	50                   	push   eax
c001a606:	e8 e3 82 ff ff       	call   c00128ee <VgaText::putx(unsigned int)>
c001a60b:	83 c4 10             	add    esp,0x10
c001a60e:	fa                   	cli    
c001a60f:	f4                   	hlt    
c001a610:	eb fe                	jmp    c001a610 <HalDisplayDebugInfo(void*)+0x38c>

c001a612 <HalReceivedNMI()>:
c001a612:	83 ec 1c             	sub    esp,0x1c
c001a615:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a61c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a620:	89 c2                	mov    edx,eax
c001a622:	ec                   	in     al,dx
c001a623:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a627:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a62b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a62f:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a636:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a63a:	89 c2                	mov    edx,eax
c001a63c:	ec                   	in     al,dx
c001a63d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a641:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a645:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a649:	83 ec 0c             	sub    esp,0xc
c001a64c:	68 34 5d 02 c0       	push   0xc0025d34
c001a651:	e8 26 c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a656:	83 c4 10             	add    esp,0x10
c001a659:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a65e:	83 e0 10             	and    eax,0x10
c001a661:	74 10                	je     c001a673 <HalReceivedNMI()+0x61>
c001a663:	83 ec 0c             	sub    esp,0xc
c001a666:	68 45 5d 02 c0       	push   0xc0025d45
c001a66b:	e8 fe 59 ff ff       	call   c001006e <KePanic(char const*)>
c001a670:	83 c4 10             	add    esp,0x10
c001a673:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a678:	83 e0 40             	and    eax,0x40
c001a67b:	74 10                	je     c001a68d <HalReceivedNMI()+0x7b>
c001a67d:	83 ec 0c             	sub    esp,0xc
c001a680:	68 52 5d 02 c0       	push   0xc0025d52
c001a685:	e8 e4 59 ff ff       	call   c001006e <KePanic(char const*)>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a691:	0f be c0             	movsx  eax,al
c001a694:	85 c0                	test   eax,eax
c001a696:	79 10                	jns    c001a6a8 <HalReceivedNMI()+0x96>
c001a698:	83 ec 0c             	sub    esp,0xc
c001a69b:	68 5c 5d 02 c0       	push   0xc0025d5c
c001a6a0:	e8 c9 59 ff ff       	call   c001006e <KePanic(char const*)>
c001a6a5:	83 c4 10             	add    esp,0x10
c001a6a8:	90                   	nop
c001a6a9:	83 c4 1c             	add    esp,0x1c
c001a6ac:	c3                   	ret    

c001a6ad <HalSystemIdle()>:
c001a6ad:	56                   	push   esi
c001a6ae:	53                   	push   ebx
c001a6af:	83 ec 14             	sub    esp,0x14
c001a6b2:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c001a6b7:	83 e0 10             	and    eax,0x10
c001a6ba:	0f b6 c0             	movzx  eax,al
c001a6bd:	85 c0                	test   eax,eax
c001a6bf:	74 43                	je     c001a704 <HalSystemIdle()+0x57>
c001a6c1:	83 ec 0c             	sub    esp,0xc
c001a6c4:	68 e1 00 00 00       	push   0xe1
c001a6c9:	e8 cf f9 ff ff       	call   c001a09d <x86rdmsr(unsigned int)>
c001a6ce:	83 c4 10             	add    esp,0x10
c001a6d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6dd:	83 e0 02             	and    eax,0x2
c001a6e0:	89 c3                	mov    ebx,eax
c001a6e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6e6:	83 e0 00             	and    eax,0x0
c001a6e9:	89 c6                	mov    esi,eax
c001a6eb:	83 ec 04             	sub    esp,0x4
c001a6ee:	56                   	push   esi
c001a6ef:	53                   	push   ebx
c001a6f0:	68 e1 00 00 00       	push   0xe1
c001a6f5:	e8 e1 f9 ff ff       	call   c001a0db <x86wrmsr(unsigned int, unsigned long long)>
c001a6fa:	83 c4 10             	add    esp,0x10
c001a6fd:	e8 92 5a fe ff       	call   c0000194 <doTPAUSE>
c001a702:	eb 01                	jmp    c001a705 <HalSystemIdle()+0x58>
c001a704:	f4                   	hlt    
c001a705:	90                   	nop
c001a706:	83 c4 14             	add    esp,0x14
c001a709:	5b                   	pop    ebx
c001a70a:	5e                   	pop    esi
c001a70b:	c3                   	ret    

c001a70c <i386SaveCoprocessor(void*)>:
c001a70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a710:	83 c0 3f             	add    eax,0x3f
c001a713:	83 e0 c0             	and    eax,0xffffffc0
c001a716:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a71a:	ff 25 34 fb 02 c0    	jmp    DWORD PTR ds:0xc002fb34

c001a720 <i386LoadCoprocessor(void*)>:
c001a720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a724:	83 c0 3f             	add    eax,0x3f
c001a727:	83 e0 c0             	and    eax,0xffffffc0
c001a72a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a72e:	ff 25 30 fb 02 c0    	jmp    DWORD PTR ds:0xc002fb30

c001a734 <x87EmulHandler(regs*, void*)>:
c001a734:	53                   	push   ebx
c001a735:	83 ec 08             	sub    esp,0x8
c001a738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a73d:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a741:	74 10                	je     c001a753 <x87EmulHandler(regs*, void*)+0x1f>
c001a743:	83 ec 0c             	sub    esp,0xc
c001a746:	68 69 5d 02 c0       	push   0xc0025d69
c001a74b:	e8 1e 59 ff ff       	call   c001006e <KePanic(char const*)>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	0f 20 c0             	mov    eax,cr0
c001a756:	a8 08                	test   al,0x8
c001a758:	74 59                	je     c001a7b3 <x87EmulHandler(regs*, void*)+0x7f>
c001a75a:	0f 06                	clts   
c001a75c:	a1 2c fb 02 c0       	mov    eax,ds:0xc002fb2c
c001a761:	85 c0                	test   eax,eax
c001a763:	74 0e                	je     c001a773 <x87EmulHandler(regs*, void*)+0x3f>
c001a765:	83 ec 0c             	sub    esp,0xc
c001a768:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a76b:	e8 9c ff ff ff       	call   c001a70c <i386SaveCoprocessor(void*)>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a779:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a77d:	75 12                	jne    c001a791 <x87EmulHandler(regs*, void*)+0x5d>
c001a77f:	83 ec 0c             	sub    esp,0xc
c001a782:	68 40 02 00 00       	push   0x240
c001a787:	e8 d3 55 ff ff       	call   c000fd5f <malloc>
c001a78c:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a78f:	eb 10                	jmp    c001a7a1 <x87EmulHandler(regs*, void*)+0x6d>
c001a791:	83 ec 0c             	sub    esp,0xc
c001a794:	a1 2c fb 02 c0       	mov    eax,ds:0xc002fb2c
c001a799:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a79c:	e8 7f ff ff ff       	call   c001a720 <i386LoadCoprocessor(void*)>
c001a7a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7a6:	83 c4 10             	add    esp,0x10
c001a7a9:	a3 2c fb 02 c0       	mov    ds:0xc002fb2c,eax
c001a7ae:	83 c4 08             	add    esp,0x8
c001a7b1:	5b                   	pop    ebx
c001a7b2:	c3                   	ret    
c001a7b3:	83 ec 0c             	sub    esp,0xc
c001a7b6:	68 7d 5d 02 c0       	push   0xc0025d7d
c001a7bb:	e8 bc c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a7c0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001a7c8:	83 c4 18             	add    esp,0x18
c001a7cb:	5b                   	pop    ebx
c001a7cc:	e9 1f d4 ff ff       	jmp    c0017bf0 <Thr::terminateFromIRQ(int)>

c001a7d1 <HalInitialiseCoprocessor()>:
c001a7d1:	83 ec 10             	sub    esp,0x10
c001a7d4:	c7 05 2c fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb2c,0x0
c001a7de:	6a 00                	push   0x0
c001a7e0:	68 34 a7 01 c0       	push   0xc001a734
c001a7e5:	6a 07                	push   0x7
c001a7e7:	e8 c5 06 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7ec:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a7f1:	83 c4 10             	add    esp,0x10
c001a7f4:	a8 80                	test   al,0x80
c001a7f6:	74 1c                	je     c001a814 <HalInitialiseCoprocessor()+0x43>
c001a7f8:	c7 05 34 fb 02 c0 48 1a 02 c0 	mov    DWORD PTR ds:0xc002fb34,0xc0021a48
c001a802:	c7 05 30 fb 02 c0 50 1a 02 c0 	mov    DWORD PTR ds:0xc002fb30,0xc0021a50
c001a80c:	83 c4 0c             	add    esp,0xc
c001a80f:	e9 44 72 00 00       	jmp    c0021a58 <sseInit>
c001a814:	a8 10                	test   al,0x10
c001a816:	74 1c                	je     c001a834 <HalInitialiseCoprocessor()+0x63>
c001a818:	c7 05 34 fb 02 c0 97 1a 02 c0 	mov    DWORD PTR ds:0xc002fb34,0xc0021a97
c001a822:	c7 05 30 fb 02 c0 9e 1a 02 c0 	mov    DWORD PTR ds:0xc002fb30,0xc0021a9e
c001a82c:	83 c4 0c             	add    esp,0xc
c001a82f:	e9 71 72 00 00       	jmp    c0021aa5 <x87Init>
c001a834:	c7 05 34 fb 02 c0 7c 8f 01 c0 	mov    DWORD PTR ds:0xc002fb34,0xc0018f7c
c001a83e:	c7 05 30 fb 02 c0 7c 8f 01 c0 	mov    DWORD PTR ds:0xc002fb30,0xc0018f7c
c001a848:	0f 20 c0             	mov    eax,cr0
c001a84b:	83 c8 04             	or     eax,0x4
c001a84e:	0f 22 c0             	mov    cr0,eax
c001a851:	83 c4 0c             	add    esp,0xc
c001a854:	c3                   	ret    

c001a855 <HalPanic(char const*)>:
c001a855:	53                   	push   ebx
c001a856:	83 ec 10             	sub    esp,0x10
c001a859:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a85d:	fa                   	cli    
c001a85e:	53                   	push   ebx
c001a85f:	68 93 5d 02 c0       	push   0xc0025d93
c001a864:	e8 13 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a869:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c001a86e:	83 c4 10             	add    esp,0x10
c001a871:	85 c0                	test   eax,eax
c001a873:	74 09                	je     c001a87e <HalPanic(char const*)+0x29>
c001a875:	83 ec 0c             	sub    esp,0xc
c001a878:	53                   	push   ebx
c001a879:	ff d0                	call   eax
c001a87b:	83 c4 10             	add    esp,0x10
c001a87e:	a1 d4 f1 02 c0       	mov    eax,ds:0xc002f1d4
c001a883:	85 c0                	test   eax,eax
c001a885:	0f 84 dc 00 00 00    	je     c001a967 <HalPanic(char const*)+0x112>
c001a88b:	52                   	push   edx
c001a88c:	6a 01                	push   0x1
c001a88e:	6a 0f                	push   0xf
c001a890:	50                   	push   eax
c001a891:	e8 90 7b ff ff       	call   c0012426 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a896:	59                   	pop    ecx
c001a897:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a89d:	e8 90 7d ff ff       	call   c0012632 <VgaText::clearScreen()>
c001a8a2:	58                   	pop    eax
c001a8a3:	5a                   	pop    edx
c001a8a4:	68 11 49 02 c0       	push   0xc0024911
c001a8a9:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a8af:	e8 aa 7b ff ff       	call   c001245e <VgaText::setTitle(char*)>
c001a8b4:	83 c4 0c             	add    esp,0xc
c001a8b7:	6a 01                	push   0x1
c001a8b9:	6a 0f                	push   0xf
c001a8bb:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a8c1:	e8 60 7b ff ff       	call   c0012426 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8c6:	59                   	pop    ecx
c001a8c7:	58                   	pop    eax
c001a8c8:	68 ac 5d 02 c0       	push   0xc0025dac
c001a8cd:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a8d3:	e8 5c 80 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a8d8:	83 c4 0c             	add    esp,0xc
c001a8db:	6a 0f                	push   0xf
c001a8dd:	6a 01                	push   0x1
c001a8df:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a8e5:	e8 3c 7b ff ff       	call   c0012426 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8ea:	58                   	pop    eax
c001a8eb:	5a                   	pop    edx
c001a8ec:	68 b5 5d 02 c0       	push   0xc0025db5
c001a8f1:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a8f7:	e8 38 80 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a8fc:	83 c4 0c             	add    esp,0xc
c001a8ff:	6a 01                	push   0x1
c001a901:	6a 0f                	push   0xf
c001a903:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a909:	e8 18 7b ff ff       	call   c0012426 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a90e:	59                   	pop    ecx
c001a90f:	58                   	pop    eax
c001a910:	68 f9 5d 02 c0       	push   0xc0025df9
c001a915:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a91b:	e8 14 80 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a920:	58                   	pop    eax
c001a921:	5a                   	pop    edx
c001a922:	68 c2 5d 02 c0       	push   0xc0025dc2
c001a927:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a92d:	e8 02 80 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a932:	59                   	pop    ecx
c001a933:	58                   	pop    eax
c001a934:	68 fc 5d 02 c0       	push   0xc0025dfc
c001a939:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a93f:	e8 f0 7f ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a944:	58                   	pop    eax
c001a945:	5a                   	pop    edx
c001a946:	53                   	push   ebx
c001a947:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a94d:	e8 e2 7f ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a952:	59                   	pop    ecx
c001a953:	5b                   	pop    ebx
c001a954:	68 f9 5d 02 c0       	push   0xc0025df9
c001a959:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a95f:	e8 d0 7f ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001a964:	83 c4 10             	add    esp,0x10
c001a967:	eb fe                	jmp    c001a967 <HalPanic(char const*)+0x112>

c001a969 <HalQueryPerformanceCounter()>:
c001a969:	31 c0                	xor    eax,eax
c001a96b:	31 d2                	xor    edx,edx
c001a96d:	f6 05 72 fb 02 c0 08 	test   BYTE PTR ds:0xc002fb72,0x8
c001a974:	75 02                	jne    c001a978 <HalQueryPerformanceCounter()+0xf>
c001a976:	0f 31                	rdtsc  
c001a978:	c3                   	ret    

c001a979 <HalInitialise()>:
c001a979:	53                   	push   ebx
c001a97a:	83 ec 08             	sub    esp,0x8
c001a97d:	e8 04 e9 ff ff       	call   c0019286 <HalDetectFeatures()>
c001a982:	e8 39 1a ff ff       	call   c000c3c0 <scanMADT()>
c001a987:	80 3d 40 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce40,0x0
c001a98e:	75 0d                	jne    c001a99d <HalInitialise()+0x24>
c001a990:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a995:	83 e0 fe             	and    eax,0xfffffffe
c001a998:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001a99d:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a9a2:	83 e0 01             	and    eax,0x1
c001a9a5:	a2 24 fb 02 c0       	mov    ds:0xc002fb24,al
c001a9aa:	e8 e1 07 00 00       	call   c001b190 <picOpen()>
c001a9af:	80 3d 24 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb24,0x0
c001a9b6:	74 0a                	je     c001a9c2 <HalInitialise()+0x49>
c001a9b8:	e8 23 07 00 00       	call   c001b0e0 <picDisable()>
c001a9bd:	e8 c2 e1 ff ff       	call   c0018b84 <apicOpen()>
c001a9c2:	bb 0f 00 00 00       	mov    ebx,0xf
c001a9c7:	50                   	push   eax
c001a9c8:	6a 00                	push   0x0
c001a9ca:	68 20 ed 00 c0       	push   0xc000ed20
c001a9cf:	6a 00                	push   0x0
c001a9d1:	e8 db 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9d6:	83 c4 0c             	add    esp,0xc
c001a9d9:	6a 00                	push   0x0
c001a9db:	68 20 ed 00 c0       	push   0xc000ed20
c001a9e0:	6a 01                	push   0x1
c001a9e2:	e8 ca 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9e7:	83 c4 0c             	add    esp,0xc
c001a9ea:	6a 00                	push   0x0
c001a9ec:	68 10 ed 00 c0       	push   0xc000ed10
c001a9f1:	6a 02                	push   0x2
c001a9f3:	e8 b9 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9f8:	83 c4 0c             	add    esp,0xc
c001a9fb:	6a 00                	push   0x0
c001a9fd:	68 20 ed 00 c0       	push   0xc000ed20
c001aa02:	6a 03                	push   0x3
c001aa04:	e8 a8 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa09:	83 c4 0c             	add    esp,0xc
c001aa0c:	6a 00                	push   0x0
c001aa0e:	68 20 ed 00 c0       	push   0xc000ed20
c001aa13:	6a 04                	push   0x4
c001aa15:	e8 97 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa1a:	83 c4 0c             	add    esp,0xc
c001aa1d:	6a 00                	push   0x0
c001aa1f:	68 20 ed 00 c0       	push   0xc000ed20
c001aa24:	6a 05                	push   0x5
c001aa26:	e8 86 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa2b:	83 c4 0c             	add    esp,0xc
c001aa2e:	6a 00                	push   0x0
c001aa30:	68 54 ed 00 c0       	push   0xc000ed54
c001aa35:	6a 06                	push   0x6
c001aa37:	e8 75 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa3c:	83 c4 0c             	add    esp,0xc
c001aa3f:	6a 00                	push   0x0
c001aa41:	68 a8 ed 00 c0       	push   0xc000eda8
c001aa46:	6a 08                	push   0x8
c001aa48:	e8 64 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa4d:	83 c4 0c             	add    esp,0xc
c001aa50:	6a 00                	push   0x0
c001aa52:	68 20 ed 00 c0       	push   0xc000ed20
c001aa57:	6a 09                	push   0x9
c001aa59:	e8 53 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa5e:	83 c4 0c             	add    esp,0xc
c001aa61:	6a 00                	push   0x0
c001aa63:	68 20 ed 00 c0       	push   0xc000ed20
c001aa68:	6a 0a                	push   0xa
c001aa6a:	e8 42 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa6f:	83 c4 0c             	add    esp,0xc
c001aa72:	6a 00                	push   0x0
c001aa74:	68 20 ed 00 c0       	push   0xc000ed20
c001aa79:	6a 0b                	push   0xb
c001aa7b:	e8 31 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa80:	83 c4 0c             	add    esp,0xc
c001aa83:	6a 00                	push   0x0
c001aa85:	68 48 ec 00 c0       	push   0xc000ec48
c001aa8a:	6a 0d                	push   0xd
c001aa8c:	e8 20 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa91:	83 c4 0c             	add    esp,0xc
c001aa94:	6a 00                	push   0x0
c001aa96:	68 ac ec 00 c0       	push   0xc000ecac
c001aa9b:	6a 0e                	push   0xe
c001aa9d:	e8 0f 04 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aaa2:	83 c4 10             	add    esp,0x10
c001aaa5:	50                   	push   eax
c001aaa6:	6a 00                	push   0x0
c001aaa8:	68 20 ed 00 c0       	push   0xc000ed20
c001aaad:	53                   	push   ebx
c001aaae:	43                   	inc    ebx
c001aaaf:	e8 fd 03 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aab4:	83 c4 10             	add    esp,0x10
c001aab7:	83 fb 1e             	cmp    ebx,0x1e
c001aaba:	75 e9                	jne    c001aaa5 <HalInitialise()+0x12c>
c001aabc:	50                   	push   eax
c001aabd:	6a 00                	push   0x0
c001aabf:	68 bf 22 01 c0       	push   0xc00122bf
c001aac4:	6a 60                	push   0x60
c001aac6:	e8 e6 03 00 00       	call   c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aacb:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001aad0:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001aada:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001aae1:	e8 79 52 ff ff       	call   c000fd5f <malloc>
c001aae6:	89 04 24             	mov    DWORD PTR [esp],eax
c001aae9:	89 c3                	mov    ebx,eax
c001aaeb:	e8 0e 0e 00 00       	call   c001b8fe <RTC::RTC()>
c001aaf0:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001aafa:	5a                   	pop    edx
c001aafb:	59                   	pop    ecx
c001aafc:	53                   	push   ebx
c001aafd:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c001ab03:	e8 4c ef fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001ab08:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab0a:	6a 00                	push   0x0
c001ab0c:	6a 00                	push   0x0
c001ab0e:	6a 00                	push   0x0
c001ab10:	53                   	push   ebx
c001ab11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab14:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001ab19:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001ab1f:	83 c4 28             	add    esp,0x28
c001ab22:	5b                   	pop    ebx
c001ab23:	c3                   	ret    

c001ab24 <HalMakeBeep(int)>:
c001ab24:	53                   	push   ebx
c001ab25:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ab29:	85 db                	test   ebx,ebx
c001ab2b:	75 07                	jne    c001ab34 <HalMakeBeep(int)+0x10>
c001ab2d:	e4 61                	in     al,0x61
c001ab2f:	83 e0 fc             	and    eax,0xfffffffc
c001ab32:	eb 26                	jmp    c001ab5a <HalMakeBeep(int)+0x36>
c001ab34:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ab39:	99                   	cdq    
c001ab3a:	f7 fb                	idiv   ebx
c001ab3c:	89 c1                	mov    ecx,eax
c001ab3e:	b0 b6                	mov    al,0xb6
c001ab40:	e6 43                	out    0x43,al
c001ab42:	88 c8                	mov    al,cl
c001ab44:	e6 42                	out    0x42,al
c001ab46:	89 c8                	mov    eax,ecx
c001ab48:	c1 e8 08             	shr    eax,0x8
c001ab4b:	e6 42                	out    0x42,al
c001ab4d:	e4 61                	in     al,0x61
c001ab4f:	89 c2                	mov    edx,eax
c001ab51:	83 ca 03             	or     edx,0x3
c001ab54:	38 d0                	cmp    al,dl
c001ab56:	74 04                	je     c001ab5c <HalMakeBeep(int)+0x38>
c001ab58:	88 d0                	mov    al,dl
c001ab5a:	e6 61                	out    0x61,al
c001ab5c:	5b                   	pop    ebx
c001ab5d:	c3                   	ret    

c001ab5e <HalGetRand()>:
c001ab5e:	31 c0                	xor    eax,eax
c001ab60:	c3                   	ret    

c001ab61 <HalEndOfInterrupt(int)>:
c001ab61:	80 3d 24 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb24,0x0
c001ab68:	74 1d                	je     c001ab87 <HalEndOfInterrupt(int)+0x26>
c001ab6a:	83 ec 18             	sub    esp,0x18
c001ab6d:	6a 1b                	push   0x1b
c001ab6f:	e8 29 f5 ff ff       	call   c001a09d <x86rdmsr(unsigned int)>
c001ab74:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ab79:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ab83:	83 c4 1c             	add    esp,0x1c
c001ab86:	c3                   	ret    
c001ab87:	e9 88 07 00 00       	jmp    c001b314 <picEOI(int)>

c001ab8c <HalRestart()>:
c001ab8c:	c3                   	ret    

c001ab8d <HalShutdown()>:
c001ab8d:	c3                   	ret    

c001ab8e <HalSleep()>:
c001ab8e:	c3                   	ret    
c001ab8f:	90                   	nop

c001ab90 <CPU::CPU()>:
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab97:	83 ec 08             	sub    esp,0x8
c001ab9a:	68 9a 5b 02 c0       	push   0xc0025b9a
c001ab9f:	50                   	push   eax
c001aba0:	e8 11 f0 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001aba5:	83 c4 10             	add    esp,0x10
c001aba8:	ba 98 5e 02 c0       	mov    edx,0xc0025e98
c001abad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb1:	89 10                	mov    DWORD PTR [eax],edx
c001abb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb7:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001abc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc5:	05 64 01 00 00       	add    eax,0x164
c001abca:	83 ec 0c             	sub    esp,0xc
c001abcd:	50                   	push   eax
c001abce:	e8 29 42 ff ff       	call   c000edfc <GDT::GDT()>
c001abd3:	83 c4 10             	add    esp,0x10
c001abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abda:	05 68 09 00 00       	add    eax,0x968
c001abdf:	83 ec 0c             	sub    esp,0xc
c001abe2:	50                   	push   eax
c001abe3:	e8 68 44 ff ff       	call   c000f050 <IDT::IDT()>
c001abe8:	83 c4 10             	add    esp,0x10
c001abeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abef:	05 68 11 00 00       	add    eax,0x1168
c001abf4:	83 ec 0c             	sub    esp,0xc
c001abf7:	50                   	push   eax
c001abf8:	e8 13 82 ff ff       	call   c0012e10 <TSS::TSS()>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac04:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001ac0e:	90                   	nop
c001ac0f:	83 c4 0c             	add    esp,0xc
c001ac12:	c3                   	ret    
c001ac13:	90                   	nop

c001ac14 <CPU::setupSMEP()>:
c001ac14:	0f 20 e0             	mov    eax,cr4
c001ac17:	0d 00 00 10 00       	or     eax,0x100000
c001ac1c:	0f 22 e0             	mov    cr4,eax
c001ac1f:	c3                   	ret    

c001ac20 <CPU::setupUMIP()>:
c001ac20:	0f 20 e0             	mov    eax,cr4
c001ac23:	80 cc 08             	or     ah,0x8
c001ac26:	0f 22 e0             	mov    cr4,eax
c001ac29:	c3                   	ret    

c001ac2a <CPU::setupTSC()>:
c001ac2a:	0f 20 e0             	mov    eax,cr4
c001ac2d:	83 c8 04             	or     eax,0x4
c001ac30:	0f 22 e0             	mov    cr4,eax
c001ac33:	c3                   	ret    

c001ac34 <CPU::setupLargePages()>:
c001ac34:	0f 20 e0             	mov    eax,cr4
c001ac37:	83 c8 10             	or     eax,0x10
c001ac3a:	0f 22 e0             	mov    cr4,eax
c001ac3d:	c3                   	ret    

c001ac3e <CPU::setupPAT()>:
c001ac3e:	f6 05 70 fb 02 c0 08 	test   BYTE PTR ds:0xc002fb70,0x8
c001ac45:	74 28                	je     c001ac6f <CPU::setupPAT()+0x31>
c001ac47:	53                   	push   ebx
c001ac48:	83 ec 14             	sub    esp,0x14
c001ac4b:	68 77 02 00 00       	push   0x277
c001ac50:	e8 48 f4 ff ff       	call   c001a09d <x86rdmsr(unsigned int)>
c001ac55:	83 c4 0c             	add    esp,0xc
c001ac58:	83 e2 f8             	and    edx,0xfffffff8
c001ac5b:	83 ca 01             	or     edx,0x1
c001ac5e:	52                   	push   edx
c001ac5f:	50                   	push   eax
c001ac60:	68 77 02 00 00       	push   0x277
c001ac65:	e8 71 f4 ff ff       	call   c001a0db <x86wrmsr(unsigned int, unsigned long long)>
c001ac6a:	83 c4 18             	add    esp,0x18
c001ac6d:	5b                   	pop    ebx
c001ac6e:	c3                   	ret    
c001ac6f:	c3                   	ret    

c001ac70 <CPU::setupMTRR()>:
c001ac70:	c3                   	ret    
c001ac71:	90                   	nop

c001ac72 <CPU::setupGlobalPages()>:
c001ac72:	0f 20 e0             	mov    eax,cr4
c001ac75:	0c 80                	or     al,0x80
c001ac77:	0f 22 e0             	mov    cr4,eax
c001ac7a:	c3                   	ret    
c001ac7b:	90                   	nop

c001ac7c <CPU::allowUsermodeDataAccess()>:
c001ac7c:	f6 05 73 fb 02 c0 40 	test   BYTE PTR ds:0xc002fb73,0x40
c001ac83:	74 03                	je     c001ac88 <CPU::allowUsermodeDataAccess()+0xc>
c001ac85:	0f 01 cb             	stac   
c001ac88:	c3                   	ret    
c001ac89:	90                   	nop

c001ac8a <CPU::prohibitUsermodeDataAccess()>:
c001ac8a:	f6 05 73 fb 02 c0 40 	test   BYTE PTR ds:0xc002fb73,0x40
c001ac91:	74 03                	je     c001ac96 <CPU::prohibitUsermodeDataAccess()+0xc>
c001ac93:	0f 01 ca             	clac   
c001ac96:	c3                   	ret    
c001ac97:	90                   	nop

c001ac98 <CPU::setupSMAP()>:
c001ac98:	0f 20 e0             	mov    eax,cr4
c001ac9b:	0d 00 00 20 00       	or     eax,0x200000
c001aca0:	0f 22 e0             	mov    cr4,eax
c001aca3:	eb e5                	jmp    c001ac8a <CPU::prohibitUsermodeDataAccess()>
c001aca5:	90                   	nop

c001aca6 <CPU::setupFeatures()>:
c001aca6:	53                   	push   ebx
c001aca7:	83 ec 08             	sub    esp,0x8
c001acaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001acae:	f6 05 73 fb 02 c0 20 	test   BYTE PTR ds:0xc002fb73,0x20
c001acb5:	74 18                	je     c001accf <CPU::setupFeatures()+0x29>
c001acb7:	83 ec 0c             	sub    esp,0xc
c001acba:	68 07 5e 02 c0       	push   0xc0025e07
c001acbf:	e8 b8 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001acc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acc7:	e8 54 ff ff ff       	call   c001ac20 <CPU::setupUMIP()>
c001accc:	83 c4 10             	add    esp,0x10
c001accf:	f6 05 72 fb 02 c0 08 	test   BYTE PTR ds:0xc002fb72,0x8
c001acd6:	74 18                	je     c001acf0 <CPU::setupFeatures()+0x4a>
c001acd8:	83 ec 0c             	sub    esp,0xc
c001acdb:	68 11 5e 02 c0       	push   0xc0025e11
c001ace0:	e8 97 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ace5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ace8:	e8 3d ff ff ff       	call   c001ac2a <CPU::setupTSC()>
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	f6 05 72 fb 02 c0 20 	test   BYTE PTR ds:0xc002fb72,0x20
c001acf7:	74 18                	je     c001ad11 <CPU::setupFeatures()+0x6b>
c001acf9:	83 ec 0c             	sub    esp,0xc
c001acfc:	68 1a 5e 02 c0       	push   0xc0025e1a
c001ad01:	e8 76 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad09:	e8 26 ff ff ff       	call   c001ac34 <CPU::setupLargePages()>
c001ad0e:	83 c4 10             	add    esp,0x10
c001ad11:	f6 05 72 fb 02 c0 40 	test   BYTE PTR ds:0xc002fb72,0x40
c001ad18:	74 18                	je     c001ad32 <CPU::setupFeatures()+0x8c>
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	68 23 5e 02 c0       	push   0xc0025e23
c001ad22:	e8 55 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad2a:	e8 43 ff ff ff       	call   c001ac72 <CPU::setupGlobalPages()>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	f6 05 72 fb 02 c0 80 	test   BYTE PTR ds:0xc002fb72,0x80
c001ad39:	74 18                	je     c001ad53 <CPU::setupFeatures()+0xad>
c001ad3b:	83 ec 0c             	sub    esp,0xc
c001ad3e:	68 35 5e 02 c0       	push   0xc0025e35
c001ad43:	e8 34 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad4b:	e8 ee fe ff ff       	call   c001ac3e <CPU::setupPAT()>
c001ad50:	83 c4 10             	add    esp,0x10
c001ad53:	f6 05 74 fb 02 c0 04 	test   BYTE PTR ds:0xc002fb74,0x4
c001ad5a:	74 11                	je     c001ad6d <CPU::setupFeatures()+0xc7>
c001ad5c:	c7 44 24 10 3e 5e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025e3e
c001ad64:	83 c4 08             	add    esp,0x8
c001ad67:	5b                   	pop    ebx
c001ad68:	e9 0f c2 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad6d:	83 c4 08             	add    esp,0x8
c001ad70:	5b                   	pop    ebx
c001ad71:	c3                   	ret    

c001ad72 <CPU::open(int, int, void*)>:
c001ad72:	55                   	push   ebp
c001ad73:	57                   	push   edi
c001ad74:	56                   	push   esi
c001ad75:	53                   	push   ebx
c001ad76:	83 ec 18             	sub    esp,0x18
c001ad79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad81:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ad85:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001ad8b:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001ad91:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001ad97:	50                   	push   eax
c001ad98:	e8 c1 40 ff ff       	call   c000ee5e <GDT::setup()>
c001ad9d:	83 c4 0c             	add    esp,0xc
c001ada0:	6a 00                	push   0x0
c001ada2:	68 ef be ad de       	push   0xdeadbeef
c001ada7:	55                   	push   ebp
c001ada8:	e8 a7 80 ff ff       	call   c0012e54 <TSS::setup(unsigned long, unsigned long)>
c001adad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001adb0:	e8 7f 80 ff ff       	call   c0012e34 <TSS::flush()>
c001adb5:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001adbb:	89 04 24             	mov    DWORD PTR [esp],eax
c001adbe:	e8 03 43 ff ff       	call   c000f0c6 <IDT::setup()>
c001adc3:	b8 00 04 00 00       	mov    eax,0x400
c001adc8:	0f 23 f8             	mov    dr7,eax
c001adcb:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001add5:	e8 88 54 ff ff       	call   c0010262 <Phys::allocatePage()>
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001ade3:	85 f6                	test   esi,esi
c001ade5:	89 38                	mov    DWORD PTR [eax],edi
c001ade7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001aded:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001adf0:	74 10                	je     c001ae02 <CPU::open(int, int, void*)+0x90>
c001adf2:	50                   	push   eax
c001adf3:	50                   	push   eax
c001adf4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001adfa:	56                   	push   esi
c001adfb:	e8 0e 8a ff ff       	call   c001380e <VAS::setCPUSpecific(unsigned long)>
c001ae00:	eb 0d                	jmp    c001ae0f <CPU::open(int, int, void*)+0x9d>
c001ae02:	83 ec 0c             	sub    esp,0xc
c001ae05:	68 48 5e 02 c0       	push   0xc0025e48
c001ae0a:	e8 5f 52 ff ff       	call   c001006e <KePanic(char const*)>
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	83 ec 0c             	sub    esp,0xc
c001ae15:	68 56 5e 02 c0       	push   0xc0025e56
c001ae1a:	e8 0a 25 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ae1f:	e8 55 fb ff ff       	call   c001a979 <HalInitialise()>
c001ae24:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ae2b:	e8 ac 24 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ae30:	0f b6 c0             	movzx  eax,al
c001ae33:	83 f8 01             	cmp    eax,0x1
c001ae36:	19 c0                	sbb    eax,eax
c001ae38:	83 e0 46             	and    eax,0x46
c001ae3b:	83 c0 1e             	add    eax,0x1e
c001ae3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae41:	e8 a7 02 ff ff       	call   c000b0ed <setupTimer(int)>
c001ae46:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001ae4c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001ae53:	e8 84 24 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ae58:	83 c4 10             	add    esp,0x10
c001ae5b:	84 c0                	test   al,al
c001ae5d:	74 0c                	je     c001ae6b <CPU::open(int, int, void*)+0xf9>
c001ae5f:	83 ec 0c             	sub    esp,0xc
c001ae62:	53                   	push   ebx
c001ae63:	e8 3e fe ff ff       	call   c001aca6 <CPU::setupFeatures()>
c001ae68:	83 c4 10             	add    esp,0x10
c001ae6b:	83 c4 0c             	add    esp,0xc
c001ae6e:	31 c0                	xor    eax,eax
c001ae70:	5b                   	pop    ebx
c001ae71:	5e                   	pop    esi
c001ae72:	5f                   	pop    edi
c001ae73:	5d                   	pop    ebp
c001ae74:	c3                   	ret    

c001ae75 <convertLegacyIRQNumber(int)>:
c001ae75:	83 ec 0c             	sub    esp,0xc
c001ae78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7c:	f6 05 70 fb 02 c0 01 	test   BYTE PTR ds:0xc002fb70,0x1
c001ae83:	74 0c                	je     c001ae91 <convertLegacyIRQNumber(int)+0x1c>
c001ae85:	83 f8 0f             	cmp    eax,0xf
c001ae88:	7f 0b                	jg     c001ae95 <convertLegacyIRQNumber(int)+0x20>
c001ae8a:	0f b6 80 a8 69 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9658]
c001ae91:	83 c4 0c             	add    esp,0xc
c001ae94:	c3                   	ret    
c001ae95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae99:	83 ec 0c             	sub    esp,0xc
c001ae9c:	68 bc 5e 02 c0       	push   0xc0025ebc
c001aea1:	e8 c8 51 ff ff       	call   c001006e <KePanic(char const*)>
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aead:	83 c4 0c             	add    esp,0xc
c001aeb0:	c3                   	ret    

c001aeb1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001aeb1:	56                   	push   esi
c001aeb2:	31 c0                	xor    eax,eax
c001aeb4:	53                   	push   ebx
c001aeb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aeb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aebd:	89 ca                	mov    edx,ecx
c001aebf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aec3:	c1 e2 04             	shl    edx,0x4
c001aec6:	83 bc 82 00 e1 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1f00],0x0
c001aece:	74 17                	je     c001aee7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001aed0:	83 c0 01             	add    eax,0x1
c001aed3:	83 f8 04             	cmp    eax,0x4
c001aed6:	75 ee                	jne    c001aec6 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001aed8:	c7 44 24 0c 1d 5f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025f1d
c001aee0:	5b                   	pop    ebx
c001aee1:	5e                   	pop    esi
c001aee2:	e9 87 51 ff ff       	jmp    c001006e <KePanic(char const*)>
c001aee7:	8d 04 88             	lea    eax,[eax+ecx*4]
c001aeea:	89 1c 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],ebx
c001aef1:	89 34 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],esi
c001aef8:	5b                   	pop    ebx
c001aef9:	5e                   	pop    esi
c001aefa:	c3                   	ret    

c001aefb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001aefb:	57                   	push   edi
c001aefc:	f6 05 70 fb 02 c0 01 	test   BYTE PTR ds:0xc002fb70,0x1
c001af03:	56                   	push   esi
c001af04:	53                   	push   ebx
c001af05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af0d:	74 54                	je     c001af63 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001af0f:	89 c7                	mov    edi,eax
c001af11:	84 c0                	test   al,al
c001af13:	74 1d                	je     c001af32 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001af15:	83 fe 0f             	cmp    esi,0xf
c001af18:	0f 8f d5 00 00 00    	jg     c001aff3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001af1e:	0f b6 b6 a8 69 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9658]
c001af25:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001af2d:	d1 ef                	shr    edi,1
c001af2f:	83 e7 01             	and    edi,0x1
c001af32:	83 ec 08             	sub    esp,0x8
c001af35:	a1 e0 fa 02 c0       	mov    eax,ds:0xc002fae0
c001af3a:	31 db                	xor    ebx,ebx
c001af3c:	50                   	push   eax
c001af3d:	68 2a 5f 02 c0       	push   0xc0025f2a
c001af42:	e8 35 c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001af47:	83 c4 10             	add    esp,0x10
c001af4a:	a1 e0 fa 02 c0       	mov    eax,ds:0xc002fae0
c001af4f:	85 c0                	test   eax,eax
c001af51:	7f 55                	jg     c001afa8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001af53:	83 ec 0c             	sub    esp,0xc
c001af56:	68 41 5f 02 c0       	push   0xc0025f41
c001af5b:	e8 0e 51 ff ff       	call   c001006e <KePanic(char const*)>
c001af60:	83 c4 10             	add    esp,0x10
c001af63:	8d 7e 20             	lea    edi,[esi+0x20]
c001af66:	89 f8                	mov    eax,edi
c001af68:	31 d2                	xor    edx,edx
c001af6a:	c1 e0 04             	shl    eax,0x4
c001af6d:	8b 8c 90 00 e1 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1f00]
c001af74:	85 c9                	test   ecx,ecx
c001af76:	0f 84 8e 00 00 00    	je     c001b00a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001af7c:	83 c2 01             	add    edx,0x1
c001af7f:	83 fa 04             	cmp    edx,0x4
c001af82:	75 e9                	jne    c001af6d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001af84:	83 ec 0c             	sub    esp,0xc
c001af87:	68 f8 5e 02 c0       	push   0xc0025ef8
c001af8c:	e8 dd 50 ff ff       	call   c001006e <KePanic(char const*)>
c001af91:	83 c4 10             	add    esp,0x10
c001af94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af99:	5b                   	pop    ebx
c001af9a:	5e                   	pop    esi
c001af9b:	5f                   	pop    edi
c001af9c:	c3                   	ret    
c001af9d:	83 c3 01             	add    ebx,0x1
c001afa0:	39 1d e0 fa 02 c0    	cmp    DWORD PTR ds:0xc002fae0,ebx
c001afa6:	7e ab                	jle    c001af53 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001afa8:	83 ec 08             	sub    esp,0x8
c001afab:	8b 04 9d 00 fb 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0500]
c001afb2:	56                   	push   esi
c001afb3:	50                   	push   eax
c001afb4:	e8 57 dd ff ff       	call   c0018d10 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001afb9:	83 c4 10             	add    esp,0x10
c001afbc:	84 c0                	test   al,al
c001afbe:	74 dd                	je     c001af9d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001afc0:	83 ec 04             	sub    esp,0x4
c001afc3:	89 f8                	mov    eax,edi
c001afc5:	8b 1c 9d 00 fb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0500]
c001afcc:	0f b6 f8             	movzx  edi,al
c001afcf:	57                   	push   edi
c001afd0:	8d 7e 20             	lea    edi,[esi+0x20]
c001afd3:	6a 00                	push   0x0
c001afd5:	89 f8                	mov    eax,edi
c001afd7:	0f b6 c0             	movzx  eax,al
c001afda:	50                   	push   eax
c001afdb:	89 f0                	mov    eax,esi
c001afdd:	6a 00                	push   0x0
c001afdf:	0f b6 c0             	movzx  eax,al
c001afe2:	6a 00                	push   0x0
c001afe4:	50                   	push   eax
c001afe5:	53                   	push   ebx
c001afe6:	e8 91 de ff ff       	call   c0018e7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001afeb:	83 c4 20             	add    esp,0x20
c001afee:	e9 73 ff ff ff       	jmp    c001af66 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001aff3:	83 ec 0c             	sub    esp,0xc
c001aff6:	31 ff                	xor    edi,edi
c001aff8:	68 bc 5e 02 c0       	push   0xc0025ebc
c001affd:	e8 6c 50 ff ff       	call   c001006e <KePanic(char const*)>
c001b002:	83 c4 10             	add    esp,0x10
c001b005:	e9 28 ff ff ff       	jmp    c001af32 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b00a:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b00d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b011:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001b018:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b01c:	5b                   	pop    ebx
c001b01d:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001b024:	89 f0                	mov    eax,esi
c001b026:	5e                   	pop    esi
c001b027:	5f                   	pop    edi
c001b028:	c3                   	ret    

c001b029 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b02d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b031:	c1 e0 04             	shl    eax,0x4
c001b034:	8d 50 10             	lea    edx,[eax+0x10]
c001b037:	39 88 00 e1 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f00],ecx
c001b03d:	74 08                	je     c001b047 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b03f:	83 c0 04             	add    eax,0x4
c001b042:	39 d0                	cmp    eax,edx
c001b044:	75 f1                	jne    c001b037 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b046:	c3                   	ret    
c001b047:	c7 80 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f00],0x0
c001b051:	c7 80 00 d1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f00],0x0
c001b05b:	eb e2                	jmp    c001b03f <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b05d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b05d:	53                   	push   ebx
c001b05e:	83 ec 08             	sub    esp,0x8
c001b061:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b065:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b06a:	74 09                	je     c001b075 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b06c:	f6 05 70 fb 02 c0 01 	test   BYTE PTR ds:0xc002fb70,0x1
c001b073:	75 37                	jne    c001b0ac <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001b075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b079:	83 c0 20             	add    eax,0x20
c001b07c:	c1 e0 04             	shl    eax,0x4
c001b07f:	8d 50 10             	lea    edx,[eax+0x10]
c001b082:	39 98 00 e1 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f00],ebx
c001b088:	74 0c                	je     c001b096 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001b08a:	83 c0 04             	add    eax,0x4
c001b08d:	39 d0                	cmp    eax,edx
c001b08f:	75 f1                	jne    c001b082 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001b091:	83 c4 08             	add    esp,0x8
c001b094:	5b                   	pop    ebx
c001b095:	c3                   	ret    
c001b096:	c7 80 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f00],0x0
c001b0a0:	c7 80 00 d1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f00],0x0
c001b0aa:	eb de                	jmp    c001b08a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001b0ac:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b0b1:	7f 11                	jg     c001b0c4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001b0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b7:	0f b6 80 a8 69 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9658]
c001b0be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b0c2:	eb b1                	jmp    c001b075 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b0c4:	83 ec 0c             	sub    esp,0xc
c001b0c7:	68 4e 5f 02 c0       	push   0xc0025f4e
c001b0cc:	e8 9d 4f ff ff       	call   c001006e <KePanic(char const*)>
c001b0d1:	83 c4 10             	add    esp,0x10
c001b0d4:	eb 9f                	jmp    c001b075 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b0d6:	66 90                	xchg   ax,ax

c001b0d8 <picIoWait()>:
c001b0d8:	eb 00                	jmp    c001b0da <picIoWait()+0x2>
c001b0da:	eb 00                	jmp    c001b0dc <picIoWait()+0x4>
c001b0dc:	90                   	nop
c001b0dd:	c3                   	ret    
c001b0de:	66 90                	xchg   ax,ax

c001b0e0 <picDisable()>:
c001b0e0:	83 ec 10             	sub    esp,0x10
c001b0e3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b0ea:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b0ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b0f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b0f8:	ee                   	out    dx,al
c001b0f9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b100:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b105:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b109:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b10e:	ee                   	out    dx,al
c001b10f:	90                   	nop
c001b110:	83 c4 10             	add    esp,0x10
c001b113:	c3                   	ret    

c001b114 <picGetIRQReg(int)>:
c001b114:	83 ec 10             	sub    esp,0x10
c001b117:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b11b:	0f b6 c0             	movzx  eax,al
c001b11e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b125:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b129:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b12d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b132:	ee                   	out    dx,al
c001b133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b137:	0f b6 c0             	movzx  eax,al
c001b13a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b141:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b145:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b149:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b14e:	ee                   	out    dx,al
c001b14f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b156:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b15b:	89 c2                	mov    edx,eax
c001b15d:	ec                   	in     al,dx
c001b15e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b162:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b166:	0f b6 c0             	movzx  eax,al
c001b169:	c1 e0 08             	shl    eax,0x8
c001b16c:	89 c1                	mov    ecx,eax
c001b16e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b175:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b17a:	89 c2                	mov    edx,eax
c001b17c:	ec                   	in     al,dx
c001b17d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b181:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b185:	0f b6 c0             	movzx  eax,al
c001b188:	09 c8                	or     eax,ecx
c001b18a:	83 c4 10             	add    esp,0x10
c001b18d:	c3                   	ret    
c001b18e:	66 90                	xchg   ax,ax

c001b190 <picOpen()>:
c001b190:	83 ec 50             	sub    esp,0x50
c001b193:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b19a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b19f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1a7:	ee                   	out    dx,al
c001b1a8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b1af:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b1b4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b1b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1bc:	ee                   	out    dx,al
c001b1bd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b1c5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b1cd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b1d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1d8:	89 c2                	mov    edx,eax
c001b1da:	ec                   	in     al,dx
c001b1db:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b1df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b1e3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b1e7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b1ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1f2:	89 c2                	mov    edx,eax
c001b1f4:	ec                   	in     al,dx
c001b1f5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b1f9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b1fd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b201:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b208:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b20d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b211:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b215:	ee                   	out    dx,al
c001b216:	e8 bd fe ff ff       	call   c001b0d8 <picIoWait()>
c001b21b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b222:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b227:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b22b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b22f:	ee                   	out    dx,al
c001b230:	e8 a3 fe ff ff       	call   c001b0d8 <picIoWait()>
c001b235:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b239:	0f b6 c0             	movzx  eax,al
c001b23c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b243:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b247:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b24b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b24f:	ee                   	out    dx,al
c001b250:	e8 83 fe ff ff       	call   c001b0d8 <picIoWait()>
c001b255:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b259:	0f b6 c0             	movzx  eax,al
c001b25c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b263:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b267:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b26b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b26f:	ee                   	out    dx,al
c001b270:	e8 63 fe ff ff       	call   c001b0d8 <picIoWait()>
c001b275:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b27c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b281:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b289:	ee                   	out    dx,al
c001b28a:	e8 49 fe ff ff       	call   c001b0d8 <picIoWait()>
c001b28f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b296:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b29b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b29f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b2a3:	ee                   	out    dx,al
c001b2a4:	e8 2f fe ff ff       	call   c001b0d8 <picIoWait()>
c001b2a9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b2b0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b2b5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b2b9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b2bd:	ee                   	out    dx,al
c001b2be:	e8 15 fe ff ff       	call   c001b0d8 <picIoWait()>
c001b2c3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b2ca:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b2cf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b2d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b2d7:	ee                   	out    dx,al
c001b2d8:	e8 fb fd ff ff       	call   c001b0d8 <picIoWait()>
c001b2dd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b2e2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b2e9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b2ed:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b2f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b2f5:	ee                   	out    dx,al
c001b2f6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b2fb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b302:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b306:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b30a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b30e:	ee                   	out    dx,al
c001b30f:	90                   	nop
c001b310:	83 c4 50             	add    esp,0x50
c001b313:	c3                   	ret    

c001b314 <picEOI(int)>:
c001b314:	83 ec 10             	sub    esp,0x10
c001b317:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b31c:	75 1e                	jne    c001b33c <picEOI(int)+0x28>
c001b31e:	6a 0b                	push   0xb
c001b320:	e8 ef fd ff ff       	call   c001b114 <picGetIRQReg(int)>
c001b325:	83 c4 04             	add    esp,0x4
c001b328:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b32d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b332:	25 80 00 00 00       	and    eax,0x80
c001b337:	74 73                	je     c001b3ac <picEOI(int)+0x98>
c001b339:	8d 76 00             	lea    esi,[esi+0x0]
c001b33c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b341:	75 31                	jne    c001b374 <picEOI(int)+0x60>
c001b343:	6a 0b                	push   0xb
c001b345:	e8 ca fd ff ff       	call   c001b114 <picGetIRQReg(int)>
c001b34a:	83 c4 04             	add    esp,0x4
c001b34d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b356:	98                   	cwde   
c001b357:	85 c0                	test   eax,eax
c001b359:	78 19                	js     c001b374 <picEOI(int)+0x60>
c001b35b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b362:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b367:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b36b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b370:	ee                   	out    dx,al
c001b371:	eb 3d                	jmp    c001b3b0 <picEOI(int)+0x9c>
c001b373:	90                   	nop
c001b374:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b379:	7e 19                	jle    c001b394 <picEOI(int)+0x80>
c001b37b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b382:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b387:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b38b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b390:	ee                   	out    dx,al
c001b391:	8d 76 00             	lea    esi,[esi+0x0]
c001b394:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b39b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b3a0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b3a4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b3a9:	ee                   	out    dx,al
c001b3aa:	eb 04                	jmp    c001b3b0 <picEOI(int)+0x9c>
c001b3ac:	90                   	nop
c001b3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	c3                   	ret    

c001b3b4 <RTC::open(int, int, void*)>:
c001b3b4:	31 c0                	xor    eax,eax
c001b3b6:	c3                   	ret    
c001b3b7:	90                   	nop

c001b3b8 <RTC::close(int, int, void*)>:
c001b3b8:	31 c0                	xor    eax,eax
c001b3ba:	c3                   	ret    
c001b3bb:	90                   	nop

c001b3bc <RTC::timeInSecondsUTC()>:
c001b3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3c0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b3c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b3cc:	c3                   	ret    
c001b3cd:	90                   	nop

c001b3ce <RTC::timeInDatetimeUTC()>:
c001b3ce:	53                   	push   ebx
c001b3cf:	83 ec 14             	sub    esp,0x14
c001b3d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3da:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3dc:	50                   	push   eax
c001b3dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b3e0:	83 c4 0c             	add    esp,0xc
c001b3e3:	52                   	push   edx
c001b3e4:	50                   	push   eax
c001b3e5:	53                   	push   ebx
c001b3e6:	e8 5f e2 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b3eb:	89 d8                	mov    eax,ebx
c001b3ed:	83 c4 14             	add    esp,0x14
c001b3f0:	5b                   	pop    ebx
c001b3f1:	c2 04 00             	ret    0x4

c001b3f4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b3f4:	56                   	push   esi
c001b3f5:	53                   	push   ebx
c001b3f6:	83 ec 14             	sub    esp,0x14
c001b3f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3ff:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b402:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b406:	52                   	push   edx
c001b407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40f:	50                   	push   eax
c001b410:	e8 35 e2 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b415:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b419:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b41d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b421:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b425:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b429:	89 f0                	mov    eax,esi
c001b42b:	83 c4 20             	add    esp,0x20
c001b42e:	5b                   	pop    ebx
c001b42f:	5e                   	pop    esi
c001b430:	ff e0                	jmp    eax

c001b432 <RTC::~RTC()>:
c001b432:	83 ec 0c             	sub    esp,0xc
c001b435:	ba 78 5f 02 c0       	mov    edx,0xc0025f78
c001b43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b43e:	89 10                	mov    DWORD PTR [eax],edx
c001b440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b444:	83 ec 0c             	sub    esp,0xc
c001b447:	50                   	push   eax
c001b448:	e8 9f dc fe ff       	call   c00090ec <Clock::~Clock()>
c001b44d:	83 c4 10             	add    esp,0x10
c001b450:	90                   	nop
c001b451:	83 c4 0c             	add    esp,0xc
c001b454:	c3                   	ret    
c001b455:	90                   	nop

c001b456 <RTC::~RTC()>:
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	83 ec 0c             	sub    esp,0xc
c001b45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b460:	e8 cd ff ff ff       	call   c001b432 <RTC::~RTC()>
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	83 ec 08             	sub    esp,0x8
c001b46b:	68 60 01 00 00       	push   0x160
c001b470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b474:	e8 70 1f ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001b479:	83 c4 10             	add    esp,0x10
c001b47c:	83 c4 0c             	add    esp,0xc
c001b47f:	c3                   	ret    

c001b480 <RTC::get_update_in_progress_flag()>:
c001b480:	83 ec 18             	sub    esp,0x18
c001b483:	6a 0a                	push   0xa
c001b485:	e8 f7 da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b48a:	83 c4 1c             	add    esp,0x1c
c001b48d:	0f b6 c0             	movzx  eax,al
c001b490:	c1 e8 07             	shr    eax,0x7
c001b493:	c3                   	ret    

c001b494 <RTC::completeRTCRefresh()>:
c001b494:	55                   	push   ebp
c001b495:	57                   	push   edi
c001b496:	56                   	push   esi
c001b497:	53                   	push   ebx
c001b498:	83 ec 3c             	sub    esp,0x3c
c001b49b:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b4a1:	83 ec 0c             	sub    esp,0xc
c001b4a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b4a8:	e8 d3 ff ff ff       	call   c001b480 <RTC::get_update_in_progress_flag()>
c001b4ad:	83 c4 10             	add    esp,0x10
c001b4b0:	84 c0                	test   al,al
c001b4b2:	74 0e                	je     c001b4c2 <RTC::completeRTCRefresh()+0x2e>
c001b4b4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b4ba:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b4c0:	73 df                	jae    c001b4a1 <RTC::completeRTCRefresh()+0xd>
c001b4c2:	83 ec 0c             	sub    esp,0xc
c001b4c5:	6a 00                	push   0x0
c001b4c7:	e8 b5 da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b4cc:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b4d3:	89 c5                	mov    ebp,eax
c001b4d5:	e8 a7 da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b4da:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b4e1:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b4e5:	e8 97 da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b4ea:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b4f1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b4f5:	e8 87 da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b4fa:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b501:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b505:	e8 77 da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b50a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b511:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b515:	e8 67 da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b51a:	0f b6 c0             	movzx  eax,al
c001b51d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b52a:	83 ec 0c             	sub    esp,0xc
c001b52d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b531:	e8 4a ff ff ff       	call   c001b480 <RTC::get_update_in_progress_flag()>
c001b536:	83 c4 10             	add    esp,0x10
c001b539:	84 c0                	test   al,al
c001b53b:	74 0e                	je     c001b54b <RTC::completeRTCRefresh()+0xb7>
c001b53d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b543:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b549:	73 df                	jae    c001b52a <RTC::completeRTCRefresh()+0x96>
c001b54b:	83 ec 0c             	sub    esp,0xc
c001b54e:	6a 00                	push   0x0
c001b550:	e8 2c da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b555:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b55c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b560:	e8 1c da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b565:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b56c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b570:	e8 0c da ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b575:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b57c:	88 c3                	mov    bl,al
c001b57e:	e8 fe d9 ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b583:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b58a:	89 c6                	mov    esi,eax
c001b58c:	e8 f0 d9 ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b591:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b598:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b59c:	e8 e0 d9 ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b5a1:	89 e9                	mov    ecx,ebp
c001b5a3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b5a7:	0f b6 f8             	movzx  edi,al
c001b5aa:	83 c4 10             	add    esp,0x10
c001b5ad:	0f b6 eb             	movzx  ebp,bl
c001b5b0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b5b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5b9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b5be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b5c2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b5c6:	0f 94 c0             	sete   al
c001b5c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b5cd:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b5d1:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b5d6:	0f 94 c2             	sete   dl
c001b5d9:	21 d0                	and    eax,edx
c001b5db:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b5df:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b5e3:	0f 94 c2             	sete   dl
c001b5e6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b5ea:	21 c2                	and    edx,eax
c001b5ec:	89 f0                	mov    eax,esi
c001b5ee:	0f b6 c0             	movzx  eax,al
c001b5f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5f5:	89 f0                	mov    eax,esi
c001b5f7:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b5fb:	0f 94 c0             	sete   al
c001b5fe:	21 d0                	and    eax,edx
c001b600:	31 d2                	xor    edx,edx
c001b602:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b606:	0f 94 c2             	sete   dl
c001b609:	85 c2                	test   edx,eax
c001b60b:	75 27                	jne    c001b634 <RTC::completeRTCRefresh()+0x1a0>
c001b60d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b611:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b615:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b619:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b61d:	89 f0                	mov    eax,esi
c001b61f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b623:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b627:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b62b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b62f:	e9 f0 fe ff ff       	jmp    c001b524 <RTC::completeRTCRefresh()+0x90>
c001b634:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b638:	75 d3                	jne    c001b60d <RTC::completeRTCRefresh()+0x179>
c001b63a:	83 ec 0c             	sub    esp,0xc
c001b63d:	6a 0b                	push   0xb
c001b63f:	e8 3d d9 ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b644:	83 c4 10             	add    esp,0x10
c001b647:	a8 04                	test   al,0x4
c001b649:	75 7a                	jne    c001b6c5 <RTC::completeRTCRefresh()+0x231>
c001b64b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b64f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b653:	83 e1 0f             	and    ecx,0xf
c001b656:	c1 ea 04             	shr    edx,0x4
c001b659:	83 e6 0f             	and    esi,0xf
c001b65c:	6b d2 0a             	imul   edx,edx,0xa
c001b65f:	c1 ef 04             	shr    edi,0x4
c001b662:	01 d1                	add    ecx,edx
c001b664:	6b ff 0a             	imul   edi,edi,0xa
c001b667:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b66b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b66f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b673:	c1 ea 04             	shr    edx,0x4
c001b676:	83 e1 0f             	and    ecx,0xf
c001b679:	6b d2 0a             	imul   edx,edx,0xa
c001b67c:	01 d1                	add    ecx,edx
c001b67e:	89 ea                	mov    edx,ebp
c001b680:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b684:	c1 ea 04             	shr    edx,0x4
c001b687:	89 d9                	mov    ecx,ebx
c001b689:	83 e2 07             	and    edx,0x7
c001b68c:	83 e1 0f             	and    ecx,0xf
c001b68f:	6b d2 0a             	imul   edx,edx,0xa
c001b692:	83 e3 80             	and    ebx,0xffffff80
c001b695:	01 d1                	add    ecx,edx
c001b697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b69b:	09 cb                	or     ebx,ecx
c001b69d:	c1 ea 04             	shr    edx,0x4
c001b6a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b6a4:	6b d2 0a             	imul   edx,edx,0xa
c001b6a7:	83 e1 0f             	and    ecx,0xf
c001b6aa:	01 d6                	add    esi,edx
c001b6ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6b0:	c1 ea 04             	shr    edx,0x4
c001b6b3:	6b d2 0a             	imul   edx,edx,0xa
c001b6b6:	01 d1                	add    ecx,edx
c001b6b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6bc:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b6c0:	83 e2 0f             	and    edx,0xf
c001b6c3:	01 d7                	add    edi,edx
c001b6c5:	a8 02                	test   al,0x2
c001b6c7:	75 15                	jne    c001b6de <RTC::completeRTCRefresh()+0x24a>
c001b6c9:	f6 c3 80             	test   bl,0x80
c001b6cc:	74 10                	je     c001b6de <RTC::completeRTCRefresh()+0x24a>
c001b6ce:	83 e3 7f             	and    ebx,0x7f
c001b6d1:	b9 18 00 00 00       	mov    ecx,0x18
c001b6d6:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b6d9:	99                   	cdq    
c001b6da:	f7 f9                	idiv   ecx
c001b6dc:	88 d3                	mov    bl,dl
c001b6de:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b6e4:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b6ea:	77 06                	ja     c001b6f2 <RTC::completeRTCRefresh()+0x25e>
c001b6ec:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b6f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b6f7:	31 c9                	xor    ecx,ecx
c001b6f9:	c1 e0 10             	shl    eax,0x10
c001b6fc:	89 cf                	mov    edi,ecx
c001b6fe:	c1 e5 10             	shl    ebp,0x10
c001b701:	31 d2                	xor    edx,edx
c001b703:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b709:	09 c7                	or     edi,eax
c001b70b:	89 f0                	mov    eax,esi
c001b70d:	89 f9                	mov    ecx,edi
c001b70f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b713:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b717:	88 c2                	mov    dl,al
c001b719:	88 d9                	mov    cl,bl
c001b71b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b71f:	0f b7 c2             	movzx  eax,dx
c001b722:	09 e8                	or     eax,ebp
c001b724:	89 c2                	mov    edx,eax
c001b726:	50                   	push   eax
c001b727:	50                   	push   eax
c001b728:	51                   	push   ecx
c001b729:	52                   	push   edx
c001b72a:	e8 0d db fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001b72f:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b733:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b739:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b73f:	83 c4 4c             	add    esp,0x4c
c001b742:	5b                   	pop    ebx
c001b743:	5e                   	pop    esi
c001b744:	5f                   	pop    edi
c001b745:	5d                   	pop    ebp
c001b746:	c3                   	ret    
c001b747:	90                   	nop

c001b748 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b748:	55                   	push   ebp
c001b749:	57                   	push   edi
c001b74a:	56                   	push   esi
c001b74b:	53                   	push   ebx
c001b74c:	83 ec 34             	sub    esp,0x34
c001b74f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b753:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b757:	6a 00                	push   0x0
c001b759:	89 fb                	mov    ebx,edi
c001b75b:	6a 00                	push   0x0
c001b75d:	e8 73 d8 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b762:	5d                   	pop    ebp
c001b763:	58                   	pop    eax
c001b764:	6a 00                	push   0x0
c001b766:	6a 02                	push   0x2
c001b768:	e8 68 d8 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b76d:	31 d2                	xor    edx,edx
c001b76f:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b776:	89 f9                	mov    ecx,edi
c001b778:	89 f8                	mov    eax,edi
c001b77a:	c1 e9 10             	shr    ecx,0x10
c001b77d:	0f b6 c4             	movzx  eax,ah
c001b780:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b784:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b788:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b78c:	b9 64 00 00 00       	mov    ecx,0x64
c001b791:	89 f0                	mov    eax,esi
c001b793:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b797:	89 f0                	mov    eax,esi
c001b799:	0f b6 c4             	movzx  eax,ah
c001b79c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b7a0:	89 f0                	mov    eax,esi
c001b7a2:	c1 e8 10             	shr    eax,0x10
c001b7a5:	f7 f1                	div    ecx
c001b7a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b7ab:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b7af:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7b3:	e8 c9 d7 ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b7b8:	83 c4 10             	add    esp,0x10
c001b7bb:	89 c5                	mov    ebp,eax
c001b7bd:	a8 04                	test   al,0x4
c001b7bf:	75 6e                	jne    c001b82f <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b7c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b7c5:	31 d2                	xor    edx,edx
c001b7c7:	0f b6 c1             	movzx  eax,cl
c001b7ca:	b9 0a 00 00 00       	mov    ecx,0xa
c001b7cf:	f7 f1                	div    ecx
c001b7d1:	c1 e0 04             	shl    eax,0x4
c001b7d4:	09 d0                	or     eax,edx
c001b7d6:	31 d2                	xor    edx,edx
c001b7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b7e1:	f7 f1                	div    ecx
c001b7e3:	c1 e0 04             	shl    eax,0x4
c001b7e6:	09 d0                	or     eax,edx
c001b7e8:	31 d2                	xor    edx,edx
c001b7ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7ee:	0f b6 c3             	movzx  eax,bl
c001b7f1:	f7 f1                	div    ecx
c001b7f3:	c1 e0 04             	shl    eax,0x4
c001b7f6:	09 d0                	or     eax,edx
c001b7f8:	31 d2                	xor    edx,edx
c001b7fa:	89 c3                	mov    ebx,eax
c001b7fc:	89 f0                	mov    eax,esi
c001b7fe:	0f b6 c0             	movzx  eax,al
c001b801:	f7 f1                	div    ecx
c001b803:	c1 e0 04             	shl    eax,0x4
c001b806:	09 d0                	or     eax,edx
c001b808:	31 d2                	xor    edx,edx
c001b80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b80e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b813:	f7 f1                	div    ecx
c001b815:	c1 e0 04             	shl    eax,0x4
c001b818:	09 d0                	or     eax,edx
c001b81a:	31 d2                	xor    edx,edx
c001b81c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b820:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b824:	f7 f1                	div    ecx
c001b826:	c1 e0 04             	shl    eax,0x4
c001b829:	09 d0                	or     eax,edx
c001b82b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b82f:	83 e5 02             	and    ebp,0x2
c001b832:	75 1e                	jne    c001b852 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b834:	0f b6 c3             	movzx  eax,bl
c001b837:	83 f8 0b             	cmp    eax,0xb
c001b83a:	76 10                	jbe    c001b84c <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b83c:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b83f:	88 d3                	mov    bl,dl
c001b841:	84 d2                	test   dl,dl
c001b843:	75 02                	jne    c001b847 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b845:	b3 0c                	mov    bl,0xc
c001b847:	83 cb 80             	or     ebx,0xffffff80
c001b84a:	eb 06                	jmp    c001b852 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b84c:	85 c0                	test   eax,eax
c001b84e:	75 02                	jne    c001b852 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b850:	b3 0c                	mov    bl,0xc
c001b852:	0f b6 db             	movzx  ebx,bl
c001b855:	50                   	push   eax
c001b856:	50                   	push   eax
c001b857:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b85c:	52                   	push   edx
c001b85d:	6a 00                	push   0x0
c001b85f:	e8 71 d7 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b864:	5a                   	pop    edx
c001b865:	59                   	pop    ecx
c001b866:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b86b:	50                   	push   eax
c001b86c:	6a 02                	push   0x2
c001b86e:	e8 62 d7 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b873:	5e                   	pop    esi
c001b874:	5f                   	pop    edi
c001b875:	53                   	push   ebx
c001b876:	6a 04                	push   0x4
c001b878:	e8 58 d7 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b87d:	5d                   	pop    ebp
c001b87e:	58                   	pop    eax
c001b87f:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b884:	52                   	push   edx
c001b885:	6a 07                	push   0x7
c001b887:	e8 49 d7 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b88c:	58                   	pop    eax
c001b88d:	5a                   	pop    edx
c001b88e:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b893:	50                   	push   eax
c001b894:	6a 08                	push   0x8
c001b896:	e8 3a d7 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b89b:	59                   	pop    ecx
c001b89c:	5b                   	pop    ebx
c001b89d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b8a2:	55                   	push   ebp
c001b8a3:	6a 09                	push   0x9
c001b8a5:	e8 2b d7 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8aa:	5e                   	pop    esi
c001b8ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b8af:	e8 e0 fb ff ff       	call   c001b494 <RTC::completeRTCRefresh()>
c001b8b4:	83 c4 3c             	add    esp,0x3c
c001b8b7:	b0 01                	mov    al,0x1
c001b8b9:	5b                   	pop    ebx
c001b8ba:	5e                   	pop    esi
c001b8bb:	5f                   	pop    edi
c001b8bc:	5d                   	pop    ebp
c001b8bd:	c3                   	ret    

c001b8be <rtcIRQHandler(regs*, void*)>:
c001b8be:	53                   	push   ebx
c001b8bf:	83 ec 14             	sub    esp,0x14
c001b8c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8c6:	6a 0c                	push   0xc
c001b8c8:	e8 b4 d6 ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b8cd:	83 c4 10             	add    esp,0x10
c001b8d0:	a8 80                	test   al,0x80
c001b8d2:	74 24                	je     c001b8f8 <rtcIRQHandler(regs*, void*)+0x3a>
c001b8d4:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b8db:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b8e2:	66 ff 05 78 fb 02 c0 	inc    WORD PTR ds:0xc002fb78
c001b8e9:	75 0d                	jne    c001b8f8 <rtcIRQHandler(regs*, void*)+0x3a>
c001b8eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b8ef:	83 c4 08             	add    esp,0x8
c001b8f2:	5b                   	pop    ebx
c001b8f3:	e9 9c fb ff ff       	jmp    c001b494 <RTC::completeRTCRefresh()>
c001b8f8:	83 c4 08             	add    esp,0x8
c001b8fb:	5b                   	pop    ebx
c001b8fc:	c3                   	ret    
c001b8fd:	90                   	nop

c001b8fe <RTC::RTC()>:
c001b8fe:	83 ec 1c             	sub    esp,0x1c
c001b901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b905:	83 ec 08             	sub    esp,0x8
c001b908:	68 5b 5f 02 c0       	push   0xc0025f5b
c001b90d:	50                   	push   eax
c001b90e:	e8 a3 d7 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b913:	83 c4 10             	add    esp,0x10
c001b916:	ba 78 5f 02 c0       	mov    edx,0xc0025f78
c001b91b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b91f:	89 10                	mov    DWORD PTR [eax],edx
c001b921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b925:	83 ec 0c             	sub    esp,0xc
c001b928:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b92c:	6a 01                	push   0x1
c001b92e:	68 be b8 01 c0       	push   0xc001b8be
c001b933:	6a 08                	push   0x8
c001b935:	50                   	push   eax
c001b936:	e8 c5 e0 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b93b:	83 c4 20             	add    esp,0x20
c001b93e:	89 c2                	mov    edx,eax
c001b940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b944:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b94a:	fa                   	cli    
c001b94b:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001b950:	83 c0 01             	add    eax,0x1
c001b953:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c001b958:	83 ec 0c             	sub    esp,0xc
c001b95b:	6a 0b                	push   0xb
c001b95d:	e8 1f d6 ff ff       	call   c0018f81 <x86ReadCMOS(unsigned char)>
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b969:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b96d:	83 c8 10             	or     eax,0x10
c001b970:	0f b6 c0             	movzx  eax,al
c001b973:	83 ec 08             	sub    esp,0x8
c001b976:	50                   	push   eax
c001b977:	6a 0b                	push   0xb
c001b979:	e8 57 d6 ff ff       	call   c0018fd5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	83 ec 0c             	sub    esp,0xc
c001b984:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b988:	e8 07 fb ff ff       	call   c001b494 <RTC::completeRTCRefresh()>
c001b98d:	83 c4 10             	add    esp,0x10
c001b990:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001b998:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001b99d:	85 c0                	test   eax,eax
c001b99f:	75 01                	jne    c001b9a2 <RTC::RTC()+0xa4>
c001b9a1:	fb                   	sti    
c001b9a2:	90                   	nop
c001b9a3:	83 c4 1c             	add    esp,0x1c
c001b9a6:	c3                   	ret    
c001b9a7:	90                   	nop

c001b9a8 <HalConsoleScroll(int, int)>:
c001b9a8:	83 ec 10             	sub    esp,0x10
c001b9ab:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b9b3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b9bb:	90                   	nop
c001b9bc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b9c1:	0f 8f e1 00 00 00    	jg     c001baa8 <HalConsoleScroll(int, int)+0x100>
c001b9c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9cf:	90                   	nop
c001b9d0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b9d8:	0f 8f be 00 00 00    	jg     c001ba9c <HalConsoleScroll(int, int)+0xf4>
c001b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9e2:	89 d0                	mov    eax,edx
c001b9e4:	c1 e0 02             	shl    eax,0x2
c001b9e7:	01 d0                	add    eax,edx
c001b9e9:	c1 e0 05             	shl    eax,0x5
c001b9ec:	89 c2                	mov    edx,eax
c001b9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9f2:	01 d0                	add    eax,edx
c001b9f4:	89 c2                	mov    edx,eax
c001b9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9fa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b9fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba01:	89 d0                	mov    eax,edx
c001ba03:	c1 e0 02             	shl    eax,0x2
c001ba06:	01 d0                	add    eax,edx
c001ba08:	c1 e0 05             	shl    eax,0x5
c001ba0b:	89 c2                	mov    edx,eax
c001ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba11:	01 d0                	add    eax,edx
c001ba13:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001ba19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba1d:	01 c2                	add    edx,eax
c001ba1f:	8a 01                	mov    al,BYTE PTR [ecx]
c001ba21:	88 02                	mov    BYTE PTR [edx],al
c001ba23:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001ba28:	75 66                	jne    c001ba90 <HalConsoleScroll(int, int)+0xe8>
c001ba2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba2e:	83 e0 01             	and    eax,0x1
c001ba31:	74 39                	je     c001ba6c <HalConsoleScroll(int, int)+0xc4>
c001ba33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba37:	83 e0 0f             	and    eax,0xf
c001ba3a:	88 c2                	mov    dl,al
c001ba3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba40:	c1 e0 04             	shl    eax,0x4
c001ba43:	09 d0                	or     eax,edx
c001ba45:	88 c1                	mov    cl,al
c001ba47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba4b:	89 d0                	mov    eax,edx
c001ba4d:	c1 e0 02             	shl    eax,0x2
c001ba50:	01 d0                	add    eax,edx
c001ba52:	c1 e0 05             	shl    eax,0x5
c001ba55:	89 c2                	mov    edx,eax
c001ba57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba5b:	01 d0                	add    eax,edx
c001ba5d:	89 c2                	mov    edx,eax
c001ba5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba63:	01 d0                	add    eax,edx
c001ba65:	88 ca                	mov    dl,cl
c001ba67:	88 10                	mov    BYTE PTR [eax],dl
c001ba69:	eb 25                	jmp    c001ba90 <HalConsoleScroll(int, int)+0xe8>
c001ba6b:	90                   	nop
c001ba6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba70:	89 d0                	mov    eax,edx
c001ba72:	c1 e0 02             	shl    eax,0x2
c001ba75:	01 d0                	add    eax,edx
c001ba77:	c1 e0 05             	shl    eax,0x5
c001ba7a:	89 c2                	mov    edx,eax
c001ba7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba80:	01 d0                	add    eax,edx
c001ba82:	89 c2                	mov    edx,eax
c001ba84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba88:	01 d0                	add    eax,edx
c001ba8a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001ba8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba90:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001ba95:	e9 36 ff ff ff       	jmp    c001b9d0 <HalConsoleScroll(int, int)+0x28>
c001ba9a:	66 90                	xchg   ax,ax
c001ba9c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001baa1:	e9 16 ff ff ff       	jmp    c001b9bc <HalConsoleScroll(int, int)+0x14>
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	90                   	nop
c001baa9:	83 c4 10             	add    esp,0x10
c001baac:	c3                   	ret    
c001baad:	8d 76 00             	lea    esi,[esi+0x0]

c001bab0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001bab0:	83 ec 14             	sub    esp,0x14
c001bab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bab7:	88 04 24             	mov    BYTE PTR [esp],al
c001baba:	8a 04 24             	mov    al,BYTE PTR [esp]
c001babd:	0f b6 c0             	movzx  eax,al
c001bac0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bac4:	89 d1                	mov    ecx,edx
c001bac6:	83 e1 0f             	and    ecx,0xf
c001bac9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bacd:	c1 e2 04             	shl    edx,0x4
c001bad0:	0f b6 d2             	movzx  edx,dl
c001bad3:	09 ca                	or     edx,ecx
c001bad5:	c1 e2 08             	shl    edx,0x8
c001bad8:	09 d0                	or     eax,edx
c001bada:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001badf:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001bae7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001baeb:	89 d0                	mov    eax,edx
c001baed:	c1 e0 02             	shl    eax,0x2
c001baf0:	01 d0                	add    eax,edx
c001baf2:	c1 e0 04             	shl    eax,0x4
c001baf5:	89 c2                	mov    edx,eax
c001baf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bafb:	01 d0                	add    eax,edx
c001bafd:	01 c0                	add    eax,eax
c001baff:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001bb03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb07:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001bb0c:	66 89 02             	mov    WORD PTR [edx],ax
c001bb0f:	90                   	nop
c001bb10:	83 c4 14             	add    esp,0x14
c001bb13:	c3                   	ret    

c001bb14 <HalConsoleCursorUpdate(int, int)>:
c001bb14:	83 ec 20             	sub    esp,0x20
c001bb17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb1b:	89 c2                	mov    edx,eax
c001bb1d:	c1 e2 02             	shl    edx,0x2
c001bb20:	01 d0                	add    eax,edx
c001bb22:	c1 e0 04             	shl    eax,0x4
c001bb25:	89 c2                	mov    edx,eax
c001bb27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb2b:	01 d0                	add    eax,edx
c001bb2d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001bb32:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001bb39:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001bb3e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bb42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb46:	ee                   	out    dx,al
c001bb47:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bb4c:	0f b6 c0             	movzx  eax,al
c001bb4f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001bb56:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001bb5a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bb5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb62:	ee                   	out    dx,al
c001bb63:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001bb6a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001bb6f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bb73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb77:	ee                   	out    dx,al
c001bb78:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001bb7d:	c1 e8 08             	shr    eax,0x8
c001bb80:	0f b6 c0             	movzx  eax,al
c001bb83:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001bb8a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bb8e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bb92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb96:	ee                   	out    dx,al
c001bb97:	90                   	nop
c001bb98:	83 c4 20             	add    esp,0x20
c001bb9b:	c3                   	ret    

c001bb9c <FAT::getName()>:
c001bb9c:	b8 ac 5f 02 c0       	mov    eax,0xc0025fac
c001bba1:	c3                   	ret    
c001bba2:	66 90                	xchg   ax,ax

c001bba4 <FAT::tell(void*, unsigned long long*)>:
c001bba4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bba9:	75 09                	jne    c001bbb4 <FAT::tell(void*, unsigned long long*)+0x10>
c001bbab:	b8 04 00 00 00       	mov    eax,0x4
c001bbb0:	c3                   	ret    
c001bbb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bbb9:	75 09                	jne    c001bbc4 <FAT::tell(void*, unsigned long long*)+0x20>
c001bbbb:	b8 04 00 00 00       	mov    eax,0x4
c001bbc0:	c3                   	ret    
c001bbc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbc8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bbcb:	ba 00 00 00 00       	mov    edx,0x0
c001bbd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bbd4:	89 01                	mov    DWORD PTR [ecx],eax
c001bbd6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bbd9:	b8 00 00 00 00       	mov    eax,0x0
c001bbde:	c3                   	ret    
c001bbdf:	90                   	nop

c001bbe0 <FAT::stat(void*, unsigned long long*)>:
c001bbe0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bbe5:	75 09                	jne    c001bbf0 <FAT::stat(void*, unsigned long long*)+0x10>
c001bbe7:	b8 04 00 00 00       	mov    eax,0x4
c001bbec:	c3                   	ret    
c001bbed:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bbf5:	75 09                	jne    c001bc00 <FAT::stat(void*, unsigned long long*)+0x20>
c001bbf7:	b8 04 00 00 00       	mov    eax,0x4
c001bbfc:	c3                   	ret    
c001bbfd:	8d 76 00             	lea    esi,[esi+0x0]
c001bc00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bc07:	ba 00 00 00 00       	mov    edx,0x0
c001bc0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc10:	89 01                	mov    DWORD PTR [ecx],eax
c001bc12:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bc15:	b8 00 00 00 00       	mov    eax,0x0
c001bc1a:	c3                   	ret    
c001bc1b:	90                   	nop

c001bc1c <FAT::~FAT()>:
c001bc1c:	83 ec 0c             	sub    esp,0xc
c001bc1f:	ba f8 5f 02 c0       	mov    edx,0xc0025ff8
c001bc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc28:	89 10                	mov    DWORD PTR [eax],edx
c001bc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	50                   	push   eax
c001bc32:	e8 b5 c1 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001bc37:	83 c4 10             	add    esp,0x10
c001bc3a:	90                   	nop
c001bc3b:	83 c4 0c             	add    esp,0xc
c001bc3e:	c3                   	ret    
c001bc3f:	90                   	nop

c001bc40 <FAT::~FAT()>:
c001bc40:	83 ec 0c             	sub    esp,0xc
c001bc43:	83 ec 0c             	sub    esp,0xc
c001bc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc4a:	e8 cd ff ff ff       	call   c001bc1c <FAT::~FAT()>
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	83 ec 08             	sub    esp,0x8
c001bc55:	6a 08                	push   0x8
c001bc57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc5b:	e8 89 17 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001bc60:	83 c4 10             	add    esp,0x10
c001bc63:	83 c4 0c             	add    esp,0xc
c001bc66:	c3                   	ret    
c001bc67:	90                   	nop

c001bc68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bc68:	83 ec 1c             	sub    esp,0x1c
c001bc6b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001bc72:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001bc77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc7b:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bc82:	83 f8 ff             	cmp    eax,0xffffffff
c001bc85:	75 35                	jne    c001bcbc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001bc87:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bc8b:	88 c2                	mov    dl,al
c001bc8d:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bc92:	01 d0                	add    eax,edx
c001bc94:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bc98:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001bc9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bca2:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001bca9:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bcae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcb2:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001bcb9:	eb 19                	jmp    c001bcd4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bcbb:	90                   	nop
c001bcbc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bcc0:	88 c2                	mov    dl,al
c001bcc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bcc6:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bccd:	01 d0                	add    eax,edx
c001bccf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bcd3:	90                   	nop
c001bcd4:	83 ec 04             	sub    esp,0x4
c001bcd7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bcdb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bcdf:	8d 44 24 15          	lea    eax,[esp+0x15]
c001bce3:	50                   	push   eax
c001bce4:	e8 cf 94 fe ff       	call   c00051b8 <f_getlabel>
c001bce9:	83 c4 10             	add    esp,0x10
c001bcec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcf0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bcf5:	75 09                	jne    c001bd00 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bcf7:	b8 00 00 00 00       	mov    eax,0x0
c001bcfc:	eb 0a                	jmp    c001bd08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bcfe:	66 90                	xchg   ax,ax
c001bd00:	b8 01 00 00 00       	mov    eax,0x1
c001bd05:	8d 76 00             	lea    esi,[esi+0x0]
c001bd08:	83 c4 1c             	add    esp,0x1c
c001bd0b:	c3                   	ret    

c001bd0c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bd0c:	57                   	push   edi
c001bd0d:	83 ec 58             	sub    esp,0x58
c001bd10:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bd18:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bd1c:	b8 00 00 00 00       	mov    eax,0x0
c001bd21:	b9 0f 00 00 00       	mov    ecx,0xf
c001bd26:	fc                   	cld    
c001bd27:	89 d7                	mov    edi,edx
c001bd29:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bd2b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bd2f:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bd36:	83 f8 ff             	cmp    eax,0xffffffff
c001bd39:	75 35                	jne    c001bd70 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001bd3b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bd3f:	88 c2                	mov    dl,al
c001bd41:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bd46:	01 d0                	add    eax,edx
c001bd48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bd4c:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001bd52:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bd56:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001bd5d:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bd62:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001bd66:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001bd6d:	eb 19                	jmp    c001bd88 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001bd6f:	90                   	nop
c001bd70:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bd74:	88 c2                	mov    dl,al
c001bd76:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bd7a:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bd81:	01 d0                	add    eax,edx
c001bd83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bd87:	90                   	nop
c001bd88:	83 ec 08             	sub    esp,0x8
c001bd8b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001bd8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd93:	50                   	push   eax
c001bd94:	e8 a7 4a fe ff       	call   c0000840 <strcat>
c001bd99:	83 c4 10             	add    esp,0x10
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bda3:	50                   	push   eax
c001bda4:	e8 60 95 fe ff       	call   c0005309 <f_setlabel>
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bdb0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001bdb5:	75 09                	jne    c001bdc0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001bdb7:	b8 00 00 00 00       	mov    eax,0x0
c001bdbc:	eb 0a                	jmp    c001bdc8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001bdbe:	66 90                	xchg   ax,ax
c001bdc0:	b8 01 00 00 00       	mov    eax,0x1
c001bdc5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc8:	83 c4 58             	add    esp,0x58
c001bdcb:	5f                   	pop    edi
c001bdcc:	c3                   	ret    
c001bdcd:	90                   	nop
c001bdce:	66 90                	xchg   ax,ax

c001bdd0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001bdd0:	83 ec 2c             	sub    esp,0x2c
c001bdd3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bddb:	83 ec 08             	sub    esp,0x8
c001bdde:	68 d0 5f 02 c0       	push   0xc0025fd0
c001bde3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bde7:	e8 64 49 fe ff       	call   c0000750 <strcmp>
c001bdec:	83 c4 10             	add    esp,0x10
c001bdef:	85 c0                	test   eax,eax
c001bdf1:	0f 94 c0             	sete   al
c001bdf4:	0f b6 c0             	movzx  eax,al
c001bdf7:	85 c0                	test   eax,eax
c001bdf9:	74 0d                	je     c001be08 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001bdfb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001be03:	e9 c0 00 00 00       	jmp    c001bec8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be08:	83 ec 08             	sub    esp,0x8
c001be0b:	68 c2 5f 02 c0       	push   0xc0025fc2
c001be10:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be14:	e8 37 49 fe ff       	call   c0000750 <strcmp>
c001be19:	83 c4 10             	add    esp,0x10
c001be1c:	85 c0                	test   eax,eax
c001be1e:	0f 94 c0             	sete   al
c001be21:	0f b6 c0             	movzx  eax,al
c001be24:	85 c0                	test   eax,eax
c001be26:	74 10                	je     c001be38 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001be28:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001be30:	e9 93 00 00 00       	jmp    c001bec8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be35:	8d 76 00             	lea    esi,[esi+0x0]
c001be38:	83 ec 08             	sub    esp,0x8
c001be3b:	68 c8 5f 02 c0       	push   0xc0025fc8
c001be40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be44:	e8 07 49 fe ff       	call   c0000750 <strcmp>
c001be49:	83 c4 10             	add    esp,0x10
c001be4c:	85 c0                	test   eax,eax
c001be4e:	0f 94 c0             	sete   al
c001be51:	0f b6 c0             	movzx  eax,al
c001be54:	85 c0                	test   eax,eax
c001be56:	74 0c                	je     c001be64 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001be58:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001be60:	eb 66                	jmp    c001bec8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be62:	66 90                	xchg   ax,ax
c001be64:	83 ec 08             	sub    esp,0x8
c001be67:	68 bc 2b 02 c0       	push   0xc0022bbc
c001be6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be70:	e8 db 48 fe ff       	call   c0000750 <strcmp>
c001be75:	83 c4 10             	add    esp,0x10
c001be78:	85 c0                	test   eax,eax
c001be7a:	0f 94 c0             	sete   al
c001be7d:	0f b6 c0             	movzx  eax,al
c001be80:	85 c0                	test   eax,eax
c001be82:	74 0c                	je     c001be90 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001be84:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001be8c:	eb 3a                	jmp    c001bec8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be8e:	66 90                	xchg   ax,ax
c001be90:	83 ec 08             	sub    esp,0x8
c001be93:	68 ce 5f 02 c0       	push   0xc0025fce
c001be98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be9c:	e8 af 48 fe ff       	call   c0000750 <strcmp>
c001bea1:	83 c4 10             	add    esp,0x10
c001bea4:	85 c0                	test   eax,eax
c001bea6:	0f 94 c0             	sete   al
c001bea9:	0f b6 c0             	movzx  eax,al
c001beac:	85 c0                	test   eax,eax
c001beae:	74 0c                	je     c001bebc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001beb0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001beb8:	eb 0e                	jmp    c001bec8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001beba:	66 90                	xchg   ax,ax
c001bebc:	b8 08 00 00 00       	mov    eax,0x8
c001bec1:	e9 ea 00 00 00       	jmp    c001bfb0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bec6:	66 90                	xchg   ax,ax
c001bec8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001becf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bed4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bed8:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bedf:	83 f8 ff             	cmp    eax,0xffffffff
c001bee2:	75 34                	jne    c001bf18 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bee4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bee8:	88 c2                	mov    dl,al
c001beea:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001beef:	01 d0                	add    eax,edx
c001bef1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bef5:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001befb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001beff:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001bf06:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bf0b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf0f:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001bf16:	eb 18                	jmp    c001bf30 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bf18:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bf1c:	88 c2                	mov    dl,al
c001bf1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf22:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bf29:	01 d0                	add    eax,edx
c001bf2b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bf2f:	90                   	nop
c001bf30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf34:	88 04 24             	mov    BYTE PTR [esp],al
c001bf37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bf3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf47:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bf4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf54:	83 ec 0c             	sub    esp,0xc
c001bf57:	68 00 20 00 00       	push   0x2000
c001bf5c:	e8 fe 3d ff ff       	call   c000fd5f <malloc>
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf68:	68 00 20 00 00       	push   0x2000
c001bf6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf71:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf75:	50                   	push   eax
c001bf76:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bf7a:	50                   	push   eax
c001bf7b:	e8 86 96 fe ff       	call   c0005606 <f_mkfs>
c001bf80:	83 c4 10             	add    esp,0x10
c001bf83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf87:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf8c:	75 0a                	jne    c001bf98 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bf8e:	b8 00 00 00 00       	mov    eax,0x0
c001bf93:	eb 1b                	jmp    c001bfb0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bf95:	8d 76 00             	lea    esi,[esi+0x0]
c001bf98:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bf9d:	75 09                	jne    c001bfa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bf9f:	b8 09 00 00 00       	mov    eax,0x9
c001bfa4:	eb 0a                	jmp    c001bfb0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bfa6:	66 90                	xchg   ax,ax
c001bfa8:	b8 01 00 00 00       	mov    eax,0x1
c001bfad:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb0:	83 c4 2c             	add    esp,0x2c
c001bfb3:	c3                   	ret    

c001bfb4 <FAT::tryMount(LogicalDisk*, int)>:
c001bfb4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001bfba:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bfbf:	83 f8 14             	cmp    eax,0x14
c001bfc2:	75 18                	jne    c001bfdc <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bfc4:	83 ec 0c             	sub    esp,0xc
c001bfc7:	68 d4 5f 02 c0       	push   0xc0025fd4
c001bfcc:	e8 9d 40 ff ff       	call   c001006e <KePanic(char const*)>
c001bfd1:	83 c4 10             	add    esp,0x10
c001bfd4:	b0 00                	mov    al,0x0
c001bfd6:	e9 ed 01 00 00       	jmp    c001c1c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bfdb:	90                   	nop
c001bfdc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bfe3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bfe9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bfef:	3d 00 02 00 00       	cmp    eax,0x200
c001bff4:	74 0a                	je     c001c000 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001bff6:	b0 00                	mov    al,0x0
c001bff8:	e9 cb 01 00 00       	jmp    c001c1c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bffd:	8d 76 00             	lea    esi,[esi+0x0]
c001c000:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001c008:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c00f:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001c016:	83 f8 ff             	cmp    eax,0xffffffff
c001c019:	74 09                	je     c001c024 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001c01b:	b0 01                	mov    al,0x1
c001c01d:	e9 a6 01 00 00       	jmp    c001c1c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c022:	66 90                	xchg   ax,ax
c001c024:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001c02e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001c036:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001c03d:	88 c2                	mov    dl,al
c001c03f:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001c044:	01 d0                	add    eax,edx
c001c046:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001c04d:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001c053:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c05a:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001c061:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001c066:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001c06d:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001c074:	83 ec 0c             	sub    esp,0xc
c001c077:	68 34 02 00 00       	push   0x234
c001c07c:	e8 de 3c ff ff       	call   c000fd5f <malloc>
c001c081:	83 c4 10             	add    esp,0x10
c001c084:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c08b:	83 ec 04             	sub    esp,0x4
c001c08e:	6a 00                	push   0x0
c001c090:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c097:	50                   	push   eax
c001c098:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c09f:	e8 3d 7d fe ff       	call   c0003de1 <f_mount>
c001c0a4:	83 c4 10             	add    esp,0x10
c001c0a7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c0ae:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c0b6:	74 1c                	je     c001c0d4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c0b8:	83 ec 0c             	sub    esp,0xc
c001c0bb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c0c2:	e8 b8 3c ff ff       	call   c000fd7f <rfree>
c001c0c7:	83 c4 10             	add    esp,0x10
c001c0ca:	b0 00                	mov    al,0x0
c001c0cc:	e9 f7 00 00 00       	jmp    c001c1c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0d4:	83 ec 04             	sub    esp,0x4
c001c0d7:	68 00 01 00 00       	push   0x100
c001c0dc:	6a 00                	push   0x0
c001c0de:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c0e5:	50                   	push   eax
c001c0e6:	e8 05 44 fe ff       	call   c00004f0 <memset>
c001c0eb:	83 c4 10             	add    esp,0x10
c001c0ee:	83 ec 08             	sub    esp,0x8
c001c0f1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c0f8:	50                   	push   eax
c001c0f9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c100:	50                   	push   eax
c001c101:	e8 3a 47 fe ff       	call   c0000840 <strcat>
c001c106:	83 c4 10             	add    esp,0x10
c001c109:	83 ec 08             	sub    esp,0x8
c001c10c:	68 e2 5f 02 c0       	push   0xc0025fe2
c001c111:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c118:	50                   	push   eax
c001c119:	e8 22 47 fe ff       	call   c0000840 <strcat>
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	83 ec 04             	sub    esp,0x4
c001c124:	6a 01                	push   0x1
c001c126:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c12d:	50                   	push   eax
c001c12e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c132:	50                   	push   eax
c001c133:	e8 0b 7d fe ff       	call   c0003e43 <f_open>
c001c138:	83 c4 10             	add    esp,0x10
c001c13b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c142:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c149:	85 c0                	test   eax,eax
c001c14b:	74 0b                	je     c001c158 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c14d:	78 31                	js     c001c180 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c14f:	83 e8 04             	sub    eax,0x4
c001c152:	83 f8 01             	cmp    eax,0x1
c001c155:	77 29                	ja     c001c180 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c157:	90                   	nop
c001c158:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c160:	83 ec 0c             	sub    esp,0xc
c001c163:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c167:	50                   	push   eax
c001c168:	e8 a5 84 fe ff       	call   c0004612 <f_close>
c001c16d:	83 c4 10             	add    esp,0x10
c001c170:	90                   	nop
c001c171:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c179:	85 c0                	test   eax,eax
c001c17b:	74 43                	je     c001c1c0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c17d:	eb 31                	jmp    c001c1b0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c17f:	90                   	nop
c001c180:	83 ec 0c             	sub    esp,0xc
c001c183:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c18a:	e8 f0 3b ff ff       	call   c000fd7f <rfree>
c001c18f:	83 c4 10             	add    esp,0x10
c001c192:	83 ec 04             	sub    esp,0x4
c001c195:	6a 00                	push   0x0
c001c197:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c19e:	50                   	push   eax
c001c19f:	6a 00                	push   0x0
c001c1a1:	e8 3b 7c fe ff       	call   c0003de1 <f_mount>
c001c1a6:	83 c4 10             	add    esp,0x10
c001c1a9:	b0 00                	mov    al,0x0
c001c1ab:	eb 1b                	jmp    c001c1c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c1b0:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001c1b5:	83 c0 01             	add    eax,0x1
c001c1b8:	a3 80 fb 02 c0       	mov    ds:0xc002fb80,eax
c001c1bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c1c7:	90                   	nop
c001c1c8:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c1ce:	c3                   	ret    
c001c1cf:	90                   	nop

c001c1d0 <FAT::allocateSwapfile(char const*, int)>:
c001c1d0:	55                   	push   ebp
c001c1d1:	57                   	push   edi
c001c1d2:	56                   	push   esi
c001c1d3:	53                   	push   ebx
c001c1d4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c1da:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c1e5:	83 ec 0c             	sub    esp,0xc
c001c1e8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c1ef:	e8 6b 3b ff ff       	call   c000fd5f <malloc>
c001c1f4:	83 c4 10             	add    esp,0x10
c001c1f7:	89 c7                	mov    edi,eax
c001c1f9:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001c1fe:	83 ec 04             	sub    esp,0x4
c001c201:	50                   	push   eax
c001c202:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c209:	57                   	push   edi
c001c20a:	e8 7b bf fe ff       	call   c000818a <File::File(char const*, Process*)>
c001c20f:	83 c4 10             	add    esp,0x10
c001c212:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c219:	83 ec 04             	sub    esp,0x4
c001c21c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c220:	50                   	push   eax
c001c221:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c225:	50                   	push   eax
c001c226:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c22d:	e8 78 c2 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001c232:	83 c4 10             	add    esp,0x10
c001c235:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c23c:	c1 e0 14             	shl    eax,0x14
c001c23f:	89 c7                	mov    edi,eax
c001c241:	89 c5                	mov    ebp,eax
c001c243:	c1 fd 1f             	sar    ebp,0x1f
c001c246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c24e:	89 f9                	mov    ecx,edi
c001c250:	31 c1                	xor    ecx,eax
c001c252:	89 cb                	mov    ebx,ecx
c001c254:	89 e9                	mov    ecx,ebp
c001c256:	31 d1                	xor    ecx,edx
c001c258:	89 ce                	mov    esi,ecx
c001c25a:	89 f0                	mov    eax,esi
c001c25c:	09 d8                	or     eax,ebx
c001c25e:	0f 84 9c 00 00 00    	je     c001c300 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c264:	83 ec 0c             	sub    esp,0xc
c001c267:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c26e:	e8 03 c1 fe ff       	call   c0008376 <File::unlink()>
c001c273:	83 c4 10             	add    esp,0x10
c001c276:	83 ec 08             	sub    esp,0x8
c001c279:	6a 12                	push   0x12
c001c27b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c282:	e8 21 bf fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c287:	83 c4 10             	add    esp,0x10
c001c28a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c291:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c297:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c29e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c2a5:	c1 e0 14             	shl    eax,0x14
c001c2a8:	83 ec 04             	sub    esp,0x4
c001c2ab:	6a 01                	push   0x1
c001c2ad:	50                   	push   eax
c001c2ae:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c2b5:	e8 df 91 fe ff       	call   c0005499 <f_expand>
c001c2ba:	83 c4 10             	add    esp,0x10
c001c2bd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c2c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2c6:	83 c0 10             	add    eax,0x10
c001c2c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2cb:	83 ec 0c             	sub    esp,0xc
c001c2ce:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c2d2:	52                   	push   edx
c001c2d3:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c2d7:	52                   	push   edx
c001c2d8:	6a 00                	push   0x0
c001c2da:	68 00 04 00 00       	push   0x400
c001c2df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c2e6:	ff d0                	call   eax
c001c2e8:	83 c4 20             	add    esp,0x20
c001c2eb:	83 ec 0c             	sub    esp,0xc
c001c2ee:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c2f5:	e8 0c bf fe ff       	call   c0008206 <File::close()>
c001c2fa:	83 c4 10             	add    esp,0x10
c001c2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001c300:	83 ec 08             	sub    esp,0x8
c001c303:	6a 01                	push   0x1
c001c305:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c30c:	e8 97 be fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c31b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c31d:	83 c0 0c             	add    eax,0xc
c001c320:	8b 00                	mov    eax,DWORD PTR [eax]
c001c322:	83 ec 0c             	sub    esp,0xc
c001c325:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c329:	52                   	push   edx
c001c32a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c32e:	52                   	push   edx
c001c32f:	6a 00                	push   0x0
c001c331:	6a 04                	push   0x4
c001c333:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c33a:	ff d0                	call   eax
c001c33c:	83 c4 20             	add    esp,0x20
c001c33f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c346:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c34c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c353:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c35a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c35d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c364:	83 ec 0c             	sub    esp,0xc
c001c367:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c36e:	e8 93 be fe ff       	call   c0008206 <File::close()>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c37d:	ba 00 00 00 00       	mov    edx,0x0
c001c382:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c388:	5b                   	pop    ebx
c001c389:	5e                   	pop    esi
c001c38a:	5f                   	pop    edi
c001c38b:	5d                   	pop    ebp
c001c38c:	c3                   	ret    
c001c38d:	90                   	nop
c001c38e:	66 90                	xchg   ax,ax

c001c390 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c390:	57                   	push   edi
c001c391:	56                   	push   esi
c001c392:	53                   	push   ebx
c001c393:	81 ec 50 02 00 00    	sub    esp,0x250
c001c399:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c3a1:	74 0d                	je     c001c3b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c3a3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c3ab:	75 0f                	jne    c001c3bc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c3b0:	b8 04 00 00 00       	mov    eax,0x4
c001c3b5:	e9 3a 01 00 00       	jmp    c001c4f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c3ba:	66 90                	xchg   ax,ax
c001c3bc:	83 ec 08             	sub    esp,0x8
c001c3bf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c3c6:	50                   	push   eax
c001c3c7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c3ce:	e8 0c 85 fe ff       	call   c00048df <f_readdir>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c3dd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c3e4:	83 ec 0c             	sub    esp,0xc
c001c3e7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c3ee:	83 c0 16             	add    eax,0x16
c001c3f1:	50                   	push   eax
c001c3f2:	e8 79 41 fe ff       	call   c0000570 <strlen>
c001c3f7:	83 c4 10             	add    esp,0x10
c001c3fa:	ba 00 00 00 00       	mov    edx,0x0
c001c3ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c403:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c407:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c40e:	0f b6 c0             	movzx  eax,al
c001c411:	83 e0 10             	and    eax,0x10
c001c414:	74 0a                	je     c001c420 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c416:	b8 02 00 00 00       	mov    eax,0x2
c001c41b:	eb 0b                	jmp    c001c428 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c41d:	8d 76 00             	lea    esi,[esi+0x0]
c001c420:	b8 01 00 00 00       	mov    eax,0x1
c001c425:	8d 76 00             	lea    esi,[esi+0x0]
c001c428:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c42c:	83 ec 08             	sub    esp,0x8
c001c42f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c436:	83 c0 16             	add    eax,0x16
c001c439:	50                   	push   eax
c001c43a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c43e:	83 c0 10             	add    eax,0x10
c001c441:	50                   	push   eax
c001c442:	e8 f9 41 fe ff       	call   c0000640 <strcpy>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c451:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c458:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c45c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c463:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c46a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c471:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c478:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c47f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c486:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c48d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c494:	89 c6                	mov    esi,eax
c001c496:	89 d7                	mov    edi,edx
c001c498:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c49a:	89 c8                	mov    eax,ecx
c001c49c:	89 fa                	mov    edx,edi
c001c49e:	89 f3                	mov    ebx,esi
c001c4a0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c4a7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c4ae:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c4b5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c4bc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c4c2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c4c9:	0f be c0             	movsx  eax,al
c001c4cc:	85 c0                	test   eax,eax
c001c4ce:	75 08                	jne    c001c4d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c4d0:	b8 07 00 00 00       	mov    eax,0x7
c001c4d5:	eb 1d                	jmp    c001c4f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c4d7:	90                   	nop
c001c4d8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c4df:	85 c0                	test   eax,eax
c001c4e1:	75 09                	jne    c001c4ec <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c4e3:	b8 00 00 00 00       	mov    eax,0x0
c001c4e8:	eb 0a                	jmp    c001c4f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c4ea:	66 90                	xchg   ax,ax
c001c4ec:	b8 01 00 00 00       	mov    eax,0x1
c001c4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4f4:	81 c4 50 02 00 00    	add    esp,0x250
c001c4fa:	5b                   	pop    ebx
c001c4fb:	5e                   	pop    esi
c001c4fc:	5f                   	pop    edi
c001c4fd:	c3                   	ret    
c001c4fe:	66 90                	xchg   ax,ax

c001c500 <FAT::read(void*, unsigned long, void*, int*)>:
c001c500:	83 ec 1c             	sub    esp,0x1c
c001c503:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c508:	74 0a                	je     c001c514 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c50a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c50f:	75 0b                	jne    c001c51c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c511:	8d 76 00             	lea    esi,[esi+0x0]
c001c514:	b8 04 00 00 00       	mov    eax,0x4
c001c519:	eb 41                	jmp    c001c55c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c51b:	90                   	nop
c001c51c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c520:	50                   	push   eax
c001c521:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c525:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c529:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c52d:	e8 d4 7b fe ff       	call   c0004106 <f_read>
c001c532:	83 c4 10             	add    esp,0x10
c001c535:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c539:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c53d:	89 c2                	mov    edx,eax
c001c53f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c543:	89 10                	mov    DWORD PTR [eax],edx
c001c545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c549:	85 c0                	test   eax,eax
c001c54b:	75 07                	jne    c001c554 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c54d:	b8 00 00 00 00       	mov    eax,0x0
c001c552:	eb 08                	jmp    c001c55c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c554:	b8 01 00 00 00       	mov    eax,0x1
c001c559:	8d 76 00             	lea    esi,[esi+0x0]
c001c55c:	83 c4 1c             	add    esp,0x1c
c001c55f:	c3                   	ret    

c001c560 <FAT::write(void*, unsigned long, void*, int*)>:
c001c560:	83 ec 1c             	sub    esp,0x1c
c001c563:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c568:	74 0a                	je     c001c574 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c56a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c56f:	75 0b                	jne    c001c57c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c571:	8d 76 00             	lea    esi,[esi+0x0]
c001c574:	b8 04 00 00 00       	mov    eax,0x4
c001c579:	eb 41                	jmp    c001c5bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c57b:	90                   	nop
c001c57c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c580:	50                   	push   eax
c001c581:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c585:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c589:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c58d:	e8 73 7d fe ff       	call   c0004305 <f_write>
c001c592:	83 c4 10             	add    esp,0x10
c001c595:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c599:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c59d:	89 c2                	mov    edx,eax
c001c59f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c5a3:	89 10                	mov    DWORD PTR [eax],edx
c001c5a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5a9:	85 c0                	test   eax,eax
c001c5ab:	75 07                	jne    c001c5b4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c5ad:	b8 00 00 00 00       	mov    eax,0x0
c001c5b2:	eb 08                	jmp    c001c5bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c5b4:	b8 01 00 00 00       	mov    eax,0x1
c001c5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5bc:	83 c4 1c             	add    esp,0x1c
c001c5bf:	c3                   	ret    

c001c5c0 <FAT::close(void*)>:
c001c5c0:	83 ec 1c             	sub    esp,0x1c
c001c5c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c5c8:	75 0a                	jne    c001c5d4 <FAT::close(void*)+0x14>
c001c5ca:	b8 04 00 00 00       	mov    eax,0x4
c001c5cf:	eb 3f                	jmp    c001c610 <FAT::close(void*)+0x50>
c001c5d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d4:	83 ec 0c             	sub    esp,0xc
c001c5d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5db:	e8 32 80 fe ff       	call   c0004612 <f_close>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5e7:	83 ec 0c             	sub    esp,0xc
c001c5ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5ee:	e8 7c 37 ff ff       	call   c000fd6f <free>
c001c5f3:	83 c4 10             	add    esp,0x10
c001c5f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5fa:	85 c0                	test   eax,eax
c001c5fc:	75 0a                	jne    c001c608 <FAT::close(void*)+0x48>
c001c5fe:	b8 00 00 00 00       	mov    eax,0x0
c001c603:	eb 0b                	jmp    c001c610 <FAT::close(void*)+0x50>
c001c605:	8d 76 00             	lea    esi,[esi+0x0]
c001c608:	b8 01 00 00 00       	mov    eax,0x1
c001c60d:	8d 76 00             	lea    esi,[esi+0x0]
c001c610:	83 c4 1c             	add    esp,0x1c
c001c613:	c3                   	ret    

c001c614 <FAT::closeDir(void*)>:
c001c614:	83 ec 1c             	sub    esp,0x1c
c001c617:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c61c:	75 0a                	jne    c001c628 <FAT::closeDir(void*)+0x14>
c001c61e:	b8 04 00 00 00       	mov    eax,0x4
c001c623:	eb 3f                	jmp    c001c664 <FAT::closeDir(void*)+0x50>
c001c625:	8d 76 00             	lea    esi,[esi+0x0]
c001c628:	83 ec 0c             	sub    esp,0xc
c001c62b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c62f:	e8 89 82 fe ff       	call   c00048bd <f_closedir>
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c63b:	83 ec 0c             	sub    esp,0xc
c001c63e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c642:	e8 28 37 ff ff       	call   c000fd6f <free>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c64e:	85 c0                	test   eax,eax
c001c650:	75 0a                	jne    c001c65c <FAT::closeDir(void*)+0x48>
c001c652:	b8 00 00 00 00       	mov    eax,0x0
c001c657:	eb 0b                	jmp    c001c664 <FAT::closeDir(void*)+0x50>
c001c659:	8d 76 00             	lea    esi,[esi+0x0]
c001c65c:	b8 01 00 00 00       	mov    eax,0x1
c001c661:	8d 76 00             	lea    esi,[esi+0x0]
c001c664:	83 c4 1c             	add    esp,0x1c
c001c667:	c3                   	ret    

c001c668 <FAT::truncate(void*, unsigned long long)>:
c001c668:	83 ec 2c             	sub    esp,0x2c
c001c66b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c66f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c673:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c677:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c67b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c680:	75 0a                	jne    c001c68c <FAT::truncate(void*, unsigned long long)+0x24>
c001c682:	b8 04 00 00 00       	mov    eax,0x4
c001c687:	eb 47                	jmp    c001c6d0 <FAT::truncate(void*, unsigned long long)+0x68>
c001c689:	8d 76 00             	lea    esi,[esi+0x0]
c001c68c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c690:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c693:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c697:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c69f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6a3:	83 ec 08             	sub    esp,0x8
c001c6a6:	50                   	push   eax
c001c6a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c6ab:	e8 91 7f fe ff       	call   c0004641 <f_lseek>
c001c6b0:	83 c4 10             	add    esp,0x10
c001c6b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c6bb:	85 c0                	test   eax,eax
c001c6bd:	75 09                	jne    c001c6c8 <FAT::truncate(void*, unsigned long long)+0x60>
c001c6bf:	b8 00 00 00 00       	mov    eax,0x0
c001c6c4:	eb 0a                	jmp    c001c6d0 <FAT::truncate(void*, unsigned long long)+0x68>
c001c6c6:	66 90                	xchg   ax,ax
c001c6c8:	b8 01 00 00 00       	mov    eax,0x1
c001c6cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6d0:	83 c4 2c             	add    esp,0x2c
c001c6d3:	c3                   	ret    

c001c6d4 <FAT::seek(void*, unsigned long long)>:
c001c6d4:	83 ec 2c             	sub    esp,0x2c
c001c6d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c6e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6e7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c6ec:	75 0a                	jne    c001c6f8 <FAT::seek(void*, unsigned long long)+0x24>
c001c6ee:	b8 04 00 00 00       	mov    eax,0x4
c001c6f3:	eb 33                	jmp    c001c728 <FAT::seek(void*, unsigned long long)+0x54>
c001c6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6fc:	83 ec 08             	sub    esp,0x8
c001c6ff:	50                   	push   eax
c001c700:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c704:	e8 38 7f fe ff       	call   c0004641 <f_lseek>
c001c709:	83 c4 10             	add    esp,0x10
c001c70c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c714:	85 c0                	test   eax,eax
c001c716:	75 08                	jne    c001c720 <FAT::seek(void*, unsigned long long)+0x4c>
c001c718:	b8 00 00 00 00       	mov    eax,0x0
c001c71d:	eb 09                	jmp    c001c728 <FAT::seek(void*, unsigned long long)+0x54>
c001c71f:	90                   	nop
c001c720:	b8 01 00 00 00       	mov    eax,0x1
c001c725:	8d 76 00             	lea    esi,[esi+0x0]
c001c728:	83 c4 2c             	add    esp,0x2c
c001c72b:	c3                   	ret    

c001c72c <fatWrapperReadDisk>:
c001c72c:	53                   	push   ebx
c001c72d:	83 ec 18             	sub    esp,0x18
c001c730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c734:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c738:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c73d:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c744:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c74c:	ba 00 00 00 00       	mov    edx,0x0
c001c751:	83 ec 0c             	sub    esp,0xc
c001c754:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c758:	53                   	push   ebx
c001c759:	52                   	push   edx
c001c75a:	50                   	push   eax
c001c75b:	51                   	push   ecx
c001c75c:	e8 47 e3 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001c761:	83 c4 20             	add    esp,0x20
c001c764:	83 c4 18             	add    esp,0x18
c001c767:	5b                   	pop    ebx
c001c768:	c3                   	ret    
c001c769:	8d 76 00             	lea    esi,[esi+0x0]

c001c76c <fatWrapperWriteDisk>:
c001c76c:	53                   	push   ebx
c001c76d:	83 ec 18             	sub    esp,0x18
c001c770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c774:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c778:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c77d:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c784:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c788:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c78c:	ba 00 00 00 00       	mov    edx,0x0
c001c791:	83 ec 0c             	sub    esp,0xc
c001c794:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c798:	53                   	push   ebx
c001c799:	52                   	push   edx
c001c79a:	50                   	push   eax
c001c79b:	51                   	push   ecx
c001c79c:	e8 73 e3 fe ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c001c7a1:	83 c4 20             	add    esp,0x20
c001c7a4:	83 c4 18             	add    esp,0x18
c001c7a7:	5b                   	pop    ebx
c001c7a8:	c3                   	ret    
c001c7a9:	8d 76 00             	lea    esi,[esi+0x0]

c001c7ac <fatWrapperIoctl>:
c001c7ac:	53                   	push   ebx
c001c7ad:	83 ec 28             	sub    esp,0x28
c001c7b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7b8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c7bc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c7c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c7c5:	83 f8 02             	cmp    eax,0x2
c001c7c8:	75 32                	jne    c001c7fc <fatWrapperIoctl+0x50>
c001c7ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7d2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c7d7:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c7de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c7e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c7ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7ee:	66 89 02             	mov    WORD PTR [edx],ax
c001c7f1:	b8 00 00 00 00       	mov    eax,0x0
c001c7f6:	e9 c5 00 00 00       	jmp    c001c8c0 <fatWrapperIoctl+0x114>
c001c7fb:	90                   	nop
c001c7fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c801:	83 f8 01             	cmp    eax,0x1
c001c804:	75 6a                	jne    c001c870 <fatWrapperIoctl+0xc4>
c001c806:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c80a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c80e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c813:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c81a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c820:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c826:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c82c:	89 c8                	mov    eax,ecx
c001c82e:	89 da                	mov    edx,ebx
c001c830:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c834:	c1 e0 0a             	shl    eax,0xa
c001c837:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c83c:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001c843:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c849:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c84f:	89 cb                	mov    ebx,ecx
c001c851:	c1 fb 1f             	sar    ebx,0x1f
c001c854:	53                   	push   ebx
c001c855:	51                   	push   ecx
c001c856:	52                   	push   edx
c001c857:	50                   	push   eax
c001c858:	e8 57 55 00 00       	call   c0021db4 <__udivdi3>
c001c85d:	83 c4 10             	add    esp,0x10
c001c860:	89 c2                	mov    edx,eax
c001c862:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c866:	89 10                	mov    DWORD PTR [eax],edx
c001c868:	b8 00 00 00 00       	mov    eax,0x0
c001c86d:	eb 51                	jmp    c001c8c0 <fatWrapperIoctl+0x114>
c001c86f:	90                   	nop
c001c870:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c875:	85 c0                	test   eax,eax
c001c877:	75 07                	jne    c001c880 <fatWrapperIoctl+0xd4>
c001c879:	b8 00 00 00 00       	mov    eax,0x0
c001c87e:	eb 40                	jmp    c001c8c0 <fatWrapperIoctl+0x114>
c001c880:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c885:	83 f8 03             	cmp    eax,0x3
c001c888:	75 1a                	jne    c001c8a4 <fatWrapperIoctl+0xf8>
c001c88a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c88e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c892:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c896:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c89c:	b8 00 00 00 00       	mov    eax,0x0
c001c8a1:	eb 1d                	jmp    c001c8c0 <fatWrapperIoctl+0x114>
c001c8a3:	90                   	nop
c001c8a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8a9:	83 f8 04             	cmp    eax,0x4
c001c8ac:	75 0a                	jne    c001c8b8 <fatWrapperIoctl+0x10c>
c001c8ae:	b8 00 00 00 00       	mov    eax,0x0
c001c8b3:	eb 0b                	jmp    c001c8c0 <fatWrapperIoctl+0x114>
c001c8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b8:	b8 04 00 00 00       	mov    eax,0x4
c001c8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c0:	83 c4 28             	add    esp,0x28
c001c8c3:	5b                   	pop    ebx
c001c8c4:	c3                   	ret    
c001c8c5:	90                   	nop
c001c8c6:	66 90                	xchg   ax,ax

c001c8c8 <FAT::FAT()>:
c001c8c8:	83 ec 1c             	sub    esp,0x1c
c001c8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8cf:	83 ec 0c             	sub    esp,0xc
c001c8d2:	50                   	push   eax
c001c8d3:	e8 f0 b4 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001c8d8:	83 c4 10             	add    esp,0x10
c001c8db:	ba f8 5f 02 c0       	mov    edx,0xc0025ff8
c001c8e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8e4:	89 10                	mov    DWORD PTR [eax],edx
c001c8e6:	c7 05 80 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb80,0x0
c001c8f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c8f8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c8fd:	7f 19                	jg     c001c918 <FAT::FAT()+0x50>
c001c8ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c903:	c7 04 85 a0 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0460],0xffffffff
c001c90e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c913:	eb e3                	jmp    c001c8f8 <FAT::FAT()+0x30>
c001c915:	8d 76 00             	lea    esi,[esi+0x0]
c001c918:	90                   	nop
c001c919:	83 c4 1c             	add    esp,0x1c
c001c91c:	c3                   	ret    
c001c91d:	90                   	nop
c001c91e:	66 90                	xchg   ax,ax

c001c920 <FAT::fixFilepath(char*)>:
c001c920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c924:	8a 00                	mov    al,BYTE PTR [eax]
c001c926:	0f be c0             	movsx  eax,al
c001c929:	83 f8 40             	cmp    eax,0x40
c001c92c:	7e 2e                	jle    c001c95c <FAT::fixFilepath(char*)+0x3c>
c001c92e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c932:	8a 00                	mov    al,BYTE PTR [eax]
c001c934:	83 e8 41             	sub    eax,0x41
c001c937:	88 c2                	mov    dl,al
c001c939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c93d:	88 10                	mov    BYTE PTR [eax],dl
c001c93f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c943:	8a 00                	mov    al,BYTE PTR [eax]
c001c945:	0f be c0             	movsx  eax,al
c001c948:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001c94f:	83 c0 30             	add    eax,0x30
c001c952:	88 c2                	mov    dl,al
c001c954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c958:	88 10                	mov    BYTE PTR [eax],dl
c001c95a:	66 90                	xchg   ax,ax
c001c95c:	90                   	nop
c001c95d:	c3                   	ret    
c001c95e:	66 90                	xchg   ax,ax

c001c960 <FAT::open(char const*, void**, FileOpenMode)>:
c001c960:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c966:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c96e:	74 0c                	je     c001c97c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c970:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c978:	75 0e                	jne    c001c988 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c97a:	66 90                	xchg   ax,ax
c001c97c:	b8 04 00 00 00       	mov    eax,0x4
c001c981:	e9 46 01 00 00       	jmp    c001cacc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c986:	66 90                	xchg   ax,ax
c001c988:	83 ec 08             	sub    esp,0x8
c001c98b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c992:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c996:	50                   	push   eax
c001c997:	e8 a4 3c fe ff       	call   c0000640 <strcpy>
c001c99c:	83 c4 10             	add    esp,0x10
c001c99f:	83 ec 08             	sub    esp,0x8
c001c9a2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c9a6:	50                   	push   eax
c001c9a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c9ae:	e8 6d ff ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001c9b3:	83 c4 10             	add    esp,0x10
c001c9b6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c9be:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c9c5:	83 e0 01             	and    eax,0x1
c001c9c8:	74 12                	je     c001c9dc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c9ca:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c9d1:	83 c8 01             	or     eax,0x1
c001c9d4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c9db:	90                   	nop
c001c9dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c9e3:	83 e0 04             	and    eax,0x4
c001c9e6:	74 24                	je     c001ca0c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c9e8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c9ef:	83 c8 30             	or     eax,0x30
c001c9f2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c9f9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca00:	83 c8 02             	or     eax,0x2
c001ca03:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca0a:	66 90                	xchg   ax,ax
c001ca0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca13:	83 e0 02             	and    eax,0x2
c001ca16:	74 14                	je     c001ca2c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001ca18:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca1f:	83 c8 02             	or     eax,0x2
c001ca22:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca29:	8d 76 00             	lea    esi,[esi+0x0]
c001ca2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca33:	83 e0 08             	and    eax,0x8
c001ca36:	74 14                	je     c001ca4c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001ca38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca3f:	83 c8 04             	or     eax,0x4
c001ca42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca49:	8d 76 00             	lea    esi,[esi+0x0]
c001ca4c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca53:	83 e0 10             	and    eax,0x10
c001ca56:	74 14                	je     c001ca6c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001ca58:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca5f:	83 c8 08             	or     eax,0x8
c001ca62:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca69:	8d 76 00             	lea    esi,[esi+0x0]
c001ca6c:	83 ec 0c             	sub    esp,0xc
c001ca6f:	68 28 02 00 00       	push   0x228
c001ca74:	e8 e6 32 ff ff       	call   c000fd5f <malloc>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	89 c2                	mov    edx,eax
c001ca7e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ca85:	89 10                	mov    DWORD PTR [eax],edx
c001ca87:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ca8f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ca96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca98:	83 ec 04             	sub    esp,0x4
c001ca9b:	52                   	push   edx
c001ca9c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001caa0:	52                   	push   edx
c001caa1:	50                   	push   eax
c001caa2:	e8 9c 73 fe ff       	call   c0003e43 <f_open>
c001caa7:	83 c4 10             	add    esp,0x10
c001caaa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001cab1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001cab9:	74 09                	je     c001cac4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001cabb:	b8 01 00 00 00       	mov    eax,0x1
c001cac0:	eb 0a                	jmp    c001cacc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001cac2:	66 90                	xchg   ax,ax
c001cac4:	b8 00 00 00 00       	mov    eax,0x0
c001cac9:	8d 76 00             	lea    esi,[esi+0x0]
c001cacc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cad2:	c3                   	ret    
c001cad3:	90                   	nop

c001cad4 <FAT::openDir(char const*, void**)>:
c001cad4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cada:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cae2:	74 0c                	je     c001caf0 <FAT::openDir(char const*, void**)+0x1c>
c001cae4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001caec:	75 0e                	jne    c001cafc <FAT::openDir(char const*, void**)+0x28>
c001caee:	66 90                	xchg   ax,ax
c001caf0:	b8 04 00 00 00       	mov    eax,0x4
c001caf5:	e9 82 00 00 00       	jmp    c001cb7c <FAT::openDir(char const*, void**)+0xa8>
c001cafa:	66 90                	xchg   ax,ax
c001cafc:	83 ec 08             	sub    esp,0x8
c001caff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb06:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb0a:	50                   	push   eax
c001cb0b:	e8 30 3b fe ff       	call   c0000640 <strcpy>
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	83 ec 08             	sub    esp,0x8
c001cb16:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb1a:	50                   	push   eax
c001cb1b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb22:	e8 f9 fd ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	83 ec 0c             	sub    esp,0xc
c001cb2d:	6a 30                	push   0x30
c001cb2f:	e8 2b 32 ff ff       	call   c000fd5f <malloc>
c001cb34:	83 c4 10             	add    esp,0x10
c001cb37:	89 c2                	mov    edx,eax
c001cb39:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cb40:	89 10                	mov    DWORD PTR [eax],edx
c001cb42:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cb49:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb4b:	83 ec 08             	sub    esp,0x8
c001cb4e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001cb52:	52                   	push   edx
c001cb53:	50                   	push   eax
c001cb54:	e8 99 7c fe ff       	call   c00047f2 <f_opendir>
c001cb59:	83 c4 10             	add    esp,0x10
c001cb5c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cb63:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001cb6b:	74 07                	je     c001cb74 <FAT::openDir(char const*, void**)+0xa0>
c001cb6d:	b8 01 00 00 00       	mov    eax,0x1
c001cb72:	eb 08                	jmp    c001cb7c <FAT::openDir(char const*, void**)+0xa8>
c001cb74:	b8 00 00 00 00       	mov    eax,0x0
c001cb79:	8d 76 00             	lea    esi,[esi+0x0]
c001cb7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cb82:	c3                   	ret    
c001cb83:	90                   	nop

c001cb84 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001cb84:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cb8a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001cb92:	75 0c                	jne    c001cba0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001cb94:	b8 04 00 00 00       	mov    eax,0x4
c001cb99:	e9 d6 00 00 00       	jmp    c001cc74 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cb9e:	66 90                	xchg   ax,ax
c001cba0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001cba8:	75 0a                	jne    c001cbb4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001cbaa:	b8 04 00 00 00       	mov    eax,0x4
c001cbaf:	e9 c0 00 00 00       	jmp    c001cc74 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cbb4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001cbbc:	75 0a                	jne    c001cbc8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001cbbe:	b8 04 00 00 00       	mov    eax,0x4
c001cbc3:	e9 ac 00 00 00       	jmp    c001cc74 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cbc8:	83 ec 08             	sub    esp,0x8
c001cbcb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cbd2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cbd9:	50                   	push   eax
c001cbda:	e8 61 3a fe ff       	call   c0000640 <strcpy>
c001cbdf:	83 c4 10             	add    esp,0x10
c001cbe2:	83 ec 08             	sub    esp,0x8
c001cbe5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001cbec:	50                   	push   eax
c001cbed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cbf4:	e8 27 fd ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001cbf9:	83 c4 10             	add    esp,0x10
c001cbfc:	83 ec 08             	sub    esp,0x8
c001cbff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cc03:	50                   	push   eax
c001cc04:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cc0b:	50                   	push   eax
c001cc0c:	e8 60 7d fe ff       	call   c0004971 <f_stat>
c001cc11:	83 c4 10             	add    esp,0x10
c001cc14:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cc1b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cc22:	85 c0                	test   eax,eax
c001cc24:	74 0a                	je     c001cc30 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001cc26:	83 f8 04             	cmp    eax,0x4
c001cc29:	74 39                	je     c001cc64 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cc2b:	eb 3f                	jmp    c001cc6c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001cc2d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc30:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cc34:	0f b6 c0             	movzx  eax,al
c001cc37:	83 e0 10             	and    eax,0x10
c001cc3a:	0f 95 c2             	setne  dl
c001cc3d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001cc44:	88 10                	mov    BYTE PTR [eax],dl
c001cc46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc4a:	ba 00 00 00 00       	mov    edx,0x0
c001cc4f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001cc56:	89 01                	mov    DWORD PTR [ecx],eax
c001cc58:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cc5b:	b8 00 00 00 00       	mov    eax,0x0
c001cc60:	eb 12                	jmp    c001cc74 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cc62:	66 90                	xchg   ax,ax
c001cc64:	b8 02 00 00 00       	mov    eax,0x2
c001cc69:	eb 09                	jmp    c001cc74 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cc6b:	90                   	nop
c001cc6c:	b8 01 00 00 00       	mov    eax,0x1
c001cc71:	8d 76 00             	lea    esi,[esi+0x0]
c001cc74:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cc7a:	c3                   	ret    
c001cc7b:	90                   	nop

c001cc7c <FAT::unlink(char const*)>:
c001cc7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cc82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cc8a:	75 08                	jne    c001cc94 <FAT::unlink(char const*)+0x18>
c001cc8c:	b8 04 00 00 00       	mov    eax,0x4
c001cc91:	eb 61                	jmp    c001ccf4 <FAT::unlink(char const*)+0x78>
c001cc93:	90                   	nop
c001cc94:	83 ec 08             	sub    esp,0x8
c001cc97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cc9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cca2:	50                   	push   eax
c001cca3:	e8 98 39 fe ff       	call   c0000640 <strcpy>
c001cca8:	83 c4 10             	add    esp,0x10
c001ccab:	83 ec 08             	sub    esp,0x8
c001ccae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ccb2:	50                   	push   eax
c001ccb3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ccba:	e8 61 fc ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 ec 0c             	sub    esp,0xc
c001ccc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ccc9:	50                   	push   eax
c001ccca:	e8 14 7f fe ff       	call   c0004be3 <f_unlink>
c001cccf:	83 c4 10             	add    esp,0x10
c001ccd2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ccd9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cce0:	85 c0                	test   eax,eax
c001cce2:	75 08                	jne    c001ccec <FAT::unlink(char const*)+0x70>
c001cce4:	b8 00 00 00 00       	mov    eax,0x0
c001cce9:	eb 09                	jmp    c001ccf4 <FAT::unlink(char const*)+0x78>
c001cceb:	90                   	nop
c001ccec:	b8 01 00 00 00       	mov    eax,0x1
c001ccf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ccf4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ccfa:	c3                   	ret    
c001ccfb:	90                   	nop

c001ccfc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ccfc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cd02:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001cd09:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001cd10:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cd14:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cd18:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cd20:	75 0a                	jne    c001cd2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001cd22:	b8 04 00 00 00       	mov    eax,0x4
c001cd27:	e9 7c 01 00 00       	jmp    c001cea8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cd2c:	83 ec 08             	sub    esp,0x8
c001cd2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cd36:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cd3a:	50                   	push   eax
c001cd3b:	e8 00 39 fe ff       	call   c0000640 <strcpy>
c001cd40:	83 c4 10             	add    esp,0x10
c001cd43:	83 ec 08             	sub    esp,0x8
c001cd46:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cd4a:	50                   	push   eax
c001cd4b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cd52:	e8 c9 fb ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001cd57:	83 c4 10             	add    esp,0x10
c001cd5a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001cd62:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001cd6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd6f:	83 e0 01             	and    eax,0x1
c001cd72:	74 14                	je     c001cd88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001cd74:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cd7b:	83 c8 01             	or     eax,0x1
c001cd7e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cd85:	8d 76 00             	lea    esi,[esi+0x0]
c001cd88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd8d:	83 e0 02             	and    eax,0x2
c001cd90:	74 12                	je     c001cda4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001cd92:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cd99:	83 c8 20             	or     eax,0x20
c001cd9c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cda3:	90                   	nop
c001cda4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cda9:	83 e0 04             	and    eax,0x4
c001cdac:	74 12                	je     c001cdc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001cdae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cdb5:	83 c8 04             	or     eax,0x4
c001cdb8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cdbf:	90                   	nop
c001cdc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdc5:	83 e0 08             	and    eax,0x8
c001cdc8:	74 12                	je     c001cddc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001cdca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cdd1:	83 c8 02             	or     eax,0x2
c001cdd4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cddb:	90                   	nop
c001cddc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cde1:	83 e0 01             	and    eax,0x1
c001cde4:	74 12                	je     c001cdf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001cde6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cded:	83 c8 01             	or     eax,0x1
c001cdf0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cdf7:	90                   	nop
c001cdf8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cdfd:	83 e0 02             	and    eax,0x2
c001ce00:	74 12                	je     c001ce14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001ce02:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ce09:	83 c8 20             	or     eax,0x20
c001ce0c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ce13:	90                   	nop
c001ce14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce19:	83 e0 04             	and    eax,0x4
c001ce1c:	74 12                	je     c001ce30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001ce1e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ce25:	83 c8 04             	or     eax,0x4
c001ce28:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ce2f:	90                   	nop
c001ce30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce35:	83 e0 08             	and    eax,0x8
c001ce38:	74 12                	je     c001ce4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001ce3a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ce41:	83 c8 02             	or     eax,0x2
c001ce44:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ce4b:	90                   	nop
c001ce4c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001ce53:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ce5a:	09 d0                	or     eax,edx
c001ce5c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ce63:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ce6b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ce73:	83 ec 04             	sub    esp,0x4
c001ce76:	52                   	push   edx
c001ce77:	50                   	push   eax
c001ce78:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ce7c:	50                   	push   eax
c001ce7d:	e8 d6 81 fe ff       	call   c0005058 <f_chmod>
c001ce82:	83 c4 10             	add    esp,0x10
c001ce85:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ce8c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ce93:	85 c0                	test   eax,eax
c001ce95:	75 09                	jne    c001cea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001ce97:	b8 00 00 00 00       	mov    eax,0x0
c001ce9c:	eb 0a                	jmp    c001cea8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001ce9e:	66 90                	xchg   ax,ax
c001cea0:	b8 01 00 00 00       	mov    eax,0x1
c001cea5:	8d 76 00             	lea    esi,[esi+0x0]
c001cea8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ceae:	c3                   	ret    
c001ceaf:	90                   	nop

c001ceb0 <FAT::rename(char const*, char const*)>:
c001ceb0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ceb6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cebe:	74 0c                	je     c001cecc <FAT::rename(char const*, char const*)+0x1c>
c001cec0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cec8:	75 0e                	jne    c001ced8 <FAT::rename(char const*, char const*)+0x28>
c001ceca:	66 90                	xchg   ax,ax
c001cecc:	b8 04 00 00 00       	mov    eax,0x4
c001ced1:	e9 9e 00 00 00       	jmp    c001cf74 <FAT::rename(char const*, char const*)+0xc4>
c001ced6:	66 90                	xchg   ax,ax
c001ced8:	83 ec 08             	sub    esp,0x8
c001cedb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cee2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cee9:	50                   	push   eax
c001ceea:	e8 51 37 fe ff       	call   c0000640 <strcpy>
c001ceef:	83 c4 10             	add    esp,0x10
c001cef2:	83 ec 08             	sub    esp,0x8
c001cef5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cefc:	50                   	push   eax
c001cefd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cf04:	e8 17 fa ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001cf09:	83 c4 10             	add    esp,0x10
c001cf0c:	83 ec 08             	sub    esp,0x8
c001cf0f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cf16:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cf1a:	50                   	push   eax
c001cf1b:	e8 20 37 fe ff       	call   c0000640 <strcpy>
c001cf20:	83 c4 10             	add    esp,0x10
c001cf23:	83 ec 08             	sub    esp,0x8
c001cf26:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf2a:	50                   	push   eax
c001cf2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cf32:	e8 e9 f9 ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	83 ec 08             	sub    esp,0x8
c001cf3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf41:	50                   	push   eax
c001cf42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cf49:	50                   	push   eax
c001cf4a:	e8 51 7f fe ff       	call   c0004ea0 <f_rename>
c001cf4f:	83 c4 10             	add    esp,0x10
c001cf52:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001cf59:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cf60:	85 c0                	test   eax,eax
c001cf62:	75 08                	jne    c001cf6c <FAT::rename(char const*, char const*)+0xbc>
c001cf64:	b8 00 00 00 00       	mov    eax,0x0
c001cf69:	eb 09                	jmp    c001cf74 <FAT::rename(char const*, char const*)+0xc4>
c001cf6b:	90                   	nop
c001cf6c:	b8 01 00 00 00       	mov    eax,0x1
c001cf71:	8d 76 00             	lea    esi,[esi+0x0]
c001cf74:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cf7a:	c3                   	ret    
c001cf7b:	90                   	nop

c001cf7c <FAT::mkdir(char const*)>:
c001cf7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cf82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cf8a:	75 08                	jne    c001cf94 <FAT::mkdir(char const*)+0x18>
c001cf8c:	b8 04 00 00 00       	mov    eax,0x4
c001cf91:	eb 61                	jmp    c001cff4 <FAT::mkdir(char const*)+0x78>
c001cf93:	90                   	nop
c001cf94:	83 ec 08             	sub    esp,0x8
c001cf97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cf9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cfa2:	50                   	push   eax
c001cfa3:	e8 98 36 fe ff       	call   c0000640 <strcpy>
c001cfa8:	83 c4 10             	add    esp,0x10
c001cfab:	83 ec 08             	sub    esp,0x8
c001cfae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cfb2:	50                   	push   eax
c001cfb3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cfba:	e8 61 f9 ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001cfbf:	83 c4 10             	add    esp,0x10
c001cfc2:	83 ec 0c             	sub    esp,0xc
c001cfc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cfc9:	50                   	push   eax
c001cfca:	e8 36 7d fe ff       	call   c0004d05 <f_mkdir>
c001cfcf:	83 c4 10             	add    esp,0x10
c001cfd2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cfd9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cfe0:	85 c0                	test   eax,eax
c001cfe2:	75 08                	jne    c001cfec <FAT::mkdir(char const*)+0x70>
c001cfe4:	b8 00 00 00 00       	mov    eax,0x0
c001cfe9:	eb 09                	jmp    c001cff4 <FAT::mkdir(char const*)+0x78>
c001cfeb:	90                   	nop
c001cfec:	b8 01 00 00 00       	mov    eax,0x1
c001cff1:	8d 76 00             	lea    esi,[esi+0x0]
c001cff4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cffa:	c3                   	ret    
c001cffb:	90                   	nop

c001cffc <FAT::exists(char const*)>:
c001cffc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d002:	83 ec 08             	sub    esp,0x8
c001d005:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d00c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d010:	50                   	push   eax
c001d011:	e8 2a 36 fe ff       	call   c0000640 <strcpy>
c001d016:	83 c4 10             	add    esp,0x10
c001d019:	83 ec 08             	sub    esp,0x8
c001d01c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d020:	50                   	push   eax
c001d021:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d028:	e8 f3 f8 ff ff       	call   c001c920 <FAT::fixFilepath(char*)>
c001d02d:	83 c4 10             	add    esp,0x10
c001d030:	83 ec 08             	sub    esp,0x8
c001d033:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001d03a:	50                   	push   eax
c001d03b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d03f:	50                   	push   eax
c001d040:	e8 2c 79 fe ff       	call   c0004971 <f_stat>
c001d045:	83 c4 10             	add    esp,0x10
c001d048:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d04f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d056:	85 c0                	test   eax,eax
c001d058:	75 06                	jne    c001d060 <FAT::exists(char const*)+0x64>
c001d05a:	b0 01                	mov    al,0x1
c001d05c:	eb 06                	jmp    c001d064 <FAT::exists(char const*)+0x68>
c001d05e:	66 90                	xchg   ax,ax
c001d060:	b0 00                	mov    al,0x0
c001d062:	66 90                	xchg   ax,ax
c001d064:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d06a:	c3                   	ret    
c001d06b:	90                   	nop

c001d06c <isoReadDiscSectorHelper>:
c001d06c:	83 ec 2c             	sub    esp,0x2c
c001d06f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d073:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d077:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d07c:	83 e8 41             	sub    eax,0x41
c001d07f:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001d086:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d08a:	ba 00 00 00 00       	mov    edx,0x0
c001d08f:	83 ec 0c             	sub    esp,0xc
c001d092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d096:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d09a:	52                   	push   edx
c001d09b:	50                   	push   eax
c001d09c:	51                   	push   ecx
c001d09d:	e8 06 da fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d0a2:	83 c4 20             	add    esp,0x20
c001d0a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d0a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d0ae:	74 0c                	je     c001d0bc <isoReadDiscSectorHelper+0x50>
c001d0b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d0b4:	c1 e0 0b             	shl    eax,0xb
c001d0b7:	eb 0b                	jmp    c001d0c4 <isoReadDiscSectorHelper+0x58>
c001d0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d0bc:	b8 00 00 00 00       	mov    eax,0x0
c001d0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d0c4:	83 c4 2c             	add    esp,0x2c
c001d0c7:	c3                   	ret    

c001d0c8 <iso_kprintf>:
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	83 ec 08             	sub    esp,0x8
c001d0ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0d2:	68 d0 5c 02 c0       	push   0xc0025cd0
c001d0d7:	e8 a0 9e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d0dc:	83 c4 10             	add    esp,0x10
c001d0df:	90                   	nop
c001d0e0:	83 c4 0c             	add    esp,0xc
c001d0e3:	c3                   	ret    

c001d0e4 <iso_kprintfd>:
c001d0e4:	83 ec 0c             	sub    esp,0xc
c001d0e7:	83 ec 08             	sub    esp,0x8
c001d0ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0ee:	68 a4 50 02 c0       	push   0xc00250a4
c001d0f3:	e8 84 9e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d0f8:	83 c4 10             	add    esp,0x10
c001d0fb:	90                   	nop
c001d0fc:	83 c4 0c             	add    esp,0xc
c001d0ff:	c3                   	ret    

c001d100 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d100:	b8 08 00 00 00       	mov    eax,0x8
c001d105:	c3                   	ret    

c001d106 <ISO9660::truncate(void*, unsigned long long)>:
c001d106:	b8 01 00 00 00       	mov    eax,0x1
c001d10b:	c3                   	ret    

c001d10c <ISO9660::getName()>:
c001d10c:	b8 5c 60 02 c0       	mov    eax,0xc002605c
c001d111:	c3                   	ret    

c001d112 <ISO9660::closeDir(void*)>:
c001d112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d116:	8b 00                	mov    eax,DWORD PTR [eax]
c001d118:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d11b:	90                   	nop

c001d11c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d11c:	b8 01 00 00 00       	mov    eax,0x1
c001d121:	c3                   	ret    

c001d122 <ISO9660::unlink(char const*)>:
c001d122:	b8 01 00 00 00       	mov    eax,0x1
c001d127:	c3                   	ret    

c001d128 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d128:	b8 03 00 00 00       	mov    eax,0x3
c001d12d:	c3                   	ret    

c001d12e <ISO9660::rename(char const*, char const*)>:
c001d12e:	b8 01 00 00 00       	mov    eax,0x1
c001d133:	c3                   	ret    

c001d134 <ISO9660::mkdir(char const*)>:
c001d134:	b8 01 00 00 00       	mov    eax,0x1
c001d139:	c3                   	ret    

c001d13a <ISO9660::~ISO9660()>:
c001d13a:	83 ec 0c             	sub    esp,0xc
c001d13d:	ba 9c 61 02 c0       	mov    edx,0xc002619c
c001d142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d146:	89 10                	mov    DWORD PTR [eax],edx
c001d148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d14c:	83 ec 0c             	sub    esp,0xc
c001d14f:	50                   	push   eax
c001d150:	e8 97 ac fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	90                   	nop
c001d159:	83 c4 0c             	add    esp,0xc
c001d15c:	c3                   	ret    
c001d15d:	90                   	nop

c001d15e <ISO9660::~ISO9660()>:
c001d15e:	83 ec 0c             	sub    esp,0xc
c001d161:	83 ec 0c             	sub    esp,0xc
c001d164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d168:	e8 cd ff ff ff       	call   c001d13a <ISO9660::~ISO9660()>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	83 ec 08             	sub    esp,0x8
c001d173:	6a 08                	push   0x8
c001d175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d179:	e8 6b 02 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001d17e:	83 c4 10             	add    esp,0x10
c001d181:	83 c4 0c             	add    esp,0xc
c001d184:	c3                   	ret    
c001d185:	90                   	nop

c001d186 <ISO9660::exists(char const*)>:
c001d186:	83 ec 18             	sub    esp,0x18
c001d189:	68 77 60 02 c0       	push   0xc0026077
c001d18e:	e8 db 2e ff ff       	call   c001006e <KePanic(char const*)>
c001d193:	31 c0                	xor    eax,eax
c001d195:	83 c4 1c             	add    esp,0x1c
c001d198:	c3                   	ret    
c001d199:	90                   	nop

c001d19a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d19a:	56                   	push   esi
c001d19b:	53                   	push   ebx
c001d19c:	53                   	push   ebx
c001d19d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d1a5:	85 db                	test   ebx,ebx
c001d1a7:	0f 84 ca 00 00 00    	je     c001d277 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d1ad:	85 f6                	test   esi,esi
c001d1af:	0f 84 c2 00 00 00    	je     c001d277 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d1b5:	b8 03 00 00 00       	mov    eax,0x3
c001d1ba:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d1bf:	0f 85 b7 00 00 00    	jne    c001d27c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d1c5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d1c7:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d1ce:	38 0d 80 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc80,cl
c001d1d4:	74 1b                	je     c001d1f1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d1d6:	85 c0                	test   eax,eax
c001d1d8:	74 10                	je     c001d1ea <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d1da:	83 ec 0c             	sub    esp,0xc
c001d1dd:	68 95 60 02 c0       	push   0xc0026095
c001d1e2:	e8 87 2e ff ff       	call   c001006e <KePanic(char const*)>
c001d1e7:	83 c4 10             	add    esp,0x10
c001d1ea:	8a 03                	mov    al,BYTE PTR [ebx]
c001d1ec:	a2 80 fc 02 c0       	mov    ds:0xc002fc80,al
c001d1f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d1f4:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d1fb:	85 c0                	test   eax,eax
c001d1fd:	74 09                	je     c001d208 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d1ff:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d206:	74 48                	je     c001d250 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d208:	83 ec 0c             	sub    esp,0xc
c001d20b:	68 a5 60 02 c0       	push   0xc00260a5
c001d210:	e8 67 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d215:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d222:	85 c0                	test   eax,eax
c001d224:	74 17                	je     c001d23d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d226:	83 ec 0c             	sub    esp,0xc
c001d229:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d230:	68 c5 60 02 c0       	push   0xc00260c5
c001d235:	e8 42 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	83 ec 0c             	sub    esp,0xc
c001d240:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d247:	50                   	push   eax
c001d248:	e8 e1 99 fe ff       	call   c0006c2e <init_percd>
c001d24d:	83 c4 10             	add    esp,0x10
c001d250:	83 c3 03             	add    ebx,0x3
c001d253:	51                   	push   ecx
c001d254:	51                   	push   ecx
c001d255:	6a 00                	push   0x0
c001d257:	53                   	push   ebx
c001d258:	e8 98 94 fe ff       	call   c00066f5 <iso_open>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	89 c2                	mov    edx,eax
c001d262:	b8 01 00 00 00       	mov    eax,0x1
c001d267:	83 fa ff             	cmp    edx,0xffffffff
c001d26a:	74 10                	je     c001d27c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d26c:	83 c2 32             	add    edx,0x32
c001d26f:	31 c0                	xor    eax,eax
c001d271:	01 d2                	add    edx,edx
c001d273:	89 16                	mov    DWORD PTR [esi],edx
c001d275:	eb 05                	jmp    c001d27c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d277:	b8 04 00 00 00       	mov    eax,0x4
c001d27c:	5a                   	pop    edx
c001d27d:	5b                   	pop    ebx
c001d27e:	5e                   	pop    esi
c001d27f:	c3                   	ret    

c001d280 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d280:	53                   	push   ebx
c001d281:	83 ec 08             	sub    esp,0x8
c001d284:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d288:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d28c:	85 c0                	test   eax,eax
c001d28e:	74 2d                	je     c001d2bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d290:	85 db                	test   ebx,ebx
c001d292:	74 29                	je     c001d2bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d294:	b9 02 00 00 00       	mov    ecx,0x2
c001d299:	52                   	push   edx
c001d29a:	99                   	cdq    
c001d29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d29f:	f7 f9                	idiv   ecx
c001d2a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d2a5:	83 e8 32             	sub    eax,0x32
c001d2a8:	50                   	push   eax
c001d2a9:	e8 ef 94 fe ff       	call   c000679d <iso_read>
c001d2ae:	83 c4 10             	add    esp,0x10
c001d2b1:	89 03                	mov    DWORD PTR [ebx],eax
c001d2b3:	09 d0                	or     eax,edx
c001d2b5:	0f 94 c0             	sete   al
c001d2b8:	0f b6 c0             	movzx  eax,al
c001d2bb:	eb 05                	jmp    c001d2c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d2bd:	b8 04 00 00 00       	mov    eax,0x4
c001d2c2:	83 c4 08             	add    esp,0x8
c001d2c5:	5b                   	pop    ebx
c001d2c6:	c3                   	ret    
c001d2c7:	90                   	nop

c001d2c8 <ISO9660::seek(void*, unsigned long long)>:
c001d2c8:	57                   	push   edi
c001d2c9:	56                   	push   esi
c001d2ca:	b8 04 00 00 00       	mov    eax,0x4
c001d2cf:	51                   	push   ecx
c001d2d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d2d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d2d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d2dc:	85 d2                	test   edx,edx
c001d2de:	74 26                	je     c001d306 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d2e0:	6a 00                	push   0x0
c001d2e2:	b9 02 00 00 00       	mov    ecx,0x2
c001d2e7:	57                   	push   edi
c001d2e8:	89 d0                	mov    eax,edx
c001d2ea:	56                   	push   esi
c001d2eb:	99                   	cdq    
c001d2ec:	f7 f9                	idiv   ecx
c001d2ee:	83 e8 32             	sub    eax,0x32
c001d2f1:	50                   	push   eax
c001d2f2:	e8 bc 95 fe ff       	call   c00068b3 <iso_seek>
c001d2f7:	83 c4 10             	add    esp,0x10
c001d2fa:	31 f0                	xor    eax,esi
c001d2fc:	31 fa                	xor    edx,edi
c001d2fe:	09 d0                	or     eax,edx
c001d300:	0f 95 c0             	setne  al
c001d303:	0f b6 c0             	movzx  eax,al
c001d306:	5a                   	pop    edx
c001d307:	5e                   	pop    esi
c001d308:	5f                   	pop    edi
c001d309:	c3                   	ret    

c001d30a <ISO9660::tell(void*, unsigned long long*)>:
c001d30a:	53                   	push   ebx
c001d30b:	83 ec 08             	sub    esp,0x8
c001d30e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d312:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d316:	85 c0                	test   eax,eax
c001d318:	74 24                	je     c001d33e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d31a:	85 db                	test   ebx,ebx
c001d31c:	74 20                	je     c001d33e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d31e:	83 ec 0c             	sub    esp,0xc
c001d321:	b9 02 00 00 00       	mov    ecx,0x2
c001d326:	99                   	cdq    
c001d327:	f7 f9                	idiv   ecx
c001d329:	83 e8 32             	sub    eax,0x32
c001d32c:	50                   	push   eax
c001d32d:	e8 05 96 fe ff       	call   c0006937 <iso_tell>
c001d332:	83 c4 10             	add    esp,0x10
c001d335:	89 03                	mov    DWORD PTR [ebx],eax
c001d337:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d33a:	31 c0                	xor    eax,eax
c001d33c:	eb 05                	jmp    c001d343 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d33e:	b8 04 00 00 00       	mov    eax,0x4
c001d343:	83 c4 08             	add    esp,0x8
c001d346:	5b                   	pop    ebx
c001d347:	c3                   	ret    

c001d348 <ISO9660::stat(void*, unsigned long long*)>:
c001d348:	53                   	push   ebx
c001d349:	83 ec 14             	sub    esp,0x14
c001d34c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d350:	68 e9 60 02 c0       	push   0xc00260e9
c001d355:	e8 22 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d35a:	83 c4 10             	add    esp,0x10
c001d35d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d362:	74 2c                	je     c001d390 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d364:	85 db                	test   ebx,ebx
c001d366:	74 28                	je     c001d390 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d368:	83 ec 0c             	sub    esp,0xc
c001d36b:	b9 02 00 00 00       	mov    ecx,0x2
c001d370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d374:	99                   	cdq    
c001d375:	f7 f9                	idiv   ecx
c001d377:	83 e8 32             	sub    eax,0x32
c001d37a:	50                   	push   eax
c001d37b:	e8 e8 95 fe ff       	call   c0006968 <iso_total>
c001d380:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d387:	89 03                	mov    DWORD PTR [ebx],eax
c001d389:	83 c4 10             	add    esp,0x10
c001d38c:	31 c0                	xor    eax,eax
c001d38e:	eb 05                	jmp    c001d395 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d390:	b8 04 00 00 00       	mov    eax,0x4
c001d395:	83 c4 08             	add    esp,0x8
c001d398:	5b                   	pop    ebx
c001d399:	c3                   	ret    

c001d39a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d39a:	55                   	push   ebp
c001d39b:	57                   	push   edi
c001d39c:	56                   	push   esi
c001d39d:	53                   	push   ebx
c001d39e:	83 ec 18             	sub    esp,0x18
c001d3a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d3a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d3ad:	68 f1 60 02 c0       	push   0xc00260f1
c001d3b2:	e8 c5 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d3b7:	83 c4 10             	add    esp,0x10
c001d3ba:	85 ff                	test   edi,edi
c001d3bc:	0f 94 c0             	sete   al
c001d3bf:	85 f6                	test   esi,esi
c001d3c1:	0f 94 c2             	sete   dl
c001d3c4:	09 d0                	or     eax,edx
c001d3c6:	a8 01                	test   al,0x1
c001d3c8:	0f 85 dd 00 00 00    	jne    c001d4ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d3ce:	85 db                	test   ebx,ebx
c001d3d0:	0f 84 d5 00 00 00    	je     c001d4ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d3d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d3d9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d3df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d3e6:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d3ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d3ef:	38 0d 80 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc80,cl
c001d3f5:	74 1b                	je     c001d412 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d3f7:	85 c0                	test   eax,eax
c001d3f9:	74 10                	je     c001d40b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d3fb:	83 ec 0c             	sub    esp,0xc
c001d3fe:	68 95 60 02 c0       	push   0xc0026095
c001d403:	e8 66 2c ff ff       	call   c001006e <KePanic(char const*)>
c001d408:	83 c4 10             	add    esp,0x10
c001d40b:	8a 03                	mov    al,BYTE PTR [ebx]
c001d40d:	a2 80 fc 02 c0       	mov    ds:0xc002fc80,al
c001d412:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d415:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d41c:	85 c0                	test   eax,eax
c001d41e:	74 09                	je     c001d429 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d420:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d427:	74 51                	je     c001d47a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d429:	83 ec 0c             	sub    esp,0xc
c001d42c:	68 f9 60 02 c0       	push   0xc00260f9
c001d431:	e8 46 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d436:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d439:	83 c4 10             	add    esp,0x10
c001d43c:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001d444:	74 21                	je     c001d467 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	68 19 61 02 c0       	push   0xc0026119
c001d44e:	e8 29 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d453:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d456:	83 c4 10             	add    esp,0x10
c001d459:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d460:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d467:	83 ec 0c             	sub    esp,0xc
c001d46a:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d471:	50                   	push   eax
c001d472:	e8 b7 97 fe ff       	call   c0006c2e <init_percd>
c001d477:	83 c4 10             	add    esp,0x10
c001d47a:	83 c3 03             	add    ebx,0x3
c001d47d:	52                   	push   edx
c001d47e:	52                   	push   edx
c001d47f:	6a 00                	push   0x0
c001d481:	53                   	push   ebx
c001d482:	e8 6e 92 fe ff       	call   c00066f5 <iso_open>
c001d487:	83 c4 10             	add    esp,0x10
c001d48a:	89 c5                	mov    ebp,eax
c001d48c:	83 f8 ff             	cmp    eax,0xffffffff
c001d48f:	75 21                	jne    c001d4b2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d491:	50                   	push   eax
c001d492:	50                   	push   eax
c001d493:	6a 01                	push   0x1
c001d495:	53                   	push   ebx
c001d496:	e8 5a 92 fe ff       	call   c00066f5 <iso_open>
c001d49b:	83 c4 10             	add    esp,0x10
c001d49e:	ba 02 00 00 00       	mov    edx,0x2
c001d4a3:	40                   	inc    eax
c001d4a4:	74 2b                	je     c001d4d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d4a6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d4a9:	eb 24                	jmp    c001d4cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d4ab:	ba 04 00 00 00       	mov    edx,0x4
c001d4b0:	eb 1f                	jmp    c001d4d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d4b2:	83 ec 0c             	sub    esp,0xc
c001d4b5:	50                   	push   eax
c001d4b6:	e8 ad 94 fe ff       	call   c0006968 <iso_total>
c001d4bb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d4c2:	89 07                	mov    DWORD PTR [edi],eax
c001d4c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4c7:	e8 b3 92 fe ff       	call   c000677f <iso_close>
c001d4cc:	83 c4 10             	add    esp,0x10
c001d4cf:	31 d2                	xor    edx,edx
c001d4d1:	83 c4 0c             	add    esp,0xc
c001d4d4:	89 d0                	mov    eax,edx
c001d4d6:	5b                   	pop    ebx
c001d4d7:	5e                   	pop    esi
c001d4d8:	5f                   	pop    edi
c001d4d9:	5d                   	pop    ebp
c001d4da:	c3                   	ret    
c001d4db:	90                   	nop

c001d4dc <ISO9660::close(void*)>:
c001d4dc:	83 ec 0c             	sub    esp,0xc
c001d4df:	b8 04 00 00 00       	mov    eax,0x4
c001d4e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d4e8:	85 d2                	test   edx,edx
c001d4ea:	74 1b                	je     c001d507 <ISO9660::close(void*)+0x2b>
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	b9 02 00 00 00       	mov    ecx,0x2
c001d4f4:	89 d0                	mov    eax,edx
c001d4f6:	99                   	cdq    
c001d4f7:	f7 f9                	idiv   ecx
c001d4f9:	83 e8 32             	sub    eax,0x32
c001d4fc:	50                   	push   eax
c001d4fd:	e8 7d 92 fe ff       	call   c000677f <iso_close>
c001d502:	83 c4 10             	add    esp,0x10
c001d505:	31 c0                	xor    eax,eax
c001d507:	83 c4 0c             	add    esp,0xc
c001d50a:	c3                   	ret    
c001d50b:	90                   	nop

c001d50c <ISO9660::openDir(char const*, void**)>:
c001d50c:	56                   	push   esi
c001d50d:	53                   	push   ebx
c001d50e:	50                   	push   eax
c001d50f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d513:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d517:	85 db                	test   ebx,ebx
c001d519:	0f 84 bd 00 00 00    	je     c001d5dc <ISO9660::openDir(char const*, void**)+0xd0>
c001d51f:	85 f6                	test   esi,esi
c001d521:	0f 84 b5 00 00 00    	je     c001d5dc <ISO9660::openDir(char const*, void**)+0xd0>
c001d527:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d529:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d530:	38 15 80 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc80,dl
c001d536:	74 1b                	je     c001d553 <ISO9660::openDir(char const*, void**)+0x47>
c001d538:	85 c0                	test   eax,eax
c001d53a:	74 10                	je     c001d54c <ISO9660::openDir(char const*, void**)+0x40>
c001d53c:	83 ec 0c             	sub    esp,0xc
c001d53f:	68 95 60 02 c0       	push   0xc0026095
c001d544:	e8 25 2b ff ff       	call   c001006e <KePanic(char const*)>
c001d549:	83 c4 10             	add    esp,0x10
c001d54c:	8a 03                	mov    al,BYTE PTR [ebx]
c001d54e:	a2 80 fc 02 c0       	mov    ds:0xc002fc80,al
c001d553:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d556:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d55d:	85 c0                	test   eax,eax
c001d55f:	74 10                	je     c001d571 <ISO9660::openDir(char const*, void**)+0x65>
c001d561:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d568:	74 1a                	je     c001d584 <ISO9660::openDir(char const*, void**)+0x78>
c001d56a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d571:	83 ec 0c             	sub    esp,0xc
c001d574:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d57b:	50                   	push   eax
c001d57c:	e8 ad 96 fe ff       	call   c0006c2e <init_percd>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	83 c3 03             	add    ebx,0x3
c001d587:	50                   	push   eax
c001d588:	50                   	push   eax
c001d589:	6a 01                	push   0x1
c001d58b:	53                   	push   ebx
c001d58c:	e8 64 91 fe ff       	call   c00066f5 <iso_open>
c001d591:	83 c4 10             	add    esp,0x10
c001d594:	89 c3                	mov    ebx,eax
c001d596:	83 f8 ff             	cmp    eax,0xffffffff
c001d599:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001d59e:	75 1c                	jne    c001d5bc <ISO9660::openDir(char const*, void**)+0xb0>
c001d5a0:	53                   	push   ebx
c001d5a1:	53                   	push   ebx
c001d5a2:	68 3d 61 02 c0       	push   0xc002613d
c001d5a7:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d5ad:	e8 82 53 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001d5b2:	83 c4 10             	add    esp,0x10
c001d5b5:	b8 01 00 00 00       	mov    eax,0x1
c001d5ba:	eb 25                	jmp    c001d5e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001d5bc:	01 db                	add    ebx,ebx
c001d5be:	51                   	push   ecx
c001d5bf:	83 c3 65             	add    ebx,0x65
c001d5c2:	51                   	push   ecx
c001d5c3:	68 50 61 02 c0       	push   0xc0026150
c001d5c8:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d5ce:	e8 61 53 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001d5d3:	89 1e                	mov    DWORD PTR [esi],ebx
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	31 c0                	xor    eax,eax
c001d5da:	eb 05                	jmp    c001d5e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001d5dc:	b8 04 00 00 00       	mov    eax,0x4
c001d5e1:	5a                   	pop    edx
c001d5e2:	5b                   	pop    ebx
c001d5e3:	5e                   	pop    esi
c001d5e4:	c3                   	ret    
c001d5e5:	90                   	nop

c001d5e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d5e6:	55                   	push   ebp
c001d5e7:	57                   	push   edi
c001d5e8:	56                   	push   esi
c001d5e9:	53                   	push   ebx
c001d5ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d5f0:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d5f7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d5fe:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d606:	0f 84 e7 00 00 00    	je     c001d6f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d60c:	85 db                	test   ebx,ebx
c001d60e:	0f 84 df 00 00 00    	je     c001d6f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d614:	83 ec 0c             	sub    esp,0xc
c001d617:	68 63 61 02 c0       	push   0xc0026163
c001d61c:	e8 5b 99 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d621:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d628:	b9 02 00 00 00       	mov    ecx,0x2
c001d62d:	99                   	cdq    
c001d62e:	f7 f9                	idiv   ecx
c001d630:	83 e8 32             	sub    eax,0x32
c001d633:	89 04 24             	mov    DWORD PTR [esp],eax
c001d636:	e8 7f 93 fe ff       	call   c00069ba <iso_readdir>
c001d63b:	83 c4 10             	add    esp,0x10
c001d63e:	89 c6                	mov    esi,eax
c001d640:	85 c0                	test   eax,eax
c001d642:	75 37                	jne    c001d67b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d644:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001d649:	56                   	push   esi
c001d64a:	56                   	push   esi
c001d64b:	68 6e 61 02 c0       	push   0xc002616e
c001d650:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d656:	e8 d9 52 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001d65b:	83 c4 0c             	add    esp,0xc
c001d65e:	68 10 01 00 00       	push   0x110
c001d663:	6a 00                	push   0x0
c001d665:	57                   	push   edi
c001d666:	e8 85 2e fe ff       	call   c00004f0 <memset>
c001d66b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d671:	83 c4 10             	add    esp,0x10
c001d674:	b8 01 00 00 00       	mov    eax,0x1
c001d679:	eb 7d                	jmp    c001d6f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d67b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d681:	8d 68 08             	lea    ebp,[eax+0x8]
c001d684:	83 ec 0c             	sub    esp,0xc
c001d687:	55                   	push   ebp
c001d688:	e8 e3 2e fe ff       	call   c0000570 <strlen>
c001d68d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d695:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d699:	83 c4 10             	add    esp,0x10
c001d69c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d6a0:	75 0a                	jne    c001d6ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d6a2:	b8 02 00 00 00       	mov    eax,0x2
c001d6a7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d6aa:	74 05                	je     c001d6b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d6ac:	b8 01 00 00 00       	mov    eax,0x1
c001d6b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6b5:	50                   	push   eax
c001d6b6:	50                   	push   eax
c001d6b7:	55                   	push   ebp
c001d6b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d6bc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d6c0:	50                   	push   eax
c001d6c1:	e8 7a 2f fe ff       	call   c0000640 <strcpy>
c001d6c6:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d6cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6cf:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d6d5:	5a                   	pop    edx
c001d6d6:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001d6db:	59                   	pop    ecx
c001d6dc:	68 81 61 02 c0       	push   0xc0026181
c001d6e1:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d6e7:	e8 48 52 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c001d6ec:	83 c4 10             	add    esp,0x10
c001d6ef:	31 c0                	xor    eax,eax
c001d6f1:	eb 05                	jmp    c001d6f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d6f3:	b8 04 00 00 00       	mov    eax,0x4
c001d6f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d6fe:	5b                   	pop    ebx
c001d6ff:	5e                   	pop    esi
c001d700:	5f                   	pop    edi
c001d701:	5d                   	pop    ebp
c001d702:	c3                   	ret    

c001d703 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d703:	57                   	push   edi
c001d704:	56                   	push   esi
c001d705:	53                   	push   ebx
c001d706:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d70a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d70e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d712:	39 35 84 fc 02 c0    	cmp    DWORD PTR ds:0xc002fc84,esi
c001d718:	0f be cb             	movsx  ecx,bl
c001d71b:	75 0b                	jne    c001d728 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d71d:	0f be 05 e4 73 02 c0 	movsx  eax,BYTE PTR ds:0xc00273e4
c001d724:	39 c8                	cmp    eax,ecx
c001d726:	74 47                	je     c001d76f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d728:	83 ec 0c             	sub    esp,0xc
c001d72b:	31 d2                	xor    edx,edx
c001d72d:	68 a0 fc 02 c0       	push   0xc002fca0
c001d732:	6a 01                	push   0x1
c001d734:	52                   	push   edx
c001d735:	56                   	push   esi
c001d736:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d73d:	e8 66 d3 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d742:	83 c4 20             	add    esp,0x20
c001d745:	85 c0                	test   eax,eax
c001d747:	75 0e                	jne    c001d757 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d749:	89 35 84 fc 02 c0    	mov    DWORD PTR ds:0xc002fc84,esi
c001d74f:	88 1d e4 73 02 c0    	mov    BYTE PTR ds:0xc00273e4,bl
c001d755:	eb 18                	jmp    c001d76f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d757:	50                   	push   eax
c001d758:	68 00 08 00 00       	push   0x800
c001d75d:	6a 00                	push   0x0
c001d75f:	57                   	push   edi
c001d760:	e8 8b 2d fe ff       	call   c00004f0 <memset>
c001d765:	83 c4 10             	add    esp,0x10
c001d768:	b8 01 00 00 00       	mov    eax,0x1
c001d76d:	eb 0e                	jmp    c001d77d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d76f:	be a0 fc 02 c0       	mov    esi,0xc002fca0
c001d774:	b9 00 08 00 00       	mov    ecx,0x800
c001d779:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d77b:	31 c0                	xor    eax,eax
c001d77d:	5b                   	pop    ebx
c001d77e:	5e                   	pop    esi
c001d77f:	5f                   	pop    edi
c001d780:	c3                   	ret    
c001d781:	90                   	nop

c001d782 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d782:	53                   	push   ebx
c001d783:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d789:	c7 05 84 fc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002fc84,0xdeadbeef
c001d793:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d79a:	8d 58 41             	lea    ebx,[eax+0x41]
c001d79d:	0f be db             	movsx  ebx,bl
c001d7a0:	53                   	push   ebx
c001d7a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d7a5:	50                   	push   eax
c001d7a6:	6a 10                	push   0x10
c001d7a8:	e8 56 ff ff ff       	call   c001d703 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d7ad:	83 c4 10             	add    esp,0x10
c001d7b0:	31 d2                	xor    edx,edx
c001d7b2:	85 c0                	test   eax,eax
c001d7b4:	75 33                	jne    c001d7e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d7b6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d7bb:	75 2c                	jne    c001d7e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d7bd:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d7c2:	75 25                	jne    c001d7e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d7c4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d7c9:	75 1e                	jne    c001d7e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d7cb:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d7d0:	75 17                	jne    c001d7e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d7d2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d7d7:	75 10                	jne    c001d7e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d7d9:	83 ec 0c             	sub    esp,0xc
c001d7dc:	53                   	push   ebx
c001d7dd:	e8 4c 94 fe ff       	call   c0006c2e <init_percd>
c001d7e2:	83 c4 10             	add    esp,0x10
c001d7e5:	40                   	inc    eax
c001d7e6:	0f 95 c2             	setne  dl
c001d7e9:	88 d0                	mov    al,dl
c001d7eb:	81 c4 08 08 00 00    	add    esp,0x808
c001d7f1:	5b                   	pop    ebx
c001d7f2:	c3                   	ret    
c001d7f3:	90                   	nop

c001d7f4 <ISO9660::ISO9660()>:
c001d7f4:	83 ec 0c             	sub    esp,0xc
c001d7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7fb:	83 ec 0c             	sub    esp,0xc
c001d7fe:	50                   	push   eax
c001d7ff:	e8 c4 a5 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001d804:	83 c4 10             	add    esp,0x10
c001d807:	ba 9c 61 02 c0       	mov    edx,0xc002619c
c001d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d810:	89 10                	mov    DWORD PTR [eax],edx
c001d812:	e8 29 95 fe ff       	call   c0006d40 <fs_iso9660_init>
c001d817:	90                   	nop
c001d818:	83 c4 0c             	add    esp,0xc
c001d81b:	c3                   	ret    

c001d81c <SoundCard::beginPlayback()>:
c001d81c:	c7 44 24 04 00 62 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026200
c001d824:	e9 45 28 ff ff       	jmp    c001006e <KePanic(char const*)>
c001d829:	90                   	nop

c001d82a <SoundCard::stopPlayback()>:
c001d82a:	c7 44 24 04 00 62 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026200
c001d832:	e9 37 28 ff ff       	jmp    c001006e <KePanic(char const*)>
c001d837:	90                   	nop

c001d838 <SoundCard::SoundCard(char const*)>:
c001d838:	83 ec 1c             	sub    esp,0x1c
c001d83b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d83f:	83 ec 08             	sub    esp,0x8
c001d842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d846:	50                   	push   eax
c001d847:	e8 6a c3 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001d84c:	83 c4 10             	add    esp,0x10
c001d84f:	ba 4c 62 02 c0       	mov    edx,0xc002624c
c001d854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d858:	89 10                	mov    DWORD PTR [eax],edx
c001d85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d85e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d869:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d877:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d885:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d88f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d893:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d89d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d8a5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d8aa:	7f 1a                	jg     c001d8c6 <SoundCard::SoundCard(char const*)+0x8e>
c001d8ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d8b4:	83 c2 54             	add    edx,0x54
c001d8b7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d8bf:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d8c4:	eb df                	jmp    c001d8a5 <SoundCard::SoundCard(char const*)+0x6d>
c001d8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ca:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d8d1:	90                   	nop
c001d8d2:	83 c4 1c             	add    esp,0x1c
c001d8d5:	c3                   	ret    

c001d8d6 <SoundCard::~SoundCard()>:
c001d8d6:	83 ec 0c             	sub    esp,0xc
c001d8d9:	ba 4c 62 02 c0       	mov    edx,0xc002624c
c001d8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e2:	89 10                	mov    DWORD PTR [eax],edx
c001d8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e8:	83 ec 0c             	sub    esp,0xc
c001d8eb:	50                   	push   eax
c001d8ec:	e8 65 c0 fe ff       	call   c0009956 <Device::~Device()>
c001d8f1:	83 c4 10             	add    esp,0x10
c001d8f4:	90                   	nop
c001d8f5:	83 c4 0c             	add    esp,0xc
c001d8f8:	c3                   	ret    
c001d8f9:	90                   	nop

c001d8fa <SoundCard::~SoundCard()>:
c001d8fa:	83 ec 0c             	sub    esp,0xc
c001d8fd:	83 ec 0c             	sub    esp,0xc
c001d900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d904:	e8 cd ff ff ff       	call   c001d8d6 <SoundCard::~SoundCard()>
c001d909:	83 c4 10             	add    esp,0x10
c001d90c:	83 ec 08             	sub    esp,0x8
c001d90f:	68 e8 01 00 00       	push   0x1e8
c001d914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d918:	e8 cc fa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001d91d:	83 c4 10             	add    esp,0x10
c001d920:	83 c4 0c             	add    esp,0xc
c001d923:	c3                   	ret    

c001d924 <SoundCard::configureRates(int, int, int)>:
c001d924:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d928:	31 c0                	xor    eax,eax
c001d92a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d931:	75 20                	jne    c001d953 <SoundCard::configureRates(int, int, int)+0x2f>
c001d933:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d937:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d93d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d941:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d94b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d951:	b0 01                	mov    al,0x1
c001d953:	c3                   	ret    

c001d954 <SoundCard::getSamples16(int, short*)>:
c001d954:	55                   	push   ebp
c001d955:	57                   	push   edi
c001d956:	31 ff                	xor    edi,edi
c001d958:	56                   	push   esi
c001d959:	53                   	push   ebx
c001d95a:	31 db                	xor    ebx,ebx
c001d95c:	83 ec 10             	sub    esp,0x10
c001d95f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d963:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d967:	8d 04 36             	lea    eax,[esi+esi*1]
c001d96a:	50                   	push   eax
c001d96b:	6a 00                	push   0x0
c001d96d:	55                   	push   ebp
c001d96e:	e8 7d 2b fe ff       	call   c00004f0 <memset>
c001d973:	83 c4 10             	add    esp,0x10
c001d976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d97a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d981:	85 c0                	test   eax,eax
c001d983:	74 1b                	je     c001d9a0 <SoundCard::getSamples16(int, short*)+0x4c>
c001d985:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d989:	75 15                	jne    c001d9a0 <SoundCard::getSamples16(int, short*)+0x4c>
c001d98b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d98f:	55                   	push   ebp
c001d990:	56                   	push   esi
c001d991:	50                   	push   eax
c001d992:	e8 8d 03 00 00       	call   c001dd24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d997:	83 c4 10             	add    esp,0x10
c001d99a:	39 c7                	cmp    edi,eax
c001d99c:	7d 02                	jge    c001d9a0 <SoundCard::getSamples16(int, short*)+0x4c>
c001d99e:	89 c7                	mov    edi,eax
c001d9a0:	43                   	inc    ebx
c001d9a1:	83 fb 20             	cmp    ebx,0x20
c001d9a4:	75 d0                	jne    c001d976 <SoundCard::getSamples16(int, short*)+0x22>
c001d9a6:	83 c4 0c             	add    esp,0xc
c001d9a9:	89 f8                	mov    eax,edi
c001d9ab:	5b                   	pop    ebx
c001d9ac:	5e                   	pop    esi
c001d9ad:	5f                   	pop    edi
c001d9ae:	5d                   	pop    ebp
c001d9af:	c3                   	ret    

c001d9b0 <SoundCard::getSamples32(int, int*)>:
c001d9b0:	55                   	push   ebp
c001d9b1:	57                   	push   edi
c001d9b2:	31 ff                	xor    edi,edi
c001d9b4:	56                   	push   esi
c001d9b5:	31 f6                	xor    esi,esi
c001d9b7:	53                   	push   ebx
c001d9b8:	83 ec 10             	sub    esp,0x10
c001d9bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d9bf:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d9c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d9c7:	c1 e0 02             	shl    eax,0x2
c001d9ca:	50                   	push   eax
c001d9cb:	6a 00                	push   0x0
c001d9cd:	55                   	push   ebp
c001d9ce:	e8 1d 2b fe ff       	call   c00004f0 <memset>
c001d9d3:	83 c4 10             	add    esp,0x10
c001d9d6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d9dd:	85 c0                	test   eax,eax
c001d9df:	74 1b                	je     c001d9fc <SoundCard::getSamples32(int, int*)+0x4c>
c001d9e1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d9e5:	75 15                	jne    c001d9fc <SoundCard::getSamples32(int, int*)+0x4c>
c001d9e7:	53                   	push   ebx
c001d9e8:	55                   	push   ebp
c001d9e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9ed:	50                   	push   eax
c001d9ee:	e8 fd 03 00 00       	call   c001ddf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d9f3:	83 c4 10             	add    esp,0x10
c001d9f6:	39 c6                	cmp    esi,eax
c001d9f8:	7d 02                	jge    c001d9fc <SoundCard::getSamples32(int, int*)+0x4c>
c001d9fa:	89 c6                	mov    esi,eax
c001d9fc:	47                   	inc    edi
c001d9fd:	83 ff 20             	cmp    edi,0x20
c001da00:	75 d4                	jne    c001d9d6 <SoundCard::getSamples32(int, int*)+0x26>
c001da02:	85 f6                	test   esi,esi
c001da04:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001da0b:	75 0f                	jne    c001da1c <SoundCard::getSamples32(int, int*)+0x6c>
c001da0d:	85 c0                	test   eax,eax
c001da0f:	74 1b                	je     c001da2c <SoundCard::getSamples32(int, int*)+0x7c>
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001da16:	53                   	push   ebx
c001da17:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001da1a:	eb 0d                	jmp    c001da29 <SoundCard::getSamples32(int, int*)+0x79>
c001da1c:	85 c0                	test   eax,eax
c001da1e:	75 0c                	jne    c001da2c <SoundCard::getSamples32(int, int*)+0x7c>
c001da20:	83 ec 0c             	sub    esp,0xc
c001da23:	8b 03                	mov    eax,DWORD PTR [ebx]
c001da25:	53                   	push   ebx
c001da26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001da29:	83 c4 10             	add    esp,0x10
c001da2c:	83 c4 0c             	add    esp,0xc
c001da2f:	89 f0                	mov    eax,esi
c001da31:	5b                   	pop    ebx
c001da32:	5e                   	pop    esi
c001da33:	5f                   	pop    edi
c001da34:	5d                   	pop    ebp
c001da35:	c3                   	ret    

c001da36 <SoundCard::addChannel(SoundPort*)>:
c001da36:	83 ec 0c             	sub    esp,0xc
c001da39:	31 c0                	xor    eax,eax
c001da3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da3f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001da47:	74 1b                	je     c001da64 <SoundCard::addChannel(SoundPort*)+0x2e>
c001da49:	40                   	inc    eax
c001da4a:	83 f8 20             	cmp    eax,0x20
c001da4d:	75 f0                	jne    c001da3f <SoundCard::addChannel(SoundPort*)+0x9>
c001da4f:	83 ec 0c             	sub    esp,0xc
c001da52:	68 25 62 02 c0       	push   0xc0026225
c001da57:	e8 12 26 ff ff       	call   c001006e <KePanic(char const*)>
c001da5c:	83 c4 10             	add    esp,0x10
c001da5f:	83 c8 ff             	or     eax,0xffffffff
c001da62:	eb 0b                	jmp    c001da6f <SoundCard::addChannel(SoundPort*)+0x39>
c001da64:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001da68:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001da6f:	83 c4 0c             	add    esp,0xc
c001da72:	c3                   	ret    
c001da73:	90                   	nop

c001da74 <SoundCard::removeChannel(int)>:
c001da74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da7c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001da87:	c3                   	ret    

c001da88 <SoundPort::SoundPort(int, int, int, int)>:
c001da88:	83 ec 0c             	sub    esp,0xc
c001da8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da8f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001da96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da9a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001da9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daa2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001daa6:	89 10                	mov    DWORD PTR [eax],edx
c001daa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dab0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dab7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dabb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dabe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001dac3:	75 13                	jne    c001dad8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001dac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dac9:	8b 00                	mov    eax,DWORD PTR [eax]
c001dacb:	05 a0 0f 00 00       	add    eax,0xfa0
c001dad0:	01 c0                	add    eax,eax
c001dad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dad6:	66 90                	xchg   ax,ax
c001dad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dadc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dae0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001dae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dae7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daf2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001daf5:	c1 e0 02             	shl    eax,0x2
c001daf8:	83 ec 0c             	sub    esp,0xc
c001dafb:	50                   	push   eax
c001dafc:	e8 5e 22 ff ff       	call   c000fd5f <malloc>
c001db01:	83 c4 10             	add    esp,0x10
c001db04:	89 c2                	mov    edx,eax
c001db06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001db0d:	90                   	nop
c001db0e:	83 c4 0c             	add    esp,0xc
c001db11:	c3                   	ret    
c001db12:	66 90                	xchg   ax,ax

c001db14 <SoundPort::~SoundPort()>:
c001db14:	83 ec 0c             	sub    esp,0xc
c001db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001db1e:	85 c0                	test   eax,eax
c001db20:	74 1e                	je     c001db40 <SoundPort::~SoundPort()+0x2c>
c001db22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001db29:	83 ec 0c             	sub    esp,0xc
c001db2c:	50                   	push   eax
c001db2d:	e8 3d 22 ff ff       	call   c000fd6f <free>
c001db32:	83 c4 10             	add    esp,0x10
c001db35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db39:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db40:	90                   	nop
c001db41:	83 c4 0c             	add    esp,0xc
c001db44:	c3                   	ret    
c001db45:	90                   	nop
c001db46:	66 90                	xchg   ax,ax

c001db48 <SoundPort::unpause()>:
c001db48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db4c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001db50:	c3                   	ret    
c001db51:	90                   	nop
c001db52:	66 90                	xchg   ax,ax

c001db54 <SoundPort::pause()>:
c001db54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db58:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001db5c:	c3                   	ret    
c001db5d:	90                   	nop
c001db5e:	66 90                	xchg   ax,ax

c001db60 <SoundPort::getBufferUsed()>:
c001db60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001db67:	c3                   	ret    

c001db68 <SoundPort::getBufferSize()>:
c001db68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001db6f:	c3                   	ret    

c001db70 <SoundPort::buffer8(signed char*, int)>:
c001db70:	55                   	push   ebp
c001db71:	57                   	push   edi
c001db72:	56                   	push   esi
c001db73:	53                   	push   ebx
c001db74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db78:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001db7c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001db7f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001db82:	74 70                	je     c001dbf4 <SoundPort::buffer8(signed char*, int)+0x84>
c001db84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db88:	85 c9                	test   ecx,ecx
c001db8a:	7e 68                	jle    c001dbf4 <SoundPort::buffer8(signed char*, int)+0x84>
c001db8c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001db90:	8d 48 01             	lea    ecx,[eax+0x1]
c001db93:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001db96:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001db99:	89 f1                	mov    ecx,esi
c001db9b:	c1 e1 18             	shl    ecx,0x18
c001db9e:	29 f1                	sub    ecx,esi
c001dba0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dba3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dba6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dba9:	74 51                	je     c001dbfc <SoundPort::buffer8(signed char*, int)+0x8c>
c001dbab:	31 ff                	xor    edi,edi
c001dbad:	eb 25                	jmp    c001dbd4 <SoundPort::buffer8(signed char*, int)+0x64>
c001dbaf:	90                   	nop
c001dbb0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001dbb5:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dbb8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dbbb:	89 f3                	mov    ebx,esi
c001dbbd:	c1 e3 18             	shl    ebx,0x18
c001dbc0:	29 f3                	sub    ebx,esi
c001dbc2:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dbc5:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dbc8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dbcb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dbce:	74 1c                	je     c001dbec <SoundPort::buffer8(signed char*, int)+0x7c>
c001dbd0:	89 c7                	mov    edi,eax
c001dbd2:	66 90                	xchg   ax,ax
c001dbd4:	8d 47 01             	lea    eax,[edi+0x1]
c001dbd7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dbdb:	75 d3                	jne    c001dbb0 <SoundPort::buffer8(signed char*, int)+0x40>
c001dbdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbe1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbe4:	5b                   	pop    ebx
c001dbe5:	5e                   	pop    esi
c001dbe6:	5f                   	pop    edi
c001dbe7:	5d                   	pop    ebp
c001dbe8:	c3                   	ret    
c001dbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001dbec:	5b                   	pop    ebx
c001dbed:	8d 47 02             	lea    eax,[edi+0x2]
c001dbf0:	5e                   	pop    esi
c001dbf1:	5f                   	pop    edi
c001dbf2:	5d                   	pop    ebp
c001dbf3:	c3                   	ret    
c001dbf4:	5b                   	pop    ebx
c001dbf5:	31 c0                	xor    eax,eax
c001dbf7:	5e                   	pop    esi
c001dbf8:	5f                   	pop    edi
c001dbf9:	5d                   	pop    ebp
c001dbfa:	c3                   	ret    
c001dbfb:	90                   	nop
c001dbfc:	b8 01 00 00 00       	mov    eax,0x1
c001dc01:	eb e1                	jmp    c001dbe4 <SoundPort::buffer8(signed char*, int)+0x74>
c001dc03:	90                   	nop

c001dc04 <SoundPort::buffer16(short*, int)>:
c001dc04:	55                   	push   ebp
c001dc05:	57                   	push   edi
c001dc06:	56                   	push   esi
c001dc07:	53                   	push   ebx
c001dc08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc0c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001dc10:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001dc13:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001dc16:	74 70                	je     c001dc88 <SoundPort::buffer16(short*, int)+0x84>
c001dc18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc1c:	85 c9                	test   ecx,ecx
c001dc1e:	7e 68                	jle    c001dc88 <SoundPort::buffer16(short*, int)+0x84>
c001dc20:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001dc24:	8d 48 01             	lea    ecx,[eax+0x1]
c001dc27:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dc2a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001dc2d:	89 f1                	mov    ecx,esi
c001dc2f:	c1 e1 10             	shl    ecx,0x10
c001dc32:	29 f1                	sub    ecx,esi
c001dc34:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dc37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc3a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc3d:	74 51                	je     c001dc90 <SoundPort::buffer16(short*, int)+0x8c>
c001dc3f:	31 ff                	xor    edi,edi
c001dc41:	eb 25                	jmp    c001dc68 <SoundPort::buffer16(short*, int)+0x64>
c001dc43:	90                   	nop
c001dc44:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001dc49:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dc4c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dc4f:	89 f3                	mov    ebx,esi
c001dc51:	c1 e3 10             	shl    ebx,0x10
c001dc54:	29 f3                	sub    ebx,esi
c001dc56:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dc59:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dc5c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc5f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc62:	74 1c                	je     c001dc80 <SoundPort::buffer16(short*, int)+0x7c>
c001dc64:	89 c7                	mov    edi,eax
c001dc66:	66 90                	xchg   ax,ax
c001dc68:	8d 47 01             	lea    eax,[edi+0x1]
c001dc6b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dc6f:	75 d3                	jne    c001dc44 <SoundPort::buffer16(short*, int)+0x40>
c001dc71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc75:	8d 76 00             	lea    esi,[esi+0x0]
c001dc78:	5b                   	pop    ebx
c001dc79:	5e                   	pop    esi
c001dc7a:	5f                   	pop    edi
c001dc7b:	5d                   	pop    ebp
c001dc7c:	c3                   	ret    
c001dc7d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc80:	5b                   	pop    ebx
c001dc81:	8d 47 02             	lea    eax,[edi+0x2]
c001dc84:	5e                   	pop    esi
c001dc85:	5f                   	pop    edi
c001dc86:	5d                   	pop    ebp
c001dc87:	c3                   	ret    
c001dc88:	5b                   	pop    ebx
c001dc89:	31 c0                	xor    eax,eax
c001dc8b:	5e                   	pop    esi
c001dc8c:	5f                   	pop    edi
c001dc8d:	5d                   	pop    ebp
c001dc8e:	c3                   	ret    
c001dc8f:	90                   	nop
c001dc90:	b8 01 00 00 00       	mov    eax,0x1
c001dc95:	eb e1                	jmp    c001dc78 <SoundPort::buffer16(short*, int)+0x74>
c001dc97:	90                   	nop

c001dc98 <SoundPort::buffer32(int*, int)>:
c001dc98:	55                   	push   ebp
c001dc99:	57                   	push   edi
c001dc9a:	56                   	push   esi
c001dc9b:	53                   	push   ebx
c001dc9c:	83 ec 04             	sub    esp,0x4
c001dc9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dcaa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dcae:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcb1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dcb4:	74 5a                	je     c001dd10 <SoundPort::buffer32(int*, int)+0x78>
c001dcb6:	85 c0                	test   eax,eax
c001dcb8:	7e 56                	jle    c001dd10 <SoundPort::buffer32(int*, int)+0x78>
c001dcba:	8d 71 01             	lea    esi,[ecx+0x1]
c001dcbd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dcc0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001dcc3:	8b 37                	mov    esi,DWORD PTR [edi]
c001dcc5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001dcc8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dccb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dcce:	74 4c                	je     c001dd1c <SoundPort::buffer32(int*, int)+0x84>
c001dcd0:	31 f6                	xor    esi,esi
c001dcd2:	eb 1c                	jmp    c001dcf0 <SoundPort::buffer32(int*, int)+0x58>
c001dcd4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001dcd7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001dcda:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001dcdd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dce0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dce4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dce7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dcea:	74 18                	je     c001dd04 <SoundPort::buffer32(int*, int)+0x6c>
c001dcec:	89 de                	mov    esi,ebx
c001dcee:	66 90                	xchg   ax,ax
c001dcf0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001dcf3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001dcf6:	75 dc                	jne    c001dcd4 <SoundPort::buffer32(int*, int)+0x3c>
c001dcf8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dcfb:	90                   	nop
c001dcfc:	83 c4 04             	add    esp,0x4
c001dcff:	5b                   	pop    ebx
c001dd00:	5e                   	pop    esi
c001dd01:	5f                   	pop    edi
c001dd02:	5d                   	pop    ebp
c001dd03:	c3                   	ret    
c001dd04:	83 c4 04             	add    esp,0x4
c001dd07:	8d 46 02             	lea    eax,[esi+0x2]
c001dd0a:	5b                   	pop    ebx
c001dd0b:	5e                   	pop    esi
c001dd0c:	5f                   	pop    edi
c001dd0d:	5d                   	pop    ebp
c001dd0e:	c3                   	ret    
c001dd0f:	90                   	nop
c001dd10:	83 c4 04             	add    esp,0x4
c001dd13:	31 c0                	xor    eax,eax
c001dd15:	5b                   	pop    ebx
c001dd16:	5e                   	pop    esi
c001dd17:	5f                   	pop    edi
c001dd18:	5d                   	pop    ebp
c001dd19:	c3                   	ret    
c001dd1a:	66 90                	xchg   ax,ax
c001dd1c:	b8 01 00 00 00       	mov    eax,0x1
c001dd21:	eb d9                	jmp    c001dcfc <SoundPort::buffer32(int*, int)+0x64>
c001dd23:	90                   	nop

c001dd24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001dd24:	57                   	push   edi
c001dd25:	56                   	push   esi
c001dd26:	53                   	push   ebx
c001dd27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001dd2f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001dd35:	39 03                	cmp    DWORD PTR [ebx],eax
c001dd37:	74 13                	je     c001dd4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001dd39:	83 ec 0c             	sub    esp,0xc
c001dd3c:	68 78 62 02 c0       	push   0xc0026278
c001dd41:	e8 28 23 ff ff       	call   c001006e <KePanic(char const*)>
c001dd46:	83 c4 10             	add    esp,0x10
c001dd49:	8d 76 00             	lea    esi,[esi+0x0]
c001dd4c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001dd52:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001dd55:	74 11                	je     c001dd68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001dd57:	83 ec 0c             	sub    esp,0xc
c001dd5a:	68 b7 62 02 c0       	push   0xc00262b7
c001dd5f:	e8 0a 23 ff ff       	call   c001006e <KePanic(char const*)>
c001dd64:	83 c4 10             	add    esp,0x10
c001dd67:	90                   	nop
c001dd68:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001dd6e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dd71:	74 11                	je     c001dd84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001dd73:	83 ec 0c             	sub    esp,0xc
c001dd76:	68 b7 62 02 c0       	push   0xc00262b7
c001dd7b:	e8 ee 22 ff ff       	call   c001006e <KePanic(char const*)>
c001dd80:	83 c4 10             	add    esp,0x10
c001dd83:	90                   	nop
c001dd84:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001dd87:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001dd8b:	7e 07                	jle    c001dd94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001dd8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dd91:	8d 76 00             	lea    esi,[esi+0x0]
c001dd94:	85 f6                	test   esi,esi
c001dd96:	7e 2c                	jle    c001ddc4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001dd98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd9c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001dd9f:	31 c9                	xor    ecx,ecx
c001dda1:	01 d7                	add    edi,edx
c001dda3:	90                   	nop
c001dda4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001dda7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ddaa:	85 c0                	test   eax,eax
c001ddac:	79 06                	jns    c001ddb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ddae:	05 ff 7f 00 00       	add    eax,0x7fff
c001ddb3:	90                   	nop
c001ddb4:	c1 f8 0f             	sar    eax,0xf
c001ddb7:	83 c1 04             	add    ecx,0x4
c001ddba:	66 01 02             	add    WORD PTR [edx],ax
c001ddbd:	83 c2 02             	add    edx,0x2
c001ddc0:	39 d7                	cmp    edi,edx
c001ddc2:	75 e0                	jne    c001dda4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ddc4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ddc7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ddca:	83 ec 04             	sub    esp,0x4
c001ddcd:	29 f0                	sub    eax,esi
c001ddcf:	c1 e0 02             	shl    eax,0x2
c001ddd2:	50                   	push   eax
c001ddd3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ddd6:	50                   	push   eax
c001ddd7:	52                   	push   edx
c001ddd8:	e8 f3 25 fe ff       	call   c00003d0 <memmove>
c001dddd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dde0:	83 c4 10             	add    esp,0x10
c001dde3:	29 f0                	sub    eax,esi
c001dde5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dde8:	89 f0                	mov    eax,esi
c001ddea:	5b                   	pop    ebx
c001ddeb:	5e                   	pop    esi
c001ddec:	5f                   	pop    edi
c001dded:	c3                   	ret    
c001ddee:	66 90                	xchg   ax,ax

c001ddf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ddf0:	57                   	push   edi
c001ddf1:	56                   	push   esi
c001ddf2:	53                   	push   ebx
c001ddf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddf7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ddfb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ddff:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001de05:	39 06                	cmp    DWORD PTR [esi],eax
c001de07:	74 13                	je     c001de1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001de09:	83 ec 0c             	sub    esp,0xc
c001de0c:	68 98 62 02 c0       	push   0xc0026298
c001de11:	e8 58 22 ff ff       	call   c001006e <KePanic(char const*)>
c001de16:	83 c4 10             	add    esp,0x10
c001de19:	8d 76 00             	lea    esi,[esi+0x0]
c001de1c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001de22:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001de25:	74 11                	je     c001de38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001de27:	83 ec 0c             	sub    esp,0xc
c001de2a:	68 d3 62 02 c0       	push   0xc00262d3
c001de2f:	e8 3a 22 ff ff       	call   c001006e <KePanic(char const*)>
c001de34:	83 c4 10             	add    esp,0x10
c001de37:	90                   	nop
c001de38:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001de3e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001de41:	74 11                	je     c001de54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001de43:	83 ec 0c             	sub    esp,0xc
c001de46:	68 d3 62 02 c0       	push   0xc00262d3
c001de4b:	e8 1e 22 ff ff       	call   c001006e <KePanic(char const*)>
c001de50:	83 c4 10             	add    esp,0x10
c001de53:	90                   	nop
c001de54:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001de57:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001de5b:	7e 07                	jle    c001de64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001de5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de61:	8d 76 00             	lea    esi,[esi+0x0]
c001de64:	85 ff                	test   edi,edi
c001de66:	7e 1c                	jle    c001de84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001de68:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001de6f:	31 c0                	xor    eax,eax
c001de71:	8d 76 00             	lea    esi,[esi+0x0]
c001de74:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001de77:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001de7a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001de7d:	83 c0 04             	add    eax,0x4
c001de80:	39 c1                	cmp    ecx,eax
c001de82:	75 f0                	jne    c001de74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001de84:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001de87:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001de8a:	83 ec 04             	sub    esp,0x4
c001de8d:	29 f8                	sub    eax,edi
c001de8f:	c1 e0 02             	shl    eax,0x2
c001de92:	50                   	push   eax
c001de93:	8d 04 ba             	lea    eax,[edx+edi*4]
c001de96:	50                   	push   eax
c001de97:	52                   	push   edx
c001de98:	e8 33 25 fe ff       	call   c00003d0 <memmove>
c001de9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001dea0:	83 c4 10             	add    esp,0x10
c001dea3:	29 f8                	sub    eax,edi
c001dea5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001dea8:	89 f8                	mov    eax,edi
c001deaa:	5b                   	pop    ebx
c001deab:	5e                   	pop    esi
c001deac:	5f                   	pop    edi
c001dead:	c3                   	ret    

c001deae <PCI::open(int, int, void*)>:
c001deae:	83 ec 18             	sub    esp,0x18
c001deb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001deb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001deb9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001debf:	8b 10                	mov    edx,DWORD PTR [eax]
c001dec1:	50                   	push   eax
c001dec2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dec5:	31 c0                	xor    eax,eax
c001dec7:	83 c4 1c             	add    esp,0x1c
c001deca:	c3                   	ret    
c001decb:	90                   	nop

c001decc <PCI::close(int, int, void*)>:
c001decc:	31 c0                	xor    eax,eax
c001dece:	c3                   	ret    
c001decf:	90                   	nop

c001ded0 <PCI::PCI()>:
c001ded0:	83 ec 0c             	sub    esp,0xc
c001ded3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded7:	83 ec 08             	sub    esp,0x8
c001deda:	68 ef 62 02 c0       	push   0xc00262ef
c001dedf:	50                   	push   eax
c001dee0:	e8 7f aa fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001dee5:	83 c4 10             	add    esp,0x10
c001dee8:	ba fc 63 02 c0       	mov    edx,0xc00263fc
c001deed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def1:	89 10                	mov    DWORD PTR [eax],edx
c001def3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001df01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df05:	a3 a0 04 03 c0       	mov    ds:0xc00304a0,eax
c001df0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df14:	0f b6 d0             	movzx  edx,al
c001df17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001df22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df2c:	0f b6 d0             	movzx  edx,al
c001df2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df33:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001df38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df42:	8d 50 01             	lea    edx,[eax+0x1]
c001df45:	88 d1                	mov    cl,dl
c001df47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df4b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001df51:	0f b6 d0             	movzx  edx,al
c001df54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df5c:	83 c9 c0             	or     ecx,0xffffffc0
c001df5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df63:	90                   	nop
c001df64:	83 c4 0c             	add    esp,0xc
c001df67:	c3                   	ret    

c001df68 <PCI::readBAR8(unsigned int, int)>:
c001df68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df70:	f6 c2 01             	test   dl,0x1
c001df73:	74 07                	je     c001df7c <PCI::readBAR8(unsigned int, int)+0x14>
c001df75:	83 e2 fc             	and    edx,0xfffffffc
c001df78:	01 c2                	add    edx,eax
c001df7a:	ec                   	in     al,dx
c001df7b:	c3                   	ret    
c001df7c:	83 e2 f0             	and    edx,0xfffffff0
c001df7f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001df82:	c3                   	ret    
c001df83:	90                   	nop

c001df84 <PCI::readBAR16(unsigned int, int)>:
c001df84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df8c:	f6 c2 01             	test   dl,0x1
c001df8f:	74 08                	je     c001df99 <PCI::readBAR16(unsigned int, int)+0x15>
c001df91:	83 e2 fc             	and    edx,0xfffffffc
c001df94:	01 c2                	add    edx,eax
c001df96:	66 ed                	in     ax,dx
c001df98:	c3                   	ret    
c001df99:	83 e2 f0             	and    edx,0xfffffff0
c001df9c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dfa0:	c3                   	ret    
c001dfa1:	90                   	nop

c001dfa2 <PCI::readBAR32(unsigned int, int)>:
c001dfa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfaa:	f6 c2 01             	test   dl,0x1
c001dfad:	74 07                	je     c001dfb6 <PCI::readBAR32(unsigned int, int)+0x14>
c001dfaf:	83 e2 fc             	and    edx,0xfffffffc
c001dfb2:	01 c2                	add    edx,eax
c001dfb4:	ed                   	in     eax,dx
c001dfb5:	c3                   	ret    
c001dfb6:	83 e2 f0             	and    edx,0xfffffff0
c001dfb9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dfbc:	c3                   	ret    
c001dfbd:	90                   	nop

c001dfbe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dfbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfca:	f6 c2 01             	test   dl,0x1
c001dfcd:	74 07                	je     c001dfd6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dfcf:	83 e2 fc             	and    edx,0xfffffffc
c001dfd2:	01 ca                	add    edx,ecx
c001dfd4:	ee                   	out    dx,al
c001dfd5:	c3                   	ret    
c001dfd6:	83 e2 f0             	and    edx,0xfffffff0
c001dfd9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dfdc:	c3                   	ret    
c001dfdd:	90                   	nop

c001dfde <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dfde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfe6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfea:	f6 c2 01             	test   dl,0x1
c001dfed:	74 08                	je     c001dff7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dfef:	83 e2 fc             	and    edx,0xfffffffc
c001dff2:	01 ca                	add    edx,ecx
c001dff4:	66 ef                	out    dx,ax
c001dff6:	c3                   	ret    
c001dff7:	83 e2 f0             	and    edx,0xfffffff0
c001dffa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dffe:	c3                   	ret    
c001dfff:	90                   	nop

c001e000 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001e000:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e008:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e00c:	f6 c2 01             	test   dl,0x1
c001e00f:	74 07                	je     c001e018 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001e011:	83 e2 fc             	and    edx,0xfffffffc
c001e014:	01 ca                	add    edx,ecx
c001e016:	ef                   	out    dx,eax
c001e017:	c3                   	ret    
c001e018:	83 e2 f0             	and    edx,0xfffffff0
c001e01b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001e01e:	c3                   	ret    
c001e01f:	90                   	nop

c001e020 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e020:	55                   	push   ebp
c001e021:	57                   	push   edi
c001e022:	56                   	push   esi
c001e023:	53                   	push   ebx
c001e024:	83 ec 0c             	sub    esp,0xc
c001e027:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001e02c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001e030:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e034:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e038:	83 fe 07             	cmp    esi,0x7
c001e03b:	76 10                	jbe    c001e04d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001e03d:	83 ec 0c             	sub    esp,0xc
c001e040:	68 f7 62 02 c0       	push   0xc00262f7
c001e045:	e8 24 20 ff ff       	call   c001006e <KePanic(char const*)>
c001e04a:	83 c4 10             	add    esp,0x10
c001e04d:	0f b6 db             	movzx  ebx,bl
c001e050:	83 fb 0f             	cmp    ebx,0xf
c001e053:	76 10                	jbe    c001e065 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001e055:	83 ec 0c             	sub    esp,0xc
c001e058:	68 27 63 02 c0       	push   0xc0026327
c001e05d:	e8 0c 20 ff ff       	call   c001006e <KePanic(char const*)>
c001e062:	83 c4 10             	add    esp,0x10
c001e065:	8d 04 36             	lea    eax,[esi+esi*1]
c001e068:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e06d:	83 c8 f0             	or     eax,0xfffffff0
c001e070:	ee                   	out    dx,al
c001e071:	ba fa 0c 00 00       	mov    edx,0xcfa
c001e076:	89 e8                	mov    eax,ebp
c001e078:	ee                   	out    dx,al
c001e079:	83 c4 0c             	add    esp,0xc
c001e07c:	89 d8                	mov    eax,ebx
c001e07e:	89 f9                	mov    ecx,edi
c001e080:	c1 e0 08             	shl    eax,0x8
c001e083:	0f b6 d9             	movzx  ebx,cl
c001e086:	83 e3 fc             	and    ebx,0xfffffffc
c001e089:	09 d8                	or     eax,ebx
c001e08b:	5b                   	pop    ebx
c001e08c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e091:	5e                   	pop    esi
c001e092:	5f                   	pop    edi
c001e093:	5d                   	pop    ebp
c001e094:	c3                   	ret    
c001e095:	90                   	nop

c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e096:	57                   	push   edi
c001e097:	56                   	push   esi
c001e098:	53                   	push   ebx
c001e099:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e09d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0a1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e0a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e0af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e0b3:	83 ff 01             	cmp    edi,0x1
c001e0b6:	75 3f                	jne    c001e0f7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e0b8:	89 de                	mov    esi,ebx
c001e0ba:	0f b6 c0             	movzx  eax,al
c001e0bd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e0c3:	c1 e0 10             	shl    eax,0x10
c001e0c6:	0f b6 c9             	movzx  ecx,cl
c001e0c9:	09 f0                	or     eax,esi
c001e0cb:	c1 e1 08             	shl    ecx,0x8
c001e0ce:	0f b6 d2             	movzx  edx,dl
c001e0d1:	09 c8                	or     eax,ecx
c001e0d3:	c1 e2 0b             	shl    edx,0xb
c001e0d6:	09 d0                	or     eax,edx
c001e0d8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e0dd:	0d 00 00 00 80       	or     eax,0x80000000
c001e0e2:	ef                   	out    dx,eax
c001e0e3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e0e8:	ed                   	in     eax,dx
c001e0e9:	83 e3 02             	and    ebx,0x2
c001e0ec:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e0f3:	d3 e8                	shr    eax,cl
c001e0f5:	eb 44                	jmp    c001e13b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e0f7:	83 ff 02             	cmp    edi,0x2
c001e0fa:	75 2d                	jne    c001e129 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	0f b6 c9             	movzx  ecx,cl
c001e102:	0f b6 d2             	movzx  edx,dl
c001e105:	0f b6 fb             	movzx  edi,bl
c001e108:	0f b6 c0             	movzx  eax,al
c001e10b:	57                   	push   edi
c001e10c:	51                   	push   ecx
c001e10d:	52                   	push   edx
c001e10e:	50                   	push   eax
c001e10f:	56                   	push   esi
c001e110:	e8 0b ff ff ff       	call   c001e020 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e115:	89 c2                	mov    edx,eax
c001e117:	ed                   	in     eax,dx
c001e118:	83 e3 02             	and    ebx,0x2
c001e11b:	83 c4 20             	add    esp,0x20
c001e11e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e125:	d3 e8                	shr    eax,cl
c001e127:	eb 12                	jmp    c001e13b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e129:	83 ec 0c             	sub    esp,0xc
c001e12c:	68 57 63 02 c0       	push   0xc0026357
c001e131:	e8 38 1f ff ff       	call   c001006e <KePanic(char const*)>
c001e136:	83 c4 10             	add    esp,0x10
c001e139:	31 c0                	xor    eax,eax
c001e13b:	5b                   	pop    ebx
c001e13c:	5e                   	pop    esi
c001e13d:	5f                   	pop    edi
c001e13e:	c3                   	ret    
c001e13f:	90                   	nop

c001e140 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e140:	83 ec 18             	sub    esp,0x18
c001e143:	6a 00                	push   0x0
c001e145:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e14a:	50                   	push   eax
c001e14b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e150:	50                   	push   eax
c001e151:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e156:	50                   	push   eax
c001e157:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e15b:	e8 36 ff ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e160:	83 c4 2c             	add    esp,0x2c
c001e163:	c3                   	ret    

c001e164 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e164:	83 ec 18             	sub    esp,0x18
c001e167:	6a 0e                	push   0xe
c001e169:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e16e:	50                   	push   eax
c001e16f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e174:	50                   	push   eax
c001e175:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e17a:	50                   	push   eax
c001e17b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e17f:	e8 12 ff ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e184:	83 c4 2c             	add    esp,0x2c
c001e187:	0f b6 c0             	movzx  eax,al
c001e18a:	c3                   	ret    
c001e18b:	90                   	nop

c001e18c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e18c:	55                   	push   ebp
c001e18d:	57                   	push   edi
c001e18e:	56                   	push   esi
c001e18f:	53                   	push   ebx
c001e190:	83 ec 18             	sub    esp,0x18
c001e193:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e198:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e19d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e1a2:	6a 0a                	push   0xa
c001e1a4:	56                   	push   esi
c001e1a5:	55                   	push   ebp
c001e1a6:	57                   	push   edi
c001e1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1ab:	e8 e6 fe ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1b0:	83 c4 14             	add    esp,0x14
c001e1b3:	89 c3                	mov    ebx,eax
c001e1b5:	6a 0a                	push   0xa
c001e1b7:	0f b6 db             	movzx  ebx,bl
c001e1ba:	56                   	push   esi
c001e1bb:	55                   	push   ebp
c001e1bc:	57                   	push   edi
c001e1bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1c1:	e8 d0 fe ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1c6:	83 c4 2c             	add    esp,0x2c
c001e1c9:	25 00 ff 00 00       	and    eax,0xff00
c001e1ce:	09 d8                	or     eax,ebx
c001e1d0:	5b                   	pop    ebx
c001e1d1:	5e                   	pop    esi
c001e1d2:	5f                   	pop    edi
c001e1d3:	5d                   	pop    ebp
c001e1d4:	c3                   	ret    
c001e1d5:	90                   	nop

c001e1d6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e1d6:	83 ec 18             	sub    esp,0x18
c001e1d9:	6a 08                	push   0x8
c001e1db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1e0:	50                   	push   eax
c001e1e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1e6:	50                   	push   eax
c001e1e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1ec:	50                   	push   eax
c001e1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1f1:	e8 a0 fe ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1f6:	83 c4 2c             	add    esp,0x2c
c001e1f9:	0f b6 c4             	movzx  eax,ah
c001e1fc:	c3                   	ret    
c001e1fd:	90                   	nop

c001e1fe <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e1fe:	83 ec 18             	sub    esp,0x18
c001e201:	6a 08                	push   0x8
c001e203:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e208:	50                   	push   eax
c001e209:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e20e:	50                   	push   eax
c001e20f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e214:	50                   	push   eax
c001e215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e219:	e8 78 fe ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e21e:	83 c4 2c             	add    esp,0x2c
c001e221:	c3                   	ret    

c001e222 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e222:	83 ec 18             	sub    esp,0x18
c001e225:	6a 3c                	push   0x3c
c001e227:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e22c:	50                   	push   eax
c001e22d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e232:	50                   	push   eax
c001e233:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e238:	50                   	push   eax
c001e239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e23d:	e8 54 fe ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e242:	83 c4 2c             	add    esp,0x2c
c001e245:	c3                   	ret    

c001e246 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e246:	83 ec 18             	sub    esp,0x18
c001e249:	6a 18                	push   0x18
c001e24b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e250:	50                   	push   eax
c001e251:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e256:	50                   	push   eax
c001e257:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e25c:	50                   	push   eax
c001e25d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e261:	e8 30 fe ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e266:	83 c4 2c             	add    esp,0x2c
c001e269:	0f b6 c4             	movzx  eax,ah
c001e26c:	c3                   	ret    
c001e26d:	90                   	nop

c001e26e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e26e:	55                   	push   ebp
c001e26f:	57                   	push   edi
c001e270:	56                   	push   esi
c001e271:	53                   	push   ebx
c001e272:	83 ec 28             	sub    esp,0x28
c001e275:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e279:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e27e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e283:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e288:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e28f:	8d 43 12             	lea    eax,[ebx+0x12]
c001e292:	83 c3 10             	add    ebx,0x10
c001e295:	0f b6 c0             	movzx  eax,al
c001e298:	0f b6 db             	movzx  ebx,bl
c001e29b:	50                   	push   eax
c001e29c:	51                   	push   ecx
c001e29d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e2a1:	57                   	push   edi
c001e2a2:	55                   	push   ebp
c001e2a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e2a7:	e8 ea fd ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2ac:	83 c4 14             	add    esp,0x14
c001e2af:	89 c6                	mov    esi,eax
c001e2b1:	53                   	push   ebx
c001e2b2:	c1 e6 10             	shl    esi,0x10
c001e2b5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e2b9:	51                   	push   ecx
c001e2ba:	57                   	push   edi
c001e2bb:	55                   	push   ebp
c001e2bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e2c0:	e8 d1 fd ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2c5:	83 c4 3c             	add    esp,0x3c
c001e2c8:	0f b7 c0             	movzx  eax,ax
c001e2cb:	5b                   	pop    ebx
c001e2cc:	09 f0                	or     eax,esi
c001e2ce:	5e                   	pop    esi
c001e2cf:	5f                   	pop    edi
c001e2d0:	5d                   	pop    ebp
c001e2d1:	c3                   	ret    

c001e2d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e2d2:	55                   	push   ebp
c001e2d3:	57                   	push   edi
c001e2d4:	56                   	push   esi
c001e2d5:	53                   	push   ebx
c001e2d6:	83 ec 0c             	sub    esp,0xc
c001e2d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e2dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e2e1:	89 f5                	mov    ebp,esi
c001e2e3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e2e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e2ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e2f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2f9:	83 f9 01             	cmp    ecx,0x1
c001e2fc:	75 5d                	jne    c001e35b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e2fe:	0f b6 c8             	movzx  ecx,al
c001e301:	0f b6 d2             	movzx  edx,dl
c001e304:	c1 e1 10             	shl    ecx,0x10
c001e307:	c1 e2 0b             	shl    edx,0xb
c001e30a:	89 f0                	mov    eax,esi
c001e30c:	25 fc 00 00 00       	and    eax,0xfc
c001e311:	09 c1                	or     ecx,eax
c001e313:	89 e8                	mov    eax,ebp
c001e315:	0f b6 c0             	movzx  eax,al
c001e318:	c1 e0 08             	shl    eax,0x8
c001e31b:	09 c1                	or     ecx,eax
c001e31d:	09 d1                	or     ecx,edx
c001e31f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e324:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e32a:	89 c8                	mov    eax,ecx
c001e32c:	ef                   	out    dx,eax
c001e32d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e332:	ed                   	in     eax,dx
c001e333:	0f b7 db             	movzx  ebx,bx
c001e336:	83 e6 02             	and    esi,0x2
c001e339:	74 0a                	je     c001e345 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e33b:	0f b7 d0             	movzx  edx,ax
c001e33e:	c1 e3 10             	shl    ebx,0x10
c001e341:	09 d3                	or     ebx,edx
c001e343:	eb 05                	jmp    c001e34a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e345:	66 31 c0             	xor    ax,ax
c001e348:	09 c3                	or     ebx,eax
c001e34a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e34f:	89 c8                	mov    eax,ecx
c001e351:	ef                   	out    dx,eax
c001e352:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e357:	89 d8                	mov    eax,ebx
c001e359:	eb 41                	jmp    c001e39c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e35b:	83 f9 02             	cmp    ecx,0x2
c001e35e:	75 45                	jne    c001e3a5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e360:	83 ec 0c             	sub    esp,0xc
c001e363:	0f b6 d2             	movzx  edx,dl
c001e366:	89 f1                	mov    ecx,esi
c001e368:	0f b6 c0             	movzx  eax,al
c001e36b:	0f b6 f1             	movzx  esi,cl
c001e36e:	89 e9                	mov    ecx,ebp
c001e370:	56                   	push   esi
c001e371:	0f b6 c9             	movzx  ecx,cl
c001e374:	51                   	push   ecx
c001e375:	52                   	push   edx
c001e376:	50                   	push   eax
c001e377:	57                   	push   edi
c001e378:	e8 a3 fc ff ff       	call   c001e020 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e37d:	89 c2                	mov    edx,eax
c001e37f:	ed                   	in     eax,dx
c001e380:	83 c4 20             	add    esp,0x20
c001e383:	0f b7 db             	movzx  ebx,bx
c001e386:	f6 c2 02             	test   dl,0x2
c001e389:	74 0c                	je     c001e397 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e38b:	0f b7 c8             	movzx  ecx,ax
c001e38e:	89 d8                	mov    eax,ebx
c001e390:	c1 e0 10             	shl    eax,0x10
c001e393:	09 c8                	or     eax,ecx
c001e395:	eb 05                	jmp    c001e39c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e397:	66 31 c0             	xor    ax,ax
c001e39a:	09 d8                	or     eax,ebx
c001e39c:	ef                   	out    dx,eax
c001e39d:	83 c4 0c             	add    esp,0xc
c001e3a0:	5b                   	pop    ebx
c001e3a1:	5e                   	pop    esi
c001e3a2:	5f                   	pop    edi
c001e3a3:	5d                   	pop    ebp
c001e3a4:	c3                   	ret    
c001e3a5:	c7 44 24 20 57 63 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026357
c001e3ad:	83 c4 0c             	add    esp,0xc
c001e3b0:	5b                   	pop    ebx
c001e3b1:	5e                   	pop    esi
c001e3b2:	5f                   	pop    edi
c001e3b3:	5d                   	pop    ebp
c001e3b4:	e9 b5 1c ff ff       	jmp    c001006e <KePanic(char const*)>
c001e3b9:	90                   	nop

c001e3ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e3ba:	55                   	push   ebp
c001e3bb:	57                   	push   edi
c001e3bc:	56                   	push   esi
c001e3bd:	53                   	push   ebx
c001e3be:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e3c4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e3cb:	80 3d ac 04 03 c0 00 	cmp    BYTE PTR ds:0xc00304ac,0x0
c001e3d2:	0f 85 bd 00 00 00    	jne    c001e495 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e3d8:	83 ec 0c             	sub    esp,0xc
c001e3db:	68 14 01 00 00       	push   0x114
c001e3e0:	e8 7a 19 ff ff       	call   c000fd5f <malloc>
c001e3e5:	83 c4 0c             	add    esp,0xc
c001e3e8:	89 c3                	mov    ebx,eax
c001e3ea:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c001e3f0:	68 5d 63 02 c0       	push   0xc002635d
c001e3f5:	50                   	push   eax
c001e3f6:	e8 8f 9d fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e3fb:	83 c4 10             	add    esp,0x10
c001e3fe:	85 db                	test   ebx,ebx
c001e400:	0f 84 67 02 00 00    	je     c001e66d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e406:	56                   	push   esi
c001e407:	56                   	push   esi
c001e408:	6a 01                	push   0x1
c001e40a:	53                   	push   ebx
c001e40b:	e8 98 9d fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e410:	83 c4 10             	add    esp,0x10
c001e413:	85 c0                	test   eax,eax
c001e415:	0f 85 52 02 00 00    	jne    c001e66d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e41b:	52                   	push   edx
c001e41c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e420:	50                   	push   eax
c001e421:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e425:	50                   	push   eax
c001e426:	53                   	push   ebx
c001e427:	e8 7e a0 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e42c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e430:	40                   	inc    eax
c001e431:	89 04 24             	mov    DWORD PTR [esp],eax
c001e434:	e8 26 19 ff ff       	call   c000fd5f <malloc>
c001e439:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e43d:	a3 a8 04 03 c0       	mov    ds:0xc00304a8,eax
c001e442:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e446:	59                   	pop    ecx
c001e447:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e449:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e44d:	51                   	push   ecx
c001e44e:	50                   	push   eax
c001e44f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e453:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e457:	53                   	push   ebx
c001e458:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e45b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e45f:	83 c4 20             	add    esp,0x20
c001e462:	89 c8                	mov    eax,ecx
c001e464:	99                   	cdq    
c001e465:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e469:	0f 85 fe 01 00 00    	jne    c001e66d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e46f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e473:	0f 85 f4 01 00 00    	jne    c001e66d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e479:	83 ec 0c             	sub    esp,0xc
c001e47c:	53                   	push   ebx
c001e47d:	e8 84 9d fe ff       	call   c0008206 <File::close()>
c001e482:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e486:	c6 05 ac 04 03 c0 01 	mov    BYTE PTR ds:0xc00304ac,0x1
c001e48d:	a3 a4 04 03 c0       	mov    ds:0xc00304a4,eax
c001e492:	83 c4 10             	add    esp,0x10
c001e495:	a1 a4 04 03 c0       	mov    eax,ds:0xc00304a4
c001e49a:	8b 1d a8 04 03 c0    	mov    ebx,DWORD PTR ds:0xc00304a8
c001e4a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e4a4:	31 f6                	xor    esi,esi
c001e4a6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e4ae:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e4b5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e4ba:	31 c9                	xor    ecx,ecx
c001e4bc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e4c4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e4c9:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e4d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e4d5:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e4dd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e4e1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e4e5:	0f 8e 82 01 00 00    	jle    c001e66d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e4eb:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e4ee:	d4 40                	aam    0x40
c001e4f0:	d5 39                	aad    0x39
c001e4f2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e4f6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e4fa:	d4 40                	aam    0x40
c001e4fc:	d5 39                	aad    0x39
c001e4fe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e502:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e506:	d4 40                	aam    0x40
c001e508:	d5 39                	aad    0x39
c001e50a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e50e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e512:	d4 40                	aam    0x40
c001e514:	d5 39                	aad    0x39
c001e516:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e51a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e51e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e522:	3c 56                	cmp    al,0x56
c001e524:	74 43                	je     c001e569 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e526:	d4 40                	aam    0x40
c001e528:	d5 39                	aad    0x39
c001e52a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e52d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e531:	0f b6 c9             	movzx  ecx,cl
c001e534:	c1 e1 04             	shl    ecx,0x4
c001e537:	d4 40                	aam    0x40
c001e539:	d5 39                	aad    0x39
c001e53b:	83 e8 30             	sub    eax,0x30
c001e53e:	0f b6 c0             	movzx  eax,al
c001e541:	09 c1                	or     ecx,eax
c001e543:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e547:	c1 e1 04             	shl    ecx,0x4
c001e54a:	d4 40                	aam    0x40
c001e54c:	d5 39                	aad    0x39
c001e54e:	83 e8 30             	sub    eax,0x30
c001e551:	0f b6 c0             	movzx  eax,al
c001e554:	09 c1                	or     ecx,eax
c001e556:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e55a:	c1 e1 04             	shl    ecx,0x4
c001e55d:	d4 40                	aam    0x40
c001e55f:	d5 39                	aad    0x39
c001e561:	83 e8 30             	sub    eax,0x30
c001e564:	0f b6 c0             	movzx  eax,al
c001e567:	09 c1                	or     ecx,eax
c001e569:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e56d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e571:	3c 58                	cmp    al,0x58
c001e573:	74 47                	je     c001e5bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e575:	d4 40                	aam    0x40
c001e577:	d5 39                	aad    0x39
c001e579:	8d 50 d0             	lea    edx,[eax-0x30]
c001e57c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e580:	0f b6 d2             	movzx  edx,dl
c001e583:	c1 e2 04             	shl    edx,0x4
c001e586:	d4 40                	aam    0x40
c001e588:	d5 39                	aad    0x39
c001e58a:	83 e8 30             	sub    eax,0x30
c001e58d:	0f b6 c0             	movzx  eax,al
c001e590:	09 c2                	or     edx,eax
c001e592:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e596:	c1 e2 04             	shl    edx,0x4
c001e599:	d4 40                	aam    0x40
c001e59b:	d5 39                	aad    0x39
c001e59d:	83 e8 30             	sub    eax,0x30
c001e5a0:	0f b6 c0             	movzx  eax,al
c001e5a3:	09 c2                	or     edx,eax
c001e5a5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e5a9:	c1 e2 04             	shl    edx,0x4
c001e5ac:	d4 40                	aam    0x40
c001e5ae:	d5 39                	aad    0x39
c001e5b0:	83 e8 30             	sub    eax,0x30
c001e5b3:	0f b6 c0             	movzx  eax,al
c001e5b6:	09 c2                	or     edx,eax
c001e5b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5bc:	83 c6 10             	add    esi,0x10
c001e5bf:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e5c3:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e5c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e5cb:	83 fa 0a             	cmp    edx,0xa
c001e5ce:	74 0b                	je     c001e5db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e5d0:	47                   	inc    edi
c001e5d1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e5d5:	75 19                	jne    c001e5f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e5d7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e5db:	31 c0                	xor    eax,eax
c001e5dd:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e5e2:	0f 94 c0             	sete   al
c001e5e5:	01 c6                	add    esi,eax
c001e5e7:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e5ec:	75 0b                	jne    c001e5f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e5ee:	eb 14                	jmp    c001e604 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e5f0:	46                   	inc    esi
c001e5f1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e5f4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e5f7:	eb ca                	jmp    c001e5c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e5f9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e5fe:	0f 85 dd fe ff ff    	jne    c001e4e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e604:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e609:	74 10                	je     c001e61b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e60b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e610:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e615:	0f 85 c6 fe ff ff    	jne    c001e4e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e61b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e61f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e623:	83 e8 30             	sub    eax,0x30
c001e626:	83 ef 30             	sub    edi,0x30
c001e629:	c1 e0 04             	shl    eax,0x4
c001e62c:	09 f8                	or     eax,edi
c001e62e:	0f b6 c0             	movzx  eax,al
c001e631:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e635:	0f 85 a6 fe ff ff    	jne    c001e4e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e63b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e63f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e643:	83 e8 30             	sub    eax,0x30
c001e646:	83 ef 30             	sub    edi,0x30
c001e649:	c1 e0 04             	shl    eax,0x4
c001e64c:	09 f8                	or     eax,edi
c001e64e:	0f b6 c0             	movzx  eax,al
c001e651:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e655:	0f 85 86 fe ff ff    	jne    c001e4e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e65b:	50                   	push   eax
c001e65c:	50                   	push   eax
c001e65d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e661:	50                   	push   eax
c001e662:	55                   	push   ebp
c001e663:	e8 d8 1f fe ff       	call   c0000640 <strcpy>
c001e668:	83 c4 10             	add    esp,0x10
c001e66b:	eb 06                	jmp    c001e673 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e66d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e671:	31 ed                	xor    ebp,ebp
c001e673:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e679:	89 e8                	mov    eax,ebp
c001e67b:	5b                   	pop    ebx
c001e67c:	5e                   	pop    esi
c001e67d:	5f                   	pop    edi
c001e67e:	5d                   	pop    ebp
c001e67f:	c3                   	ret    

c001e680 <PCI::checkBus(unsigned char)>:
c001e680:	56                   	push   esi
c001e681:	53                   	push   ebx
c001e682:	31 db                	xor    ebx,ebx
c001e684:	51                   	push   ecx
c001e685:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e68a:	52                   	push   edx
c001e68b:	53                   	push   ebx
c001e68c:	43                   	inc    ebx
c001e68d:	56                   	push   esi
c001e68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e692:	e8 6f 03 00 00       	call   c001ea06 <PCI::checkDevice(unsigned char, unsigned char)>
c001e697:	83 c4 10             	add    esp,0x10
c001e69a:	83 fb 20             	cmp    ebx,0x20
c001e69d:	75 eb                	jne    c001e68a <PCI::checkBus(unsigned char)+0xa>
c001e69f:	58                   	pop    eax
c001e6a0:	5b                   	pop    ebx
c001e6a1:	5e                   	pop    esi
c001e6a2:	c3                   	ret    
c001e6a3:	90                   	nop

c001e6a4 <PCI::foundDevice(PCIDeviceInfo)>:
c001e6a4:	55                   	push   ebp
c001e6a5:	57                   	push   edi
c001e6a6:	56                   	push   esi
c001e6a7:	53                   	push   ebx
c001e6a8:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e6ae:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e6b6:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e6bd:	3d ff ff 00 00       	cmp    eax,0xffff
c001e6c2:	0f 84 b7 01 00 00    	je     c001e87f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e6c8:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e6d0:	66 81 fb 06 04       	cmp    bx,0x406
c001e6d5:	75 32                	jne    c001e709 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e6d7:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e6df:	50                   	push   eax
c001e6e0:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e6e8:	50                   	push   eax
c001e6e9:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e6f1:	50                   	push   eax
c001e6f2:	55                   	push   ebp
c001e6f3:	e8 4e fb ff ff       	call   c001e246 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e6f8:	59                   	pop    ecx
c001e6f9:	0f b6 c0             	movzx  eax,al
c001e6fc:	5b                   	pop    ebx
c001e6fd:	50                   	push   eax
c001e6fe:	55                   	push   ebp
c001e6ff:	e8 7c ff ff ff       	call   c001e680 <PCI::checkBus(unsigned char)>
c001e704:	e9 16 01 00 00       	jmp    c001e81f <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e709:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e710:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e716:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e71a:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e721:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e729:	85 c0                	test   eax,eax
c001e72b:	74 36                	je     c001e763 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e72d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e730:	85 d2                	test   edx,edx
c001e732:	74 2b                	je     c001e75f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e734:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e73a:	31 f9                	xor    ecx,edi
c001e73c:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e742:	75 1b                	jne    c001e75f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e744:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e748:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e74e:	75 0f                	jne    c001e75f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e750:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e757:	39 f2                	cmp    edx,esi
c001e759:	0f 84 20 01 00 00    	je     c001e87f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e75f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e761:	eb c6                	jmp    c001e729 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e763:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e767:	be 90 63 02 c0       	mov    esi,0xc0026390
c001e76c:	b9 07 00 00 00       	mov    ecx,0x7
c001e771:	fc                   	cld    
c001e772:	31 d2                	xor    edx,edx
c001e774:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e776:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e77d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e781:	b9 12 00 00 00       	mov    ecx,0x12
c001e786:	83 ec 0c             	sub    esp,0xc
c001e789:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e78b:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e793:	b9 0a 00 00 00       	mov    ecx,0xa
c001e798:	f7 f1                	div    ecx
c001e79a:	83 c0 30             	add    eax,0x30
c001e79d:	83 c2 30             	add    edx,0x30
c001e7a0:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e7a4:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e7a8:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e7b0:	31 d2                	xor    edx,edx
c001e7b2:	f7 f1                	div    ecx
c001e7b4:	83 c0 30             	add    eax,0x30
c001e7b7:	83 c2 30             	add    edx,0x30
c001e7ba:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e7be:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e7c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e7c6:	50                   	push   eax
c001e7c7:	e8 5d eb fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001e7cc:	83 c4 10             	add    esp,0x10
c001e7cf:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001e7d5:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e7dc:	75 46                	jne    c001e824 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001e7de:	83 ec 0c             	sub    esp,0xc
c001e7e1:	68 64 01 00 00       	push   0x164
c001e7e6:	e8 74 15 ff ff       	call   c000fd5f <malloc>
c001e7eb:	89 c3                	mov    ebx,eax
c001e7ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7f0:	e8 3b 11 00 00       	call   c001f930 <SATABus::SATABus()>
c001e7f5:	58                   	pop    eax
c001e7f6:	5a                   	pop    edx
c001e7f7:	53                   	push   ebx
c001e7f8:	55                   	push   ebp
c001e7f9:	e8 56 b2 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e7fe:	83 ec 1c             	sub    esp,0x1c
c001e801:	b9 09 00 00 00       	mov    ecx,0x9
c001e806:	89 e7                	mov    edi,esp
c001e808:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e80a:	53                   	push   ebx
c001e80b:	e8 8a b1 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e810:	83 c4 30             	add    esp,0x30
c001e813:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e815:	6a 00                	push   0x0
c001e817:	6a 00                	push   0x0
c001e819:	6a 00                	push   0x0
c001e81b:	53                   	push   ebx
c001e81c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	eb 5b                	jmp    c001e87f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e824:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001e82a:	75 19                	jne    c001e845 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	68 70 02 00 00       	push   0x270
c001e834:	e8 26 15 ff ff       	call   c000fd5f <malloc>
c001e839:	89 c3                	mov    ebx,eax
c001e83b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e83e:	e8 93 02 00 00       	call   c001ead6 <IDE::IDE()>
c001e843:	eb b0                	jmp    c001e7f5 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001e845:	83 ec 0c             	sub    esp,0xc
c001e848:	68 58 01 00 00       	push   0x158
c001e84d:	e8 0d 15 ff ff       	call   c000fd5f <malloc>
c001e852:	89 c3                	mov    ebx,eax
c001e854:	58                   	pop    eax
c001e855:	5a                   	pop    edx
c001e856:	68 76 63 02 c0       	push   0xc0026376
c001e85b:	53                   	push   ebx
c001e85c:	e8 a7 b4 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001e861:	59                   	pop    ecx
c001e862:	5f                   	pop    edi
c001e863:	53                   	push   ebx
c001e864:	55                   	push   ebp
c001e865:	e8 ea b1 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e86a:	83 ec 1c             	sub    esp,0x1c
c001e86d:	b9 09 00 00 00       	mov    ecx,0x9
c001e872:	89 e7                	mov    edi,esp
c001e874:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e876:	53                   	push   ebx
c001e877:	e8 1e b1 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e87c:	83 c4 30             	add    esp,0x30
c001e87f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e885:	5b                   	pop    ebx
c001e886:	5e                   	pop    esi
c001e887:	5f                   	pop    edi
c001e888:	5d                   	pop    ebp
c001e889:	c3                   	ret    

c001e88a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e88a:	55                   	push   ebp
c001e88b:	57                   	push   edi
c001e88c:	56                   	push   esi
c001e88d:	53                   	push   ebx
c001e88e:	83 ec 68             	sub    esp,0x68
c001e891:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e895:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e89c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e8a0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e8a7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e8ac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e8b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e8b7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e8bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e8c0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e8c5:	6a 0c                	push   0xc
c001e8c7:	57                   	push   edi
c001e8c8:	53                   	push   ebx
c001e8c9:	56                   	push   esi
c001e8ca:	55                   	push   ebp
c001e8cb:	e8 c6 f7 ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e8d0:	83 c4 20             	add    esp,0x20
c001e8d3:	57                   	push   edi
c001e8d4:	53                   	push   ebx
c001e8d5:	56                   	push   esi
c001e8d6:	55                   	push   ebp
c001e8d7:	e8 b0 f8 ff ff       	call   c001e18c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e8dc:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e8e1:	57                   	push   edi
c001e8e2:	53                   	push   ebx
c001e8e3:	56                   	push   esi
c001e8e4:	55                   	push   ebp
c001e8e5:	e8 38 f9 ff ff       	call   c001e222 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e8ea:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e8ee:	83 c4 14             	add    esp,0x14
c001e8f1:	6a 3c                	push   0x3c
c001e8f3:	57                   	push   edi
c001e8f4:	53                   	push   ebx
c001e8f5:	56                   	push   esi
c001e8f6:	55                   	push   ebp
c001e8f7:	e8 9a f7 ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e8fc:	0f b6 c4             	movzx  eax,ah
c001e8ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e903:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e907:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e90b:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001e910:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001e916:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e91c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e920:	83 c4 20             	add    esp,0x20
c001e923:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e928:	74 30                	je     c001e95a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e92a:	31 c0                	xor    eax,eax
c001e92c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e930:	7e 28                	jle    c001e95a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e932:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e93a:	39 cb                	cmp    ebx,ecx
c001e93c:	75 19                	jne    c001e957 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e93e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e946:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e94a:	75 0b                	jne    c001e957 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e94c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e953:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e957:	40                   	inc    eax
c001e958:	eb d2                	jmp    c001e92c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e95a:	31 d2                	xor    edx,edx
c001e95c:	83 ec 0c             	sub    esp,0xc
c001e95f:	57                   	push   edi
c001e960:	53                   	push   ebx
c001e961:	56                   	push   esi
c001e962:	52                   	push   edx
c001e963:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e967:	55                   	push   ebp
c001e968:	e8 01 f9 ff ff       	call   c001e26e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e96d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e971:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e975:	42                   	inc    edx
c001e976:	83 c4 20             	add    esp,0x20
c001e979:	83 fa 06             	cmp    edx,0x6
c001e97c:	75 de                	jne    c001e95c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e97e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e986:	c1 e2 08             	shl    edx,0x8
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	0f b6 c4             	movzx  eax,ah
c001e98f:	09 d0                	or     eax,edx
c001e991:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e996:	6a 02                	push   0x2
c001e998:	57                   	push   edi
c001e999:	53                   	push   ebx
c001e99a:	56                   	push   esi
c001e99b:	55                   	push   ebp
c001e99c:	e8 f5 f6 ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9a1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e9a6:	83 c4 20             	add    esp,0x20
c001e9a9:	57                   	push   edi
c001e9aa:	53                   	push   ebx
c001e9ab:	56                   	push   esi
c001e9ac:	55                   	push   ebp
c001e9ad:	e8 24 f8 ff ff       	call   c001e1d6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e9b2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e9b6:	57                   	push   edi
c001e9b7:	53                   	push   ebx
c001e9b8:	56                   	push   esi
c001e9b9:	55                   	push   ebp
c001e9ba:	e8 81 f7 ff ff       	call   c001e140 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e9bf:	b9 09 00 00 00       	mov    ecx,0x9
c001e9c4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e9c9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e9cd:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e9d1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e9d5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e9d9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e9dd:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e9e1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e9e5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e9e9:	83 ec 0c             	sub    esp,0xc
c001e9ec:	fc                   	cld    
c001e9ed:	89 e7                	mov    edi,esp
c001e9ef:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e9f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e9f5:	55                   	push   ebp
c001e9f6:	e8 a9 fc ff ff       	call   c001e6a4 <PCI::foundDevice(PCIDeviceInfo)>
c001e9fb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ea01:	5b                   	pop    ebx
c001ea02:	5e                   	pop    esi
c001ea03:	5f                   	pop    edi
c001ea04:	5d                   	pop    ebp
c001ea05:	c3                   	ret    

c001ea06 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ea06:	55                   	push   ebp
c001ea07:	57                   	push   edi
c001ea08:	56                   	push   esi
c001ea09:	53                   	push   ebx
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ea11:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ea16:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ea1b:	6a 00                	push   0x0
c001ea1d:	56                   	push   esi
c001ea1e:	57                   	push   edi
c001ea1f:	55                   	push   ebp
c001ea20:	e8 1b f7 ff ff       	call   c001e140 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea25:	6a 00                	push   0x0
c001ea27:	56                   	push   esi
c001ea28:	57                   	push   edi
c001ea29:	55                   	push   ebp
c001ea2a:	e8 5b fe ff ff       	call   c001e88a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ea2f:	83 c4 20             	add    esp,0x20
c001ea32:	6a 00                	push   0x0
c001ea34:	56                   	push   esi
c001ea35:	57                   	push   edi
c001ea36:	55                   	push   ebp
c001ea37:	e8 28 f7 ff ff       	call   c001e164 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ea3c:	83 c4 10             	add    esp,0x10
c001ea3f:	a8 80                	test   al,0x80
c001ea41:	74 2d                	je     c001ea70 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ea43:	bb 01 00 00 00       	mov    ebx,0x1
c001ea48:	53                   	push   ebx
c001ea49:	56                   	push   esi
c001ea4a:	57                   	push   edi
c001ea4b:	55                   	push   ebp
c001ea4c:	e8 ef f6 ff ff       	call   c001e140 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea51:	83 c4 10             	add    esp,0x10
c001ea54:	0f b7 c0             	movzx  eax,ax
c001ea57:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea5c:	74 0c                	je     c001ea6a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ea5e:	53                   	push   ebx
c001ea5f:	56                   	push   esi
c001ea60:	57                   	push   edi
c001ea61:	55                   	push   ebp
c001ea62:	e8 23 fe ff ff       	call   c001e88a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	43                   	inc    ebx
c001ea6b:	83 fb 08             	cmp    ebx,0x8
c001ea6e:	75 d8                	jne    c001ea48 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ea70:	83 c4 0c             	add    esp,0xc
c001ea73:	5b                   	pop    ebx
c001ea74:	5e                   	pop    esi
c001ea75:	5f                   	pop    edi
c001ea76:	5d                   	pop    ebp
c001ea77:	c3                   	ret    

c001ea78 <PCI::detect()>:
c001ea78:	56                   	push   esi
c001ea79:	53                   	push   ebx
c001ea7a:	53                   	push   ebx
c001ea7b:	31 db                	xor    ebx,ebx
c001ea7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea81:	6a 00                	push   0x0
c001ea83:	6a 00                	push   0x0
c001ea85:	6a 00                	push   0x0
c001ea87:	56                   	push   esi
c001ea88:	e8 d7 f6 ff ff       	call   c001e164 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ea8d:	83 c4 10             	add    esp,0x10
c001ea90:	a8 80                	test   al,0x80
c001ea92:	75 21                	jne    c001eab5 <PCI::detect()+0x3d>
c001ea94:	51                   	push   ecx
c001ea95:	51                   	push   ecx
c001ea96:	6a 00                	push   0x0
c001ea98:	56                   	push   esi
c001ea99:	e8 e2 fb ff ff       	call   c001e680 <PCI::checkBus(unsigned char)>
c001ea9e:	83 c4 10             	add    esp,0x10
c001eaa1:	eb 2a                	jmp    c001eacd <PCI::detect()+0x55>
c001eaa3:	52                   	push   edx
c001eaa4:	52                   	push   edx
c001eaa5:	53                   	push   ebx
c001eaa6:	43                   	inc    ebx
c001eaa7:	56                   	push   esi
c001eaa8:	e8 d3 fb ff ff       	call   c001e680 <PCI::checkBus(unsigned char)>
c001eaad:	83 c4 10             	add    esp,0x10
c001eab0:	83 fb 08             	cmp    ebx,0x8
c001eab3:	74 18                	je     c001eacd <PCI::detect()+0x55>
c001eab5:	53                   	push   ebx
c001eab6:	6a 00                	push   0x0
c001eab8:	6a 00                	push   0x0
c001eaba:	56                   	push   esi
c001eabb:	e8 80 f6 ff ff       	call   c001e140 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eac0:	83 c4 10             	add    esp,0x10
c001eac3:	0f b7 c0             	movzx  eax,ax
c001eac6:	3d ff ff 00 00       	cmp    eax,0xffff
c001eacb:	74 d6                	je     c001eaa3 <PCI::detect()+0x2b>
c001eacd:	58                   	pop    eax
c001eace:	5b                   	pop    ebx
c001eacf:	5e                   	pop    esi
c001ead0:	c3                   	ret    
c001ead1:	90                   	nop

c001ead2 <IDE::close(int, int, void*)>:
c001ead2:	83 c8 ff             	or     eax,0xffffffff
c001ead5:	c3                   	ret    

c001ead6 <IDE::IDE()>:
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eadd:	83 ec 08             	sub    esp,0x8
c001eae0:	68 20 64 02 c0       	push   0xc0026420
c001eae5:	50                   	push   eax
c001eae6:	e8 c1 b2 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	ba 4c 65 02 c0       	mov    edx,0xc002654c
c001eaf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf7:	89 10                	mov    DWORD PTR [eax],edx
c001eaf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001eb04:	90                   	nop
c001eb05:	83 c4 0c             	add    esp,0xc
c001eb08:	c3                   	ret    
c001eb09:	90                   	nop

c001eb0a <IDE::prepareInterrupt(unsigned char)>:
c001eb0a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb13:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001eb1b:	c3                   	ret    

c001eb1c <selectDrive(unsigned char, unsigned char)>:
c001eb1c:	c3                   	ret    
c001eb1d:	90                   	nop

c001eb1e <IDE::getBase(unsigned char)>:
c001eb1e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001eb23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb27:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eb2f:	c3                   	ret    

c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001eb30:	55                   	push   ebp
c001eb31:	57                   	push   edi
c001eb32:	56                   	push   esi
c001eb33:	53                   	push   ebx
c001eb34:	83 ec 1c             	sub    esp,0x1c
c001eb37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eb3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb3f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001eb42:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eb46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb4a:	80 f9 03             	cmp    cl,0x3
c001eb4d:	77 4f                	ja     c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001eb4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb53:	0f b6 fa             	movzx  edi,dl
c001eb56:	0f b6 db             	movzx  ebx,bl
c001eb59:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001eb5c:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001eb61:	80 ca 80             	or     dl,0x80
c001eb64:	52                   	push   edx
c001eb65:	6a 0c                	push   0xc
c001eb67:	57                   	push   edi
c001eb68:	56                   	push   esi
c001eb69:	e8 c2 ff ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb6e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eb73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb77:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001eb7b:	ee                   	out    dx,al
c001eb7c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eb81:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001eb85:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eb89:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eb8d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eb95:	83 c4 2c             	add    esp,0x2c
c001eb98:	5b                   	pop    ebx
c001eb99:	5e                   	pop    esi
c001eb9a:	5f                   	pop    edi
c001eb9b:	5d                   	pop    ebp
c001eb9c:	eb 92                	jmp    c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb9e:	0f b6 cb             	movzx  ecx,bl
c001eba1:	83 f9 07             	cmp    ecx,0x7
c001eba4:	77 12                	ja     c001ebb8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001eba6:	0f b6 d2             	movzx  edx,dl
c001eba9:	0f b6 db             	movzx  ebx,bl
c001ebac:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ebb4:	01 da                	add    edx,ebx
c001ebb6:	eb 2f                	jmp    c001ebe7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ebb8:	83 f9 0d             	cmp    ecx,0xd
c001ebbb:	77 13                	ja     c001ebd0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ebbd:	0f b6 d2             	movzx  edx,dl
c001ebc0:	0f b6 db             	movzx  ebx,bl
c001ebc3:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ebca:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ebce:	eb 17                	jmp    c001ebe7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ebd0:	83 f9 15             	cmp    ecx,0x15
c001ebd3:	77 13                	ja     c001ebe8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ebd5:	0f b6 d2             	movzx  edx,dl
c001ebd8:	0f b6 db             	movzx  ebx,bl
c001ebdb:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ebe3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ebe7:	ee                   	out    dx,al
c001ebe8:	83 c4 1c             	add    esp,0x1c
c001ebeb:	5b                   	pop    ebx
c001ebec:	5e                   	pop    esi
c001ebed:	5f                   	pop    edi
c001ebee:	5d                   	pop    ebp
c001ebef:	c3                   	ret    

c001ebf0 <IDE::read(unsigned char, unsigned char)>:
c001ebf0:	55                   	push   ebp
c001ebf1:	57                   	push   edi
c001ebf2:	56                   	push   esi
c001ebf3:	53                   	push   ebx
c001ebf4:	83 ec 1c             	sub    esp,0x1c
c001ebf7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ebfb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ebff:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ec02:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ec06:	3c 03                	cmp    al,0x3
c001ec08:	77 40                	ja     c001ec4a <IDE::read(unsigned char, unsigned char)+0x5a>
c001ec0a:	0f b6 f9             	movzx  edi,cl
c001ec0d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ec10:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ec15:	0c 80                	or     al,0x80
c001ec17:	50                   	push   eax
c001ec18:	6a 0c                	push   0xc
c001ec1a:	57                   	push   edi
c001ec1b:	56                   	push   esi
c001ec1c:	e8 0f ff ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec21:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ec26:	0f b6 d3             	movzx  edx,bl
c001ec29:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ec2d:	ec                   	in     al,dx
c001ec2e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ec32:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ec37:	52                   	push   edx
c001ec38:	6a 0c                	push   0xc
c001ec3a:	57                   	push   edi
c001ec3b:	56                   	push   esi
c001ec3c:	e8 ef fe ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec41:	83 c4 20             	add    esp,0x20
c001ec44:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ec48:	eb 4c                	jmp    c001ec96 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ec4a:	0f b6 d3             	movzx  edx,bl
c001ec4d:	83 fa 07             	cmp    edx,0x7
c001ec50:	77 12                	ja     c001ec64 <IDE::read(unsigned char, unsigned char)+0x74>
c001ec52:	0f b6 c9             	movzx  ecx,cl
c001ec55:	0f b6 d3             	movzx  edx,bl
c001ec58:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ec60:	01 c2                	add    edx,eax
c001ec62:	eb 31                	jmp    c001ec95 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ec64:	83 fa 0d             	cmp    edx,0xd
c001ec67:	77 13                	ja     c001ec7c <IDE::read(unsigned char, unsigned char)+0x8c>
c001ec69:	0f b6 c9             	movzx  ecx,cl
c001ec6c:	0f b6 d3             	movzx  edx,bl
c001ec6f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ec76:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ec7a:	eb 19                	jmp    c001ec95 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ec7c:	31 c0                	xor    eax,eax
c001ec7e:	83 fa 15             	cmp    edx,0x15
c001ec81:	77 13                	ja     c001ec96 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ec83:	0f b6 c9             	movzx  ecx,cl
c001ec86:	0f b6 d3             	movzx  edx,bl
c001ec89:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ec91:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ec95:	ec                   	in     al,dx
c001ec96:	83 c4 1c             	add    esp,0x1c
c001ec99:	5b                   	pop    ebx
c001ec9a:	5e                   	pop    esi
c001ec9b:	5f                   	pop    edi
c001ec9c:	5d                   	pop    ebp
c001ec9d:	c3                   	ret    

c001ec9e <IDE::waitInterrupt(unsigned char)>:
c001ec9e:	55                   	push   ebp
c001ec9f:	57                   	push   edi
c001eca0:	56                   	push   esi
c001eca1:	53                   	push   ebx
c001eca2:	31 db                	xor    ebx,ebx
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ecab:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ecb0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ecb8:	89 e8                	mov    eax,ebp
c001ecba:	84 c0                	test   al,al
c001ecbc:	75 31                	jne    c001ecef <IDE::waitInterrupt(unsigned char)+0x51>
c001ecbe:	52                   	push   edx
c001ecbf:	6a 0c                	push   0xc
c001ecc1:	56                   	push   esi
c001ecc2:	57                   	push   edi
c001ecc3:	e8 28 ff ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001ecc8:	83 c4 10             	add    esp,0x10
c001eccb:	a8 01                	test   al,0x1
c001eccd:	75 28                	jne    c001ecf7 <IDE::waitInterrupt(unsigned char)+0x59>
c001eccf:	f6 c3 04             	test   bl,0x4
c001ecd2:	75 13                	jne    c001ece7 <IDE::waitInterrupt(unsigned char)+0x49>
c001ecd4:	83 fb 32             	cmp    ebx,0x32
c001ecd7:	7e 0e                	jle    c001ece7 <IDE::waitInterrupt(unsigned char)+0x49>
c001ecd9:	50                   	push   eax
c001ecda:	50                   	push   eax
c001ecdb:	6a 00                	push   0x0
c001ecdd:	6a 64                	push   0x64
c001ecdf:	e8 f0 87 ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c001ece4:	83 c4 10             	add    esp,0x10
c001ece7:	83 fb 3c             	cmp    ebx,0x3c
c001ecea:	74 0b                	je     c001ecf7 <IDE::waitInterrupt(unsigned char)+0x59>
c001ecec:	43                   	inc    ebx
c001eced:	eb c1                	jmp    c001ecb0 <IDE::waitInterrupt(unsigned char)+0x12>
c001ecef:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ecf7:	83 c4 0c             	add    esp,0xc
c001ecfa:	89 e8                	mov    eax,ebp
c001ecfc:	5b                   	pop    ebx
c001ecfd:	5e                   	pop    esi
c001ecfe:	5f                   	pop    edi
c001ecff:	5d                   	pop    ebp
c001ed00:	c3                   	ret    

c001ed01 <ideChannel0IRQHandler(regs*, void*)>:
c001ed01:	83 ec 10             	sub    esp,0x10
c001ed04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed08:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ed0f:	6a 07                	push   0x7
c001ed11:	6a 00                	push   0x0
c001ed13:	50                   	push   eax
c001ed14:	e8 d7 fe ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001ed19:	83 c4 1c             	add    esp,0x1c
c001ed1c:	c3                   	ret    

c001ed1d <ideChannel1IRQHandler(regs*, void*)>:
c001ed1d:	83 ec 10             	sub    esp,0x10
c001ed20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed24:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ed2b:	6a 07                	push   0x7
c001ed2d:	6a 01                	push   0x1
c001ed2f:	50                   	push   eax
c001ed30:	e8 bb fe ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001ed35:	83 c4 1c             	add    esp,0x1c
c001ed38:	c3                   	ret    
c001ed39:	90                   	nop

c001ed3a <IDE::enableIRQs(unsigned char, bool)>:
c001ed3a:	57                   	push   edi
c001ed3b:	b8 02 00 00 00       	mov    eax,0x2
c001ed40:	56                   	push   esi
c001ed41:	53                   	push   ebx
c001ed42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ed46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed4a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ed4f:	74 02                	je     c001ed53 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ed51:	31 c0                	xor    eax,eax
c001ed53:	0f b6 db             	movzx  ebx,bl
c001ed56:	bf 04 00 00 00       	mov    edi,0x4
c001ed5b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ed62:	50                   	push   eax
c001ed63:	6a 0c                	push   0xc
c001ed65:	53                   	push   ebx
c001ed66:	56                   	push   esi
c001ed67:	e8 c4 fd ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed6c:	83 c4 10             	add    esp,0x10
c001ed6f:	50                   	push   eax
c001ed70:	6a 0c                	push   0xc
c001ed72:	53                   	push   ebx
c001ed73:	56                   	push   esi
c001ed74:	e8 77 fe ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001ed79:	83 c4 10             	add    esp,0x10
c001ed7c:	4f                   	dec    edi
c001ed7d:	75 f0                	jne    c001ed6f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ed7f:	5b                   	pop    ebx
c001ed80:	5e                   	pop    esi
c001ed81:	5f                   	pop    edi
c001ed82:	c3                   	ret    
c001ed83:	90                   	nop

c001ed84 <IDE::open(int, int, void*)>:
c001ed84:	57                   	push   edi
c001ed85:	56                   	push   esi
c001ed86:	53                   	push   ebx
c001ed87:	83 ec 10             	sub    esp,0x10
c001ed8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ed8e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ed97:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001eda0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001eda7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001edae:	0f 85 84 02 00 00    	jne    c001f038 <IDE::open(int, int, void*)+0x2b4>
c001edb4:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001edba:	a8 70                	test   al,0x70
c001edbc:	75 44                	jne    c001ee02 <IDE::open(int, int, void*)+0x7e>
c001edbe:	ba 20 84 00 00       	mov    edx,0x8420
c001edc3:	0f a3 c2             	bt     edx,eax
c001edc6:	73 3a                	jae    c001ee02 <IDE::open(int, int, void*)+0x7e>
c001edc8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001edce:	83 ec 0c             	sub    esp,0xc
c001edd1:	83 e0 fc             	and    eax,0xfffffffc
c001edd4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eddb:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ede1:	83 e0 fc             	and    eax,0xfffffffc
c001ede4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001edeb:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001edf1:	83 e0 fc             	and    eax,0xfffffffc
c001edf4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001edfb:	68 ad 36 02 c0       	push   0xc00236ad
c001ee00:	eb 60                	jmp    c001ee62 <IDE::open(int, int, void*)+0xde>
c001ee02:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ee0c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ee16:	be 64 00 00 00       	mov    esi,0x64
c001ee1b:	57                   	push   edi
c001ee1c:	57                   	push   edi
c001ee1d:	68 38 64 02 c0       	push   0xc0026438
c001ee22:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ee26:	57                   	push   edi
c001ee27:	e8 14 18 fe ff       	call   c0000640 <strcpy>
c001ee2c:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001ee33:	31 d2                	xor    edx,edx
c001ee35:	89 c8                	mov    eax,ecx
c001ee37:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ee3a:	f7 f6                	div    esi
c001ee3c:	be 0a 00 00 00       	mov    esi,0xa
c001ee41:	83 c0 30             	add    eax,0x30
c001ee44:	31 d2                	xor    edx,edx
c001ee46:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ee4a:	89 c8                	mov    eax,ecx
c001ee4c:	f7 f6                	div    esi
c001ee4e:	89 d1                	mov    ecx,edx
c001ee50:	31 d2                	xor    edx,edx
c001ee52:	83 c1 30             	add    ecx,0x30
c001ee55:	f7 f6                	div    esi
c001ee57:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001ee5b:	83 c2 30             	add    edx,0x30
c001ee5e:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001ee62:	e8 c2 e4 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ee67:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ee6c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ee73:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee7a:	c1 e1 10             	shl    ecx,0x10
c001ee7d:	c1 e0 0b             	shl    eax,0xb
c001ee80:	83 c4 10             	add    esp,0x10
c001ee83:	09 c1                	or     ecx,eax
c001ee85:	89 fa                	mov    edx,edi
c001ee87:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee8e:	c1 e0 08             	shl    eax,0x8
c001ee91:	09 c1                	or     ecx,eax
c001ee93:	89 c8                	mov    eax,ecx
c001ee95:	0d 08 00 00 80       	or     eax,0x80000008
c001ee9a:	ef                   	out    dx,eax
c001ee9b:	be fc 0c 00 00       	mov    esi,0xcfc
c001eea0:	89 f2                	mov    edx,esi
c001eea2:	ed                   	in     eax,dx
c001eea3:	c1 e8 10             	shr    eax,0x10
c001eea6:	3d ff ff 00 00       	cmp    eax,0xffff
c001eeab:	0f 84 e5 00 00 00    	je     c001ef96 <IDE::open(int, int, void*)+0x212>
c001eeb1:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eeb7:	89 fa                	mov    edx,edi
c001eeb9:	89 c8                	mov    eax,ecx
c001eebb:	ef                   	out    dx,eax
c001eebc:	b0 fe                	mov    al,0xfe
c001eebe:	89 f2                	mov    edx,esi
c001eec0:	ee                   	out    dx,al
c001eec1:	89 c8                	mov    eax,ecx
c001eec3:	89 fa                	mov    edx,edi
c001eec5:	ef                   	out    dx,eax
c001eec6:	89 f2                	mov    edx,esi
c001eec8:	ed                   	in     eax,dx
c001eec9:	3c fe                	cmp    al,0xfe
c001eecb:	0f 85 85 00 00 00    	jne    c001ef56 <IDE::open(int, int, void*)+0x1d2>
c001eed1:	83 ec 0c             	sub    esp,0xc
c001eed4:	68 e3 36 02 c0       	push   0xc00236e3
c001eed9:	e8 4b e4 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001eede:	c7 04 24 3e 64 02 c0 	mov    DWORD PTR [esp],0xc002643e
c001eee5:	e8 92 80 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001eeea:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eef4:	c7 04 24 c8 39 02 c0 	mov    DWORD PTR [esp],0xc00239c8
c001eefb:	e8 29 e4 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ef00:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ef07:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef0e:	c1 e1 10             	shl    ecx,0x10
c001ef11:	c1 e0 08             	shl    eax,0x8
c001ef14:	89 fa                	mov    edx,edi
c001ef16:	09 c1                	or     ecx,eax
c001ef18:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef1f:	c1 e0 0b             	shl    eax,0xb
c001ef22:	09 c1                	or     ecx,eax
c001ef24:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ef2a:	89 c8                	mov    eax,ecx
c001ef2c:	ef                   	out    dx,eax
c001ef2d:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ef33:	89 f2                	mov    edx,esi
c001ef35:	ee                   	out    dx,al
c001ef36:	89 c8                	mov    eax,ecx
c001ef38:	89 fa                	mov    edx,edi
c001ef3a:	ef                   	out    dx,eax
c001ef3b:	89 f2                	mov    edx,esi
c001ef3d:	ed                   	in     eax,dx
c001ef3e:	0f b6 c0             	movzx  eax,al
c001ef41:	83 c4 10             	add    esp,0x10
c001ef44:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ef4a:	74 5a                	je     c001efa6 <IDE::open(int, int, void*)+0x222>
c001ef4c:	83 ec 0c             	sub    esp,0xc
c001ef4f:	68 53 64 02 c0       	push   0xc0026453
c001ef54:	eb 48                	jmp    c001ef9e <IDE::open(int, int, void*)+0x21a>
c001ef56:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ef5f:	75 2b                	jne    c001ef8c <IDE::open(int, int, void*)+0x208>
c001ef61:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ef68:	3d 80 00 00 00       	cmp    eax,0x80
c001ef6d:	74 07                	je     c001ef76 <IDE::open(int, int, void*)+0x1f2>
c001ef6f:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ef74:	75 16                	jne    c001ef8c <IDE::open(int, int, void*)+0x208>
c001ef76:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ef7d:	83 ec 0c             	sub    esp,0xc
c001ef80:	68 9e 31 02 c0       	push   0xc002319e
c001ef85:	e8 9f e3 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ef8a:	eb 17                	jmp    c001efa3 <IDE::open(int, int, void*)+0x21f>
c001ef8c:	83 ec 0c             	sub    esp,0xc
c001ef8f:	68 5b 64 02 c0       	push   0xc002645b
c001ef94:	eb 08                	jmp    c001ef9e <IDE::open(int, int, void*)+0x21a>
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	68 8c 64 02 c0       	push   0xc002648c
c001ef9e:	e8 cb 10 ff ff       	call   c001006e <KePanic(char const*)>
c001efa3:	83 c4 10             	add    esp,0x10
c001efa6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001efad:	0f 84 bf 00 00 00    	je     c001f072 <IDE::open(int, int, void*)+0x2ee>
c001efb3:	83 ec 0c             	sub    esp,0xc
c001efb6:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001efbc:	83 e0 fc             	and    eax,0xfffffffc
c001efbf:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001efc6:	83 c0 08             	add    eax,0x8
c001efc9:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001efd0:	68 b6 64 02 c0       	push   0xc00264b6
c001efd5:	e8 a2 7f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001efda:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001efe1:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001efe8:	50                   	push   eax
c001efe9:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eff0:	50                   	push   eax
c001eff1:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eff8:	50                   	push   eax
c001eff9:	ff 35 a0 04 03 c0    	push   DWORD PTR ds:0xc00304a0
c001efff:	e8 92 f0 ff ff       	call   c001e096 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f004:	83 c4 18             	add    esp,0x18
c001f007:	83 c8 07             	or     eax,0x7
c001f00a:	0f b7 c0             	movzx  eax,ax
c001f00d:	50                   	push   eax
c001f00e:	6a 04                	push   0x4
c001f010:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f017:	50                   	push   eax
c001f018:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f01f:	50                   	push   eax
c001f020:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f027:	50                   	push   eax
c001f028:	ff 35 a0 04 03 c0    	push   DWORD PTR ds:0xc00304a0
c001f02e:	e8 9f f2 ff ff       	call   c001e2d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001f033:	83 c4 20             	add    esp,0x20
c001f036:	eb 3a                	jmp    c001f072 <IDE::open(int, int, void*)+0x2ee>
c001f038:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f03e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f045:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f04c:	05 06 02 00 00       	add    eax,0x206
c001f051:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f058:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f05f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f066:	05 06 02 00 00       	add    eax,0x206
c001f06b:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f072:	83 ec 0c             	sub    esp,0xc
c001f075:	68 7c 3f 02 c0       	push   0xc0023f7c
c001f07a:	e8 aa e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f07f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f085:	83 c4 10             	add    esp,0x10
c001f088:	89 c2                	mov    edx,eax
c001f08a:	83 e2 0f             	and    edx,0xf
c001f08d:	83 fa 08             	cmp    edx,0x8
c001f090:	75 0a                	jne    c001f09c <IDE::open(int, int, void*)+0x318>
c001f092:	83 e8 02             	sub    eax,0x2
c001f095:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f09c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f0a2:	89 c2                	mov    edx,eax
c001f0a4:	83 e2 0f             	and    edx,0xf
c001f0a7:	83 fa 08             	cmp    edx,0x8
c001f0aa:	75 0a                	jne    c001f0b6 <IDE::open(int, int, void*)+0x332>
c001f0ac:	83 e8 02             	sub    eax,0x2
c001f0af:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f0b6:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f0bd:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f0c4:	89 d0                	mov    eax,edx
c001f0c6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f0c9:	8d 7a 01             	lea    edi,[edx+0x1]
c001f0cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f0d0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f0d4:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f0d8:	83 e1 3f             	and    ecx,0x3f
c001f0db:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f0df:	89 f9                	mov    ecx,edi
c001f0e1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f0e8:	0f b6 c9             	movzx  ecx,cl
c001f0eb:	8d 78 02             	lea    edi,[eax+0x2]
c001f0ee:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f0f1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f0f5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f0f9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f0fd:	83 e2 3f             	and    edx,0x3f
c001f100:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f104:	89 f9                	mov    ecx,edi
c001f106:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f10c:	0f b6 d1             	movzx  edx,cl
c001f10f:	8d 78 03             	lea    edi,[eax+0x3]
c001f112:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f115:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f119:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f11d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f121:	83 e1 3f             	and    ecx,0x3f
c001f124:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f128:	89 fa                	mov    edx,edi
c001f12a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f130:	0f b6 ca             	movzx  ecx,dl
c001f133:	8d 78 04             	lea    edi,[eax+0x4]
c001f136:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f139:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f13d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f141:	89 fa                	mov    edx,edi
c001f143:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f149:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f14d:	83 e2 3f             	and    edx,0x3f
c001f150:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f154:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f15b:	66 85 f6             	test   si,si
c001f15e:	74 24                	je     c001f184 <IDE::open(int, int, void*)+0x400>
c001f160:	89 f9                	mov    ecx,edi
c001f162:	83 c0 05             	add    eax,0x5
c001f165:	0f b6 d1             	movzx  edx,cl
c001f168:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f16b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f16f:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f173:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f179:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f17d:	83 e0 3f             	and    eax,0x3f
c001f180:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f184:	83 ec 0c             	sub    esp,0xc
c001f187:	68 ce 64 02 c0       	push   0xc00264ce
c001f18c:	e8 98 e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f191:	58                   	pop    eax
c001f192:	5a                   	pop    edx
c001f193:	6a 00                	push   0x0
c001f195:	53                   	push   ebx
c001f196:	e8 6f f9 ff ff       	call   c001eb0a <IDE::prepareInterrupt(unsigned char)>
c001f19b:	59                   	pop    ecx
c001f19c:	5e                   	pop    esi
c001f19d:	6a 01                	push   0x1
c001f19f:	53                   	push   ebx
c001f1a0:	e8 65 f9 ff ff       	call   c001eb0a <IDE::prepareInterrupt(unsigned char)>
c001f1a5:	c7 04 24 50 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d50
c001f1ac:	e8 78 e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f1b1:	83 c4 0c             	add    esp,0xc
c001f1b4:	6a 00                	push   0x0
c001f1b6:	6a 00                	push   0x0
c001f1b8:	53                   	push   ebx
c001f1b9:	e8 7c fb ff ff       	call   c001ed3a <IDE::enableIRQs(unsigned char, bool)>
c001f1be:	83 c4 0c             	add    esp,0xc
c001f1c1:	6a 00                	push   0x0
c001f1c3:	6a 01                	push   0x1
c001f1c5:	53                   	push   ebx
c001f1c6:	e8 6f fb ff ff       	call   c001ed3a <IDE::enableIRQs(unsigned char, bool)>
c001f1cb:	c7 04 24 d0 64 02 c0 	mov    DWORD PTR [esp],0xc00264d0
c001f1d2:	e8 52 e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f1d7:	83 c4 10             	add    esp,0x10
c001f1da:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f1e1:	74 3c                	je     c001f21f <IDE::open(int, int, void*)+0x49b>
c001f1e3:	83 ec 0c             	sub    esp,0xc
c001f1e6:	53                   	push   ebx
c001f1e7:	6a 01                	push   0x1
c001f1e9:	68 01 ed 01 c0       	push   0xc001ed01
c001f1ee:	6a 0e                	push   0xe
c001f1f0:	53                   	push   ebx
c001f1f1:	e8 0a a8 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1f6:	83 c4 14             	add    esp,0x14
c001f1f9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f1ff:	53                   	push   ebx
c001f200:	6a 01                	push   0x1
c001f202:	68 1d ed 01 c0       	push   0xc001ed1d
c001f207:	6a 0f                	push   0xf
c001f209:	53                   	push   ebx
c001f20a:	e8 f1 a7 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f20f:	83 c4 14             	add    esp,0x14
c001f212:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f218:	68 ce 3b 02 c0       	push   0xc0023bce
c001f21d:	eb 40                	jmp    c001f25f <IDE::open(int, int, void*)+0x4db>
c001f21f:	83 ec 0c             	sub    esp,0xc
c001f222:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f22c:	53                   	push   ebx
c001f22d:	6a 00                	push   0x0
c001f22f:	68 01 ed 01 c0       	push   0xc001ed01
c001f234:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f23a:	53                   	push   ebx
c001f23b:	e8 c0 a7 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f240:	83 c4 14             	add    esp,0x14
c001f243:	53                   	push   ebx
c001f244:	6a 00                	push   0x0
c001f246:	68 1d ed 01 c0       	push   0xc001ed1d
c001f24b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f251:	53                   	push   ebx
c001f252:	e8 a9 a7 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f257:	83 c4 14             	add    esp,0x14
c001f25a:	68 e7 48 02 c0       	push   0xc00248e7
c001f25f:	e8 c5 e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f264:	83 c4 10             	add    esp,0x10
c001f267:	83 ec 0c             	sub    esp,0xc
c001f26a:	68 d2 64 02 c0       	push   0xc00264d2
c001f26f:	e8 b5 e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f274:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f279:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f27c:	c7 04 24 ed 4f 02 c0 	mov    DWORD PTR [esp],0xc0024fed
c001f283:	e8 a1 e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f288:	83 c4 0c             	add    esp,0xc
c001f28b:	6a 07                	push   0x7
c001f28d:	6a 00                	push   0x0
c001f28f:	53                   	push   ebx
c001f290:	e8 5b f9 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f295:	83 c4 0c             	add    esp,0xc
c001f298:	6a 07                	push   0x7
c001f29a:	6a 01                	push   0x1
c001f29c:	53                   	push   ebx
c001f29d:	e8 4e f9 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f2a2:	c7 04 24 a8 46 02 c0 	mov    DWORD PTR [esp],0xc00246a8
c001f2a9:	e8 7b e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f2ae:	83 c4 0c             	add    esp,0xc
c001f2b1:	6a 01                	push   0x1
c001f2b3:	6a 00                	push   0x0
c001f2b5:	53                   	push   ebx
c001f2b6:	e8 7f fa ff ff       	call   c001ed3a <IDE::enableIRQs(unsigned char, bool)>
c001f2bb:	83 c4 0c             	add    esp,0xc
c001f2be:	6a 01                	push   0x1
c001f2c0:	6a 01                	push   0x1
c001f2c2:	53                   	push   ebx
c001f2c3:	e8 72 fa ff ff       	call   c001ed3a <IDE::enableIRQs(unsigned char, bool)>
c001f2c8:	c7 04 24 d5 64 02 c0 	mov    DWORD PTR [esp],0xc00264d5
c001f2cf:	e8 55 e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f2d4:	83 c4 20             	add    esp,0x20
c001f2d7:	31 c0                	xor    eax,eax
c001f2d9:	5b                   	pop    ebx
c001f2da:	5e                   	pop    esi
c001f2db:	5f                   	pop    edi
c001f2dc:	c3                   	ret    
c001f2dd:	90                   	nop

c001f2de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f2de:	55                   	push   ebp
c001f2df:	57                   	push   edi
c001f2e0:	56                   	push   esi
c001f2e1:	53                   	push   ebx
c001f2e2:	83 ec 1c             	sub    esp,0x1c
c001f2e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f2e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f2ed:	8d 42 f8             	lea    eax,[edx-0x8]
c001f2f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f2f4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f2f8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f2fc:	3c 03                	cmp    al,0x3
c001f2fe:	77 5a                	ja     c001f35a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f300:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f304:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f308:	0f b6 db             	movzx  ebx,bl
c001f30b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f30e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f313:	0c 80                	or     al,0x80
c001f315:	50                   	push   eax
c001f316:	6a 0c                	push   0xc
c001f318:	53                   	push   ebx
c001f319:	56                   	push   esi
c001f31a:	e8 11 f8 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f31f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f324:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f32c:	0f b6 d2             	movzx  edx,dl
c001f32f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f333:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f335:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f33a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f33e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f342:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f346:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f34e:	83 c4 2c             	add    esp,0x2c
c001f351:	5b                   	pop    ebx
c001f352:	5e                   	pop    esi
c001f353:	5f                   	pop    edi
c001f354:	5d                   	pop    ebp
c001f355:	e9 d6 f7 ff ff       	jmp    c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f35a:	0f b6 c2             	movzx  eax,dl
c001f35d:	83 f8 07             	cmp    eax,0x7
c001f360:	77 12                	ja     c001f374 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f362:	0f b6 c2             	movzx  eax,dl
c001f365:	0f b6 db             	movzx  ebx,bl
c001f368:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f370:	01 c2                	add    edx,eax
c001f372:	eb 2f                	jmp    c001f3a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f374:	83 f8 0d             	cmp    eax,0xd
c001f377:	77 13                	ja     c001f38c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f379:	0f b6 db             	movzx  ebx,bl
c001f37c:	0f b6 d2             	movzx  edx,dl
c001f37f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f386:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f38a:	eb 17                	jmp    c001f3a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f38c:	83 f8 15             	cmp    eax,0x15
c001f38f:	77 14                	ja     c001f3a5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f391:	0f b6 db             	movzx  ebx,bl
c001f394:	0f b6 d2             	movzx  edx,dl
c001f397:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f39f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f3a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f3a5:	83 c4 1c             	add    esp,0x1c
c001f3a8:	5b                   	pop    ebx
c001f3a9:	5e                   	pop    esi
c001f3aa:	5f                   	pop    edi
c001f3ab:	5d                   	pop    ebp
c001f3ac:	c3                   	ret    
c001f3ad:	90                   	nop

c001f3ae <IDE::detect()>:
c001f3ae:	55                   	push   ebp
c001f3af:	57                   	push   edi
c001f3b0:	56                   	push   esi
c001f3b1:	53                   	push   ebx
c001f3b2:	81 ec 28 02 00 00    	sub    esp,0x228
c001f3b8:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f3bf:	68 d7 64 02 c0       	push   0xc00264d7
c001f3c4:	e8 60 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f3c9:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f3cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f3d3:	83 c4 10             	add    esp,0x10
c001f3d6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f3db:	0f 85 2f 04 00 00    	jne    c001f810 <IDE::detect()+0x462>
c001f3e1:	83 ec 0c             	sub    esp,0xc
c001f3e4:	31 f6                	xor    esi,esi
c001f3e6:	68 da 64 02 c0       	push   0xc00264da
c001f3eb:	31 ff                	xor    edi,edi
c001f3ed:	e8 37 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f3f2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	83 ec 0c             	sub    esp,0xc
c001f3ff:	68 dd 64 02 c0       	push   0xc00264dd
c001f404:	e8 20 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f409:	83 c4 10             	add    esp,0x10
c001f40c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f413:	83 ec 0c             	sub    esp,0xc
c001f416:	31 ed                	xor    ebp,ebp
c001f418:	68 e0 64 02 c0       	push   0xc00264e0
c001f41d:	e8 07 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f422:	89 f8                	mov    eax,edi
c001f424:	c1 e0 06             	shl    eax,0x6
c001f427:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f42f:	c7 04 24 e3 64 02 c0 	mov    DWORD PTR [esp],0xc00264e3
c001f436:	e8 ee de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f43b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f43f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f447:	c1 e0 04             	shl    eax,0x4
c001f44a:	83 c8 a0             	or     eax,0xffffffa0
c001f44d:	0f b6 c0             	movzx  eax,al
c001f450:	50                   	push   eax
c001f451:	6a 06                	push   0x6
c001f453:	56                   	push   esi
c001f454:	53                   	push   ebx
c001f455:	e8 d6 f6 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f45a:	83 c4 1c             	add    esp,0x1c
c001f45d:	6a 0c                	push   0xc
c001f45f:	56                   	push   esi
c001f460:	53                   	push   ebx
c001f461:	e8 8a f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f466:	83 c4 0c             	add    esp,0xc
c001f469:	6a 0c                	push   0xc
c001f46b:	56                   	push   esi
c001f46c:	53                   	push   ebx
c001f46d:	e8 7e f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f472:	83 c4 0c             	add    esp,0xc
c001f475:	6a 0c                	push   0xc
c001f477:	56                   	push   esi
c001f478:	53                   	push   ebx
c001f479:	e8 72 f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f47e:	83 c4 0c             	add    esp,0xc
c001f481:	6a 0c                	push   0xc
c001f483:	56                   	push   esi
c001f484:	53                   	push   ebx
c001f485:	e8 66 f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f48a:	c7 04 24 e6 64 02 c0 	mov    DWORD PTR [esp],0xc00264e6
c001f491:	e8 93 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f496:	68 ec 00 00 00       	push   0xec
c001f49b:	6a 07                	push   0x7
c001f49d:	56                   	push   esi
c001f49e:	53                   	push   ebx
c001f49f:	e8 8c f6 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4a4:	83 c4 1c             	add    esp,0x1c
c001f4a7:	6a 0c                	push   0xc
c001f4a9:	56                   	push   esi
c001f4aa:	53                   	push   ebx
c001f4ab:	e8 40 f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f4b0:	83 c4 0c             	add    esp,0xc
c001f4b3:	6a 0c                	push   0xc
c001f4b5:	56                   	push   esi
c001f4b6:	53                   	push   ebx
c001f4b7:	e8 34 f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f4bc:	83 c4 0c             	add    esp,0xc
c001f4bf:	6a 0c                	push   0xc
c001f4c1:	56                   	push   esi
c001f4c2:	53                   	push   ebx
c001f4c3:	e8 28 f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f4c8:	83 c4 0c             	add    esp,0xc
c001f4cb:	6a 0c                	push   0xc
c001f4cd:	56                   	push   esi
c001f4ce:	53                   	push   ebx
c001f4cf:	e8 1c f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f4d4:	c7 04 24 e9 64 02 c0 	mov    DWORD PTR [esp],0xc00264e9
c001f4db:	e8 49 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f4e0:	83 c4 0c             	add    esp,0xc
c001f4e3:	6a 0c                	push   0xc
c001f4e5:	56                   	push   esi
c001f4e6:	53                   	push   ebx
c001f4e7:	e8 04 f7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f4ec:	83 c4 10             	add    esp,0x10
c001f4ef:	84 c0                	test   al,al
c001f4f1:	75 1f                	jne    c001f512 <IDE::detect()+0x164>
c001f4f3:	83 ec 0c             	sub    esp,0xc
c001f4f6:	68 ec 64 02 c0       	push   0xc00264ec
c001f4fb:	e8 29 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f500:	e9 e9 02 00 00       	jmp    c001f7ee <IDE::detect()+0x440>
c001f505:	a8 80                	test   al,0x80
c001f507:	74 21                	je     c001f52a <IDE::detect()+0x17c>
c001f509:	45                   	inc    ebp
c001f50a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f510:	7f 1e                	jg     c001f530 <IDE::detect()+0x182>
c001f512:	50                   	push   eax
c001f513:	6a 0c                	push   0xc
c001f515:	56                   	push   esi
c001f516:	53                   	push   ebx
c001f517:	e8 d4 f6 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f51c:	83 c4 10             	add    esp,0x10
c001f51f:	a8 01                	test   al,0x1
c001f521:	74 e2                	je     c001f505 <IDE::detect()+0x157>
c001f523:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f528:	eb 23                	jmp    c001f54d <IDE::detect()+0x19f>
c001f52a:	a8 08                	test   al,0x8
c001f52c:	74 db                	je     c001f509 <IDE::detect()+0x15b>
c001f52e:	eb 18                	jmp    c001f548 <IDE::detect()+0x19a>
c001f530:	50                   	push   eax
c001f531:	50                   	push   eax
c001f532:	6a 00                	push   0x0
c001f534:	6a 32                	push   0x32
c001f536:	e8 99 7f ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c001f53b:	83 c4 10             	add    esp,0x10
c001f53e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f544:	75 cc                	jne    c001f512 <IDE::detect()+0x164>
c001f546:	eb db                	jmp    c001f523 <IDE::detect()+0x175>
c001f548:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f54d:	83 ec 0c             	sub    esp,0xc
c001f550:	68 ef 64 02 c0       	push   0xc00264ef
c001f555:	e8 cf dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f55a:	83 c4 10             	add    esp,0x10
c001f55d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f562:	74 5f                	je     c001f5c3 <IDE::detect()+0x215>
c001f564:	51                   	push   ecx
c001f565:	6a 04                	push   0x4
c001f567:	56                   	push   esi
c001f568:	53                   	push   ebx
c001f569:	e8 82 f6 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f56e:	83 c4 0c             	add    esp,0xc
c001f571:	89 c5                	mov    ebp,eax
c001f573:	6a 05                	push   0x5
c001f575:	56                   	push   esi
c001f576:	53                   	push   ebx
c001f577:	e8 74 f6 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f57c:	83 c4 10             	add    esp,0x10
c001f57f:	89 e9                	mov    ecx,ebp
c001f581:	0f b6 c0             	movzx  eax,al
c001f584:	0f b6 e9             	movzx  ebp,cl
c001f587:	83 fd 14             	cmp    ebp,0x14
c001f58a:	75 07                	jne    c001f593 <IDE::detect()+0x1e5>
c001f58c:	3d eb 00 00 00       	cmp    eax,0xeb
c001f591:	eb 0e                	jmp    c001f5a1 <IDE::detect()+0x1f3>
c001f593:	3d 96 00 00 00       	cmp    eax,0x96
c001f598:	0f 85 53 02 00 00    	jne    c001f7f1 <IDE::detect()+0x443>
c001f59e:	83 fd 69             	cmp    ebp,0x69
c001f5a1:	0f 85 4a 02 00 00    	jne    c001f7f1 <IDE::detect()+0x443>
c001f5a7:	68 a1 00 00 00       	push   0xa1
c001f5ac:	6a 07                	push   0x7
c001f5ae:	56                   	push   esi
c001f5af:	53                   	push   ebx
c001f5b0:	e8 7b f5 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5b5:	58                   	pop    eax
c001f5b6:	5a                   	pop    edx
c001f5b7:	6a 00                	push   0x0
c001f5b9:	6a 0a                	push   0xa
c001f5bb:	e8 14 7f ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c001f5c0:	83 c4 10             	add    esp,0x10
c001f5c3:	83 ec 0c             	sub    esp,0xc
c001f5c6:	89 fd                	mov    ebp,edi
c001f5c8:	68 f2 64 02 c0       	push   0xc00264f2
c001f5cd:	c1 e5 06             	shl    ebp,0x6
c001f5d0:	e8 54 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f5d5:	01 dd                	add    ebp,ebx
c001f5d7:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f5db:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f5e2:	52                   	push   edx
c001f5e3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f5e7:	6a 00                	push   0x0
c001f5e9:	56                   	push   esi
c001f5ea:	53                   	push   ebx
c001f5eb:	e8 ee fc ff ff       	call   c001f2de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f5f0:	83 c4 14             	add    esp,0x14
c001f5f3:	68 f6 64 02 c0       	push   0xc00264f6
c001f5f8:	e8 2c dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f5fd:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f602:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f609:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f610:	89 f0                	mov    eax,esi
c001f612:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f618:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f61c:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f626:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f62d:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f635:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f63c:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f644:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f64a:	c7 04 24 fa 64 02 c0 	mov    DWORD PTR [esp],0xc00264fa
c001f651:	e8 d3 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f656:	83 c4 10             	add    esp,0x10
c001f659:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f660:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f664:	74 09                	je     c001f66f <IDE::detect()+0x2c1>
c001f666:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f66d:	eb 07                	jmp    c001f676 <IDE::detect()+0x2c8>
c001f66f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f676:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f67a:	89 f8                	mov    eax,edi
c001f67c:	83 ec 0c             	sub    esp,0xc
c001f67f:	c1 e0 06             	shl    eax,0x6
c001f682:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f685:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f68b:	68 fe 64 02 c0       	push   0xc00264fe
c001f690:	e8 94 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f695:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f699:	89 e8                	mov    eax,ebp
c001f69b:	83 c4 10             	add    esp,0x10
c001f69e:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f6a1:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f6a4:	83 c0 02             	add    eax,0x2
c001f6a7:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f6ad:	83 c2 02             	add    edx,0x2
c001f6b0:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f6b3:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f6b9:	39 d5                	cmp    ebp,edx
c001f6bb:	75 e4                	jne    c001f6a1 <IDE::detect()+0x2f3>
c001f6bd:	89 f8                	mov    eax,edi
c001f6bf:	c1 e0 06             	shl    eax,0x6
c001f6c2:	01 d8                	add    eax,ebx
c001f6c4:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f6cb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f6d2:	c1 ea 09             	shr    edx,0x9
c001f6d5:	83 e2 01             	and    edx,0x1
c001f6d8:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f6df:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f6e5:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f6e9:	74 0c                	je     c001f6f7 <IDE::detect()+0x349>
c001f6eb:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f6f4:	0f 95 c2             	setne  dl
c001f6f7:	83 ec 0c             	sub    esp,0xc
c001f6fa:	89 fd                	mov    ebp,edi
c001f6fc:	c1 e5 06             	shl    ebp,0x6
c001f6ff:	01 dd                	add    ebp,ebx
c001f701:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f707:	68 02 65 02 c0       	push   0xc0026502
c001f70c:	e8 18 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f711:	83 c4 10             	add    esp,0x10
c001f714:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f719:	75 66                	jne    c001f781 <IDE::detect()+0x3d3>
c001f71b:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f722:	0f 84 b8 00 00 00    	je     c001f7e0 <IDE::detect()+0x432>
c001f728:	83 ec 0c             	sub    esp,0xc
c001f72b:	68 06 65 02 c0       	push   0xc0026506
c001f730:	e8 f4 db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f735:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f73c:	e8 1e 06 ff ff       	call   c000fd5f <malloc>
c001f741:	89 04 24             	mov    DWORD PTR [esp],eax
c001f744:	89 c5                	mov    ebp,eax
c001f746:	e8 43 05 00 00       	call   c001fc8e <ATA::ATA()>
c001f74b:	c7 04 24 0a 65 02 c0 	mov    DWORD PTR [esp],0xc002650a
c001f752:	e8 d2 db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f757:	59                   	pop    ecx
c001f758:	58                   	pop    eax
c001f759:	55                   	push   ebp
c001f75a:	53                   	push   ebx
c001f75b:	e8 f4 a2 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f760:	c7 04 24 0f 65 02 c0 	mov    DWORD PTR [esp],0xc002650f
c001f767:	e8 bd db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f76c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f76f:	53                   	push   ebx
c001f770:	57                   	push   edi
c001f771:	6a 00                	push   0x0
c001f773:	55                   	push   ebp
c001f774:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f777:	83 c4 14             	add    esp,0x14
c001f77a:	68 14 65 02 c0       	push   0xc0026514
c001f77f:	eb 57                	jmp    c001f7d8 <IDE::detect()+0x42a>
c001f781:	83 ec 0c             	sub    esp,0xc
c001f784:	68 19 65 02 c0       	push   0xc0026519
c001f789:	e8 9b db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f78e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f795:	e8 c5 05 ff ff       	call   c000fd5f <malloc>
c001f79a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f79d:	89 c5                	mov    ebp,eax
c001f79f:	e8 98 0c 00 00       	call   c002043c <ATAPI::ATAPI()>
c001f7a4:	c7 04 24 1f 65 02 c0 	mov    DWORD PTR [esp],0xc002651f
c001f7ab:	e8 79 db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f7b0:	58                   	pop    eax
c001f7b1:	5a                   	pop    edx
c001f7b2:	55                   	push   ebp
c001f7b3:	53                   	push   ebx
c001f7b4:	e8 9b a2 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f7b9:	c7 04 24 26 65 02 c0 	mov    DWORD PTR [esp],0xc0026526
c001f7c0:	e8 64 db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f7c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f7c8:	53                   	push   ebx
c001f7c9:	57                   	push   edi
c001f7ca:	6a 00                	push   0x0
c001f7cc:	55                   	push   ebp
c001f7cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f7d0:	83 c4 14             	add    esp,0x14
c001f7d3:	68 2d 65 02 c0       	push   0xc002652d
c001f7d8:	e8 4c db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f7dd:	83 c4 10             	add    esp,0x10
c001f7e0:	83 ec 0c             	sub    esp,0xc
c001f7e3:	47                   	inc    edi
c001f7e4:	68 34 65 02 c0       	push   0xc0026534
c001f7e9:	e8 3b db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f7ee:	83 c4 10             	add    esp,0x10
c001f7f1:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f7f5:	74 0c                	je     c001f803 <IDE::detect()+0x455>
c001f7f7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f7fe:	e9 10 fc ff ff       	jmp    c001f413 <IDE::detect()+0x65>
c001f803:	4e                   	dec    esi
c001f804:	74 0a                	je     c001f810 <IDE::detect()+0x462>
c001f806:	be 01 00 00 00       	mov    esi,0x1
c001f80b:	e9 ec fb ff ff       	jmp    c001f3fc <IDE::detect()+0x4e>
c001f810:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f816:	5b                   	pop    ebx
c001f817:	5e                   	pop    esi
c001f818:	5f                   	pop    edi
c001f819:	5d                   	pop    ebp
c001f81a:	c3                   	ret    
c001f81b:	90                   	nop

c001f81c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f81c:	55                   	push   ebp
c001f81d:	57                   	push   edi
c001f81e:	56                   	push   esi
c001f81f:	53                   	push   ebx
c001f820:	83 ec 1c             	sub    esp,0x1c
c001f823:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f827:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f82b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f82f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f833:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f837:	88 c3                	mov    bl,al
c001f839:	25 ff 00 00 00       	and    eax,0xff
c001f83e:	0f 84 88 00 00 00    	je     c001f8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f844:	83 ec 0c             	sub    esp,0xc
c001f847:	89 c7                	mov    edi,eax
c001f849:	68 38 65 02 c0       	push   0xc0026538
c001f84e:	e8 29 77 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	83 ff 01             	cmp    edi,0x1
c001f859:	74 6b                	je     c001f8c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f85b:	83 ff 02             	cmp    edi,0x2
c001f85e:	75 58                	jne    c001f8b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f860:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f865:	01 ff                	add    edi,edi
c001f867:	50                   	push   eax
c001f868:	09 fe                	or     esi,edi
c001f86a:	6a 01                	push   0x1
c001f86c:	89 f0                	mov    eax,esi
c001f86e:	0f b6 f0             	movzx  esi,al
c001f871:	c1 e6 06             	shl    esi,0x6
c001f874:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f87c:	50                   	push   eax
c001f87d:	55                   	push   ebp
c001f87e:	e8 6d f3 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f883:	83 c4 10             	add    esp,0x10
c001f886:	a8 01                	test   al,0x1
c001f888:	74 02                	je     c001f88c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f88a:	b3 07                	mov    bl,0x7
c001f88c:	a8 02                	test   al,0x2
c001f88e:	74 02                	je     c001f892 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f890:	b3 03                	mov    bl,0x3
c001f892:	a8 04                	test   al,0x4
c001f894:	74 02                	je     c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f896:	b3 14                	mov    bl,0x14
c001f898:	a8 08                	test   al,0x8
c001f89a:	74 02                	je     c001f89e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f89c:	b3 03                	mov    bl,0x3
c001f89e:	a8 10                	test   al,0x10
c001f8a0:	74 02                	je     c001f8a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f8a2:	b3 15                	mov    bl,0x15
c001f8a4:	a8 20                	test   al,0x20
c001f8a6:	74 02                	je     c001f8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f8a8:	b3 03                	mov    bl,0x3
c001f8aa:	a8 40                	test   al,0x40
c001f8ac:	74 02                	je     c001f8b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f8ae:	b3 16                	mov    bl,0x16
c001f8b0:	a8 80                	test   al,0x80
c001f8b2:	74 18                	je     c001f8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f8b4:	b3 0d                	mov    bl,0xd
c001f8b6:	eb 14                	jmp    c001f8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f8b8:	83 ff 03             	cmp    edi,0x3
c001f8bb:	74 0d                	je     c001f8ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f8bd:	83 ff 04             	cmp    edi,0x4
c001f8c0:	75 0a                	jne    c001f8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f8c2:	b3 08                	mov    bl,0x8
c001f8c4:	eb 06                	jmp    c001f8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f8c6:	b3 13                	mov    bl,0x13
c001f8c8:	eb 02                	jmp    c001f8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f8ca:	b3 17                	mov    bl,0x17
c001f8cc:	83 c4 1c             	add    esp,0x1c
c001f8cf:	88 d8                	mov    al,bl
c001f8d1:	5b                   	pop    ebx
c001f8d2:	5e                   	pop    esi
c001f8d3:	5f                   	pop    edi
c001f8d4:	5d                   	pop    ebp
c001f8d5:	c3                   	ret    

c001f8d6 <IDE::polling(unsigned char, unsigned int)>:
c001f8d6:	57                   	push   edi
c001f8d7:	56                   	push   esi
c001f8d8:	53                   	push   ebx
c001f8d9:	bb 04 00 00 00       	mov    ebx,0x4
c001f8de:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f8e2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f8e7:	52                   	push   edx
c001f8e8:	6a 0c                	push   0xc
c001f8ea:	56                   	push   esi
c001f8eb:	57                   	push   edi
c001f8ec:	e8 ff f2 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f8f1:	83 c4 10             	add    esp,0x10
c001f8f4:	4b                   	dec    ebx
c001f8f5:	75 f0                	jne    c001f8e7 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f8f7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f8fc:	50                   	push   eax
c001f8fd:	6a 0c                	push   0xc
c001f8ff:	56                   	push   esi
c001f900:	57                   	push   edi
c001f901:	e8 ea f2 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001f906:	83 c4 10             	add    esp,0x10
c001f909:	a8 01                	test   al,0x1
c001f90b:	75 17                	jne    c001f924 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f90d:	a8 20                	test   al,0x20
c001f90f:	75 0f                	jne    c001f920 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f911:	4b                   	dec    ebx
c001f912:	74 10                	je     c001f924 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f914:	a8 80                	test   al,0x80
c001f916:	75 e4                	jne    c001f8fc <IDE::polling(unsigned char, unsigned int)+0x26>
c001f918:	a8 08                	test   al,0x8
c001f91a:	74 e0                	je     c001f8fc <IDE::polling(unsigned char, unsigned int)+0x26>
c001f91c:	31 c0                	xor    eax,eax
c001f91e:	eb 06                	jmp    c001f926 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f920:	b0 01                	mov    al,0x1
c001f922:	eb 02                	jmp    c001f926 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f924:	b0 02                	mov    al,0x2
c001f926:	5b                   	pop    ebx
c001f927:	5e                   	pop    esi
c001f928:	5f                   	pop    edi
c001f929:	c3                   	ret    

c001f92a <SATABus::close(int, int, void*)>:
c001f92a:	31 c0                	xor    eax,eax
c001f92c:	c3                   	ret    
c001f92d:	90                   	nop

c001f92e <SATABus::detect()>:
c001f92e:	c3                   	ret    
c001f92f:	90                   	nop

c001f930 <SATABus::SATABus()>:
c001f930:	83 ec 0c             	sub    esp,0xc
c001f933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f937:	83 ec 08             	sub    esp,0x8
c001f93a:	68 70 65 02 c0       	push   0xc0026570
c001f93f:	50                   	push   eax
c001f940:	e8 67 a4 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001f945:	83 c4 10             	add    esp,0x10
c001f948:	ba 9c 65 02 c0       	mov    edx,0xc002659c
c001f94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f951:	89 10                	mov    DWORD PTR [eax],edx
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	6a 50                	push   0x50
c001f958:	e8 e3 09 ff ff       	call   c0010340 <Phys::allocateContiguousPages(int)>
c001f95d:	83 c4 10             	add    esp,0x10
c001f960:	89 c2                	mov    edx,eax
c001f962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f966:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f96c:	83 ec 0c             	sub    esp,0xc
c001f96f:	6a 50                	push   0x50
c001f971:	e8 f7 3b ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c001f976:	83 c4 10             	add    esp,0x10
c001f979:	89 c2                	mov    edx,eax
c001f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f985:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c001f98a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f98e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f994:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f998:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	6a 03                	push   0x3
c001f9a3:	6a 50                	push   0x50
c001f9a5:	51                   	push   ecx
c001f9a6:	52                   	push   edx
c001f9a7:	50                   	push   eax
c001f9a8:	e8 8d 44 ff ff       	call   c0013e3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f9ad:	83 c4 20             	add    esp,0x20
c001f9b0:	90                   	nop
c001f9b1:	83 c4 0c             	add    esp,0xc
c001f9b4:	c3                   	ret    
c001f9b5:	90                   	nop

c001f9b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f9b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ba:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f9bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f9c0:	09 c2                	or     edx,eax
c001f9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f9cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f9ce:	31 c0                	xor    eax,eax
c001f9d0:	c1 e9 08             	shr    ecx,0x8
c001f9d3:	83 e1 0f             	and    ecx,0xf
c001f9d6:	39 c8                	cmp    eax,ecx
c001f9d8:	74 0a                	je     c001f9e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f9da:	f6 c2 01             	test   dl,0x1
c001f9dd:	74 08                	je     c001f9e7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f9df:	d1 ea                	shr    edx,1
c001f9e1:	40                   	inc    eax
c001f9e2:	eb f2                	jmp    c001f9d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f9e4:	83 c8 ff             	or     eax,0xffffffff
c001f9e7:	c3                   	ret    

c001f9e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f9e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9ec:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f9ef:	89 c2                	mov    edx,eax
c001f9f1:	c1 ea 08             	shr    edx,0x8
c001f9f4:	83 e2 0f             	and    edx,0xf
c001f9f7:	4a                   	dec    edx
c001f9f8:	75 32                	jne    c001fa2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f9fa:	83 e0 0f             	and    eax,0xf
c001f9fd:	83 f8 03             	cmp    eax,0x3
c001fa00:	75 2a                	jne    c001fa2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fa02:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001fa05:	b8 02 00 00 00       	mov    eax,0x2
c001fa0a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001fa10:	74 1c                	je     c001fa2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fa12:	b8 04 00 00 00       	mov    eax,0x4
c001fa17:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001fa1d:	74 0f                	je     c001fa2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fa1f:	31 c0                	xor    eax,eax
c001fa21:	83 fa 03             	cmp    edx,0x3
c001fa24:	0f 94 c0             	sete   al
c001fa27:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001fa2b:	c3                   	ret    
c001fa2c:	31 c0                	xor    eax,eax
c001fa2e:	c3                   	ret    
c001fa2f:	90                   	nop

c001fa30 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001fa30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa34:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa37:	0f ba e2 0f          	bt     edx,0xf
c001fa3b:	72 f7                	jb     c001fa34 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001fa3d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa40:	83 ca 10             	or     edx,0x10
c001fa43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa46:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa49:	83 ca 01             	or     edx,0x1
c001fa4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa4f:	c3                   	ret    

c001fa50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001fa50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa54:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa57:	83 e2 fe             	and    edx,0xfffffffe
c001fa5a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa5d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa60:	83 e2 ef             	and    edx,0xffffffef
c001fa63:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa69:	0f ba e2 0e          	bt     edx,0xe
c001fa6d:	72 f7                	jb     c001fa66 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa6f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa72:	0f ba e2 0f          	bt     edx,0xf
c001fa76:	72 ee                	jb     c001fa66 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa78:	c3                   	ret    
c001fa79:	90                   	nop

c001fa7a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fa7a:	55                   	push   ebp
c001fa7b:	57                   	push   edi
c001fa7c:	56                   	push   esi
c001fa7d:	53                   	push   ebx
c001fa7e:	83 ec 1c             	sub    esp,0x1c
c001fa81:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fa89:	53                   	push   ebx
c001fa8a:	56                   	push   esi
c001fa8b:	e8 c0 ff ff ff       	call   c001fa50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fa90:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fa94:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fa9a:	83 ec 0c             	sub    esp,0xc
c001fa9d:	c1 e5 0a             	shl    ebp,0xa
c001faa0:	01 e8                	add    eax,ebp
c001faa2:	89 03                	mov    DWORD PTR [ebx],eax
c001faa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001faa6:	68 00 04 00 00       	push   0x400
c001faab:	6a 00                	push   0x0
c001faad:	50                   	push   eax
c001faae:	e8 3d 0a fe ff       	call   c00004f0 <memset>
c001fab3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fab9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001fabd:	01 e8                	add    eax,ebp
c001fabf:	83 c4 1c             	add    esp,0x1c
c001fac2:	89 03                	mov    DWORD PTR [ebx],eax
c001fac4:	c1 e2 08             	shl    edx,0x8
c001fac7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001face:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001fad4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fada:	01 f8                	add    eax,edi
c001fadc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fadf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fae2:	68 00 01 00 00       	push   0x100
c001fae7:	6a 00                	push   0x0
c001fae9:	50                   	push   eax
c001faea:	e8 01 0a fe ff       	call   c00004f0 <memset>
c001faef:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001faf5:	01 fa                	add    edx,edi
c001faf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fafb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fafe:	c1 e7 0d             	shl    edi,0xd
c001fb01:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fb08:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fb0e:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fb14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fb18:	31 ff                	xor    edi,edi
c001fb1a:	83 c4 10             	add    esp,0x10
c001fb1d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fb23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb27:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fb2d:	83 c5 20             	add    ebp,0x20
c001fb30:	01 f8                	add    eax,edi
c001fb32:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fb35:	52                   	push   edx
c001fb36:	68 00 01 00 00       	push   0x100
c001fb3b:	6a 00                	push   0x0
c001fb3d:	50                   	push   eax
c001fb3e:	e8 ad 09 fe ff       	call   c00004f0 <memset>
c001fb43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb47:	83 c4 10             	add    esp,0x10
c001fb4a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fb50:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fb57:	01 f8                	add    eax,edi
c001fb59:	81 c7 00 01 00 00    	add    edi,0x100
c001fb5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fb62:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fb68:	75 b3                	jne    c001fb1d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001fb6a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fb71:	50                   	push   eax
c001fb72:	50                   	push   eax
c001fb73:	53                   	push   ebx
c001fb74:	56                   	push   esi
c001fb75:	e8 b6 fe ff ff       	call   c001fa30 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fb7a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fb81:	83 c4 2c             	add    esp,0x2c
c001fb84:	5b                   	pop    ebx
c001fb85:	5e                   	pop    esi
c001fb86:	5f                   	pop    edi
c001fb87:	5d                   	pop    ebp
c001fb88:	c3                   	ret    
c001fb89:	90                   	nop

c001fb8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fb8a:	55                   	push   ebp
c001fb8b:	57                   	push   edi
c001fb8c:	56                   	push   esi
c001fb8d:	53                   	push   ebx
c001fb8e:	31 db                	xor    ebx,ebx
c001fb90:	83 ec 0c             	sub    esp,0xc
c001fb93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb9b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fb9e:	f7 c7 01 00 00 00    	test   edi,0x1
c001fba4:	74 7a                	je     c001fc20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fba6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fbaa:	89 d8                	mov    eax,ebx
c001fbac:	c1 e0 07             	shl    eax,0x7
c001fbaf:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001fbb6:	55                   	push   ebp
c001fbb7:	56                   	push   esi
c001fbb8:	e8 2b fe ff ff       	call   c001f9e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fbbd:	5a                   	pop    edx
c001fbbe:	83 f8 01             	cmp    eax,0x1
c001fbc1:	59                   	pop    ecx
c001fbc2:	75 21                	jne    c001fbe5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001fbc4:	50                   	push   eax
c001fbc5:	53                   	push   ebx
c001fbc6:	55                   	push   ebp
c001fbc7:	56                   	push   esi
c001fbc8:	e8 ad fe ff ff       	call   c001fa7a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fbcd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fbd4:	e8 86 01 ff ff       	call   c000fd5f <malloc>
c001fbd9:	89 c5                	mov    ebp,eax
c001fbdb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbde:	e8 25 0f 00 00       	call   c0020b08 <SATA::SATA()>
c001fbe3:	eb 24                	jmp    c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fbe5:	83 f8 04             	cmp    eax,0x4
c001fbe8:	75 36                	jne    c001fc20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fbea:	51                   	push   ecx
c001fbeb:	53                   	push   ebx
c001fbec:	55                   	push   ebp
c001fbed:	56                   	push   esi
c001fbee:	e8 87 fe ff ff       	call   c001fa7a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fbf3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fbfa:	e8 60 01 ff ff       	call   c000fd5f <malloc>
c001fbff:	89 c5                	mov    ebp,eax
c001fc01:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc04:	e8 97 12 00 00       	call   c0020ea0 <SATAPI::SATAPI()>
c001fc09:	58                   	pop    eax
c001fc0a:	5a                   	pop    edx
c001fc0b:	55                   	push   ebp
c001fc0c:	56                   	push   esi
c001fc0d:	e8 42 9e fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001fc12:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fc15:	56                   	push   esi
c001fc16:	6a 00                	push   0x0
c001fc18:	53                   	push   ebx
c001fc19:	55                   	push   ebp
c001fc1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fc1d:	83 c4 20             	add    esp,0x20
c001fc20:	d1 ef                	shr    edi,1
c001fc22:	43                   	inc    ebx
c001fc23:	83 fb 20             	cmp    ebx,0x20
c001fc26:	0f 85 72 ff ff ff    	jne    c001fb9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fc2c:	83 c4 0c             	add    esp,0xc
c001fc2f:	5b                   	pop    ebx
c001fc30:	5e                   	pop    esi
c001fc31:	5f                   	pop    edi
c001fc32:	5d                   	pop    ebp
c001fc33:	c3                   	ret    

c001fc34 <SATABus::open(int, int, void*)>:
c001fc34:	53                   	push   ebx
c001fc35:	83 ec 08             	sub    esp,0x8
c001fc38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fc3c:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fc42:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fc48:	e8 8b 73 ff ff       	call   c0016fd8 <KeDisablePreemption()>
c001fc4d:	52                   	push   edx
c001fc4e:	52                   	push   edx
c001fc4f:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fc55:	53                   	push   ebx
c001fc56:	e8 2f ff ff ff       	call   c001fb8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fc5b:	e8 a0 73 ff ff       	call   c0017000 <KeRestorePreemption()>
c001fc60:	31 c0                	xor    eax,eax
c001fc62:	83 c4 18             	add    esp,0x18
c001fc65:	5b                   	pop    ebx
c001fc66:	c3                   	ret    
c001fc67:	90                   	nop

c001fc68 <ATA::close(int, int, void*)>:
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fc75:	85 c0                	test   eax,eax
c001fc77:	74 0c                	je     c001fc85 <ATA::close(int, int, void*)+0x1d>
c001fc79:	83 ec 0c             	sub    esp,0xc
c001fc7c:	8b 10                	mov    edx,DWORD PTR [eax]
c001fc7e:	50                   	push   eax
c001fc7f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fc82:	83 c4 10             	add    esp,0x10
c001fc85:	31 c0                	xor    eax,eax
c001fc87:	83 c4 0c             	add    esp,0xc
c001fc8a:	c3                   	ret    
c001fc8b:	90                   	nop

c001fc8c <ATA::powerSaving(PowerSavingLevel)>:
c001fc8c:	c3                   	ret    
c001fc8d:	90                   	nop

c001fc8e <ATA::ATA()>:
c001fc8e:	83 ec 0c             	sub    esp,0xc
c001fc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc95:	83 ec 04             	sub    esp,0x4
c001fc98:	68 00 02 00 00       	push   0x200
c001fc9d:	68 1d 67 02 c0       	push   0xc002671d
c001fca2:	50                   	push   eax
c001fca3:	e8 8e a1 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fca8:	83 c4 10             	add    esp,0x10
c001fcab:	ba 84 66 02 c0       	mov    edx,0xc0026684
c001fcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb4:	89 10                	mov    DWORD PTR [eax],edx
c001fcb6:	90                   	nop
c001fcb7:	83 c4 0c             	add    esp,0xc
c001fcba:	c3                   	ret    
c001fcbb:	90                   	nop

c001fcbc <ATA::flush(bool)>:
c001fcbc:	53                   	push   ebx
c001fcbd:	83 ec 08             	sub    esp,0x8
c001fcc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fcc4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001fcc9:	83 f8 01             	cmp    eax,0x1
c001fccc:	19 c0                	sbb    eax,eax
c001fcce:	83 e0 fd             	and    eax,0xfffffffd
c001fcd1:	05 ea 00 00 00       	add    eax,0xea
c001fcd6:	50                   	push   eax
c001fcd7:	6a 07                	push   0x7
c001fcd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fce0:	50                   	push   eax
c001fce1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fce7:	e8 44 ee ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcec:	83 c4 0c             	add    esp,0xc
c001fcef:	6a 00                	push   0x0
c001fcf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcf8:	50                   	push   eax
c001fcf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcff:	e8 d2 fb ff ff       	call   c001f8d6 <IDE::polling(unsigned char, unsigned int)>
c001fd04:	83 c4 18             	add    esp,0x18
c001fd07:	5b                   	pop    ebx
c001fd08:	c3                   	ret    
c001fd09:	90                   	nop

c001fd0a <ATA::readyForCommand()>:
c001fd0a:	56                   	push   esi
c001fd0b:	53                   	push   ebx
c001fd0c:	31 db                	xor    ebx,ebx
c001fd0e:	50                   	push   eax
c001fd0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd13:	50                   	push   eax
c001fd14:	6a 0c                	push   0xc
c001fd16:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fd1d:	50                   	push   eax
c001fd1e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fd24:	e8 c7 ee ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c001fd29:	83 c4 10             	add    esp,0x10
c001fd2c:	a8 88                	test   al,0x88
c001fd2e:	74 20                	je     c001fd50 <ATA::readyForCommand()+0x46>
c001fd30:	43                   	inc    ebx
c001fd31:	83 fb 63             	cmp    ebx,0x63
c001fd34:	7e dd                	jle    c001fd13 <ATA::readyForCommand()+0x9>
c001fd36:	51                   	push   ecx
c001fd37:	51                   	push   ecx
c001fd38:	6a 00                	push   0x0
c001fd3a:	6a 0a                	push   0xa
c001fd3c:	e8 93 77 ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c001fd41:	83 c4 10             	add    esp,0x10
c001fd44:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fd4a:	75 c7                	jne    c001fd13 <ATA::readyForCommand()+0x9>
c001fd4c:	31 c0                	xor    eax,eax
c001fd4e:	eb 02                	jmp    c001fd52 <ATA::readyForCommand()+0x48>
c001fd50:	b0 01                	mov    al,0x1
c001fd52:	5a                   	pop    edx
c001fd53:	5b                   	pop    ebx
c001fd54:	5e                   	pop    esi
c001fd55:	c3                   	ret    

c001fd56 <ATA::access(unsigned long long, int, void*, bool)>:
c001fd56:	55                   	push   ebp
c001fd57:	57                   	push   edi
c001fd58:	56                   	push   esi
c001fd59:	53                   	push   ebx
c001fd5a:	83 ec 2c             	sub    esp,0x2c
c001fd5d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fd61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fd65:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fd69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd6d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fd71:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fd75:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fd79:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fd7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fd83:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fd89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fd8d:	c1 e0 06             	shl    eax,0x6
c001fd90:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fd98:	74 5d                	je     c001fdf7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001fd9a:	89 fa                	mov    edx,edi
c001fd9c:	89 f0                	mov    eax,esi
c001fd9e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fda2:	c1 ea 1c             	shr    edx,0x1c
c001fda5:	89 d1                	mov    ecx,edx
c001fda7:	09 c1                	or     ecx,eax
c001fda9:	74 25                	je     c001fdd0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fdab:	31 ed                	xor    ebp,ebp
c001fdad:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fdb4:	89 fa                	mov    edx,edi
c001fdb6:	89 f0                	mov    eax,esi
c001fdb8:	0f ad d0             	shrd   eax,edx,cl
c001fdbb:	d3 ea                	shr    edx,cl
c001fdbd:	f6 c1 20             	test   cl,0x20
c001fdc0:	74 02                	je     c001fdc4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fdc2:	89 d0                	mov    eax,edx
c001fdc4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fdc8:	45                   	inc    ebp
c001fdc9:	83 fd 06             	cmp    ebp,0x6
c001fdcc:	75 df                	jne    c001fdad <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fdce:	eb 76                	jmp    c001fe46 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001fdd0:	89 f0                	mov    eax,esi
c001fdd2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fdd7:	89 fa                	mov    edx,edi
c001fdd9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fde0:	0f ac d0 10          	shrd   eax,edx,0x10
c001fde4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fde9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fded:	c1 ee 18             	shr    esi,0x18
c001fdf0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fdf5:	eb 56                	jmp    c001fe4d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fdf7:	6a 00                	push   0x0
c001fdf9:	6a 3f                	push   0x3f
c001fdfb:	57                   	push   edi
c001fdfc:	56                   	push   esi
c001fdfd:	e8 b2 20 00 00       	call   c0021eb4 <__umoddi3>
c001fe02:	83 c4 10             	add    esp,0x10
c001fe05:	40                   	inc    eax
c001fe06:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fe0a:	6a 00                	push   0x0
c001fe0c:	68 f0 03 00 00       	push   0x3f0
c001fe11:	57                   	push   edi
c001fe12:	56                   	push   esi
c001fe13:	e8 9c 1f 00 00       	call   c0021db4 <__udivdi3>
c001fe18:	83 c4 10             	add    esp,0x10
c001fe1b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fe20:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fe27:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fe2c:	6a 00                	push   0x0
c001fe2e:	6a 3f                	push   0x3f
c001fe30:	57                   	push   edi
c001fe31:	56                   	push   esi
c001fe32:	e8 7d 1f 00 00       	call   c0021db4 <__udivdi3>
c001fe37:	83 c4 10             	add    esp,0x10
c001fe3a:	83 e0 0f             	and    eax,0xf
c001fe3d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fe42:	89 c6                	mov    esi,eax
c001fe44:	eb 07                	jmp    c001fe4d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fe46:	31 f6                	xor    esi,esi
c001fe48:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fe4d:	55                   	push   ebp
c001fe4e:	6a 00                	push   0x0
c001fe50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe57:	50                   	push   eax
c001fe58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fe5c:	e8 d9 ee ff ff       	call   c001ed3a <IDE::enableIRQs(unsigned char, bool)>
c001fe61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe64:	e8 a1 fe ff ff       	call   c001fd0a <ATA::readyForCommand()>
c001fe69:	83 c4 10             	add    esp,0x10
c001fe6c:	84 c0                	test   al,al
c001fe6e:	75 0a                	jne    c001fe7a <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001fe70:	be 01 00 00 00       	mov    esi,0x1
c001fe75:	e9 c2 02 00 00       	jmp    c002013c <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001fe7a:	fa                   	cli    
c001fe7b:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c001fe81:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fe87:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001fe8c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fe92:	75 0a                	jne    c001fe9e <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001fe94:	c1 e0 04             	shl    eax,0x4
c001fe97:	09 c6                	or     esi,eax
c001fe99:	83 ce a0             	or     esi,0xffffffa0
c001fe9c:	eb 08                	jmp    c001fea6 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001fe9e:	c1 e0 04             	shl    eax,0x4
c001fea1:	09 c6                	or     esi,eax
c001fea3:	83 ce e0             	or     esi,0xffffffe0
c001fea6:	89 f0                	mov    eax,esi
c001fea8:	0f b6 d2             	movzx  edx,dl
c001feab:	0f b6 f0             	movzx  esi,al
c001feae:	56                   	push   esi
c001feaf:	6a 06                	push   0x6
c001feb1:	52                   	push   edx
c001feb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001feb8:	e8 73 ec ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	6a 00                	push   0x0
c001fec2:	6a 01                	push   0x1
c001fec4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fecb:	50                   	push   eax
c001fecc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fed2:	e8 59 ec ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fedf:	83 f8 02             	cmp    eax,0x2
c001fee2:	75 6e                	jne    c001ff52 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001fee4:	6a 00                	push   0x0
c001fee6:	6a 08                	push   0x8
c001fee8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001feef:	50                   	push   eax
c001fef0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fef6:	e8 35 ec ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fefb:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ff00:	50                   	push   eax
c001ff01:	6a 09                	push   0x9
c001ff03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff0a:	50                   	push   eax
c001ff0b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff11:	e8 1a ec ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff16:	83 c4 20             	add    esp,0x20
c001ff19:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ff1e:	50                   	push   eax
c001ff1f:	6a 0a                	push   0xa
c001ff21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff28:	50                   	push   eax
c001ff29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff2f:	e8 fc eb ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff34:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ff39:	50                   	push   eax
c001ff3a:	6a 0b                	push   0xb
c001ff3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff43:	50                   	push   eax
c001ff44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff4a:	e8 e1 eb ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff4f:	83 c4 20             	add    esp,0x20
c001ff52:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ff57:	50                   	push   eax
c001ff58:	6a 02                	push   0x2
c001ff5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff61:	50                   	push   eax
c001ff62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff68:	e8 c3 eb ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff6d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ff72:	50                   	push   eax
c001ff73:	6a 03                	push   0x3
c001ff75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff7c:	50                   	push   eax
c001ff7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff83:	e8 a8 eb ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff88:	83 c4 20             	add    esp,0x20
c001ff8b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ff90:	50                   	push   eax
c001ff91:	6a 04                	push   0x4
c001ff93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff9a:	50                   	push   eax
c001ff9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffa1:	e8 8a eb ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffa6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ffab:	50                   	push   eax
c001ffac:	6a 05                	push   0x5
c001ffae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffb5:	50                   	push   eax
c001ffb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffbc:	e8 6f eb ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffc1:	83 c4 20             	add    esp,0x20
c001ffc4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ffc9:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ffce:	74 13                	je     c001ffe3 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001ffd0:	83 f8 02             	cmp    eax,0x2
c001ffd3:	74 20                	je     c001fff5 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001ffd5:	48                   	dec    eax
c001ffd6:	0f 85 94 fe ff ff    	jne    c001fe70 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001ffdc:	b8 30 00 00 00       	mov    eax,0x30
c001ffe1:	eb 1e                	jmp    c0020001 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001ffe3:	83 f8 02             	cmp    eax,0x2
c001ffe6:	74 14                	je     c001fffc <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001ffe8:	48                   	dec    eax
c001ffe9:	b8 20 00 00 00       	mov    eax,0x20
c001ffee:	74 11                	je     c0020001 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fff0:	e9 7b fe ff ff       	jmp    c001fe70 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fff5:	b8 34 00 00 00       	mov    eax,0x34
c001fffa:	eb 05                	jmp    c0020001 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fffc:	b8 24 00 00 00       	mov    eax,0x24
c0020001:	50                   	push   eax
c0020002:	6a 07                	push   0x7
c0020004:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002000b:	50                   	push   eax
c002000c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020012:	e8 19 eb ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020017:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c002001e:	83 c4 10             	add    esp,0x10
c0020021:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c0020028:	75 01                	jne    c002002b <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c002002a:	fb                   	sti    
c002002b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002002f:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c0020034:	85 f6                	test   esi,esi
c0020036:	0f 84 dd 00 00 00    	je     c0020119 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c002003c:	57                   	push   edi
c002003d:	6a 01                	push   0x1
c002003f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020046:	50                   	push   eax
c0020047:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002004d:	e8 84 f8 ff ff       	call   c001f8d6 <IDE::polling(unsigned char, unsigned int)>
c0020052:	83 c4 10             	add    esp,0x10
c0020055:	0f b6 c0             	movzx  eax,al
c0020058:	85 c0                	test   eax,eax
c002005a:	74 23                	je     c002007f <ATA::access(unsigned long long, int, void*, bool)+0x329>
c002005c:	50                   	push   eax
c002005d:	89 c6                	mov    esi,eax
c002005f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0020066:	50                   	push   eax
c0020067:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002006e:	50                   	push   eax
c002006f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020075:	e8 a2 f7 ff ff       	call   c001f81c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002007a:	e9 ba 00 00 00       	jmp    c0020139 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c002007f:	85 ed                	test   ebp,ebp
c0020081:	74 49                	je     c00200cc <ATA::access(unsigned long long, int, void*, bool)+0x376>
c0020083:	fa                   	cli    
c0020084:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c002008a:	31 c9                	xor    ecx,ecx
c002008c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020090:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020094:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c0020098:	51                   	push   ecx
c0020099:	51                   	push   ecx
c002009a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200a1:	50                   	push   eax
c00200a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200a8:	e8 71 ea ff ff       	call   c001eb1e <IDE::getBase(unsigned char)>
c00200ad:	89 c2                	mov    edx,eax
c00200af:	89 f8                	mov    eax,edi
c00200b1:	66 ef                	out    dx,ax
c00200b3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00200b7:	83 c4 10             	add    esp,0x10
c00200ba:	41                   	inc    ecx
c00200bb:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00200c1:	75 c9                	jne    c002008c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c00200c3:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00200ca:	eb 35                	jmp    c0020101 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c00200cc:	fa                   	cli    
c00200cd:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c00200d3:	52                   	push   edx
c00200d4:	52                   	push   edx
c00200d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200dc:	50                   	push   eax
c00200dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200e3:	e8 36 ea ff ff       	call   c001eb1e <IDE::getBase(unsigned char)>
c00200e8:	b9 00 01 00 00       	mov    ecx,0x100
c00200ed:	89 c2                	mov    edx,eax
c00200ef:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00200f3:	fc                   	cld    
c00200f4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00200f7:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00200fe:	83 c4 10             	add    esp,0x10
c0020101:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c0020108:	75 01                	jne    c002010b <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c002010a:	fb                   	sti    
c002010b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0020113:	4e                   	dec    esi
c0020114:	e9 1b ff ff ff       	jmp    c0020034 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c0020119:	31 f6                	xor    esi,esi
c002011b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020120:	74 1a                	je     c002013c <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c0020122:	50                   	push   eax
c0020123:	50                   	push   eax
c0020124:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0020129:	83 f8 02             	cmp    eax,0x2
c002012c:	0f 94 c0             	sete   al
c002012f:	0f b6 c0             	movzx  eax,al
c0020132:	50                   	push   eax
c0020133:	53                   	push   ebx
c0020134:	e8 83 fb ff ff       	call   c001fcbc <ATA::flush(bool)>
c0020139:	83 c4 10             	add    esp,0x10
c002013c:	83 c4 2c             	add    esp,0x2c
c002013f:	89 f0                	mov    eax,esi
c0020141:	5b                   	pop    ebx
c0020142:	5e                   	pop    esi
c0020143:	5f                   	pop    edi
c0020144:	5d                   	pop    ebp
c0020145:	c3                   	ret    

c0020146 <ATA::read(unsigned long long, int, void*)>:
c0020146:	57                   	push   edi
c0020147:	b8 04 00 00 00       	mov    eax,0x4
c002014c:	56                   	push   esi
c002014d:	53                   	push   ebx
c002014e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020152:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020156:	8d 7a ff             	lea    edi,[edx-0x1]
c0020159:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002015d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020161:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020167:	77 25                	ja     c002018e <ATA::read(unsigned long long, int, void*)+0x48>
c0020169:	b8 06 00 00 00       	mov    eax,0x6
c002016e:	85 f6                	test   esi,esi
c0020170:	74 1c                	je     c002018e <ATA::read(unsigned long long, int, void*)+0x48>
c0020172:	50                   	push   eax
c0020173:	50                   	push   eax
c0020174:	6a 00                	push   0x0
c0020176:	56                   	push   esi
c0020177:	52                   	push   edx
c0020178:	53                   	push   ebx
c0020179:	51                   	push   ecx
c002017a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002017e:	e8 d3 fb ff ff       	call   c001fd56 <ATA::access(unsigned long long, int, void*, bool)>
c0020183:	83 c4 20             	add    esp,0x20
c0020186:	85 c0                	test   eax,eax
c0020188:	0f 95 c0             	setne  al
c002018b:	0f b6 c0             	movzx  eax,al
c002018e:	5b                   	pop    ebx
c002018f:	5e                   	pop    esi
c0020190:	5f                   	pop    edi
c0020191:	c3                   	ret    

c0020192 <ATA::write(unsigned long long, int, void*)>:
c0020192:	57                   	push   edi
c0020193:	b8 04 00 00 00       	mov    eax,0x4
c0020198:	56                   	push   esi
c0020199:	53                   	push   ebx
c002019a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002019e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00201a2:	8d 7a ff             	lea    edi,[edx-0x1]
c00201a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00201a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00201ad:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00201b3:	77 25                	ja     c00201da <ATA::write(unsigned long long, int, void*)+0x48>
c00201b5:	b8 06 00 00 00       	mov    eax,0x6
c00201ba:	85 f6                	test   esi,esi
c00201bc:	74 1c                	je     c00201da <ATA::write(unsigned long long, int, void*)+0x48>
c00201be:	50                   	push   eax
c00201bf:	50                   	push   eax
c00201c0:	6a 01                	push   0x1
c00201c2:	56                   	push   esi
c00201c3:	52                   	push   edx
c00201c4:	53                   	push   ebx
c00201c5:	51                   	push   ecx
c00201c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00201ca:	e8 87 fb ff ff       	call   c001fd56 <ATA::access(unsigned long long, int, void*, bool)>
c00201cf:	83 c4 20             	add    esp,0x20
c00201d2:	85 c0                	test   eax,eax
c00201d4:	0f 95 c0             	setne  al
c00201d7:	0f b6 c0             	movzx  eax,al
c00201da:	5b                   	pop    ebx
c00201db:	5e                   	pop    esi
c00201dc:	5f                   	pop    edi
c00201dd:	c3                   	ret    

c00201de <ATA::detectCHS()>:
c00201de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00201e2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00201e8:	c1 e0 06             	shl    eax,0x6
c00201eb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00201f1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00201fb:	c7 44 24 04 c0 65 02 c0 	mov    DWORD PTR [esp+0x4],0xc00265c0
c0020203:	e9 66 fe fe ff       	jmp    c001006e <KePanic(char const*)>

c0020208 <ATA::open(int, int, void*)>:
c0020208:	53                   	push   ebx
c0020209:	83 ec 08             	sub    esp,0x8
c002020c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020210:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020214:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020218:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002021e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020224:	c1 e0 06             	shl    eax,0x6
c0020227:	01 d0                	add    eax,edx
c0020229:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020230:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020236:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002023d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020247:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002024d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020254:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002025b:	75 0c                	jne    c0020269 <ATA::open(int, int, void*)+0x61>
c002025d:	83 ec 0c             	sub    esp,0xc
c0020260:	53                   	push   ebx
c0020261:	e8 78 ff ff ff       	call   c00201de <ATA::detectCHS()>
c0020266:	83 c4 10             	add    esp,0x10
c0020269:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002026f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020275:	c1 e0 06             	shl    eax,0x6
c0020278:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002027f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020289:	d1 e8                	shr    eax,1
c002028b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020291:	6a 04                	push   0x4
c0020293:	6a 0c                	push   0xc
c0020295:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002029c:	50                   	push   eax
c002029d:	52                   	push   edx
c002029e:	e8 8d e8 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202a3:	90                   	nop
c00202a4:	90                   	nop
c00202a5:	6a 00                	push   0x0
c00202a7:	6a 0c                	push   0xc
c00202a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202b0:	50                   	push   eax
c00202b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202b7:	e8 74 e8 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202bc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00202c2:	83 c4 20             	add    esp,0x20
c00202c5:	c1 e0 06             	shl    eax,0x6
c00202c8:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c00202ce:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c00202d5:	0f 84 00 01 00 00    	je     c00203db <ATA::open(int, int, void*)+0x1d3>
c00202db:	83 ec 0c             	sub    esp,0xc
c00202de:	6a 08                	push   0x8
c00202e0:	e8 5b 00 ff ff       	call   c0010340 <Phys::allocateContiguousPages(int)>
c00202e5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00202eb:	c7 04 24 d2 65 02 c0 	mov    DWORD PTR [esp],0xc00265d2
c00202f2:	e8 85 6c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00202f7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00202fe:	e8 6a 32 ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0020303:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020309:	6a 03                	push   0x3
c002030b:	50                   	push   eax
c002030c:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020312:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c0020318:	e8 33 39 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c002031d:	83 c4 20             	add    esp,0x20
c0020320:	e8 3d ff fe ff       	call   c0010262 <Phys::allocatePage()>
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002032e:	6a 01                	push   0x1
c0020330:	e8 38 32 ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0020335:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c002033b:	6a 03                	push   0x3
c002033d:	50                   	push   eax
c002033e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0020344:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c002034a:	e8 01 39 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c002034f:	83 c4 14             	add    esp,0x14
c0020352:	68 0b 66 02 c0       	push   0xc002660b
c0020357:	e8 20 6c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002035c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c0020363:	50                   	push   eax
c0020364:	6a 12                	push   0x12
c0020366:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002036d:	50                   	push   eax
c002036e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020374:	e8 b7 e7 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020379:	83 c4 20             	add    esp,0x20
c002037c:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c0020382:	0f b6 c4             	movzx  eax,ah
c0020385:	50                   	push   eax
c0020386:	6a 13                	push   0x13
c0020388:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002038f:	50                   	push   eax
c0020390:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020396:	e8 95 e7 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002039b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c00203a2:	50                   	push   eax
c00203a3:	6a 14                	push   0x14
c00203a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203ac:	50                   	push   eax
c00203ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203b3:	e8 78 e7 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203b8:	83 c4 20             	add    esp,0x20
c00203bb:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c00203c2:	50                   	push   eax
c00203c3:	6a 15                	push   0x15
c00203c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203cc:	50                   	push   eax
c00203cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203d3:	e8 58 e7 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203d8:	83 c4 10             	add    esp,0x10
c00203db:	83 ec 0c             	sub    esp,0xc
c00203de:	53                   	push   ebx
c00203df:	e8 ba 9a fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00203e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00203e7:	e8 52 a9 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c00203ec:	31 c0                	xor    eax,eax
c00203ee:	83 c4 18             	add    esp,0x18
c00203f1:	5b                   	pop    ebx
c00203f2:	c3                   	ret    

c00203f3 <combineCharAndColour(char, unsigned char)>:
c00203f3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00203f8:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c00203fe:	c1 e0 08             	shl    eax,0x8
c0020401:	09 d0                	or     eax,edx
c0020403:	c3                   	ret    

c0020404 <combineColours(unsigned char, unsigned char)>:
c0020404:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020409:	c1 e0 04             	shl    eax,0x4
c002040c:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020410:	c3                   	ret    
c0020411:	90                   	nop

c0020412 <ATAPI::write(unsigned long long, int, void*)>:
c0020412:	b8 03 00 00 00       	mov    eax,0x3
c0020417:	c3                   	ret    

c0020418 <ATAPI::close(int, int, void*)>:
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020425:	85 c0                	test   eax,eax
c0020427:	74 0c                	je     c0020435 <ATAPI::close(int, int, void*)+0x1d>
c0020429:	83 ec 0c             	sub    esp,0xc
c002042c:	8b 10                	mov    edx,DWORD PTR [eax]
c002042e:	50                   	push   eax
c002042f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020432:	83 c4 10             	add    esp,0x10
c0020435:	31 c0                	xor    eax,eax
c0020437:	83 c4 0c             	add    esp,0xc
c002043a:	c3                   	ret    
c002043b:	90                   	nop

c002043c <ATAPI::ATAPI()>:
c002043c:	83 ec 0c             	sub    esp,0xc
c002043f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020443:	83 ec 04             	sub    esp,0x4
c0020446:	68 00 08 00 00       	push   0x800
c002044b:	68 bd 67 02 c0       	push   0xc00267bd
c0020450:	50                   	push   eax
c0020451:	e8 e0 99 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020456:	83 c4 10             	add    esp,0x10
c0020459:	ba cc 66 02 c0       	mov    edx,0xc00266cc
c002045e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020462:	89 10                	mov    DWORD PTR [eax],edx
c0020464:	90                   	nop
c0020465:	83 c4 0c             	add    esp,0xc
c0020468:	c3                   	ret    
c0020469:	90                   	nop

c002046a <ATAPI::readyForCommand()>:
c002046a:	56                   	push   esi
c002046b:	53                   	push   ebx
c002046c:	31 db                	xor    ebx,ebx
c002046e:	50                   	push   eax
c002046f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020473:	50                   	push   eax
c0020474:	6a 0c                	push   0xc
c0020476:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002047d:	50                   	push   eax
c002047e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020484:	e8 67 e7 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c0020489:	83 c4 10             	add    esp,0x10
c002048c:	a8 88                	test   al,0x88
c002048e:	74 26                	je     c00204b6 <ATAPI::readyForCommand()+0x4c>
c0020490:	43                   	inc    ebx
c0020491:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020497:	7e da                	jle    c0020473 <ATAPI::readyForCommand()+0x9>
c0020499:	51                   	push   ecx
c002049a:	51                   	push   ecx
c002049b:	6a 00                	push   0x0
c002049d:	68 5e 01 00 00       	push   0x15e
c00204a2:	e8 2d 70 ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c00204a7:	83 c4 10             	add    esp,0x10
c00204aa:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00204b0:	75 c1                	jne    c0020473 <ATAPI::readyForCommand()+0x9>
c00204b2:	31 c0                	xor    eax,eax
c00204b4:	eb 02                	jmp    c00204b8 <ATAPI::readyForCommand()+0x4e>
c00204b6:	b0 01                	mov    al,0x1
c00204b8:	5a                   	pop    edx
c00204b9:	5b                   	pop    ebx
c00204ba:	5e                   	pop    esi
c00204bb:	c3                   	ret    

c00204bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00204bc:	55                   	push   ebp
c00204bd:	57                   	push   edi
c00204be:	56                   	push   esi
c00204bf:	53                   	push   ebx
c00204c0:	83 ec 20             	sub    esp,0x20
c00204c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00204c7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00204cb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00204cf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00204d3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00204d7:	6a 01                	push   0x1
c00204d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204e0:	50                   	push   eax
c00204e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204e7:	e8 4e e8 ff ff       	call   c001ed3a <IDE::enableIRQs(unsigned char, bool)>
c00204ec:	5e                   	pop    esi
c00204ed:	58                   	pop    eax
c00204ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204f5:	50                   	push   eax
c00204f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204fc:	e8 09 e6 ff ff       	call   c001eb0a <IDE::prepareInterrupt(unsigned char)>
c0020501:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020504:	e8 61 ff ff ff       	call   c002046a <ATAPI::readyForCommand()>
c0020509:	83 c4 10             	add    esp,0x10
c002050c:	84 c0                	test   al,al
c002050e:	75 0a                	jne    c002051a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020510:	bb 01 00 00 00       	mov    ebx,0x1
c0020515:	e9 60 02 00 00       	jmp    c002077a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002051a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020520:	c1 e0 04             	shl    eax,0x4
c0020523:	0f b6 c0             	movzx  eax,al
c0020526:	50                   	push   eax
c0020527:	6a 06                	push   0x6
c0020529:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020530:	50                   	push   eax
c0020531:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020537:	e8 f4 e5 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002053c:	6a 00                	push   0x0
c002053e:	6a 01                	push   0x1
c0020540:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020547:	50                   	push   eax
c0020548:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002054e:	e8 dd e5 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020553:	83 c4 20             	add    esp,0x20
c0020556:	0f b6 c3             	movzx  eax,bl
c0020559:	0f b6 df             	movzx  ebx,bh
c002055c:	50                   	push   eax
c002055d:	6a 04                	push   0x4
c002055f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020566:	50                   	push   eax
c0020567:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002056d:	e8 be e5 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020572:	53                   	push   ebx
c0020573:	6a 05                	push   0x5
c0020575:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002057c:	50                   	push   eax
c002057d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020583:	e8 a8 e5 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020588:	83 c4 20             	add    esp,0x20
c002058b:	68 a0 00 00 00       	push   0xa0
c0020590:	6a 07                	push   0x7
c0020592:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020599:	50                   	push   eax
c002059a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205a0:	e8 8b e5 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205a5:	83 c4 0c             	add    esp,0xc
c00205a8:	6a 01                	push   0x1
c00205aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205b1:	50                   	push   eax
c00205b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205b8:	e8 19 f3 ff ff       	call   c001f8d6 <IDE::polling(unsigned char, unsigned int)>
c00205bd:	83 c4 10             	add    esp,0x10
c00205c0:	0f b6 d8             	movzx  ebx,al
c00205c3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c00205c9:	85 db                	test   ebx,ebx
c00205cb:	74 20                	je     c00205ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00205cd:	53                   	push   ebx
c00205ce:	0f b6 c0             	movzx  eax,al
c00205d1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c00205d8:	52                   	push   edx
c00205d9:	50                   	push   eax
c00205da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205e0:	e8 37 f2 ff ff       	call   c001f81c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00205e5:	83 c4 10             	add    esp,0x10
c00205e8:	e9 8d 01 00 00       	jmp    c002077a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00205ed:	0f b6 c0             	movzx  eax,al
c00205f0:	53                   	push   ebx
c00205f1:	53                   	push   ebx
c00205f2:	50                   	push   eax
c00205f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205f9:	e8 20 e5 ff ff       	call   c001eb1e <IDE::getBase(unsigned char)>
c00205fe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020602:	b9 06 00 00 00       	mov    ecx,0x6
c0020607:	89 c2                	mov    edx,eax
c0020609:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002060c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020610:	83 c4 10             	add    esp,0x10
c0020613:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0020618:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002061c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020622:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020629:	85 db                	test   ebx,ebx
c002062b:	0f 84 ec 00 00 00    	je     c002071d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c0020631:	51                   	push   ecx
c0020632:	51                   	push   ecx
c0020633:	52                   	push   edx
c0020634:	50                   	push   eax
c0020635:	e8 64 e6 ff ff       	call   c001ec9e <IDE::waitInterrupt(unsigned char)>
c002063a:	83 c4 10             	add    esp,0x10
c002063d:	84 c0                	test   al,al
c002063f:	0f 84 cb fe ff ff    	je     c0020510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020645:	56                   	push   esi
c0020646:	56                   	push   esi
c0020647:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002064e:	50                   	push   eax
c002064f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020655:	e8 b0 e4 ff ff       	call   c001eb0a <IDE::prepareInterrupt(unsigned char)>
c002065a:	83 c4 0c             	add    esp,0xc
c002065d:	6a 04                	push   0x4
c002065f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020666:	50                   	push   eax
c0020667:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002066d:	e8 7e e5 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c0020672:	83 c4 0c             	add    esp,0xc
c0020675:	89 c6                	mov    esi,eax
c0020677:	6a 05                	push   0x5
c0020679:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020680:	50                   	push   eax
c0020681:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020687:	e8 64 e5 ff ff       	call   c001ebf0 <IDE::read(unsigned char, unsigned char)>
c002068c:	89 f1                	mov    ecx,esi
c002068e:	0f b6 c0             	movzx  eax,al
c0020691:	0f b6 f1             	movzx  esi,cl
c0020694:	c1 e0 08             	shl    eax,0x8
c0020697:	09 c6                	or     esi,eax
c0020699:	d1 fe                	sar    esi,1
c002069b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002069f:	83 c4 10             	add    esp,0x10
c00206a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00206a7:	74 41                	je     c00206ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c00206a9:	31 c9                	xor    ecx,ecx
c00206ab:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00206b1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00206b8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00206bc:	75 0a                	jne    c00206c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c00206be:	01 c9                	add    ecx,ecx
c00206c0:	01 cd                	add    ebp,ecx
c00206c2:	4b                   	dec    ebx
c00206c3:	e9 54 ff ff ff       	jmp    c002061c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c00206c8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00206cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00206d1:	51                   	push   ecx
c00206d2:	51                   	push   ecx
c00206d3:	52                   	push   edx
c00206d4:	50                   	push   eax
c00206d5:	e8 44 e4 ff ff       	call   c001eb1e <IDE::getBase(unsigned char)>
c00206da:	89 c2                	mov    edx,eax
c00206dc:	89 f0                	mov    eax,esi
c00206de:	66 ef                	out    dx,ax
c00206e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00206e4:	83 c4 10             	add    esp,0x10
c00206e7:	41                   	inc    ecx
c00206e8:	eb c1                	jmp    c00206ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c00206ea:	31 f6                	xor    esi,esi
c00206ec:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00206f2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00206f9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00206fd:	75 06                	jne    c0020705 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c00206ff:	01 f6                	add    esi,esi
c0020701:	01 f5                	add    ebp,esi
c0020703:	eb bd                	jmp    c00206c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0020705:	51                   	push   ecx
c0020706:	51                   	push   ecx
c0020707:	52                   	push   edx
c0020708:	50                   	push   eax
c0020709:	e8 10 e4 ff ff       	call   c001eb1e <IDE::getBase(unsigned char)>
c002070e:	89 c2                	mov    edx,eax
c0020710:	66 ed                	in     ax,dx
c0020712:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020717:	83 c4 10             	add    esp,0x10
c002071a:	46                   	inc    esi
c002071b:	eb cf                	jmp    c00206ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002071d:	51                   	push   ecx
c002071e:	51                   	push   ecx
c002071f:	52                   	push   edx
c0020720:	50                   	push   eax
c0020721:	e8 78 e5 ff ff       	call   c001ec9e <IDE::waitInterrupt(unsigned char)>
c0020726:	83 c4 10             	add    esp,0x10
c0020729:	84 c0                	test   al,al
c002072b:	0f 84 df fd ff ff    	je     c0020510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020731:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020736:	52                   	push   edx
c0020737:	52                   	push   edx
c0020738:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002073f:	50                   	push   eax
c0020740:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020746:	e8 bf e3 ff ff       	call   c001eb0a <IDE::prepareInterrupt(unsigned char)>
c002074b:	83 c4 10             	add    esp,0x10
c002074e:	50                   	push   eax
c002074f:	50                   	push   eax
c0020750:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020757:	50                   	push   eax
c0020758:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002075e:	e8 bb e3 ff ff       	call   c001eb1e <IDE::getBase(unsigned char)>
c0020763:	8d 50 07             	lea    edx,[eax+0x7]
c0020766:	ec                   	in     al,dx
c0020767:	83 c4 10             	add    esp,0x10
c002076a:	a8 88                	test   al,0x88
c002076c:	74 0a                	je     c0020778 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002076e:	4b                   	dec    ebx
c002076f:	75 dd                	jne    c002074e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c0020771:	bb 02 00 00 00       	mov    ebx,0x2
c0020776:	eb 02                	jmp    c002077a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020778:	31 db                	xor    ebx,ebx
c002077a:	83 c4 1c             	add    esp,0x1c
c002077d:	89 d8                	mov    eax,ebx
c002077f:	5b                   	pop    ebx
c0020780:	5e                   	pop    esi
c0020781:	5f                   	pop    edi
c0020782:	5d                   	pop    ebp
c0020783:	c3                   	ret    

c0020784 <ATAPI::diskRemoved()>:
c0020784:	53                   	push   ebx
c0020785:	83 ec 14             	sub    esp,0x14
c0020788:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002078c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020793:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020799:	e8 90 a2 fe ff       	call   c000aa2e <LogicalDisk::unmount()>
c002079e:	58                   	pop    eax
c002079f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00207a5:	e8 62 ac fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c00207aa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00207b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00207b4:	83 c4 18             	add    esp,0x18
c00207b7:	5b                   	pop    ebx
c00207b8:	e9 3f ac fe ff       	jmp    c000b3fc <VCache::invalidateReadBuffer()>
c00207bd:	90                   	nop

c00207be <ATAPI::eject()>:
c00207be:	57                   	push   edi
c00207bf:	b9 03 00 00 00       	mov    ecx,0x3
c00207c4:	53                   	push   ebx
c00207c5:	83 ec 14             	sub    esp,0x14
c00207c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00207cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00207d0:	fc                   	cld    
c00207d1:	31 c0                	xor    eax,eax
c00207d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207d5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00207da:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00207df:	50                   	push   eax
c00207e0:	50                   	push   eax
c00207e1:	6a 00                	push   0x0
c00207e3:	6a 00                	push   0x0
c00207e5:	6a 00                	push   0x0
c00207e7:	6a 02                	push   0x2
c00207e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00207ed:	50                   	push   eax
c00207ee:	53                   	push   ebx
c00207ef:	e8 c8 fc ff ff       	call   c00204bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207f4:	83 c4 14             	add    esp,0x14
c00207f7:	53                   	push   ebx
c00207f8:	e8 87 ff ff ff       	call   c0020784 <ATAPI::diskRemoved()>
c00207fd:	83 c4 24             	add    esp,0x24
c0020800:	31 c0                	xor    eax,eax
c0020802:	5b                   	pop    ebx
c0020803:	5f                   	pop    edi
c0020804:	c3                   	ret    
c0020805:	90                   	nop

c0020806 <ATAPI::diskInserted()>:
c0020806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002080a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020811:	c3                   	ret    

c0020812 <ATAPI::detectMedia()>:
c0020812:	56                   	push   esi
c0020813:	53                   	push   ebx
c0020814:	83 ec 28             	sub    esp,0x28
c0020817:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002081b:	6a 0c                	push   0xc
c002081d:	6a 00                	push   0x0
c002081f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020823:	56                   	push   esi
c0020824:	e8 c7 fc fd ff       	call   c00004f0 <memset>
c0020829:	58                   	pop    eax
c002082a:	5a                   	pop    edx
c002082b:	6a 00                	push   0x0
c002082d:	6a 00                	push   0x0
c002082f:	6a 00                	push   0x0
c0020831:	6a 00                	push   0x0
c0020833:	56                   	push   esi
c0020834:	53                   	push   ebx
c0020835:	e8 82 fc ff ff       	call   c00204bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002083a:	83 c4 1c             	add    esp,0x1c
c002083d:	6a 0c                	push   0xc
c002083f:	6a 00                	push   0x0
c0020841:	56                   	push   esi
c0020842:	e8 a9 fc fd ff       	call   c00004f0 <memset>
c0020847:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002084c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020851:	59                   	pop    ecx
c0020852:	58                   	pop    eax
c0020853:	6a 01                	push   0x1
c0020855:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020859:	50                   	push   eax
c002085a:	6a 00                	push   0x0
c002085c:	6a 12                	push   0x12
c002085e:	56                   	push   esi
c002085f:	53                   	push   ebx
c0020860:	e8 57 fc ff ff       	call   c00204bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020865:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020869:	83 c4 20             	add    esp,0x20
c002086c:	83 e0 7f             	and    eax,0x7f
c002086f:	83 f8 70             	cmp    eax,0x70
c0020872:	74 15                	je     c0020889 <ATAPI::detectMedia()+0x77>
c0020874:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002087b:	75 0c                	jne    c0020889 <ATAPI::detectMedia()+0x77>
c002087d:	83 ec 0c             	sub    esp,0xc
c0020880:	53                   	push   ebx
c0020881:	e8 80 ff ff ff       	call   c0020806 <ATAPI::diskInserted()>
c0020886:	83 c4 10             	add    esp,0x10
c0020889:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002088d:	83 e0 0f             	and    eax,0xf
c0020890:	83 f8 02             	cmp    eax,0x2
c0020893:	75 1b                	jne    c00208b0 <ATAPI::detectMedia()+0x9e>
c0020895:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002089a:	75 2d                	jne    c00208c9 <ATAPI::detectMedia()+0xb7>
c002089c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00208a3:	74 24                	je     c00208c9 <ATAPI::detectMedia()+0xb7>
c00208a5:	83 ec 0c             	sub    esp,0xc
c00208a8:	53                   	push   ebx
c00208a9:	e8 d6 fe ff ff       	call   c0020784 <ATAPI::diskRemoved()>
c00208ae:	eb 16                	jmp    c00208c6 <ATAPI::detectMedia()+0xb4>
c00208b0:	85 c0                	test   eax,eax
c00208b2:	75 15                	jne    c00208c9 <ATAPI::detectMedia()+0xb7>
c00208b4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00208bb:	75 0c                	jne    c00208c9 <ATAPI::detectMedia()+0xb7>
c00208bd:	83 ec 0c             	sub    esp,0xc
c00208c0:	53                   	push   ebx
c00208c1:	e8 40 ff ff ff       	call   c0020806 <ATAPI::diskInserted()>
c00208c6:	83 c4 10             	add    esp,0x10
c00208c9:	83 c4 24             	add    esp,0x24
c00208cc:	5b                   	pop    ebx
c00208cd:	5e                   	pop    esi
c00208ce:	c3                   	ret    
c00208cf:	90                   	nop

c00208d0 <ATAPI::open(int, int, void*)>:
c00208d0:	56                   	push   esi
c00208d1:	53                   	push   ebx
c00208d2:	50                   	push   eax
c00208d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00208d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00208db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208df:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00208e5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00208eb:	c1 e0 06             	shl    eax,0x6
c00208ee:	01 d0                	add    eax,edx
c00208f0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00208f7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00208fd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020904:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002090e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020914:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002091b:	6a 04                	push   0x4
c002091d:	6a 0c                	push   0xc
c002091f:	51                   	push   ecx
c0020920:	52                   	push   edx
c0020921:	e8 0a e2 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020926:	90                   	nop
c0020927:	90                   	nop
c0020928:	6a 00                	push   0x0
c002092a:	6a 0c                	push   0xc
c002092c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020933:	50                   	push   eax
c0020934:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002093a:	e8 f1 e1 ff ff       	call   c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002093f:	83 c4 14             	add    esp,0x14
c0020942:	68 78 01 00 00       	push   0x178
c0020947:	e8 13 f4 fe ff       	call   c000fd5f <malloc>
c002094c:	83 c4 0c             	add    esp,0xc
c002094f:	89 c6                	mov    esi,eax
c0020951:	6a 00                	push   0x0
c0020953:	68 ff ff ff 7f       	push   0x7fffffff
c0020958:	6a 00                	push   0x0
c002095a:	6a 00                	push   0x0
c002095c:	53                   	push   ebx
c002095d:	68 6f 68 02 c0       	push   0xc002686f
c0020962:	50                   	push   eax
c0020963:	e8 04 9f fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020968:	83 c4 14             	add    esp,0x14
c002096b:	56                   	push   esi
c002096c:	e8 bb 9f fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c0020971:	5a                   	pop    edx
c0020972:	0f be c0             	movsx  eax,al
c0020975:	59                   	pop    ecx
c0020976:	50                   	push   eax
c0020977:	68 b4 66 02 c0       	push   0xc00266b4
c002097c:	e8 fb 65 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020981:	58                   	pop    eax
c0020982:	5a                   	pop    edx
c0020983:	56                   	push   esi
c0020984:	53                   	push   ebx
c0020985:	e8 ca 90 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c002098a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020990:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020993:	e8 06 95 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020998:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002099f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00209a2:	e8 6b fe ff ff       	call   c0020812 <ATAPI::detectMedia()>
c00209a7:	83 c4 14             	add    esp,0x14
c00209aa:	31 c0                	xor    eax,eax
c00209ac:	5b                   	pop    ebx
c00209ad:	5e                   	pop    esi
c00209ae:	c3                   	ret    
c00209af:	90                   	nop

c00209b0 <ATAPI::read(unsigned long long, int, void*)>:
c00209b0:	55                   	push   ebp
c00209b1:	57                   	push   edi
c00209b2:	56                   	push   esi
c00209b3:	53                   	push   ebx
c00209b4:	83 ec 1c             	sub    esp,0x1c
c00209b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00209bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00209bf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00209c3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00209ca:	74 3c                	je     c0020a08 <ATAPI::read(unsigned long long, int, void*)+0x58>
c00209cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00209d0:	b9 03 00 00 00       	mov    ecx,0x3
c00209d5:	fc                   	cld    
c00209d6:	31 c0                	xor    eax,eax
c00209d8:	0f ce                	bswap  esi
c00209da:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00209dc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00209e1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00209e5:	89 e8                	mov    eax,ebp
c00209e7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00209eb:	50                   	push   eax
c00209ec:	50                   	push   eax
c00209ed:	55                   	push   ebp
c00209ee:	c1 e5 0b             	shl    ebp,0xb
c00209f1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00209f5:	6a 00                	push   0x0
c00209f7:	55                   	push   ebp
c00209f8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00209fc:	50                   	push   eax
c00209fd:	53                   	push   ebx
c00209fe:	e8 b9 fa ff ff       	call   c00204bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020a03:	83 c4 20             	add    esp,0x20
c0020a06:	eb 1a                	jmp    c0020a22 <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020a08:	83 ec 0c             	sub    esp,0xc
c0020a0b:	53                   	push   ebx
c0020a0c:	e8 01 fe ff ff       	call   c0020812 <ATAPI::detectMedia()>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020a1b:	75 af                	jne    c00209cc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020a1d:	b8 02 00 00 00       	mov    eax,0x2
c0020a22:	83 c4 1c             	add    esp,0x1c
c0020a25:	5b                   	pop    ebx
c0020a26:	5e                   	pop    esi
c0020a27:	5f                   	pop    edi
c0020a28:	5d                   	pop    ebp
c0020a29:	c3                   	ret    

c0020a2a <SATA::close(int, int, void*)>:
c0020a2a:	83 ec 0c             	sub    esp,0xc
c0020a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a31:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a37:	85 c0                	test   eax,eax
c0020a39:	74 0c                	je     c0020a47 <SATA::close(int, int, void*)+0x1d>
c0020a3b:	83 ec 0c             	sub    esp,0xc
c0020a3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0020a40:	50                   	push   eax
c0020a41:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020a44:	83 c4 10             	add    esp,0x10
c0020a47:	31 c0                	xor    eax,eax
c0020a49:	83 c4 0c             	add    esp,0xc
c0020a4c:	c3                   	ret    
c0020a4d:	90                   	nop

c0020a4e <SATA::powerSaving(PowerSavingLevel)>:
c0020a4e:	c3                   	ret    
c0020a4f:	90                   	nop

c0020a50 <SATA::open(int, int, void*)>:
c0020a50:	56                   	push   esi
c0020a51:	53                   	push   ebx
c0020a52:	83 ec 10             	sub    esp,0x10
c0020a55:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020a59:	68 fc 66 02 c0       	push   0xc00266fc
c0020a5e:	e8 19 65 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020a63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a67:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020a71:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020a77:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020a81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020a85:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020a8f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020a95:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020a9c:	e8 c1 f7 fe ff       	call   c0010262 <Phys::allocatePage()>
c0020aa1:	89 c6                	mov    esi,eax
c0020aa3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020aa9:	81 c6 00 10 00 00    	add    esi,0x1000
c0020aaf:	e8 ae f7 fe ff       	call   c0010262 <Phys::allocatePage()>
c0020ab4:	83 c4 10             	add    esp,0x10
c0020ab7:	39 c6                	cmp    esi,eax
c0020ab9:	74 10                	je     c0020acb <SATA::open(int, int, void*)+0x7b>
c0020abb:	83 ec 0c             	sub    esp,0xc
c0020abe:	68 08 67 02 c0       	push   0xc0026708
c0020ac3:	e8 a6 f5 fe ff       	call   c001006e <KePanic(char const*)>
c0020ac8:	83 c4 10             	add    esp,0x10
c0020acb:	83 ec 0c             	sub    esp,0xc
c0020ace:	6a 02                	push   0x2
c0020ad0:	e8 98 2a ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c0020ad5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020adb:	6a 03                	push   0x3
c0020add:	50                   	push   eax
c0020ade:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020ae4:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c0020aea:	e8 61 31 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020aef:	83 c4 14             	add    esp,0x14
c0020af2:	53                   	push   ebx
c0020af3:	e8 a6 93 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020af8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020afb:	e8 3e a2 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020b00:	83 c4 14             	add    esp,0x14
c0020b03:	31 c0                	xor    eax,eax
c0020b05:	5b                   	pop    ebx
c0020b06:	5e                   	pop    esi
c0020b07:	c3                   	ret    

c0020b08 <SATA::SATA()>:
c0020b08:	83 ec 0c             	sub    esp,0xc
c0020b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0f:	83 ec 04             	sub    esp,0x4
c0020b12:	68 00 02 00 00       	push   0x200
c0020b17:	68 1c 67 02 c0       	push   0xc002671c
c0020b1c:	50                   	push   eax
c0020b1d:	e8 14 93 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020b22:	83 c4 10             	add    esp,0x10
c0020b25:	ba 8c 67 02 c0       	mov    edx,0xc002678c
c0020b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b2e:	89 10                	mov    DWORD PTR [eax],edx
c0020b30:	90                   	nop
c0020b31:	83 c4 0c             	add    esp,0xc
c0020b34:	c3                   	ret    
c0020b35:	90                   	nop

c0020b36 <SATA::access(unsigned long long, int, void*, bool)>:
c0020b36:	55                   	push   ebp
c0020b37:	57                   	push   edi
c0020b38:	56                   	push   esi
c0020b39:	53                   	push   ebx
c0020b3a:	83 ec 2c             	sub    esp,0x2c
c0020b3d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020b41:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020b45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b49:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020b4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020b51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b55:	fa                   	cli    
c0020b56:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c0020b5c:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020b61:	7e 10                	jle    c0020b73 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0020b63:	83 ec 0c             	sub    esp,0xc
c0020b66:	68 2c 67 02 c0       	push   0xc002672c
c0020b6b:	e8 fe f4 fe ff       	call   c001006e <KePanic(char const*)>
c0020b70:	83 c4 10             	add    esp,0x10
c0020b73:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020b79:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020b7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020b85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b89:	89 d0                	mov    eax,edx
c0020b8b:	c1 e0 07             	shl    eax,0x7
c0020b8e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b92:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020b9c:	51                   	push   ecx
c0020b9d:	8d 42 02             	lea    eax,[edx+0x2]
c0020ba0:	51                   	push   ecx
c0020ba1:	c1 e0 07             	shl    eax,0x7
c0020ba4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020ba8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020bac:	50                   	push   eax
c0020bad:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020bb3:	e8 fe ed ff ff       	call   c001f9b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020bb8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020bbc:	83 c4 10             	add    esp,0x10
c0020bbf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020bc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020bc8:	0f 84 a4 01 00 00    	je     c0020d72 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020bce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020bd2:	c1 e0 09             	shl    eax,0x9
c0020bd5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020bda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020bde:	74 0e                	je     c0020bee <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020be0:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020be6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020bea:	89 c1                	mov    ecx,eax
c0020bec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020bee:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020bf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020bf8:	8d 42 02             	lea    eax,[edx+0x2]
c0020bfb:	c1 e0 07             	shl    eax,0x7
c0020bfe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c04:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020c0a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020c10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c14:	c1 e1 05             	shl    ecx,0x5
c0020c17:	01 c8                	add    eax,ecx
c0020c19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c1d:	83 e1 01             	and    ecx,0x1
c0020c20:	89 ce                	mov    esi,ecx
c0020c22:	8a 08                	mov    cl,BYTE PTR [eax]
c0020c24:	c1 e6 06             	shl    esi,0x6
c0020c27:	83 e1 bf             	and    ecx,0xffffffbf
c0020c2a:	09 f1                	or     ecx,esi
c0020c2c:	88 08                	mov    BYTE PTR [eax],cl
c0020c2e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020c30:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020c36:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020c3c:	89 08                	mov    DWORD PTR [eax],ecx
c0020c3e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020c44:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020c4a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020c50:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020c53:	50                   	push   eax
c0020c54:	68 90 00 00 00       	push   0x90
c0020c59:	6a 00                	push   0x0
c0020c5b:	56                   	push   esi
c0020c5c:	e8 8f f8 fd ff       	call   c00004f0 <memset>
c0020c61:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020c67:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020c6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020c71:	83 c4 10             	add    esp,0x10
c0020c74:	48                   	dec    eax
c0020c75:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020c7a:	89 c1                	mov    ecx,eax
c0020c7c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020c82:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020c87:	09 c8                	or     eax,ecx
c0020c89:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020c8f:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020c95:	83 c8 80             	or     eax,0xffffff80
c0020c98:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020c9e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020ca1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ca5:	25 00 7f 00 00       	and    eax,0x7f00
c0020caa:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020caf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020cb4:	66 89 06             	mov    WORD PTR [esi],ax
c0020cb7:	b0 35                	mov    al,0x35
c0020cb9:	75 02                	jne    c0020cbd <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0020cbb:	b0 25                	mov    al,0x25
c0020cbd:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020cc0:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020cc4:	89 e8                	mov    eax,ebp
c0020cc6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020cca:	c1 e8 10             	shr    eax,0x10
c0020ccd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020cd0:	89 e8                	mov    eax,ebp
c0020cd2:	c1 e8 18             	shr    eax,0x18
c0020cd5:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020cd8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020cdc:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020cdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ce3:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020ce6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020cea:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020cee:	89 d6                	mov    esi,edx
c0020cf0:	31 c0                	xor    eax,eax
c0020cf2:	c1 e6 07             	shl    esi,0x7
c0020cf5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020cf9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020cff:	80 e1 88             	and    cl,0x88
c0020d02:	74 0a                	je     c0020d0e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020d04:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d09:	74 0a                	je     c0020d15 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020d0b:	40                   	inc    eax
c0020d0c:	eb eb                	jmp    c0020cf9 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020d0e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d13:	75 0a                	jne    c0020d1f <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020d15:	83 ec 0c             	sub    esp,0xc
c0020d18:	68 65 67 02 c0       	push   0xc0026765
c0020d1d:	eb 36                	jmp    c0020d55 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0020d1f:	b8 01 00 00 00       	mov    eax,0x1
c0020d24:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020d28:	c1 e2 07             	shl    edx,0x7
c0020d2b:	d3 e0                	shl    eax,cl
c0020d2d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0020d31:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020d37:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020d3d:	85 c8                	test   eax,ecx
c0020d3f:	74 25                	je     c0020d66 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0020d41:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020d47:	0f ba e1 1e          	bt     ecx,0x1e
c0020d4b:	73 ea                	jae    c0020d37 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0020d4d:	83 ec 0c             	sub    esp,0xc
c0020d50:	68 73 67 02 c0       	push   0xc0026773
c0020d55:	e8 22 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020d5a:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0020d61:	83 c4 10             	add    esp,0x10
c0020d64:	eb 13                	jmp    c0020d79 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020d66:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020d6c:	0f ba e0 1e          	bt     eax,0x1e
c0020d70:	73 18                	jae    c0020d8a <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020d72:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0020d79:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c0020d80:	75 01                	jne    c0020d83 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020d82:	fb                   	sti    
c0020d83:	b8 01 00 00 00       	mov    eax,0x1
c0020d88:	eb 2c                	jmp    c0020db6 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020d8a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d8f:	75 10                	jne    c0020da1 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020d91:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020d97:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020d9b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020d9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020da1:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0020da8:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0020dad:	85 c0                	test   eax,eax
c0020daf:	75 03                	jne    c0020db4 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020db1:	fb                   	sti    
c0020db2:	eb 02                	jmp    c0020db6 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020db4:	31 c0                	xor    eax,eax
c0020db6:	83 c4 2c             	add    esp,0x2c
c0020db9:	5b                   	pop    ebx
c0020dba:	5e                   	pop    esi
c0020dbb:	5f                   	pop    edi
c0020dbc:	5d                   	pop    ebp
c0020dbd:	c3                   	ret    

c0020dbe <SATA::read(unsigned long long, int, void*)>:
c0020dbe:	57                   	push   edi
c0020dbf:	b8 04 00 00 00       	mov    eax,0x4
c0020dc4:	56                   	push   esi
c0020dc5:	53                   	push   ebx
c0020dc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020dca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020dce:	8d 7a ff             	lea    edi,[edx-0x1]
c0020dd1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020dd5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020dd9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020ddf:	77 25                	ja     c0020e06 <SATA::read(unsigned long long, int, void*)+0x48>
c0020de1:	b8 06 00 00 00       	mov    eax,0x6
c0020de6:	85 f6                	test   esi,esi
c0020de8:	74 1c                	je     c0020e06 <SATA::read(unsigned long long, int, void*)+0x48>
c0020dea:	50                   	push   eax
c0020deb:	50                   	push   eax
c0020dec:	6a 00                	push   0x0
c0020dee:	56                   	push   esi
c0020def:	52                   	push   edx
c0020df0:	53                   	push   ebx
c0020df1:	51                   	push   ecx
c0020df2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020df6:	e8 3b fd ff ff       	call   c0020b36 <SATA::access(unsigned long long, int, void*, bool)>
c0020dfb:	83 c4 20             	add    esp,0x20
c0020dfe:	85 c0                	test   eax,eax
c0020e00:	0f 95 c0             	setne  al
c0020e03:	0f b6 c0             	movzx  eax,al
c0020e06:	5b                   	pop    ebx
c0020e07:	5e                   	pop    esi
c0020e08:	5f                   	pop    edi
c0020e09:	c3                   	ret    

c0020e0a <SATA::write(unsigned long long, int, void*)>:
c0020e0a:	55                   	push   ebp
c0020e0b:	b8 04 00 00 00       	mov    eax,0x4
c0020e10:	57                   	push   edi
c0020e11:	56                   	push   esi
c0020e12:	53                   	push   ebx
c0020e13:	83 ec 0c             	sub    esp,0xc
c0020e16:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020e1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020e1e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020e21:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020e25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020e29:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020e2f:	77 3d                	ja     c0020e6e <SATA::write(unsigned long long, int, void*)+0x64>
c0020e31:	b8 06 00 00 00       	mov    eax,0x6
c0020e36:	85 ed                	test   ebp,ebp
c0020e38:	74 34                	je     c0020e6e <SATA::write(unsigned long long, int, void*)+0x64>
c0020e3a:	c1 e3 09             	shl    ebx,0x9
c0020e3d:	01 eb                	add    ebx,ebp
c0020e3f:	89 d6                	mov    esi,edx
c0020e41:	89 cf                	mov    edi,ecx
c0020e43:	83 c6 01             	add    esi,0x1
c0020e46:	83 d7 00             	adc    edi,0x0
c0020e49:	50                   	push   eax
c0020e4a:	50                   	push   eax
c0020e4b:	6a 01                	push   0x1
c0020e4d:	55                   	push   ebp
c0020e4e:	81 c5 00 02 00 00    	add    ebp,0x200
c0020e54:	6a 01                	push   0x1
c0020e56:	51                   	push   ecx
c0020e57:	52                   	push   edx
c0020e58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020e5c:	e8 d5 fc ff ff       	call   c0020b36 <SATA::access(unsigned long long, int, void*, bool)>
c0020e61:	83 c4 20             	add    esp,0x20
c0020e64:	89 f2                	mov    edx,esi
c0020e66:	89 f9                	mov    ecx,edi
c0020e68:	39 dd                	cmp    ebp,ebx
c0020e6a:	75 d3                	jne    c0020e3f <SATA::write(unsigned long long, int, void*)+0x35>
c0020e6c:	31 c0                	xor    eax,eax
c0020e6e:	83 c4 0c             	add    esp,0xc
c0020e71:	5b                   	pop    ebx
c0020e72:	5e                   	pop    esi
c0020e73:	5f                   	pop    edi
c0020e74:	5d                   	pop    ebp
c0020e75:	c3                   	ret    

c0020e76 <SATAPI::write(unsigned long long, int, void*)>:
c0020e76:	b8 03 00 00 00       	mov    eax,0x3
c0020e7b:	c3                   	ret    

c0020e7c <SATAPI::close(int, int, void*)>:
c0020e7c:	83 ec 0c             	sub    esp,0xc
c0020e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e83:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020e89:	85 c0                	test   eax,eax
c0020e8b:	74 0c                	je     c0020e99 <SATAPI::close(int, int, void*)+0x1d>
c0020e8d:	83 ec 0c             	sub    esp,0xc
c0020e90:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e92:	50                   	push   eax
c0020e93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020e96:	83 c4 10             	add    esp,0x10
c0020e99:	31 c0                	xor    eax,eax
c0020e9b:	83 c4 0c             	add    esp,0xc
c0020e9e:	c3                   	ret    
c0020e9f:	90                   	nop

c0020ea0 <SATAPI::SATAPI()>:
c0020ea0:	83 ec 0c             	sub    esp,0xc
c0020ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ea7:	83 ec 04             	sub    esp,0x4
c0020eaa:	68 00 08 00 00       	push   0x800
c0020eaf:	68 bc 67 02 c0       	push   0xc00267bc
c0020eb4:	50                   	push   eax
c0020eb5:	e8 7c 8f fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020eba:	83 c4 10             	add    esp,0x10
c0020ebd:	ba b0 68 02 c0       	mov    edx,0xc00268b0
c0020ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ec6:	89 10                	mov    DWORD PTR [eax],edx
c0020ec8:	90                   	nop
c0020ec9:	83 c4 0c             	add    esp,0xc
c0020ecc:	c3                   	ret    
c0020ecd:	90                   	nop

c0020ece <SATAPI::diskRemoved()>:
c0020ece:	c3                   	ret    
c0020ecf:	90                   	nop

c0020ed0 <SATAPI::diskInserted()>:
c0020ed0:	83 ec 18             	sub    esp,0x18
c0020ed3:	68 c8 67 02 c0       	push   0xc00267c8
c0020ed8:	e8 9f 60 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ee1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020ee8:	83 c4 1c             	add    esp,0x1c
c0020eeb:	c3                   	ret    

c0020eec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020eec:	55                   	push   ebp
c0020eed:	57                   	push   edi
c0020eee:	56                   	push   esi
c0020eef:	53                   	push   ebx
c0020ef0:	83 ec 34             	sub    esp,0x34
c0020ef3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020ef7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020efb:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0020eff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020f03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020f07:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020f0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020f13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020f17:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f21:	83 c0 02             	add    eax,0x2
c0020f24:	c1 e0 07             	shl    eax,0x7
c0020f27:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f33:	c1 e0 07             	shl    eax,0x7
c0020f36:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020f3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f3e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020f48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020f4c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020f52:	e8 5f ea ff ff       	call   c001f9b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020f57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020f5b:	83 c4 10             	add    esp,0x10
c0020f5e:	b8 01 00 00 00       	mov    eax,0x1
c0020f63:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020f68:	0f 84 57 02 00 00    	je     c00211c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020f6e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f78:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f7a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020f80:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020f86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020f8a:	c1 e1 05             	shl    ecx,0x5
c0020f8d:	01 c8                	add    eax,ecx
c0020f8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020f91:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020f97:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020f9d:	89 08                	mov    DWORD PTR [eax],ecx
c0020f9f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020fa5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020fab:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020fb1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020fb4:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020fb7:	50                   	push   eax
c0020fb8:	68 90 00 00 00       	push   0x90
c0020fbd:	6a 00                	push   0x0
c0020fbf:	53                   	push   ebx
c0020fc0:	e8 2b f5 fd ff       	call   c00004f0 <memset>
c0020fc5:	b9 0c 00 00 00       	mov    ecx,0xc
c0020fca:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020fce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fd0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020fd6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020fda:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020fe0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020fe4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020fe8:	48                   	dec    eax
c0020fe9:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020fee:	89 c1                	mov    ecx,eax
c0020ff0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020ff6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ffb:	09 c8                	or     eax,ecx
c0020ffd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021003:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0021009:	83 c8 80             	or     eax,0xffffff80
c002100c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0021012:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0021015:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021019:	25 00 7f 00 00       	and    eax,0x7f00
c002101e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0021022:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021027:	66 89 03             	mov    WORD PTR [ebx],ax
c002102a:	89 d0                	mov    eax,edx
c002102c:	c1 ea 18             	shr    edx,0x18
c002102f:	c1 e8 10             	shr    eax,0x10
c0021032:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0021035:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021038:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002103c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002103f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021043:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021046:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002104a:	83 c4 10             	add    esp,0x10
c002104d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021051:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021055:	31 c0                	xor    eax,eax
c0021057:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002105d:	80 e1 88             	and    cl,0x88
c0021060:	74 0a                	je     c002106c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0021062:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021067:	74 0a                	je     c0021073 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0021069:	40                   	inc    eax
c002106a:	eb eb                	jmp    c0021057 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002106c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021071:	75 43                	jne    c00210b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0021073:	83 ec 0c             	sub    esp,0xc
c0021076:	68 e0 67 02 c0       	push   0xc00267e0
c002107b:	e8 fc 5e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021080:	58                   	pop    eax
c0021081:	5a                   	pop    edx
c0021082:	68 f5 67 02 c0       	push   0xc00267f5
c0021087:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c002108d:	e8 a2 18 ff ff       	call   c0012934 <VgaText::puts(char const*)>
c0021092:	59                   	pop    ecx
c0021093:	5b                   	pop    ebx
c0021094:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021098:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002109e:	e8 ad e9 ff ff       	call   c001fa50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00210a3:	5e                   	pop    esi
c00210a4:	5f                   	pop    edi
c00210a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00210a9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00210af:	e8 7c e9 ff ff       	call   c001fa30 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00210b4:	eb 48                	jmp    c00210fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c00210b6:	be 01 00 00 00       	mov    esi,0x1
c00210bb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00210bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00210c3:	d3 e6                	shl    esi,cl
c00210c5:	c1 e7 07             	shl    edi,0x7
c00210c8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00210ce:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c00210d3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00210d7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00210dd:	85 c6                	test   esi,eax
c00210df:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00210e5:	0f 84 a7 00 00 00    	je     c0021192 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c00210eb:	0f ba e0 1e          	bt     eax,0x1e
c00210ef:	73 1a                	jae    c002110b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c00210f1:	83 ec 0c             	sub    esp,0xc
c00210f4:	68 07 68 02 c0       	push   0xc0026807
c00210f9:	e8 7e 5e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00210fe:	83 c4 10             	add    esp,0x10
c0021101:	b8 01 00 00 00       	mov    eax,0x1
c0021106:	e9 ba 00 00 00       	jmp    c00211c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c002110b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0021111:	83 f8 0d             	cmp    eax,0xd
c0021114:	77 0b                	ja     c0021121 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0021116:	50                   	push   eax
c0021117:	50                   	push   eax
c0021118:	6a 00                	push   0x0
c002111a:	68 c8 00 00 00       	push   0xc8
c002111f:	eb 2a                	jmp    c002114b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0021121:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0021127:	83 f8 0d             	cmp    eax,0xd
c002112a:	77 0b                	ja     c0021137 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c002112c:	51                   	push   ecx
c002112d:	51                   	push   ecx
c002112e:	6a 00                	push   0x0
c0021130:	68 58 02 00 00       	push   0x258
c0021135:	eb 14                	jmp    c002114b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0021137:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002113d:	83 f8 06             	cmp    eax,0x6
c0021140:	77 11                	ja     c0021153 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0021142:	52                   	push   edx
c0021143:	52                   	push   edx
c0021144:	6a 00                	push   0x0
c0021146:	68 dc 05 00 00       	push   0x5dc
c002114b:	e8 84 63 ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c0021150:	83 c4 10             	add    esp,0x10
c0021153:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0021157:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002115a:	75 06                	jne    c0021162 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c002115c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0021160:	74 16                	je     c0021178 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0021162:	83 fb 06             	cmp    ebx,0x6
c0021165:	77 11                	ja     c0021178 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0021167:	50                   	push   eax
c0021168:	50                   	push   eax
c0021169:	6a 00                	push   0x0
c002116b:	68 c4 09 00 00       	push   0x9c4
c0021170:	e8 5f 63 ff ff       	call   c00174d4 <milliTenthSleep(unsigned long long)>
c0021175:	83 c4 10             	add    esp,0x10
c0021178:	43                   	inc    ebx
c0021179:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002117f:	0f 85 52 ff ff ff    	jne    c00210d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0021185:	83 ec 0c             	sub    esp,0xc
c0021188:	68 1a 68 02 c0       	push   0xc002681a
c002118d:	e9 67 ff ff ff       	jmp    c00210f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0021192:	0f ba e0 1e          	bt     eax,0x1e
c0021196:	73 0d                	jae    c00211a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0021198:	83 ec 0c             	sub    esp,0xc
c002119b:	68 2e 68 02 c0       	push   0xc002682e
c00211a0:	e9 54 ff ff ff       	jmp    c00210f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c00211a5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00211aa:	74 17                	je     c00211c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c00211ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00211b1:	74 10                	je     c00211c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c00211b3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00211b9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00211bd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00211c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211c3:	31 c0                	xor    eax,eax
c00211c5:	83 c4 2c             	add    esp,0x2c
c00211c8:	5b                   	pop    ebx
c00211c9:	5e                   	pop    esi
c00211ca:	5f                   	pop    edi
c00211cb:	5d                   	pop    ebp
c00211cc:	c3                   	ret    
c00211cd:	90                   	nop

c00211ce <SATAPI::eject()>:
c00211ce:	57                   	push   edi
c00211cf:	b9 03 00 00 00       	mov    ecx,0x3
c00211d4:	83 ec 18             	sub    esp,0x18
c00211d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00211db:	fc                   	cld    
c00211dc:	31 c0                	xor    eax,eax
c00211de:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00211e0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00211e5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00211ea:	50                   	push   eax
c00211eb:	6a 00                	push   0x0
c00211ed:	6a 00                	push   0x0
c00211ef:	6a 00                	push   0x0
c00211f1:	6a 00                	push   0x0
c00211f3:	6a 02                	push   0x2
c00211f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211f9:	50                   	push   eax
c00211fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211fe:	e8 e9 fc ff ff       	call   c0020eec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021203:	31 c0                	xor    eax,eax
c0021205:	83 c4 38             	add    esp,0x38
c0021208:	5f                   	pop    edi
c0021209:	c3                   	ret    

c002120a <SATAPI::detectMedia()>:
c002120a:	53                   	push   ebx
c002120b:	83 ec 14             	sub    esp,0x14
c002120e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021212:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021218:	e8 ef a1 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c002121d:	59                   	pop    ecx
c002121e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021224:	e8 d3 a1 fe ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c0021229:	c7 04 24 43 68 02 c0 	mov    DWORD PTR [esp],0xc0026843
c0021230:	e8 47 5d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021235:	83 c4 10             	add    esp,0x10
c0021238:	31 c0                	xor    eax,eax
c002123a:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c0021241:	85 d2                	test   edx,edx
c0021243:	74 0f                	je     c0021254 <SATAPI::detectMedia()+0x4a>
c0021245:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002124b:	75 07                	jne    c0021254 <SATAPI::detectMedia()+0x4a>
c002124d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0021254:	40                   	inc    eax
c0021255:	83 f8 1a             	cmp    eax,0x1a
c0021258:	75 e0                	jne    c002123a <SATAPI::detectMedia()+0x30>
c002125a:	83 c4 08             	add    esp,0x8
c002125d:	5b                   	pop    ebx
c002125e:	c3                   	ret    
c002125f:	90                   	nop

c0021260 <SATAPI::open(int, int, void*)>:
c0021260:	56                   	push   esi
c0021261:	53                   	push   ebx
c0021262:	51                   	push   ecx
c0021263:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021267:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002126b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021275:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002127b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021289:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021293:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021299:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00212a0:	e8 bd ef fe ff       	call   c0010262 <Phys::allocatePage()>
c00212a5:	89 c6                	mov    esi,eax
c00212a7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00212ad:	81 c6 00 10 00 00    	add    esi,0x1000
c00212b3:	e8 aa ef fe ff       	call   c0010262 <Phys::allocatePage()>
c00212b8:	39 c6                	cmp    esi,eax
c00212ba:	74 10                	je     c00212cc <SATAPI::open(int, int, void*)+0x6c>
c00212bc:	83 ec 0c             	sub    esp,0xc
c00212bf:	68 58 68 02 c0       	push   0xc0026858
c00212c4:	e8 a5 ed fe ff       	call   c001006e <KePanic(char const*)>
c00212c9:	83 c4 10             	add    esp,0x10
c00212cc:	83 ec 0c             	sub    esp,0xc
c00212cf:	6a 02                	push   0x2
c00212d1:	e8 97 22 ff ff       	call   c001356d <Virt::allocateKernelVirtualPages(int)>
c00212d6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00212dc:	6a 03                	push   0x3
c00212de:	50                   	push   eax
c00212df:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00212e5:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c00212eb:	e8 60 29 ff ff       	call   c0013c50 <VAS::mapPage(unsigned long, unsigned long, int)>
c00212f0:	83 c4 14             	add    esp,0x14
c00212f3:	68 78 01 00 00       	push   0x178
c00212f8:	e8 62 ea fe ff       	call   c000fd5f <malloc>
c00212fd:	83 c4 0c             	add    esp,0xc
c0021300:	89 c6                	mov    esi,eax
c0021302:	6a 00                	push   0x0
c0021304:	68 ff ff ff 7f       	push   0x7fffffff
c0021309:	6a 00                	push   0x0
c002130b:	6a 00                	push   0x0
c002130d:	53                   	push   ebx
c002130e:	68 6e 68 02 c0       	push   0xc002686e
c0021313:	50                   	push   eax
c0021314:	e8 53 95 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021319:	83 c4 14             	add    esp,0x14
c002131c:	56                   	push   esi
c002131d:	e8 0a 96 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c0021322:	5a                   	pop    edx
c0021323:	0f be c0             	movsx  eax,al
c0021326:	59                   	pop    ecx
c0021327:	50                   	push   eax
c0021328:	68 b4 66 02 c0       	push   0xc00266b4
c002132d:	e8 4a 5c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021332:	58                   	pop    eax
c0021333:	5a                   	pop    edx
c0021334:	56                   	push   esi
c0021335:	53                   	push   ebx
c0021336:	e8 19 87 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c002133b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021341:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021344:	e8 55 8b fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0021349:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021350:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021353:	e8 b2 fe ff ff       	call   c002120a <SATAPI::detectMedia()>
c0021358:	83 c4 14             	add    esp,0x14
c002135b:	31 c0                	xor    eax,eax
c002135d:	5b                   	pop    ebx
c002135e:	5e                   	pop    esi
c002135f:	c3                   	ret    

c0021360 <SATAPI::read(unsigned long long, int, void*)>:
c0021360:	57                   	push   edi
c0021361:	56                   	push   esi
c0021362:	53                   	push   ebx
c0021363:	83 ec 30             	sub    esp,0x30
c0021366:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002136a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002136e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0021372:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021376:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002137a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002137e:	83 fe 04             	cmp    esi,0x4
c0021381:	7e 10                	jle    c0021393 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0021383:	83 ec 0c             	sub    esp,0xc
c0021386:	68 7c 68 02 c0       	push   0xc002687c
c002138b:	e8 de ec fe ff       	call   c001006e <KePanic(char const*)>
c0021390:	83 c4 10             	add    esp,0x10
c0021393:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021399:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002139f:	51                   	push   ecx
c00213a0:	50                   	push   eax
c00213a1:	83 c0 02             	add    eax,0x2
c00213a4:	c1 e0 07             	shl    eax,0x7
c00213a7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00213ad:	50                   	push   eax
c00213ae:	52                   	push   edx
c00213af:	e8 c6 e6 ff ff       	call   c001fa7a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00213b4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00213b8:	b9 03 00 00 00       	mov    ecx,0x3
c00213bd:	fc                   	cld    
c00213be:	31 c0                	xor    eax,eax
c00213c0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00213c2:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00213c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00213cc:	83 c4 0c             	add    esp,0xc
c00213cf:	6a 00                	push   0x0
c00213d1:	6a 00                	push   0x0
c00213d3:	6a 00                	push   0x0
c00213d5:	6a 00                	push   0x0
c00213d7:	6a 02                	push   0x2
c00213d9:	8d 44 24 30          	lea    eax,[esp+0x30]
c00213dd:	50                   	push   eax
c00213de:	53                   	push   ebx
c00213df:	e8 08 fb ff ff       	call   c0020eec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00213e4:	83 c4 20             	add    esp,0x20
c00213e7:	85 c0                	test   eax,eax
c00213e9:	75 44                	jne    c002142f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c00213eb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00213ef:	b9 03 00 00 00       	mov    ecx,0x3
c00213f4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00213f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213fa:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c00213ff:	0f c8                	bswap  eax
c0021401:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021405:	89 f0                	mov    eax,esi
c0021407:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002140b:	50                   	push   eax
c002140c:	56                   	push   esi
c002140d:	c1 e6 0b             	shl    esi,0xb
c0021410:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0021414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002141c:	56                   	push   esi
c002141d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021421:	50                   	push   eax
c0021422:	53                   	push   ebx
c0021423:	e8 c4 fa ff ff       	call   c0020eec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021428:	83 c4 20             	add    esp,0x20
c002142b:	85 c0                	test   eax,eax
c002142d:	74 14                	je     c0021443 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002142f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021433:	83 ec 0c             	sub    esp,0xc
c0021436:	53                   	push   ebx
c0021437:	e8 ce fd ff ff       	call   c002120a <SATAPI::detectMedia()>
c002143c:	83 c4 10             	add    esp,0x10
c002143f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021443:	83 c4 30             	add    esp,0x30
c0021446:	5b                   	pop    ebx
c0021447:	5e                   	pop    esi
c0021448:	5f                   	pop    edi
c0021449:	c3                   	ret    
c002144a:	66 90                	xchg   ax,ax

c002144c <APICTimer::close(int, int, void*)>:
c002144c:	b8 00 00 00 00       	mov    eax,0x0
c0021451:	c3                   	ret    
c0021452:	66 90                	xchg   ax,ax

c0021454 <apicTimerHandler(regs*, void*)>:
c0021454:	83 ec 0c             	sub    esp,0xc
c0021457:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002145b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002145d:	b8 10 27 00 00       	mov    eax,0x2710
c0021462:	ba 00 00 00 00       	mov    edx,0x0
c0021467:	f7 f1                	div    ecx
c0021469:	83 ec 0c             	sub    esp,0xc
c002146c:	50                   	push   eax
c002146d:	e8 b6 9c fe ff       	call   c000b128 <timerHandler(unsigned int)>
c0021472:	83 c4 10             	add    esp,0x10
c0021475:	90                   	nop
c0021476:	83 c4 0c             	add    esp,0xc
c0021479:	c3                   	ret    
c002147a:	66 90                	xchg   ax,ax

c002147c <APICTimer::open(int, int, void*)>:
c002147c:	83 ec 0c             	sub    esp,0xc
c002147f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021483:	8b 00                	mov    eax,DWORD PTR [eax]
c0021485:	83 c0 24             	add    eax,0x24
c0021488:	8b 00                	mov    eax,DWORD PTR [eax]
c002148a:	83 ec 08             	sub    esp,0x8
c002148d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021491:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021495:	ff d0                	call   eax
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00214a2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00214a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00214b0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00214b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00214ba:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00214c0:	83 ec 0c             	sub    esp,0xc
c00214c3:	51                   	push   ecx
c00214c4:	6a 01                	push   0x1
c00214c6:	68 54 14 02 c0       	push   0xc0021454
c00214cb:	52                   	push   edx
c00214cc:	50                   	push   eax
c00214cd:	e8 2e 85 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00214d2:	83 c4 20             	add    esp,0x20
c00214d5:	89 c2                	mov    edx,eax
c00214d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00214e1:	b8 00 00 00 00       	mov    eax,0x0
c00214e6:	83 c4 0c             	add    esp,0xc
c00214e9:	c3                   	ret    
c00214ea:	66 90                	xchg   ax,ax

c00214ec <APICTimer::write(int)>:
c00214ec:	83 ec 0c             	sub    esp,0xc
c00214ef:	83 ec 0c             	sub    esp,0xc
c00214f2:	68 e0 68 02 c0       	push   0xc00268e0
c00214f7:	e8 72 eb fe ff       	call   c001006e <KePanic(char const*)>
c00214fc:	83 c4 10             	add    esp,0x10
c00214ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021507:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002150d:	90                   	nop
c002150e:	83 c4 0c             	add    esp,0xc
c0021511:	c3                   	ret    
c0021512:	66 90                	xchg   ax,ax

c0021514 <APICTimer::APICTimer()>:
c0021514:	83 ec 0c             	sub    esp,0xc
c0021517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151b:	83 ec 08             	sub    esp,0x8
c002151e:	68 f0 68 02 c0       	push   0xc00268f0
c0021523:	50                   	push   eax
c0021524:	e8 33 9b fe ff       	call   c000b05c <Timer::Timer(char const*)>
c0021529:	83 c4 10             	add    esp,0x10
c002152c:	ba 04 69 02 c0       	mov    edx,0xc0026904
c0021531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021535:	89 10                	mov    DWORD PTR [eax],edx
c0021537:	90                   	nop
c0021538:	83 c4 0c             	add    esp,0xc
c002153b:	c3                   	ret    

c002153c <PIT::write(int)>:
c002153c:	83 ec 10             	sub    esp,0x10
c002153f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021543:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021547:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002154d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021551:	a3 b8 04 03 c0       	mov    ds:0xc00304b8,eax
c0021556:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002155b:	89 c2                	mov    edx,eax
c002155d:	c1 fa 1f             	sar    edx,0x1f
c0021560:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021564:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021568:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002156f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021574:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021578:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002157d:	ee                   	out    dx,al
c002157e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021582:	0f b6 c0             	movzx  eax,al
c0021585:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002158c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021590:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021594:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021599:	ee                   	out    dx,al
c002159a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002159e:	c1 f8 08             	sar    eax,0x8
c00215a1:	0f b6 c0             	movzx  eax,al
c00215a4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00215ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00215af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00215b3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00215b8:	ee                   	out    dx,al
c00215b9:	90                   	nop
c00215ba:	83 c4 10             	add    esp,0x10
c00215bd:	c3                   	ret    
c00215be:	66 90                	xchg   ax,ax

c00215c0 <pitHandler(regs*, void*)>:
c00215c0:	83 ec 0c             	sub    esp,0xc
c00215c3:	8b 0d b8 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304b8
c00215c9:	b8 10 27 00 00       	mov    eax,0x2710
c00215ce:	89 c2                	mov    edx,eax
c00215d0:	c1 fa 1f             	sar    edx,0x1f
c00215d3:	f7 f9                	idiv   ecx
c00215d5:	83 ec 0c             	sub    esp,0xc
c00215d8:	50                   	push   eax
c00215d9:	e8 4a 9b fe ff       	call   c000b128 <timerHandler(unsigned int)>
c00215de:	83 c4 10             	add    esp,0x10
c00215e1:	90                   	nop
c00215e2:	83 c4 0c             	add    esp,0xc
c00215e5:	c3                   	ret    
c00215e6:	66 90                	xchg   ax,ax

c00215e8 <PIT::open(int, int, void*)>:
c00215e8:	83 ec 0c             	sub    esp,0xc
c00215eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f1:	83 c0 24             	add    eax,0x24
c00215f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f6:	83 ec 08             	sub    esp,0x8
c00215f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021601:	ff d0                	call   eax
c0021603:	83 c4 10             	add    esp,0x10
c0021606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160a:	83 ec 0c             	sub    esp,0xc
c002160d:	6a 00                	push   0x0
c002160f:	6a 01                	push   0x1
c0021611:	68 c0 15 02 c0       	push   0xc00215c0
c0021616:	6a 00                	push   0x0
c0021618:	50                   	push   eax
c0021619:	e8 e2 83 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002161e:	83 c4 20             	add    esp,0x20
c0021621:	89 c2                	mov    edx,eax
c0021623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021627:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002162d:	b8 00 00 00 00       	mov    eax,0x0
c0021632:	83 c4 0c             	add    esp,0xc
c0021635:	c3                   	ret    
c0021636:	66 90                	xchg   ax,ax

c0021638 <PIT::close(int, int, void*)>:
c0021638:	83 ec 0c             	sub    esp,0xc
c002163b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164d:	6a 01                	push   0x1
c002164f:	68 c0 15 02 c0       	push   0xc00215c0
c0021654:	6a 00                	push   0x0
c0021656:	50                   	push   eax
c0021657:	e8 da 83 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002165c:	83 c4 10             	add    esp,0x10
c002165f:	b8 00 00 00 00       	mov    eax,0x0
c0021664:	83 c4 0c             	add    esp,0xc
c0021667:	c3                   	ret    

c0021668 <PIT::PIT()>:
c0021668:	83 ec 0c             	sub    esp,0xc
c002166b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002166f:	83 ec 08             	sub    esp,0x8
c0021672:	68 2c 69 02 c0       	push   0xc002692c
c0021677:	50                   	push   eax
c0021678:	e8 df 99 fe ff       	call   c000b05c <Timer::Timer(char const*)>
c002167d:	83 c4 10             	add    esp,0x10
c0021680:	ba 54 69 02 c0       	mov    edx,0xc0026954
c0021685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021689:	89 10                	mov    DWORD PTR [eax],edx
c002168b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002168f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021695:	0f b6 d0             	movzx  edx,al
c0021698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002169c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00216a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00216ad:	0f b6 d0             	movzx  edx,al
c00216b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00216b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00216c3:	8d 50 01             	lea    edx,[eax+0x1]
c00216c6:	88 d1                	mov    cl,dl
c00216c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00216cc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00216d2:	0f b6 d0             	movzx  edx,al
c00216d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00216dd:	83 e1 3f             	and    ecx,0x3f
c00216e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00216e4:	90                   	nop
c00216e5:	83 c4 0c             	add    esp,0xc
c00216e8:	c3                   	ret    
c00216e9:	66 90                	xchg   ax,ax
c00216eb:	66 90                	xchg   ax,ax
c00216ed:	66 90                	xchg   ax,ax
c00216ef:	90                   	nop

c00216f0 <avxDetect>:
c00216f0:	b8 01 00 00 00       	mov    eax,0x1
c00216f5:	0f a2                	cpuid  
c00216f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00216fd:	74 15                	je     c0021714 <avxDetect.noAVX>
c00216ff:	b8 01 00 00 00       	mov    eax,0x1
c0021704:	0f a2                	cpuid  
c0021706:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002170c:	74 06                	je     c0021714 <avxDetect.noAVX>
c002170e:	b8 01 00 00 00       	mov    eax,0x1
c0021713:	c3                   	ret    

c0021714 <avxDetect.noAVX>:
c0021714:	b8 00 00 00 00       	mov    eax,0x0
c0021719:	c3                   	ret    

c002171a <avxSave>:
c002171a:	53                   	push   ebx
c002171b:	52                   	push   edx
c002171c:	31 c0                	xor    eax,eax
c002171e:	48                   	dec    eax
c002171f:	89 c2                	mov    edx,eax
c0021721:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021725:	0f ae 23             	xsave  [ebx]
c0021728:	5a                   	pop    edx
c0021729:	5b                   	pop    ebx
c002172a:	c3                   	ret    

c002172b <avxLoad>:
c002172b:	53                   	push   ebx
c002172c:	52                   	push   edx
c002172d:	31 c0                	xor    eax,eax
c002172f:	48                   	dec    eax
c0021730:	89 c2                	mov    edx,eax
c0021732:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021736:	0f ae 2b             	xrstor [ebx]
c0021739:	5a                   	pop    edx
c002173a:	5b                   	pop    ebx
c002173b:	c3                   	ret    

c002173c <avxInit>:
c002173c:	e8 17 03 00 00       	call   c0021a58 <sseInit>
c0021741:	50                   	push   eax
c0021742:	51                   	push   ecx
c0021743:	0f 20 e0             	mov    eax,cr4
c0021746:	0d 00 00 04 00       	or     eax,0x40000
c002174b:	0f 22 e0             	mov    cr4,eax
c002174e:	31 c9                	xor    ecx,ecx
c0021750:	0f 01 d0             	xgetbv 
c0021753:	0d 07 00 00 00       	or     eax,0x7
c0021758:	0f 01 d1             	xsetbv 
c002175b:	59                   	pop    ecx
c002175c:	58                   	pop    eax
c002175d:	c3                   	ret    

c002175e <avxClose>:
c002175e:	c3                   	ret    
c002175f:	90                   	nop

c0021760 <isr0>:
c0021760:	fa                   	cli    
c0021761:	68 00 00 00 00       	push   0x0
c0021766:	68 00 00 00 00       	push   0x0
c002176b:	e9 56 01 00 00       	jmp    c00218c6 <int_common_stub>

c0021770 <isr1>:
c0021770:	fa                   	cli    
c0021771:	6a 00                	push   0x0
c0021773:	6a 01                	push   0x1
c0021775:	e9 4c 01 00 00       	jmp    c00218c6 <int_common_stub>

c002177a <isr2>:
c002177a:	fa                   	cli    
c002177b:	6a 00                	push   0x0
c002177d:	6a 02                	push   0x2
c002177f:	e9 42 01 00 00       	jmp    c00218c6 <int_common_stub>

c0021784 <isr3>:
c0021784:	fa                   	cli    
c0021785:	6a 00                	push   0x0
c0021787:	6a 03                	push   0x3
c0021789:	e9 38 01 00 00       	jmp    c00218c6 <int_common_stub>

c002178e <isr4>:
c002178e:	fa                   	cli    
c002178f:	6a 00                	push   0x0
c0021791:	6a 04                	push   0x4
c0021793:	e9 2e 01 00 00       	jmp    c00218c6 <int_common_stub>

c0021798 <isr5>:
c0021798:	fa                   	cli    
c0021799:	6a 00                	push   0x0
c002179b:	6a 05                	push   0x5
c002179d:	e9 24 01 00 00       	jmp    c00218c6 <int_common_stub>

c00217a2 <isr6>:
c00217a2:	fa                   	cli    
c00217a3:	6a 00                	push   0x0
c00217a5:	6a 06                	push   0x6
c00217a7:	e9 1a 01 00 00       	jmp    c00218c6 <int_common_stub>

c00217ac <isr7>:
c00217ac:	fa                   	cli    
c00217ad:	6a 00                	push   0x0
c00217af:	6a 07                	push   0x7
c00217b1:	e9 10 01 00 00       	jmp    c00218c6 <int_common_stub>

c00217b6 <isr8>:
c00217b6:	fa                   	cli    
c00217b7:	6a 08                	push   0x8
c00217b9:	e9 08 01 00 00       	jmp    c00218c6 <int_common_stub>

c00217be <isr9>:
c00217be:	fa                   	cli    
c00217bf:	6a 00                	push   0x0
c00217c1:	6a 09                	push   0x9
c00217c3:	e9 fe 00 00 00       	jmp    c00218c6 <int_common_stub>

c00217c8 <isr10>:
c00217c8:	fa                   	cli    
c00217c9:	6a 0a                	push   0xa
c00217cb:	e9 f6 00 00 00       	jmp    c00218c6 <int_common_stub>

c00217d0 <isr11>:
c00217d0:	fa                   	cli    
c00217d1:	6a 0b                	push   0xb
c00217d3:	e9 ee 00 00 00       	jmp    c00218c6 <int_common_stub>

c00217d8 <isr12>:
c00217d8:	fa                   	cli    
c00217d9:	6a 0c                	push   0xc
c00217db:	e9 e6 00 00 00       	jmp    c00218c6 <int_common_stub>

c00217e0 <isr13>:
c00217e0:	fa                   	cli    
c00217e1:	6a 0d                	push   0xd
c00217e3:	53                   	push   ebx
c00217e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00217e8:	81 fb 85 19 02 c0    	cmp    ebx,0xc0021985
c00217ee:	5b                   	pop    ebx
c00217ef:	0f 84 92 01 00 00    	je     c0021987 <finishSignal2>
c00217f5:	e9 cc 00 00 00       	jmp    c00218c6 <int_common_stub>

c00217fa <isr14>:
c00217fa:	fa                   	cli    
c00217fb:	6a 0e                	push   0xe
c00217fd:	e9 c4 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021802 <isr15>:
c0021802:	fa                   	cli    
c0021803:	6a 00                	push   0x0
c0021805:	6a 0f                	push   0xf
c0021807:	e9 ba 00 00 00       	jmp    c00218c6 <int_common_stub>

c002180c <isr16>:
c002180c:	fa                   	cli    
c002180d:	6a 00                	push   0x0
c002180f:	6a 10                	push   0x10
c0021811:	e9 b0 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021816 <isr17>:
c0021816:	fa                   	cli    
c0021817:	6a 00                	push   0x0
c0021819:	6a 11                	push   0x11
c002181b:	e9 a6 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021820 <isr18>:
c0021820:	fa                   	cli    
c0021821:	6a 00                	push   0x0
c0021823:	6a 12                	push   0x12
c0021825:	e9 9c 00 00 00       	jmp    c00218c6 <int_common_stub>

c002182a <irq3>:
c002182a:	fa                   	cli    
c002182b:	6a 00                	push   0x0
c002182d:	6a 23                	push   0x23
c002182f:	e9 92 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021834 <irq4>:
c0021834:	fa                   	cli    
c0021835:	6a 00                	push   0x0
c0021837:	6a 24                	push   0x24
c0021839:	e9 88 00 00 00       	jmp    c00218c6 <int_common_stub>

c002183e <irq5>:
c002183e:	fa                   	cli    
c002183f:	6a 00                	push   0x0
c0021841:	6a 25                	push   0x25
c0021843:	e9 7e 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021848 <irq6>:
c0021848:	fa                   	cli    
c0021849:	6a 00                	push   0x0
c002184b:	6a 26                	push   0x26
c002184d:	e9 74 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021852 <irq7>:
c0021852:	fa                   	cli    
c0021853:	6a 00                	push   0x0
c0021855:	6a 27                	push   0x27
c0021857:	e9 6a 00 00 00       	jmp    c00218c6 <int_common_stub>

c002185c <irq8>:
c002185c:	fa                   	cli    
c002185d:	6a 00                	push   0x0
c002185f:	6a 28                	push   0x28
c0021861:	e9 60 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021866 <irq9>:
c0021866:	fa                   	cli    
c0021867:	6a 00                	push   0x0
c0021869:	6a 29                	push   0x29
c002186b:	e9 56 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021870 <irq10>:
c0021870:	fa                   	cli    
c0021871:	6a 00                	push   0x0
c0021873:	6a 2a                	push   0x2a
c0021875:	e9 4c 00 00 00       	jmp    c00218c6 <int_common_stub>

c002187a <irq11>:
c002187a:	fa                   	cli    
c002187b:	6a 00                	push   0x0
c002187d:	6a 2b                	push   0x2b
c002187f:	e9 42 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021884 <irq12>:
c0021884:	fa                   	cli    
c0021885:	6a 00                	push   0x0
c0021887:	6a 2c                	push   0x2c
c0021889:	e9 38 00 00 00       	jmp    c00218c6 <int_common_stub>

c002188e <irq13>:
c002188e:	fa                   	cli    
c002188f:	6a 00                	push   0x0
c0021891:	6a 2d                	push   0x2d
c0021893:	e9 2e 00 00 00       	jmp    c00218c6 <int_common_stub>

c0021898 <irq14>:
c0021898:	fa                   	cli    
c0021899:	6a 00                	push   0x0
c002189b:	6a 2e                	push   0x2e
c002189d:	e9 24 00 00 00       	jmp    c00218c6 <int_common_stub>

c00218a2 <irq15>:
c00218a2:	fa                   	cli    
c00218a3:	6a 00                	push   0x0
c00218a5:	6a 2f                	push   0x2f
c00218a7:	e9 1a 00 00 00       	jmp    c00218c6 <int_common_stub>

c00218ac <irq1>:
c00218ac:	fa                   	cli    
c00218ad:	6a 00                	push   0x0
c00218af:	6a 21                	push   0x21
c00218b1:	eb 13                	jmp    c00218c6 <int_common_stub>

c00218b3 <irq2>:
c00218b3:	fa                   	cli    
c00218b4:	6a 00                	push   0x0
c00218b6:	6a 22                	push   0x22
c00218b8:	eb 0c                	jmp    c00218c6 <int_common_stub>

c00218ba <isr96>:
c00218ba:	6a 00                	push   0x0
c00218bc:	6a 60                	push   0x60
c00218be:	fb                   	sti    
c00218bf:	eb 05                	jmp    c00218c6 <int_common_stub>

c00218c1 <irq0>:
c00218c1:	fa                   	cli    
c00218c2:	6a 00                	push   0x0
c00218c4:	6a 20                	push   0x20

c00218c6 <int_common_stub>:
c00218c6:	60                   	pusha  
c00218c7:	1e                   	push   ds
c00218c8:	06                   	push   es
c00218c9:	0f a0                	push   fs
c00218cb:	0f a8                	push   gs
c00218cd:	66 b8 10 00          	mov    ax,0x10
c00218d1:	66 8e d8             	mov    ds,ax
c00218d4:	66 8e c0             	mov    es,ax
c00218d7:	66 8e e0             	mov    fs,ax
c00218da:	66 8e e8             	mov    gs,ax
c00218dd:	54                   	push   esp
c00218de:	fc                   	cld    
c00218df:	e8 e4 d1 fe ff       	call   c000eac8 <int_handler>
c00218e4:	81 c4 04 00 00 00    	add    esp,0x4
c00218ea:	0f a9                	pop    gs
c00218ec:	0f a1                	pop    fs
c00218ee:	07                   	pop    es
c00218ef:	1f                   	pop    ds
c00218f0:	e8 a6 fa fe ff       	call   c001139b <KiCheckSignalZ>
c00218f5:	85 c0                	test   eax,eax
c00218f7:	75 08                	jne    c0021901 <doSignals>
c00218f9:	61                   	popa   
c00218fa:	81 c4 08 00 00 00    	add    esp,0x8
c0021900:	cf                   	iret   

c0021901 <doSignals>:
c0021901:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021906:	61                   	popa   
c0021907:	53                   	push   ebx
c0021908:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002190e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021911:	5b                   	pop    ebx
c0021912:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021917:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002191a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002191d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021920:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021923:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021926:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021929:	81 c4 08 00 00 00    	add    esp,0x8
c002192f:	5e                   	pop    esi
c0021930:	5b                   	pop    ebx
c0021931:	59                   	pop    ecx
c0021932:	5a                   	pop    edx
c0021933:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021936:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021939:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002193c:	52                   	push   edx
c002193d:	51                   	push   ecx
c002193e:	53                   	push   ebx
c002193f:	56                   	push   esi
c0021940:	81 ec 08 00 00 00    	sub    esp,0x8
c0021946:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021949:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002194c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002194f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021952:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021955:	60                   	pusha  
c0021956:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002195c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002195f:	89 e3                	mov    ebx,esp
c0021961:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021964:	52                   	push   edx
c0021965:	68 85 19 02 c0       	push   0xc0021985
c002196a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002196d:	89 dc                	mov    esp,ebx
c002196f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021972:	68 23 00 00 00       	push   0x23
c0021977:	51                   	push   ecx
c0021978:	68 02 02 00 00       	push   0x202
c002197d:	68 1b 00 00 00       	push   0x1b
c0021982:	ff 36                	push   DWORD PTR [esi]
c0021984:	cf                   	iret   

c0021985 <finishSignal>:
c0021985:	cd 0f                	int    0xf

c0021987 <finishSignal2>:
c0021987:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002198d:	e8 95 fa fe ff       	call   c0011427 <KiFinishSignalZ>
c0021992:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021998:	68 23 00 00 00       	push   0x23
c002199d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00219a0:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00219a3:	68 1b 00 00 00       	push   0x1b
c00219a8:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00219ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219ae:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00219b1:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00219b4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00219b7:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00219ba:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00219bd:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00219c0:	cf                   	iret   
c00219c1:	90                   	nop
c00219c2:	90                   	nop
c00219c3:	90                   	nop

c00219c4 <irq16>:
c00219c4:	fa                   	cli    
c00219c5:	6a 00                	push   0x0
c00219c7:	6a 30                	push   0x30
c00219c9:	e9 f8 fe ff ff       	jmp    c00218c6 <int_common_stub>

c00219ce <irq17>:
c00219ce:	fa                   	cli    
c00219cf:	6a 00                	push   0x0
c00219d1:	6a 31                	push   0x31
c00219d3:	e9 ee fe ff ff       	jmp    c00218c6 <int_common_stub>

c00219d8 <irq18>:
c00219d8:	fa                   	cli    
c00219d9:	6a 00                	push   0x0
c00219db:	6a 32                	push   0x32
c00219dd:	e9 e4 fe ff ff       	jmp    c00218c6 <int_common_stub>

c00219e2 <irq19>:
c00219e2:	fa                   	cli    
c00219e3:	6a 00                	push   0x0
c00219e5:	6a 33                	push   0x33
c00219e7:	e9 da fe ff ff       	jmp    c00218c6 <int_common_stub>

c00219ec <irq20>:
c00219ec:	fa                   	cli    
c00219ed:	6a 00                	push   0x0
c00219ef:	6a 34                	push   0x34
c00219f1:	e9 d0 fe ff ff       	jmp    c00218c6 <int_common_stub>

c00219f6 <irq21>:
c00219f6:	fa                   	cli    
c00219f7:	6a 00                	push   0x0
c00219f9:	6a 35                	push   0x35
c00219fb:	e9 c6 fe ff ff       	jmp    c00218c6 <int_common_stub>

c0021a00 <irq22>:
c0021a00:	fa                   	cli    
c0021a01:	6a 00                	push   0x0
c0021a03:	6a 36                	push   0x36
c0021a05:	e9 bc fe ff ff       	jmp    c00218c6 <int_common_stub>

c0021a0a <irq23>:
c0021a0a:	fa                   	cli    
c0021a0b:	6a 00                	push   0x0
c0021a0d:	6a 37                	push   0x37
c0021a0f:	e9 b2 fe ff ff       	jmp    c00218c6 <int_common_stub>
c0021a14:	66 90                	xchg   ax,ax
c0021a16:	66 90                	xchg   ax,ax
c0021a18:	66 90                	xchg   ax,ax
c0021a1a:	66 90                	xchg   ax,ax
c0021a1c:	66 90                	xchg   ax,ax
c0021a1e:	66 90                	xchg   ax,ax

c0021a20 <i386GetRDRAND>:
c0021a20:	b9 64 00 00 00       	mov    ecx,0x64

c0021a25 <retry>:
c0021a25:	0f c7 f0             	rdrand eax
c0021a28:	72 05                	jb     c0021a2f <retry.done>
c0021a2a:	e2 f9                	loop   c0021a25 <retry>

c0021a2c <retry.fail>:
c0021a2c:	31 c0                	xor    eax,eax
c0021a2e:	c3                   	ret    

c0021a2f <retry.done>:
c0021a2f:	c3                   	ret    

c0021a30 <sseDetect>:
c0021a30:	b8 01 00 00 00       	mov    eax,0x1
c0021a35:	0f a2                	cpuid  
c0021a37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021a3d:	74 06                	je     c0021a45 <sseDetect.noSSE>
c0021a3f:	b8 01 00 00 00       	mov    eax,0x1
c0021a44:	c3                   	ret    

c0021a45 <sseDetect.noSSE>:
c0021a45:	31 c0                	xor    eax,eax
c0021a47:	c3                   	ret    

c0021a48 <sseSave>:
c0021a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a4c:	0f ae 00             	fxsave [eax]
c0021a4f:	c3                   	ret    

c0021a50 <sseLoad>:
c0021a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a54:	0f ae 08             	fxrstor [eax]
c0021a57:	c3                   	ret    

c0021a58 <sseInit>:
c0021a58:	e8 48 00 00 00       	call   c0021aa5 <x87Init>
c0021a5d:	0f 20 e0             	mov    eax,cr4
c0021a60:	66 0d 00 06          	or     ax,0x600
c0021a64:	0f 22 e0             	mov    cr4,eax
c0021a67:	c3                   	ret    

c0021a68 <sseClose>:
c0021a68:	c3                   	ret    
c0021a69:	66 90                	xchg   ax,ax
c0021a6b:	66 90                	xchg   ax,ax
c0021a6d:	66 90                	xchg   ax,ax
c0021a6f:	90                   	nop

c0021a70 <value_37F>:
c0021a70:	7f 03                	jg     c0021a75 <value_37A+0x1>

c0021a72 <value_37E>:
c0021a72:	7e 03                	jle    c0021a77 <x87Detect+0x1>

c0021a74 <value_37A>:
c0021a74:	7a 03                	jp     c0021a79 <x87Detect+0x3>

c0021a76 <x87Detect>:
c0021a76:	53                   	push   ebx
c0021a77:	51                   	push   ecx
c0021a78:	52                   	push   edx
c0021a79:	b8 01 00 00 00       	mov    eax,0x1
c0021a7e:	0f a2                	cpuid  
c0021a80:	f7 c2 01 00 00 00    	test   edx,0x1
c0021a86:	74 06                	je     c0021a8e <x87Detect.nox87>
c0021a88:	b8 01 00 00 00       	mov    eax,0x1
c0021a8d:	c3                   	ret    

c0021a8e <x87Detect.nox87>:
c0021a8e:	b8 00 00 00 00       	mov    eax,0x0
c0021a93:	5a                   	pop    edx
c0021a94:	59                   	pop    ecx
c0021a95:	5b                   	pop    ebx
c0021a96:	c3                   	ret    

c0021a97 <x87Save>:
c0021a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a9b:	dd 30                	fnsave [eax]
c0021a9d:	c3                   	ret    

c0021a9e <x87Load>:
c0021a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aa2:	dd 20                	frstor [eax]
c0021aa4:	c3                   	ret    

c0021aa5 <x87Init>:
c0021aa5:	0f 20 c0             	mov    eax,cr0
c0021aa8:	66 25 fb ff          	and    ax,0xfffb
c0021aac:	66 0d 22 00          	or     ax,0x22
c0021ab0:	0f 22 c0             	mov    cr0,eax
c0021ab3:	db e3                	fninit 
c0021ab5:	0f 06                	clts   
c0021ab7:	d9 2d 74 1a 02 c0    	fldcw  WORD PTR ds:0xc0021a74
c0021abd:	c3                   	ret    

c0021abe <x87Close>:
c0021abe:	c3                   	ret    
c0021abf:	90                   	nop

c0021ac0 <__do_global_ctors_aux>:
c0021ac0:	a1 74 2a 02 c0       	mov    eax,ds:0xc0022a74
c0021ac5:	83 f8 ff             	cmp    eax,0xffffffff
c0021ac8:	74 1a                	je     c0021ae4 <__do_global_ctors_aux+0x24>
c0021aca:	55                   	push   ebp
c0021acb:	89 e5                	mov    ebp,esp
c0021acd:	53                   	push   ebx
c0021ace:	52                   	push   edx
c0021acf:	bb 74 2a 02 c0       	mov    ebx,0xc0022a74
c0021ad4:	ff d0                	call   eax
c0021ad6:	83 eb 04             	sub    ebx,0x4
c0021ad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021adb:	83 f8 ff             	cmp    eax,0xffffffff
c0021ade:	75 f4                	jne    c0021ad4 <__do_global_ctors_aux+0x14>
c0021ae0:	58                   	pop    eax
c0021ae1:	5b                   	pop    ebx
c0021ae2:	5d                   	pop    ebp
c0021ae3:	c3                   	ret    
c0021ae4:	c3                   	ret    
c0021ae5:	66 90                	xchg   ax,ax
c0021ae7:	90                   	nop

c0021ae8 <__divdi3>:
c0021ae8:	55                   	push   ebp
c0021ae9:	57                   	push   edi
c0021aea:	56                   	push   esi
c0021aeb:	53                   	push   ebx
c0021aec:	83 ec 1c             	sub    esp,0x1c
c0021aef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021af3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021af7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021afa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021afe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021b02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b06:	85 db                	test   ebx,ebx
c0021b08:	0f 88 8e 00 00 00    	js     c0021b9c <__divdi3+0xb4>
c0021b0e:	89 dd                	mov    ebp,ebx
c0021b10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021b18:	89 d3                	mov    ebx,edx
c0021b1a:	85 d2                	test   edx,edx
c0021b1c:	79 0d                	jns    c0021b2b <__divdi3+0x43>
c0021b1e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021b22:	f7 d8                	neg    eax
c0021b24:	83 d2 00             	adc    edx,0x0
c0021b27:	f7 da                	neg    edx
c0021b29:	89 d3                	mov    ebx,edx
c0021b2b:	89 c7                	mov    edi,eax
c0021b2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b30:	85 db                	test   ebx,ebx
c0021b32:	75 48                	jne    c0021b7c <__divdi3+0x94>
c0021b34:	39 ef                	cmp    edi,ebp
c0021b36:	76 24                	jbe    c0021b5c <__divdi3+0x74>
c0021b38:	89 ea                	mov    edx,ebp
c0021b3a:	f7 f7                	div    edi
c0021b3c:	89 c1                	mov    ecx,eax
c0021b3e:	31 f6                	xor    esi,esi
c0021b40:	89 c8                	mov    eax,ecx
c0021b42:	89 f2                	mov    edx,esi
c0021b44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b48:	85 c9                	test   ecx,ecx
c0021b4a:	74 07                	je     c0021b53 <__divdi3+0x6b>
c0021b4c:	f7 d8                	neg    eax
c0021b4e:	83 d2 00             	adc    edx,0x0
c0021b51:	f7 da                	neg    edx
c0021b53:	83 c4 1c             	add    esp,0x1c
c0021b56:	5b                   	pop    ebx
c0021b57:	5e                   	pop    esi
c0021b58:	5f                   	pop    edi
c0021b59:	5d                   	pop    ebp
c0021b5a:	c3                   	ret    
c0021b5b:	90                   	nop
c0021b5c:	85 ff                	test   edi,edi
c0021b5e:	75 0b                	jne    c0021b6b <__divdi3+0x83>
c0021b60:	b8 01 00 00 00       	mov    eax,0x1
c0021b65:	31 d2                	xor    edx,edx
c0021b67:	f7 f3                	div    ebx
c0021b69:	89 c7                	mov    edi,eax
c0021b6b:	31 d2                	xor    edx,edx
c0021b6d:	89 e8                	mov    eax,ebp
c0021b6f:	f7 f7                	div    edi
c0021b71:	89 c6                	mov    esi,eax
c0021b73:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b76:	f7 f7                	div    edi
c0021b78:	89 c1                	mov    ecx,eax
c0021b7a:	eb c4                	jmp    c0021b40 <__divdi3+0x58>
c0021b7c:	39 eb                	cmp    ebx,ebp
c0021b7e:	77 3c                	ja     c0021bbc <__divdi3+0xd4>
c0021b80:	0f bd f3             	bsr    esi,ebx
c0021b83:	83 f6 1f             	xor    esi,0x1f
c0021b86:	75 40                	jne    c0021bc8 <__divdi3+0xe0>
c0021b88:	39 eb                	cmp    ebx,ebp
c0021b8a:	72 09                	jb     c0021b95 <__divdi3+0xad>
c0021b8c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b8f:	0f 87 97 00 00 00    	ja     c0021c2c <__divdi3+0x144>
c0021b95:	b9 01 00 00 00       	mov    ecx,0x1
c0021b9a:	eb a4                	jmp    c0021b40 <__divdi3+0x58>
c0021b9c:	f7 d9                	neg    ecx
c0021b9e:	83 d3 00             	adc    ebx,0x0
c0021ba1:	f7 db                	neg    ebx
c0021ba3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021ba6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021baa:	89 dd                	mov    ebp,ebx
c0021bac:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021bb4:	e9 5f ff ff ff       	jmp    c0021b18 <__divdi3+0x30>
c0021bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0021bbc:	31 f6                	xor    esi,esi
c0021bbe:	31 c9                	xor    ecx,ecx
c0021bc0:	e9 7b ff ff ff       	jmp    c0021b40 <__divdi3+0x58>
c0021bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0021bc8:	b8 20 00 00 00       	mov    eax,0x20
c0021bcd:	29 f0                	sub    eax,esi
c0021bcf:	89 f1                	mov    ecx,esi
c0021bd1:	d3 e3                	shl    ebx,cl
c0021bd3:	89 fa                	mov    edx,edi
c0021bd5:	88 c1                	mov    cl,al
c0021bd7:	d3 ea                	shr    edx,cl
c0021bd9:	09 da                	or     edx,ebx
c0021bdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bdf:	89 f1                	mov    ecx,esi
c0021be1:	d3 e7                	shl    edi,cl
c0021be3:	89 eb                	mov    ebx,ebp
c0021be5:	88 c1                	mov    cl,al
c0021be7:	d3 eb                	shr    ebx,cl
c0021be9:	89 f1                	mov    ecx,esi
c0021beb:	d3 e5                	shl    ebp,cl
c0021bed:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021bf0:	88 c1                	mov    cl,al
c0021bf2:	d3 ea                	shr    edx,cl
c0021bf4:	09 d5                	or     ebp,edx
c0021bf6:	89 e8                	mov    eax,ebp
c0021bf8:	89 da                	mov    edx,ebx
c0021bfa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021bfe:	89 d3                	mov    ebx,edx
c0021c00:	89 c5                	mov    ebp,eax
c0021c02:	f7 e7                	mul    edi
c0021c04:	39 d3                	cmp    ebx,edx
c0021c06:	72 18                	jb     c0021c20 <__divdi3+0x138>
c0021c08:	74 0a                	je     c0021c14 <__divdi3+0x12c>
c0021c0a:	89 e9                	mov    ecx,ebp
c0021c0c:	31 f6                	xor    esi,esi
c0021c0e:	e9 2d ff ff ff       	jmp    c0021b40 <__divdi3+0x58>
c0021c13:	90                   	nop
c0021c14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021c17:	89 f1                	mov    ecx,esi
c0021c19:	d3 e7                	shl    edi,cl
c0021c1b:	39 c7                	cmp    edi,eax
c0021c1d:	73 eb                	jae    c0021c0a <__divdi3+0x122>
c0021c1f:	90                   	nop
c0021c20:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021c23:	31 f6                	xor    esi,esi
c0021c25:	e9 16 ff ff ff       	jmp    c0021b40 <__divdi3+0x58>
c0021c2a:	66 90                	xchg   ax,ax
c0021c2c:	31 c9                	xor    ecx,ecx
c0021c2e:	e9 0d ff ff ff       	jmp    c0021b40 <__divdi3+0x58>
c0021c33:	90                   	nop

c0021c34 <__moddi3>:
c0021c34:	55                   	push   ebp
c0021c35:	57                   	push   edi
c0021c36:	56                   	push   esi
c0021c37:	53                   	push   ebx
c0021c38:	83 ec 2c             	sub    esp,0x2c
c0021c3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021c3f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021c43:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021c47:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021c4b:	85 db                	test   ebx,ebx
c0021c4d:	0f 88 85 00 00 00    	js     c0021cd8 <__moddi3+0xa4>
c0021c53:	89 de                	mov    esi,ebx
c0021c55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021c5d:	89 d7                	mov    edi,edx
c0021c5f:	85 d2                	test   edx,edx
c0021c61:	79 09                	jns    c0021c6c <__moddi3+0x38>
c0021c63:	f7 d8                	neg    eax
c0021c65:	83 d2 00             	adc    edx,0x0
c0021c68:	f7 da                	neg    edx
c0021c6a:	89 d7                	mov    edi,edx
c0021c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021c70:	89 cd                	mov    ebp,ecx
c0021c72:	85 ff                	test   edi,edi
c0021c74:	75 52                	jne    c0021cc8 <__moddi3+0x94>
c0021c76:	89 c3                	mov    ebx,eax
c0021c78:	39 f0                	cmp    eax,esi
c0021c7a:	76 24                	jbe    c0021ca0 <__moddi3+0x6c>
c0021c7c:	89 c8                	mov    eax,ecx
c0021c7e:	89 f2                	mov    edx,esi
c0021c80:	f7 f3                	div    ebx
c0021c82:	89 d6                	mov    esi,edx
c0021c84:	89 f0                	mov    eax,esi
c0021c86:	31 d2                	xor    edx,edx
c0021c88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c8c:	85 c9                	test   ecx,ecx
c0021c8e:	74 07                	je     c0021c97 <__moddi3+0x63>
c0021c90:	f7 d8                	neg    eax
c0021c92:	83 d2 00             	adc    edx,0x0
c0021c95:	f7 da                	neg    edx
c0021c97:	83 c4 2c             	add    esp,0x2c
c0021c9a:	5b                   	pop    ebx
c0021c9b:	5e                   	pop    esi
c0021c9c:	5f                   	pop    edi
c0021c9d:	5d                   	pop    ebp
c0021c9e:	c3                   	ret    
c0021c9f:	90                   	nop
c0021ca0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021ca4:	85 db                	test   ebx,ebx
c0021ca6:	75 0d                	jne    c0021cb5 <__moddi3+0x81>
c0021ca8:	b8 01 00 00 00       	mov    eax,0x1
c0021cad:	31 d2                	xor    edx,edx
c0021caf:	f7 f7                	div    edi
c0021cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021cb5:	89 f0                	mov    eax,esi
c0021cb7:	31 d2                	xor    edx,edx
c0021cb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021cbd:	f7 f7                	div    edi
c0021cbf:	89 e8                	mov    eax,ebp
c0021cc1:	f7 f7                	div    edi
c0021cc3:	89 d6                	mov    esi,edx
c0021cc5:	eb bd                	jmp    c0021c84 <__moddi3+0x50>
c0021cc7:	90                   	nop
c0021cc8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021ccc:	39 f7                	cmp    edi,esi
c0021cce:	76 20                	jbe    c0021cf0 <__moddi3+0xbc>
c0021cd0:	89 c8                	mov    eax,ecx
c0021cd2:	89 f2                	mov    edx,esi
c0021cd4:	eb b2                	jmp    c0021c88 <__moddi3+0x54>
c0021cd6:	66 90                	xchg   ax,ax
c0021cd8:	f7 d9                	neg    ecx
c0021cda:	83 d3 00             	adc    ebx,0x0
c0021cdd:	f7 db                	neg    ebx
c0021cdf:	89 de                	mov    esi,ebx
c0021ce1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021ce9:	e9 6f ff ff ff       	jmp    c0021c5d <__moddi3+0x29>
c0021cee:	66 90                	xchg   ax,ax
c0021cf0:	0f bd c7             	bsr    eax,edi
c0021cf3:	83 f0 1f             	xor    eax,0x1f
c0021cf6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cfa:	75 24                	jne    c0021d20 <__moddi3+0xec>
c0021cfc:	39 f7                	cmp    edi,esi
c0021cfe:	72 06                	jb     c0021d06 <__moddi3+0xd2>
c0021d00:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021d04:	77 0c                	ja     c0021d12 <__moddi3+0xde>
c0021d06:	89 e9                	mov    ecx,ebp
c0021d08:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021d0c:	19 fe                	sbb    esi,edi
c0021d0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021d16:	89 f2                	mov    edx,esi
c0021d18:	e9 6b ff ff ff       	jmp    c0021c88 <__moddi3+0x54>
c0021d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0021d20:	b8 20 00 00 00       	mov    eax,0x20
c0021d25:	89 c2                	mov    edx,eax
c0021d27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021d2b:	29 da                	sub    edx,ebx
c0021d2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021d31:	88 d9                	mov    cl,bl
c0021d33:	d3 e7                	shl    edi,cl
c0021d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d39:	88 d1                	mov    cl,dl
c0021d3b:	d3 e8                	shr    eax,cl
c0021d3d:	09 c7                	or     edi,eax
c0021d3f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021d43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021d47:	89 d8                	mov    eax,ebx
c0021d49:	88 d9                	mov    cl,bl
c0021d4b:	d3 e7                	shl    edi,cl
c0021d4d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021d51:	89 f3                	mov    ebx,esi
c0021d53:	88 d1                	mov    cl,dl
c0021d55:	d3 eb                	shr    ebx,cl
c0021d57:	89 c7                	mov    edi,eax
c0021d59:	88 c1                	mov    cl,al
c0021d5b:	d3 e6                	shl    esi,cl
c0021d5d:	89 e8                	mov    eax,ebp
c0021d5f:	88 d1                	mov    cl,dl
c0021d61:	d3 e8                	shr    eax,cl
c0021d63:	09 f0                	or     eax,esi
c0021d65:	89 f9                	mov    ecx,edi
c0021d67:	d3 e5                	shl    ebp,cl
c0021d69:	89 da                	mov    edx,ebx
c0021d6b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021d6f:	89 d3                	mov    ebx,edx
c0021d71:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021d75:	89 c6                	mov    esi,eax
c0021d77:	89 d1                	mov    ecx,edx
c0021d79:	39 d3                	cmp    ebx,edx
c0021d7b:	72 27                	jb     c0021da4 <__moddi3+0x170>
c0021d7d:	74 21                	je     c0021da0 <__moddi3+0x16c>
c0021d7f:	29 f5                	sub    ebp,esi
c0021d81:	19 cb                	sbb    ebx,ecx
c0021d83:	89 de                	mov    esi,ebx
c0021d85:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021d89:	d3 e6                	shl    esi,cl
c0021d8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021d8f:	89 f9                	mov    ecx,edi
c0021d91:	d3 ed                	shr    ebp,cl
c0021d93:	09 ee                	or     esi,ebp
c0021d95:	89 f0                	mov    eax,esi
c0021d97:	d3 eb                	shr    ebx,cl
c0021d99:	89 da                	mov    edx,ebx
c0021d9b:	e9 e8 fe ff ff       	jmp    c0021c88 <__moddi3+0x54>
c0021da0:	39 c5                	cmp    ebp,eax
c0021da2:	73 db                	jae    c0021d7f <__moddi3+0x14b>
c0021da4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021da8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021dac:	89 d1                	mov    ecx,edx
c0021dae:	89 c6                	mov    esi,eax
c0021db0:	eb cd                	jmp    c0021d7f <__moddi3+0x14b>
c0021db2:	66 90                	xchg   ax,ax

c0021db4 <__udivdi3>:
c0021db4:	55                   	push   ebp
c0021db5:	57                   	push   edi
c0021db6:	56                   	push   esi
c0021db7:	53                   	push   ebx
c0021db8:	83 ec 1c             	sub    esp,0x1c
c0021dbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021dbf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021dc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021dc7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021dcb:	85 d2                	test   edx,edx
c0021dcd:	75 41                	jne    c0021e10 <__udivdi3+0x5c>
c0021dcf:	39 f7                	cmp    edi,esi
c0021dd1:	76 15                	jbe    c0021de8 <__udivdi3+0x34>
c0021dd3:	89 e8                	mov    eax,ebp
c0021dd5:	89 f2                	mov    edx,esi
c0021dd7:	f7 f7                	div    edi
c0021dd9:	31 db                	xor    ebx,ebx
c0021ddb:	89 da                	mov    edx,ebx
c0021ddd:	83 c4 1c             	add    esp,0x1c
c0021de0:	5b                   	pop    ebx
c0021de1:	5e                   	pop    esi
c0021de2:	5f                   	pop    edi
c0021de3:	5d                   	pop    ebp
c0021de4:	c3                   	ret    
c0021de5:	8d 76 00             	lea    esi,[esi+0x0]
c0021de8:	89 f9                	mov    ecx,edi
c0021dea:	85 ff                	test   edi,edi
c0021dec:	75 0b                	jne    c0021df9 <__udivdi3+0x45>
c0021dee:	b8 01 00 00 00       	mov    eax,0x1
c0021df3:	31 d2                	xor    edx,edx
c0021df5:	f7 f7                	div    edi
c0021df7:	89 c1                	mov    ecx,eax
c0021df9:	31 d2                	xor    edx,edx
c0021dfb:	89 f0                	mov    eax,esi
c0021dfd:	f7 f1                	div    ecx
c0021dff:	89 c3                	mov    ebx,eax
c0021e01:	89 e8                	mov    eax,ebp
c0021e03:	f7 f1                	div    ecx
c0021e05:	89 da                	mov    edx,ebx
c0021e07:	83 c4 1c             	add    esp,0x1c
c0021e0a:	5b                   	pop    ebx
c0021e0b:	5e                   	pop    esi
c0021e0c:	5f                   	pop    edi
c0021e0d:	5d                   	pop    ebp
c0021e0e:	c3                   	ret    
c0021e0f:	90                   	nop
c0021e10:	39 f2                	cmp    edx,esi
c0021e12:	77 1c                	ja     c0021e30 <__udivdi3+0x7c>
c0021e14:	0f bd da             	bsr    ebx,edx
c0021e17:	83 f3 1f             	xor    ebx,0x1f
c0021e1a:	75 24                	jne    c0021e40 <__udivdi3+0x8c>
c0021e1c:	39 f2                	cmp    edx,esi
c0021e1e:	72 08                	jb     c0021e28 <__udivdi3+0x74>
c0021e20:	39 ef                	cmp    edi,ebp
c0021e22:	0f 87 84 00 00 00    	ja     c0021eac <__udivdi3+0xf8>
c0021e28:	b8 01 00 00 00       	mov    eax,0x1
c0021e2d:	eb ac                	jmp    c0021ddb <__udivdi3+0x27>
c0021e2f:	90                   	nop
c0021e30:	31 db                	xor    ebx,ebx
c0021e32:	31 c0                	xor    eax,eax
c0021e34:	89 da                	mov    edx,ebx
c0021e36:	83 c4 1c             	add    esp,0x1c
c0021e39:	5b                   	pop    ebx
c0021e3a:	5e                   	pop    esi
c0021e3b:	5f                   	pop    edi
c0021e3c:	5d                   	pop    ebp
c0021e3d:	c3                   	ret    
c0021e3e:	66 90                	xchg   ax,ax
c0021e40:	b8 20 00 00 00       	mov    eax,0x20
c0021e45:	29 d8                	sub    eax,ebx
c0021e47:	88 d9                	mov    cl,bl
c0021e49:	d3 e2                	shl    edx,cl
c0021e4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e4f:	89 fa                	mov    edx,edi
c0021e51:	88 c1                	mov    cl,al
c0021e53:	d3 ea                	shr    edx,cl
c0021e55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e59:	09 d1                	or     ecx,edx
c0021e5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021e5f:	88 d9                	mov    cl,bl
c0021e61:	d3 e7                	shl    edi,cl
c0021e63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021e67:	89 f7                	mov    edi,esi
c0021e69:	88 c1                	mov    cl,al
c0021e6b:	d3 ef                	shr    edi,cl
c0021e6d:	88 d9                	mov    cl,bl
c0021e6f:	d3 e6                	shl    esi,cl
c0021e71:	89 ea                	mov    edx,ebp
c0021e73:	88 c1                	mov    cl,al
c0021e75:	d3 ea                	shr    edx,cl
c0021e77:	09 d6                	or     esi,edx
c0021e79:	89 f0                	mov    eax,esi
c0021e7b:	89 fa                	mov    edx,edi
c0021e7d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021e81:	89 d7                	mov    edi,edx
c0021e83:	89 c6                	mov    esi,eax
c0021e85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021e89:	39 d7                	cmp    edi,edx
c0021e8b:	72 13                	jb     c0021ea0 <__udivdi3+0xec>
c0021e8d:	74 09                	je     c0021e98 <__udivdi3+0xe4>
c0021e8f:	89 f0                	mov    eax,esi
c0021e91:	31 db                	xor    ebx,ebx
c0021e93:	e9 43 ff ff ff       	jmp    c0021ddb <__udivdi3+0x27>
c0021e98:	88 d9                	mov    cl,bl
c0021e9a:	d3 e5                	shl    ebp,cl
c0021e9c:	39 c5                	cmp    ebp,eax
c0021e9e:	73 ef                	jae    c0021e8f <__udivdi3+0xdb>
c0021ea0:	8d 46 ff             	lea    eax,[esi-0x1]
c0021ea3:	31 db                	xor    ebx,ebx
c0021ea5:	e9 31 ff ff ff       	jmp    c0021ddb <__udivdi3+0x27>
c0021eaa:	66 90                	xchg   ax,ax
c0021eac:	31 c0                	xor    eax,eax
c0021eae:	e9 28 ff ff ff       	jmp    c0021ddb <__udivdi3+0x27>
c0021eb3:	90                   	nop

c0021eb4 <__umoddi3>:
c0021eb4:	55                   	push   ebp
c0021eb5:	57                   	push   edi
c0021eb6:	56                   	push   esi
c0021eb7:	53                   	push   ebx
c0021eb8:	83 ec 1c             	sub    esp,0x1c
c0021ebb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021ebf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021ec3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021ec7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021ecb:	89 da                	mov    edx,ebx
c0021ecd:	85 c0                	test   eax,eax
c0021ecf:	75 37                	jne    c0021f08 <__umoddi3+0x54>
c0021ed1:	39 df                	cmp    edi,ebx
c0021ed3:	76 13                	jbe    c0021ee8 <__umoddi3+0x34>
c0021ed5:	89 f0                	mov    eax,esi
c0021ed7:	f7 f7                	div    edi
c0021ed9:	89 d0                	mov    eax,edx
c0021edb:	31 d2                	xor    edx,edx
c0021edd:	83 c4 1c             	add    esp,0x1c
c0021ee0:	5b                   	pop    ebx
c0021ee1:	5e                   	pop    esi
c0021ee2:	5f                   	pop    edi
c0021ee3:	5d                   	pop    ebp
c0021ee4:	c3                   	ret    
c0021ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ee8:	89 fd                	mov    ebp,edi
c0021eea:	85 ff                	test   edi,edi
c0021eec:	75 0b                	jne    c0021ef9 <__umoddi3+0x45>
c0021eee:	b8 01 00 00 00       	mov    eax,0x1
c0021ef3:	31 d2                	xor    edx,edx
c0021ef5:	f7 f7                	div    edi
c0021ef7:	89 c5                	mov    ebp,eax
c0021ef9:	89 d8                	mov    eax,ebx
c0021efb:	31 d2                	xor    edx,edx
c0021efd:	f7 f5                	div    ebp
c0021eff:	89 f0                	mov    eax,esi
c0021f01:	f7 f5                	div    ebp
c0021f03:	89 d0                	mov    eax,edx
c0021f05:	eb d4                	jmp    c0021edb <__umoddi3+0x27>
c0021f07:	90                   	nop
c0021f08:	89 f1                	mov    ecx,esi
c0021f0a:	39 d8                	cmp    eax,ebx
c0021f0c:	76 0a                	jbe    c0021f18 <__umoddi3+0x64>
c0021f0e:	89 f0                	mov    eax,esi
c0021f10:	83 c4 1c             	add    esp,0x1c
c0021f13:	5b                   	pop    ebx
c0021f14:	5e                   	pop    esi
c0021f15:	5f                   	pop    edi
c0021f16:	5d                   	pop    ebp
c0021f17:	c3                   	ret    
c0021f18:	0f bd e8             	bsr    ebp,eax
c0021f1b:	83 f5 1f             	xor    ebp,0x1f
c0021f1e:	75 1c                	jne    c0021f3c <__umoddi3+0x88>
c0021f20:	39 d8                	cmp    eax,ebx
c0021f22:	72 04                	jb     c0021f28 <__umoddi3+0x74>
c0021f24:	39 f7                	cmp    edi,esi
c0021f26:	77 08                	ja     c0021f30 <__umoddi3+0x7c>
c0021f28:	89 da                	mov    edx,ebx
c0021f2a:	29 fe                	sub    esi,edi
c0021f2c:	19 c2                	sbb    edx,eax
c0021f2e:	89 f1                	mov    ecx,esi
c0021f30:	89 c8                	mov    eax,ecx
c0021f32:	83 c4 1c             	add    esp,0x1c
c0021f35:	5b                   	pop    ebx
c0021f36:	5e                   	pop    esi
c0021f37:	5f                   	pop    edi
c0021f38:	5d                   	pop    ebp
c0021f39:	c3                   	ret    
c0021f3a:	66 90                	xchg   ax,ax
c0021f3c:	ba 20 00 00 00       	mov    edx,0x20
c0021f41:	29 ea                	sub    edx,ebp
c0021f43:	89 e9                	mov    ecx,ebp
c0021f45:	d3 e0                	shl    eax,cl
c0021f47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f4b:	89 f8                	mov    eax,edi
c0021f4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021f51:	88 d1                	mov    cl,dl
c0021f53:	d3 e8                	shr    eax,cl
c0021f55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f59:	09 c1                	or     ecx,eax
c0021f5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f5f:	89 e9                	mov    ecx,ebp
c0021f61:	d3 e7                	shl    edi,cl
c0021f63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021f67:	89 d8                	mov    eax,ebx
c0021f69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f6d:	88 d1                	mov    cl,dl
c0021f6f:	d3 e8                	shr    eax,cl
c0021f71:	89 c7                	mov    edi,eax
c0021f73:	89 e9                	mov    ecx,ebp
c0021f75:	d3 e3                	shl    ebx,cl
c0021f77:	89 f0                	mov    eax,esi
c0021f79:	88 d1                	mov    cl,dl
c0021f7b:	d3 e8                	shr    eax,cl
c0021f7d:	09 d8                	or     eax,ebx
c0021f7f:	89 e9                	mov    ecx,ebp
c0021f81:	d3 e6                	shl    esi,cl
c0021f83:	89 f3                	mov    ebx,esi
c0021f85:	89 fa                	mov    edx,edi
c0021f87:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021f8b:	89 d1                	mov    ecx,edx
c0021f8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021f91:	89 c6                	mov    esi,eax
c0021f93:	89 d7                	mov    edi,edx
c0021f95:	39 d1                	cmp    ecx,edx
c0021f97:	72 27                	jb     c0021fc0 <__umoddi3+0x10c>
c0021f99:	74 21                	je     c0021fbc <__umoddi3+0x108>
c0021f9b:	89 ca                	mov    edx,ecx
c0021f9d:	29 f3                	sub    ebx,esi
c0021f9f:	19 fa                	sbb    edx,edi
c0021fa1:	89 d0                	mov    eax,edx
c0021fa3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021fa7:	d3 e0                	shl    eax,cl
c0021fa9:	89 e9                	mov    ecx,ebp
c0021fab:	d3 eb                	shr    ebx,cl
c0021fad:	09 d8                	or     eax,ebx
c0021faf:	d3 ea                	shr    edx,cl
c0021fb1:	83 c4 1c             	add    esp,0x1c
c0021fb4:	5b                   	pop    ebx
c0021fb5:	5e                   	pop    esi
c0021fb6:	5f                   	pop    edi
c0021fb7:	5d                   	pop    ebp
c0021fb8:	c3                   	ret    
c0021fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0021fbc:	39 c3                	cmp    ebx,eax
c0021fbe:	73 db                	jae    c0021f9b <__umoddi3+0xe7>
c0021fc0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021fc4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021fc8:	89 d7                	mov    edi,edx
c0021fca:	89 c6                	mov    esi,eax
c0021fcc:	eb cd                	jmp    c0021f9b <__umoddi3+0xe7>

Disassembly of section .init:

c0021fce <_init>:
c0021fce:	55                   	push   ebp
c0021fcf:	89 e5                	mov    ebp,esp
c0021fd1:	e8 1e e1 fd ff       	call   c00000f4 <frame_dummy>
c0021fd6:	e8 e5 fa ff ff       	call   c0021ac0 <__do_global_ctors_aux>
c0021fdb:	5d                   	pop    ebp
c0021fdc:	c3                   	ret    

Disassembly of section .fini:

c0021fdd <_fini>:
c0021fdd:	55                   	push   ebp
c0021fde:	89 e5                	mov    ebp,esp
c0021fe0:	e8 9f e0 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021fe5:	5d                   	pop    ebp
c0021fe6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021fe8 <DriverlessDevice::~DriverlessDevice()>:
c0021fe8:	ba 7c 3a 02 c0       	mov    edx,0xc0023a7c
c0021fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff1:	89 10                	mov    DWORD PTR [eax],edx
c0021ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff7:	50                   	push   eax
c0021ff8:	e8 59 79 fe ff       	call   c0009956 <Device::~Device()>
c0021ffd:	83 c4 04             	add    esp,0x4
c0022000:	90                   	nop
c0022001:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022002 <DriverlessDevice::~DriverlessDevice()>:
c0022002:	83 ec 0c             	sub    esp,0xc
c0022005:	83 ec 0c             	sub    esp,0xc
c0022008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002200c:	e8 d7 ff ff ff       	call   c0021fe8 <DriverlessDevice::~DriverlessDevice()>
c0022011:	83 c4 10             	add    esp,0x10
c0022014:	83 ec 08             	sub    esp,0x8
c0022017:	68 58 01 00 00       	push   0x158
c002201c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022020:	e8 c4 b3 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022025:	83 c4 10             	add    esp,0x10
c0022028:	83 c4 0c             	add    esp,0xc
c002202b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002202c <LinkedList<Device>::addElement(Device*)>:
c002202c:	83 ec 0c             	sub    esp,0xc
c002202f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022034:	75 10                	jne    c0022046 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022036:	83 ec 0c             	sub    esp,0xc
c0022039:	68 10 3a 02 c0       	push   0xc0023a10
c002203e:	e8 2b e0 fe ff       	call   c001006e <KePanic(char const*)>
c0022043:	83 c4 10             	add    esp,0x10
c0022046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204a:	8b 00                	mov    eax,DWORD PTR [eax]
c002204c:	85 c0                	test   eax,eax
c002204e:	74 3a                	je     c002208a <LinkedList<Device>::addElement(Device*)+0x5e>
c0022050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022057:	85 c0                	test   eax,eax
c0022059:	74 2f                	je     c002208a <LinkedList<Device>::addElement(Device*)+0x5e>
c002205b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022062:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022066:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002206c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022070:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022074:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002207e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022088:	eb 68                	jmp    c00220f2 <LinkedList<Device>::addElement(Device*)+0xc6>
c002208a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022090:	85 c0                	test   eax,eax
c0022092:	75 4e                	jne    c00220e2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002209b:	85 c0                	test   eax,eax
c002209d:	75 43                	jne    c00220e2 <LinkedList<Device>::addElement(Device*)+0xb6>
c002209f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220a7:	89 10                	mov    DWORD PTR [eax],edx
c00220a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00220b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220bb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00220c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220cc:	85 c0                	test   eax,eax
c00220ce:	74 22                	je     c00220f2 <LinkedList<Device>::addElement(Device*)+0xc6>
c00220d0:	83 ec 0c             	sub    esp,0xc
c00220d3:	68 32 3a 02 c0       	push   0xc0023a32
c00220d8:	e8 91 df fe ff       	call   c001006e <KePanic(char const*)>
c00220dd:	83 c4 10             	add    esp,0x10
c00220e0:	eb 10                	jmp    c00220f2 <LinkedList<Device>::addElement(Device*)+0xc6>
c00220e2:	83 ec 0c             	sub    esp,0xc
c00220e5:	68 3c 3a 02 c0       	push   0xc0023a3c
c00220ea:	e8 7f df fe ff       	call   c001006e <KePanic(char const*)>
c00220ef:	83 c4 10             	add    esp,0x10
c00220f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220f9:	8d 50 01             	lea    edx,[eax+0x1]
c00220fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022100:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022103:	90                   	nop
c0022104:	83 c4 0c             	add    esp,0xc
c0022107:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022108 <LinkedList<Device>::LinkedList()>:
c0022108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002210c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022116:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002211d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022121:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002212c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022136:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002213d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022141:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022148:	90                   	nop
c0022149:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002214c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002214c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022150:	8b 00                	mov    eax,DWORD PTR [eax]
c0022152:	85 c0                	test   eax,eax
c0022154:	75 0e                	jne    c0022164 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002215a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002215d:	85 c0                	test   eax,eax
c002215f:	75 03                	jne    c0022164 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022161:	b0 01                	mov    al,0x1
c0022163:	c3                   	ret    
c0022164:	b0 00                	mov    al,0x0
c0022166:	90                   	nop
c0022167:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002216c:	8b 00                	mov    eax,DWORD PTR [eax]
c002216e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022170:	83 ec 0c             	sub    esp,0xc
c0022173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022177:	8b 00                	mov    eax,DWORD PTR [eax]
c0022179:	85 c0                	test   eax,eax
c002217b:	75 17                	jne    c0022194 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002217d:	83 ec 0c             	sub    esp,0xc
c0022180:	68 ac 3c 02 c0       	push   0xc0023cac
c0022185:	e8 e4 de fe ff       	call   c001006e <KePanic(char const*)>
c002218a:	83 c4 10             	add    esp,0x10
c002218d:	e9 96 00 00 00       	jmp    c0022228 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0022192:	66 90                	xchg   ax,ax
c0022194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022198:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002219b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002219e:	85 c0                	test   eax,eax
c00221a0:	0f 95 c0             	setne  al
c00221a3:	0f b6 c0             	movzx  eax,al
c00221a6:	85 c0                	test   eax,eax
c00221a8:	74 12                	je     c00221bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00221aa:	83 ec 0c             	sub    esp,0xc
c00221ad:	68 f7 3c 02 c0       	push   0xc0023cf7
c00221b2:	e8 b7 de fe ff       	call   c001006e <KePanic(char const*)>
c00221b7:	83 c4 10             	add    esp,0x10
c00221ba:	66 90                	xchg   ax,ax
c00221bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00221c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00221c5:	85 c0                	test   eax,eax
c00221c7:	0f 94 c0             	sete   al
c00221ca:	0f b6 c0             	movzx  eax,al
c00221cd:	85 c0                	test   eax,eax
c00221cf:	74 33                	je     c0022204 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00221d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221ed:	83 f8 01             	cmp    eax,0x1
c00221f0:	74 22                	je     c0022214 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00221f2:	83 ec 0c             	sub    esp,0xc
c00221f5:	68 d0 3c 02 c0       	push   0xc0023cd0
c00221fa:	e8 6f de fe ff       	call   c001006e <KePanic(char const*)>
c00221ff:	83 c4 10             	add    esp,0x10
c0022202:	eb 10                	jmp    c0022214 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022208:	8b 00                	mov    eax,DWORD PTR [eax]
c002220a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002220d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022211:	89 10                	mov    DWORD PTR [eax],edx
c0022213:	90                   	nop
c0022214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022218:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002221b:	8d 50 ff             	lea    edx,[eax-0x1]
c002221e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022222:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022225:	8d 76 00             	lea    esi,[esi+0x0]
c0022228:	83 c4 0c             	add    esp,0xc
c002222b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002222c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002222c:	83 ec 0c             	sub    esp,0xc
c002222f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022234:	75 12                	jne    c0022248 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022236:	83 ec 0c             	sub    esp,0xc
c0022239:	68 10 3a 02 c0       	push   0xc0023a10
c002223e:	e8 2b de fe ff       	call   c001006e <KePanic(char const*)>
c0022243:	83 c4 10             	add    esp,0x10
c0022246:	66 90                	xchg   ax,ax
c0022248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224c:	8b 00                	mov    eax,DWORD PTR [eax]
c002224e:	85 c0                	test   eax,eax
c0022250:	74 36                	je     c0022288 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022259:	85 c0                	test   eax,eax
c002225b:	74 2b                	je     c0022288 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002225d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022261:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022264:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022268:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002226b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022273:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002227d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022284:	eb 6a                	jmp    c00222f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022286:	66 90                	xchg   ax,ax
c0022288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228c:	8b 00                	mov    eax,DWORD PTR [eax]
c002228e:	85 c0                	test   eax,eax
c0022290:	75 4e                	jne    c00222e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022296:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022299:	85 c0                	test   eax,eax
c002229b:	75 43                	jne    c00222e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002229d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222a5:	89 10                	mov    DWORD PTR [eax],edx
c00222a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00222c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222c7:	85 c0                	test   eax,eax
c00222c9:	74 25                	je     c00222f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00222cb:	83 ec 0c             	sub    esp,0xc
c00222ce:	68 32 3a 02 c0       	push   0xc0023a32
c00222d3:	e8 96 dd fe ff       	call   c001006e <KePanic(char const*)>
c00222d8:	83 c4 10             	add    esp,0x10
c00222db:	eb 13                	jmp    c00222f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00222dd:	8d 76 00             	lea    esi,[esi+0x0]
c00222e0:	83 ec 0c             	sub    esp,0xc
c00222e3:	68 3c 3a 02 c0       	push   0xc0023a3c
c00222e8:	e8 81 dd fe ff       	call   c001006e <KePanic(char const*)>
c00222ed:	83 c4 10             	add    esp,0x10
c00222f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222f7:	8d 50 01             	lea    edx,[eax+0x1]
c00222fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022301:	90                   	nop
c0022302:	83 c4 0c             	add    esp,0xc
c0022305:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022308 <ACPI::~ACPI()>:
c0022308:	83 ec 0c             	sub    esp,0xc
c002230b:	ba 28 41 02 c0       	mov    edx,0xc0024128
c0022310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022314:	89 10                	mov    DWORD PTR [eax],edx
c0022316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231a:	83 ec 0c             	sub    esp,0xc
c002231d:	50                   	push   eax
c002231e:	e8 33 76 fe ff       	call   c0009956 <Device::~Device()>
c0022323:	83 c4 10             	add    esp,0x10
c0022326:	90                   	nop
c0022327:	83 c4 0c             	add    esp,0xc
c002232a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002232c <ACPI::~ACPI()>:
c002232c:	83 ec 0c             	sub    esp,0xc
c002232f:	83 ec 0c             	sub    esp,0xc
c0022332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022336:	e8 cd ff ff ff       	call   c0022308 <ACPI::~ACPI()>
c002233b:	83 c4 10             	add    esp,0x10
c002233e:	83 ec 08             	sub    esp,0x8
c0022341:	68 64 12 00 00       	push   0x1264
c0022346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002234a:	e8 9a b0 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002234f:	83 c4 10             	add    esp,0x10
c0022352:	83 c4 0c             	add    esp,0xc
c0022355:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022358 <LinkedList<Device>::~LinkedList()>:
c0022358:	90                   	nop
c0022359:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002235c <LinkedList<Device>::isEmpty()>:
c002235c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022360:	8b 00                	mov    eax,DWORD PTR [eax]
c0022362:	85 c0                	test   eax,eax
c0022364:	75 0e                	jne    c0022374 <LinkedList<Device>::isEmpty()+0x18>
c0022366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002236d:	85 c0                	test   eax,eax
c002236f:	75 03                	jne    c0022374 <LinkedList<Device>::isEmpty()+0x18>
c0022371:	b0 01                	mov    al,0x1
c0022373:	c3                   	ret    
c0022374:	b0 00                	mov    al,0x0
c0022376:	90                   	nop
c0022377:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022378 <LinkedList<Device>::getFirstElement()>:
c0022378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002237c:	8b 00                	mov    eax,DWORD PTR [eax]
c002237e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022380 <LinkedList<Device>::removeFirst()>:
c0022380:	83 ec 0c             	sub    esp,0xc
c0022383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022387:	8b 00                	mov    eax,DWORD PTR [eax]
c0022389:	85 c0                	test   eax,eax
c002238b:	75 17                	jne    c00223a4 <LinkedList<Device>::removeFirst()+0x24>
c002238d:	83 ec 0c             	sub    esp,0xc
c0022390:	68 ac 3c 02 c0       	push   0xc0023cac
c0022395:	e8 d4 dc fe ff       	call   c001006e <KePanic(char const*)>
c002239a:	83 c4 10             	add    esp,0x10
c002239d:	e9 92 00 00 00       	jmp    c0022434 <LinkedList<Device>::removeFirst()+0xb4>
c00223a2:	66 90                	xchg   ax,ax
c00223a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223ab:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00223b1:	85 c0                	test   eax,eax
c00223b3:	74 13                	je     c00223c8 <LinkedList<Device>::removeFirst()+0x48>
c00223b5:	83 ec 0c             	sub    esp,0xc
c00223b8:	68 f7 3c 02 c0       	push   0xc0023cf7
c00223bd:	e8 ac dc fe ff       	call   c001006e <KePanic(char const*)>
c00223c2:	83 c4 10             	add    esp,0x10
c00223c5:	8d 76 00             	lea    esi,[esi+0x0]
c00223c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ce:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00223d4:	85 c0                	test   eax,eax
c00223d6:	75 34                	jne    c002240c <LinkedList<Device>::removeFirst()+0x8c>
c00223d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00223e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00223ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223f4:	83 f8 01             	cmp    eax,0x1
c00223f7:	74 27                	je     c0022420 <LinkedList<Device>::removeFirst()+0xa0>
c00223f9:	83 ec 0c             	sub    esp,0xc
c00223fc:	68 d0 3c 02 c0       	push   0xc0023cd0
c0022401:	e8 68 dc fe ff       	call   c001006e <KePanic(char const*)>
c0022406:	83 c4 10             	add    esp,0x10
c0022409:	eb 15                	jmp    c0022420 <LinkedList<Device>::removeFirst()+0xa0>
c002240b:	90                   	nop
c002240c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022410:	8b 00                	mov    eax,DWORD PTR [eax]
c0022412:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241c:	89 10                	mov    DWORD PTR [eax],edx
c002241e:	66 90                	xchg   ax,ax
c0022420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022424:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022427:	8d 50 ff             	lea    edx,[eax-0x1]
c002242a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002242e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022431:	8d 76 00             	lea    esi,[esi+0x0]
c0022434:	83 c4 0c             	add    esp,0xc
c0022437:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022438 <Computer::~Computer()>:
c0022438:	83 ec 0c             	sub    esp,0xc
c002243b:	ba d8 43 02 c0       	mov    edx,0xc00243d8
c0022440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022444:	89 10                	mov    DWORD PTR [eax],edx
c0022446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244a:	83 ec 0c             	sub    esp,0xc
c002244d:	50                   	push   eax
c002244e:	e8 03 75 fe ff       	call   c0009956 <Device::~Device()>
c0022453:	83 c4 10             	add    esp,0x10
c0022456:	90                   	nop
c0022457:	83 c4 0c             	add    esp,0xc
c002245a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002245c <Computer::~Computer()>:
c002245c:	83 ec 0c             	sub    esp,0xc
c002245f:	83 ec 0c             	sub    esp,0xc
c0022462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022466:	e8 cd ff ff ff       	call   c0022438 <Computer::~Computer()>
c002246b:	83 c4 10             	add    esp,0x10
c002246e:	83 ec 08             	sub    esp,0x8
c0022471:	68 6c 01 00 00       	push   0x16c
c0022476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002247a:	e8 6a af fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002247f:	83 c4 10             	add    esp,0x10
c0022482:	83 c4 0c             	add    esp,0xc
c0022485:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022486 <idleCommon()>:
c0022486:	83 ec 0c             	sub    esp,0xc
c0022489:	fa                   	cli    
c002248a:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c0022490:	e8 4b 4e ff ff       	call   c00172e0 <schedule()>
c0022495:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c002249c:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00224a3:	75 01                	jne    c00224a6 <idleCommon()+0x20>
c00224a5:	fb                   	sti    
c00224a6:	83 c4 0c             	add    esp,0xc
c00224a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00224aa <LinkedList<UnixFile>::~LinkedList()>:
c00224aa:	90                   	nop
c00224ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00224ac <LinkedList<UnixFile>::LinkedList()>:
c00224ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00224b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00224c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00224cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00224d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00224e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00224ec:	90                   	nop
c00224ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00224ee <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00224ee:	83 ec 0c             	sub    esp,0xc
c00224f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00224f6:	75 10                	jne    c0022508 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00224f8:	83 ec 0c             	sub    esp,0xc
c00224fb:	68 10 3a 02 c0       	push   0xc0023a10
c0022500:	e8 69 db fe ff       	call   c001006e <KePanic(char const*)>
c0022505:	83 c4 10             	add    esp,0x10
c0022508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250c:	8b 00                	mov    eax,DWORD PTR [eax]
c002250e:	85 c0                	test   eax,eax
c0022510:	74 34                	je     c0022546 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022516:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022519:	85 c0                	test   eax,eax
c002251b:	74 29                	je     c0022546 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002251d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022521:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022528:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002252b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002252f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022533:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002253d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022544:	eb 65                	jmp    c00225ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254a:	8b 00                	mov    eax,DWORD PTR [eax]
c002254c:	85 c0                	test   eax,eax
c002254e:	75 4b                	jne    c002259b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022557:	85 c0                	test   eax,eax
c0022559:	75 40                	jne    c002259b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002255b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002255f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022563:	89 10                	mov    DWORD PTR [eax],edx
c0022565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002256d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022577:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002257e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022582:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022585:	85 c0                	test   eax,eax
c0022587:	74 22                	je     c00225ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022589:	83 ec 0c             	sub    esp,0xc
c002258c:	68 32 3a 02 c0       	push   0xc0023a32
c0022591:	e8 d8 da fe ff       	call   c001006e <KePanic(char const*)>
c0022596:	83 c4 10             	add    esp,0x10
c0022599:	eb 10                	jmp    c00225ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002259b:	83 ec 0c             	sub    esp,0xc
c002259e:	68 3c 3a 02 c0       	push   0xc0023a3c
c00225a3:	e8 c6 da fe ff       	call   c001006e <KePanic(char const*)>
c00225a8:	83 c4 10             	add    esp,0x10
c00225ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225b2:	8d 50 01             	lea    edx,[eax+0x1]
c00225b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00225bc:	90                   	nop
c00225bd:	83 c4 0c             	add    esp,0xc
c00225c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00225c2 <LinkedList<UnixFile>::getFirstElement()>:
c00225c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00225c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00225ca <LinkedList<UnixFile>::removeFirst()>:
c00225ca:	83 ec 0c             	sub    esp,0xc
c00225cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00225d3:	85 c0                	test   eax,eax
c00225d5:	75 12                	jne    c00225e9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00225d7:	83 ec 0c             	sub    esp,0xc
c00225da:	68 ac 3c 02 c0       	push   0xc0023cac
c00225df:	e8 8a da fe ff       	call   c001006e <KePanic(char const*)>
c00225e4:	83 c4 10             	add    esp,0x10
c00225e7:	eb 7e                	jmp    c0022667 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00225e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225f3:	85 c0                	test   eax,eax
c00225f5:	74 10                	je     c0022607 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00225f7:	83 ec 0c             	sub    esp,0xc
c00225fa:	68 f7 3c 02 c0       	push   0xc0023cf7
c00225ff:	e8 6a da fe ff       	call   c001006e <KePanic(char const*)>
c0022604:	83 c4 10             	add    esp,0x10
c0022607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002260b:	8b 00                	mov    eax,DWORD PTR [eax]
c002260d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022610:	85 c0                	test   eax,eax
c0022612:	75 33                	jne    c0022647 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022618:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002261e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022622:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002262d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022630:	83 f8 01             	cmp    eax,0x1
c0022633:	74 21                	je     c0022656 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022635:	83 ec 0c             	sub    esp,0xc
c0022638:	68 d0 3c 02 c0       	push   0xc0023cd0
c002263d:	e8 2c da fe ff       	call   c001006e <KePanic(char const*)>
c0022642:	83 c4 10             	add    esp,0x10
c0022645:	eb 0f                	jmp    c0022656 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002264b:	8b 00                	mov    eax,DWORD PTR [eax]
c002264d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022654:	89 10                	mov    DWORD PTR [eax],edx
c0022656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002265d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022664:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022667:	83 c4 0c             	add    esp,0xc
c002266a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002266c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002266c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022670:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022673:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022678:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002267b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002267c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002267c:	90                   	nop
c002267d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022680 <ThreadControlBlock::ThreadControlBlock()>:
c0022680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022684:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002268b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002268f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002269a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00226a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226a5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00226ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226b0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00226b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226bb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00226bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226c3:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00226c7:	90                   	nop
c00226c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00226cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00226cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00226d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00226e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00226ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00226f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022705:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002270c:	90                   	nop
c002270d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002270e <IOAPIC::~IOAPIC()>:
c002270e:	83 ec 0c             	sub    esp,0xc
c0022711:	ba 24 5b 02 c0       	mov    edx,0xc0025b24
c0022716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002271a:	89 10                	mov    DWORD PTR [eax],edx
c002271c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022720:	83 ec 0c             	sub    esp,0xc
c0022723:	50                   	push   eax
c0022724:	e8 2d 72 fe ff       	call   c0009956 <Device::~Device()>
c0022729:	83 c4 10             	add    esp,0x10
c002272c:	90                   	nop
c002272d:	83 c4 0c             	add    esp,0xc
c0022730:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022732 <IOAPIC::~IOAPIC()>:
c0022732:	83 ec 0c             	sub    esp,0xc
c0022735:	83 ec 0c             	sub    esp,0xc
c0022738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002273c:	e8 cd ff ff ff       	call   c002270e <IOAPIC::~IOAPIC()>
c0022741:	83 c4 10             	add    esp,0x10
c0022744:	83 ec 08             	sub    esp,0x8
c0022747:	68 68 01 00 00       	push   0x168
c002274c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022750:	e8 94 ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022755:	83 c4 10             	add    esp,0x10
c0022758:	83 c4 0c             	add    esp,0xc
c002275b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002275c <CPU::~CPU()>:
c002275c:	83 ec 0c             	sub    esp,0xc
c002275f:	ba 98 5e 02 c0       	mov    edx,0xc0025e98
c0022764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022768:	89 10                	mov    DWORD PTR [eax],edx
c002276a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002276e:	83 ec 0c             	sub    esp,0xc
c0022771:	50                   	push   eax
c0022772:	e8 df 71 fe ff       	call   c0009956 <Device::~Device()>
c0022777:	83 c4 10             	add    esp,0x10
c002277a:	90                   	nop
c002277b:	83 c4 0c             	add    esp,0xc
c002277e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022780 <CPU::~CPU()>:
c0022780:	83 ec 0c             	sub    esp,0xc
c0022783:	83 ec 0c             	sub    esp,0xc
c0022786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002278a:	e8 cd ff ff ff       	call   c002275c <CPU::~CPU()>
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	83 ec 08             	sub    esp,0x8
c0022795:	68 78 11 00 00       	push   0x1178
c002279a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002279e:	e8 46 ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00227a3:	83 c4 10             	add    esp,0x10
c00227a6:	83 c4 0c             	add    esp,0xc
c00227a9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00227aa <PCI::~PCI()>:
c00227aa:	83 ec 0c             	sub    esp,0xc
c00227ad:	ba fc 63 02 c0       	mov    edx,0xc00263fc
c00227b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227b6:	89 10                	mov    DWORD PTR [eax],edx
c00227b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227bc:	83 ec 0c             	sub    esp,0xc
c00227bf:	50                   	push   eax
c00227c0:	e8 d7 61 fe ff       	call   c000899c <Bus::~Bus()>
c00227c5:	83 c4 10             	add    esp,0x10
c00227c8:	90                   	nop
c00227c9:	83 c4 0c             	add    esp,0xc
c00227cc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00227ce <PCI::~PCI()>:
c00227ce:	83 ec 0c             	sub    esp,0xc
c00227d1:	83 ec 0c             	sub    esp,0xc
c00227d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227d8:	e8 cd ff ff ff       	call   c00227aa <PCI::~PCI()>
c00227dd:	83 c4 10             	add    esp,0x10
c00227e0:	83 ec 08             	sub    esp,0x8
c00227e3:	68 5c 01 00 00       	push   0x15c
c00227e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227ec:	e8 f8 ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00227f1:	83 c4 10             	add    esp,0x10
c00227f4:	83 c4 0c             	add    esp,0xc
c00227f7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00227f8 <IDE::~IDE()>:
c00227f8:	83 ec 0c             	sub    esp,0xc
c00227fb:	ba 4c 65 02 c0       	mov    edx,0xc002654c
c0022800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022804:	89 10                	mov    DWORD PTR [eax],edx
c0022806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002280a:	83 ec 0c             	sub    esp,0xc
c002280d:	50                   	push   eax
c002280e:	e8 d1 75 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022813:	83 c4 10             	add    esp,0x10
c0022816:	90                   	nop
c0022817:	83 c4 0c             	add    esp,0xc
c002281a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002281c <IDE::~IDE()>:
c002281c:	83 ec 0c             	sub    esp,0xc
c002281f:	83 ec 0c             	sub    esp,0xc
c0022822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022826:	e8 cd ff ff ff       	call   c00227f8 <IDE::~IDE()>
c002282b:	83 c4 10             	add    esp,0x10
c002282e:	83 ec 08             	sub    esp,0x8
c0022831:	68 70 02 00 00       	push   0x270
c0022836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002283a:	e8 aa ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002283f:	83 c4 10             	add    esp,0x10
c0022842:	83 c4 0c             	add    esp,0xc
c0022845:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022846 <SATABus::~SATABus()>:
c0022846:	83 ec 0c             	sub    esp,0xc
c0022849:	ba 9c 65 02 c0       	mov    edx,0xc002659c
c002284e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022852:	89 10                	mov    DWORD PTR [eax],edx
c0022854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022858:	83 ec 0c             	sub    esp,0xc
c002285b:	50                   	push   eax
c002285c:	e8 83 75 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022861:	83 c4 10             	add    esp,0x10
c0022864:	90                   	nop
c0022865:	83 c4 0c             	add    esp,0xc
c0022868:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002286a <SATABus::~SATABus()>:
c002286a:	83 ec 0c             	sub    esp,0xc
c002286d:	83 ec 0c             	sub    esp,0xc
c0022870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022874:	e8 cd ff ff ff       	call   c0022846 <SATABus::~SATABus()>
c0022879:	83 c4 10             	add    esp,0x10
c002287c:	83 ec 08             	sub    esp,0x8
c002287f:	68 64 01 00 00       	push   0x164
c0022884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022888:	e8 5c ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002288d:	83 c4 10             	add    esp,0x10
c0022890:	83 c4 0c             	add    esp,0xc
c0022893:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022894 <ATA::~ATA()>:
c0022894:	83 ec 0c             	sub    esp,0xc
c0022897:	ba 84 66 02 c0       	mov    edx,0xc0026684
c002289c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a0:	89 10                	mov    DWORD PTR [eax],edx
c00228a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a6:	83 ec 0c             	sub    esp,0xc
c00228a9:	50                   	push   eax
c00228aa:	e8 17 76 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	90                   	nop
c00228b3:	83 c4 0c             	add    esp,0xc
c00228b6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00228b8 <ATA::~ATA()>:
c00228b8:	83 ec 0c             	sub    esp,0xc
c00228bb:	83 ec 0c             	sub    esp,0xc
c00228be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228c2:	e8 cd ff ff ff       	call   c0022894 <ATA::~ATA()>
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	83 ec 08             	sub    esp,0x8
c00228cd:	68 8c 01 00 00       	push   0x18c
c00228d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d6:	e8 0e ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00228db:	83 c4 10             	add    esp,0x10
c00228de:	83 c4 0c             	add    esp,0xc
c00228e1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00228e2 <ATAPI::~ATAPI()>:
c00228e2:	83 ec 0c             	sub    esp,0xc
c00228e5:	ba cc 66 02 c0       	mov    edx,0xc00266cc
c00228ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ee:	89 10                	mov    DWORD PTR [eax],edx
c00228f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f4:	83 ec 0c             	sub    esp,0xc
c00228f7:	50                   	push   eax
c00228f8:	e8 c9 75 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00228fd:	83 c4 10             	add    esp,0x10
c0022900:	90                   	nop
c0022901:	83 c4 0c             	add    esp,0xc
c0022904:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022906 <ATAPI::~ATAPI()>:
c0022906:	83 ec 0c             	sub    esp,0xc
c0022909:	83 ec 0c             	sub    esp,0xc
c002290c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022910:	e8 cd ff ff ff       	call   c00228e2 <ATAPI::~ATAPI()>
c0022915:	83 c4 10             	add    esp,0x10
c0022918:	83 ec 08             	sub    esp,0x8
c002291b:	68 84 01 00 00       	push   0x184
c0022920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022924:	e8 c0 aa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022929:	83 c4 10             	add    esp,0x10
c002292c:	83 c4 0c             	add    esp,0xc
c002292f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022930 <SATA::~SATA()>:
c0022930:	83 ec 0c             	sub    esp,0xc
c0022933:	ba 8c 67 02 c0       	mov    edx,0xc002678c
c0022938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293c:	89 10                	mov    DWORD PTR [eax],edx
c002293e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022942:	83 ec 0c             	sub    esp,0xc
c0022945:	50                   	push   eax
c0022946:	e8 7b 75 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002294b:	83 c4 10             	add    esp,0x10
c002294e:	90                   	nop
c002294f:	83 c4 0c             	add    esp,0xc
c0022952:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022954 <SATA::~SATA()>:
c0022954:	83 ec 0c             	sub    esp,0xc
c0022957:	83 ec 0c             	sub    esp,0xc
c002295a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002295e:	e8 cd ff ff ff       	call   c0022930 <SATA::~SATA()>
c0022963:	83 c4 10             	add    esp,0x10
c0022966:	83 ec 08             	sub    esp,0x8
c0022969:	68 7c 01 00 00       	push   0x17c
c002296e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022972:	e8 72 aa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022977:	83 c4 10             	add    esp,0x10
c002297a:	83 c4 0c             	add    esp,0xc
c002297d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002297e <SATAPI::~SATAPI()>:
c002297e:	83 ec 0c             	sub    esp,0xc
c0022981:	ba b0 68 02 c0       	mov    edx,0xc00268b0
c0022986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298a:	89 10                	mov    DWORD PTR [eax],edx
c002298c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022990:	83 ec 0c             	sub    esp,0xc
c0022993:	50                   	push   eax
c0022994:	e8 2d 75 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022999:	83 c4 10             	add    esp,0x10
c002299c:	90                   	nop
c002299d:	83 c4 0c             	add    esp,0xc
c00229a0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00229a2 <SATAPI::~SATAPI()>:
c00229a2:	83 ec 0c             	sub    esp,0xc
c00229a5:	83 ec 0c             	sub    esp,0xc
c00229a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229ac:	e8 cd ff ff ff       	call   c002297e <SATAPI::~SATAPI()>
c00229b1:	83 c4 10             	add    esp,0x10
c00229b4:	83 ec 08             	sub    esp,0x8
c00229b7:	68 84 01 00 00       	push   0x184
c00229bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229c0:	e8 24 aa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00229c5:	83 c4 10             	add    esp,0x10
c00229c8:	83 c4 0c             	add    esp,0xc
c00229cb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00229cc <APICTimer::~APICTimer()>:
c00229cc:	83 ec 0c             	sub    esp,0xc
c00229cf:	ba 04 69 02 c0       	mov    edx,0xc0026904
c00229d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d8:	89 10                	mov    DWORD PTR [eax],edx
c00229da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229de:	83 ec 0c             	sub    esp,0xc
c00229e1:	50                   	push   eax
c00229e2:	e8 ad 86 fe ff       	call   c000b094 <Timer::~Timer()>
c00229e7:	83 c4 10             	add    esp,0x10
c00229ea:	90                   	nop
c00229eb:	83 c4 0c             	add    esp,0xc
c00229ee:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00229f0 <APICTimer::~APICTimer()>:
c00229f0:	83 ec 0c             	sub    esp,0xc
c00229f3:	83 ec 0c             	sub    esp,0xc
c00229f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229fa:	e8 cd ff ff ff       	call   c00229cc <APICTimer::~APICTimer()>
c00229ff:	83 c4 10             	add    esp,0x10
c0022a02:	83 ec 08             	sub    esp,0x8
c0022a05:	68 60 01 00 00       	push   0x160
c0022a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a0e:	e8 d6 a9 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022a13:	83 c4 10             	add    esp,0x10
c0022a16:	83 c4 0c             	add    esp,0xc
c0022a19:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022a1c <PIT::~PIT()>:
c0022a1c:	83 ec 0c             	sub    esp,0xc
c0022a1f:	ba 54 69 02 c0       	mov    edx,0xc0026954
c0022a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a28:	89 10                	mov    DWORD PTR [eax],edx
c0022a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2e:	83 ec 0c             	sub    esp,0xc
c0022a31:	50                   	push   eax
c0022a32:	e8 5d 86 fe ff       	call   c000b094 <Timer::~Timer()>
c0022a37:	83 c4 10             	add    esp,0x10
c0022a3a:	90                   	nop
c0022a3b:	83 c4 0c             	add    esp,0xc
c0022a3e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022a40 <PIT::~PIT()>:
c0022a40:	83 ec 0c             	sub    esp,0xc
c0022a43:	83 ec 0c             	sub    esp,0xc
c0022a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a4a:	e8 cd ff ff ff       	call   c0022a1c <PIT::~PIT()>
c0022a4f:	83 c4 10             	add    esp,0x10
c0022a52:	83 ec 08             	sub    esp,0x8
c0022a55:	68 5c 01 00 00       	push   0x15c
c0022a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a5e:	e8 86 a9 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022a63:	83 c4 10             	add    esp,0x10
c0022a66:	83 c4 0c             	add    esp,0xc
c0022a69:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be 7b 47 02 c0       	mov    esi,0xc002477b
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be 97 47 02 c0       	mov    esi,0xc0024797
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
