
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 cf 03 01 00       	call   c00103ef <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0000025:	3d c0 d8 02 c0       	cmp    eax,0xc002d8c0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c0 d8 02 c0       	push   0xc002d8c0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0000051:	2d c0 d8 02 c0       	sub    eax,0xc002d8c0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c0 d8 02 c0       	push   0xc002d8c0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 34 82 02 c0       	mov    ebx,0xc0028234
c0000097:	81 eb 30 82 02 c0    	sub    ebx,0xc0028230
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 30 82 02 c0       	mov    esi,0xc0028230
c00000a6:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 f0 02 c0       	mov    ds:0xc002f0c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c0 d8 02 c0       	push   0xc002d8c0
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 f0 02 c0       	push   0xc002f0c8
c0000108:	68 c0 d8 02 c0       	push   0xc002d8c0
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 5b 65 01 00       	call   c0016808 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 b5 49 01 00       	call   c0014c7a <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 39 65 01 00       	call   c0016808 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 9a 6a 01 00       	call   c0016d88 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 15 70 01 00       	call   c001730c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 31 03 c0 	lgdtd  ds:0xc0033118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 8e f4 00 00       	jmp    c000f80d <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 82 02 c0 02 	test   BYTE PTR [edx-0x3ffd7dc0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 82 02 c0 01 	test   BYTE PTR [edx-0x3ffd7dc0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 82 02 c0 08 	test   BYTE PTR [edx-0x3ffd7dc0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 82 02 c0 04 	test   BYTE PTR [ecx-0x3ffd7dc0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 82 02 c0 01 	test   BYTE PTR [edx-0x3ffd7dc0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 f1 02 c0    	mov    DWORD PTR ds:0xc002f100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 f1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 f1 02 c0    	mov    DWORD PTR ds:0xc002f100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f13c
c0000df7:	c7 42 0c 34 f1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002f134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 f1 02 c0 02 	test   BYTE PTR ds:0xc002f100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 f4 02 c0    	dec    DWORD PTR ds:0xc002f450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 f4 02 c0    	sub    DWORD PTR ds:0xc002f464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 d9 f1 00 00       	call   c0010039 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 e6 f0 00 00       	call   c000ffdb <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 c5 ef 00 00       	call   c000ffa5 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 c0 ef 00 00       	call   c000ffdb <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 6c ee 00 00       	call   c000ffa5 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 52 ee 00 00       	call   c000ffa5 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 28 ee 00 00       	call   c000ffa5 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 f1 02 c0    	mov    edi,DWORD PTR ds:0xc002f100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 f1 02 c0 	lea    edx,[eax*8-0x3ffd0ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f140
c00012e5:	81 fb 34 f1 02 c0    	cmp    ebx,0xc002f134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 f1 02 c0       	cmp    eax,0xc002f134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 f1 02 c0    	cmp    DWORD PTR ds:0xc002f130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c0001321:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0001326:	a3 30 f1 02 c0       	mov    ds:0xc002f130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f134
c0001334:	c7 40 0c 34 f1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002f134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 f0 02 c0 	lea    ebp,[edx*4-0x3ffd0f08]
c0001385:	8b 14 95 00 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 f1 02 c0 	lea    ecx,[edx*4-0x3ffd0f00]
c00013a0:	8b 14 95 00 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 f4 02 c0 	or     DWORD PTR [edi*4-0x3ffd0bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 f1 02 c0 	lea    eax,[eax*8-0x3ffd0ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,ecx
c000145a:	89 0d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,ecx
c0001460:	c7 41 08 34 f1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002f134
c0001467:	c7 41 0c 34 f1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002f134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c f1 02 c0 	lea    edx,[ecx*8-0x3ffd0ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c f1 02 c0 	lea    edx,[eax*4-0x3ffd0ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 f4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edi
c000152d:	89 3d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,edi
c0001533:	c7 47 08 34 f1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002f134
c000153a:	c7 47 0c 34 f1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002f134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 f1 02 c0    	mov    DWORD PTR ds:0xc002f130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 f1 02 c0       	mov    edx,0xc002f100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 f4 02 c0    	mov    DWORD PTR ds:0xc002f454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c f4 02 c0    	push   DWORD PTR ds:0xc002f45c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c f4 02 c0       	mov    eax,ds:0xc002f45c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f12c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 f1 02 c0       	mov    eax,0xc002f134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c f4 02 c0       	cmp    eax,0xc002f42c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 f4 02 c0       	mov    eax,ds:0xc002f468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 44 83 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7cbc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 f1 02 c0       	mov    eax,ds:0xc002f100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 f1 02 c0       	mov    ds:0xc002f100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 f4 02 c0    	mov    DWORD PTR ds:0xc002f448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c f4 02 c0    	mov    DWORD PTR ds:0xc002f44c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 f4 02 c0    	mov    DWORD PTR ds:0xc002f454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 25 b8 01 00       	jmp    c001d7b0 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 4f b8 01 00       	jmp    c001d7f0 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 70 b8 01 00       	jmp    c001d830 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 a0 84 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd7b60]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 a0 84 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7b60]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 5c 83 02 c0       	mov    edx,0xc002835c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 f4 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 f4 02 c0    	mov    ax,ds:0xc002f480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 f4 02 c0    	mov    ds:0xc002f480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 62 83 02 c0       	mov    eax,0xc0028362
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 20 84 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd7be0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 6b 83 02 c0       	mov    eax,0xc002836b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 a0 84 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7b60]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 f4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb e0 83 02 c0       	mov    ebx,0xc00283e0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 72 83 02 c0       	mov    edx,0xc0028372
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 7e 83 02 c0       	mov    edx,0xc002837e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 92 83 02 c0       	mov    edx,0xc0028392
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 a4 a2 00 00       	call   c00100bb <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 9c a2 00 00       	call   c00100cb <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c c0 87 02 c0 	mov    DWORD PTR [esp+0xc],0xc00287c0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 c0 87 02 c0 	mov    DWORD PTR [esp+0x10],0xc00287c0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 c0 85 02 c0       	mov    eax,0xc00285c0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 00 85 02 c0       	mov    eax,0xc0028500
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 c0 88 02 c0       	push   0xc00288c0
c0006303:	e8 44 7e 01 00       	call   c001e14c <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ce 88 02 c0       	push   0xc00288ce
c000633b:	e8 0c 7e 01 00       	call   c001e14c <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 f5 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd0a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 f0 02 c0 	movsx  eax,BYTE PTR ds:0xc002f060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 75 7d 01 00       	call   c001e0f0 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 f0 02 c0       	mov    eax,0xc002f080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 f0 02 c0       	mov    eax,0xc002f020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 fe 02 c0    	mov    ebp,DWORD PTR ds:0xc002feb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 dd 88 02 c0       	push   0xc00288dd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 fe 02 c0       	mov    ecx,0xc002fe80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 f5 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd0ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 f5 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd0ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0abc],esi
c0006746:	89 87 40 f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0ac0],eax
c000674c:	c7 87 48 f5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd0ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 f5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd0a30],0x0
c0006768:	89 87 4c f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 f5 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd0ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 f5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd0ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 f5 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd0a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 f5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd0ab8]
c00067e1:	8b 8d 4c f5 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd0ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 f5 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd0ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 f0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 f5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd0ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 f5 02 c0    	add    DWORD PTR [ebp-0x3ffd0ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 f5 02 c0    	lea    ecx,[ebp-0x3ffd0ac0]
c00068d9:	83 bd 40 f5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd0ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c f5 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd0ab4]
c0006917:	05 40 f5 02 c0       	add    eax,0xc002f540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 f5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd0ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 f5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd0ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 f5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd0a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 f5 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd0ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 f5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd0ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 f5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd0a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c f5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd0ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 f5 02 c0    	lea    edi,[eax-0x3ffd0ac0]
c00069d6:	83 b8 40 f5 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd0ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 e0 88 02 c0       	push   0xc00288e0
c00069fa:	e8 4d 77 01 00       	call   c001e14c <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 61 77 01 00       	call   c001e168 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 e5 88 02 c0 	mov    DWORD PTR [esp],0xc00288e5
c0006a14:	e8 33 77 01 00       	call   c001e14c <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0ac0]
c0006a20:	e8 43 77 01 00       	call   c001e168 <iso_kprintfd>
c0006a25:	c7 04 24 eb 88 02 c0 	mov    DWORD PTR [esp],0xc00288eb
c0006a2c:	e8 1b 77 01 00       	call   c001e14c <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0abc]
c0006a38:	e8 2b 77 01 00       	call   c001e168 <iso_kprintfd>
c0006a3d:	c7 04 24 f1 88 02 c0 	mov    DWORD PTR [esp],0xc00288f1
c0006a44:	e8 03 77 01 00       	call   c001e14c <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0a30]
c0006a50:	e8 13 77 01 00       	call   c001e168 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 f0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 f5 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd0ab8]
c0006ab6:	81 c2 40 f5 02 c0    	add    edx,0xc002f540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 f0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 f5 02 c0    	lea    ebp,[eax-0x3ffd0aa8]
c0006b12:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 f5 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd0aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 dd 88 02 c0       	push   0xc00288dd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 f5 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd0aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 f5 02 c0    	mov    DWORD PTR [ebx-0x3ffd0ab0],eax
c0006bee:	89 93 54 f5 02 c0    	mov    DWORD PTR [ebx-0x3ffd0aac],edx
c0006bf4:	81 c3 40 f5 02 c0    	add    ebx,0xc002f540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 f5 02 c0       	add    eax,0xc002f550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 fa 88 02 c0       	push   0xc00288fa
c0006c19:	e8 2e 75 01 00       	call   c001e14c <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 f0 02 c0       	mov    ds:0xc002f060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002feb4,0x0
c0006c4e:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 05 89 02 c0       	push   0xc0028905
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 f0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd0f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 fe 02 c0       	mov    ds:0xc002feb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 f0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd0f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 0c 89 02 c0       	push   0xc002890c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 f0 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd0f80]
c0006cec:	bf 80 fe 02 c0       	mov    edi,0xc002fe80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 fe 02 c0       	mov    eax,0xc002fe82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 fe 02 c0       	mov    ds:0xc002fea8,eax
c0006d0f:	b8 8a fe 02 c0       	mov    eax,0xc002fe8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 fe 02 c0       	mov    ds:0xc002fea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 13 89 02 c0       	push   0xc0028913
c0006d30:	e8 17 74 01 00       	call   c001e14c <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 1e 89 02 c0       	push   0xc002891e
c0006d4b:	e8 fc 73 01 00       	call   c001e14c <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 f5 02 c0       	push   0xc002f540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 f5 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc002f540,0xffffffff
c0006d75:	e8 41 93 00 00       	call   c00100bb <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 fe 02 c0       	mov    ds:0xc002feb0,eax
c0006d86:	e8 30 93 00 00       	call   c00100bb <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 f5 02 c0       	mov    ds:0xc002f520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 1b 93 00 00       	call   c00100bb <malloc>
c0006da0:	89 04 9d 80 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 02 93 00 00       	call   c00100bb <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 f0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd0f80]
c0006de6:	e8 e0 92 00 00       	call   c00100cb <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 f0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd0fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 d2 92 00 00       	call   c00100cb <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 fe 02 c0       	mov    eax,ds:0xc002feb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 b8 92 00 00       	call   c00100cb <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 a3 92 00 00       	call   c00100cb <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f520,0x0
c0006e35:	c7 05 b0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002feb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 30 89 02 c0       	mov    esi,0xc0028930
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 2f 89 02 c0       	mov    al,ds:0xc002892f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 db 6b 00 00       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 37 6b 00 00       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 78 89 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7688]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 40 89 02 c0       	push   0xc0028940
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 c8 8a 02 c0       	push   0xc0028ac8
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 dc 8a 02 c0       	push   0xc0028adc
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 e6 8a 02 c0       	push   0xc0028ae6
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 f0 8a 02 c0       	push   0xc0028af0
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 34 8c 02 c0       	push   0xc0028c34
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 fa 8a 02 c0       	push   0xc0028afa
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 54 8c 02 c0       	push   0xc0028c54
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 0f 8b 02 c0       	push   0xc0028b0f
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 29 8b 02 c0       	push   0xc0028b29
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 e0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3220]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 7c 8c 02 c0       	push   0xc0028c7c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 34 8c 02 c0       	push   0xc0028c34
c000722c:	e8 df 92 00 00       	call   c0010510 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 c4 8c 02 c0       	push   0xc0028cc4
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 c4 8c 02 c0       	push   0xc0028cc4
c000725b:	e8 b0 92 00 00       	call   c0010510 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 34 8b 02 c0       	push   0xc0028b34
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 34 8b 02 c0       	push   0xc0028b34
c0007287:	e8 84 92 00 00       	call   c0010510 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 51 8b 02 c0       	push   0xc0028b51
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 51 8b 02 c0       	push   0xc0028b51
c00072b3:	e8 58 92 00 00       	call   c0010510 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 e4 8c 02 c0       	push   0xc0028ce4
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 e4 8c 02 c0       	push   0xc0028ce4
c00072df:	e8 2c 92 00 00       	call   c0010510 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 08 8d 02 c0       	push   0xc0028d08
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 08 8d 02 c0       	push   0xc0028d08
c000730b:	e8 00 92 00 00       	call   c0010510 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 6d 8b 02 c0       	push   0xc0028b6d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 6d 8b 02 c0       	push   0xc0028b6d
c0007337:	e8 d4 91 00 00       	call   c0010510 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 89 8b 02 c0       	push   0xc0028b89
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 89 8b 02 c0       	push   0xc0028b89
c0007363:	e8 a8 91 00 00       	call   c0010510 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 28 8d 02 c0       	push   0xc0028d28
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 28 8d 02 c0       	push   0xc0028d28
c000738f:	e8 7c 91 00 00       	call   c0010510 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 4c 8d 02 c0       	push   0xc0028d4c
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 4c 8d 02 c0       	push   0xc0028d4c
c00073bb:	e8 50 91 00 00       	call   c0010510 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <Hardware::registerIRQ(int)>:
c00073c8:	53                   	push   ebx
c00073c9:	31 c9                	xor    ecx,ecx
c00073cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073cf:	0f b6 42 50          	movzx  eax,BYTE PTR [edx+0x50]
c00073d3:	89 c3                	mov    ebx,eax
c00073d5:	8d 76 00             	lea    esi,[esi+0x0]
c00073d8:	0f a3 c8             	bt     eax,ecx
c00073db:	72 17                	jb     c00073f4 <Hardware::registerIRQ(int)+0x2c>
c00073dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073e1:	89 44 8a 40          	mov    DWORD PTR [edx+ecx*4+0x40],eax
c00073e5:	b8 01 00 00 00       	mov    eax,0x1
c00073ea:	d3 e0                	shl    eax,cl
c00073ec:	09 d8                	or     eax,ebx
c00073ee:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c00073f1:	eb 09                	jmp    c00073fc <Hardware::registerIRQ(int)+0x34>
c00073f3:	90                   	nop
c00073f4:	41                   	inc    ecx
c00073f5:	83 f9 04             	cmp    ecx,0x4
c00073f8:	75 de                	jne    c00073d8 <Hardware::registerIRQ(int)+0x10>
c00073fa:	66 90                	xchg   ax,ax
c00073fc:	5b                   	pop    ebx
c00073fd:	c3                   	ret    

c00073fe <Hardware::deregisterIRQ(int)>:
c00073fe:	56                   	push   esi
c00073ff:	31 c9                	xor    ecx,ecx
c0007401:	53                   	push   ebx
c0007402:	bb 01 00 00 00       	mov    ebx,0x1
c0007407:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000740b:	90                   	nop
c000740c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007410:	39 44 8a 40          	cmp    DWORD PTR [edx+ecx*4+0x40],eax
c0007414:	75 0e                	jne    c0007424 <Hardware::deregisterIRQ(int)+0x26>
c0007416:	8b 72 50             	mov    esi,DWORD PTR [edx+0x50]
c0007419:	89 d8                	mov    eax,ebx
c000741b:	d3 e0                	shl    eax,cl
c000741d:	f7 d0                	not    eax
c000741f:	21 f0                	and    eax,esi
c0007421:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c0007424:	41                   	inc    ecx
c0007425:	83 f9 04             	cmp    ecx,0x4
c0007428:	75 e2                	jne    c000740c <Hardware::deregisterIRQ(int)+0xe>
c000742a:	5b                   	pop    ebx
c000742b:	5e                   	pop    esi
c000742c:	c3                   	ret    
c000742d:	90                   	nop

c000742e <Hardware::getHumanReadableName()>:
c000742e:	83 ec 18             	sub    esp,0x18
c0007431:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007435:	8b 10                	mov    edx,DWORD PTR [eax]
c0007437:	50                   	push   eax
c0007438:	ff 12                	call   DWORD PTR [edx]
c000743a:	83 c4 10             	add    esp,0x10
c000743d:	85 c0                	test   eax,eax
c000743f:	74 0f                	je     c0007450 <Hardware::getHumanReadableName()+0x22>
c0007441:	8b 10                	mov    edx,DWORD PTR [eax]
c0007443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007447:	8b 02                	mov    eax,DWORD PTR [edx]
c0007449:	83 c4 0c             	add    esp,0xc
c000744c:	ff e0                	jmp    eax
c000744e:	66 90                	xchg   ax,ax
c0007450:	b8 6b 8d 02 c0       	mov    eax,0xc0028d6b
c0007455:	83 c4 0c             	add    esp,0xc
c0007458:	c3                   	ret    
c0007459:	90                   	nop
c000745a:	66 90                	xchg   ax,ax

c000745c <Hardware::~Hardware()>:
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	ba 98 8e 02 c0       	mov    edx,0xc0028e98
c0007464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007468:	89 10                	mov    DWORD PTR [eax],edx
c000746a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746e:	83 c0 2c             	add    eax,0x2c
c0007471:	83 ec 0c             	sub    esp,0xc
c0007474:	50                   	push   eax
c0007475:	e8 a6 f5 01 00       	call   c0026a20 <std::vector<DevicePortRange>::~vector()>
c000747a:	83 c4 10             	add    esp,0x10
c000747d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007481:	83 c0 18             	add    eax,0x18
c0007484:	83 ec 0c             	sub    esp,0xc
c0007487:	50                   	push   eax
c0007488:	e8 5f f5 01 00       	call   c00269ec <std::vector<DeviceMemoryRange>::~vector()>
c000748d:	83 c4 10             	add    esp,0x10
c0007490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007494:	83 c0 04             	add    eax,0x4
c0007497:	83 ec 0c             	sub    esp,0xc
c000749a:	50                   	push   eax
c000749b:	e8 18 f5 01 00       	call   c00269b8 <std::vector<Hardware*>::~vector()>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	90                   	nop
c00074a4:	83 c4 0c             	add    esp,0xc
c00074a7:	c3                   	ret    

c00074a8 <Hardware::~Hardware()>:
c00074a8:	83 ec 0c             	sub    esp,0xc
c00074ab:	83 ec 0c             	sub    esp,0xc
c00074ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074b2:	e8 a5 ff ff ff       	call   c000745c <Hardware::~Hardware()>
c00074b7:	83 c4 10             	add    esp,0x10
c00074ba:	83 ec 08             	sub    esp,0x8
c00074bd:	6a 54                	push   0x54
c00074bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074c3:	e8 00 67 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00074c8:	83 c4 10             	add    esp,0x10
c00074cb:	83 c4 0c             	add    esp,0xc
c00074ce:	c3                   	ret    
c00074cf:	90                   	nop

c00074d0 <Hardware::Hardware()>:
c00074d0:	83 ec 0c             	sub    esp,0xc
c00074d3:	ba 98 8e 02 c0       	mov    edx,0xc0028e98
c00074d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074dc:	89 10                	mov    DWORD PTR [eax],edx
c00074de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e2:	83 c0 04             	add    eax,0x4
c00074e5:	83 ec 0c             	sub    esp,0xc
c00074e8:	50                   	push   eax
c00074e9:	e8 b2 f5 01 00       	call   c0026aa0 <std::vector<Hardware*>::vector()>
c00074ee:	83 c4 10             	add    esp,0x10
c00074f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f5:	83 c0 18             	add    eax,0x18
c00074f8:	83 ec 0c             	sub    esp,0xc
c00074fb:	50                   	push   eax
c00074fc:	e8 1b f6 01 00       	call   c0026b1c <std::vector<DeviceMemoryRange>::vector()>
c0007501:	83 c4 10             	add    esp,0x10
c0007504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007508:	83 c0 2c             	add    eax,0x2c
c000750b:	83 ec 0c             	sub    esp,0xc
c000750e:	50                   	push   eax
c000750f:	e8 84 f6 01 00       	call   c0026b98 <std::vector<DevicePortRange>::vector()>
c0007514:	83 c4 10             	add    esp,0x10
c0007517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751b:	c6 40 50 00          	mov    BYTE PTR [eax+0x50],0x0
c000751f:	90                   	nop
c0007520:	83 c4 0c             	add    esp,0xc
c0007523:	c3                   	ret    

c0007524 <KeSetupDeviceTree()>:
c0007524:	53                   	push   ebx
c0007525:	83 ec 14             	sub    esp,0x14
c0007528:	6a 58                	push   0x58
c000752a:	e8 8c 8b 00 00       	call   c00100bb <malloc>
c000752f:	89 c3                	mov    ebx,eax
c0007531:	89 04 24             	mov    DWORD PTR [esp],eax
c0007534:	e8 db f6 01 00       	call   c0026c14 <RootHardware::RootHardware()>
c0007539:	89 1d b8 fe 02 c0    	mov    DWORD PTR ds:0xc002feb8,ebx
c000753f:	83 c4 18             	add    esp,0x18
c0007542:	5b                   	pop    ebx
c0007543:	c3                   	ret    

c0007544 <Hardware::printRecursively(int)>:
c0007544:	55                   	push   ebp
c0007545:	57                   	push   edi
c0007546:	56                   	push   esi
c0007547:	31 f6                	xor    esi,esi
c0007549:	53                   	push   ebx
c000754a:	83 ec 5c             	sub    esp,0x5c
c000754d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0007551:	8b 6c 24 74          	mov    ebp,DWORD PTR [esp+0x74]
c0007555:	8d 76 00             	lea    esi,[esi+0x0]
c0007558:	39 ee                	cmp    esi,ebp
c000755a:	7d 14                	jge    c0007570 <Hardware::printRecursively(int)+0x2c>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	46                   	inc    esi
c0007560:	68 9a b2 02 c0       	push   0xc002b29a
c0007565:	e8 12 fa ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000756a:	83 c4 10             	add    esp,0x10
c000756d:	eb e9                	jmp    c0007558 <Hardware::printRecursively(int)+0x14>
c000756f:	90                   	nop
c0007570:	8d 7c 24 14          	lea    edi,[esp+0x14]
c0007574:	be 20 8e 02 c0       	mov    esi,0xc0028e20
c0007579:	b9 0f 00 00 00       	mov    ecx,0xf
c000757e:	fc                   	cld    
c000757f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0007581:	83 ec 0c             	sub    esp,0xc
c0007584:	53                   	push   ebx
c0007585:	e8 a4 fe ff ff       	call   c000742e <Hardware::getHumanReadableName()>
c000758a:	89 c6                	mov    esi,eax
c000758c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000758e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007591:	83 c3 04             	add    ebx,0x4
c0007594:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007597:	83 c4 0c             	add    esp,0xc
c000759a:	6b c0 0c             	imul   eax,eax,0xc
c000759d:	56                   	push   esi
c000759e:	8d 44 04 1c          	lea    eax,[esp+eax*1+0x1c]
c00075a2:	50                   	push   eax
c00075a3:	68 7a 8d 02 c0       	push   0xc0028d7a
c00075a8:	e8 cf f9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00075ad:	8d 74 24 18          	lea    esi,[esp+0x18]
c00075b1:	5f                   	pop    edi
c00075b2:	58                   	pop    eax
c00075b3:	53                   	push   ebx
c00075b4:	56                   	push   esi
c00075b5:	e8 f2 f6 01 00       	call   c0026cac <std::vector<Hardware*>::begin()>
c00075ba:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	53                   	push   ebx
c00075c2:	57                   	push   edi
c00075c3:	e8 08 f7 01 00       	call   c0026cd0 <std::vector<Hardware*>::end()>
c00075c8:	83 c4 1c             	add    esp,0x1c
c00075cb:	90                   	nop
c00075cc:	51                   	push   ecx
c00075cd:	51                   	push   ecx
c00075ce:	57                   	push   edi
c00075cf:	56                   	push   esi
c00075d0:	e8 c7 f3 01 00       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00075d5:	83 c4 10             	add    esp,0x10
c00075d8:	84 c0                	test   al,al
c00075da:	74 30                	je     c000760c <Hardware::printRecursively(int)+0xc8>
c00075dc:	83 ec 0c             	sub    esp,0xc
c00075df:	56                   	push   esi
c00075e0:	e8 cb f3 01 00       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c00075e5:	5a                   	pop    edx
c00075e6:	8d 55 01             	lea    edx,[ebp+0x1]
c00075e9:	59                   	pop    ecx
c00075ea:	52                   	push   edx
c00075eb:	ff 30                	push   DWORD PTR [eax]
c00075ed:	8d 5c 24 20          	lea    ebx,[esp+0x20]
c00075f1:	e8 4e ff ff ff       	call   c0007544 <Hardware::printRecursively(int)>
c00075f6:	58                   	pop    eax
c00075f7:	5a                   	pop    edx
c00075f8:	56                   	push   esi
c00075f9:	53                   	push   ebx
c00075fa:	e8 f5 f6 01 00       	call   c0026cf4 <std::vector<Hardware*>::iterator::operator++()>
c00075ff:	53                   	push   ebx
c0007600:	e8 83 f3 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0007605:	83 c4 10             	add    esp,0x10
c0007608:	eb c2                	jmp    c00075cc <Hardware::printRecursively(int)+0x88>
c000760a:	66 90                	xchg   ax,ax
c000760c:	83 ec 0c             	sub    esp,0xc
c000760f:	57                   	push   edi
c0007610:	e8 73 f3 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0007615:	89 34 24             	mov    DWORD PTR [esp],esi
c0007618:	e8 6b f3 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c000761d:	83 c4 6c             	add    esp,0x6c
c0007620:	5b                   	pop    ebx
c0007621:	5e                   	pop    esi
c0007622:	5f                   	pop    edi
c0007623:	5d                   	pop    ebp
c0007624:	c3                   	ret    

c0007625 <KePrintDeviceTree()>:
c0007625:	83 ec 18             	sub    esp,0x18
c0007628:	68 81 8d 02 c0       	push   0xc0028d81
c000762d:	e8 4a f9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007632:	58                   	pop    eax
c0007633:	5a                   	pop    edx
c0007634:	6a 00                	push   0x0
c0007636:	ff 35 b8 fe 02 c0    	push   DWORD PTR ds:0xc002feb8
c000763c:	e8 03 ff ff ff       	call   c0007544 <Hardware::printRecursively(int)>
c0007641:	c7 04 24 bc 8d 02 c0 	mov    DWORD PTR [esp],0xc0028dbc
c0007648:	e8 2f f9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000764d:	83 c4 1c             	add    esp,0x1c
c0007650:	c3                   	ret    
c0007651:	90                   	nop

c0007652 <Hardware::detectRecursively()>:
c0007652:	57                   	push   edi
c0007653:	56                   	push   esi
c0007654:	53                   	push   ebx
c0007655:	83 ec 1c             	sub    esp,0x1c
c0007658:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000765c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000765e:	53                   	push   ebx
c000765f:	ff 10                	call   DWORD PTR [eax]
c0007661:	83 c4 10             	add    esp,0x10
c0007664:	85 c0                	test   eax,eax
c0007666:	74 0c                	je     c0007674 <Hardware::detectRecursively()+0x22>
c0007668:	83 ec 0c             	sub    esp,0xc
c000766b:	8b 10                	mov    edx,DWORD PTR [eax]
c000766d:	50                   	push   eax
c000766e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007671:	83 c4 10             	add    esp,0x10
c0007674:	8d 74 24 04          	lea    esi,[esp+0x4]
c0007678:	83 c3 04             	add    ebx,0x4
c000767b:	50                   	push   eax
c000767c:	50                   	push   eax
c000767d:	53                   	push   ebx
c000767e:	56                   	push   esi
c000767f:	e8 28 f6 01 00       	call   c0026cac <std::vector<Hardware*>::begin()>
c0007684:	8d 7c 24 14          	lea    edi,[esp+0x14]
c0007688:	83 ec 0c             	sub    esp,0xc
c000768b:	53                   	push   ebx
c000768c:	57                   	push   edi
c000768d:	e8 3e f6 01 00       	call   c0026cd0 <std::vector<Hardware*>::end()>
c0007692:	83 c4 1c             	add    esp,0x1c
c0007695:	8d 76 00             	lea    esi,[esi+0x0]
c0007698:	50                   	push   eax
c0007699:	50                   	push   eax
c000769a:	57                   	push   edi
c000769b:	56                   	push   esi
c000769c:	e8 fb f2 01 00       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00076a1:	83 c4 10             	add    esp,0x10
c00076a4:	84 c0                	test   al,al
c00076a6:	74 2c                	je     c00076d4 <Hardware::detectRecursively()+0x82>
c00076a8:	83 ec 0c             	sub    esp,0xc
c00076ab:	56                   	push   esi
c00076ac:	e8 ff f2 01 00       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c00076b1:	5a                   	pop    edx
c00076b2:	ff 30                	push   DWORD PTR [eax]
c00076b4:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00076b8:	e8 95 ff ff ff       	call   c0007652 <Hardware::detectRecursively()>
c00076bd:	59                   	pop    ecx
c00076be:	58                   	pop    eax
c00076bf:	56                   	push   esi
c00076c0:	53                   	push   ebx
c00076c1:	e8 2e f6 01 00       	call   c0026cf4 <std::vector<Hardware*>::iterator::operator++()>
c00076c6:	53                   	push   ebx
c00076c7:	e8 bc f2 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00076cc:	83 c4 10             	add    esp,0x10
c00076cf:	eb c7                	jmp    c0007698 <Hardware::detectRecursively()+0x46>
c00076d1:	8d 76 00             	lea    esi,[esi+0x0]
c00076d4:	83 ec 0c             	sub    esp,0xc
c00076d7:	57                   	push   edi
c00076d8:	e8 ab f2 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00076dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00076e0:	e8 a3 f2 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00076e5:	83 c4 20             	add    esp,0x20
c00076e8:	5b                   	pop    ebx
c00076e9:	5e                   	pop    esi
c00076ea:	5f                   	pop    edi
c00076eb:	c3                   	ret    

c00076ec <Hardware::deinitialiseRecursively()>:
c00076ec:	55                   	push   ebp
c00076ed:	57                   	push   edi
c00076ee:	56                   	push   esi
c00076ef:	53                   	push   ebx
c00076f0:	83 ec 1c             	sub    esp,0x1c
c00076f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00076f7:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00076fb:	8d 6e 04             	lea    ebp,[esi+0x4]
c00076fe:	50                   	push   eax
c00076ff:	50                   	push   eax
c0007700:	55                   	push   ebp
c0007701:	53                   	push   ebx
c0007702:	e8 a5 f5 01 00       	call   c0026cac <std::vector<Hardware*>::begin()>
c0007707:	8d 7c 24 14          	lea    edi,[esp+0x14]
c000770b:	83 ec 0c             	sub    esp,0xc
c000770e:	55                   	push   ebp
c000770f:	57                   	push   edi
c0007710:	e8 bb f5 01 00       	call   c0026cd0 <std::vector<Hardware*>::end()>
c0007715:	83 c4 1c             	add    esp,0x1c
c0007718:	50                   	push   eax
c0007719:	50                   	push   eax
c000771a:	57                   	push   edi
c000771b:	53                   	push   ebx
c000771c:	e8 7b f2 01 00       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007721:	83 c4 10             	add    esp,0x10
c0007724:	84 c0                	test   al,al
c0007726:	74 2c                	je     c0007754 <Hardware::deinitialiseRecursively()+0x68>
c0007728:	83 ec 0c             	sub    esp,0xc
c000772b:	53                   	push   ebx
c000772c:	e8 7f f2 01 00       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c0007731:	5a                   	pop    edx
c0007732:	ff 30                	push   DWORD PTR [eax]
c0007734:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007738:	e8 af ff ff ff       	call   c00076ec <Hardware::deinitialiseRecursively()>
c000773d:	59                   	pop    ecx
c000773e:	58                   	pop    eax
c000773f:	53                   	push   ebx
c0007740:	55                   	push   ebp
c0007741:	e8 ae f5 01 00       	call   c0026cf4 <std::vector<Hardware*>::iterator::operator++()>
c0007746:	55                   	push   ebp
c0007747:	e8 3c f2 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c000774c:	83 c4 10             	add    esp,0x10
c000774f:	eb c7                	jmp    c0007718 <Hardware::deinitialiseRecursively()+0x2c>
c0007751:	8d 76 00             	lea    esi,[esi+0x0]
c0007754:	83 ec 0c             	sub    esp,0xc
c0007757:	57                   	push   edi
c0007758:	e8 2b f2 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c000775d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007760:	e8 23 f2 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0007765:	8b 06                	mov    eax,DWORD PTR [esi]
c0007767:	89 34 24             	mov    DWORD PTR [esp],esi
c000776a:	ff 10                	call   DWORD PTR [eax]
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	85 c0                	test   eax,eax
c0007771:	74 0d                	je     c0007780 <Hardware::deinitialiseRecursively()+0x94>
c0007773:	83 ec 0c             	sub    esp,0xc
c0007776:	8b 10                	mov    edx,DWORD PTR [eax]
c0007778:	50                   	push   eax
c0007779:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000777c:	83 c4 10             	add    esp,0x10
c000777f:	90                   	nop
c0007780:	83 c4 1c             	add    esp,0x1c
c0007783:	5b                   	pop    ebx
c0007784:	5e                   	pop    esi
c0007785:	5f                   	pop    edi
c0007786:	5d                   	pop    ebp
c0007787:	c3                   	ret    

c0007788 <Hardware::setPowerStateRecursively(DevicePowerState)>:
c0007788:	55                   	push   ebp
c0007789:	57                   	push   edi
c000778a:	56                   	push   esi
c000778b:	53                   	push   ebx
c000778c:	83 ec 1c             	sub    esp,0x1c
c000778f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0007793:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007797:	8d 7e 04             	lea    edi,[esi+0x4]
c000779a:	55                   	push   ebp
c000779b:	55                   	push   ebp
c000779c:	57                   	push   edi
c000779d:	53                   	push   ebx
c000779e:	e8 09 f5 01 00       	call   c0026cac <std::vector<Hardware*>::begin()>
c00077a3:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00077a7:	83 ec 0c             	sub    esp,0xc
c00077aa:	57                   	push   edi
c00077ab:	55                   	push   ebp
c00077ac:	e8 1f f5 01 00       	call   c0026cd0 <std::vector<Hardware*>::end()>
c00077b1:	83 c4 1c             	add    esp,0x1c
c00077b4:	51                   	push   ecx
c00077b5:	51                   	push   ecx
c00077b6:	55                   	push   ebp
c00077b7:	53                   	push   ebx
c00077b8:	e8 df f1 01 00       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00077bd:	83 c4 10             	add    esp,0x10
c00077c0:	84 c0                	test   al,al
c00077c2:	74 30                	je     c00077f4 <Hardware::setPowerStateRecursively(DevicePowerState)+0x6c>
c00077c4:	83 ec 0c             	sub    esp,0xc
c00077c7:	53                   	push   ebx
c00077c8:	e8 e3 f1 01 00       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c00077cd:	59                   	pop    ecx
c00077ce:	5f                   	pop    edi
c00077cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00077d3:	ff 30                	push   DWORD PTR [eax]
c00077d5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00077d9:	e8 aa ff ff ff       	call   c0007788 <Hardware::setPowerStateRecursively(DevicePowerState)>
c00077de:	58                   	pop    eax
c00077df:	5a                   	pop    edx
c00077e0:	53                   	push   ebx
c00077e1:	57                   	push   edi
c00077e2:	e8 0d f5 01 00       	call   c0026cf4 <std::vector<Hardware*>::iterator::operator++()>
c00077e7:	57                   	push   edi
c00077e8:	e8 9b f1 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00077ed:	83 c4 10             	add    esp,0x10
c00077f0:	eb c2                	jmp    c00077b4 <Hardware::setPowerStateRecursively(DevicePowerState)+0x2c>
c00077f2:	66 90                	xchg   ax,ax
c00077f4:	83 ec 0c             	sub    esp,0xc
c00077f7:	55                   	push   ebp
c00077f8:	e8 8b f1 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00077fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007800:	e8 83 f1 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0007805:	8b 06                	mov    eax,DWORD PTR [esi]
c0007807:	89 34 24             	mov    DWORD PTR [esp],esi
c000780a:	ff 10                	call   DWORD PTR [eax]
c000780c:	83 c4 10             	add    esp,0x10
c000780f:	85 c0                	test   eax,eax
c0007811:	74 11                	je     c0007824 <Hardware::setPowerStateRecursively(DevicePowerState)+0x9c>
c0007813:	52                   	push   edx
c0007814:	52                   	push   edx
c0007815:	8b 10                	mov    edx,DWORD PTR [eax]
c0007817:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000781b:	50                   	push   eax
c000781c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000781f:	83 c4 10             	add    esp,0x10
c0007822:	66 90                	xchg   ax,ax
c0007824:	83 c4 1c             	add    esp,0x1c
c0007827:	5b                   	pop    ebx
c0007828:	5e                   	pop    esi
c0007829:	5f                   	pop    edi
c000782a:	5d                   	pop    ebp
c000782b:	c3                   	ret    

c000782c <Hardware::addChild(Hardware*)>:
c000782c:	83 ec 14             	sub    esp,0x14
c000782f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0007833:	50                   	push   eax
c0007834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007838:	83 c0 04             	add    eax,0x4
c000783b:	50                   	push   eax
c000783c:	e8 b3 f8 01 00       	call   c00270f4 <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007841:	83 c4 1c             	add    esp,0x1c
c0007844:	c3                   	ret    
c0007845:	90                   	nop

c0007846 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>:
c0007846:	55                   	push   ebp
c0007847:	57                   	push   edi
c0007848:	56                   	push   esi
c0007849:	53                   	push   ebx
c000784a:	83 ec 28             	sub    esp,0x28
c000784d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007851:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0007855:	8b 07                	mov    eax,DWORD PTR [edi]
c0007857:	57                   	push   edi
c0007858:	ff 50 04             	call   DWORD PTR [eax+0x4]
c000785b:	83 c4 10             	add    esp,0x10
c000785e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0007862:	75 14                	jne    c0007878 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x32>
c0007864:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0007868:	56                   	push   esi
c0007869:	56                   	push   esi
c000786a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000786e:	50                   	push   eax
c000786f:	55                   	push   ebp
c0007870:	e8 7f f8 01 00       	call   c00270f4 <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	8d 74 24 04          	lea    esi,[esp+0x4]
c000787c:	83 c7 04             	add    edi,0x4
c000787f:	53                   	push   ebx
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	e8 24 f4 01 00       	call   c0026cac <std::vector<Hardware*>::begin()>
c0007888:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c000788c:	83 ec 0c             	sub    esp,0xc
c000788f:	57                   	push   edi
c0007890:	53                   	push   ebx
c0007891:	e8 3a f4 01 00       	call   c0026cd0 <std::vector<Hardware*>::end()>
c0007896:	83 c4 1c             	add    esp,0x1c
c0007899:	8d 76 00             	lea    esi,[esi+0x0]
c000789c:	51                   	push   ecx
c000789d:	51                   	push   ecx
c000789e:	53                   	push   ebx
c000789f:	56                   	push   esi
c00078a0:	e8 f7 f0 01 00       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00078a5:	83 c4 10             	add    esp,0x10
c00078a8:	84 c0                	test   al,al
c00078aa:	74 30                	je     c00078dc <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x96>
c00078ac:	83 ec 0c             	sub    esp,0xc
c00078af:	56                   	push   esi
c00078b0:	e8 fb f0 01 00       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c00078b5:	83 c4 0c             	add    esp,0xc
c00078b8:	55                   	push   ebp
c00078b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078bd:	ff 30                	push   DWORD PTR [eax]
c00078bf:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00078c3:	e8 7e ff ff ff       	call   c0007846 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c00078c8:	58                   	pop    eax
c00078c9:	5a                   	pop    edx
c00078ca:	56                   	push   esi
c00078cb:	57                   	push   edi
c00078cc:	e8 23 f4 01 00       	call   c0026cf4 <std::vector<Hardware*>::iterator::operator++()>
c00078d1:	57                   	push   edi
c00078d2:	e8 b1 f0 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00078d7:	83 c4 10             	add    esp,0x10
c00078da:	eb c0                	jmp    c000789c <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x56>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	53                   	push   ebx
c00078e0:	e8 a3 f0 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00078e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00078e8:	e8 9b f0 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00078ed:	83 c4 2c             	add    esp,0x2c
c00078f0:	5b                   	pop    ebx
c00078f1:	5e                   	pop    esi
c00078f2:	5f                   	pop    edi
c00078f3:	5d                   	pop    ebp
c00078f4:	c3                   	ret    

c00078f5 <KeGetHardwareOfType(HardwareType)>:
c00078f5:	53                   	push   ebx
c00078f6:	83 ec 14             	sub    esp,0x14
c00078f9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078fd:	53                   	push   ebx
c00078fe:	e8 9d f1 01 00       	call   c0026aa0 <std::vector<Hardware*>::vector()>
c0007903:	83 c4 0c             	add    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000790b:	ff 35 b8 fe 02 c0    	push   DWORD PTR ds:0xc002feb8
c0007911:	e8 30 ff ff ff       	call   c0007846 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007916:	89 d8                	mov    eax,ebx
c0007918:	83 c4 18             	add    esp,0x18
c000791b:	5b                   	pop    ebx
c000791c:	c2 04 00             	ret    0x4
c000791f:	90                   	nop

c0007920 <Hardware::removeChild(Hardware*)>:
c0007920:	55                   	push   ebp
c0007921:	57                   	push   edi
c0007922:	56                   	push   esi
c0007923:	53                   	push   ebx
c0007924:	83 ec 2c             	sub    esp,0x2c
c0007927:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000792b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000792f:	8d 58 04             	lea    ebx,[eax+0x4]
c0007932:	50                   	push   eax
c0007933:	50                   	push   eax
c0007934:	53                   	push   ebx
c0007935:	56                   	push   esi
c0007936:	e8 95 f3 01 00       	call   c0026cd0 <std::vector<Hardware*>::end()>
c000793b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000793f:	83 ec 0c             	sub    esp,0xc
c0007942:	53                   	push   ebx
c0007943:	57                   	push   edi
c0007944:	e8 87 f3 01 00       	call   c0026cd0 <std::vector<Hardware*>::end()>
c0007949:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000794d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007950:	55                   	push   ebp
c0007951:	e8 56 f3 01 00       	call   c0026cac <std::vector<Hardware*>::begin()>
c0007956:	8d 44 24 30          	lea    eax,[esp+0x30]
c000795a:	83 c4 1c             	add    esp,0x1c
c000795d:	8d 54 24 44          	lea    edx,[esp+0x44]
c0007961:	52                   	push   edx
c0007962:	57                   	push   edi
c0007963:	55                   	push   ebp
c0007964:	50                   	push   eax
c0007965:	e8 a2 f4 01 00       	call   c0026e0c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c000796a:	8d 54 24 28          	lea    edx,[esp+0x28]
c000796e:	83 c4 0c             	add    esp,0xc
c0007971:	56                   	push   esi
c0007972:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007976:	50                   	push   eax
c0007977:	53                   	push   ebx
c0007978:	52                   	push   edx
c0007979:	e8 06 f8 01 00       	call   c0027184 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c000797e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007982:	52                   	push   edx
c0007983:	e8 00 f0 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0007988:	5a                   	pop    edx
c0007989:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798d:	50                   	push   eax
c000798e:	e8 f5 ef 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0007993:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0007996:	e8 ed ef 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c000799b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000799e:	e8 e5 ef 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00079a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00079a6:	e8 dd ef 01 00       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00079ab:	83 c4 3c             	add    esp,0x3c
c00079ae:	5b                   	pop    ebx
c00079af:	5e                   	pop    esi
c00079b0:	5f                   	pop    edi
c00079b1:	5d                   	pop    ebp
c00079b2:	c3                   	ret    
c00079b3:	90                   	nop

c00079b4 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c00079b4:	83 ec 24             	sub    esp,0x24
c00079b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00079bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00079c7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00079cb:	50                   	push   eax
c00079cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00079d0:	83 c0 18             	add    eax,0x18
c00079d3:	50                   	push   eax
c00079d4:	e8 57 fa 01 00       	call   c0027430 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c00079d9:	83 c4 2c             	add    esp,0x2c
c00079dc:	c3                   	ret    
c00079dd:	90                   	nop

c00079de <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c00079de:	53                   	push   ebx
c00079df:	83 ec 18             	sub    esp,0x18
c00079e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079e6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00079ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00079ee:	83 fa 02             	cmp    edx,0x2
c00079f1:	74 2d                	je     c0007a20 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x42>
c00079f3:	7f 07                	jg     c00079fc <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x1e>
c00079f5:	31 c0                	xor    eax,eax
c00079f7:	4a                   	dec    edx
c00079f8:	eb 12                	jmp    c0007a0c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x2e>
c00079fa:	66 90                	xchg   ax,ax
c00079fc:	83 fa 04             	cmp    edx,0x4
c00079ff:	74 27                	je     c0007a28 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x4a>
c0007a01:	b8 03 00 00 00       	mov    eax,0x3
c0007a06:	83 fa 08             	cmp    edx,0x8
c0007a09:	8d 76 00             	lea    esi,[esi+0x0]
c0007a0c:	74 22                	je     c0007a30 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	68 e9 8d 02 c0       	push   0xc0028de9
c0007a16:	e8 f5 8a 00 00       	call   c0010510 <KePanic(char const*)>
c0007a1b:	eb 37                	jmp    c0007a54 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x76>
c0007a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0007a20:	b8 01 00 00 00       	mov    eax,0x1
c0007a25:	eb 09                	jmp    c0007a30 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c0007a27:	90                   	nop
c0007a28:	b8 02 00 00 00       	mov    eax,0x2
c0007a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0007a30:	c1 e0 06             	shl    eax,0x6
c0007a33:	66 89 5c 24 0c       	mov    WORD PTR [esp+0xc],bx
c0007a38:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007a3c:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c0007a40:	50                   	push   eax
c0007a41:	50                   	push   eax
c0007a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007a46:	50                   	push   eax
c0007a47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007a4b:	83 c0 2c             	add    eax,0x2c
c0007a4e:	50                   	push   eax
c0007a4f:	e8 94 fb 01 00       	call   c00275e8 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007a54:	83 c4 10             	add    esp,0x10
c0007a57:	83 c4 18             	add    esp,0x18
c0007a5a:	5b                   	pop    ebx
c0007a5b:	c3                   	ret    

c0007a5c <RootDriver::detect()>:
c0007a5c:	90                   	nop
c0007a5d:	c3                   	ret    
c0007a5e:	66 90                	xchg   ax,ax

c0007a60 <RootDriver::deinitialise()>:
c0007a60:	90                   	nop
c0007a61:	c3                   	ret    
c0007a62:	66 90                	xchg   ax,ax

c0007a64 <RootDriver::setPowerState(DevicePowerState)>:
c0007a64:	90                   	nop
c0007a65:	c3                   	ret    
c0007a66:	66 90                	xchg   ax,ax

c0007a68 <RootDriver::getHumanReadableName()>:
c0007a68:	b8 a8 8e 02 c0       	mov    eax,0xc0028ea8
c0007a6d:	c3                   	ret    
c0007a6e:	66 90                	xchg   ax,ax

c0007a70 <RootDriver::hasACPI()>:
c0007a70:	b0 01                	mov    al,0x1
c0007a72:	c3                   	ret    
c0007a73:	90                   	nop

c0007a74 <RootDriver::hasPCI()>:
c0007a74:	b0 01                	mov    al,0x1
c0007a76:	c3                   	ret    
c0007a77:	90                   	nop

c0007a78 <RootDriver::initialise()>:
c0007a78:	56                   	push   esi
c0007a79:	53                   	push   ebx
c0007a7a:	83 ec 34             	sub    esp,0x34
c0007a7d:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0007a85:	83 ec 0c             	sub    esp,0xc
c0007a88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a8c:	e8 2a 86 00 00       	call   c00100bb <malloc>
c0007a91:	83 c4 10             	add    esp,0x10
c0007a94:	89 c3                	mov    ebx,eax
c0007a96:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007a9c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007aa3:	83 ec 0c             	sub    esp,0xc
c0007aa6:	53                   	push   ebx
c0007aa7:	e8 84 fc 01 00       	call   c0027730 <ISADriver::ISADriver()>
c0007aac:	83 c4 10             	add    esp,0x10
c0007aaf:	89 de                	mov    esi,ebx
c0007ab1:	c7 44 24 20 58 00 00 00 	mov    DWORD PTR [esp+0x20],0x58
c0007ab9:	83 ec 0c             	sub    esp,0xc
c0007abc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007ac0:	e8 f6 85 00 00       	call   c00100bb <malloc>
c0007ac5:	83 c4 10             	add    esp,0x10
c0007ac8:	89 c3                	mov    ebx,eax
c0007aca:	83 ec 08             	sub    esp,0x8
c0007acd:	56                   	push   esi
c0007ace:	53                   	push   ebx
c0007acf:	e8 00 fc 01 00       	call   c00276d4 <BusHardware::BusHardware(BusDriver*)>
c0007ad4:	83 c4 10             	add    esp,0x10
c0007ad7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0007adb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007adf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ae2:	83 ec 08             	sub    esp,0x8
c0007ae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ae9:	50                   	push   eax
c0007aea:	e8 3d fd ff ff       	call   c000782c <Hardware::addChild(Hardware*)>
c0007aef:	83 c4 10             	add    esp,0x10
c0007af2:	83 ec 0c             	sub    esp,0xc
c0007af5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007af9:	e8 72 ff ff ff       	call   c0007a70 <RootDriver::hasACPI()>
c0007afe:	83 c4 10             	add    esp,0x10
c0007b01:	0f b6 c0             	movzx  eax,al
c0007b04:	85 c0                	test   eax,eax
c0007b06:	74 78                	je     c0007b80 <RootDriver::initialise()+0x108>
c0007b08:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0007b10:	83 ec 0c             	sub    esp,0xc
c0007b13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007b17:	e8 9f 85 00 00       	call   c00100bb <malloc>
c0007b1c:	83 c4 10             	add    esp,0x10
c0007b1f:	89 c3                	mov    ebx,eax
c0007b21:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007b27:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007b2e:	83 ec 0c             	sub    esp,0xc
c0007b31:	53                   	push   ebx
c0007b32:	e8 1d fc 01 00       	call   c0027754 <ACPIDriver::ACPIDriver()>
c0007b37:	83 c4 10             	add    esp,0x10
c0007b3a:	89 de                	mov    esi,ebx
c0007b3c:	c7 44 24 18 58 00 00 00 	mov    DWORD PTR [esp+0x18],0x58
c0007b44:	83 ec 0c             	sub    esp,0xc
c0007b47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007b4b:	e8 6b 85 00 00       	call   c00100bb <malloc>
c0007b50:	83 c4 10             	add    esp,0x10
c0007b53:	89 c3                	mov    ebx,eax
c0007b55:	83 ec 08             	sub    esp,0x8
c0007b58:	56                   	push   esi
c0007b59:	53                   	push   ebx
c0007b5a:	e8 75 fb 01 00       	call   c00276d4 <BusHardware::BusHardware(BusDriver*)>
c0007b5f:	83 c4 10             	add    esp,0x10
c0007b62:	89 5c 24 28          	mov    DWORD PTR [esp+0x28],ebx
c0007b66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b6d:	83 ec 08             	sub    esp,0x8
c0007b70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007b74:	50                   	push   eax
c0007b75:	e8 b2 fc ff ff       	call   c000782c <Hardware::addChild(Hardware*)>
c0007b7a:	83 c4 10             	add    esp,0x10
c0007b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b80:	83 ec 0c             	sub    esp,0xc
c0007b83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007b87:	e8 e8 fe ff ff       	call   c0007a74 <RootDriver::hasPCI()>
c0007b8c:	83 c4 10             	add    esp,0x10
c0007b8f:	0f b6 c0             	movzx  eax,al
c0007b92:	85 c0                	test   eax,eax
c0007b94:	74 76                	je     c0007c0c <RootDriver::initialise()+0x194>
c0007b96:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0007b9e:	83 ec 0c             	sub    esp,0xc
c0007ba1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007ba5:	e8 11 85 00 00       	call   c00100bb <malloc>
c0007baa:	83 c4 10             	add    esp,0x10
c0007bad:	89 c3                	mov    ebx,eax
c0007baf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007bb5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007bbc:	83 ec 0c             	sub    esp,0xc
c0007bbf:	53                   	push   ebx
c0007bc0:	e8 b3 fb 01 00       	call   c0027778 <PCIDriver::PCIDriver()>
c0007bc5:	83 c4 10             	add    esp,0x10
c0007bc8:	89 de                	mov    esi,ebx
c0007bca:	c7 44 24 10 58 00 00 00 	mov    DWORD PTR [esp+0x10],0x58
c0007bd2:	83 ec 0c             	sub    esp,0xc
c0007bd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007bd9:	e8 dd 84 00 00       	call   c00100bb <malloc>
c0007bde:	83 c4 10             	add    esp,0x10
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	83 ec 08             	sub    esp,0x8
c0007be6:	56                   	push   esi
c0007be7:	53                   	push   ebx
c0007be8:	e8 e7 fa 01 00       	call   c00276d4 <BusHardware::BusHardware(BusDriver*)>
c0007bed:	83 c4 10             	add    esp,0x10
c0007bf0:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0007bf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bfb:	83 ec 08             	sub    esp,0x8
c0007bfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007c02:	50                   	push   eax
c0007c03:	e8 24 fc ff ff       	call   c000782c <Hardware::addChild(Hardware*)>
c0007c08:	83 c4 10             	add    esp,0x10
c0007c0b:	90                   	nop
c0007c0c:	90                   	nop
c0007c0d:	83 c4 34             	add    esp,0x34
c0007c10:	5b                   	pop    ebx
c0007c11:	5e                   	pop    esi
c0007c12:	c3                   	ret    

c0007c13 <KiIsHashInTable(unsigned short)>:
c0007c13:	0f b7 d0             	movzx  edx,ax
c0007c16:	83 e0 07             	and    eax,0x7
c0007c19:	c1 fa 03             	sar    edx,0x3
c0007c1c:	88 c1                	mov    cl,al
c0007c1e:	0f b6 92 00 03 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffcfd00]
c0007c25:	d3 fa                	sar    edx,cl
c0007c27:	89 d0                	mov    eax,edx
c0007c29:	83 e0 01             	and    eax,0x1
c0007c2c:	c3                   	ret    

c0007c2d <KiSetHashInTable(unsigned short, bool)>:
c0007c2d:	56                   	push   esi
c0007c2e:	53                   	push   ebx
c0007c2f:	0f b7 d8             	movzx  ebx,ax
c0007c32:	83 e0 07             	and    eax,0x7
c0007c35:	c1 fb 03             	sar    ebx,0x3
c0007c38:	89 c1                	mov    ecx,eax
c0007c3a:	0f b6 b3 00 03 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffcfd00]
c0007c41:	b8 01 00 00 00       	mov    eax,0x1
c0007c46:	d3 e0                	shl    eax,cl
c0007c48:	84 d2                	test   dl,dl
c0007c4a:	74 04                	je     c0007c50 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007c4c:	09 f0                	or     eax,esi
c0007c4e:	eb 04                	jmp    c0007c54 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007c50:	f7 d0                	not    eax
c0007c52:	21 f0                	and    eax,esi
c0007c54:	88 83 00 03 03 c0    	mov    BYTE PTR [ebx-0x3ffcfd00],al
c0007c5a:	5b                   	pop    ebx
c0007c5b:	5e                   	pop    esi
c0007c5c:	c3                   	ret    

c0007c5d <KiFlushSymlinkChanges()>:
c0007c5d:	57                   	push   edi
c0007c5e:	56                   	push   esi
c0007c5f:	53                   	push   ebx
c0007c60:	83 ec 1c             	sub    esp,0x1c
c0007c63:	68 14 01 00 00       	push   0x114
c0007c68:	e8 4e 84 00 00       	call   c00100bb <malloc>
c0007c6d:	83 c4 0c             	add    esp,0xc
c0007c70:	89 c3                	mov    ebx,eax
c0007c72:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007c78:	68 e8 8e 02 c0       	push   0xc0028ee8
c0007c7d:	50                   	push   eax
c0007c7e:	e8 53 0d 00 00       	call   c00089d6 <File::File(char const*, Process*)>
c0007c83:	83 c4 10             	add    esp,0x10
c0007c86:	85 db                	test   ebx,ebx
c0007c88:	75 10                	jne    c0007c9a <KiFlushSymlinkChanges()+0x3d>
c0007c8a:	83 ec 0c             	sub    esp,0xc
c0007c8d:	68 06 8f 02 c0       	push   0xc0028f06
c0007c92:	e8 79 88 00 00       	call   c0010510 <KePanic(char const*)>
c0007c97:	83 c4 10             	add    esp,0x10
c0007c9a:	50                   	push   eax
c0007c9b:	50                   	push   eax
c0007c9c:	6a 06                	push   0x6
c0007c9e:	53                   	push   ebx
c0007c9f:	e8 50 0d 00 00       	call   c00089f4 <File::open(FileOpenMode)>
c0007ca4:	83 c4 10             	add    esp,0x10
c0007ca7:	85 c0                	test   eax,eax
c0007ca9:	74 10                	je     c0007cbb <KiFlushSymlinkChanges()+0x5e>
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	68 20 8f 02 c0       	push   0xc0028f20
c0007cb3:	e8 58 88 00 00       	call   c0010510 <KePanic(char const*)>
c0007cb8:	83 c4 10             	add    esp,0x10
c0007cbb:	31 f6                	xor    esi,esi
c0007cbd:	39 35 c0 fe 02 c0    	cmp    DWORD PTR ds:0xc002fec0,esi
c0007cc3:	7e 70                	jle    c0007d35 <KiFlushSymlinkChanges()+0xd8>
c0007cc5:	83 ec 0c             	sub    esp,0xc
c0007cc8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007cca:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007cce:	89 f0                	mov    eax,esi
c0007cd0:	57                   	push   edi
c0007cd1:	c1 e0 08             	shl    eax,0x8
c0007cd4:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007cd9:	50                   	push   eax
c0007cda:	6a 00                	push   0x0
c0007cdc:	68 00 01 00 00       	push   0x100
c0007ce1:	53                   	push   ebx
c0007ce2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007ce5:	83 c4 20             	add    esp,0x20
c0007ce8:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007cf0:	74 10                	je     c0007d02 <KiFlushSymlinkChanges()+0xa5>
c0007cf2:	83 ec 0c             	sub    esp,0xc
c0007cf5:	68 3a 8f 02 c0       	push   0xc0028f3a
c0007cfa:	e8 11 88 00 00       	call   c0010510 <KePanic(char const*)>
c0007cff:	83 c4 10             	add    esp,0x10
c0007d02:	83 ec 0c             	sub    esp,0xc
c0007d05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d07:	8d 14 f5 e0 fe 02 c0 	lea    edx,[esi*8-0x3ffd0120]
c0007d0e:	57                   	push   edi
c0007d0f:	52                   	push   edx
c0007d10:	6a 00                	push   0x0
c0007d12:	6a 08                	push   0x8
c0007d14:	53                   	push   ebx
c0007d15:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007d18:	83 c4 20             	add    esp,0x20
c0007d1b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007d20:	74 10                	je     c0007d32 <KiFlushSymlinkChanges()+0xd5>
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	68 54 8f 02 c0       	push   0xc0028f54
c0007d2a:	e8 e1 87 00 00       	call   c0010510 <KePanic(char const*)>
c0007d2f:	83 c4 10             	add    esp,0x10
c0007d32:	46                   	inc    esi
c0007d33:	eb 88                	jmp    c0007cbd <KiFlushSymlinkChanges()+0x60>
c0007d35:	83 ec 0c             	sub    esp,0xc
c0007d38:	53                   	push   ebx
c0007d39:	e8 14 0d 00 00       	call   c0008a52 <File::close()>
c0007d3e:	83 c4 10             	add    esp,0x10
c0007d41:	85 db                	test   ebx,ebx
c0007d43:	74 0c                	je     c0007d51 <KiFlushSymlinkChanges()+0xf4>
c0007d45:	83 ec 0c             	sub    esp,0xc
c0007d48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d4a:	53                   	push   ebx
c0007d4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007d4e:	83 c4 10             	add    esp,0x10
c0007d51:	c7 05 c0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fec0,0x0
c0007d5b:	83 c4 10             	add    esp,0x10
c0007d5e:	5b                   	pop    ebx
c0007d5f:	5e                   	pop    esi
c0007d60:	5f                   	pop    edi
c0007d61:	c3                   	ret    

c0007d62 <KiDeinitialiseSymlinks(void*)>:
c0007d62:	e9 f6 fe ff ff       	jmp    c0007c5d <KiFlushSymlinkChanges()>

c0007d67 <KiGetSymlinkHash(char const*)>:
c0007d67:	53                   	push   ebx
c0007d68:	89 c3                	mov    ebx,eax
c0007d6a:	83 ec 14             	sub    esp,0x14
c0007d6d:	50                   	push   eax
c0007d6e:	e8 fd 87 ff ff       	call   c0000570 <strlen>
c0007d73:	5a                   	pop    edx
c0007d74:	59                   	pop    ecx
c0007d75:	50                   	push   eax
c0007d76:	53                   	push   ebx
c0007d77:	e8 0f 6c 00 00       	call   c000e98b <KeCalculateCRC32(unsigned char*, int)>
c0007d7c:	83 c4 18             	add    esp,0x18
c0007d7f:	89 c2                	mov    edx,eax
c0007d81:	5b                   	pop    ebx
c0007d82:	c1 ea 10             	shr    edx,0x10
c0007d85:	31 d0                	xor    eax,edx
c0007d87:	c3                   	ret    

c0007d88 <KiCreateSymlinkID()>:
c0007d88:	55                   	push   ebp
c0007d89:	57                   	push   edi
c0007d8a:	56                   	push   esi
c0007d8b:	53                   	push   ebx
c0007d8c:	31 db                	xor    ebx,ebx
c0007d8e:	83 ec 1c             	sub    esp,0x1c
c0007d91:	e8 5a 91 00 00       	call   c0010ef0 <KeRand()>
c0007d96:	43                   	inc    ebx
c0007d97:	8b 2d 00 23 03 c0    	mov    ebp,DWORD PTR ds:0xc0032300
c0007d9d:	31 d2                	xor    edx,edx
c0007d9f:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007da2:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007da6:	89 0d 00 23 03 c0    	mov    DWORD PTR ds:0xc0032300,ecx
c0007dac:	c1 e0 1f             	shl    eax,0x1f
c0007daf:	89 d7                	mov    edi,edx
c0007db1:	89 c6                	mov    esi,eax
c0007db3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007db7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007dbf:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007dc5:	75 10                	jne    c0007dd7 <KiCreateSymlinkID()+0x4f>
c0007dc7:	83 ec 0c             	sub    esp,0xc
c0007dca:	68 6e 8f 02 c0       	push   0xc0028f6e
c0007dcf:	e8 3c 87 00 00       	call   c0010510 <KePanic(char const*)>
c0007dd4:	83 c4 10             	add    esp,0x10
c0007dd7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007ddb:	75 04                	jne    c0007de1 <KiCreateSymlinkID()+0x59>
c0007ddd:	39 f5                	cmp    ebp,esi
c0007ddf:	74 b0                	je     c0007d91 <KiCreateSymlinkID()+0x9>
c0007de1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007de5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007de9:	31 f0                	xor    eax,esi
c0007deb:	83 c4 1c             	add    esp,0x1c
c0007dee:	31 fa                	xor    edx,edi
c0007df0:	5b                   	pop    ebx
c0007df1:	5e                   	pop    esi
c0007df2:	5f                   	pop    edi
c0007df3:	5d                   	pop    ebp
c0007df4:	c3                   	ret    

c0007df5 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007df5:	53                   	push   ebx
c0007df6:	83 ec 0c             	sub    esp,0xc
c0007df9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007dfd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007e01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007e05:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007e0a:	68 00 01 00 00       	push   0x100
c0007e0f:	89 0c c5 e4 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd011c],ecx
c0007e16:	6a 00                	push   0x0
c0007e18:	89 14 c5 e0 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0120],edx
c0007e1f:	c1 e0 08             	shl    eax,0x8
c0007e22:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007e27:	50                   	push   eax
c0007e28:	e8 c3 86 ff ff       	call   c00004f0 <memset>
c0007e2d:	58                   	pop    eax
c0007e2e:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007e33:	5a                   	pop    edx
c0007e34:	c1 e0 08             	shl    eax,0x8
c0007e37:	53                   	push   ebx
c0007e38:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007e3d:	50                   	push   eax
c0007e3e:	e8 fd 87 ff ff       	call   c0000640 <strcpy>
c0007e43:	89 d8                	mov    eax,ebx
c0007e45:	e8 1d ff ff ff       	call   c0007d67 <KiGetSymlinkHash(char const*)>
c0007e4a:	ba 01 00 00 00       	mov    edx,0x1
c0007e4f:	0f b7 c0             	movzx  eax,ax
c0007e52:	e8 d6 fd ff ff       	call   c0007c2d <KiSetHashInTable(unsigned short, bool)>
c0007e57:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007e5c:	83 c4 10             	add    esp,0x10
c0007e5f:	40                   	inc    eax
c0007e60:	a3 c0 fe 02 c0       	mov    ds:0xc002fec0,eax
c0007e65:	83 f8 03             	cmp    eax,0x3
c0007e68:	7e 09                	jle    c0007e73 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007e6a:	83 c4 08             	add    esp,0x8
c0007e6d:	5b                   	pop    ebx
c0007e6e:	e9 ea fd ff ff       	jmp    c0007c5d <KiFlushSymlinkChanges()>
c0007e73:	83 c4 08             	add    esp,0x8
c0007e76:	5b                   	pop    ebx
c0007e77:	c3                   	ret    

c0007e78 <KeInitialiseSymlinks()>:
c0007e78:	57                   	push   edi
c0007e79:	56                   	push   esi
c0007e7a:	53                   	push   ebx
c0007e7b:	81 ec 14 01 00 00    	sub    esp,0x114
c0007e81:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c0007e8b:	68 00 20 00 00       	push   0x2000
c0007e90:	c7 05 c0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fec0,0x0
c0007e9a:	6a 00                	push   0x0
c0007e9c:	68 00 03 03 c0       	push   0xc0030300
c0007ea1:	e8 4a 86 ff ff       	call   c00004f0 <memset>
c0007ea6:	59                   	pop    ecx
c0007ea7:	5b                   	pop    ebx
c0007ea8:	6a 00                	push   0x0
c0007eaa:	68 62 7d 00 c0       	push   0xc0007d62
c0007eaf:	e8 ac 5b 00 00       	call   c000da60 <KeRegisterAtexit(void (*)(void*), void*)>
c0007eb4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007ebb:	e8 fb 81 00 00       	call   c00100bb <malloc>
c0007ec0:	83 c4 0c             	add    esp,0xc
c0007ec3:	89 c3                	mov    ebx,eax
c0007ec5:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007ecb:	68 e8 8e 02 c0       	push   0xc0028ee8
c0007ed0:	50                   	push   eax
c0007ed1:	e8 00 0b 00 00       	call   c00089d6 <File::File(char const*, Process*)>
c0007ed6:	83 c4 10             	add    esp,0x10
c0007ed9:	85 db                	test   ebx,ebx
c0007edb:	75 10                	jne    c0007eed <KeInitialiseSymlinks()+0x75>
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	68 77 8f 02 c0       	push   0xc0028f77
c0007ee5:	e8 26 86 00 00       	call   c0010510 <KePanic(char const*)>
c0007eea:	83 c4 10             	add    esp,0x10
c0007eed:	83 ec 0c             	sub    esp,0xc
c0007ef0:	53                   	push   ebx
c0007ef1:	e8 c2 0d 00 00       	call   c0008cb8 <File::exists()>
c0007ef6:	83 c4 10             	add    esp,0x10
c0007ef9:	84 c0                	test   al,al
c0007efb:	75 3a                	jne    c0007f37 <KeInitialiseSymlinks()+0xbf>
c0007efd:	52                   	push   edx
c0007efe:	52                   	push   edx
c0007eff:	6a 12                	push   0x12
c0007f01:	53                   	push   ebx
c0007f02:	e8 ed 0a 00 00       	call   c00089f4 <File::open(FileOpenMode)>
c0007f07:	83 c4 10             	add    esp,0x10
c0007f0a:	85 c0                	test   eax,eax
c0007f0c:	74 10                	je     c0007f1e <KeInitialiseSymlinks()+0xa6>
c0007f0e:	83 ec 0c             	sub    esp,0xc
c0007f11:	68 94 8f 02 c0       	push   0xc0028f94
c0007f16:	e8 f5 85 00 00       	call   c0010510 <KePanic(char const*)>
c0007f1b:	83 c4 10             	add    esp,0x10
c0007f1e:	83 ec 0c             	sub    esp,0xc
c0007f21:	53                   	push   ebx
c0007f22:	e8 2b 0b 00 00       	call   c0008a52 <File::close()>
c0007f27:	83 c4 10             	add    esp,0x10
c0007f2a:	85 db                	test   ebx,ebx
c0007f2c:	0f 84 9e 00 00 00    	je     c0007fd0 <KeInitialiseSymlinks()+0x158>
c0007f32:	e9 8d 00 00 00       	jmp    c0007fc4 <KeInitialiseSymlinks()+0x14c>
c0007f37:	50                   	push   eax
c0007f38:	50                   	push   eax
c0007f39:	6a 01                	push   0x1
c0007f3b:	53                   	push   ebx
c0007f3c:	e8 b3 0a 00 00       	call   c00089f4 <File::open(FileOpenMode)>
c0007f41:	83 c4 10             	add    esp,0x10
c0007f44:	85 c0                	test   eax,eax
c0007f46:	74 10                	je     c0007f58 <KeInitialiseSymlinks()+0xe0>
c0007f48:	83 ec 0c             	sub    esp,0xc
c0007f4b:	68 b1 8f 02 c0       	push   0xc0028fb1
c0007f50:	e8 bb 85 00 00       	call   c0010510 <KePanic(char const*)>
c0007f55:	83 c4 10             	add    esp,0x10
c0007f58:	83 ec 0c             	sub    esp,0xc
c0007f5b:	ff 05 00 23 03 c0    	inc    DWORD PTR ds:0xc0032300
c0007f61:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007f65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f67:	57                   	push   edi
c0007f68:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007f6c:	56                   	push   esi
c0007f6d:	6a 00                	push   0x0
c0007f6f:	68 00 01 00 00       	push   0x100
c0007f74:	53                   	push   ebx
c0007f75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007f78:	83 c4 20             	add    esp,0x20
c0007f7b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007f83:	75 33                	jne    c0007fb8 <KeInitialiseSymlinks()+0x140>
c0007f85:	83 ec 0c             	sub    esp,0xc
c0007f88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f8a:	57                   	push   edi
c0007f8b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007f8f:	52                   	push   edx
c0007f90:	6a 00                	push   0x0
c0007f92:	6a 08                	push   0x8
c0007f94:	53                   	push   ebx
c0007f95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007f98:	83 c4 20             	add    esp,0x20
c0007f9b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007fa0:	75 16                	jne    c0007fb8 <KeInitialiseSymlinks()+0x140>
c0007fa2:	89 f0                	mov    eax,esi
c0007fa4:	e8 be fd ff ff       	call   c0007d67 <KiGetSymlinkHash(char const*)>
c0007fa9:	ba 01 00 00 00       	mov    edx,0x1
c0007fae:	0f b7 c0             	movzx  eax,ax
c0007fb1:	e8 77 fc ff ff       	call   c0007c2d <KiSetHashInTable(unsigned short, bool)>
c0007fb6:	eb a0                	jmp    c0007f58 <KeInitialiseSymlinks()+0xe0>
c0007fb8:	83 ec 0c             	sub    esp,0xc
c0007fbb:	53                   	push   ebx
c0007fbc:	e8 91 0a 00 00       	call   c0008a52 <File::close()>
c0007fc1:	83 c4 10             	add    esp,0x10
c0007fc4:	83 ec 0c             	sub    esp,0xc
c0007fc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007fc9:	53                   	push   ebx
c0007fca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007fcd:	83 c4 10             	add    esp,0x10
c0007fd0:	81 c4 10 01 00 00    	add    esp,0x110
c0007fd6:	5b                   	pop    ebx
c0007fd7:	5e                   	pop    esi
c0007fd8:	5f                   	pop    edi
c0007fd9:	c3                   	ret    

c0007fda <KiIsSymlinkRegistered(char const*)>:
c0007fda:	55                   	push   ebp
c0007fdb:	57                   	push   edi
c0007fdc:	56                   	push   esi
c0007fdd:	53                   	push   ebx
c0007fde:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007fe4:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007feb:	89 f0                	mov    eax,esi
c0007fed:	e8 75 fd ff ff       	call   c0007d67 <KiGetSymlinkHash(char const*)>
c0007ff2:	0f b7 c0             	movzx  eax,ax
c0007ff5:	e8 19 fc ff ff       	call   c0007c13 <KiIsHashInTable(unsigned short)>
c0007ffa:	31 d2                	xor    edx,edx
c0007ffc:	88 c1                	mov    cl,al
c0007ffe:	31 c0                	xor    eax,eax
c0008000:	84 c9                	test   cl,cl
c0008002:	0f 84 31 01 00 00    	je     c0008139 <KiIsSymlinkRegistered(char const*)+0x15f>
c0008008:	31 db                	xor    ebx,ebx
c000800a:	39 1d c0 fe 02 c0    	cmp    DWORD PTR ds:0xc002fec0,ebx
c0008010:	7e 30                	jle    c0008042 <KiIsSymlinkRegistered(char const*)+0x68>
c0008012:	89 d8                	mov    eax,ebx
c0008014:	51                   	push   ecx
c0008015:	c1 e0 08             	shl    eax,0x8
c0008018:	51                   	push   ecx
c0008019:	05 00 ff 02 c0       	add    eax,0xc002ff00
c000801e:	50                   	push   eax
c000801f:	56                   	push   esi
c0008020:	e8 2b 87 ff ff       	call   c0000750 <strcmp>
c0008025:	83 c4 10             	add    esp,0x10
c0008028:	85 c0                	test   eax,eax
c000802a:	75 13                	jne    c000803f <KiIsSymlinkRegistered(char const*)+0x65>
c000802c:	8b 04 dd e0 fe 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd0120]
c0008033:	8b 14 dd e4 fe 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd011c]
c000803a:	e9 fa 00 00 00       	jmp    c0008139 <KiIsSymlinkRegistered(char const*)+0x15f>
c000803f:	43                   	inc    ebx
c0008040:	eb c8                	jmp    c000800a <KiIsSymlinkRegistered(char const*)+0x30>
c0008042:	83 ec 0c             	sub    esp,0xc
c0008045:	68 14 01 00 00       	push   0x114
c000804a:	e8 6c 80 00 00       	call   c00100bb <malloc>
c000804f:	83 c4 0c             	add    esp,0xc
c0008052:	89 c3                	mov    ebx,eax
c0008054:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000805a:	68 e8 8e 02 c0       	push   0xc0028ee8
c000805f:	50                   	push   eax
c0008060:	e8 71 09 00 00       	call   c00089d6 <File::File(char const*, Process*)>
c0008065:	83 c4 10             	add    esp,0x10
c0008068:	85 db                	test   ebx,ebx
c000806a:	75 12                	jne    c000807e <KiIsSymlinkRegistered(char const*)+0xa4>
c000806c:	83 ec 0c             	sub    esp,0xc
c000806f:	68 cc 8f 02 c0       	push   0xc0028fcc
c0008074:	e8 97 84 00 00       	call   c0010510 <KePanic(char const*)>
c0008079:	83 c4 10             	add    esp,0x10
c000807c:	eb 10                	jmp    c000808e <KiIsSymlinkRegistered(char const*)+0xb4>
c000807e:	83 ec 0c             	sub    esp,0xc
c0008081:	53                   	push   ebx
c0008082:	e8 31 0c 00 00       	call   c0008cb8 <File::exists()>
c0008087:	83 c4 10             	add    esp,0x10
c000808a:	84 c0                	test   al,al
c000808c:	74 de                	je     c000806c <KiIsSymlinkRegistered(char const*)+0x92>
c000808e:	52                   	push   edx
c000808f:	52                   	push   edx
c0008090:	6a 01                	push   0x1
c0008092:	53                   	push   ebx
c0008093:	e8 5c 09 00 00       	call   c00089f4 <File::open(FileOpenMode)>
c0008098:	83 c4 10             	add    esp,0x10
c000809b:	85 c0                	test   eax,eax
c000809d:	74 10                	je     c00080af <KiIsSymlinkRegistered(char const*)+0xd5>
c000809f:	83 ec 0c             	sub    esp,0xc
c00080a2:	68 e7 8f 02 c0       	push   0xc0028fe7
c00080a7:	e8 64 84 00 00       	call   c0010510 <KePanic(char const*)>
c00080ac:	83 c4 10             	add    esp,0x10
c00080af:	83 ec 0c             	sub    esp,0xc
c00080b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00080b4:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00080b8:	55                   	push   ebp
c00080b9:	8d 7c 24 20          	lea    edi,[esp+0x20]
c00080bd:	57                   	push   edi
c00080be:	6a 00                	push   0x0
c00080c0:	68 00 01 00 00       	push   0x100
c00080c5:	53                   	push   ebx
c00080c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00080c9:	83 c4 20             	add    esp,0x20
c00080cc:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00080d4:	75 4b                	jne    c0008121 <KiIsSymlinkRegistered(char const*)+0x147>
c00080d6:	83 ec 0c             	sub    esp,0xc
c00080d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00080db:	55                   	push   ebp
c00080dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00080e0:	52                   	push   edx
c00080e1:	6a 00                	push   0x0
c00080e3:	6a 08                	push   0x8
c00080e5:	53                   	push   ebx
c00080e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00080e9:	83 c4 20             	add    esp,0x20
c00080ec:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00080f1:	75 2e                	jne    c0008121 <KiIsSymlinkRegistered(char const*)+0x147>
c00080f3:	50                   	push   eax
c00080f4:	50                   	push   eax
c00080f5:	57                   	push   edi
c00080f6:	56                   	push   esi
c00080f7:	e8 54 86 ff ff       	call   c0000750 <strcmp>
c00080fc:	83 c4 10             	add    esp,0x10
c00080ff:	85 c0                	test   eax,eax
c0008101:	75 ac                	jne    c00080af <KiIsSymlinkRegistered(char const*)+0xd5>
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	53                   	push   ebx
c0008107:	e8 46 09 00 00       	call   c0008a52 <File::close()>
c000810c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000810e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008111:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008114:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008118:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	eb 18                	jmp    c0008139 <KiIsSymlinkRegistered(char const*)+0x15f>
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	53                   	push   ebx
c0008125:	e8 28 09 00 00       	call   c0008a52 <File::close()>
c000812a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000812c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000812f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008132:	83 c4 10             	add    esp,0x10
c0008135:	31 c0                	xor    eax,eax
c0008137:	31 d2                	xor    edx,edx
c0008139:	81 c4 1c 01 00 00    	add    esp,0x11c
c000813f:	5b                   	pop    ebx
c0008140:	5e                   	pop    esi
c0008141:	5f                   	pop    edi
c0008142:	5d                   	pop    ebp
c0008143:	c3                   	ret    

c0008144 <KeDereferenceSymlink(char const*, char*)>:
c0008144:	55                   	push   ebp
c0008145:	57                   	push   edi
c0008146:	56                   	push   esi
c0008147:	53                   	push   ebx
c0008148:	83 ec 48             	sub    esp,0x48
c000814b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000814f:	56                   	push   esi
c0008150:	e8 85 fe ff ff       	call   c0007fda <KiIsSymlinkRegistered(char const*)>
c0008155:	83 c4 10             	add    esp,0x10
c0008158:	89 c7                	mov    edi,eax
c000815a:	89 d0                	mov    eax,edx
c000815c:	09 f8                	or     eax,edi
c000815e:	75 07                	jne    c0008167 <KeDereferenceSymlink(char const*, char*)+0x23>
c0008160:	31 c0                	xor    eax,eax
c0008162:	e9 7c 01 00 00       	jmp    c00082e3 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0008167:	83 ec 0c             	sub    esp,0xc
c000816a:	89 d5                	mov    ebp,edx
c000816c:	68 14 01 00 00       	push   0x114
c0008171:	e8 45 7f 00 00       	call   c00100bb <malloc>
c0008176:	83 c4 0c             	add    esp,0xc
c0008179:	89 c3                	mov    ebx,eax
c000817b:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0008181:	56                   	push   esi
c0008182:	50                   	push   eax
c0008183:	e8 4e 08 00 00       	call   c00089d6 <File::File(char const*, Process*)>
c0008188:	83 c4 10             	add    esp,0x10
c000818b:	85 db                	test   ebx,ebx
c000818d:	0f 84 32 01 00 00    	je     c00082c5 <KeDereferenceSymlink(char const*, char*)+0x181>
c0008193:	56                   	push   esi
c0008194:	56                   	push   esi
c0008195:	6a 01                	push   0x1
c0008197:	53                   	push   ebx
c0008198:	e8 57 08 00 00       	call   c00089f4 <File::open(FileOpenMode)>
c000819d:	83 c4 10             	add    esp,0x10
c00081a0:	85 c0                	test   eax,eax
c00081a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00081a4:	74 09                	je     c00081af <KeDereferenceSymlink(char const*, char*)+0x6b>
c00081a6:	83 ec 0c             	sub    esp,0xc
c00081a9:	53                   	push   ebx
c00081aa:	e9 10 01 00 00       	jmp    c00082bf <KeDereferenceSymlink(char const*, char*)+0x17b>
c00081af:	83 ec 0c             	sub    esp,0xc
c00081b2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00081b6:	56                   	push   esi
c00081b7:	8d 54 24 37          	lea    edx,[esp+0x37]
c00081bb:	52                   	push   edx
c00081bc:	6a 00                	push   0x0
c00081be:	6a 08                	push   0x8
c00081c0:	53                   	push   ebx
c00081c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00081c4:	83 c4 20             	add    esp,0x20
c00081c7:	85 c0                	test   eax,eax
c00081c9:	0f 85 e2 00 00 00    	jne    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00081cf:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00081d4:	0f 85 d7 00 00 00    	jne    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00081df:	56                   	push   esi
c00081e0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00081e4:	52                   	push   edx
c00081e5:	6a 00                	push   0x0
c00081e7:	6a 08                	push   0x8
c00081e9:	53                   	push   ebx
c00081ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	85 c0                	test   eax,eax
c00081f2:	0f 85 b9 00 00 00    	jne    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00081f8:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00081fd:	0f 85 ae 00 00 00    	jne    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008203:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0008207:	0f 85 53 ff ff ff    	jne    c0008160 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000820d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0008211:	0f 85 49 ff ff ff    	jne    c0008160 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0008217:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000821f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008227:	51                   	push   ecx
c0008228:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000822c:	50                   	push   eax
c000822d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008231:	50                   	push   eax
c0008232:	53                   	push   ebx
c0008233:	e8 be 0a 00 00       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c0008238:	83 c4 10             	add    esp,0x10
c000823b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008240:	75 6f                	jne    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008242:	31 c9                	xor    ecx,ecx
c0008244:	bf 0f 00 00 00       	mov    edi,0xf
c0008249:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000824d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008251:	39 c7                	cmp    edi,eax
c0008253:	89 cf                	mov    edi,ecx
c0008255:	19 d7                	sbb    edi,edx
c0008257:	73 58                	jae    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008259:	83 c0 f0             	add    eax,0xfffffff0
c000825c:	bf ff 00 00 00       	mov    edi,0xff
c0008261:	83 d2 ff             	adc    edx,0xffffffff
c0008264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008268:	39 c7                	cmp    edi,eax
c000826a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000826e:	19 d1                	sbb    ecx,edx
c0008270:	72 53                	jb     c00082c5 <KeDereferenceSymlink(char const*, char*)+0x181>
c0008272:	40                   	inc    eax
c0008273:	52                   	push   edx
c0008274:	50                   	push   eax
c0008275:	6a 00                	push   0x0
c0008277:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000827b:	e8 70 82 ff ff       	call   c00004f0 <memset>
c0008280:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008282:	89 34 24             	mov    DWORD PTR [esp],esi
c0008285:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0008289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000828d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008291:	53                   	push   ebx
c0008292:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008295:	83 c4 20             	add    esp,0x20
c0008298:	85 c0                	test   eax,eax
c000829a:	75 15                	jne    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000829c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082a0:	89 c7                	mov    edi,eax
c00082a2:	c1 ff 1f             	sar    edi,0x1f
c00082a5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00082a9:	75 06                	jne    c00082b1 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00082ab:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00082af:	74 19                	je     c00082ca <KeDereferenceSymlink(char const*, char*)+0x186>
c00082b1:	83 ec 0c             	sub    esp,0xc
c00082b4:	53                   	push   ebx
c00082b5:	e8 98 07 00 00       	call   c0008a52 <File::close()>
c00082ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00082c2:	83 c4 10             	add    esp,0x10
c00082c5:	83 c8 ff             	or     eax,0xffffffff
c00082c8:	eb 19                	jmp    c00082e3 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00082ca:	83 ec 0c             	sub    esp,0xc
c00082cd:	53                   	push   ebx
c00082ce:	e8 7f 07 00 00       	call   c0008a52 <File::close()>
c00082d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00082db:	83 c4 10             	add    esp,0x10
c00082de:	b8 01 00 00 00       	mov    eax,0x1
c00082e3:	83 c4 3c             	add    esp,0x3c
c00082e6:	5b                   	pop    ebx
c00082e7:	5e                   	pop    esi
c00082e8:	5f                   	pop    edi
c00082e9:	5d                   	pop    ebp
c00082ea:	c3                   	ret    

c00082eb <KeCreateSymlink(char const*, char const*)>:
c00082eb:	55                   	push   ebp
c00082ec:	57                   	push   edi
c00082ed:	56                   	push   esi
c00082ee:	53                   	push   ebx
c00082ef:	83 ec 38             	sub    esp,0x38
c00082f2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00082f6:	68 14 01 00 00       	push   0x114
c00082fb:	e8 bb 7d 00 00       	call   c00100bb <malloc>
c0008300:	6a 00                	push   0x0
c0008302:	89 c3                	mov    ebx,eax
c0008304:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000830a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000830e:	50                   	push   eax
c000830f:	e8 c4 05 00 00       	call   c00088d8 <File::File(char const*, Process*, bool)>
c0008314:	83 c4 20             	add    esp,0x20
c0008317:	b8 01 00 00 00       	mov    eax,0x1
c000831c:	85 db                	test   ebx,ebx
c000831e:	0f 84 fb 00 00 00    	je     c000841f <KeCreateSymlink(char const*, char const*)+0x134>
c0008324:	52                   	push   edx
c0008325:	52                   	push   edx
c0008326:	6a 12                	push   0x12
c0008328:	53                   	push   ebx
c0008329:	e8 c6 06 00 00       	call   c00089f4 <File::open(FileOpenMode)>
c000832e:	83 c4 10             	add    esp,0x10
c0008331:	85 c0                	test   eax,eax
c0008333:	74 0b                	je     c0008340 <KeCreateSymlink(char const*, char const*)+0x55>
c0008335:	83 ec 0c             	sub    esp,0xc
c0008338:	8b 03                	mov    eax,DWORD PTR [ebx]
c000833a:	53                   	push   ebx
c000833b:	e9 d4 00 00 00       	jmp    c0008414 <KeCreateSymlink(char const*, char const*)+0x129>
c0008340:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0008344:	be 02 90 02 c0       	mov    esi,0xc0029002
c0008349:	b9 09 00 00 00       	mov    ecx,0x9
c000834e:	fc                   	cld    
c000834f:	83 ec 0c             	sub    esp,0xc
c0008352:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008354:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008358:	8b 03                	mov    eax,DWORD PTR [ebx]
c000835a:	56                   	push   esi
c000835b:	8d 54 24 27          	lea    edx,[esp+0x27]
c000835f:	52                   	push   edx
c0008360:	6a 00                	push   0x0
c0008362:	6a 08                	push   0x8
c0008364:	53                   	push   ebx
c0008365:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008368:	83 c4 20             	add    esp,0x20
c000836b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008370:	0f 85 90 00 00 00    	jne    c0008406 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008376:	85 c0                	test   eax,eax
c0008378:	0f 85 88 00 00 00    	jne    c0008406 <KeCreateSymlink(char const*, char const*)+0x11b>
c000837e:	e8 05 fa ff ff       	call   c0007d88 <KiCreateSymlinkID()>
c0008383:	83 ec 0c             	sub    esp,0xc
c0008386:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000838a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000838e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008390:	56                   	push   esi
c0008391:	8d 54 24 18          	lea    edx,[esp+0x18]
c0008395:	52                   	push   edx
c0008396:	6a 00                	push   0x0
c0008398:	6a 08                	push   0x8
c000839a:	53                   	push   ebx
c000839b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000839e:	83 c4 20             	add    esp,0x20
c00083a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00083a6:	75 5e                	jne    c0008406 <KeCreateSymlink(char const*, char const*)+0x11b>
c00083a8:	85 c0                	test   eax,eax
c00083aa:	75 5a                	jne    c0008406 <KeCreateSymlink(char const*, char const*)+0x11b>
c00083ac:	83 ec 0c             	sub    esp,0xc
c00083af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00083b1:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00083b4:	55                   	push   ebp
c00083b5:	e8 b6 81 ff ff       	call   c0000570 <strlen>
c00083ba:	89 34 24             	mov    DWORD PTR [esp],esi
c00083bd:	31 d2                	xor    edx,edx
c00083bf:	55                   	push   ebp
c00083c0:	52                   	push   edx
c00083c1:	50                   	push   eax
c00083c2:	53                   	push   ebx
c00083c3:	ff d7                	call   edi
c00083c5:	83 c4 14             	add    esp,0x14
c00083c8:	89 c6                	mov    esi,eax
c00083ca:	55                   	push   ebp
c00083cb:	e8 a0 81 ff ff       	call   c0000570 <strlen>
c00083d0:	83 c4 10             	add    esp,0x10
c00083d3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00083d7:	75 2d                	jne    c0008406 <KeCreateSymlink(char const*, char const*)+0x11b>
c00083d9:	85 f6                	test   esi,esi
c00083db:	75 29                	jne    c0008406 <KeCreateSymlink(char const*, char const*)+0x11b>
c00083dd:	50                   	push   eax
c00083de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00083e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00083e6:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00083ea:	e8 06 fa ff ff       	call   c0007df5 <KeRegisterSymlink(char const*, unsigned long long)>
c00083ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00083f2:	e8 5b 06 00 00       	call   c0008a52 <File::close()>
c00083f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00083f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00083fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00083ff:	83 c4 10             	add    esp,0x10
c0008402:	31 c0                	xor    eax,eax
c0008404:	eb 19                	jmp    c000841f <KeCreateSymlink(char const*, char const*)+0x134>
c0008406:	83 ec 0c             	sub    esp,0xc
c0008409:	53                   	push   ebx
c000840a:	e8 43 06 00 00       	call   c0008a52 <File::close()>
c000840f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008411:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008414:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	b8 01 00 00 00       	mov    eax,0x1
c000841f:	83 c4 2c             	add    esp,0x2c
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <File::read(unsigned long long, void*, int*)>:
c0008428:	53                   	push   ebx
c0008429:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000842d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008431:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008438:	83 f8 19             	cmp    eax,0x19
c000843b:	77 35                	ja     c0008472 <File::read(unsigned long long, void*, int*)+0x4a>
c000843d:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008444:	85 c0                	test   eax,eax
c0008446:	74 2a                	je     c0008472 <File::read(unsigned long long, void*, int*)+0x4a>
c0008448:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000844e:	85 c0                	test   eax,eax
c0008450:	74 20                	je     c0008472 <File::read(unsigned long long, void*, int*)+0x4a>
c0008452:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008456:	74 21                	je     c0008479 <File::read(unsigned long long, void*, int*)+0x51>
c0008458:	8b 08                	mov    ecx,DWORD PTR [eax]
c000845a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000845e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008464:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000846c:	5b                   	pop    ebx
c000846d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0008470:	ff e0                	jmp    eax
c0008472:	b8 0b 00 00 00       	mov    eax,0xb
c0008477:	eb 05                	jmp    c000847e <File::read(unsigned long long, void*, int*)+0x56>
c0008479:	b8 05 00 00 00       	mov    eax,0x5
c000847e:	5b                   	pop    ebx
c000847f:	c3                   	ret    

c0008480 <File::write(unsigned long long, void*, int*)>:
c0008480:	53                   	push   ebx
c0008481:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008485:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008489:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008490:	83 f8 19             	cmp    eax,0x19
c0008493:	77 35                	ja     c00084ca <File::write(unsigned long long, void*, int*)+0x4a>
c0008495:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c000849c:	85 c0                	test   eax,eax
c000849e:	74 2a                	je     c00084ca <File::write(unsigned long long, void*, int*)+0x4a>
c00084a0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00084a6:	85 c0                	test   eax,eax
c00084a8:	74 20                	je     c00084ca <File::write(unsigned long long, void*, int*)+0x4a>
c00084aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084ae:	74 21                	je     c00084d1 <File::write(unsigned long long, void*, int*)+0x51>
c00084b0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00084b2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00084b6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00084bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00084c4:	5b                   	pop    ebx
c00084c5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00084c8:	ff e0                	jmp    eax
c00084ca:	b8 0b 00 00 00       	mov    eax,0xb
c00084cf:	eb 05                	jmp    c00084d6 <File::write(unsigned long long, void*, int*)+0x56>
c00084d1:	b8 05 00 00 00       	mov    eax,0x5
c00084d6:	5b                   	pop    ebx
c00084d7:	c3                   	ret    

c00084d8 <Directory::read(unsigned long long, void*, int*)>:
c00084d8:	53                   	push   ebx
c00084d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00084e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00084e8:	83 f8 19             	cmp    eax,0x19
c00084eb:	77 35                	ja     c0008522 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00084ed:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c00084f4:	85 c0                	test   eax,eax
c00084f6:	74 2a                	je     c0008522 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00084f8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00084fe:	85 c0                	test   eax,eax
c0008500:	74 20                	je     c0008522 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0008502:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008506:	74 21                	je     c0008529 <Directory::read(unsigned long long, void*, int*)+0x51>
c0008508:	8b 08                	mov    ecx,DWORD PTR [eax]
c000850a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000850e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008514:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008518:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000851c:	5b                   	pop    ebx
c000851d:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0008520:	ff e0                	jmp    eax
c0008522:	b8 0b 00 00 00       	mov    eax,0xb
c0008527:	eb 05                	jmp    c000852e <Directory::read(unsigned long long, void*, int*)+0x56>
c0008529:	b8 05 00 00 00       	mov    eax,0x5
c000852e:	5b                   	pop    ebx
c000852f:	c3                   	ret    

c0008530 <Directory::write(unsigned long long, void*, int*)>:
c0008530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008534:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000853b:	b8 0b 00 00 00       	mov    eax,0xb
c0008540:	83 fa 19             	cmp    edx,0x19
c0008543:	77 18                	ja     c000855d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008545:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c000854c:	85 d2                	test   edx,edx
c000854e:	74 0d                	je     c000855d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008550:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0008557:	19 c0                	sbb    eax,eax
c0008559:	83 e0 0a             	and    eax,0xa
c000855c:	40                   	inc    eax
c000855d:	c3                   	ret    

c000855e <File::isAtty()>:
c000855e:	31 c0                	xor    eax,eax
c0008560:	c3                   	ret    
c0008561:	90                   	nop

c0008562 <Directory::isAtty()>:
c0008562:	31 c0                	xor    eax,eax
c0008564:	c3                   	ret    
c0008565:	90                   	nop

c0008566 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0008566:	b8 0a 00 00 00       	mov    eax,0xa
c000856b:	c3                   	ret    

c000856c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000856c:	b8 0a 00 00 00       	mov    eax,0xa
c0008571:	c3                   	ret    

c0008572 <Filesystem::allocateSwapfile(char const*, int)>:
c0008572:	31 c0                	xor    eax,eax
c0008574:	31 d2                	xor    edx,edx
c0008576:	c3                   	ret    
c0008577:	90                   	nop

c0008578 <File::~File()>:
c0008578:	83 ec 0c             	sub    esp,0xc
c000857b:	ba d8 90 02 c0       	mov    edx,0xc00290d8
c0008580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008584:	89 10                	mov    DWORD PTR [eax],edx
c0008586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858a:	83 ec 0c             	sub    esp,0xc
c000858d:	50                   	push   eax
c000858e:	e8 a7 b2 00 00       	call   c001383a <UnixFile::~UnixFile()>
c0008593:	83 c4 10             	add    esp,0x10
c0008596:	90                   	nop
c0008597:	83 c4 0c             	add    esp,0xc
c000859a:	c3                   	ret    
c000859b:	90                   	nop

c000859c <File::~File()>:
c000859c:	83 ec 0c             	sub    esp,0xc
c000859f:	83 ec 0c             	sub    esp,0xc
c00085a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085a6:	e8 cd ff ff ff       	call   c0008578 <File::~File()>
c00085ab:	83 c4 10             	add    esp,0x10
c00085ae:	83 ec 08             	sub    esp,0x8
c00085b1:	68 14 01 00 00       	push   0x114
c00085b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ba:	e8 09 56 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00085bf:	83 c4 10             	add    esp,0x10
c00085c2:	83 c4 0c             	add    esp,0xc
c00085c5:	c3                   	ret    

c00085c6 <Directory::~Directory()>:
c00085c6:	83 ec 0c             	sub    esp,0xc
c00085c9:	ba f4 90 02 c0       	mov    edx,0xc00290f4
c00085ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085d2:	89 10                	mov    DWORD PTR [eax],edx
c00085d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085d8:	83 ec 0c             	sub    esp,0xc
c00085db:	50                   	push   eax
c00085dc:	e8 59 b2 00 00       	call   c001383a <UnixFile::~UnixFile()>
c00085e1:	83 c4 10             	add    esp,0x10
c00085e4:	90                   	nop
c00085e5:	83 c4 0c             	add    esp,0xc
c00085e8:	c3                   	ret    
c00085e9:	90                   	nop

c00085ea <Directory::~Directory()>:
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	83 ec 0c             	sub    esp,0xc
c00085f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f4:	e8 cd ff ff ff       	call   c00085c6 <Directory::~Directory()>
c00085f9:	83 c4 10             	add    esp,0x10
c00085fc:	83 ec 08             	sub    esp,0x8
c00085ff:	68 14 01 00 00       	push   0x114
c0008604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008608:	e8 bb 55 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000860d:	83 c4 10             	add    esp,0x10
c0008610:	83 c4 0c             	add    esp,0xc
c0008613:	c3                   	ret    

c0008614 <Filesystem::Filesystem()>:
c0008614:	ba 6c 90 02 c0       	mov    edx,0xc002906c
c0008619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000861d:	89 10                	mov    DWORD PTR [eax],edx
c000861f:	8b 15 04 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032304
c0008625:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008629:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000862c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008630:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c0008635:	90                   	nop
c0008636:	c3                   	ret    
c0008637:	90                   	nop

c0008638 <Filesystem::~Filesystem()>:
c0008638:	ba 6c 90 02 c0       	mov    edx,0xc002906c
c000863d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008641:	89 10                	mov    DWORD PTR [eax],edx
c0008643:	90                   	nop
c0008644:	c3                   	ret    
c0008645:	90                   	nop

c0008646 <Filesystem::~Filesystem()>:
c0008646:	83 ec 0c             	sub    esp,0xc
c0008649:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000864d:	e8 e6 ff ff ff       	call   c0008638 <Filesystem::~Filesystem()>
c0008652:	83 c4 04             	add    esp,0x4
c0008655:	83 ec 08             	sub    esp,0x8
c0008658:	6a 08                	push   0x8
c000865a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000865e:	e8 65 55 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0008663:	83 c4 10             	add    esp,0x10
c0008666:	83 c4 0c             	add    esp,0xc
c0008669:	c3                   	ret    

c000866a <Fs::getcwd(Process*, char*, int)>:
c000866a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000866e:	31 c0                	xor    eax,eax
c0008670:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0008673:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0008677:	7d 15                	jge    c000868e <Fs::getcwd(Process*, char*, int)+0x24>
c0008679:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000867d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0008684:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0008687:	84 c9                	test   cl,cl
c0008689:	74 06                	je     c0008691 <Fs::getcwd(Process*, char*, int)+0x27>
c000868b:	40                   	inc    eax
c000868c:	eb e2                	jmp    c0008670 <Fs::getcwd(Process*, char*, int)+0x6>
c000868e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0008691:	31 c0                	xor    eax,eax
c0008693:	c3                   	ret    

c0008694 <Fs::initVFS()>:
c0008694:	83 ec 18             	sub    esp,0x18
c0008697:	6a 08                	push   0x8
c0008699:	e8 1d 7a 00 00       	call   c00100bb <malloc>
c000869e:	89 04 24             	mov    DWORD PTR [esp],eax
c00086a1:	e8 a6 52 01 00       	call   c001d94c <FAT::FAT()>
c00086a6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00086ad:	e8 09 7a 00 00       	call   c00100bb <malloc>
c00086b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00086b5:	e8 be 61 01 00       	call   c001e878 <ISO9660::ISO9660()>
c00086ba:	83 c4 1c             	add    esp,0x1c
c00086bd:	c3                   	ret    

c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c00086be:	55                   	push   ebp
c00086bf:	57                   	push   edi
c00086c0:	56                   	push   esi
c00086c1:	53                   	push   ebx
c00086c2:	81 ec 10 04 00 00    	sub    esp,0x410
c00086c8:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c00086cf:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c00086d6:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c00086de:	68 00 04 00 00       	push   0x400
c00086e3:	6a 00                	push   0x0
c00086e5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00086e9:	57                   	push   edi
c00086ea:	e8 01 7e ff ff       	call   c00004f0 <memset>
c00086ef:	83 c4 10             	add    esp,0x10
c00086f2:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c00086f6:	75 0b                	jne    c0008703 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c00086f8:	50                   	push   eax
c00086f9:	50                   	push   eax
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	e8 3f 7f ff ff       	call   c0000640 <strcpy>
c0008701:	eb 51                	jmp    c0008754 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0008703:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0008707:	83 f8 5c             	cmp    eax,0x5c
c000870a:	74 05                	je     c0008711 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000870c:	83 f8 2f             	cmp    eax,0x2f
c000870f:	75 1e                	jne    c000872f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0008711:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0008718:	8a 00                	mov    al,BYTE PTR [eax]
c000871a:	3c 60                	cmp    al,0x60
c000871c:	7e 03                	jle    c0008721 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000871e:	83 e8 20             	sub    eax,0x20
c0008721:	88 04 24             	mov    BYTE PTR [esp],al
c0008724:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	eb 1e                	jmp    c000874d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000872f:	50                   	push   eax
c0008730:	50                   	push   eax
c0008731:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0008738:	57                   	push   edi
c0008739:	e8 02 7f ff ff       	call   c0000640 <strcpy>
c000873e:	58                   	pop    eax
c000873f:	5a                   	pop    edx
c0008740:	68 fe a9 02 c0       	push   0xc002a9fe
c0008745:	57                   	push   edi
c0008746:	e8 f5 80 ff ff       	call   c0000840 <strcat>
c000874b:	59                   	pop    ecx
c000874c:	58                   	pop    eax
c000874d:	55                   	push   ebp
c000874e:	57                   	push   edi
c000874f:	e8 ec 80 ff ff       	call   c0000840 <strcat>
c0008754:	83 c4 10             	add    esp,0x10
c0008757:	8a 04 24             	mov    al,BYTE PTR [esp]
c000875a:	3c 60                	cmp    al,0x60
c000875c:	7e 03                	jle    c0008761 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000875e:	83 e8 20             	sub    eax,0x20
c0008761:	88 04 24             	mov    BYTE PTR [esp],al
c0008764:	88 06                	mov    BYTE PTR [esi],al
c0008766:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000876d:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0008773:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0008777:	bf 03 00 00 00       	mov    edi,0x3
c000877c:	b8 03 00 00 00       	mov    eax,0x3
c0008781:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0008785:	89 e9                	mov    ecx,ebp
c0008787:	85 ed                	test   ebp,ebp
c0008789:	0f 84 97 00 00 00    	je     c0008826 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000878f:	8d 57 01             	lea    edx,[edi+0x1]
c0008792:	83 fd 5c             	cmp    ebp,0x5c
c0008795:	74 05                	je     c000879c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0008797:	83 fd 2f             	cmp    ebp,0x2f
c000879a:	75 12                	jne    c00087ae <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000879c:	89 c5                	mov    ebp,eax
c000879e:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c00087a3:	74 09                	je     c00087ae <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00087a5:	40                   	inc    eax
c00087a6:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c00087aa:	89 d7                	mov    edi,edx
c00087ac:	eb d3                	jmp    c0008781 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c00087ae:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00087b3:	0f be e9             	movsx  ebp,cl
c00087b6:	75 5e                	jne    c0008816 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c00087b8:	83 fd 2e             	cmp    ebp,0x2e
c00087bb:	75 59                	jne    c0008816 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c00087bd:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c00087c1:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c00087c6:	74 18                	je     c00087e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c00087c8:	83 fd 2e             	cmp    ebp,0x2e
c00087cb:	74 53                	je     c0008820 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c00087cd:	89 fa                	mov    edx,edi
c00087cf:	42                   	inc    edx
c00087d0:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c00087d4:	83 f9 2f             	cmp    ecx,0x2f
c00087d7:	74 f6                	je     c00087cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c00087d9:	83 f9 5c             	cmp    ecx,0x5c
c00087dc:	74 f1                	je     c00087cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c00087de:	eb ca                	jmp    c00087aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00087e0:	83 fd 2e             	cmp    ebp,0x2e
c00087e3:	74 3b                	je     c0008820 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c00087e5:	83 f8 03             	cmp    eax,0x3
c00087e8:	74 c0                	je     c00087aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00087ea:	42                   	inc    edx
c00087eb:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c00087ef:	83 f9 5c             	cmp    ecx,0x5c
c00087f2:	74 f6                	je     c00087ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c00087f4:	83 f9 2f             	cmp    ecx,0x2f
c00087f7:	74 f1                	je     c00087ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c00087f9:	48                   	dec    eax
c00087fa:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c00087fe:	75 06                	jne    c0008806 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0008800:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0008804:	eb f3                	jmp    c00087f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0008806:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000880a:	74 07                	je     c0008813 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000880c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0008810:	48                   	dec    eax
c0008811:	eb f3                	jmp    c0008806 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0008813:	40                   	inc    eax
c0008814:	eb 94                	jmp    c00087aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008816:	83 fd 5c             	cmp    ebp,0x5c
c0008819:	74 8f                	je     c00087aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000881b:	83 fd 2f             	cmp    ebp,0x2f
c000881e:	74 8a                	je     c00087aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008820:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0008823:	40                   	inc    eax
c0008824:	eb 84                	jmp    c00087aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008826:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	56                   	push   esi
c000882e:	e8 3d 7d ff ff       	call   c0000570 <strlen>
c0008833:	83 c4 10             	add    esp,0x10
c0008836:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000883b:	74 17                	je     c0008854 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000883d:	83 ec 0c             	sub    esp,0xc
c0008840:	56                   	push   esi
c0008841:	e8 2a 7d ff ff       	call   c0000570 <strlen>
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000884e:	74 04                	je     c0008854 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008850:	31 ff                	xor    edi,edi
c0008852:	eb 5c                	jmp    c00088b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008854:	83 ec 0c             	sub    esp,0xc
c0008857:	56                   	push   esi
c0008858:	e8 13 7d ff ff       	call   c0000570 <strlen>
c000885d:	83 c4 10             	add    esp,0x10
c0008860:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008865:	74 e9                	je     c0008850 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0008867:	83 ec 0c             	sub    esp,0xc
c000886a:	56                   	push   esi
c000886b:	e8 00 7d ff ff       	call   c0000570 <strlen>
c0008870:	83 c4 10             	add    esp,0x10
c0008873:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0008878:	eb b0                	jmp    c000882a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000887a:	52                   	push   edx
c000887b:	52                   	push   edx
c000887c:	56                   	push   esi
c000887d:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008881:	55                   	push   ebp
c0008882:	e8 b9 7d ff ff       	call   c0000640 <strcpy>
c0008887:	59                   	pop    ecx
c0008888:	58                   	pop    eax
c0008889:	56                   	push   esi
c000888a:	55                   	push   ebp
c000888b:	e8 b4 f8 ff ff       	call   c0008144 <KeDereferenceSymlink(char const*, char*)>
c0008890:	83 c4 10             	add    esp,0x10
c0008893:	48                   	dec    eax
c0008894:	75 37                	jne    c00088cd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008896:	50                   	push   eax
c0008897:	56                   	push   esi
c0008898:	55                   	push   ebp
c0008899:	68 0b 90 02 c0       	push   0xc002900b
c000889e:	e8 d9 e6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00088a3:	83 c4 10             	add    esp,0x10
c00088a6:	8d 47 01             	lea    eax,[edi+0x1]
c00088a9:	83 ff 14             	cmp    edi,0x14
c00088ac:	74 08                	je     c00088b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c00088ae:	89 c7                	mov    edi,eax
c00088b0:	85 db                	test   ebx,ebx
c00088b2:	75 c6                	jne    c000887a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c00088b4:	eb 17                	jmp    c00088cd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c00088b6:	83 ec 0c             	sub    esp,0xc
c00088b9:	bf 15 00 00 00       	mov    edi,0x15
c00088be:	68 26 90 02 c0       	push   0xc0029026
c00088c3:	e8 48 7c 00 00       	call   c0010510 <KePanic(char const*)>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb e3                	jmp    c00088b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c00088cd:	81 c4 0c 04 00 00    	add    esp,0x40c
c00088d3:	5b                   	pop    ebx
c00088d4:	5e                   	pop    esi
c00088d5:	5f                   	pop    edi
c00088d6:	5d                   	pop    ebp
c00088d7:	c3                   	ret    

c00088d8 <File::File(char const*, Process*, bool)>:
c00088d8:	83 ec 1c             	sub    esp,0x1c
c00088db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00088e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00088e7:	83 ec 08             	sub    esp,0x8
c00088ea:	6a 00                	push   0x0
c00088ec:	50                   	push   eax
c00088ed:	e8 62 ad 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c00088f2:	83 c4 10             	add    esp,0x10
c00088f5:	ba d8 90 02 c0       	mov    edx,0xc00290d8
c00088fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00088fe:	89 10                	mov    DWORD PTR [eax],edx
c0008900:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008905:	85 c0                	test   eax,eax
c0008907:	74 0f                	je     c0008918 <File::File(char const*, Process*, bool)+0x40>
c0008909:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000890e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008912:	74 04                	je     c0008918 <File::File(char const*, Process*, bool)+0x40>
c0008914:	b0 01                	mov    al,0x1
c0008916:	eb 02                	jmp    c000891a <File::File(char const*, Process*, bool)+0x42>
c0008918:	b0 00                	mov    al,0x0
c000891a:	0f b6 c0             	movzx  eax,al
c000891d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008921:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008927:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000892b:	83 c2 0d             	add    edx,0xd
c000892e:	50                   	push   eax
c000892f:	51                   	push   ecx
c0008930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008934:	52                   	push   edx
c0008935:	e8 84 fd ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000893a:	83 c4 10             	add    esp,0x10
c000893d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008941:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008944:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008948:	83 c2 0d             	add    edx,0xd
c000894b:	83 ec 04             	sub    esp,0x4
c000894e:	50                   	push   eax
c000894f:	52                   	push   edx
c0008950:	68 4c 90 02 c0       	push   0xc002904c
c0008955:	e8 22 e6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008961:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008964:	83 e8 41             	sub    eax,0x41
c0008967:	88 c2                	mov    dl,al
c0008969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000896d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008973:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008977:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000897b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000897f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008985:	0f b6 c0             	movzx  eax,al
c0008988:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c000898f:	85 c0                	test   eax,eax
c0008991:	74 3e                	je     c00089d1 <File::File(char const*, Process*, bool)+0xf9>
c0008993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008997:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000899d:	0f b6 c0             	movzx  eax,al
c00089a0:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c00089a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00089ad:	85 c0                	test   eax,eax
c00089af:	75 20                	jne    c00089d1 <File::File(char const*, Process*, bool)+0xf9>
c00089b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00089b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00089bb:	0f b6 c0             	movzx  eax,al
c00089be:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c00089c5:	83 ec 0c             	sub    esp,0xc
c00089c8:	50                   	push   eax
c00089c9:	e8 2e 28 00 00       	call   c000b1fc <LogicalDisk::mount()>
c00089ce:	83 c4 10             	add    esp,0x10
c00089d1:	90                   	nop
c00089d2:	83 c4 1c             	add    esp,0x1c
c00089d5:	c3                   	ret    

c00089d6 <File::File(char const*, Process*)>:
c00089d6:	83 ec 0c             	sub    esp,0xc
c00089d9:	6a 01                	push   0x1
c00089db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e7:	e8 ec fe ff ff       	call   c00088d8 <File::File(char const*, Process*, bool)>
c00089ec:	83 c4 10             	add    esp,0x10
c00089ef:	90                   	nop
c00089f0:	83 c4 0c             	add    esp,0xc
c00089f3:	c3                   	ret    

c00089f4 <File::open(FileOpenMode)>:
c00089f4:	53                   	push   ebx
c00089f5:	b8 0b 00 00 00       	mov    eax,0xb
c00089fa:	83 ec 08             	sub    esp,0x8
c00089fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a01:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008a08:	83 fa 19             	cmp    edx,0x19
c0008a0b:	77 40                	ja     c0008a4d <File::open(FileOpenMode)+0x59>
c0008a0d:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008a14:	85 d2                	test   edx,edx
c0008a16:	74 35                	je     c0008a4d <File::open(FileOpenMode)+0x59>
c0008a18:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008a1e:	85 d2                	test   edx,edx
c0008a20:	74 2b                	je     c0008a4d <File::open(FileOpenMode)+0x59>
c0008a22:	b8 06 00 00 00       	mov    eax,0x6
c0008a27:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008a2b:	75 20                	jne    c0008a4d <File::open(FileOpenMode)+0x59>
c0008a2d:	8b 02                	mov    eax,DWORD PTR [edx]
c0008a2f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008a35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a39:	51                   	push   ecx
c0008a3a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008a3d:	51                   	push   ecx
c0008a3e:	52                   	push   edx
c0008a3f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008a42:	83 c4 10             	add    esp,0x10
c0008a45:	85 c0                	test   eax,eax
c0008a47:	75 04                	jne    c0008a4d <File::open(FileOpenMode)+0x59>
c0008a49:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008a4d:	83 c4 08             	add    esp,0x8
c0008a50:	5b                   	pop    ebx
c0008a51:	c3                   	ret    

c0008a52 <File::close()>:
c0008a52:	53                   	push   ebx
c0008a53:	b8 0b 00 00 00       	mov    eax,0xb
c0008a58:	83 ec 08             	sub    esp,0x8
c0008a5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a5f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008a66:	83 f9 19             	cmp    ecx,0x19
c0008a69:	77 41                	ja     c0008aac <File::close()+0x5a>
c0008a6b:	8b 1c 8d e0 2a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcd520]
c0008a72:	85 db                	test   ebx,ebx
c0008a74:	74 36                	je     c0008aac <File::close()+0x5a>
c0008a76:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008a7d:	74 2d                	je     c0008aac <File::close()+0x5a>
c0008a7f:	b8 05 00 00 00       	mov    eax,0x5
c0008a84:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008a88:	74 22                	je     c0008aac <File::close()+0x5a>
c0008a8a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008a8e:	8b 04 8d e0 2a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcd520]
c0008a95:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008a9b:	53                   	push   ebx
c0008a9c:	53                   	push   ebx
c0008a9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008a9f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008aa5:	50                   	push   eax
c0008aa6:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008aa9:	83 c4 10             	add    esp,0x10
c0008aac:	83 c4 08             	add    esp,0x8
c0008aaf:	5b                   	pop    ebx
c0008ab0:	c3                   	ret    
c0008ab1:	90                   	nop

c0008ab2 <File::seek(unsigned long long)>:
c0008ab2:	56                   	push   esi
c0008ab3:	53                   	push   ebx
c0008ab4:	b8 0b 00 00 00       	mov    eax,0xb
c0008ab9:	51                   	push   ecx
c0008aba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008abe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ac2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008ac9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008acd:	83 fa 19             	cmp    edx,0x19
c0008ad0:	77 31                	ja     c0008b03 <File::seek(unsigned long long)+0x51>
c0008ad2:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008ad9:	85 d2                	test   edx,edx
c0008adb:	74 26                	je     c0008b03 <File::seek(unsigned long long)+0x51>
c0008add:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008ae3:	85 d2                	test   edx,edx
c0008ae5:	74 1c                	je     c0008b03 <File::seek(unsigned long long)+0x51>
c0008ae7:	b8 05 00 00 00       	mov    eax,0x5
c0008aec:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008af0:	74 11                	je     c0008b03 <File::seek(unsigned long long)+0x51>
c0008af2:	8b 02                	mov    eax,DWORD PTR [edx]
c0008af4:	53                   	push   ebx
c0008af5:	51                   	push   ecx
c0008af6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008afc:	52                   	push   edx
c0008afd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008b00:	83 c4 10             	add    esp,0x10
c0008b03:	5a                   	pop    edx
c0008b04:	5b                   	pop    ebx
c0008b05:	5e                   	pop    esi
c0008b06:	c3                   	ret    
c0008b07:	90                   	nop

c0008b08 <File::truncate(unsigned long long)>:
c0008b08:	56                   	push   esi
c0008b09:	53                   	push   ebx
c0008b0a:	b8 0b 00 00 00       	mov    eax,0xb
c0008b0f:	51                   	push   ecx
c0008b10:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008b14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b18:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008b1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b23:	83 fa 19             	cmp    edx,0x19
c0008b26:	77 31                	ja     c0008b59 <File::truncate(unsigned long long)+0x51>
c0008b28:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008b2f:	85 d2                	test   edx,edx
c0008b31:	74 26                	je     c0008b59 <File::truncate(unsigned long long)+0x51>
c0008b33:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008b39:	85 d2                	test   edx,edx
c0008b3b:	74 1c                	je     c0008b59 <File::truncate(unsigned long long)+0x51>
c0008b3d:	b8 05 00 00 00       	mov    eax,0x5
c0008b42:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008b46:	74 11                	je     c0008b59 <File::truncate(unsigned long long)+0x51>
c0008b48:	8b 02                	mov    eax,DWORD PTR [edx]
c0008b4a:	53                   	push   ebx
c0008b4b:	51                   	push   ecx
c0008b4c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008b52:	52                   	push   edx
c0008b53:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008b56:	83 c4 10             	add    esp,0x10
c0008b59:	5a                   	pop    edx
c0008b5a:	5b                   	pop    ebx
c0008b5b:	5e                   	pop    esi
c0008b5c:	c3                   	ret    
c0008b5d:	90                   	nop

c0008b5e <File::tell(unsigned long long*)>:
c0008b5e:	83 ec 0c             	sub    esp,0xc
c0008b61:	b8 0b 00 00 00       	mov    eax,0xb
c0008b66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008b6a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008b71:	83 fa 19             	cmp    edx,0x19
c0008b74:	77 34                	ja     c0008baa <File::tell(unsigned long long*)+0x4c>
c0008b76:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008b7d:	85 d2                	test   edx,edx
c0008b7f:	74 29                	je     c0008baa <File::tell(unsigned long long*)+0x4c>
c0008b81:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008b87:	85 d2                	test   edx,edx
c0008b89:	74 1f                	je     c0008baa <File::tell(unsigned long long*)+0x4c>
c0008b8b:	b8 05 00 00 00       	mov    eax,0x5
c0008b90:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008b94:	74 14                	je     c0008baa <File::tell(unsigned long long*)+0x4c>
c0008b96:	50                   	push   eax
c0008b97:	8b 02                	mov    eax,DWORD PTR [edx]
c0008b99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008b9d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008ba3:	52                   	push   edx
c0008ba4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	83 c4 0c             	add    esp,0xc
c0008bad:	c3                   	ret    

c0008bae <File::rewind()>:
c0008bae:	83 ec 10             	sub    esp,0x10
c0008bb1:	6a 00                	push   0x0
c0008bb3:	6a 00                	push   0x0
c0008bb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bb9:	e8 f4 fe ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0008bbe:	83 c4 1c             	add    esp,0x1c
c0008bc1:	c3                   	ret    

c0008bc2 <File::unlink()>:
c0008bc2:	83 ec 0c             	sub    esp,0xc
c0008bc5:	b8 0b 00 00 00       	mov    eax,0xb
c0008bca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008bd5:	83 f9 19             	cmp    ecx,0x19
c0008bd8:	77 2f                	ja     c0008c09 <File::unlink()+0x47>
c0008bda:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008be1:	85 c9                	test   ecx,ecx
c0008be3:	74 24                	je     c0008c09 <File::unlink()+0x47>
c0008be5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008beb:	85 c9                	test   ecx,ecx
c0008bed:	74 1a                	je     c0008c09 <File::unlink()+0x47>
c0008bef:	b8 06 00 00 00       	mov    eax,0x6
c0008bf4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008bf8:	75 0f                	jne    c0008c09 <File::unlink()+0x47>
c0008bfa:	83 c2 0d             	add    edx,0xd
c0008bfd:	50                   	push   eax
c0008bfe:	50                   	push   eax
c0008bff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c01:	52                   	push   edx
c0008c02:	51                   	push   ecx
c0008c03:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008c06:	83 c4 10             	add    esp,0x10
c0008c09:	83 c4 0c             	add    esp,0xc
c0008c0c:	c3                   	ret    
c0008c0d:	90                   	nop

c0008c0e <File::rename(char const*)>:
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	b8 0b 00 00 00       	mov    eax,0xb
c0008c16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c21:	83 f9 19             	cmp    ecx,0x19
c0008c24:	77 32                	ja     c0008c58 <File::rename(char const*)+0x4a>
c0008c26:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008c2d:	85 c9                	test   ecx,ecx
c0008c2f:	74 27                	je     c0008c58 <File::rename(char const*)+0x4a>
c0008c31:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008c37:	85 c9                	test   ecx,ecx
c0008c39:	74 1d                	je     c0008c58 <File::rename(char const*)+0x4a>
c0008c3b:	b8 06 00 00 00       	mov    eax,0x6
c0008c40:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c44:	75 12                	jne    c0008c58 <File::rename(char const*)+0x4a>
c0008c46:	83 c2 0d             	add    edx,0xd
c0008c49:	50                   	push   eax
c0008c4a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c50:	52                   	push   edx
c0008c51:	51                   	push   ecx
c0008c52:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008c55:	83 c4 10             	add    esp,0x10
c0008c58:	83 c4 0c             	add    esp,0xc
c0008c5b:	c3                   	ret    

c0008c5c <File::chfatattr(unsigned char, unsigned char)>:
c0008c5c:	57                   	push   edi
c0008c5d:	b8 0b 00 00 00       	mov    eax,0xb
c0008c62:	56                   	push   esi
c0008c63:	53                   	push   ebx
c0008c64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008c6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008c77:	83 f9 19             	cmp    ecx,0x19
c0008c7a:	77 37                	ja     c0008cb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c7c:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008c83:	85 c9                	test   ecx,ecx
c0008c85:	74 2c                	je     c0008cb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c87:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008c8d:	85 c9                	test   ecx,ecx
c0008c8f:	74 22                	je     c0008cb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c91:	b8 06 00 00 00       	mov    eax,0x6
c0008c96:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c9a:	75 17                	jne    c0008cb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c9c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008c9e:	89 f0                	mov    eax,esi
c0008ca0:	83 c2 0d             	add    edx,0xd
c0008ca3:	0f b6 f0             	movzx  esi,al
c0008ca6:	0f b6 db             	movzx  ebx,bl
c0008ca9:	56                   	push   esi
c0008caa:	53                   	push   ebx
c0008cab:	52                   	push   edx
c0008cac:	51                   	push   ecx
c0008cad:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008cb0:	83 c4 10             	add    esp,0x10
c0008cb3:	5b                   	pop    ebx
c0008cb4:	5e                   	pop    esi
c0008cb5:	5f                   	pop    edi
c0008cb6:	c3                   	ret    
c0008cb7:	90                   	nop

c0008cb8 <File::exists()>:
c0008cb8:	83 ec 0c             	sub    esp,0xc
c0008cbb:	31 c0                	xor    eax,eax
c0008cbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008cc1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008cc8:	83 f9 19             	cmp    ecx,0x19
c0008ccb:	77 24                	ja     c0008cf1 <File::exists()+0x39>
c0008ccd:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008cd4:	85 c9                	test   ecx,ecx
c0008cd6:	74 19                	je     c0008cf1 <File::exists()+0x39>
c0008cd8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008cde:	85 c9                	test   ecx,ecx
c0008ce0:	74 0f                	je     c0008cf1 <File::exists()+0x39>
c0008ce2:	83 c2 0d             	add    edx,0xd
c0008ce5:	50                   	push   eax
c0008ce6:	50                   	push   eax
c0008ce7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008ce9:	52                   	push   edx
c0008cea:	51                   	push   ecx
c0008ceb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008cee:	83 c4 10             	add    esp,0x10
c0008cf1:	83 c4 0c             	add    esp,0xc
c0008cf4:	c3                   	ret    
c0008cf5:	90                   	nop

c0008cf6 <File::stat(unsigned long long*, bool*)>:
c0008cf6:	56                   	push   esi
c0008cf7:	53                   	push   ebx
c0008cf8:	50                   	push   eax
c0008cf9:	b8 0b 00 00 00       	mov    eax,0xb
c0008cfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008d0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d11:	83 f9 19             	cmp    ecx,0x19
c0008d14:	77 3d                	ja     c0008d53 <File::stat(unsigned long long*, bool*)+0x5d>
c0008d16:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008d1d:	85 c9                	test   ecx,ecx
c0008d1f:	74 32                	je     c0008d53 <File::stat(unsigned long long*, bool*)+0x5d>
c0008d21:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008d27:	85 c9                	test   ecx,ecx
c0008d29:	74 28                	je     c0008d53 <File::stat(unsigned long long*, bool*)+0x5d>
c0008d2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d2d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008d31:	74 13                	je     c0008d46 <File::stat(unsigned long long*, bool*)+0x50>
c0008d33:	83 ec 04             	sub    esp,0x4
c0008d36:	56                   	push   esi
c0008d37:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008d3d:	51                   	push   ecx
c0008d3e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008d41:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008d44:	eb 0a                	jmp    c0008d50 <File::stat(unsigned long long*, bool*)+0x5a>
c0008d46:	53                   	push   ebx
c0008d47:	83 c2 0d             	add    edx,0xd
c0008d4a:	56                   	push   esi
c0008d4b:	52                   	push   edx
c0008d4c:	51                   	push   ecx
c0008d4d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008d50:	83 c4 10             	add    esp,0x10
c0008d53:	5a                   	pop    edx
c0008d54:	5b                   	pop    ebx
c0008d55:	5e                   	pop    esi
c0008d56:	c3                   	ret    

c0008d57 <Fs::setcwd(Process*, char*)>:
c0008d57:	55                   	push   ebp
c0008d58:	57                   	push   edi
c0008d59:	56                   	push   esi
c0008d5a:	53                   	push   ebx
c0008d5b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008d61:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c0008d68:	6a 00                	push   0x0
c0008d6a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008d70:	57                   	push   edi
c0008d71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008d78:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008d7c:	56                   	push   esi
c0008d7d:	e8 3c f9 ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008d82:	89 34 24             	mov    DWORD PTR [esp],esi
c0008d85:	e8 e6 77 ff ff       	call   c0000570 <strlen>
c0008d8a:	83 c4 10             	add    esp,0x10
c0008d8d:	83 f8 02             	cmp    eax,0x2
c0008d90:	77 15                	ja     c0008da7 <Fs::setcwd(Process*, char*)+0x50>
c0008d92:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008d97:	83 eb 41             	sub    ebx,0x41
c0008d9a:	8b 04 9d e0 2a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcd520]
c0008da1:	85 c0                	test   eax,eax
c0008da3:	75 1c                	jne    c0008dc1 <Fs::setcwd(Process*, char*)+0x6a>
c0008da5:	eb 2f                	jmp    c0008dd6 <Fs::setcwd(Process*, char*)+0x7f>
c0008da7:	83 ec 0c             	sub    esp,0xc
c0008daa:	56                   	push   esi
c0008dab:	e8 c0 77 ff ff       	call   c0000570 <strlen>
c0008db0:	83 c4 10             	add    esp,0x10
c0008db3:	83 f8 03             	cmp    eax,0x3
c0008db6:	75 57                	jne    c0008e0f <Fs::setcwd(Process*, char*)+0xb8>
c0008db8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008dbd:	75 50                	jne    c0008e0f <Fs::setcwd(Process*, char*)+0xb8>
c0008dbf:	eb d1                	jmp    c0008d92 <Fs::setcwd(Process*, char*)+0x3b>
c0008dc1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008dc8:	75 0c                	jne    c0008dd6 <Fs::setcwd(Process*, char*)+0x7f>
c0008dca:	83 ec 0c             	sub    esp,0xc
c0008dcd:	50                   	push   eax
c0008dce:	e8 29 24 00 00       	call   c000b1fc <LogicalDisk::mount()>
c0008dd3:	83 c4 10             	add    esp,0x10
c0008dd6:	b8 03 00 00 00       	mov    eax,0x3
c0008ddb:	83 fb 19             	cmp    ebx,0x19
c0008dde:	0f 87 c6 00 00 00    	ja     c0008eaa <Fs::setcwd(Process*, char*)+0x153>
c0008de4:	8b 14 9d e0 2a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffcd520]
c0008deb:	b8 05 00 00 00       	mov    eax,0x5
c0008df0:	85 d2                	test   edx,edx
c0008df2:	0f 84 b2 00 00 00    	je     c0008eaa <Fs::setcwd(Process*, char*)+0x153>
c0008df8:	b8 06 00 00 00       	mov    eax,0x6
c0008dfd:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008e04:	0f 85 92 00 00 00    	jne    c0008e9c <Fs::setcwd(Process*, char*)+0x145>
c0008e0a:	e9 9b 00 00 00       	jmp    c0008eaa <Fs::setcwd(Process*, char*)+0x153>
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	68 14 01 00 00       	push   0x114
c0008e17:	e8 9f 72 00 00       	call   c00100bb <malloc>
c0008e1c:	83 c4 0c             	add    esp,0xc
c0008e1f:	89 c3                	mov    ebx,eax
c0008e21:	55                   	push   ebp
c0008e22:	56                   	push   esi
c0008e23:	50                   	push   eax
c0008e24:	e8 ad fb ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c0008e29:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008e2e:	83 c4 0c             	add    esp,0xc
c0008e31:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008e35:	50                   	push   eax
c0008e36:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008e3a:	50                   	push   eax
c0008e3b:	53                   	push   ebx
c0008e3c:	e8 b5 fe ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c0008e41:	83 c4 10             	add    esp,0x10
c0008e44:	83 f8 02             	cmp    eax,0x2
c0008e47:	74 27                	je     c0008e70 <Fs::setcwd(Process*, char*)+0x119>
c0008e49:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008e4e:	75 1c                	jne    c0008e6c <Fs::setcwd(Process*, char*)+0x115>
c0008e50:	b8 02 00 00 00       	mov    eax,0x2
c0008e55:	85 db                	test   ebx,ebx
c0008e57:	74 51                	je     c0008eaa <Fs::setcwd(Process*, char*)+0x153>
c0008e59:	83 ec 0c             	sub    esp,0xc
c0008e5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008e5e:	53                   	push   ebx
c0008e5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008e62:	83 c4 10             	add    esp,0x10
c0008e65:	b8 02 00 00 00       	mov    eax,0x2
c0008e6a:	eb 3e                	jmp    c0008eaa <Fs::setcwd(Process*, char*)+0x153>
c0008e6c:	85 c0                	test   eax,eax
c0008e6e:	74 1c                	je     c0008e8c <Fs::setcwd(Process*, char*)+0x135>
c0008e70:	b8 01 00 00 00       	mov    eax,0x1
c0008e75:	85 db                	test   ebx,ebx
c0008e77:	74 31                	je     c0008eaa <Fs::setcwd(Process*, char*)+0x153>
c0008e79:	83 ec 0c             	sub    esp,0xc
c0008e7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008e7e:	53                   	push   ebx
c0008e7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	b8 01 00 00 00       	mov    eax,0x1
c0008e8a:	eb 1e                	jmp    c0008eaa <Fs::setcwd(Process*, char*)+0x153>
c0008e8c:	85 db                	test   ebx,ebx
c0008e8e:	74 0c                	je     c0008e9c <Fs::setcwd(Process*, char*)+0x145>
c0008e90:	83 ec 0c             	sub    esp,0xc
c0008e93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008e95:	53                   	push   ebx
c0008e96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	50                   	push   eax
c0008e9d:	50                   	push   eax
c0008e9e:	56                   	push   esi
c0008e9f:	57                   	push   edi
c0008ea0:	e8 9b 77 ff ff       	call   c0000640 <strcpy>
c0008ea5:	83 c4 10             	add    esp,0x10
c0008ea8:	31 c0                	xor    eax,eax
c0008eaa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008eb0:	5b                   	pop    ebx
c0008eb1:	5e                   	pop    esi
c0008eb2:	5f                   	pop    edi
c0008eb3:	5d                   	pop    ebp
c0008eb4:	c3                   	ret    
c0008eb5:	90                   	nop

c0008eb6 <Directory::Directory(char const*, Process*)>:
c0008eb6:	83 ec 0c             	sub    esp,0xc
c0008eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ebd:	83 ec 08             	sub    esp,0x8
c0008ec0:	6a 00                	push   0x0
c0008ec2:	50                   	push   eax
c0008ec3:	e8 8c a7 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	ba f4 90 02 c0       	mov    edx,0xc00290f4
c0008ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ed4:	89 10                	mov    DWORD PTR [eax],edx
c0008ed6:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0008edb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008edf:	0f 95 c0             	setne  al
c0008ee2:	0f b6 c0             	movzx  eax,al
c0008ee5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008ee9:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ef3:	83 c2 0d             	add    edx,0xd
c0008ef6:	50                   	push   eax
c0008ef7:	51                   	push   ecx
c0008ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008efc:	52                   	push   edx
c0008efd:	e8 bc f7 ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f09:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008f0c:	83 e8 41             	sub    eax,0x41
c0008f0f:	88 c2                	mov    dl,al
c0008f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f15:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f1f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f27:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008f2d:	0f b6 c0             	movzx  eax,al
c0008f30:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008f37:	85 c0                	test   eax,eax
c0008f39:	74 3e                	je     c0008f79 <Directory::Directory(char const*, Process*)+0xc3>
c0008f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f3f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008f45:	0f b6 c0             	movzx  eax,al
c0008f48:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008f4f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008f55:	85 c0                	test   eax,eax
c0008f57:	75 20                	jne    c0008f79 <Directory::Directory(char const*, Process*)+0xc3>
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008f63:	0f b6 c0             	movzx  eax,al
c0008f66:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008f6d:	83 ec 0c             	sub    esp,0xc
c0008f70:	50                   	push   eax
c0008f71:	e8 86 22 00 00       	call   c000b1fc <LogicalDisk::mount()>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	90                   	nop
c0008f7a:	83 c4 0c             	add    esp,0xc
c0008f7d:	c3                   	ret    

c0008f7e <Directory::open()>:
c0008f7e:	53                   	push   ebx
c0008f7f:	b8 0b 00 00 00       	mov    eax,0xb
c0008f84:	83 ec 08             	sub    esp,0x8
c0008f87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f8b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008f92:	83 fa 19             	cmp    edx,0x19
c0008f95:	77 3d                	ja     c0008fd4 <Directory::open()+0x56>
c0008f97:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008f9e:	85 d2                	test   edx,edx
c0008fa0:	74 32                	je     c0008fd4 <Directory::open()+0x56>
c0008fa2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008fa8:	85 d2                	test   edx,edx
c0008faa:	74 28                	je     c0008fd4 <Directory::open()+0x56>
c0008fac:	b8 06 00 00 00       	mov    eax,0x6
c0008fb1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008fb5:	75 1d                	jne    c0008fd4 <Directory::open()+0x56>
c0008fb7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008fbd:	50                   	push   eax
c0008fbe:	8b 02                	mov    eax,DWORD PTR [edx]
c0008fc0:	51                   	push   ecx
c0008fc1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008fc4:	51                   	push   ecx
c0008fc5:	52                   	push   edx
c0008fc6:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008fc9:	83 c4 10             	add    esp,0x10
c0008fcc:	85 c0                	test   eax,eax
c0008fce:	75 04                	jne    c0008fd4 <Directory::open()+0x56>
c0008fd0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008fd4:	83 c4 08             	add    esp,0x8
c0008fd7:	5b                   	pop    ebx
c0008fd8:	c3                   	ret    
c0008fd9:	90                   	nop

c0008fda <Directory::close()>:
c0008fda:	53                   	push   ebx
c0008fdb:	b8 0b 00 00 00       	mov    eax,0xb
c0008fe0:	83 ec 08             	sub    esp,0x8
c0008fe3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fe7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008fee:	83 f9 19             	cmp    ecx,0x19
c0008ff1:	77 41                	ja     c0009034 <Directory::close()+0x5a>
c0008ff3:	8b 1c 8d e0 2a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcd520]
c0008ffa:	85 db                	test   ebx,ebx
c0008ffc:	74 36                	je     c0009034 <Directory::close()+0x5a>
c0008ffe:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0009005:	74 2d                	je     c0009034 <Directory::close()+0x5a>
c0009007:	b8 05 00 00 00       	mov    eax,0x5
c000900c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009010:	74 22                	je     c0009034 <Directory::close()+0x5a>
c0009012:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0009016:	8b 04 8d e0 2a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcd520]
c000901d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009023:	53                   	push   ebx
c0009024:	53                   	push   ebx
c0009025:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009027:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000902d:	50                   	push   eax
c000902e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	83 c4 08             	add    esp,0x8
c0009037:	5b                   	pop    ebx
c0009038:	c3                   	ret    
c0009039:	90                   	nop

c000903a <Directory::unlink()>:
c000903a:	83 ec 0c             	sub    esp,0xc
c000903d:	b8 0b 00 00 00       	mov    eax,0xb
c0009042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009046:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000904d:	83 f9 19             	cmp    ecx,0x19
c0009050:	77 2f                	ja     c0009081 <Directory::unlink()+0x47>
c0009052:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0009059:	85 c9                	test   ecx,ecx
c000905b:	74 24                	je     c0009081 <Directory::unlink()+0x47>
c000905d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009063:	85 c9                	test   ecx,ecx
c0009065:	74 1a                	je     c0009081 <Directory::unlink()+0x47>
c0009067:	b8 06 00 00 00       	mov    eax,0x6
c000906c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009070:	75 0f                	jne    c0009081 <Directory::unlink()+0x47>
c0009072:	83 c2 0d             	add    edx,0xd
c0009075:	50                   	push   eax
c0009076:	50                   	push   eax
c0009077:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009079:	52                   	push   edx
c000907a:	51                   	push   ecx
c000907b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000907e:	83 c4 10             	add    esp,0x10
c0009081:	83 c4 0c             	add    esp,0xc
c0009084:	c3                   	ret    
c0009085:	90                   	nop

c0009086 <Directory::rename(char const*)>:
c0009086:	83 ec 0c             	sub    esp,0xc
c0009089:	b8 0b 00 00 00       	mov    eax,0xb
c000908e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009092:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009099:	83 f9 19             	cmp    ecx,0x19
c000909c:	77 32                	ja     c00090d0 <Directory::rename(char const*)+0x4a>
c000909e:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c00090a5:	85 c9                	test   ecx,ecx
c00090a7:	74 27                	je     c00090d0 <Directory::rename(char const*)+0x4a>
c00090a9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00090af:	85 c9                	test   ecx,ecx
c00090b1:	74 1d                	je     c00090d0 <Directory::rename(char const*)+0x4a>
c00090b3:	b8 06 00 00 00       	mov    eax,0x6
c00090b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00090bc:	75 12                	jne    c00090d0 <Directory::rename(char const*)+0x4a>
c00090be:	83 c2 0d             	add    edx,0xd
c00090c1:	50                   	push   eax
c00090c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00090c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00090c8:	52                   	push   edx
c00090c9:	51                   	push   ecx
c00090ca:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00090cd:	83 c4 10             	add    esp,0x10
c00090d0:	83 c4 0c             	add    esp,0xc
c00090d3:	c3                   	ret    

c00090d4 <Directory::exists()>:
c00090d4:	83 ec 0c             	sub    esp,0xc
c00090d7:	31 c0                	xor    eax,eax
c00090d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090dd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00090e4:	83 f9 19             	cmp    ecx,0x19
c00090e7:	77 24                	ja     c000910d <Directory::exists()+0x39>
c00090e9:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c00090f0:	85 c9                	test   ecx,ecx
c00090f2:	74 19                	je     c000910d <Directory::exists()+0x39>
c00090f4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00090fa:	85 c9                	test   ecx,ecx
c00090fc:	74 0f                	je     c000910d <Directory::exists()+0x39>
c00090fe:	83 c2 0d             	add    edx,0xd
c0009101:	50                   	push   eax
c0009102:	50                   	push   eax
c0009103:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009105:	52                   	push   edx
c0009106:	51                   	push   ecx
c0009107:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000910a:	83 c4 10             	add    esp,0x10
c000910d:	83 c4 0c             	add    esp,0xc
c0009110:	c3                   	ret    
c0009111:	90                   	nop

c0009112 <Directory::read(dirent*)>:
c0009112:	83 ec 1c             	sub    esp,0x1c
c0009115:	b8 0b 00 00 00       	mov    eax,0xb
c000911a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000911e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009125:	83 f9 19             	cmp    ecx,0x19
c0009128:	77 30                	ja     c000915a <Directory::read(dirent*)+0x48>
c000912a:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0009131:	85 c9                	test   ecx,ecx
c0009133:	74 25                	je     c000915a <Directory::read(dirent*)+0x48>
c0009135:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000913c:	74 1c                	je     c000915a <Directory::read(dirent*)+0x48>
c000913e:	83 ec 0c             	sub    esp,0xc
c0009141:	8b 02                	mov    eax,DWORD PTR [edx]
c0009143:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0009147:	51                   	push   ecx
c0009148:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000914c:	6a 00                	push   0x0
c000914e:	68 10 01 00 00       	push   0x110
c0009153:	52                   	push   edx
c0009154:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009157:	83 c4 20             	add    esp,0x20
c000915a:	83 c4 1c             	add    esp,0x1c
c000915d:	c3                   	ret    

c000915e <Directory::create()>:
c000915e:	83 ec 0c             	sub    esp,0xc
c0009161:	b8 0b 00 00 00       	mov    eax,0xb
c0009166:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000916a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009171:	83 f9 19             	cmp    ecx,0x19
c0009174:	77 2f                	ja     c00091a5 <Directory::create()+0x47>
c0009176:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c000917d:	85 c9                	test   ecx,ecx
c000917f:	74 24                	je     c00091a5 <Directory::create()+0x47>
c0009181:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009187:	85 c9                	test   ecx,ecx
c0009189:	74 1a                	je     c00091a5 <Directory::create()+0x47>
c000918b:	b8 06 00 00 00       	mov    eax,0x6
c0009190:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009194:	75 0f                	jne    c00091a5 <Directory::create()+0x47>
c0009196:	83 c2 0d             	add    edx,0xd
c0009199:	50                   	push   eax
c000919a:	50                   	push   eax
c000919b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000919d:	52                   	push   edx
c000919e:	51                   	push   ecx
c000919f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00091a2:	83 c4 10             	add    esp,0x10
c00091a5:	83 c4 0c             	add    esp,0xc
c00091a8:	c3                   	ret    
c00091a9:	90                   	nop

c00091aa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00091aa:	b8 0a 00 00 00       	mov    eax,0xa
c00091af:	c3                   	ret    

c00091b0 <Bus::Bus(char const*)>:
c00091b0:	83 ec 0c             	sub    esp,0xc
c00091b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b7:	83 ec 08             	sub    esp,0x8
c00091ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091be:	50                   	push   eax
c00091bf:	e8 3e 12 00 00       	call   c000a402 <Device::Device(char const*)>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	ba 10 91 02 c0       	mov    edx,0xc0029110
c00091cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091d0:	89 10                	mov    DWORD PTR [eax],edx
c00091d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091d6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00091e0:	90                   	nop
c00091e1:	83 c4 0c             	add    esp,0xc
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop
c00091e6:	66 90                	xchg   ax,ax

c00091e8 <Bus::~Bus()>:
c00091e8:	83 ec 0c             	sub    esp,0xc
c00091eb:	ba 10 91 02 c0       	mov    edx,0xc0029110
c00091f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091f4:	89 10                	mov    DWORD PTR [eax],edx
c00091f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091fa:	83 ec 0c             	sub    esp,0xc
c00091fd:	50                   	push   eax
c00091fe:	e8 9f 0f 00 00       	call   c000a1a2 <Device::~Device()>
c0009203:	83 c4 10             	add    esp,0x10
c0009206:	90                   	nop
c0009207:	83 c4 0c             	add    esp,0xc
c000920a:	c3                   	ret    
c000920b:	90                   	nop

c000920c <Bus::~Bus()>:
c000920c:	83 ec 0c             	sub    esp,0xc
c000920f:	83 ec 0c             	sub    esp,0xc
c0009212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009216:	e8 cd ff ff ff       	call   c00091e8 <Bus::~Bus()>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	83 ec 08             	sub    esp,0x8
c0009221:	68 58 01 00 00       	push   0x158
c0009226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000922a:	e8 99 49 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000922f:	83 c4 10             	add    esp,0x10
c0009232:	83 c4 0c             	add    esp,0xc
c0009235:	c3                   	ret    

c0009236 <KeBeepThread(void*)>:
c0009236:	83 ec 0c             	sub    esp,0xc
c0009239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000923d:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0009244:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000924b:	75 01                	jne    c000924e <KeBeepThread(void*)+0x18>
c000924d:	fb                   	sti    
c000924e:	6b c0 0a             	imul   eax,eax,0xa
c0009251:	52                   	push   edx
c0009252:	52                   	push   edx
c0009253:	99                   	cdq    
c0009254:	52                   	push   edx
c0009255:	50                   	push   eax
c0009256:	e8 41 e0 00 00       	call   c001729c <milliTenthSleep(unsigned long long)>
c000925b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009262:	e8 38 21 01 00       	call   c001b39f <HalMakeBeep(int)>
c0009267:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000926f:	83 c4 1c             	add    esp,0x1c
c0009272:	e9 f1 de 00 00       	jmp    c0017168 <blockTask(TaskState)>

c0009277 <KeBeep(int, int, bool)>:
c0009277:	56                   	push   esi
c0009278:	53                   	push   ebx
c0009279:	83 ec 10             	sub    esp,0x10
c000927c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009280:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 12 21 01 00       	call   c001b39f <HalMakeBeep(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 f0                	mov    eax,esi
c0009292:	84 c0                	test   al,al
c0009294:	74 1f                	je     c00092b5 <KeBeep(int, int, bool)+0x3e>
c0009296:	50                   	push   eax
c0009297:	50                   	push   eax
c0009298:	6b c3 0a             	imul   eax,ebx,0xa
c000929b:	99                   	cdq    
c000929c:	52                   	push   edx
c000929d:	50                   	push   eax
c000929e:	e8 f9 df 00 00       	call   c001729c <milliTenthSleep(unsigned long long)>
c00092a3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00092ab:	83 c4 14             	add    esp,0x14
c00092ae:	5b                   	pop    ebx
c00092af:	5e                   	pop    esi
c00092b0:	e9 ea 20 01 00       	jmp    c001b39f <HalMakeBeep(int)>
c00092b5:	68 e6 00 00 00       	push   0xe6
c00092ba:	53                   	push   ebx
c00092bb:	68 36 92 00 c0       	push   0xc0009236
c00092c0:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c00092c6:	e8 11 db 00 00       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c00092cb:	83 c4 14             	add    esp,0x14
c00092ce:	5b                   	pop    ebx
c00092cf:	5e                   	pop    esi
c00092d0:	c3                   	ret    
c00092d1:	90                   	nop

c00092d2 <KeLoadTimezoneStrings()>:
c00092d2:	55                   	push   ebp
c00092d3:	89 e5                	mov    ebp,esp
c00092d5:	53                   	push   ebx
c00092d6:	83 ec 44             	sub    esp,0x44
c00092d9:	c6 05 20 23 03 c0 01 	mov    BYTE PTR ds:0xc0032320,0x1
c00092e0:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c00092e7:	83 ec 0c             	sub    esp,0xc
c00092ea:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00092ed:	e8 c9 6d 00 00       	call   c00100bb <malloc>
c00092f2:	83 c4 10             	add    esp,0x10
c00092f5:	89 c3                	mov    ebx,eax
c00092f7:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c00092fc:	83 ec 04             	sub    esp,0x4
c00092ff:	50                   	push   eax
c0009300:	68 40 91 02 c0       	push   0xc0029140
c0009305:	53                   	push   ebx
c0009306:	e8 cb f6 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c000930b:	83 c4 10             	add    esp,0x10
c000930e:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0009311:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0009315:	75 10                	jne    c0009327 <KeLoadTimezoneStrings()+0x55>
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	68 5f 91 02 c0       	push   0xc002915f
c000931f:	e8 ec 71 00 00       	call   c0010510 <KePanic(char const*)>
c0009324:	83 c4 10             	add    esp,0x10
c0009327:	83 ec 08             	sub    esp,0x8
c000932a:	6a 01                	push   0x1
c000932c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000932f:	e8 c0 f6 ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c0009334:	83 c4 10             	add    esp,0x10
c0009337:	83 ec 04             	sub    esp,0x4
c000933a:	8d 45 cf             	lea    eax,[ebp-0x31]
c000933d:	50                   	push   eax
c000933e:	8d 45 d0             	lea    eax,[ebp-0x30]
c0009341:	50                   	push   eax
c0009342:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009345:	e8 ac f9 ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009350:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009353:	83 ec 08             	sub    esp,0x8
c0009356:	50                   	push   eax
c0009357:	68 75 91 02 c0       	push   0xc0029175
c000935c:	e8 1b dc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009361:	83 c4 10             	add    esp,0x10
c0009364:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009367:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000936a:	83 c0 01             	add    eax,0x1
c000936d:	83 ec 0c             	sub    esp,0xc
c0009370:	50                   	push   eax
c0009371:	e8 45 6d 00 00       	call   c00100bb <malloc>
c0009376:	83 c4 10             	add    esp,0x10
c0009379:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000937c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000937f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009382:	83 ec 04             	sub    esp,0x4
c0009385:	50                   	push   eax
c0009386:	6a 00                	push   0x0
c0009388:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000938b:	e8 60 71 ff ff       	call   c00004f0 <memset>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009396:	8b 00                	mov    eax,DWORD PTR [eax]
c0009398:	83 c0 0c             	add    eax,0xc
c000939b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000939d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00093a0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00093a3:	83 ec 0c             	sub    esp,0xc
c00093a6:	8d 5d c8             	lea    ebx,[ebp-0x38]
c00093a9:	53                   	push   ebx
c00093aa:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00093ad:	52                   	push   edx
c00093ae:	50                   	push   eax
c00093af:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00093b2:	ff d1                	call   ecx
c00093b4:	83 c4 20             	add    esp,0x20
c00093b7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00093ba:	83 ec 08             	sub    esp,0x8
c00093bd:	50                   	push   eax
c00093be:	68 85 91 02 c0       	push   0xc0029185
c00093c3:	e8 b4 db ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00093c8:	83 c4 10             	add    esp,0x10
c00093cb:	83 ec 0c             	sub    esp,0xc
c00093ce:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00093d1:	e8 7c f6 ff ff       	call   c0008a52 <File::close()>
c00093d6:	83 c4 10             	add    esp,0x10
c00093d9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00093dd:	74 15                	je     c00093f4 <KeLoadTimezoneStrings()+0x122>
c00093df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00093e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00093e4:	83 c0 08             	add    eax,0x8
c00093e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00093e9:	83 ec 0c             	sub    esp,0xc
c00093ec:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00093ef:	ff d0                	call   eax
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00093fb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0009402:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0009409:	7f 3a                	jg     c0009445 <KeLoadTimezoneStrings()+0x173>
c000940b:	83 ec 0c             	sub    esp,0xc
c000940e:	6a 78                	push   0x78
c0009410:	e8 a6 6c 00 00       	call   c00100bb <malloc>
c0009415:	83 c4 10             	add    esp,0x10
c0009418:	89 c2                	mov    edx,eax
c000941a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000941d:	89 14 85 40 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdcc0],edx
c0009424:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009427:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	68 8e 91 02 c0       	push   0xc002918e
c0009436:	50                   	push   eax
c0009437:	e8 04 72 ff ff       	call   c0000640 <strcpy>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0009443:	eb bd                	jmp    c0009402 <KeLoadTimezoneStrings()+0x130>
c0009445:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000944c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000944f:	8d 50 01             	lea    edx,[eax+0x1]
c0009452:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0009455:	89 c2                	mov    edx,eax
c0009457:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000945a:	01 d0                	add    eax,edx
c000945c:	8a 00                	mov    al,BYTE PTR [eax]
c000945e:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0009461:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0009465:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009468:	0f be c0             	movsx  eax,al
c000946b:	83 f8 0d             	cmp    eax,0xd
c000946e:	0f 84 82 01 00 00    	je     c00095f6 <KeLoadTimezoneStrings()+0x324>
c0009474:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009477:	0f be c0             	movsx  eax,al
c000947a:	83 f8 09             	cmp    eax,0x9
c000947d:	75 44                	jne    c00094c3 <KeLoadTimezoneStrings()+0x1f1>
c000947f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009482:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009489:	83 ec 0c             	sub    esp,0xc
c000948c:	50                   	push   eax
c000948d:	e8 de 70 ff ff       	call   c0000570 <strlen>
c0009492:	83 c4 10             	add    esp,0x10
c0009495:	83 f8 08             	cmp    eax,0x8
c0009498:	0f 96 c0             	setbe  al
c000949b:	0f b6 c0             	movzx  eax,al
c000949e:	85 c0                	test   eax,eax
c00094a0:	0f 84 56 01 00 00    	je     c00095fc <KeLoadTimezoneStrings()+0x32a>
c00094a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094a9:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00094b0:	83 ec 08             	sub    esp,0x8
c00094b3:	68 8e 91 02 c0       	push   0xc002918e
c00094b8:	50                   	push   eax
c00094b9:	e8 82 73 ff ff       	call   c0000840 <strcat>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	eb bc                	jmp    c000947f <KeLoadTimezoneStrings()+0x1ad>
c00094c3:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00094c6:	0f be c0             	movsx  eax,al
c00094c9:	83 f8 0a             	cmp    eax,0xa
c00094cc:	0f 85 9b 00 00 00    	jne    c000956d <KeLoadTimezoneStrings()+0x29b>
c00094d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094d5:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00094dc:	83 ec 0c             	sub    esp,0xc
c00094df:	50                   	push   eax
c00094e0:	e8 8b 70 ff ff       	call   c0000570 <strlen>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	83 f8 35             	cmp    eax,0x35
c00094eb:	0f 96 c0             	setbe  al
c00094ee:	0f b6 c0             	movzx  eax,al
c00094f1:	85 c0                	test   eax,eax
c00094f3:	74 1d                	je     c0009512 <KeLoadTimezoneStrings()+0x240>
c00094f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094f8:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00094ff:	83 ec 08             	sub    esp,0x8
c0009502:	68 8e 91 02 c0       	push   0xc002918e
c0009507:	50                   	push   eax
c0009508:	e8 33 73 ff ff       	call   c0000840 <strcat>
c000950d:	83 c4 10             	add    esp,0x10
c0009510:	eb c0                	jmp    c00094d2 <KeLoadTimezoneStrings()+0x200>
c0009512:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009516:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009519:	89 c2                	mov    edx,eax
c000951b:	c1 fa 1f             	sar    edx,0x1f
c000951e:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0009521:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0009524:	39 c8                	cmp    eax,ecx
c0009526:	89 d0                	mov    eax,edx
c0009528:	19 d8                	sbb    eax,ebx
c000952a:	0f 82 d2 00 00 00    	jb     c0009602 <KeLoadTimezoneStrings()+0x330>
c0009530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009533:	a3 24 23 03 c0       	mov    ds:0xc0032324,eax
c0009538:	83 ec 08             	sub    esp,0x8
c000953b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000953e:	68 90 91 02 c0       	push   0xc0029190
c0009543:	e8 34 da ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009548:	83 c4 10             	add    esp,0x10
c000954b:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009550:	83 ec 08             	sub    esp,0x8
c0009553:	50                   	push   eax
c0009554:	68 a5 91 02 c0       	push   0xc00291a5
c0009559:	e8 1e da ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000955e:	83 c4 10             	add    esp,0x10
c0009561:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009568:	e9 9b 00 00 00       	jmp    c0009608 <KeLoadTimezoneStrings()+0x336>
c000956d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009570:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009577:	83 ec 0c             	sub    esp,0xc
c000957a:	50                   	push   eax
c000957b:	e8 f0 6f ff ff       	call   c0000570 <strlen>
c0009580:	83 c4 10             	add    esp,0x10
c0009583:	83 f8 31             	cmp    eax,0x31
c0009586:	0f 96 c0             	setbe  al
c0009589:	0f b6 c0             	movzx  eax,al
c000958c:	85 c0                	test   eax,eax
c000958e:	74 1f                	je     c00095af <KeLoadTimezoneStrings()+0x2dd>
c0009590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009593:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	8d 55 c6             	lea    edx,[ebp-0x3a]
c00095a0:	52                   	push   edx
c00095a1:	50                   	push   eax
c00095a2:	e8 99 72 ff ff       	call   c0000840 <strcat>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	e9 9d fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c00095af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00095b2:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00095b9:	83 ec 0c             	sub    esp,0xc
c00095bc:	50                   	push   eax
c00095bd:	e8 ae 6f ff ff       	call   c0000570 <strlen>
c00095c2:	83 c4 10             	add    esp,0x10
c00095c5:	83 f8 32             	cmp    eax,0x32
c00095c8:	0f 94 c0             	sete   al
c00095cb:	0f b6 c0             	movzx  eax,al
c00095ce:	85 c0                	test   eax,eax
c00095d0:	0f 84 76 fe ff ff    	je     c000944c <KeLoadTimezoneStrings()+0x17a>
c00095d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00095d9:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00095e0:	83 ec 08             	sub    esp,0x8
c00095e3:	68 a9 91 02 c0       	push   0xc00291a9
c00095e8:	50                   	push   eax
c00095e9:	e8 52 72 ff ff       	call   c0000840 <strcat>
c00095ee:	83 c4 10             	add    esp,0x10
c00095f1:	e9 56 fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c00095f6:	90                   	nop
c00095f7:	e9 50 fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c00095fc:	90                   	nop
c00095fd:	e9 4a fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c0009602:	90                   	nop
c0009603:	e9 44 fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c0009608:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c000960d:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0009610:	7d 49                	jge    c000965b <KeLoadTimezoneStrings()+0x389>
c0009612:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009617:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c000961a:	0f 9c c0             	setl   al
c000961d:	0f b6 d0             	movzx  edx,al
c0009620:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009625:	52                   	push   edx
c0009626:	50                   	push   eax
c0009627:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000962a:	68 ae 91 02 c0       	push   0xc00291ae
c000962f:	e8 48 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009634:	83 c4 10             	add    esp,0x10
c0009637:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000963a:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009641:	83 ec 04             	sub    esp,0x4
c0009644:	50                   	push   eax
c0009645:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009648:	68 bc 91 02 c0       	push   0xc00291bc
c000964d:	e8 2a d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009652:	83 c4 10             	add    esp,0x10
c0009655:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0009659:	eb ad                	jmp    c0009608 <KeLoadTimezoneStrings()+0x336>
c000965b:	90                   	nop
c000965c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000965f:	c9                   	leave  
c0009660:	c3                   	ret    

c0009661 <KeGetTimezoneStringFromID(int)>:
c0009661:	55                   	push   ebp
c0009662:	89 e5                	mov    ebp,esp
c0009664:	83 ec 08             	sub    esp,0x8
c0009667:	83 ec 08             	sub    esp,0x8
c000966a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000966d:	68 c5 91 02 c0       	push   0xc00291c5
c0009672:	e8 05 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009677:	83 c4 10             	add    esp,0x10
c000967a:	a0 20 23 03 c0       	mov    al,ds:0xc0032320
c000967f:	83 f0 01             	xor    eax,0x1
c0009682:	0f b6 c0             	movzx  eax,al
c0009685:	85 c0                	test   eax,eax
c0009687:	74 15                	je     c000969e <KeGetTimezoneStringFromID(int)+0x3d>
c0009689:	e8 44 fc ff ff       	call   c00092d2 <KeLoadTimezoneStrings()>
c000968e:	83 ec 0c             	sub    esp,0xc
c0009691:	68 e3 91 02 c0       	push   0xc00291e3
c0009696:	e8 e1 d8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000969b:	83 c4 10             	add    esp,0x10
c000969e:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c00096a3:	83 ec 04             	sub    esp,0x4
c00096a6:	50                   	push   eax
c00096a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00096aa:	68 f4 91 02 c0       	push   0xc00291f4
c00096af:	e8 c8 d8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00096b4:	83 c4 10             	add    esp,0x10
c00096b7:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c00096bc:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c00096bf:	7d 06                	jge    c00096c7 <KeGetTimezoneStringFromID(int)+0x66>
c00096c1:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c00096c5:	79 07                	jns    c00096ce <KeGetTimezoneStringFromID(int)+0x6d>
c00096c7:	b8 00 00 00 00       	mov    eax,0x0
c00096cc:	eb 2e                	jmp    c00096fc <KeGetTimezoneStringFromID(int)+0x9b>
c00096ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096d1:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00096d8:	83 c0 01             	add    eax,0x1
c00096db:	83 ec 04             	sub    esp,0x4
c00096de:	50                   	push   eax
c00096df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00096e2:	68 07 92 02 c0       	push   0xc0029207
c00096e7:	e8 90 d8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096f2:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00096f9:	83 c0 01             	add    eax,0x1
c00096fc:	c9                   	leave  
c00096fd:	c3                   	ret    

c00096fe <KeUpdateTimezone(char const*)>:
c00096fe:	55                   	push   ebp
c00096ff:	89 e5                	mov    ebp,esp
c0009701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009704:	8a 00                	mov    al,BYTE PTR [eax]
c0009706:	0f be c0             	movsx  eax,al
c0009709:	83 f8 2b             	cmp    eax,0x2b
c000970c:	74 11                	je     c000971f <KeUpdateTimezone(char const*)+0x21>
c000970e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009711:	8a 00                	mov    al,BYTE PTR [eax]
c0009713:	0f be c0             	movsx  eax,al
c0009716:	83 f8 2d             	cmp    eax,0x2d
c0009719:	0f 85 be 00 00 00    	jne    c00097dd <KeUpdateTimezone(char const*)+0xdf>
c000971f:	c6 05 60 26 03 c0 00 	mov    BYTE PTR ds:0xc0032660,0x0
c0009726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009729:	83 c0 02             	add    eax,0x2
c000972c:	8a 00                	mov    al,BYTE PTR [eax]
c000972e:	0f be c0             	movsx  eax,al
c0009731:	83 f8 2e             	cmp    eax,0x2e
c0009734:	75 10                	jne    c0009746 <KeUpdateTimezone(char const*)+0x48>
c0009736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009739:	83 c0 03             	add    eax,0x3
c000973c:	8a 00                	mov    al,BYTE PTR [eax]
c000973e:	0f be c0             	movsx  eax,al
c0009741:	83 f8 35             	cmp    eax,0x35
c0009744:	74 20                	je     c0009766 <KeUpdateTimezone(char const*)+0x68>
c0009746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009749:	83 c0 03             	add    eax,0x3
c000974c:	8a 00                	mov    al,BYTE PTR [eax]
c000974e:	0f be c0             	movsx  eax,al
c0009751:	83 f8 2e             	cmp    eax,0x2e
c0009754:	75 14                	jne    c000976a <KeUpdateTimezone(char const*)+0x6c>
c0009756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009759:	83 c0 04             	add    eax,0x4
c000975c:	8a 00                	mov    al,BYTE PTR [eax]
c000975e:	0f be c0             	movsx  eax,al
c0009761:	83 f8 35             	cmp    eax,0x35
c0009764:	75 04                	jne    c000976a <KeUpdateTimezone(char const*)+0x6c>
c0009766:	b0 01                	mov    al,0x1
c0009768:	eb 02                	jmp    c000976c <KeUpdateTimezone(char const*)+0x6e>
c000976a:	b0 00                	mov    al,0x0
c000976c:	a2 61 26 03 c0       	mov    ds:0xc0032661,al
c0009771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009774:	83 c0 01             	add    eax,0x1
c0009777:	8a 00                	mov    al,BYTE PTR [eax]
c0009779:	0f be c0             	movsx  eax,al
c000977c:	83 e8 30             	sub    eax,0x30
c000977f:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c0009784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009787:	83 c0 03             	add    eax,0x3
c000978a:	8a 00                	mov    al,BYTE PTR [eax]
c000978c:	0f be c0             	movsx  eax,al
c000978f:	83 f8 2e             	cmp    eax,0x2e
c0009792:	75 2e                	jne    c00097c2 <KeUpdateTimezone(char const*)+0xc4>
c0009794:	8b 15 64 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032664
c000979a:	89 d0                	mov    eax,edx
c000979c:	c1 e0 02             	shl    eax,0x2
c000979f:	01 d0                	add    eax,edx
c00097a1:	01 c0                	add    eax,eax
c00097a3:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c00097a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ab:	83 c0 02             	add    eax,0x2
c00097ae:	8a 00                	mov    al,BYTE PTR [eax]
c00097b0:	0f be c0             	movsx  eax,al
c00097b3:	8d 50 d0             	lea    edx,[eax-0x30]
c00097b6:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00097bb:	01 d0                	add    eax,edx
c00097bd:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	8a 00                	mov    al,BYTE PTR [eax]
c00097c7:	0f be c0             	movsx  eax,al
c00097ca:	83 f8 2d             	cmp    eax,0x2d
c00097cd:	75 26                	jne    c00097f5 <KeUpdateTimezone(char const*)+0xf7>
c00097cf:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00097d4:	f7 d8                	neg    eax
c00097d6:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c00097db:	eb 18                	jmp    c00097f5 <KeUpdateTimezone(char const*)+0xf7>
c00097dd:	c6 05 60 26 03 c0 00 	mov    BYTE PTR ds:0xc0032660,0x0
c00097e4:	c6 05 61 26 03 c0 00 	mov    BYTE PTR ds:0xc0032661,0x0
c00097eb:	c7 05 64 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032664,0x0
c00097f5:	90                   	nop
c00097f6:	5d                   	pop    ebp
c00097f7:	c3                   	ret    

c00097f8 <KeSetTimezone(char const*)>:
c00097f8:	55                   	push   ebp
c00097f9:	89 e5                	mov    ebp,esp
c00097fb:	83 ec 18             	sub    esp,0x18
c00097fe:	83 ec 0c             	sub    esp,0xc
c0009801:	68 14 92 02 c0       	push   0xc0029214
c0009806:	e8 11 44 00 00       	call   c000dc1c <CmOpen(char const*)>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009811:	83 ec 08             	sub    esp,0x8
c0009814:	68 39 92 02 c0       	push   0xc0029239
c0009819:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000981c:	e8 fb 4f 00 00       	call   c000e81c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009821:	83 c4 10             	add    esp,0x10
c0009824:	83 ec 04             	sub    esp,0x4
c0009827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000982a:	50                   	push   eax
c000982b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000982e:	e8 bb 48 00 00       	call   c000e0ee <CmSetString(Reghive_Tag*, int, char const*)>
c0009833:	83 c4 10             	add    esp,0x10
c0009836:	83 ec 0c             	sub    esp,0xc
c0009839:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000983c:	e8 f9 44 00 00       	call   c000dd3a <CmClose(Reghive_Tag*)>
c0009841:	83 c4 10             	add    esp,0x10
c0009844:	83 ec 0c             	sub    esp,0xc
c0009847:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000984a:	e8 af fe ff ff       	call   c00096fe <KeUpdateTimezone(char const*)>
c000984f:	83 c4 10             	add    esp,0x10
c0009852:	90                   	nop
c0009853:	c9                   	leave  
c0009854:	c3                   	ret    

c0009855 <KeSetTimezone(int)>:
c0009855:	55                   	push   ebp
c0009856:	89 e5                	mov    ebp,esp
c0009858:	83 ec 18             	sub    esp,0x18
c000985b:	83 ec 0c             	sub    esp,0xc
c000985e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009861:	e8 fb fd ff ff       	call   c0009661 <KeGetTimezoneStringFromID(int)>
c0009866:	83 c4 10             	add    esp,0x10
c0009869:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000986c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009870:	74 12                	je     c0009884 <KeSetTimezone(int)+0x2f>
c0009872:	83 ec 0c             	sub    esp,0xc
c0009875:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009878:	e8 7b ff ff ff       	call   c00097f8 <KeSetTimezone(char const*)>
c000987d:	83 c4 10             	add    esp,0x10
c0009880:	b0 01                	mov    al,0x1
c0009882:	eb 02                	jmp    c0009886 <KeSetTimezone(int)+0x31>
c0009884:	b0 00                	mov    al,0x0
c0009886:	c9                   	leave  
c0009887:	c3                   	ret    

c0009888 <KeLoadTimezone()>:
c0009888:	55                   	push   ebp
c0009889:	89 e5                	mov    ebp,esp
c000988b:	81 ec 68 02 00 00    	sub    esp,0x268
c0009891:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009898:	83 ec 0c             	sub    esp,0xc
c000989b:	68 14 92 02 c0       	push   0xc0029214
c00098a0:	e8 77 43 00 00       	call   c000dc1c <CmOpen(char const*)>
c00098a5:	83 c4 10             	add    esp,0x10
c00098a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	68 39 92 02 c0       	push   0xc0029239
c00098b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00098b6:	e8 61 4f 00 00       	call   c000e81c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00098bb:	83 c4 10             	add    esp,0x10
c00098be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00098c1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c00098c5:	7e 18                	jle    c00098df <KeLoadTimezone()+0x57>
c00098c7:	83 ec 04             	sub    esp,0x4
c00098ca:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00098d0:	50                   	push   eax
c00098d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00098d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00098d7:	e8 b0 44 00 00       	call   c000dd8c <CmGetString(Reghive_Tag*, int, char*)>
c00098dc:	83 c4 10             	add    esp,0x10
c00098df:	83 ec 0c             	sub    esp,0xc
c00098e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00098e5:	e8 50 44 00 00       	call   c000dd3a <CmClose(Reghive_Tag*)>
c00098ea:	83 c4 10             	add    esp,0x10
c00098ed:	83 ec 0c             	sub    esp,0xc
c00098f0:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00098f6:	50                   	push   eax
c00098f7:	e8 02 fe ff ff       	call   c00096fe <KeUpdateTimezone(char const*)>
c00098fc:	83 c4 10             	add    esp,0x10
c00098ff:	90                   	nop
c0009900:	c9                   	leave  
c0009901:	c3                   	ret    

c0009902 <Clock::Clock(char const*)>:
c0009902:	83 ec 0c             	sub    esp,0xc
c0009905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009910:	50                   	push   eax
c0009911:	e8 ec 0a 00 00       	call   c000a402 <Device::Device(char const*)>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	ba 98 92 02 c0       	mov    edx,0xc0029298
c000991e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009922:	89 10                	mov    DWORD PTR [eax],edx
c0009924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009928:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0009932:	90                   	nop
c0009933:	83 c4 0c             	add    esp,0xc
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Clock::~Clock()>:
c0009938:	83 ec 0c             	sub    esp,0xc
c000993b:	ba 98 92 02 c0       	mov    edx,0xc0029298
c0009940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009944:	89 10                	mov    DWORD PTR [eax],edx
c0009946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994a:	83 ec 0c             	sub    esp,0xc
c000994d:	50                   	push   eax
c000994e:	e8 4f 08 00 00       	call   c000a1a2 <Device::~Device()>
c0009953:	83 c4 10             	add    esp,0x10
c0009956:	90                   	nop
c0009957:	83 c4 0c             	add    esp,0xc
c000995a:	c3                   	ret    
c000995b:	90                   	nop

c000995c <Clock::~Clock()>:
c000995c:	83 ec 0c             	sub    esp,0xc
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009966:	e8 cd ff ff ff       	call   c0009938 <Clock::~Clock()>
c000996b:	83 c4 10             	add    esp,0x10
c000996e:	83 ec 08             	sub    esp,0x8
c0009971:	68 58 01 00 00       	push   0x158
c0009976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997a:	e8 49 42 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000997f:	83 c4 10             	add    esp,0x10
c0009982:	83 c4 0c             	add    esp,0xc
c0009985:	c3                   	ret    

c0009986 <Clock::timeInSecondsLocal()>:
c0009986:	55                   	push   ebp
c0009987:	89 e5                	mov    ebp,esp
c0009989:	53                   	push   ebx
c000998a:	83 ec 04             	sub    esp,0x4
c000998d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009990:	8b 00                	mov    eax,DWORD PTR [eax]
c0009992:	83 c0 24             	add    eax,0x24
c0009995:	8b 00                	mov    eax,DWORD PTR [eax]
c0009997:	83 ec 0c             	sub    esp,0xc
c000999a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000999d:	ff d0                	call   eax
c000999f:	83 c4 10             	add    esp,0x10
c00099a2:	89 c1                	mov    ecx,eax
c00099a4:	89 d3                	mov    ebx,edx
c00099a6:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c00099ab:	0f b6 d0             	movzx  edx,al
c00099ae:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00099b3:	01 c2                	add    edx,eax
c00099b5:	89 d0                	mov    eax,edx
c00099b7:	01 c0                	add    eax,eax
c00099b9:	01 d0                	add    eax,edx
c00099bb:	01 c0                	add    eax,eax
c00099bd:	01 d0                	add    eax,edx
c00099bf:	c1 e0 05             	shl    eax,0x5
c00099c2:	01 d0                	add    eax,edx
c00099c4:	c1 e0 04             	shl    eax,0x4
c00099c7:	89 c2                	mov    edx,eax
c00099c9:	c1 fa 1f             	sar    edx,0x1f
c00099cc:	01 c1                	add    ecx,eax
c00099ce:	11 d3                	adc    ebx,edx
c00099d0:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c00099d5:	0f b6 c0             	movzx  eax,al
c00099d8:	85 c0                	test   eax,eax
c00099da:	74 0c                	je     c00099e8 <Clock::timeInSecondsLocal()+0x62>
c00099dc:	b8 08 07 00 00       	mov    eax,0x708
c00099e1:	ba 00 00 00 00       	mov    edx,0x0
c00099e6:	eb 0a                	jmp    c00099f2 <Clock::timeInSecondsLocal()+0x6c>
c00099e8:	b8 00 00 00 00       	mov    eax,0x0
c00099ed:	ba 00 00 00 00       	mov    edx,0x0
c00099f2:	01 c8                	add    eax,ecx
c00099f4:	11 da                	adc    edx,ebx
c00099f6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00099f9:	c9                   	leave  
c00099fa:	c3                   	ret    
c00099fb:	90                   	nop

c00099fc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00099fc:	55                   	push   ebp
c00099fd:	89 e5                	mov    ebp,esp
c00099ff:	56                   	push   esi
c0009a00:	53                   	push   ebx
c0009a01:	83 ec 10             	sub    esp,0x10
c0009a04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009a07:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009a0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009a0d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a13:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a15:	83 c0 2c             	add    eax,0x2c
c0009a18:	8b 30                	mov    esi,DWORD PTR [eax]
c0009a1a:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c0009a1f:	0f b6 d0             	movzx  edx,al
c0009a22:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c0009a27:	01 c2                	add    edx,eax
c0009a29:	89 d0                	mov    eax,edx
c0009a2b:	01 c0                	add    eax,eax
c0009a2d:	01 d0                	add    eax,edx
c0009a2f:	01 c0                	add    eax,eax
c0009a31:	01 d0                	add    eax,edx
c0009a33:	c1 e0 05             	shl    eax,0x5
c0009a36:	01 d0                	add    eax,edx
c0009a38:	c1 e0 04             	shl    eax,0x4
c0009a3b:	89 c2                	mov    edx,eax
c0009a3d:	c1 fa 1f             	sar    edx,0x1f
c0009a40:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009a43:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009a46:	29 c1                	sub    ecx,eax
c0009a48:	19 d3                	sbb    ebx,edx
c0009a4a:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c0009a4f:	0f b6 c0             	movzx  eax,al
c0009a52:	85 c0                	test   eax,eax
c0009a54:	74 0c                	je     c0009a62 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c0009a56:	b8 08 07 00 00       	mov    eax,0x708
c0009a5b:	ba 00 00 00 00       	mov    edx,0x0
c0009a60:	eb 0a                	jmp    c0009a6c <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009a62:	b8 00 00 00 00       	mov    eax,0x0
c0009a67:	ba 00 00 00 00       	mov    edx,0x0
c0009a6c:	29 c1                	sub    ecx,eax
c0009a6e:	19 d3                	sbb    ebx,edx
c0009a70:	89 c8                	mov    eax,ecx
c0009a72:	89 da                	mov    edx,ebx
c0009a74:	83 ec 04             	sub    esp,0x4
c0009a77:	52                   	push   edx
c0009a78:	50                   	push   eax
c0009a79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a7c:	ff d6                	call   esi
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009a84:	5b                   	pop    ebx
c0009a85:	5e                   	pop    esi
c0009a86:	5d                   	pop    ebp
c0009a87:	c3                   	ret    

c0009a88 <KeDatetimeToSeconds(datetime_t)>:
c0009a88:	55                   	push   ebp
c0009a89:	89 e5                	mov    ebp,esp
c0009a8b:	53                   	push   ebx
c0009a8c:	83 ec 24             	sub    esp,0x24
c0009a8f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009a93:	2d 6c 07 00 00       	sub    eax,0x76c
c0009a98:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009a9c:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009a9f:	83 e8 01             	sub    eax,0x1
c0009aa2:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009aa5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009aac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009ab3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009aba:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009ac1:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009ac4:	0f b6 c8             	movzx  ecx,al
c0009ac7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009aca:	0f b6 d0             	movzx  edx,al
c0009acd:	89 d0                	mov    eax,edx
c0009acf:	01 c0                	add    eax,eax
c0009ad1:	01 d0                	add    eax,edx
c0009ad3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009ada:	01 d0                	add    eax,edx
c0009adc:	c1 e0 02             	shl    eax,0x2
c0009adf:	01 c1                	add    ecx,eax
c0009ae1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009ae4:	0f b6 d0             	movzx  edx,al
c0009ae7:	89 d0                	mov    eax,edx
c0009ae9:	01 c0                	add    eax,eax
c0009aeb:	01 d0                	add    eax,edx
c0009aed:	01 c0                	add    eax,eax
c0009aef:	01 d0                	add    eax,edx
c0009af1:	c1 e0 05             	shl    eax,0x5
c0009af4:	01 d0                	add    eax,edx
c0009af6:	c1 e0 04             	shl    eax,0x4
c0009af9:	01 c8                	add    eax,ecx
c0009afb:	89 c2                	mov    edx,eax
c0009afd:	c1 fa 1f             	sar    edx,0x1f
c0009b00:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009b03:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009b06:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009b09:	0f b6 c0             	movzx  eax,al
c0009b0c:	83 e8 01             	sub    eax,0x1
c0009b0f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009b12:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009b15:	0f b6 c0             	movzx  eax,al
c0009b18:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c0009b1f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009b22:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009b25:	0f b6 c0             	movzx  eax,al
c0009b28:	83 f8 01             	cmp    eax,0x1
c0009b2b:	76 7c                	jbe    c0009ba9 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009b2d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009b31:	0f b7 c0             	movzx  eax,ax
c0009b34:	83 e0 03             	and    eax,0x3
c0009b37:	85 c0                	test   eax,eax
c0009b39:	75 6e                	jne    c0009ba9 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009b3b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009b3f:	0f b7 c8             	movzx  ecx,ax
c0009b42:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009b47:	89 c8                	mov    eax,ecx
c0009b49:	f7 e2                	mul    edx
c0009b4b:	c1 ea 05             	shr    edx,0x5
c0009b4e:	89 d0                	mov    eax,edx
c0009b50:	c1 e0 02             	shl    eax,0x2
c0009b53:	01 d0                	add    eax,edx
c0009b55:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009b5c:	01 d0                	add    eax,edx
c0009b5e:	c1 e0 02             	shl    eax,0x2
c0009b61:	29 c1                	sub    ecx,eax
c0009b63:	89 c8                	mov    eax,ecx
c0009b65:	0f b7 c0             	movzx  eax,ax
c0009b68:	85 c0                	test   eax,eax
c0009b6a:	75 39                	jne    c0009ba5 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009b6c:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009b70:	0f b7 c0             	movzx  eax,ax
c0009b73:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009b79:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009b7e:	f7 e9                	imul   ecx
c0009b80:	c1 fa 07             	sar    edx,0x7
c0009b83:	89 c8                	mov    eax,ecx
c0009b85:	c1 f8 1f             	sar    eax,0x1f
c0009b88:	29 c2                	sub    edx,eax
c0009b8a:	89 d0                	mov    eax,edx
c0009b8c:	c1 e0 02             	shl    eax,0x2
c0009b8f:	01 d0                	add    eax,edx
c0009b91:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009b98:	01 d0                	add    eax,edx
c0009b9a:	c1 e0 04             	shl    eax,0x4
c0009b9d:	29 c1                	sub    ecx,eax
c0009b9f:	89 ca                	mov    edx,ecx
c0009ba1:	85 d2                	test   edx,edx
c0009ba3:	75 04                	jne    c0009ba9 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009ba5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009ba9:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009bad:	0f b7 c0             	movzx  eax,ax
c0009bb0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009bb3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009bb6:	83 f8 46             	cmp    eax,0x46
c0009bb9:	0f 9f c0             	setg   al
c0009bbc:	0f b6 c0             	movzx  eax,al
c0009bbf:	85 c0                	test   eax,eax
c0009bc1:	0f 84 a4 00 00 00    	je     c0009c6b <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009bc7:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009bce:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009bd2:	0f b7 d0             	movzx  edx,ax
c0009bd5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009bd8:	39 c2                	cmp    edx,eax
c0009bda:	0f 8e b8 01 00 00    	jle    c0009d98 <KeDatetimeToSeconds(datetime_t)+0x310>
c0009be0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009be3:	83 e0 03             	and    eax,0x3
c0009be6:	85 c0                	test   eax,eax
c0009be8:	75 6b                	jne    c0009c55 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009bea:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009bed:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009bf2:	f7 e9                	imul   ecx
c0009bf4:	c1 fa 05             	sar    edx,0x5
c0009bf7:	89 c8                	mov    eax,ecx
c0009bf9:	c1 f8 1f             	sar    eax,0x1f
c0009bfc:	29 c2                	sub    edx,eax
c0009bfe:	89 d0                	mov    eax,edx
c0009c00:	c1 e0 02             	shl    eax,0x2
c0009c03:	01 d0                	add    eax,edx
c0009c05:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009c0c:	01 d0                	add    eax,edx
c0009c0e:	c1 e0 02             	shl    eax,0x2
c0009c11:	29 c1                	sub    ecx,eax
c0009c13:	89 ca                	mov    edx,ecx
c0009c15:	85 d2                	test   edx,edx
c0009c17:	75 35                	jne    c0009c4e <KeDatetimeToSeconds(datetime_t)+0x1c6>
c0009c19:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c1c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009c22:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009c27:	f7 e9                	imul   ecx
c0009c29:	c1 fa 07             	sar    edx,0x7
c0009c2c:	89 c8                	mov    eax,ecx
c0009c2e:	c1 f8 1f             	sar    eax,0x1f
c0009c31:	29 c2                	sub    edx,eax
c0009c33:	89 d0                	mov    eax,edx
c0009c35:	c1 e0 02             	shl    eax,0x2
c0009c38:	01 d0                	add    eax,edx
c0009c3a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009c41:	01 d0                	add    eax,edx
c0009c43:	c1 e0 04             	shl    eax,0x4
c0009c46:	29 c1                	sub    ecx,eax
c0009c48:	89 ca                	mov    edx,ecx
c0009c4a:	85 d2                	test   edx,edx
c0009c4c:	75 07                	jne    c0009c55 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009c4e:	b8 6e 01 00 00       	mov    eax,0x16e
c0009c53:	eb 05                	jmp    c0009c5a <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009c55:	b8 6d 01 00 00       	mov    eax,0x16d
c0009c5a:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009c5d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c60:	83 c0 01             	add    eax,0x1
c0009c63:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009c66:	e9 63 ff ff ff       	jmp    c0009bce <KeDatetimeToSeconds(datetime_t)+0x146>
c0009c6b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c6e:	83 f8 45             	cmp    eax,0x45
c0009c71:	0f 8f 21 01 00 00    	jg     c0009d98 <KeDatetimeToSeconds(datetime_t)+0x310>
c0009c77:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009c7e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009c82:	0f b7 d0             	movzx  edx,ax
c0009c85:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c88:	39 c2                	cmp    edx,eax
c0009c8a:	0f 8d 8b 00 00 00    	jge    c0009d1b <KeDatetimeToSeconds(datetime_t)+0x293>
c0009c90:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c93:	83 e0 03             	and    eax,0x3
c0009c96:	85 c0                	test   eax,eax
c0009c98:	75 6b                	jne    c0009d05 <KeDatetimeToSeconds(datetime_t)+0x27d>
c0009c9a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009c9d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009ca2:	f7 e9                	imul   ecx
c0009ca4:	c1 fa 05             	sar    edx,0x5
c0009ca7:	89 c8                	mov    eax,ecx
c0009ca9:	c1 f8 1f             	sar    eax,0x1f
c0009cac:	29 c2                	sub    edx,eax
c0009cae:	89 d0                	mov    eax,edx
c0009cb0:	c1 e0 02             	shl    eax,0x2
c0009cb3:	01 d0                	add    eax,edx
c0009cb5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009cbc:	01 d0                	add    eax,edx
c0009cbe:	c1 e0 02             	shl    eax,0x2
c0009cc1:	29 c1                	sub    ecx,eax
c0009cc3:	89 ca                	mov    edx,ecx
c0009cc5:	85 d2                	test   edx,edx
c0009cc7:	75 35                	jne    c0009cfe <KeDatetimeToSeconds(datetime_t)+0x276>
c0009cc9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009ccc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009cd2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009cd7:	f7 e9                	imul   ecx
c0009cd9:	c1 fa 07             	sar    edx,0x7
c0009cdc:	89 c8                	mov    eax,ecx
c0009cde:	c1 f8 1f             	sar    eax,0x1f
c0009ce1:	29 c2                	sub    edx,eax
c0009ce3:	89 d0                	mov    eax,edx
c0009ce5:	c1 e0 02             	shl    eax,0x2
c0009ce8:	01 d0                	add    eax,edx
c0009cea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009cf1:	01 d0                	add    eax,edx
c0009cf3:	c1 e0 04             	shl    eax,0x4
c0009cf6:	29 c1                	sub    ecx,eax
c0009cf8:	89 ca                	mov    edx,ecx
c0009cfa:	85 d2                	test   edx,edx
c0009cfc:	75 07                	jne    c0009d05 <KeDatetimeToSeconds(datetime_t)+0x27d>
c0009cfe:	b8 6e 01 00 00       	mov    eax,0x16e
c0009d03:	eb 05                	jmp    c0009d0a <KeDatetimeToSeconds(datetime_t)+0x282>
c0009d05:	b8 6d 01 00 00       	mov    eax,0x16d
c0009d0a:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009d0d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d10:	83 e8 01             	sub    eax,0x1
c0009d13:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009d16:	e9 63 ff ff ff       	jmp    c0009c7e <KeDatetimeToSeconds(datetime_t)+0x1f6>
c0009d1b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d1e:	83 e0 03             	and    eax,0x3
c0009d21:	85 c0                	test   eax,eax
c0009d23:	75 6b                	jne    c0009d90 <KeDatetimeToSeconds(datetime_t)+0x308>
c0009d25:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009d28:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009d2d:	f7 e9                	imul   ecx
c0009d2f:	c1 fa 05             	sar    edx,0x5
c0009d32:	89 c8                	mov    eax,ecx
c0009d34:	c1 f8 1f             	sar    eax,0x1f
c0009d37:	29 c2                	sub    edx,eax
c0009d39:	89 d0                	mov    eax,edx
c0009d3b:	c1 e0 02             	shl    eax,0x2
c0009d3e:	01 d0                	add    eax,edx
c0009d40:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d47:	01 d0                	add    eax,edx
c0009d49:	c1 e0 02             	shl    eax,0x2
c0009d4c:	29 c1                	sub    ecx,eax
c0009d4e:	89 ca                	mov    edx,ecx
c0009d50:	85 d2                	test   edx,edx
c0009d52:	75 35                	jne    c0009d89 <KeDatetimeToSeconds(datetime_t)+0x301>
c0009d54:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d57:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009d5d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009d62:	f7 e9                	imul   ecx
c0009d64:	c1 fa 07             	sar    edx,0x7
c0009d67:	89 c8                	mov    eax,ecx
c0009d69:	c1 f8 1f             	sar    eax,0x1f
c0009d6c:	29 c2                	sub    edx,eax
c0009d6e:	89 d0                	mov    eax,edx
c0009d70:	c1 e0 02             	shl    eax,0x2
c0009d73:	01 d0                	add    eax,edx
c0009d75:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d7c:	01 d0                	add    eax,edx
c0009d7e:	c1 e0 04             	shl    eax,0x4
c0009d81:	29 c1                	sub    ecx,eax
c0009d83:	89 ca                	mov    edx,ecx
c0009d85:	85 d2                	test   edx,edx
c0009d87:	75 07                	jne    c0009d90 <KeDatetimeToSeconds(datetime_t)+0x308>
c0009d89:	b8 6e 01 00 00       	mov    eax,0x16e
c0009d8e:	eb 05                	jmp    c0009d95 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009d90:	b8 6d 01 00 00       	mov    eax,0x16d
c0009d95:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009d98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d9b:	89 c2                	mov    edx,eax
c0009d9d:	c1 fa 1f             	sar    edx,0x1f
c0009da0:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009da6:	6b c8 00             	imul   ecx,eax,0x0
c0009da9:	01 d9                	add    ecx,ebx
c0009dab:	bb 80 51 01 00       	mov    ebx,0x15180
c0009db0:	f7 e3                	mul    ebx
c0009db2:	01 d1                	add    ecx,edx
c0009db4:	89 ca                	mov    edx,ecx
c0009db6:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009db9:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009dbc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009dbf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009dc2:	83 c4 24             	add    esp,0x24
c0009dc5:	5b                   	pop    ebx
c0009dc6:	5d                   	pop    ebp
c0009dc7:	c3                   	ret    

c0009dc8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009dc8:	55                   	push   ebp
c0009dc9:	89 e5                	mov    ebp,esp
c0009dcb:	56                   	push   esi
c0009dcc:	53                   	push   ebx
c0009dcd:	83 ec 20             	sub    esp,0x20
c0009dd0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009dd3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009dd6:	e8 ad fc ff ff       	call   c0009a88 <KeDatetimeToSeconds(datetime_t)>
c0009ddb:	83 c4 08             	add    esp,0x8
c0009dde:	89 c3                	mov    ebx,eax
c0009de0:	89 d6                	mov    esi,edx
c0009de2:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c0009de7:	0f b6 d0             	movzx  edx,al
c0009dea:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c0009def:	01 c2                	add    edx,eax
c0009df1:	89 d0                	mov    eax,edx
c0009df3:	01 c0                	add    eax,eax
c0009df5:	01 d0                	add    eax,edx
c0009df7:	01 c0                	add    eax,eax
c0009df9:	01 d0                	add    eax,edx
c0009dfb:	c1 e0 05             	shl    eax,0x5
c0009dfe:	01 d0                	add    eax,edx
c0009e00:	c1 e0 04             	shl    eax,0x4
c0009e03:	89 c2                	mov    edx,eax
c0009e05:	c1 fa 1f             	sar    edx,0x1f
c0009e08:	29 c3                	sub    ebx,eax
c0009e0a:	19 d6                	sbb    esi,edx
c0009e0c:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c0009e11:	0f b6 c0             	movzx  eax,al
c0009e14:	85 c0                	test   eax,eax
c0009e16:	74 0c                	je     c0009e24 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c0009e18:	b8 08 07 00 00       	mov    eax,0x708
c0009e1d:	ba 00 00 00 00       	mov    edx,0x0
c0009e22:	eb 0a                	jmp    c0009e2e <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c0009e24:	b8 00 00 00 00       	mov    eax,0x0
c0009e29:	ba 00 00 00 00       	mov    edx,0x0
c0009e2e:	29 c3                	sub    ebx,eax
c0009e30:	19 d6                	sbb    esi,edx
c0009e32:	89 d8                	mov    eax,ebx
c0009e34:	89 f2                	mov    edx,esi
c0009e36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009e39:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009e3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009e3f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009e42:	89 d0                	mov    eax,edx
c0009e44:	31 d2                	xor    edx,edx
c0009e46:	89 c3                	mov    ebx,eax
c0009e48:	89 d6                	mov    esi,edx
c0009e4a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009e4d:	80 e5 ff             	and    ch,0xff
c0009e50:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009e53:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009e56:	83 e1 00             	and    ecx,0x0
c0009e59:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009e5c:	83 ec 0c             	sub    esp,0xc
c0009e5f:	56                   	push   esi
c0009e60:	53                   	push   ebx
c0009e61:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009e64:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009e67:	68 4e 92 02 c0       	push   0xc002924e
c0009e6c:	e8 0b d1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009e71:	83 c4 20             	add    esp,0x20
c0009e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e79:	83 c0 2c             	add    eax,0x2c
c0009e7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e7e:	83 ec 04             	sub    esp,0x4
c0009e81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009e84:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009e8a:	ff d0                	call   eax
c0009e8c:	83 c4 10             	add    esp,0x10
c0009e8f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009e92:	5b                   	pop    ebx
c0009e93:	5e                   	pop    esi
c0009e94:	5d                   	pop    ebp
c0009e95:	c3                   	ret    

c0009e96 <KeSecondsToDatetime(unsigned long long)>:
c0009e96:	55                   	push   ebp
c0009e97:	89 e5                	mov    ebp,esp
c0009e99:	83 ec 48             	sub    esp,0x48
c0009e9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009e9f:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009ea2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009ea5:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009ea8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009eab:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009eae:	6a 00                	push   0x0
c0009eb0:	68 80 51 01 00       	push   0x15180
c0009eb5:	52                   	push   edx
c0009eb6:	50                   	push   eax
c0009eb7:	e8 78 8f 01 00       	call   c0022e34 <__udivdi3>
c0009ebc:	83 c4 10             	add    esp,0x10
c0009ebf:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009ec4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009ec7:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009eca:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009ecd:	6a 00                	push   0x0
c0009ecf:	68 80 51 01 00       	push   0x15180
c0009ed4:	52                   	push   edx
c0009ed5:	50                   	push   eax
c0009ed6:	e8 59 90 01 00       	call   c0022f34 <__umoddi3>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009ee1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009ee5:	79 0b                	jns    c0009ef2 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009ee7:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009eee:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009ef2:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009ef5:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009efa:	89 c8                	mov    eax,ecx
c0009efc:	f7 ea                	imul   edx
c0009efe:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009f01:	c1 f8 0b             	sar    eax,0xb
c0009f04:	89 c2                	mov    edx,eax
c0009f06:	89 c8                	mov    eax,ecx
c0009f08:	c1 f8 1f             	sar    eax,0x1f
c0009f0b:	29 c2                	sub    edx,eax
c0009f0d:	89 d0                	mov    eax,edx
c0009f0f:	88 c2                	mov    dl,al
c0009f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f14:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009f17:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009f1a:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009f1f:	89 c8                	mov    eax,ecx
c0009f21:	f7 ea                	imul   edx
c0009f23:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009f26:	c1 f8 0b             	sar    eax,0xb
c0009f29:	89 c2                	mov    edx,eax
c0009f2b:	89 c8                	mov    eax,ecx
c0009f2d:	c1 f8 1f             	sar    eax,0x1f
c0009f30:	29 c2                	sub    edx,eax
c0009f32:	89 d0                	mov    eax,edx
c0009f34:	01 c0                	add    eax,eax
c0009f36:	01 d0                	add    eax,edx
c0009f38:	01 c0                	add    eax,eax
c0009f3a:	01 d0                	add    eax,edx
c0009f3c:	c1 e0 05             	shl    eax,0x5
c0009f3f:	01 d0                	add    eax,edx
c0009f41:	c1 e0 04             	shl    eax,0x4
c0009f44:	29 c1                	sub    ecx,eax
c0009f46:	89 c8                	mov    eax,ecx
c0009f48:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009f4b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009f4e:	ba 89 88 88 88       	mov    edx,0x88888889
c0009f53:	89 c8                	mov    eax,ecx
c0009f55:	f7 ea                	imul   edx
c0009f57:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009f5a:	c1 f8 05             	sar    eax,0x5
c0009f5d:	89 c2                	mov    edx,eax
c0009f5f:	89 c8                	mov    eax,ecx
c0009f61:	c1 f8 1f             	sar    eax,0x1f
c0009f64:	29 c2                	sub    edx,eax
c0009f66:	89 d0                	mov    eax,edx
c0009f68:	88 c2                	mov    dl,al
c0009f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f6d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009f70:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009f73:	ba 89 88 88 88       	mov    edx,0x88888889
c0009f78:	89 c8                	mov    eax,ecx
c0009f7a:	f7 ea                	imul   edx
c0009f7c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009f7f:	c1 f8 05             	sar    eax,0x5
c0009f82:	89 c2                	mov    edx,eax
c0009f84:	89 c8                	mov    eax,ecx
c0009f86:	c1 f8 1f             	sar    eax,0x1f
c0009f89:	29 c2                	sub    edx,eax
c0009f8b:	89 d0                	mov    eax,edx
c0009f8d:	01 c0                	add    eax,eax
c0009f8f:	01 d0                	add    eax,edx
c0009f91:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009f98:	01 d0                	add    eax,edx
c0009f9a:	c1 e0 02             	shl    eax,0x2
c0009f9d:	29 c1                	sub    ecx,eax
c0009f9f:	89 ca                	mov    edx,ecx
c0009fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fa4:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009fa7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009fab:	79 20                	jns    c0009fcd <KeSecondsToDatetime(unsigned long long)+0x137>
c0009fad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009fb0:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009fb6:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009fbb:	89 c8                	mov    eax,ecx
c0009fbd:	f7 ea                	imul   edx
c0009fbf:	c1 fa 0f             	sar    edx,0xf
c0009fc2:	89 c8                	mov    eax,ecx
c0009fc4:	c1 f8 1f             	sar    eax,0x1f
c0009fc7:	29 c2                	sub    edx,eax
c0009fc9:	89 d0                	mov    eax,edx
c0009fcb:	eb 18                	jmp    c0009fe5 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009fcd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009fd0:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009fd5:	89 c8                	mov    eax,ecx
c0009fd7:	f7 ea                	imul   edx
c0009fd9:	c1 fa 0f             	sar    edx,0xf
c0009fdc:	89 c8                	mov    eax,ecx
c0009fde:	c1 f8 1f             	sar    eax,0x1f
c0009fe1:	29 c2                	sub    edx,eax
c0009fe3:	89 d0                	mov    eax,edx
c0009fe5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009fe8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009feb:	89 d0                	mov    eax,edx
c0009fed:	c1 e0 03             	shl    eax,0x3
c0009ff0:	01 d0                	add    eax,edx
c0009ff2:	c1 e0 04             	shl    eax,0x4
c0009ff5:	01 d0                	add    eax,edx
c0009ff7:	c1 e0 04             	shl    eax,0x4
c0009ffa:	29 d0                	sub    eax,edx
c0009ffc:	89 c2                	mov    edx,eax
c0009ffe:	c1 e2 06             	shl    edx,0x6
c000a001:	29 c2                	sub    edx,eax
c000a003:	89 d0                	mov    eax,edx
c000a005:	f7 d8                	neg    eax
c000a007:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000a00a:	01 d0                	add    eax,edx
c000a00c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000a00f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a012:	c1 e8 02             	shr    eax,0x2
c000a015:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c000a01a:	f7 e2                	mul    edx
c000a01c:	c1 ea 07             	shr    edx,0x7
c000a01f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a022:	29 d0                	sub    eax,edx
c000a024:	89 c1                	mov    ecx,eax
c000a026:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a029:	c1 e8 02             	shr    eax,0x2
c000a02c:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000a031:	f7 e2                	mul    edx
c000a033:	89 d0                	mov    eax,edx
c000a035:	c1 e8 0b             	shr    eax,0xb
c000a038:	01 c1                	add    ecx,eax
c000a03a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a03d:	c1 e8 04             	shr    eax,0x4
c000a040:	ba 41 d6 72 00       	mov    edx,0x72d641
c000a045:	f7 e2                	mul    edx
c000a047:	89 d0                	mov    eax,edx
c000a049:	c1 e8 04             	shr    eax,0x4
c000a04c:	29 c1                	sub    ecx,eax
c000a04e:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000a053:	89 c8                	mov    eax,ecx
c000a055:	f7 e2                	mul    edx
c000a057:	89 c8                	mov    eax,ecx
c000a059:	29 d0                	sub    eax,edx
c000a05b:	d1 e8                	shr    eax,1
c000a05d:	01 d0                	add    eax,edx
c000a05f:	c1 e8 08             	shr    eax,0x8
c000a062:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000a065:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a068:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a06d:	f7 e2                	mul    edx
c000a06f:	89 d1                	mov    ecx,edx
c000a071:	c1 e9 05             	shr    ecx,0x5
c000a074:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000a077:	89 d0                	mov    eax,edx
c000a079:	c1 e0 03             	shl    eax,0x3
c000a07c:	01 d0                	add    eax,edx
c000a07e:	c1 e0 03             	shl    eax,0x3
c000a081:	01 d0                	add    eax,edx
c000a083:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a08a:	01 c2                	add    edx,eax
c000a08c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a08f:	c1 e8 02             	shr    eax,0x2
c000a092:	01 d0                	add    eax,edx
c000a094:	29 c1                	sub    ecx,eax
c000a096:	89 ca                	mov    edx,ecx
c000a098:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a09b:	01 d0                	add    eax,edx
c000a09d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a0a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000a0a3:	89 d0                	mov    eax,edx
c000a0a5:	c1 e0 02             	shl    eax,0x2
c000a0a8:	01 d0                	add    eax,edx
c000a0aa:	83 c0 02             	add    eax,0x2
c000a0ad:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000a0b2:	f7 e2                	mul    edx
c000a0b4:	89 d0                	mov    eax,edx
c000a0b6:	c1 e8 07             	shr    eax,0x7
c000a0b9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000a0bc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000a0bf:	89 d0                	mov    eax,edx
c000a0c1:	c1 e0 03             	shl    eax,0x3
c000a0c4:	01 d0                	add    eax,edx
c000a0c6:	01 c0                	add    eax,eax
c000a0c8:	01 d0                	add    eax,edx
c000a0ca:	c1 e0 03             	shl    eax,0x3
c000a0cd:	01 d0                	add    eax,edx
c000a0cf:	83 c0 02             	add    eax,0x2
c000a0d2:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000a0d7:	f7 e2                	mul    edx
c000a0d9:	c1 ea 02             	shr    edx,0x2
c000a0dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a0df:	29 d0                	sub    eax,edx
c000a0e1:	83 c0 01             	add    eax,0x1
c000a0e4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000a0e7:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000a0eb:	77 07                	ja     c000a0f4 <KeSecondsToDatetime(unsigned long long)+0x25e>
c000a0ed:	b8 02 00 00 00       	mov    eax,0x2
c000a0f2:	eb 05                	jmp    c000a0f9 <KeSecondsToDatetime(unsigned long long)+0x263>
c000a0f4:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000a0f9:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000a0fc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a0ff:	89 d0                	mov    eax,edx
c000a101:	c1 e0 02             	shl    eax,0x2
c000a104:	01 d0                	add    eax,edx
c000a106:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a10d:	01 d0                	add    eax,edx
c000a10f:	c1 e0 04             	shl    eax,0x4
c000a112:	89 c2                	mov    edx,eax
c000a114:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a117:	01 c2                	add    edx,eax
c000a119:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c000a11d:	0f 96 c0             	setbe  al
c000a120:	0f b6 c0             	movzx  eax,al
c000a123:	01 d0                	add    eax,edx
c000a125:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000a128:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000a12b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a12e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000a132:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000a135:	83 c0 01             	add    eax,0x1
c000a138:	88 c2                	mov    dl,al
c000a13a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a140:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000a143:	88 c2                	mov    dl,al
c000a145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a148:	88 10                	mov    BYTE PTR [eax],dl
c000a14a:	90                   	nop
c000a14b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14e:	c9                   	leave  
c000a14f:	c2 04 00             	ret    0x4

c000a152 <Clock::timeInDatetimeLocal()>:
c000a152:	55                   	push   ebp
c000a153:	89 e5                	mov    ebp,esp
c000a155:	83 ec 08             	sub    esp,0x8
c000a158:	83 ec 0c             	sub    esp,0xc
c000a15b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a15e:	e8 23 f8 ff ff       	call   c0009986 <Clock::timeInSecondsLocal()>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a169:	83 ec 04             	sub    esp,0x4
c000a16c:	52                   	push   edx
c000a16d:	50                   	push   eax
c000a16e:	51                   	push   ecx
c000a16f:	e8 22 fd ff ff       	call   c0009e96 <KeSecondsToDatetime(unsigned long long)>
c000a174:	83 c4 0c             	add    esp,0xc
c000a177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a17a:	c9                   	leave  
c000a17b:	c2 04 00             	ret    0x4

c000a17e <Device::hibernate()>:
c000a17e:	c3                   	ret    
c000a17f:	90                   	nop

c000a180 <Device::wake()>:
c000a180:	c3                   	ret    
c000a181:	90                   	nop

c000a182 <Device::detect()>:
c000a182:	c3                   	ret    
c000a183:	90                   	nop

c000a184 <Device::disableLegacy()>:
c000a184:	c3                   	ret    
c000a185:	90                   	nop

c000a186 <Device::powerSaving(PowerSavingLevel)>:
c000a186:	c3                   	ret    
c000a187:	90                   	nop

c000a188 <DriverlessDevice::close(int, int, void*)>:
c000a188:	31 c0                	xor    eax,eax
c000a18a:	c3                   	ret    
c000a18b:	90                   	nop

c000a18c <DriverlessDevice::detect()>:
c000a18c:	c3                   	ret    
c000a18d:	90                   	nop

c000a18e <DriverlessDevice::open(int, int, void*)>:
c000a18e:	83 ec 18             	sub    esp,0x18
c000a191:	68 cc 92 02 c0       	push   0xc00292cc
c000a196:	e8 75 63 00 00       	call   c0010510 <KePanic(char const*)>
c000a19b:	83 c8 ff             	or     eax,0xffffffff
c000a19e:	83 c4 1c             	add    esp,0x1c
c000a1a1:	c3                   	ret    

c000a1a2 <Device::~Device()>:
c000a1a2:	ba 70 93 02 c0       	mov    edx,0xc0029370
c000a1a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a1ab:	89 10                	mov    DWORD PTR [eax],edx
c000a1ad:	90                   	nop
c000a1ae:	c3                   	ret    
c000a1af:	90                   	nop

c000a1b0 <Device::~Device()>:
c000a1b0:	83 ec 0c             	sub    esp,0xc
c000a1b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a1b7:	e8 e6 ff ff ff       	call   c000a1a2 <Device::~Device()>
c000a1bc:	83 c4 04             	add    esp,0x4
c000a1bf:	83 ec 08             	sub    esp,0x8
c000a1c2:	68 58 01 00 00       	push   0x158
c000a1c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1cb:	e8 f8 39 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000a1d0:	83 c4 10             	add    esp,0x10
c000a1d3:	83 c4 0c             	add    esp,0xc
c000a1d6:	c3                   	ret    
c000a1d7:	90                   	nop

c000a1d8 <Device::findAndLoadDriver()>:
c000a1d8:	c7 44 24 04 ea 92 02 c0 	mov    DWORD PTR [esp+0x4],0xc00292ea
c000a1e0:	e9 97 cd ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000a1e5:	90                   	nop

c000a1e6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000a1e6:	57                   	push   edi
c000a1e7:	b9 09 00 00 00       	mov    ecx,0x9
c000a1ec:	56                   	push   esi
c000a1ed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a1f1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000a1f5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000a1ff:	81 c7 18 01 00 00    	add    edi,0x118
c000a205:	fc                   	cld    
c000a206:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a208:	5e                   	pop    esi
c000a209:	5f                   	pop    edi
c000a20a:	c3                   	ret    
c000a20b:	90                   	nop

c000a20c <Device::preOpenACPI(void*, char*, char*)>:
c000a20c:	57                   	push   edi
c000a20d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000a212:	56                   	push   esi
c000a213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a217:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a21b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000a225:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000a22b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000a231:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a235:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a237:	b9 0e 00 00 00       	mov    ecx,0xe
c000a23c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000a242:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a246:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a248:	5e                   	pop    esi
c000a249:	5f                   	pop    edi
c000a24a:	c3                   	ret    
c000a24b:	90                   	nop

c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000a24c:	53                   	push   ebx
c000a24d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a251:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a255:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a259:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a25d:	0f b6 c0             	movzx  eax,al
c000a260:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a268:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a26c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a270:	5b                   	pop    ebx
c000a271:	e9 df 15 01 00       	jmp    c001b855 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000a276 <Device::getParent()>:
c000a276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a27a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000a280:	c3                   	ret    
c000a281:	90                   	nop

c000a282 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000a282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a286:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a28a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000a28f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a293:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a297:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a29b:	e9 17 17 01 00       	jmp    c001b9b7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000a2a0 <Device::addChild(Device*)>:
c000a2a0:	53                   	push   ebx
c000a2a1:	83 ec 08             	sub    esp,0x8
c000a2a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a2a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2ac:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000a2b2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000a2b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a2ba:	85 d2                	test   edx,edx
c000a2bc:	74 04                	je     c000a2c2 <Device::addChild(Device*)+0x22>
c000a2be:	89 d3                	mov    ebx,edx
c000a2c0:	eb f6                	jmp    c000a2b8 <Device::addChild(Device*)+0x18>
c000a2c2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a2c5:	83 ec 0c             	sub    esp,0xc
c000a2c8:	6a 08                	push   0x8
c000a2ca:	e8 ec 5d 00 00       	call   c00100bb <malloc>
c000a2cf:	89 03                	mov    DWORD PTR [ebx],eax
c000a2d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a2d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a2de:	83 c4 18             	add    esp,0x18
c000a2e1:	5b                   	pop    ebx
c000a2e2:	c3                   	ret    
c000a2e3:	90                   	nop

c000a2e4 <Device::removeAllChildren()>:
c000a2e4:	56                   	push   esi
c000a2e5:	53                   	push   ebx
c000a2e6:	52                   	push   edx
c000a2e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a2eb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000a2f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a2f4:	74 17                	je     c000a30d <Device::removeAllChildren()+0x29>
c000a2f6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a2f9:	85 c0                	test   eax,eax
c000a2fb:	74 0c                	je     c000a309 <Device::removeAllChildren()+0x25>
c000a2fd:	83 ec 0c             	sub    esp,0xc
c000a300:	8b 10                	mov    edx,DWORD PTR [eax]
c000a302:	50                   	push   eax
c000a303:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000a306:	83 c4 10             	add    esp,0x10
c000a309:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a30b:	eb e4                	jmp    c000a2f1 <Device::removeAllChildren()+0xd>
c000a30d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a313:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a319:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a31f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a326:	58                   	pop    eax
c000a327:	5b                   	pop    ebx
c000a328:	5e                   	pop    esi
c000a329:	c3                   	ret    

c000a32a <Device::hibernateAll()>:
c000a32a:	53                   	push   ebx
c000a32b:	83 ec 14             	sub    esp,0x14
c000a32e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a332:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a334:	53                   	push   ebx
c000a335:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a338:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a33e:	83 c4 10             	add    esp,0x10
c000a341:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a344:	74 0f                	je     c000a355 <Device::hibernateAll()+0x2b>
c000a346:	83 ec 0c             	sub    esp,0xc
c000a349:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a34c:	e8 d9 ff ff ff       	call   c000a32a <Device::hibernateAll()>
c000a351:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a353:	eb e9                	jmp    c000a33e <Device::hibernateAll()+0x14>
c000a355:	83 c4 08             	add    esp,0x8
c000a358:	5b                   	pop    ebx
c000a359:	c3                   	ret    

c000a35a <Device::wakeAll()>:
c000a35a:	53                   	push   ebx
c000a35b:	83 ec 14             	sub    esp,0x14
c000a35e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a362:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a364:	53                   	push   ebx
c000a365:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000a368:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a374:	74 0f                	je     c000a385 <Device::wakeAll()+0x2b>
c000a376:	83 ec 0c             	sub    esp,0xc
c000a379:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a37c:	e8 d9 ff ff ff       	call   c000a35a <Device::wakeAll()>
c000a381:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a383:	eb e9                	jmp    c000a36e <Device::wakeAll()+0x14>
c000a385:	83 c4 08             	add    esp,0x8
c000a388:	5b                   	pop    ebx
c000a389:	c3                   	ret    

c000a38a <Device::detectAll()>:
c000a38a:	53                   	push   ebx
c000a38b:	83 ec 14             	sub    esp,0x14
c000a38e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a392:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a394:	53                   	push   ebx
c000a395:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000a398:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a39e:	83 c4 10             	add    esp,0x10
c000a3a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a3a4:	74 0f                	je     c000a3b5 <Device::detectAll()+0x2b>
c000a3a6:	83 ec 0c             	sub    esp,0xc
c000a3a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a3ac:	e8 d9 ff ff ff       	call   c000a38a <Device::detectAll()>
c000a3b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a3b3:	eb e9                	jmp    c000a39e <Device::detectAll()+0x14>
c000a3b5:	83 c4 08             	add    esp,0x8
c000a3b8:	5b                   	pop    ebx
c000a3b9:	c3                   	ret    

c000a3ba <Device::disableLegacyAll()>:
c000a3ba:	c3                   	ret    
c000a3bb:	90                   	nop

c000a3bc <Device::loadDriversForAll()>:
c000a3bc:	c3                   	ret    
c000a3bd:	90                   	nop

c000a3be <Device::powerSavingAll(PowerSavingLevel)>:
c000a3be:	56                   	push   esi
c000a3bf:	53                   	push   ebx
c000a3c0:	83 ec 0c             	sub    esp,0xc
c000a3c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a3c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000a3cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3cd:	56                   	push   esi
c000a3ce:	53                   	push   ebx
c000a3cf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a3d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a3d8:	83 c4 10             	add    esp,0x10
c000a3db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a3de:	74 0f                	je     c000a3ef <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	56                   	push   esi
c000a3e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a3e6:	e8 d3 ff ff ff       	call   c000a3be <Device::powerSavingAll(PowerSavingLevel)>
c000a3eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a3ed:	eb e9                	jmp    c000a3d8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a3ef:	58                   	pop    eax
c000a3f0:	5b                   	pop    ebx
c000a3f1:	5e                   	pop    esi
c000a3f2:	c3                   	ret    
c000a3f3:	90                   	nop

c000a3f4 <Device::setName(char const*)>:
c000a3f4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a3fc:	e9 3f 62 ff ff       	jmp    c0000640 <strcpy>
c000a401:	90                   	nop

c000a402 <Device::Device(char const*)>:
c000a402:	83 ec 1c             	sub    esp,0x1c
c000a405:	ba 70 93 02 c0       	mov    edx,0xc0029370
c000a40a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a40e:	89 10                	mov    DWORD PTR [eax],edx
c000a410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a414:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a41e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a422:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a42c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a430:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a43e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a448:	83 ec 08             	sub    esp,0x8
c000a44b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a44f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a453:	e8 9c ff ff ff       	call   c000a3f4 <Device::setName(char const*)>
c000a458:	83 c4 10             	add    esp,0x10
c000a45b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a46a:	e8 4c 5c 00 00       	call   c00100bb <malloc>
c000a46f:	83 c4 10             	add    esp,0x10
c000a472:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a478:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a47f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a483:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a48d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a493:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a49d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a4a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a4ae:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a4b9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a4c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a4c4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a4ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a4d2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a4dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a4e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a4ee:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a4f8:	90                   	nop
c000a4f9:	83 c4 1c             	add    esp,0x1c
c000a4fc:	c3                   	ret    
c000a4fd:	90                   	nop

c000a4fe <Device::getName()>:
c000a4fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a502:	05 d0 00 00 00       	add    eax,0xd0
c000a507:	c3                   	ret    

c000a508 <Device::closeAll()>:
c000a508:	53                   	push   ebx
c000a509:	83 ec 08             	sub    esp,0x8
c000a50c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a510:	53                   	push   ebx
c000a511:	e8 e8 ff ff ff       	call   c000a4fe <Device::getName()>
c000a516:	52                   	push   edx
c000a517:	50                   	push   eax
c000a518:	68 24 93 02 c0       	push   0xc0029324
c000a51d:	e8 5a ca ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000a522:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a524:	6a 00                	push   0x0
c000a526:	6a 00                	push   0x0
c000a528:	6a 00                	push   0x0
c000a52a:	53                   	push   ebx
c000a52b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a52e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a534:	83 c4 20             	add    esp,0x20
c000a537:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a53a:	74 12                	je     c000a54e <Device::closeAll()+0x46>
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a542:	e8 c1 ff ff ff       	call   c000a508 <Device::closeAll()>
c000a547:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a549:	83 c4 10             	add    esp,0x10
c000a54c:	eb e9                	jmp    c000a537 <Device::closeAll()+0x2f>
c000a54e:	83 c4 08             	add    esp,0x8
c000a551:	5b                   	pop    ebx
c000a552:	c3                   	ret    
c000a553:	90                   	nop

c000a554 <DriverlessDevice::DriverlessDevice(char const*)>:
c000a554:	83 ec 0c             	sub    esp,0xc
c000a557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a55b:	83 ec 08             	sub    esp,0x8
c000a55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a562:	50                   	push   eax
c000a563:	e8 9a fe ff ff       	call   c000a402 <Device::Device(char const*)>
c000a568:	83 c4 10             	add    esp,0x10
c000a56b:	ba 9c 93 02 c0       	mov    edx,0xc002939c
c000a570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a574:	89 10                	mov    DWORD PTR [eax],edx
c000a576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a57a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000a584:	90                   	nop
c000a585:	83 c4 0c             	add    esp,0xc
c000a588:	c3                   	ret    
c000a589:	90                   	nop

c000a58a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000a58a:	57                   	push   edi
c000a58b:	56                   	push   esi
c000a58c:	53                   	push   ebx
c000a58d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a591:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a595:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a599:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000a59f:	75 0c                	jne    c000a5ad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000a5a1:	52                   	push   edx
c000a5a2:	52                   	push   edx
c000a5a3:	53                   	push   ebx
c000a5a4:	56                   	push   esi
c000a5a5:	e8 36 d2 01 00       	call   c00277e0 <LinkedList<Device>::addElement(Device*)>
c000a5aa:	83 c4 10             	add    esp,0x10
c000a5ad:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a5b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a5b6:	74 12                	je     c000a5ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000a5b8:	50                   	push   eax
c000a5b9:	57                   	push   edi
c000a5ba:	56                   	push   esi
c000a5bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a5be:	e8 c7 ff ff ff       	call   c000a58a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a5c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a5c5:	83 c4 10             	add    esp,0x10
c000a5c8:	eb e9                	jmp    c000a5b3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000a5ca:	5b                   	pop    ebx
c000a5cb:	5e                   	pop    esi
c000a5cc:	5f                   	pop    edi
c000a5cd:	c3                   	ret    

c000a5ce <getDevicesOfType(DeviceType)>:
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 14             	sub    esp,0x14
c000a5d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a5d6:	53                   	push   ebx
c000a5d7:	e8 e0 d2 01 00       	call   c00278bc <LinkedList<Device>::LinkedList()>
c000a5dc:	83 c4 0c             	add    esp,0xc
c000a5df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a5e3:	53                   	push   ebx
c000a5e4:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c000a5ea:	e8 9b ff ff ff       	call   c000a58a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a5ef:	89 d8                	mov    eax,ebx
c000a5f1:	83 c4 18             	add    esp,0x18
c000a5f4:	5b                   	pop    ebx
c000a5f5:	c2 04 00             	ret    0x4

c000a5f8 <HardDiskController::HardDiskController(char const*)>:
c000a5f8:	83 ec 0c             	sub    esp,0xc
c000a5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5ff:	83 ec 08             	sub    esp,0x8
c000a602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a606:	50                   	push   eax
c000a607:	e8 f6 fd ff ff       	call   c000a402 <Device::Device(char const*)>
c000a60c:	83 c4 10             	add    esp,0x10
c000a60f:	ba c8 93 02 c0       	mov    edx,0xc00293c8
c000a614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a618:	89 10                	mov    DWORD PTR [eax],edx
c000a61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000a628:	90                   	nop
c000a629:	83 c4 0c             	add    esp,0xc
c000a62c:	c3                   	ret    
c000a62d:	90                   	nop
c000a62e:	66 90                	xchg   ax,ax

c000a630 <HardDiskController::~HardDiskController()>:
c000a630:	83 ec 0c             	sub    esp,0xc
c000a633:	ba c8 93 02 c0       	mov    edx,0xc00293c8
c000a638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a63c:	89 10                	mov    DWORD PTR [eax],edx
c000a63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a642:	83 ec 0c             	sub    esp,0xc
c000a645:	50                   	push   eax
c000a646:	e8 57 fb ff ff       	call   c000a1a2 <Device::~Device()>
c000a64b:	83 c4 10             	add    esp,0x10
c000a64e:	90                   	nop
c000a64f:	83 c4 0c             	add    esp,0xc
c000a652:	c3                   	ret    
c000a653:	90                   	nop

c000a654 <HardDiskController::~HardDiskController()>:
c000a654:	83 ec 0c             	sub    esp,0xc
c000a657:	83 ec 0c             	sub    esp,0xc
c000a65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65e:	e8 cd ff ff ff       	call   c000a630 <HardDiskController::~HardDiskController()>
c000a663:	83 c4 10             	add    esp,0x10
c000a666:	83 ec 08             	sub    esp,0x8
c000a669:	68 58 01 00 00       	push   0x158
c000a66e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a672:	e8 51 35 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000a677:	83 c4 10             	add    esp,0x10
c000a67a:	83 c4 0c             	add    esp,0xc
c000a67d:	c3                   	ret    

c000a67e <PhysicalDisk::eject()>:
c000a67e:	83 c8 ff             	or     eax,0xffffffff
c000a681:	c3                   	ret    

c000a682 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000a682:	83 ec 0c             	sub    esp,0xc
c000a685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a689:	83 ec 08             	sub    esp,0x8
c000a68c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a690:	50                   	push   eax
c000a691:	e8 6c fd ff ff       	call   c000a402 <Device::Device(char const*)>
c000a696:	83 c4 10             	add    esp,0x10
c000a699:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c000a69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a2:	89 10                	mov    DWORD PTR [eax],edx
c000a6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000a6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6be:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000a6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a6d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000a6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000a6e4:	90                   	nop
c000a6e5:	83 c4 0c             	add    esp,0xc
c000a6e8:	c3                   	ret    
c000a6e9:	90                   	nop

c000a6ea <PhysicalDisk::startCache()>:
c000a6ea:	56                   	push   esi
c000a6eb:	53                   	push   ebx
c000a6ec:	83 ec 10             	sub    esp,0x10
c000a6ef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a6f3:	6a 44                	push   0x44
c000a6f5:	e8 c1 59 00 00       	call   c00100bb <malloc>
c000a6fa:	89 c6                	mov    esi,eax
c000a6fc:	58                   	pop    eax
c000a6fd:	5a                   	pop    edx
c000a6fe:	53                   	push   ebx
c000a6ff:	56                   	push   esi
c000a700:	e8 b7 13 00 00       	call   c000babc <VCache::VCache(PhysicalDisk*)>
c000a705:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000a70b:	83 c4 14             	add    esp,0x14
c000a70e:	5b                   	pop    ebx
c000a70f:	5e                   	pop    esi
c000a710:	c3                   	ret    
c000a711:	90                   	nop

c000a712 <PhysicalDisk::~PhysicalDisk()>:
c000a712:	83 ec 0c             	sub    esp,0xc
c000a715:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	89 10                	mov    DWORD PTR [eax],edx
c000a720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a724:	83 ec 0c             	sub    esp,0xc
c000a727:	50                   	push   eax
c000a728:	e8 75 fa ff ff       	call   c000a1a2 <Device::~Device()>
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	90                   	nop
c000a731:	83 c4 0c             	add    esp,0xc
c000a734:	c3                   	ret    
c000a735:	90                   	nop

c000a736 <PhysicalDisk::~PhysicalDisk()>:
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 ec 0c             	sub    esp,0xc
c000a73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a740:	e8 cd ff ff ff       	call   c000a712 <PhysicalDisk::~PhysicalDisk()>
c000a745:	83 c4 10             	add    esp,0x10
c000a748:	83 ec 08             	sub    esp,0x8
c000a74b:	68 6c 01 00 00       	push   0x16c
c000a750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a754:	e8 6f 34 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000a759:	83 c4 10             	add    esp,0x10
c000a75c:	83 c4 0c             	add    esp,0xc
c000a75f:	c3                   	ret    

c000a760 <startGUI(void*)>:
c000a760:	55                   	push   ebp
c000a761:	89 e5                	mov    ebp,esp
c000a763:	83 ec 08             	sub    esp,0x8
c000a766:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a76e:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a773:	85 c0                	test   eax,eax
c000a775:	75 01                	jne    c000a778 <startGUI(void*)+0x18>
c000a777:	fb                   	sti    
c000a778:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a77d:	83 ec 04             	sub    esp,0x4
c000a780:	6a 00                	push   0x0
c000a782:	50                   	push   eax
c000a783:	68 24 94 02 c0       	push   0xc0029424
c000a788:	e8 7f bf 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a78d:	83 c4 10             	add    esp,0x10
c000a790:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a795:	83 ec 04             	sub    esp,0x4
c000a798:	6a 00                	push   0x0
c000a79a:	50                   	push   eax
c000a79b:	68 3e 94 02 c0       	push   0xc002943e
c000a7a0:	e8 67 bf 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	eb fe                	jmp    c000a7a8 <startGUI(void*)+0x48>

c000a7aa <startGUIVESA(void*)>:
c000a7aa:	55                   	push   ebp
c000a7ab:	89 e5                	mov    ebp,esp
c000a7ad:	83 ec 08             	sub    esp,0x8
c000a7b0:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a7b8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a7bd:	85 c0                	test   eax,eax
c000a7bf:	75 01                	jne    c000a7c2 <startGUIVESA(void*)+0x18>
c000a7c1:	fb                   	sti    
c000a7c2:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a7c7:	83 ec 04             	sub    esp,0x4
c000a7ca:	6a 00                	push   0x0
c000a7cc:	50                   	push   eax
c000a7cd:	68 5c 94 02 c0       	push   0xc002945c
c000a7d2:	e8 35 bf 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a7d7:	83 c4 10             	add    esp,0x10
c000a7da:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a7df:	83 ec 04             	sub    esp,0x4
c000a7e2:	6a 00                	push   0x0
c000a7e4:	50                   	push   eax
c000a7e5:	68 3e 94 02 c0       	push   0xc002943e
c000a7ea:	e8 1d bf 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	eb fe                	jmp    c000a7f2 <startGUIVESA(void*)+0x48>

c000a7f4 <sendKeyToTerminal(unsigned char)>:
c000a7f4:	55                   	push   ebp
c000a7f5:	89 e5                	mov    ebp,esp
c000a7f7:	83 ec 28             	sub    esp,0x28
c000a7fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7fd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000a800:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c000a805:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000a809:	83 ec 08             	sub    esp,0x8
c000a80c:	52                   	push   edx
c000a80d:	50                   	push   eax
c000a80e:	e8 b5 89 00 00       	call   c00131c8 <VgaText::receiveKey(unsigned char)>
c000a813:	83 c4 10             	add    esp,0x10
c000a816:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a81a:	83 f8 0a             	cmp    eax,0xa
c000a81d:	74 16                	je     c000a835 <sendKeyToTerminal(unsigned char)+0x41>
c000a81f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a823:	83 f8 03             	cmp    eax,0x3
c000a826:	74 0d                	je     c000a835 <sendKeyToTerminal(unsigned char)+0x41>
c000a828:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a82c:	83 f8 1c             	cmp    eax,0x1c
c000a82f:	0f 85 92 00 00 00    	jne    c000a8c7 <sendKeyToTerminal(unsigned char)+0xd3>
c000a835:	fa                   	cli    
c000a836:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a83b:	83 c0 01             	add    eax,0x1
c000a83e:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000a843:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a848:	83 c0 01             	add    eax,0x1
c000a84b:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000a850:	a1 80 26 03 c0       	mov    eax,ds:0xc0032680
c000a855:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a858:	c7 05 80 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032680,0x0
c000a862:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a866:	74 1f                	je     c000a887 <sendKeyToTerminal(unsigned char)+0x93>
c000a868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a86b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a86e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a871:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a874:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a877:	83 ec 0c             	sub    esp,0xc
c000a87a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a87d:	e8 82 cb 00 00       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c000a882:	83 c4 10             	add    esp,0x10
c000a885:	eb db                	jmp    c000a862 <sendKeyToTerminal(unsigned char)+0x6e>
c000a887:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a88c:	83 e8 01             	sub    eax,0x1
c000a88f:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000a894:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a899:	85 c0                	test   eax,eax
c000a89b:	75 18                	jne    c000a8b5 <sendKeyToTerminal(unsigned char)+0xc1>
c000a89d:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c000a8a2:	85 c0                	test   eax,eax
c000a8a4:	74 0f                	je     c000a8b5 <sendKeyToTerminal(unsigned char)+0xc1>
c000a8a6:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c000a8b0:	e8 f3 c7 00 00       	call   c00170a8 <schedule()>
c000a8b5:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a8bd:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a8c2:	85 c0                	test   eax,eax
c000a8c4:	75 01                	jne    c000a8c7 <sendKeyToTerminal(unsigned char)+0xd3>
c000a8c6:	fb                   	sti    
c000a8c7:	90                   	nop
c000a8c8:	c9                   	leave  
c000a8c9:	c3                   	ret    

c000a8ca <sendKeyboardToken(KeyboardToken)>:
c000a8ca:	55                   	push   ebp
c000a8cb:	89 e5                	mov    ebp,esp
c000a8cd:	83 ec 18             	sub    esp,0x18
c000a8d0:	e8 c0 64 00 00       	call   c0010d95 <KeUserIOReceived()>
c000a8d5:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a8db:	0f b7 c0             	movzx  eax,ax
c000a8de:	83 f2 01             	xor    edx,0x1
c000a8e1:	88 90 a0 26 03 c0    	mov    BYTE PTR [eax-0x3ffcd960],dl
c000a8e7:	a1 88 26 03 c0       	mov    eax,ds:0xc0032688
c000a8ec:	85 c0                	test   eax,eax
c000a8ee:	74 24                	je     c000a914 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a8f0:	8b 0d 88 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032688
c000a8f6:	83 ec 04             	sub    esp,0x4
c000a8f9:	68 a0 26 03 c0       	push   0xc00326a0
c000a8fe:	83 ec 08             	sub    esp,0x8
c000a901:	89 e2                	mov    edx,esp
c000a903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a906:	89 02                	mov    DWORD PTR [edx],eax
c000a908:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a90b:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a90f:	ff d1                	call   ecx
c000a911:	83 c4 10             	add    esp,0x10
c000a914:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a918:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a91b:	0f b6 c0             	movzx  eax,al
c000a91e:	85 c0                	test   eax,eax
c000a920:	0f 84 da 00 00 00    	je     c000aa00 <sendKeyboardToken(KeyboardToken)+0x136>
c000a926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a929:	0f b7 c0             	movzx  eax,ax
c000a92c:	3d 18 03 00 00       	cmp    eax,0x318
c000a931:	75 06                	jne    c000a939 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a933:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a93c:	0f b7 c0             	movzx  eax,ax
c000a93f:	3d 19 03 00 00       	cmp    eax,0x319
c000a944:	75 06                	jne    c000a94c <sendKeyboardToken(KeyboardToken)+0x82>
c000a946:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a94f:	0f b7 c0             	movzx  eax,ax
c000a952:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a957:	75 06                	jne    c000a95f <sendKeyboardToken(KeyboardToken)+0x95>
c000a959:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a962:	0f b7 c0             	movzx  eax,ax
c000a965:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a96a:	75 06                	jne    c000a972 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a96c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a975:	0f b7 c0             	movzx  eax,ax
c000a978:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a97d:	75 06                	jne    c000a985 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a97f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a988:	0f b7 c0             	movzx  eax,ax
c000a98b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a990:	75 06                	jne    c000a998 <sendKeyboardToken(KeyboardToken)+0xce>
c000a992:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a99b:	0f b7 c0             	movzx  eax,ax
c000a99e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a9a3:	75 06                	jne    c000a9ab <sendKeyboardToken(KeyboardToken)+0xe1>
c000a9a5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a9ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9ae:	0f b7 c0             	movzx  eax,ax
c000a9b1:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a9b6:	75 06                	jne    c000a9be <sendKeyboardToken(KeyboardToken)+0xf4>
c000a9b8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a9be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9c1:	0f b7 c0             	movzx  eax,ax
c000a9c4:	3d 20 03 00 00       	cmp    eax,0x320
c000a9c9:	75 06                	jne    c000a9d1 <sendKeyboardToken(KeyboardToken)+0x107>
c000a9cb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a9d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9d4:	0f b7 c0             	movzx  eax,ax
c000a9d7:	3d 21 03 00 00       	cmp    eax,0x321
c000a9dc:	75 06                	jne    c000a9e4 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a9de:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a9e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9e7:	0f b7 c0             	movzx  eax,ax
c000a9ea:	3d 22 03 00 00       	cmp    eax,0x322
c000a9ef:	0f 85 f1 00 00 00    	jne    c000aae6 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a9f5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a9fb:	e9 e6 00 00 00       	jmp    c000aae6 <sendKeyboardToken(KeyboardToken)+0x21c>
c000aa00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa03:	0f b7 c0             	movzx  eax,ax
c000aa06:	3d 18 03 00 00       	cmp    eax,0x318
c000aa0b:	75 0a                	jne    c000aa17 <sendKeyboardToken(KeyboardToken)+0x14d>
c000aa0d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000aa13:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa1a:	0f b7 c0             	movzx  eax,ax
c000aa1d:	3d 19 03 00 00       	cmp    eax,0x319
c000aa22:	75 0a                	jne    c000aa2e <sendKeyboardToken(KeyboardToken)+0x164>
c000aa24:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000aa2a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa31:	0f b7 c0             	movzx  eax,ax
c000aa34:	3d 1a 03 00 00       	cmp    eax,0x31a
c000aa39:	75 0a                	jne    c000aa45 <sendKeyboardToken(KeyboardToken)+0x17b>
c000aa3b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000aa41:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa48:	0f b7 c0             	movzx  eax,ax
c000aa4b:	3d 1b 03 00 00       	cmp    eax,0x31b
c000aa50:	75 0a                	jne    c000aa5c <sendKeyboardToken(KeyboardToken)+0x192>
c000aa52:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000aa58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa5f:	0f b7 c0             	movzx  eax,ax
c000aa62:	3d 1c 03 00 00       	cmp    eax,0x31c
c000aa67:	75 0a                	jne    c000aa73 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000aa69:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000aa6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa76:	0f b7 c0             	movzx  eax,ax
c000aa79:	3d 1d 03 00 00       	cmp    eax,0x31d
c000aa7e:	75 0a                	jne    c000aa8a <sendKeyboardToken(KeyboardToken)+0x1c0>
c000aa80:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000aa86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa8d:	0f b7 c0             	movzx  eax,ax
c000aa90:	3d 1e 03 00 00       	cmp    eax,0x31e
c000aa95:	75 0a                	jne    c000aaa1 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000aa97:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000aa9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aaa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aaa4:	0f b7 c0             	movzx  eax,ax
c000aaa7:	3d 1f 03 00 00       	cmp    eax,0x31f
c000aaac:	75 0a                	jne    c000aab8 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000aaae:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000aab4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aabb:	0f b7 c0             	movzx  eax,ax
c000aabe:	3d 20 03 00 00       	cmp    eax,0x320
c000aac3:	75 0a                	jne    c000aacf <sendKeyboardToken(KeyboardToken)+0x205>
c000aac5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000aacb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aacf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aad2:	0f b7 c0             	movzx  eax,ax
c000aad5:	3d 21 03 00 00       	cmp    eax,0x321
c000aada:	75 0a                	jne    c000aae6 <sendKeyboardToken(KeyboardToken)+0x21c>
c000aadc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000aae2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aae9:	0f b7 c0             	movzx  eax,ax
c000aaec:	3d 00 02 00 00       	cmp    eax,0x200
c000aaf1:	75 2f                	jne    c000ab22 <sendKeyboardToken(KeyboardToken)+0x258>
c000aaf3:	a0 a0 2a 03 c0       	mov    al,ds:0xc0032aa0
c000aaf8:	83 f0 01             	xor    eax,0x1
c000aafb:	0f b6 c0             	movzx  eax,al
c000aafe:	85 c0                	test   eax,eax
c000ab00:	74 20                	je     c000ab22 <sendKeyboardToken(KeyboardToken)+0x258>
c000ab02:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000ab07:	6a 01                	push   0x1
c000ab09:	6a 00                	push   0x0
c000ab0b:	68 60 a7 00 c0       	push   0xc000a760
c000ab10:	50                   	push   eax
c000ab11:	e8 c6 c2 00 00       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c000ab16:	83 c4 10             	add    esp,0x10
c000ab19:	c6 05 a0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032aa0,0x1
c000ab20:	eb 3a                	jmp    c000ab5c <sendKeyboardToken(KeyboardToken)+0x292>
c000ab22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab25:	0f b7 c0             	movzx  eax,ax
c000ab28:	3d 01 02 00 00       	cmp    eax,0x201
c000ab2d:	75 2d                	jne    c000ab5c <sendKeyboardToken(KeyboardToken)+0x292>
c000ab2f:	a0 a0 2a 03 c0       	mov    al,ds:0xc0032aa0
c000ab34:	83 f0 01             	xor    eax,0x1
c000ab37:	0f b6 c0             	movzx  eax,al
c000ab3a:	85 c0                	test   eax,eax
c000ab3c:	74 1e                	je     c000ab5c <sendKeyboardToken(KeyboardToken)+0x292>
c000ab3e:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000ab43:	6a 01                	push   0x1
c000ab45:	6a 00                	push   0x0
c000ab47:	68 aa a7 00 c0       	push   0xc000a7aa
c000ab4c:	50                   	push   eax
c000ab4d:	e8 8a c2 00 00       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c000ab52:	83 c4 10             	add    esp,0x10
c000ab55:	c6 05 a0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032aa0,0x1
c000ab5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab5f:	0f b7 c0             	movzx  eax,ax
c000ab62:	3d 25 03 00 00       	cmp    eax,0x325
c000ab67:	75 06                	jne    c000ab6f <sendKeyboardToken(KeyboardToken)+0x2a5>
c000ab69:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ab6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab72:	0f b7 c0             	movzx  eax,ax
c000ab75:	3d 24 03 00 00       	cmp    eax,0x324
c000ab7a:	75 06                	jne    c000ab82 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000ab7c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ab82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab85:	0f b7 c0             	movzx  eax,ax
c000ab88:	3d 23 03 00 00       	cmp    eax,0x323
c000ab8d:	75 06                	jne    c000ab95 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000ab8f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ab95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab98:	0f b7 c0             	movzx  eax,ax
c000ab9b:	3d 26 03 00 00       	cmp    eax,0x326
c000aba0:	75 06                	jne    c000aba8 <sendKeyboardToken(KeyboardToken)+0x2de>
c000aba2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000aba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abab:	0f b7 c0             	movzx  eax,ax
c000abae:	3d 27 03 00 00       	cmp    eax,0x327
c000abb3:	75 06                	jne    c000abbb <sendKeyboardToken(KeyboardToken)+0x2f1>
c000abb5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000abbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abbe:	0f b7 c0             	movzx  eax,ax
c000abc1:	3d 22 03 00 00       	cmp    eax,0x322
c000abc6:	75 06                	jne    c000abce <sendKeyboardToken(KeyboardToken)+0x304>
c000abc8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000abce:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000abd2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000abd5:	83 f0 01             	xor    eax,0x1
c000abd8:	0f b6 c0             	movzx  eax,al
c000abdb:	85 c0                	test   eax,eax
c000abdd:	74 7c                	je     c000ac5b <sendKeyboardToken(KeyboardToken)+0x391>
c000abdf:	a0 a1 27 03 c0       	mov    al,ds:0xc00327a1
c000abe4:	0f b6 c0             	movzx  eax,al
c000abe7:	85 c0                	test   eax,eax
c000abe9:	74 43                	je     c000ac2e <sendKeyboardToken(KeyboardToken)+0x364>
c000abeb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000abef:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000abf3:	85 c0                	test   eax,eax
c000abf5:	74 2b                	je     c000ac22 <sendKeyboardToken(KeyboardToken)+0x358>
c000abf7:	8b 15 a4 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032aa4
c000abfd:	89 d0                	mov    eax,edx
c000abff:	c1 e0 02             	shl    eax,0x2
c000ac02:	01 d0                	add    eax,edx
c000ac04:	01 c0                	add    eax,eax
c000ac06:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c000ac0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac0e:	0f b7 c0             	movzx  eax,ax
c000ac11:	8d 50 d0             	lea    edx,[eax-0x30]
c000ac14:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000ac19:	01 d0                	add    eax,edx
c000ac1b:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c000ac20:	eb 71                	jmp    c000ac93 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ac22:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000ac2c:	eb 65                	jmp    c000ac93 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ac2e:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000ac33:	85 c0                	test   eax,eax
c000ac35:	74 18                	je     c000ac4f <sendKeyboardToken(KeyboardToken)+0x385>
c000ac37:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000ac3c:	0f b6 c0             	movzx  eax,al
c000ac3f:	83 ec 0c             	sub    esp,0xc
c000ac42:	50                   	push   eax
c000ac43:	e8 ac fb ff ff       	call   c000a7f4 <sendKeyToTerminal(unsigned char)>
c000ac48:	83 c4 10             	add    esp,0x10
c000ac4b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ac4f:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000ac59:	eb 38                	jmp    c000ac93 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ac5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac5e:	0f b7 c0             	movzx  eax,ax
c000ac61:	3d 01 01 00 00       	cmp    eax,0x101
c000ac66:	75 2b                	jne    c000ac93 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ac68:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000ac6d:	85 c0                	test   eax,eax
c000ac6f:	74 18                	je     c000ac89 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000ac71:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000ac76:	0f b6 c0             	movzx  eax,al
c000ac79:	83 ec 0c             	sub    esp,0xc
c000ac7c:	50                   	push   eax
c000ac7d:	e8 72 fb ff ff       	call   c000a7f4 <sendKeyToTerminal(unsigned char)>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ac89:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000ac93:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ac96:	83 f0 01             	xor    eax,0x1
c000ac99:	0f b6 c0             	movzx  eax,al
c000ac9c:	85 c0                	test   eax,eax
c000ac9e:	74 5a                	je     c000acfa <sendKeyboardToken(KeyboardToken)+0x430>
c000aca0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000aca3:	83 f0 01             	xor    eax,0x1
c000aca6:	0f b6 c0             	movzx  eax,al
c000aca9:	85 c0                	test   eax,eax
c000acab:	74 4d                	je     c000acfa <sendKeyboardToken(KeyboardToken)+0x430>
c000acad:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c000acb2:	83 f0 01             	xor    eax,0x1
c000acb5:	0f b6 c0             	movzx  eax,al
c000acb8:	85 c0                	test   eax,eax
c000acba:	74 3e                	je     c000acfa <sendKeyboardToken(KeyboardToken)+0x430>
c000acbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acbf:	0f b7 c0             	movzx  eax,ax
c000acc2:	83 f8 1f             	cmp    eax,0x1f
c000acc5:	76 0b                	jbe    c000acd2 <sendKeyboardToken(KeyboardToken)+0x408>
c000acc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acca:	0f b7 c0             	movzx  eax,ax
c000accd:	83 f8 7e             	cmp    eax,0x7e
c000acd0:	76 16                	jbe    c000ace8 <sendKeyboardToken(KeyboardToken)+0x41e>
c000acd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acd5:	0f b7 c0             	movzx  eax,ax
c000acd8:	83 f8 0a             	cmp    eax,0xa
c000acdb:	74 0b                	je     c000ace8 <sendKeyboardToken(KeyboardToken)+0x41e>
c000acdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ace0:	0f b7 c0             	movzx  eax,ax
c000ace3:	83 f8 08             	cmp    eax,0x8
c000ace6:	75 12                	jne    c000acfa <sendKeyboardToken(KeyboardToken)+0x430>
c000ace8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aceb:	0f b6 c0             	movzx  eax,al
c000acee:	83 ec 0c             	sub    esp,0xc
c000acf1:	50                   	push   eax
c000acf2:	e8 fd fa ff ff       	call   c000a7f4 <sendKeyToTerminal(unsigned char)>
c000acf7:	83 c4 10             	add    esp,0x10
c000acfa:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000acfd:	83 f0 01             	xor    eax,0x1
c000ad00:	0f b6 c0             	movzx  eax,al
c000ad03:	85 c0                	test   eax,eax
c000ad05:	74 5d                	je     c000ad64 <sendKeyboardToken(KeyboardToken)+0x49a>
c000ad07:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ad0a:	83 f0 01             	xor    eax,0x1
c000ad0d:	0f b6 c0             	movzx  eax,al
c000ad10:	85 c0                	test   eax,eax
c000ad12:	74 50                	je     c000ad64 <sendKeyboardToken(KeyboardToken)+0x49a>
c000ad14:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c000ad19:	0f b6 c0             	movzx  eax,al
c000ad1c:	85 c0                	test   eax,eax
c000ad1e:	74 44                	je     c000ad64 <sendKeyboardToken(KeyboardToken)+0x49a>
c000ad20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad23:	0f b7 c0             	movzx  eax,ax
c000ad26:	83 f8 3f             	cmp    eax,0x3f
c000ad29:	76 39                	jbe    c000ad64 <sendKeyboardToken(KeyboardToken)+0x49a>
c000ad2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad2e:	0f b7 c0             	movzx  eax,ax
c000ad31:	83 f8 7f             	cmp    eax,0x7f
c000ad34:	77 2e                	ja     c000ad64 <sendKeyboardToken(KeyboardToken)+0x49a>
c000ad36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad39:	88 c2                	mov    dl,al
c000ad3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad3e:	0f b7 c0             	movzx  eax,ax
c000ad41:	83 f8 5f             	cmp    eax,0x5f
c000ad44:	76 04                	jbe    c000ad4a <sendKeyboardToken(KeyboardToken)+0x480>
c000ad46:	b0 20                	mov    al,0x20
c000ad48:	eb 02                	jmp    c000ad4c <sendKeyboardToken(KeyboardToken)+0x482>
c000ad4a:	b0 00                	mov    al,0x0
c000ad4c:	89 d1                	mov    ecx,edx
c000ad4e:	29 c1                	sub    ecx,eax
c000ad50:	89 c8                	mov    eax,ecx
c000ad52:	83 e8 40             	sub    eax,0x40
c000ad55:	0f b6 c0             	movzx  eax,al
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	50                   	push   eax
c000ad5c:	e8 93 fa ff ff       	call   c000a7f4 <sendKeyToTerminal(unsigned char)>
c000ad61:	83 c4 10             	add    esp,0x10
c000ad64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad67:	0f b7 c0             	movzx  eax,ax
c000ad6a:	3d 00 03 00 00       	cmp    eax,0x300
c000ad6f:	75 12                	jne    c000ad83 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000ad71:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ad74:	83 f0 01             	xor    eax,0x1
c000ad77:	0f b6 c0             	movzx  eax,al
c000ad7a:	85 c0                	test   eax,eax
c000ad7c:	74 05                	je     c000ad83 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000ad7e:	e8 3a 7b 00 00       	call   c00128bd <doTerminalCycle()>
c000ad83:	90                   	nop
c000ad84:	c9                   	leave  
c000ad85:	c3                   	ret    

c000ad86 <clearInternalKeybuffer(VgaText*)>:
c000ad86:	55                   	push   ebp
c000ad87:	89 e5                	mov    ebp,esp
c000ad89:	83 ec 08             	sub    esp,0x8
c000ad8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad8f:	05 02 01 00 00       	add    eax,0x102
c000ad94:	83 ec 0c             	sub    esp,0xc
c000ad97:	50                   	push   eax
c000ad98:	e8 d3 57 ff ff       	call   c0000570 <strlen>
c000ad9d:	83 c4 10             	add    esp,0x10
c000ada0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ada3:	81 c2 02 01 00 00    	add    edx,0x102
c000ada9:	83 ec 04             	sub    esp,0x4
c000adac:	50                   	push   eax
c000adad:	6a 00                	push   0x0
c000adaf:	52                   	push   edx
c000adb0:	e8 3b 57 ff ff       	call   c00004f0 <memset>
c000adb5:	83 c4 10             	add    esp,0x10
c000adb8:	90                   	nop
c000adb9:	c9                   	leave  
c000adba:	c3                   	ret    

c000adbb <readKeyboard(VgaText*, char*, unsigned long)>:
c000adbb:	55                   	push   ebp
c000adbc:	89 e5                	mov    ebp,esp
c000adbe:	83 ec 18             	sub    esp,0x18
c000adc1:	a1 88 26 03 c0       	mov    eax,ds:0xc0032688
c000adc6:	85 c0                	test   eax,eax
c000adc8:	74 2a                	je     c000adf4 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000adca:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000add0:	8b 0d 88 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032688
c000add6:	83 ec 04             	sub    esp,0x4
c000add9:	68 a0 26 03 c0       	push   0xc00326a0
c000adde:	83 ec 08             	sub    esp,0x8
c000ade1:	89 e2                	mov    edx,esp
c000ade3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ade6:	89 02                	mov    DWORD PTR [edx],eax
c000ade8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000adeb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000adef:	ff d1                	call   ecx
c000adf1:	83 c4 10             	add    esp,0x10
c000adf4:	fb                   	sti    
c000adf5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000adfc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ae00:	0f 84 08 01 00 00    	je     c000af0e <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ae06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae09:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ae0f:	0f be c0             	movsx  eax,al
c000ae12:	85 c0                	test   eax,eax
c000ae14:	75 27                	jne    c000ae3d <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000ae16:	fa                   	cli    
c000ae17:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ae1c:	83 c0 01             	add    eax,0x1
c000ae1f:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000ae24:	e8 7f c2 00 00       	call   c00170a8 <schedule()>
c000ae29:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000ae31:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ae36:	85 c0                	test   eax,eax
c000ae38:	75 cc                	jne    c000ae06 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ae3a:	fb                   	sti    
c000ae3b:	eb c9                	jmp    c000ae06 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ae3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ae40:	8d 50 01             	lea    edx,[eax+0x1]
c000ae43:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ae46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ae49:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000ae4f:	88 10                	mov    BYTE PTR [eax],dl
c000ae51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae54:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ae5a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ae5d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ae61:	83 f8 03             	cmp    eax,0x3
c000ae64:	75 1e                	jne    c000ae84 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000ae66:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ae6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ae6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ae70:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000ae76:	83 ec 08             	sub    esp,0x8
c000ae79:	6a 02                	push   0x2
c000ae7b:	50                   	push   eax
c000ae7c:	e8 aa 68 00 00       	call   c001172b <KeRaiseSignal(SigHandlerBlock*, int)>
c000ae81:	83 c4 10             	add    esp,0x10
c000ae84:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ae88:	83 f8 1c             	cmp    eax,0x1c
c000ae8b:	75 1e                	jne    c000aeab <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000ae8d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ae92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ae94:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ae97:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000ae9d:	83 ec 08             	sub    esp,0x8
c000aea0:	6a 09                	push   0x9
c000aea2:	50                   	push   eax
c000aea3:	e8 83 68 00 00       	call   c001172b <KeRaiseSignal(SigHandlerBlock*, int)>
c000aea8:	83 c4 10             	add    esp,0x10
c000aeab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeae:	05 02 01 00 00       	add    eax,0x102
c000aeb3:	83 ec 0c             	sub    esp,0xc
c000aeb6:	50                   	push   eax
c000aeb7:	e8 b4 56 ff ff       	call   c0000570 <strlen>
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aec2:	81 c2 02 01 00 00    	add    edx,0x102
c000aec8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000aecb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aece:	81 c2 02 01 00 00    	add    edx,0x102
c000aed4:	83 ec 04             	sub    esp,0x4
c000aed7:	50                   	push   eax
c000aed8:	51                   	push   ecx
c000aed9:	52                   	push   edx
c000aeda:	e8 f1 54 ff ff       	call   c00003d0 <memmove>
c000aedf:	83 c4 10             	add    esp,0x10
c000aee2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000aee6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000aeea:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000aeee:	83 f8 0a             	cmp    eax,0xa
c000aef1:	74 16                	je     c000af09 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000aef3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000aef7:	83 f8 03             	cmp    eax,0x3
c000aefa:	74 0d                	je     c000af09 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000aefc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000af00:	83 f8 1c             	cmp    eax,0x1c
c000af03:	0f 85 f3 fe ff ff    	jne    c000adfc <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000af09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000af0c:	eb 03                	jmp    c000af11 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000af0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000af11:	c9                   	leave  
c000af12:	c3                   	ret    
c000af13:	90                   	nop

c000af14 <Keyboard::Keyboard(char const*)>:
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1b:	83 ec 08             	sub    esp,0x8
c000af1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af22:	50                   	push   eax
c000af23:	e8 da f4 ff ff       	call   c000a402 <Device::Device(char const*)>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	ba 80 94 02 c0       	mov    edx,0xc0029480
c000af30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af34:	89 10                	mov    DWORD PTR [eax],edx
c000af36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000af44:	c6 05 84 26 03 c0 01 	mov    BYTE PTR ds:0xc0032684,0x1
c000af4b:	90                   	nop
c000af4c:	83 c4 0c             	add    esp,0xc
c000af4f:	c3                   	ret    

c000af50 <Keyboard::~Keyboard()>:
c000af50:	83 ec 0c             	sub    esp,0xc
c000af53:	ba 80 94 02 c0       	mov    edx,0xc0029480
c000af58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5c:	89 10                	mov    DWORD PTR [eax],edx
c000af5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	50                   	push   eax
c000af66:	e8 37 f2 ff ff       	call   c000a1a2 <Device::~Device()>
c000af6b:	83 c4 10             	add    esp,0x10
c000af6e:	90                   	nop
c000af6f:	83 c4 0c             	add    esp,0xc
c000af72:	c3                   	ret    
c000af73:	90                   	nop

c000af74 <Keyboard::~Keyboard()>:
c000af74:	83 ec 0c             	sub    esp,0xc
c000af77:	83 ec 0c             	sub    esp,0xc
c000af7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7e:	e8 cd ff ff ff       	call   c000af50 <Keyboard::~Keyboard()>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	83 ec 08             	sub    esp,0x8
c000af89:	68 5c 01 00 00       	push   0x15c
c000af8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af92:	e8 31 2c 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	83 c4 0c             	add    esp,0xc
c000af9d:	c3                   	ret    

c000af9e <LogicalDisk::close(int, int, void*)>:
c000af9e:	83 c8 ff             	or     eax,0xffffffff
c000afa1:	c3                   	ret    

c000afa2 <LogicalDisk::~LogicalDisk()>:
c000afa2:	83 ec 0c             	sub    esp,0xc
c000afa5:	ba f8 94 02 c0       	mov    edx,0xc00294f8
c000afaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afae:	89 10                	mov    DWORD PTR [eax],edx
c000afb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	50                   	push   eax
c000afb8:	e8 e5 f1 ff ff       	call   c000a1a2 <Device::~Device()>
c000afbd:	83 c4 10             	add    esp,0x10
c000afc0:	90                   	nop
c000afc1:	83 c4 0c             	add    esp,0xc
c000afc4:	c3                   	ret    
c000afc5:	90                   	nop

c000afc6 <LogicalDisk::~LogicalDisk()>:
c000afc6:	83 ec 0c             	sub    esp,0xc
c000afc9:	83 ec 0c             	sub    esp,0xc
c000afcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afd0:	e8 cd ff ff ff       	call   c000afa2 <LogicalDisk::~LogicalDisk()>
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	83 ec 08             	sub    esp,0x8
c000afdb:	68 78 01 00 00       	push   0x178
c000afe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe4:	e8 df 2b 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000afe9:	83 c4 10             	add    esp,0x10
c000afec:	83 c4 0c             	add    esp,0xc
c000afef:	c3                   	ret    

c000aff0 <LogicalDisk::open(int, int, void*)>:
c000aff0:	83 ec 18             	sub    esp,0x18
c000aff3:	68 ac 94 02 c0       	push   0xc00294ac
c000aff8:	e8 13 55 00 00       	call   c0010510 <KePanic(char const*)>
c000affd:	83 c8 ff             	or     eax,0xffffffff
c000b000:	83 c4 1c             	add    esp,0x1c
c000b003:	c3                   	ret    

c000b004 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000b004:	53                   	push   ebx
c000b005:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b009:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b00d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b011:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000b017:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000b01d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000b023:	77 10                	ja     c000b035 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000b025:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000b02b:	89 d3                	mov    ebx,edx
c000b02d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000b033:	72 05                	jb     c000b03a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000b035:	83 c8 ff             	or     eax,0xffffffff
c000b038:	89 c2                	mov    edx,eax
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000b03c:	56                   	push   esi
c000b03d:	83 c8 ff             	or     eax,0xffffffff
c000b040:	53                   	push   ebx
c000b041:	89 c2                	mov    edx,eax
c000b043:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b047:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b04b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b04f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b055:	77 27                	ja     c000b07e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b057:	89 d8                	mov    eax,ebx
c000b059:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000b05f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000b065:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b06a:	89 c2                	mov    edx,eax
c000b06c:	73 10                	jae    c000b07e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b06e:	89 c8                	mov    eax,ecx
c000b070:	89 da                	mov    edx,ebx
c000b072:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000b078:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000b07e:	5b                   	pop    ebx
c000b07f:	5e                   	pop    esi
c000b080:	c3                   	ret    
c000b081:	90                   	nop

c000b082 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b082:	83 ec 1c             	sub    esp,0x1c
c000b085:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b089:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b08d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b095:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b099:	89 04 24             	mov    DWORD PTR [esp],eax
c000b09c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b0a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0a8:	83 ec 08             	sub    esp,0x8
c000b0ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b0af:	50                   	push   eax
c000b0b0:	e8 4d f3 ff ff       	call   c000a402 <Device::Device(char const*)>
c000b0b5:	83 c4 10             	add    esp,0x10
c000b0b8:	ba f8 94 02 c0       	mov    edx,0xc00294f8
c000b0bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0c1:	89 10                	mov    DWORD PTR [eax],edx
c000b0c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b0ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0d2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000b0d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0dd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b0e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0e8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000b0f2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b0f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b0fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0fe:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000b104:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000b10a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b115:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000b11b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000b121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b125:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b129:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000b12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b133:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b13d:	90                   	nop
c000b13e:	83 c4 1c             	add    esp,0x1c
c000b141:	c3                   	ret    

c000b142 <LogicalDisk::assignDriveLetter()>:
c000b142:	55                   	push   ebp
c000b143:	57                   	push   edi
c000b144:	56                   	push   esi
c000b145:	53                   	push   ebx
c000b146:	83 ec 14             	sub    esp,0x14
c000b149:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b14d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000b153:	b0 41                	mov    al,0x41
c000b155:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000b15b:	84 d2                	test   dl,dl
c000b15d:	75 02                	jne    c000b161 <LogicalDisk::assignDriveLetter()+0x1f>
c000b15f:	b0 43                	mov    al,0x43
c000b161:	8b 3d c0 2a 03 c0    	mov    edi,DWORD PTR ds:0xc0032ac0
c000b167:	0f b6 ca             	movzx  ecx,dl
c000b16a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000b16e:	0f be e8             	movsx  ebp,al
c000b171:	8b 3d c4 2a 03 c0    	mov    edi,DWORD PTR ds:0xc0032ac4
c000b177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b17b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000b17f:	3c 43                	cmp    al,0x43
c000b181:	75 10                	jne    c000b193 <LogicalDisk::assignDriveLetter()+0x51>
c000b183:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000b18a:	75 5a                	jne    c000b1e6 <LogicalDisk::assignDriveLetter()+0xa4>
c000b18c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b191:	75 53                	jne    c000b1e6 <LogicalDisk::assignDriveLetter()+0xa4>
c000b193:	8d 75 bf             	lea    esi,[ebp-0x41]
c000b196:	ba 01 00 00 00       	mov    edx,0x1
c000b19b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b19e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000b1a1:	d3 e2                	shl    edx,cl
c000b1a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1a7:	89 d7                	mov    edi,edx
c000b1a9:	89 d6                	mov    esi,edx
c000b1ab:	c1 ff 1f             	sar    edi,0x1f
c000b1ae:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000b1b2:	21 f9                	and    ecx,edi
c000b1b4:	09 d1                	or     ecx,edx
c000b1b6:	75 2e                	jne    c000b1e6 <LogicalDisk::assignDriveLetter()+0xa4>
c000b1b8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000b1bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b1c0:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000b1c6:	09 f2                	or     edx,esi
c000b1c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000b1cb:	89 15 c0 2a 03 c0    	mov    DWORD PTR ds:0xc0032ac0,edx
c000b1d1:	89 1c b5 e0 2a 03 c0 	mov    DWORD PTR [esi*4-0x3ffcd520],ebx
c000b1d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b1dc:	09 fa                	or     edx,edi
c000b1de:	89 15 c4 2a 03 c0    	mov    DWORD PTR ds:0xc0032ac4,edx
c000b1e4:	eb 0d                	jmp    c000b1f3 <LogicalDisk::assignDriveLetter()+0xb1>
c000b1e6:	8d 50 01             	lea    edx,[eax+0x1]
c000b1e9:	45                   	inc    ebp
c000b1ea:	88 d0                	mov    al,dl
c000b1ec:	80 fa 5b             	cmp    dl,0x5b
c000b1ef:	75 8e                	jne    c000b17f <LogicalDisk::assignDriveLetter()+0x3d>
c000b1f1:	31 c0                	xor    eax,eax
c000b1f3:	83 c4 14             	add    esp,0x14
c000b1f6:	5b                   	pop    ebx
c000b1f7:	5e                   	pop    esi
c000b1f8:	5f                   	pop    edi
c000b1f9:	5d                   	pop    ebp
c000b1fa:	c3                   	ret    
c000b1fb:	90                   	nop

c000b1fc <LogicalDisk::mount()>:
c000b1fc:	56                   	push   esi
c000b1fd:	53                   	push   ebx
c000b1fe:	53                   	push   ebx
c000b1ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b203:	8b 1d 04 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032304
c000b209:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000b213:	85 db                	test   ebx,ebx
c000b215:	74 27                	je     c000b23e <LogicalDisk::mount()+0x42>
c000b217:	51                   	push   ecx
c000b218:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000b21f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b221:	83 e8 41             	sub    eax,0x41
c000b224:	50                   	push   eax
c000b225:	56                   	push   esi
c000b226:	53                   	push   ebx
c000b227:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	84 c0                	test   al,al
c000b22f:	74 08                	je     c000b239 <LogicalDisk::mount()+0x3d>
c000b231:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000b237:	eb 07                	jmp    c000b240 <LogicalDisk::mount()+0x44>
c000b239:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000b23c:	eb d5                	jmp    c000b213 <LogicalDisk::mount()+0x17>
c000b23e:	31 c0                	xor    eax,eax
c000b240:	5a                   	pop    edx
c000b241:	5b                   	pop    ebx
c000b242:	5e                   	pop    esi
c000b243:	c3                   	ret    

c000b244 <LogicalDisk::unmount()>:
c000b244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b248:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b252:	c3                   	ret    
c000b253:	90                   	nop

c000b254 <LogicalDisk::eject()>:
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000b25e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b260:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b264:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000b267:	90                   	nop

c000b268 <LogicalDisk::unassignDriveLetter()>:
c000b268:	57                   	push   edi
c000b269:	56                   	push   esi
c000b26a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b26e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000b275:	85 c9                	test   ecx,ecx
c000b277:	75 0f                	jne    c000b288 <LogicalDisk::unassignDriveLetter()+0x20>
c000b279:	c7 44 24 0c d0 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc00294d0
c000b281:	5e                   	pop    esi
c000b282:	5f                   	pop    edi
c000b283:	e9 88 52 00 00       	jmp    c0010510 <KePanic(char const*)>
c000b288:	83 e9 41             	sub    ecx,0x41
c000b28b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000b292:	b8 01 00 00 00       	mov    eax,0x1
c000b297:	c7 04 8d e0 2a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffcd520],0x0
c000b2a2:	d3 e0                	shl    eax,cl
c000b2a4:	89 c7                	mov    edi,eax
c000b2a6:	f7 d0                	not    eax
c000b2a8:	c1 ff 1f             	sar    edi,0x1f
c000b2ab:	21 05 c0 2a 03 c0    	and    DWORD PTR ds:0xc0032ac0,eax
c000b2b1:	89 fe                	mov    esi,edi
c000b2b3:	f7 d6                	not    esi
c000b2b5:	21 35 c4 2a 03 c0    	and    DWORD PTR ds:0xc0032ac4,esi
c000b2bb:	5e                   	pop    esi
c000b2bc:	5f                   	pop    edi
c000b2bd:	c3                   	ret    

c000b2be <LogicalDisk::read(unsigned long long, int, void*)>:
c000b2be:	57                   	push   edi
c000b2bf:	56                   	push   esi
c000b2c0:	53                   	push   ebx
c000b2c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b2d7:	77 41                	ja     c000b31a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000b2d9:	99                   	cdq    
c000b2da:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b2e0:	01 c8                	add    eax,ecx
c000b2e2:	11 da                	adc    edx,ebx
c000b2e4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b2ea:	19 d7                	sbb    edi,edx
c000b2ec:	72 33                	jb     c000b321 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000b2ee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b2f4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b2fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b2fe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b302:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b308:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b312:	5b                   	pop    ebx
c000b313:	5e                   	pop    esi
c000b314:	5f                   	pop    edi
c000b315:	e9 bc 0b 00 00       	jmp    c000bed6 <VCache::read(unsigned long long, int, void*)>
c000b31a:	b8 05 00 00 00       	mov    eax,0x5
c000b31f:	eb 05                	jmp    c000b326 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000b321:	b8 07 00 00 00       	mov    eax,0x7
c000b326:	5b                   	pop    ebx
c000b327:	5e                   	pop    esi
c000b328:	5f                   	pop    edi
c000b329:	c3                   	ret    

c000b32a <LogicalDisk::write(unsigned long long, int, void*)>:
c000b32a:	57                   	push   edi
c000b32b:	56                   	push   esi
c000b32c:	53                   	push   ebx
c000b32d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b335:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b339:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b33d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b343:	77 41                	ja     c000b386 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000b345:	99                   	cdq    
c000b346:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b34c:	01 c8                	add    eax,ecx
c000b34e:	11 da                	adc    edx,ebx
c000b350:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b356:	19 d7                	sbb    edi,edx
c000b358:	72 33                	jb     c000b38d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000b35a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b360:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b366:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b36a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b36e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b374:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b37a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b37e:	5b                   	pop    ebx
c000b37f:	5e                   	pop    esi
c000b380:	5f                   	pop    edi
c000b381:	e9 82 09 00 00       	jmp    c000bd08 <VCache::write(unsigned long long, int, void*)>
c000b386:	b8 05 00 00 00       	mov    eax,0x5
c000b38b:	eb 05                	jmp    c000b392 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000b38d:	b8 07 00 00 00       	mov    eax,0x7
c000b392:	5b                   	pop    ebx
c000b393:	5e                   	pop    esi
c000b394:	5f                   	pop    edi
c000b395:	c3                   	ret    
c000b396:	66 90                	xchg   ax,ax

c000b398 <Mouse::Mouse(char const*)>:
c000b398:	83 ec 0c             	sub    esp,0xc
c000b39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39f:	83 ec 08             	sub    esp,0x8
c000b3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a6:	50                   	push   eax
c000b3a7:	e8 56 f0 ff ff       	call   c000a402 <Device::Device(char const*)>
c000b3ac:	83 c4 10             	add    esp,0x10
c000b3af:	ba 24 95 02 c0       	mov    edx,0xc0029524
c000b3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b8:	89 10                	mov    DWORD PTR [eax],edx
c000b3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3be:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000b3c8:	90                   	nop
c000b3c9:	83 c4 0c             	add    esp,0xc
c000b3cc:	c3                   	ret    
c000b3cd:	90                   	nop
c000b3ce:	66 90                	xchg   ax,ax

c000b3d0 <Mouse::~Mouse()>:
c000b3d0:	83 ec 0c             	sub    esp,0xc
c000b3d3:	ba 24 95 02 c0       	mov    edx,0xc0029524
c000b3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3dc:	89 10                	mov    DWORD PTR [eax],edx
c000b3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	50                   	push   eax
c000b3e6:	e8 b7 ed ff ff       	call   c000a1a2 <Device::~Device()>
c000b3eb:	83 c4 10             	add    esp,0x10
c000b3ee:	90                   	nop
c000b3ef:	83 c4 0c             	add    esp,0xc
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <Mouse::~Mouse()>:
c000b3f4:	83 ec 0c             	sub    esp,0xc
c000b3f7:	83 ec 0c             	sub    esp,0xc
c000b3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fe:	e8 cd ff ff ff       	call   c000b3d0 <Mouse::~Mouse()>
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	83 ec 08             	sub    esp,0x8
c000b409:	68 58 01 00 00       	push   0x158
c000b40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b412:	e8 b1 27 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000b417:	83 c4 10             	add    esp,0x10
c000b41a:	83 c4 0c             	add    esp,0xc
c000b41d:	c3                   	ret    

c000b41e <NIC::getMAC()>:
c000b41e:	31 c0                	xor    eax,eax
c000b420:	31 d2                	xor    edx,edx
c000b422:	c3                   	ret    
c000b423:	90                   	nop

c000b424 <NIC::write(int, unsigned char*, int*)>:
c000b424:	b8 01 00 00 00       	mov    eax,0x1
c000b429:	c3                   	ret    

c000b42a <NIC::NIC(char const*)>:
c000b42a:	83 ec 0c             	sub    esp,0xc
c000b42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b431:	83 ec 08             	sub    esp,0x8
c000b434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b438:	50                   	push   eax
c000b439:	e8 c4 ef ff ff       	call   c000a402 <Device::Device(char const*)>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	ba 50 95 02 c0       	mov    edx,0xc0029550
c000b446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44a:	89 10                	mov    DWORD PTR [eax],edx
c000b44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b450:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b45a:	90                   	nop
c000b45b:	83 c4 0c             	add    esp,0xc
c000b45e:	c3                   	ret    
c000b45f:	90                   	nop

c000b460 <NIC::~NIC()>:
c000b460:	83 ec 0c             	sub    esp,0xc
c000b463:	ba 50 95 02 c0       	mov    edx,0xc0029550
c000b468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46c:	89 10                	mov    DWORD PTR [eax],edx
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	83 ec 0c             	sub    esp,0xc
c000b475:	50                   	push   eax
c000b476:	e8 27 ed ff ff       	call   c000a1a2 <Device::~Device()>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	90                   	nop
c000b47f:	83 c4 0c             	add    esp,0xc
c000b482:	c3                   	ret    
c000b483:	90                   	nop

c000b484 <NIC::~NIC()>:
c000b484:	83 ec 0c             	sub    esp,0xc
c000b487:	83 ec 0c             	sub    esp,0xc
c000b48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48e:	e8 cd ff ff ff       	call   c000b460 <NIC::~NIC()>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	83 ec 08             	sub    esp,0x8
c000b499:	68 58 01 00 00       	push   0x158
c000b49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a2:	e8 21 27 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	83 c4 0c             	add    esp,0xc
c000b4ad:	c3                   	ret    

c000b4ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b4ae:	55                   	push   ebp
c000b4af:	57                   	push   edi
c000b4b0:	56                   	push   esi
c000b4b1:	53                   	push   ebx
c000b4b2:	81 ec 28 01 00 00    	sub    esp,0x128
c000b4b8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000b4bf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000b4c6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000b4cd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000b4d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4dc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b4e3:	e8 16 f0 ff ff       	call   c000a4fe <Device::getName()>
c000b4e8:	5a                   	pop    edx
c000b4e9:	59                   	pop    ecx
c000b4ea:	50                   	push   eax
c000b4eb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b4ef:	55                   	push   ebp
c000b4f0:	e8 4b 51 ff ff       	call   c0000640 <strcpy>
c000b4f5:	5b                   	pop    ebx
c000b4f6:	58                   	pop    eax
c000b4f7:	68 7c 95 02 c0       	push   0xc002957c
c000b4fc:	55                   	push   ebp
c000b4fd:	e8 3e 53 ff ff       	call   c0000840 <strcat>
c000b502:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b509:	e8 ad 4b 00 00       	call   c00100bb <malloc>
c000b50e:	83 c4 0c             	add    esp,0xc
c000b511:	89 c3                	mov    ebx,eax
c000b513:	57                   	push   edi
c000b514:	56                   	push   esi
c000b515:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b519:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b51d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000b524:	55                   	push   ebp
c000b525:	50                   	push   eax
c000b526:	e8 57 fb ff ff       	call   c000b082 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000b52b:	83 c4 14             	add    esp,0x14
c000b52e:	53                   	push   ebx
c000b52f:	e8 0e fc ff ff       	call   c000b142 <LogicalDisk::assignDriveLetter()>
c000b534:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b537:	e8 c0 fc ff ff       	call   c000b1fc <LogicalDisk::mount()>
c000b53c:	58                   	pop    eax
c000b53d:	5a                   	pop    edx
c000b53e:	53                   	push   ebx
c000b53f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b546:	e8 55 ed ff ff       	call   c000a2a0 <Device::addChild(Device*)>
c000b54b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000b551:	5b                   	pop    ebx
c000b552:	5e                   	pop    esi
c000b553:	5f                   	pop    edi
c000b554:	5d                   	pop    ebp
c000b555:	c3                   	ret    

c000b556 <createPartitionsForDisk(PhysicalDisk*)>:
c000b556:	55                   	push   ebp
c000b557:	57                   	push   edi
c000b558:	56                   	push   esi
c000b559:	53                   	push   ebx
c000b55a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000b560:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000b567:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000b56d:	3d 00 02 00 00       	cmp    eax,0x200
c000b572:	74 27                	je     c000b59b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000b574:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000b57a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000b580:	83 ec 10             	sub    esp,0x10
c000b583:	0f a4 f7 0a          	shld   edi,esi,0xa
c000b587:	99                   	cdq    
c000b588:	c1 e6 0a             	shl    esi,0xa
c000b58b:	52                   	push   edx
c000b58c:	89 fd                	mov    ebp,edi
c000b58e:	50                   	push   eax
c000b58f:	55                   	push   ebp
c000b590:	56                   	push   esi
c000b591:	e8 9e 78 01 00       	call   c0022e34 <__udivdi3>
c000b596:	e9 b9 00 00 00       	jmp    c000b654 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b59b:	83 ec 0c             	sub    esp,0xc
c000b59e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5a0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000b5a4:	56                   	push   esi
c000b5a5:	6a 01                	push   0x1
c000b5a7:	6a 00                	push   0x0
c000b5a9:	6a 00                	push   0x0
c000b5ab:	53                   	push   ebx
c000b5ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b5af:	83 c4 20             	add    esp,0x20
c000b5b2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000b5ba:	75 0a                	jne    c000b5c6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000b5bc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000b5c4:	74 2c                	je     c000b5f2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000b5c6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b5cc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b5d2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b5d8:	83 ec 10             	sub    esp,0x10
c000b5db:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b5df:	89 f7                	mov    edi,esi
c000b5e1:	c1 e0 0a             	shl    eax,0xa
c000b5e4:	c1 ff 1f             	sar    edi,0x1f
c000b5e7:	57                   	push   edi
c000b5e8:	56                   	push   esi
c000b5e9:	52                   	push   edx
c000b5ea:	50                   	push   eax
c000b5eb:	e8 44 78 01 00       	call   c0022e34 <__udivdi3>
c000b5f0:	eb 62                	jmp    c000b654 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b5f2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000b5f9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000b600:	89 cf                	mov    edi,ecx
c000b602:	83 e2 7f             	and    edx,0x7f
c000b605:	83 e7 7f             	and    edi,0x7f
c000b608:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000b60f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000b612:	83 e0 7f             	and    eax,0x7f
c000b615:	8d 14 01             	lea    edx,[ecx+eax*1]
c000b618:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000b61f:	83 e0 7f             	and    eax,0x7f
c000b622:	01 d0                	add    eax,edx
c000b624:	89 c5                	mov    ebp,eax
c000b626:	84 c0                	test   al,al
c000b628:	74 41                	je     c000b66b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000b62a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b630:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b636:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b63c:	83 ec 10             	sub    esp,0x10
c000b63f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b643:	89 f7                	mov    edi,esi
c000b645:	c1 e0 0a             	shl    eax,0xa
c000b648:	c1 ff 1f             	sar    edi,0x1f
c000b64b:	57                   	push   edi
c000b64c:	56                   	push   esi
c000b64d:	52                   	push   edx
c000b64e:	50                   	push   eax
c000b64f:	e8 e0 77 01 00       	call   c0022e34 <__udivdi3>
c000b654:	83 c4 14             	add    esp,0x14
c000b657:	52                   	push   edx
c000b658:	50                   	push   eax
c000b659:	6a 00                	push   0x0
c000b65b:	6a 00                	push   0x0
c000b65d:	53                   	push   ebx
c000b65e:	e8 4b fe ff ff       	call   c000b4ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b663:	83 c4 20             	add    esp,0x20
c000b666:	e9 73 01 00 00       	jmp    c000b7de <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000b66b:	89 f0                	mov    eax,esi
c000b66d:	31 c9                	xor    ecx,ecx
c000b66f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000b676:	75 02                	jne    c000b67a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000b678:	89 cd                	mov    ebp,ecx
c000b67a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000b681:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000b688:	c1 e2 08             	shl    edx,0x8
c000b68b:	c1 e6 10             	shl    esi,0x10
c000b68e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000b696:	09 f2                	or     edx,esi
c000b698:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000b6a0:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000b6a7:	83 c0 10             	add    eax,0x10
c000b6aa:	09 f2                	or     edx,esi
c000b6ac:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000b6b3:	c1 e6 18             	shl    esi,0x18
c000b6b6:	09 f2                	or     edx,esi
c000b6b8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000b6bf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000b6c3:	c1 e6 10             	shl    esi,0x10
c000b6c6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000b6cd:	c1 e2 08             	shl    edx,0x8
c000b6d0:	09 f2                	or     edx,esi
c000b6d2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000b6d9:	09 f2                	or     edx,esi
c000b6db:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000b6e2:	c1 e6 18             	shl    esi,0x18
c000b6e5:	09 f2                	or     edx,esi
c000b6e7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000b6eb:	41                   	inc    ecx
c000b6ec:	83 f9 04             	cmp    ecx,0x4
c000b6ef:	0f 85 7a ff ff ff    	jne    c000b66f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000b6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f9:	83 f0 01             	xor    eax,0x1
c000b6fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000b700:	75 4f                	jne    c000b751 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b706:	83 f0 01             	xor    eax,0x1
c000b709:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000b70d:	75 42                	jne    c000b751 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b70f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b717:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b71f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b725:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b72b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b731:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b735:	89 f7                	mov    edi,esi
c000b737:	c1 e0 0a             	shl    eax,0xa
c000b73a:	c1 ff 1f             	sar    edi,0x1f
c000b73d:	57                   	push   edi
c000b73e:	56                   	push   esi
c000b73f:	52                   	push   edx
c000b740:	50                   	push   eax
c000b741:	e8 ee 76 01 00       	call   c0022e34 <__udivdi3>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b74d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b751:	89 e8                	mov    eax,ebp
c000b753:	0f b6 e8             	movzx  ebp,al
c000b756:	85 ed                	test   ebp,ebp
c000b758:	74 50                	je     c000b7aa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000b75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b75e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b762:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b766:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b776:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b77a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b77e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b782:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b786:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000b78a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000b78e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b792:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b796:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b79a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000b79e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000b7a2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000b7a6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000b7aa:	31 ed                	xor    ebp,ebp
c000b7ac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b7b0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b7b4:	89 f8                	mov    eax,edi
c000b7b6:	09 f0                	or     eax,esi
c000b7b8:	74 1e                	je     c000b7d8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b7ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b7be:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b7c2:	89 d1                	mov    ecx,edx
c000b7c4:	09 c1                	or     ecx,eax
c000b7c6:	74 10                	je     c000b7d8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b7c8:	83 ec 0c             	sub    esp,0xc
c000b7cb:	57                   	push   edi
c000b7cc:	56                   	push   esi
c000b7cd:	52                   	push   edx
c000b7ce:	50                   	push   eax
c000b7cf:	53                   	push   ebx
c000b7d0:	e8 d9 fc ff ff       	call   c000b4ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b7d5:	83 c4 20             	add    esp,0x20
c000b7d8:	45                   	inc    ebp
c000b7d9:	83 fd 04             	cmp    ebp,0x4
c000b7dc:	75 ce                	jne    c000b7ac <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000b7de:	81 c4 5c 02 00 00    	add    esp,0x25c
c000b7e4:	5b                   	pop    ebx
c000b7e5:	5e                   	pop    esi
c000b7e6:	5f                   	pop    edi
c000b7e7:	5d                   	pop    ebp
c000b7e8:	c3                   	ret    
c000b7e9:	66 90                	xchg   ax,ax
c000b7eb:	90                   	nop

c000b7ec <Serial::Serial(char const*)>:
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f3:	83 ec 08             	sub    esp,0x8
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	50                   	push   eax
c000b7fb:	e8 02 ec ff ff       	call   c000a402 <Device::Device(char const*)>
c000b800:	83 c4 10             	add    esp,0x10
c000b803:	ba 90 95 02 c0       	mov    edx,0xc0029590
c000b808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b80c:	89 10                	mov    DWORD PTR [eax],edx
c000b80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b812:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b81c:	90                   	nop
c000b81d:	83 c4 0c             	add    esp,0xc
c000b820:	c3                   	ret    
c000b821:	90                   	nop
c000b822:	66 90                	xchg   ax,ax

c000b824 <Serial::~Serial()>:
c000b824:	83 ec 0c             	sub    esp,0xc
c000b827:	ba 90 95 02 c0       	mov    edx,0xc0029590
c000b82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b830:	89 10                	mov    DWORD PTR [eax],edx
c000b832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b836:	83 ec 0c             	sub    esp,0xc
c000b839:	50                   	push   eax
c000b83a:	e8 63 e9 ff ff       	call   c000a1a2 <Device::~Device()>
c000b83f:	83 c4 10             	add    esp,0x10
c000b842:	90                   	nop
c000b843:	83 c4 0c             	add    esp,0xc
c000b846:	c3                   	ret    
c000b847:	90                   	nop

c000b848 <Serial::~Serial()>:
c000b848:	83 ec 0c             	sub    esp,0xc
c000b84b:	83 ec 0c             	sub    esp,0xc
c000b84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b852:	e8 cd ff ff ff       	call   c000b824 <Serial::~Serial()>
c000b857:	83 c4 10             	add    esp,0x10
c000b85a:	83 ec 08             	sub    esp,0x8
c000b85d:	68 58 01 00 00       	push   0x158
c000b862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b866:	e8 5d 23 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	83 c4 0c             	add    esp,0xc
c000b871:	c3                   	ret    
c000b872:	66 90                	xchg   ax,ax

c000b874 <Timer::Timer(char const*)>:
c000b874:	83 ec 0c             	sub    esp,0xc
c000b877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b87b:	83 ec 08             	sub    esp,0x8
c000b87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b882:	50                   	push   eax
c000b883:	e8 7a eb ff ff       	call   c000a402 <Device::Device(char const*)>
c000b888:	83 c4 10             	add    esp,0x10
c000b88b:	ba 70 96 02 c0       	mov    edx,0xc0029670
c000b890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b894:	89 10                	mov    DWORD PTR [eax],edx
c000b896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b89a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b8a4:	90                   	nop
c000b8a5:	83 c4 0c             	add    esp,0xc
c000b8a8:	c3                   	ret    
c000b8a9:	90                   	nop
c000b8aa:	66 90                	xchg   ax,ax

c000b8ac <Timer::~Timer()>:
c000b8ac:	83 ec 0c             	sub    esp,0xc
c000b8af:	ba 70 96 02 c0       	mov    edx,0xc0029670
c000b8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b8:	89 10                	mov    DWORD PTR [eax],edx
c000b8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8be:	83 ec 0c             	sub    esp,0xc
c000b8c1:	50                   	push   eax
c000b8c2:	e8 db e8 ff ff       	call   c000a1a2 <Device::~Device()>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	90                   	nop
c000b8cb:	83 c4 0c             	add    esp,0xc
c000b8ce:	c3                   	ret    
c000b8cf:	90                   	nop

c000b8d0 <Timer::~Timer()>:
c000b8d0:	83 ec 0c             	sub    esp,0xc
c000b8d3:	83 ec 0c             	sub    esp,0xc
c000b8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8da:	e8 cd ff ff ff       	call   c000b8ac <Timer::~Timer()>
c000b8df:	83 c4 10             	add    esp,0x10
c000b8e2:	83 ec 08             	sub    esp,0x8
c000b8e5:	68 5c 01 00 00       	push   0x15c
c000b8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ee:	e8 d5 22 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000b8f3:	83 c4 10             	add    esp,0x10
c000b8f6:	83 c4 0c             	add    esp,0xc
c000b8f9:	c3                   	ret    

c000b8fa <Timer::read()>:
c000b8fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b904:	c3                   	ret    

c000b905 <setupTimer(int)>:
c000b905:	53                   	push   ebx
c000b906:	83 ec 14             	sub    esp,0x14
c000b909:	68 5c 01 00 00       	push   0x15c
c000b90e:	e8 a8 47 00 00       	call   c00100bb <malloc>
c000b913:	89 04 24             	mov    DWORD PTR [esp],eax
c000b916:	89 c3                	mov    ebx,eax
c000b918:	e8 cf 6d 01 00       	call   c00226ec <PIT::PIT()>
c000b91d:	58                   	pop    eax
c000b91e:	5a                   	pop    edx
c000b91f:	53                   	push   ebx
c000b920:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c000b926:	e8 75 e9 ff ff       	call   c000a2a0 <Device::addChild(Device*)>
c000b92b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b92d:	6a 00                	push   0x0
c000b92f:	6a 00                	push   0x0
c000b931:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b935:	53                   	push   ebx
c000b936:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b939:	89 d8                	mov    eax,ebx
c000b93b:	83 c4 28             	add    esp,0x28
c000b93e:	5b                   	pop    ebx
c000b93f:	c3                   	ret    

c000b940 <timerHandler(unsigned int)>:
c000b940:	57                   	push   edi
c000b941:	31 d2                	xor    edx,edx
c000b943:	56                   	push   esi
c000b944:	53                   	push   ebx
c000b945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b949:	01 1d 50 2b 03 c0    	add    DWORD PTR ds:0xc0032b50,ebx
c000b94f:	11 15 54 2b 03 c0    	adc    DWORD PTR ds:0xc0032b54,edx
c000b955:	80 3d 0d 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310d,0x0
c000b95c:	75 12                	jne    c000b970 <timerHandler(unsigned int)+0x30>
c000b95e:	c7 44 24 10 1f 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc002961f
c000b966:	5b                   	pop    ebx
c000b967:	5e                   	pop    esi
c000b968:	5f                   	pop    edi
c000b969:	e9 0e b6 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b96e:	66 90                	xchg   ax,ax
c000b970:	fa                   	cli    
c000b971:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000b977:	83 ec 0c             	sub    esp,0xc
c000b97a:	68 40 33 03 c0       	push   0xc0033340
c000b97f:	e8 7c bf 01 00       	call   c0027900 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b984:	83 c4 10             	add    esp,0x10
c000b987:	84 c0                	test   al,al
c000b989:	0f 85 a9 00 00 00    	jne    c000ba38 <timerHandler(unsigned int)+0xf8>
c000b98f:	83 ec 0c             	sub    esp,0xc
c000b992:	68 40 33 03 c0       	push   0xc0033340
c000b997:	e8 80 bf 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b99c:	83 c4 10             	add    esp,0x10
c000b99f:	89 c6                	mov    esi,eax
c000b9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b9a4:	83 ec 0c             	sub    esp,0xc
c000b9a7:	68 40 33 03 c0       	push   0xc0033340
c000b9ac:	e8 6b bf 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b9b1:	c7 04 24 40 33 03 c0 	mov    DWORD PTR [esp],0xc0033340
c000b9b8:	89 c7                	mov    edi,eax
c000b9ba:	e8 65 bf 01 00       	call   c0027924 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b9bf:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b9c2:	83 c4 10             	add    esp,0x10
c000b9c5:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b9c8:	39 15 50 2b 03 c0    	cmp    DWORD PTR ds:0xc0032b50,edx
c000b9ce:	a1 54 2b 03 c0       	mov    eax,ds:0xc0032b54
c000b9d3:	19 c8                	sbb    eax,ecx
c000b9d5:	72 21                	jb     c000b9f8 <timerHandler(unsigned int)+0xb8>
c000b9d7:	83 ec 0c             	sub    esp,0xc
c000b9da:	57                   	push   edi
c000b9db:	e8 24 ba 00 00       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	39 fe                	cmp    esi,edi
c000b9e5:	75 25                	jne    c000ba0c <timerHandler(unsigned int)+0xcc>
c000b9e7:	83 ec 0c             	sub    esp,0xc
c000b9ea:	68 40 33 03 c0       	push   0xc0033340
c000b9ef:	e8 28 bf 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b9f4:	89 c6                	mov    esi,eax
c000b9f6:	eb 10                	jmp    c000ba08 <timerHandler(unsigned int)+0xc8>
c000b9f8:	51                   	push   ecx
c000b9f9:	51                   	push   ecx
c000b9fa:	57                   	push   edi
c000b9fb:	68 40 33 03 c0       	push   0xc0033340
c000ba00:	e8 db bf 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ba05:	8d 76 00             	lea    esi,[esi+0x0]
c000ba08:	83 c4 10             	add    esp,0x10
c000ba0b:	90                   	nop
c000ba0c:	83 ec 0c             	sub    esp,0xc
c000ba0f:	68 40 33 03 c0       	push   0xc0033340
c000ba14:	e8 e7 be 01 00       	call   c0027900 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ba19:	83 c4 10             	add    esp,0x10
c000ba1c:	84 c0                	test   al,al
c000ba1e:	75 18                	jne    c000ba38 <timerHandler(unsigned int)+0xf8>
c000ba20:	83 ec 0c             	sub    esp,0xc
c000ba23:	68 40 33 03 c0       	push   0xc0033340
c000ba28:	e8 ef be 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ba2d:	83 c4 10             	add    esp,0x10
c000ba30:	39 f0                	cmp    eax,esi
c000ba32:	0f 85 6c ff ff ff    	jne    c000b9a4 <timerHandler(unsigned int)+0x64>
c000ba38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ba3e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000ba41:	85 c0                	test   eax,eax
c000ba43:	74 5f                	je     c000baa4 <timerHandler(unsigned int)+0x164>
c000ba45:	80 3d 0c 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310c,0x0
c000ba4c:	74 56                	je     c000baa4 <timerHandler(unsigned int)+0x164>
c000ba4e:	3d e8 03 00 00       	cmp    eax,0x3e8
c000ba53:	76 23                	jbe    c000ba78 <timerHandler(unsigned int)+0x138>
c000ba55:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000ba59:	75 11                	jne    c000ba6c <timerHandler(unsigned int)+0x12c>
c000ba5b:	52                   	push   edx
c000ba5c:	52                   	push   edx
c000ba5d:	50                   	push   eax
c000ba5e:	68 35 96 02 c0       	push   0xc0029635
c000ba63:	e8 14 b5 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ba68:	83 c4 10             	add    esp,0x10
c000ba6b:	90                   	nop
c000ba6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba71:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ba78:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ba7e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000ba81:	39 d8                	cmp    eax,ebx
c000ba83:	73 0b                	jae    c000ba90 <timerHandler(unsigned int)+0x150>
c000ba85:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000ba8c:	eb 0e                	jmp    c000ba9c <timerHandler(unsigned int)+0x15c>
c000ba8e:	66 90                	xchg   ax,ax
c000ba90:	89 c1                	mov    ecx,eax
c000ba92:	29 d9                	sub    ecx,ebx
c000ba94:	39 d8                	cmp    eax,ebx
c000ba96:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000ba99:	75 09                	jne    c000baa4 <timerHandler(unsigned int)+0x164>
c000ba9b:	90                   	nop
c000ba9c:	e8 07 b6 00 00       	call   c00170a8 <schedule()>
c000baa1:	8d 76 00             	lea    esi,[esi+0x0]
c000baa4:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000baab:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000bab2:	75 04                	jne    c000bab8 <timerHandler(unsigned int)+0x178>
c000bab4:	fb                   	sti    
c000bab5:	8d 76 00             	lea    esi,[esi+0x0]
c000bab8:	5b                   	pop    ebx
c000bab9:	5e                   	pop    esi
c000baba:	5f                   	pop    edi
c000babb:	c3                   	ret    

c000babc <VCache::VCache(PhysicalDisk*)>:
c000babc:	53                   	push   ebx
c000babd:	83 ec 18             	sub    esp,0x18
c000bac0:	ba e0 96 02 c0       	mov    edx,0xc00296e0
c000bac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac9:	89 10                	mov    DWORD PTR [eax],edx
c000bacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000bad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bada:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000bae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000baec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000baf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000bafe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000bb05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb09:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000bb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb14:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bb18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb1c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000bb23:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000bb2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb36:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000bb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bb42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb46:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000bb4d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000bb55:	83 ec 0c             	sub    esp,0xc
c000bb58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb5c:	e8 5a 45 00 00       	call   c00100bb <malloc>
c000bb61:	83 c4 10             	add    esp,0x10
c000bb64:	89 c3                	mov    ebx,eax
c000bb66:	83 ec 0c             	sub    esp,0xc
c000bb69:	53                   	push   ebx
c000bb6a:	e8 81 49 00 00       	call   c00104f0 <Mutex::Mutex()>
c000bb6f:	83 c4 10             	add    esp,0x10
c000bb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb76:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000bb79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bb81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000bb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb88:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000bb8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb93:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bb99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000bba0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bba4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000bbaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bbb0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bbb4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000bbb7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000bbba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bbc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbc6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bbcc:	05 00 01 00 00       	add    eax,0x100
c000bbd1:	c1 e0 04             	shl    eax,0x4
c000bbd4:	83 ec 0c             	sub    esp,0xc
c000bbd7:	50                   	push   eax
c000bbd8:	e8 de 44 00 00       	call   c00100bb <malloc>
c000bbdd:	83 c4 10             	add    esp,0x10
c000bbe0:	89 c2                	mov    edx,eax
c000bbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000bbe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbed:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000bbf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bbfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bc06:	89 d0                	mov    eax,edx
c000bc08:	c1 e0 02             	shl    eax,0x2
c000bc0b:	01 d0                	add    eax,edx
c000bc0d:	c1 e0 04             	shl    eax,0x4
c000bc10:	83 ec 0c             	sub    esp,0xc
c000bc13:	50                   	push   eax
c000bc14:	e8 a2 44 00 00       	call   c00100bb <malloc>
c000bc19:	83 c4 10             	add    esp,0x10
c000bc1c:	89 c2                	mov    edx,eax
c000bc1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc22:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000bc25:	90                   	nop
c000bc26:	83 c4 18             	add    esp,0x18
c000bc29:	5b                   	pop    ebx
c000bc2a:	c3                   	ret    
c000bc2b:	90                   	nop

c000bc2c <VCache::invalidateReadBuffer()>:
c000bc2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000bc36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bc3a:	c3                   	ret    
c000bc3b:	90                   	nop

c000bc3c <VCache::writeWriteBuffer()>:
c000bc3c:	53                   	push   ebx
c000bc3d:	83 ec 08             	sub    esp,0x8
c000bc40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000bc48:	74 1e                	je     c000bc68 <VCache::writeWriteBuffer()+0x2c>
c000bc4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bc4d:	83 ec 0c             	sub    esp,0xc
c000bc50:	8b 10                	mov    edx,DWORD PTR [eax]
c000bc52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000bc55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000bc58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000bc5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bc5e:	50                   	push   eax
c000bc5f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000bc62:	83 c4 20             	add    esp,0x20
c000bc65:	8d 76 00             	lea    esi,[esi+0x0]
c000bc68:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000bc6f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000bc76:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000bc7a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000bc81:	83 c4 08             	add    esp,0x8
c000bc84:	5b                   	pop    ebx
c000bc85:	c3                   	ret    
c000bc86:	66 90                	xchg   ax,ax

c000bc88 <VCache::~VCache()>:
c000bc88:	83 ec 0c             	sub    esp,0xc
c000bc8b:	ba e0 96 02 c0       	mov    edx,0xc00296e0
c000bc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc94:	89 10                	mov    DWORD PTR [eax],edx
c000bc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000bc9d:	0f b6 c0             	movzx  eax,al
c000bca0:	85 c0                	test   eax,eax
c000bca2:	74 10                	je     c000bcb4 <VCache::~VCache()+0x2c>
c000bca4:	83 ec 0c             	sub    esp,0xc
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	e8 8c ff ff ff       	call   c000bc3c <VCache::writeWriteBuffer()>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	90                   	nop
c000bcb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000bcbb:	83 ec 0c             	sub    esp,0xc
c000bcbe:	50                   	push   eax
c000bcbf:	e8 07 44 00 00       	call   c00100cb <free>
c000bcc4:	83 c4 10             	add    esp,0x10
c000bcc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bccb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000bcce:	83 ec 0c             	sub    esp,0xc
c000bcd1:	50                   	push   eax
c000bcd2:	e8 f4 43 00 00       	call   c00100cb <free>
c000bcd7:	83 c4 10             	add    esp,0x10
c000bcda:	90                   	nop
c000bcdb:	83 c4 0c             	add    esp,0xc
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <VCache::~VCache()>:
c000bce0:	83 ec 0c             	sub    esp,0xc
c000bce3:	83 ec 0c             	sub    esp,0xc
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	e8 99 ff ff ff       	call   c000bc88 <VCache::~VCache()>
c000bcef:	83 c4 10             	add    esp,0x10
c000bcf2:	83 ec 08             	sub    esp,0x8
c000bcf5:	6a 44                	push   0x44
c000bcf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfb:	e8 c8 1e 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000bd00:	83 c4 10             	add    esp,0x10
c000bd03:	83 c4 0c             	add    esp,0xc
c000bd06:	c3                   	ret    
c000bd07:	90                   	nop

c000bd08 <VCache::write(unsigned long long, int, void*)>:
c000bd08:	55                   	push   ebp
c000bd09:	57                   	push   edi
c000bd0a:	56                   	push   esi
c000bd0b:	53                   	push   ebx
c000bd0c:	83 ec 1c             	sub    esp,0x1c
c000bd0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000bd13:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000bd17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bd1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000bd1f:	e8 70 b0 00 00       	call   c0016d94 <KeDisablePreemption()>
c000bd24:	b9 00 10 00 00       	mov    ecx,0x1000
c000bd29:	50                   	push   eax
c000bd2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bd2d:	0f af c3             	imul   eax,ebx
c000bd30:	05 ff 0f 00 00       	add    eax,0xfff
c000bd35:	99                   	cdq    
c000bd36:	f7 f9                	idiv   ecx
c000bd38:	50                   	push   eax
c000bd39:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bd3d:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bd43:	e8 b4 8a 00 00       	call   c00147fc <VAS::canLockPages(unsigned long, int)>
c000bd48:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000bd4c:	83 c4 10             	add    esp,0x10
c000bd4f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd54:	74 2a                	je     c000bd80 <VCache::write(unsigned long long, int, void*)+0x78>
c000bd56:	b9 00 10 00 00       	mov    ecx,0x1000
c000bd5b:	50                   	push   eax
c000bd5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bd5f:	0f af c3             	imul   eax,ebx
c000bd62:	05 ff 0f 00 00       	add    eax,0xfff
c000bd67:	99                   	cdq    
c000bd68:	f7 f9                	idiv   ecx
c000bd6a:	50                   	push   eax
c000bd6b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bd6f:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bd75:	e8 e6 8c 00 00       	call   c0014a60 <VAS::lockPages(unsigned long, int)>
c000bd7a:	83 c4 10             	add    esp,0x10
c000bd7d:	8d 76 00             	lea    esi,[esi+0x0]
c000bd80:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000bd84:	74 0e                	je     c000bd94 <VCache::write(unsigned long long, int, void*)+0x8c>
c000bd86:	83 ec 0c             	sub    esp,0xc
c000bd89:	55                   	push   ebp
c000bd8a:	e8 9d fe ff ff       	call   c000bc2c <VCache::invalidateReadBuffer()>
c000bd8f:	83 c4 10             	add    esp,0x10
c000bd92:	66 90                	xchg   ax,ax
c000bd94:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000bd98:	74 72                	je     c000be0c <VCache::write(unsigned long long, int, void*)+0x104>
c000bd9a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000bd9d:	89 c8                	mov    eax,ecx
c000bd9f:	99                   	cdq    
c000bda0:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000bda3:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000bda6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bdb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdb6:	31 f0                	xor    eax,esi
c000bdb8:	31 fa                	xor    edx,edi
c000bdba:	09 d0                	or     eax,edx
c000bdbc:	75 42                	jne    c000be00 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bdbe:	83 fb 01             	cmp    ebx,0x1
c000bdc1:	75 3d                	jne    c000be00 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bdc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bdc6:	89 cf                	mov    edi,ecx
c000bdc8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bdce:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bdd2:	0f af f8             	imul   edi,eax
c000bdd5:	89 c1                	mov    ecx,eax
c000bdd7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000bdda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bddc:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000bddf:	40                   	inc    eax
c000bde0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000bde3:	83 f8 50             	cmp    eax,0x50
c000bde6:	0f 85 a8 00 00 00    	jne    c000be94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bdec:	83 ec 0c             	sub    esp,0xc
c000bdef:	55                   	push   ebp
c000bdf0:	e8 47 fe ff ff       	call   c000bc3c <VCache::writeWriteBuffer()>
c000bdf5:	83 c4 10             	add    esp,0x10
c000bdf8:	e9 97 00 00 00       	jmp    c000be94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bdfd:	8d 76 00             	lea    esi,[esi+0x0]
c000be00:	83 ec 0c             	sub    esp,0xc
c000be03:	55                   	push   ebp
c000be04:	e8 33 fe ff ff       	call   c000bc3c <VCache::writeWriteBuffer()>
c000be09:	83 c4 10             	add    esp,0x10
c000be0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000be0f:	83 fb 4f             	cmp    ebx,0x4f
c000be12:	7f 20                	jg     c000be34 <VCache::write(unsigned long long, int, void*)+0x12c>
c000be14:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000be17:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000be1a:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000be1d:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000be21:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000be24:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000be2a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000be2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000be30:	eb 62                	jmp    c000be94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000be32:	66 90                	xchg   ax,ax
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	8b 10                	mov    edx,DWORD PTR [eax]
c000be39:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be3d:	53                   	push   ebx
c000be3e:	57                   	push   edi
c000be3f:	56                   	push   esi
c000be40:	50                   	push   eax
c000be41:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000be44:	83 c4 20             	add    esp,0x20
c000be47:	89 c6                	mov    esi,eax
c000be49:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be4e:	74 28                	je     c000be78 <VCache::write(unsigned long long, int, void*)+0x170>
c000be50:	b9 00 10 00 00       	mov    ecx,0x1000
c000be55:	52                   	push   edx
c000be56:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000be5a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000be60:	99                   	cdq    
c000be61:	f7 f9                	idiv   ecx
c000be63:	50                   	push   eax
c000be64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000be68:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000be6e:	e8 c5 89 00 00       	call   c0014838 <VAS::unlockPages(unsigned long, int)>
c000be73:	83 c4 10             	add    esp,0x10
c000be76:	66 90                	xchg   ax,ax
c000be78:	e8 3f af 00 00       	call   c0016dbc <KeRestorePreemption()>
c000be7d:	85 f6                	test   esi,esi
c000be7f:	74 4b                	je     c000becc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000be81:	83 ec 0c             	sub    esp,0xc
c000be84:	68 98 96 02 c0       	push   0xc0029698
c000be89:	e8 ee b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	eb 39                	jmp    c000becc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000be93:	90                   	nop
c000be94:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be99:	74 29                	je     c000bec4 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000be9b:	b9 00 10 00 00       	mov    ecx,0x1000
c000bea0:	50                   	push   eax
c000bea1:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000bea5:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000beab:	99                   	cdq    
c000beac:	f7 f9                	idiv   ecx
c000beae:	50                   	push   eax
c000beaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000beb3:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000beb9:	e8 7a 89 00 00       	call   c0014838 <VAS::unlockPages(unsigned long, int)>
c000bebe:	83 c4 10             	add    esp,0x10
c000bec1:	8d 76 00             	lea    esi,[esi+0x0]
c000bec4:	e8 f3 ae 00 00       	call   c0016dbc <KeRestorePreemption()>
c000bec9:	31 f6                	xor    esi,esi
c000becb:	90                   	nop
c000becc:	83 c4 1c             	add    esp,0x1c
c000becf:	89 f0                	mov    eax,esi
c000bed1:	5b                   	pop    ebx
c000bed2:	5e                   	pop    esi
c000bed3:	5f                   	pop    edi
c000bed4:	5d                   	pop    ebp
c000bed5:	c3                   	ret    

c000bed6 <VCache::read(unsigned long long, int, void*)>:
c000bed6:	55                   	push   ebp
c000bed7:	57                   	push   edi
c000bed8:	bf 00 10 00 00       	mov    edi,0x1000
c000bedd:	56                   	push   esi
c000bede:	53                   	push   ebx
c000bedf:	83 ec 2c             	sub    esp,0x2c
c000bee2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bee6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000beea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000beee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000bef2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bef6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000befa:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000befe:	e8 91 ae 00 00       	call   c0016d94 <KeDisablePreemption()>
c000bf03:	50                   	push   eax
c000bf04:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf07:	0f af c6             	imul   eax,esi
c000bf0a:	05 ff 0f 00 00       	add    eax,0xfff
c000bf0f:	99                   	cdq    
c000bf10:	f7 ff                	idiv   edi
c000bf12:	50                   	push   eax
c000bf13:	55                   	push   ebp
c000bf14:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bf1a:	e8 dd 88 00 00       	call   c00147fc <VAS::canLockPages(unsigned long, int)>
c000bf1f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bf23:	83 c4 10             	add    esp,0x10
c000bf26:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000bf2b:	74 1f                	je     c000bf4c <VCache::read(unsigned long long, int, void*)+0x76>
c000bf2d:	50                   	push   eax
c000bf2e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf31:	0f af c6             	imul   eax,esi
c000bf34:	05 ff 0f 00 00       	add    eax,0xfff
c000bf39:	99                   	cdq    
c000bf3a:	f7 ff                	idiv   edi
c000bf3c:	50                   	push   eax
c000bf3d:	55                   	push   ebp
c000bf3e:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bf44:	e8 17 8b 00 00       	call   c0014a60 <VAS::lockPages(unsigned long, int)>
c000bf49:	83 c4 10             	add    esp,0x10
c000bf4c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000bf50:	74 0e                	je     c000bf60 <VCache::read(unsigned long long, int, void*)+0x8a>
c000bf52:	83 ec 0c             	sub    esp,0xc
c000bf55:	53                   	push   ebx
c000bf56:	e8 e1 fc ff ff       	call   c000bc3c <VCache::writeWriteBuffer()>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	66 90                	xchg   ax,ax
c000bf60:	83 fe 01             	cmp    esi,0x1
c000bf63:	0f 85 ef 00 00 00    	jne    c000c058 <VCache::read(unsigned long long, int, void*)+0x182>
c000bf69:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000bf6c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000bf73:	0f 85 df 00 00 00    	jne    c000c058 <VCache::read(unsigned long long, int, void*)+0x182>
c000bf79:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bf7c:	89 fe                	mov    esi,edi
c000bf7e:	f7 de                	neg    esi
c000bf80:	89 f0                	mov    eax,esi
c000bf82:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000bf86:	c1 f8 1f             	sar    eax,0x1f
c000bf89:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000bf8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf91:	89 f0                	mov    eax,esi
c000bf93:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf97:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000bf9b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000bf9f:	89 f2                	mov    edx,esi
c000bfa1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bfa6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bfaa:	74 0c                	je     c000bfb8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000bfac:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000bfaf:	75 07                	jne    c000bfb8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000bfb1:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000bfb4:	74 4e                	je     c000c004 <VCache::read(unsigned long long, int, void*)+0x12e>
c000bfb6:	66 90                	xchg   ax,ax
c000bfb8:	83 ec 0c             	sub    esp,0xc
c000bfbb:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000bfbf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000bfc2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bfc5:	8b 31                	mov    esi,DWORD PTR [ecx]
c000bfc7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000bfca:	57                   	push   edi
c000bfcb:	52                   	push   edx
c000bfcc:	50                   	push   eax
c000bfcd:	51                   	push   ecx
c000bfce:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000bfd1:	83 c4 20             	add    esp,0x20
c000bfd4:	89 c7                	mov    edi,eax
c000bfd6:	85 c0                	test   eax,eax
c000bfd8:	74 2a                	je     c000c004 <VCache::read(unsigned long long, int, void*)+0x12e>
c000bfda:	83 ec 0c             	sub    esp,0xc
c000bfdd:	68 b0 96 02 c0       	push   0xc00296b0
c000bfe2:	e8 95 af ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bfe7:	83 c4 10             	add    esp,0x10
c000bfea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bfef:	0f 84 b3 00 00 00    	je     c000c0a8 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000bff5:	51                   	push   ecx
c000bff6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bff9:	05 ff 0f 00 00       	add    eax,0xfff
c000bffe:	e9 8d 00 00 00       	jmp    c000c090 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000c003:	90                   	nop
c000c004:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c007:	89 ef                	mov    edi,ebp
c000c009:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c00f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000c012:	8d 70 ff             	lea    esi,[eax-0x1]
c000c015:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c019:	0f af f1             	imul   esi,ecx
c000c01c:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000c01f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c021:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c026:	74 24                	je     c000c04c <VCache::read(unsigned long long, int, void*)+0x176>
c000c028:	b9 00 10 00 00       	mov    ecx,0x1000
c000c02d:	52                   	push   edx
c000c02e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c031:	05 ff 0f 00 00       	add    eax,0xfff
c000c036:	99                   	cdq    
c000c037:	f7 f9                	idiv   ecx
c000c039:	50                   	push   eax
c000c03a:	55                   	push   ebp
c000c03b:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000c041:	e8 f2 87 00 00       	call   c0014838 <VAS::unlockPages(unsigned long, int)>
c000c046:	83 c4 10             	add    esp,0x10
c000c049:	8d 76 00             	lea    esi,[esi+0x0]
c000c04c:	e8 6b ad 00 00       	call   c0016dbc <KeRestorePreemption()>
c000c051:	31 ff                	xor    edi,edi
c000c053:	eb 5b                	jmp    c000c0b0 <VCache::read(unsigned long long, int, void*)+0x1da>
c000c055:	8d 76 00             	lea    esi,[esi+0x0]
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	53                   	push   ebx
c000c05c:	e8 cb fb ff ff       	call   c000bc2c <VCache::invalidateReadBuffer()>
c000c061:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c064:	8b 10                	mov    edx,DWORD PTR [eax]
c000c066:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c069:	56                   	push   esi
c000c06a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c06e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c072:	50                   	push   eax
c000c073:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c076:	83 c4 20             	add    esp,0x20
c000c079:	89 c7                	mov    edi,eax
c000c07b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000c080:	74 26                	je     c000c0a8 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000c082:	50                   	push   eax
c000c083:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000c087:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000c08d:	8d 76 00             	lea    esi,[esi+0x0]
c000c090:	b9 00 10 00 00       	mov    ecx,0x1000
c000c095:	99                   	cdq    
c000c096:	f7 f9                	idiv   ecx
c000c098:	50                   	push   eax
c000c099:	55                   	push   ebp
c000c09a:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000c0a0:	e8 93 87 00 00       	call   c0014838 <VAS::unlockPages(unsigned long, int)>
c000c0a5:	83 c4 10             	add    esp,0x10
c000c0a8:	e8 0f ad 00 00       	call   c0016dbc <KeRestorePreemption()>
c000c0ad:	8d 76 00             	lea    esi,[esi+0x0]
c000c0b0:	83 c4 2c             	add    esp,0x2c
c000c0b3:	89 f8                	mov    eax,edi
c000c0b5:	5b                   	pop    ebx
c000c0b6:	5e                   	pop    esi
c000c0b7:	5f                   	pop    edi
c000c0b8:	5d                   	pop    ebp
c000c0b9:	c3                   	ret    

c000c0ba <Video::putrect(int, int, int, int, unsigned int)>:
c000c0ba:	55                   	push   ebp
c000c0bb:	57                   	push   edi
c000c0bc:	56                   	push   esi
c000c0bd:	53                   	push   ebx
c000c0be:	83 ec 1c             	sub    esp,0x1c
c000c0c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c0c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0c9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c0cd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000c0d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c0d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0d9:	01 df                	add    edi,ebx
c000c0db:	39 fb                	cmp    ebx,edi
c000c0dd:	7d 1f                	jge    c000c0fe <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000c0df:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c0e3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000c0e7:	7d 12                	jge    c000c0fb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000c0e9:	8b 16                	mov    edx,DWORD PTR [esi]
c000c0eb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c0ef:	53                   	push   ebx
c000c0f0:	55                   	push   ebp
c000c0f1:	45                   	inc    ebp
c000c0f2:	56                   	push   esi
c000c0f3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c0f6:	83 c4 10             	add    esp,0x10
c000c0f9:	eb e8                	jmp    c000c0e3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000c0fb:	43                   	inc    ebx
c000c0fc:	eb dd                	jmp    c000c0db <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000c0fe:	83 c4 1c             	add    esp,0x1c
c000c101:	5b                   	pop    ebx
c000c102:	5e                   	pop    esi
c000c103:	5f                   	pop    edi
c000c104:	5d                   	pop    ebp
c000c105:	c3                   	ret    

c000c106 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000c106:	55                   	push   ebp
c000c107:	57                   	push   edi
c000c108:	31 ff                	xor    edi,edi
c000c10a:	56                   	push   esi
c000c10b:	53                   	push   ebx
c000c10c:	83 ec 1c             	sub    esp,0x1c
c000c10f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000c113:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c117:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000c11e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000c123:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c127:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000c12b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c12f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000c132:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c136:	01 f9                	add    ecx,edi
c000c138:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000c13c:	7d 2f                	jge    c000c16d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000c13e:	31 f6                	xor    esi,esi
c000c140:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c144:	01 f2                	add    edx,esi
c000c146:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000c14a:	7d 1a                	jge    c000c166 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000c14c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c14f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000c152:	46                   	inc    esi
c000c153:	51                   	push   ecx
c000c154:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c158:	52                   	push   edx
c000c159:	55                   	push   ebp
c000c15a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c15d:	83 c4 10             	add    esp,0x10
c000c160:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c164:	eb da                	jmp    c000c140 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000c166:	47                   	inc    edi
c000c167:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c16b:	eb c5                	jmp    c000c132 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000c16d:	83 c4 1c             	add    esp,0x1c
c000c170:	5b                   	pop    ebx
c000c171:	5e                   	pop    esi
c000c172:	5f                   	pop    edi
c000c173:	5d                   	pop    ebp
c000c174:	c3                   	ret    
c000c175:	90                   	nop

c000c176 <Video::blit(unsigned int*, int, int, int, int)>:
c000c176:	55                   	push   ebp
c000c177:	57                   	push   edi
c000c178:	56                   	push   esi
c000c179:	53                   	push   ebx
c000c17a:	83 ec 1c             	sub    esp,0x1c
c000c17d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c181:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c185:	85 c0                	test   eax,eax
c000c187:	79 02                	jns    c000c18b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000c189:	31 c0                	xor    eax,eax
c000c18b:	c1 e0 02             	shl    eax,0x2
c000c18e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c192:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c196:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c19a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000c19e:	39 d8                	cmp    eax,ebx
c000c1a0:	7e 49                	jle    c000c1eb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c1a2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000c1a8:	7c 41                	jl     c000c1eb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c1aa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c1ae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c1b2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c1b6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000c1ba:	39 f9                	cmp    ecx,edi
c000c1bc:	7e 22                	jle    c000c1e0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000c1be:	83 c5 04             	add    ebp,0x4
c000c1c1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000c1c7:	7c 14                	jl     c000c1dd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000c1c9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000c1cb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000c1ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c1d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c1d6:	56                   	push   esi
c000c1d7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c1da:	83 c4 10             	add    esp,0x10
c000c1dd:	47                   	inc    edi
c000c1de:	eb d2                	jmp    c000c1b2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000c1e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1e4:	43                   	inc    ebx
c000c1e5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c1e9:	eb ab                	jmp    c000c196 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000c1eb:	83 c4 1c             	add    esp,0x1c
c000c1ee:	5b                   	pop    ebx
c000c1ef:	5e                   	pop    esi
c000c1f0:	5f                   	pop    edi
c000c1f1:	5d                   	pop    ebp
c000c1f2:	c3                   	ret    
c000c1f3:	90                   	nop

c000c1f4 <Video::clearScreen(unsigned int)>:
c000c1f4:	83 ec 14             	sub    esp,0x14
c000c1f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000c1fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c201:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000c207:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000c20d:	6a 00                	push   0x0
c000c20f:	6a 00                	push   0x0
c000c211:	50                   	push   eax
c000c212:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c215:	83 c4 2c             	add    esp,0x2c
c000c218:	c3                   	ret    
c000c219:	90                   	nop

c000c21a <Video::putpixel(int, int, unsigned int)>:
c000c21a:	c7 44 24 04 e8 96 02 c0 	mov    DWORD PTR [esp+0x4],0xc00296e8
c000c222:	e9 e9 42 00 00       	jmp    c0010510 <KePanic(char const*)>
c000c227:	90                   	nop

c000c228 <Video::readPixelApprox(int, int)>:
c000c228:	83 ec 18             	sub    esp,0x18
c000c22b:	68 09 97 02 c0       	push   0xc0029709
c000c230:	e8 db 42 00 00       	call   c0010510 <KePanic(char const*)>
c000c235:	31 c0                	xor    eax,eax
c000c237:	83 c4 1c             	add    esp,0x1c
c000c23a:	c3                   	ret    
c000c23b:	90                   	nop

c000c23c <Video::Video(char const*)>:
c000c23c:	83 ec 0c             	sub    esp,0xc
c000c23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c243:	83 ec 08             	sub    esp,0x8
c000c246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c24a:	50                   	push   eax
c000c24b:	e8 b2 e1 ff ff       	call   c000a402 <Device::Device(char const*)>
c000c250:	83 c4 10             	add    esp,0x10
c000c253:	ba ac 97 02 c0       	mov    edx,0xc00297ac
c000c258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25c:	89 10                	mov    DWORD PTR [eax],edx
c000c25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c262:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000c26c:	90                   	nop
c000c26d:	83 c4 0c             	add    esp,0xc
c000c270:	c3                   	ret    
c000c271:	90                   	nop

c000c272 <Video::~Video()>:
c000c272:	83 ec 0c             	sub    esp,0xc
c000c275:	ba ac 97 02 c0       	mov    edx,0xc00297ac
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	89 10                	mov    DWORD PTR [eax],edx
c000c280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c284:	83 ec 0c             	sub    esp,0xc
c000c287:	50                   	push   eax
c000c288:	e8 15 df ff ff       	call   c000a1a2 <Device::~Device()>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	90                   	nop
c000c291:	83 c4 0c             	add    esp,0xc
c000c294:	c3                   	ret    
c000c295:	90                   	nop

c000c296 <Video::~Video()>:
c000c296:	83 ec 0c             	sub    esp,0xc
c000c299:	83 ec 0c             	sub    esp,0xc
c000c29c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2a0:	e8 cd ff ff ff       	call   c000c272 <Video::~Video()>
c000c2a5:	83 c4 10             	add    esp,0x10
c000c2a8:	83 ec 08             	sub    esp,0x8
c000c2ab:	68 64 01 00 00       	push   0x164
c000c2b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2b4:	e8 0f 19 00 00       	call   c000dbc8 <operator delete(void*, unsigned long)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	83 c4 0c             	add    esp,0xc
c000c2bf:	c3                   	ret    

c000c2c0 <Video::isMonochrome()>:
c000c2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000c2ca:	c3                   	ret    
c000c2cb:	90                   	nop

c000c2cc <Video::getWidth()>:
c000c2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c2d6:	c3                   	ret    
c000c2d7:	90                   	nop

c000c2d8 <Video::getHeight()>:
c000c2d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c2e2:	c3                   	ret    
c000c2e3:	90                   	nop

c000c2e4 <Video::drawCursor(int, int, unsigned int*, int)>:
c000c2e4:	55                   	push   ebp
c000c2e5:	57                   	push   edi
c000c2e6:	56                   	push   esi
c000c2e7:	53                   	push   ebx
c000c2e8:	83 ec 2c             	sub    esp,0x2c
c000c2eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c2f3:	83 f8 01             	cmp    eax,0x1
c000c2f6:	19 c9                	sbb    ecx,ecx
c000c2f8:	31 db                	xor    ebx,ebx
c000c2fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c2fe:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c302:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000c306:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000c30e:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000c316:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c31a:	01 d8                	add    eax,ebx
c000c31c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c320:	56                   	push   esi
c000c321:	e8 b2 ff ff ff       	call   c000c2d8 <Video::getHeight()>
c000c326:	59                   	pop    ecx
c000c327:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c32b:	0f 8e 81 00 00 00    	jle    c000c3b2 <Video::drawCursor(int, int, unsigned int*, int)+0xce>
c000c331:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c335:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000c338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c33c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c340:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000c345:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000c34c:	75 04                	jne    c000c352 <Video::drawCursor(int, int, unsigned int*, int)+0x6e>
c000c34e:	85 ed                	test   ebp,ebp
c000c350:	74 56                	je     c000c3a8 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c352:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c356:	89 f8                	mov    eax,edi
c000c358:	83 c0 20             	add    eax,0x20
c000c35b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c35f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c363:	09 e8                	or     eax,ebp
c000c365:	74 41                	je     c000c3a8 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c367:	56                   	push   esi
c000c368:	e8 5f ff ff ff       	call   c000c2cc <Video::getWidth()>
c000c36d:	5a                   	pop    edx
c000c36e:	39 c7                	cmp    edi,eax
c000c370:	7d 36                	jge    c000c3a8 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c372:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c378:	74 08                	je     c000c382 <Video::drawCursor(int, int, unsigned int*, int)+0x9e>
c000c37a:	8b 06                	mov    eax,DWORD PTR [esi]
c000c37c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c380:	eb 0d                	jmp    c000c38f <Video::drawCursor(int, int, unsigned int*, int)+0xab>
c000c382:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000c387:	74 12                	je     c000c39b <Video::drawCursor(int, int, unsigned int*, int)+0xb7>
c000c389:	8b 06                	mov    eax,DWORD PTR [esi]
c000c38b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c393:	57                   	push   edi
c000c394:	56                   	push   esi
c000c395:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	d1 ed                	shr    ebp,1
c000c39d:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000c3a1:	47                   	inc    edi
c000c3a2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000c3a6:	75 b7                	jne    c000c35f <Video::drawCursor(int, int, unsigned int*, int)+0x7b>
c000c3a8:	43                   	inc    ebx
c000c3a9:	83 fb 20             	cmp    ebx,0x20
c000c3ac:	0f 85 64 ff ff ff    	jne    c000c316 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000c3b2:	83 c4 2c             	add    esp,0x2c
c000c3b5:	5b                   	pop    ebx
c000c3b6:	5e                   	pop    esi
c000c3b7:	5f                   	pop    edi
c000c3b8:	5d                   	pop    ebp
c000c3b9:	c3                   	ret    

c000c3ba <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c3ba:	55                   	push   ebp
c000c3bb:	57                   	push   edi
c000c3bc:	56                   	push   esi
c000c3bd:	53                   	push   ebx
c000c3be:	83 ec 48             	sub    esp,0x48
c000c3c1:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c3c5:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c3c9:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c3cd:	c1 e0 08             	shl    eax,0x8
c000c3d0:	01 d0                	add    eax,edx
c000c3d2:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c3d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3da:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c3de:	c1 e0 08             	shl    eax,0x8
c000c3e1:	01 d0                	add    eax,edx
c000c3e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c3e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3eb:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000c3f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c3f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3f8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c3ff:	50                   	push   eax
c000c400:	e8 b6 3c 00 00       	call   c00100bb <malloc>
c000c405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c409:	83 c4 10             	add    esp,0x10
c000c40c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c411:	75 10                	jne    c000c423 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000c413:	83 ec 0c             	sub    esp,0xc
c000c416:	68 34 97 02 c0       	push   0xc0029734
c000c41b:	e8 f0 40 00 00       	call   c0010510 <KePanic(char const*)>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	51                   	push   ecx
c000c424:	51                   	push   ecx
c000c425:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c429:	50                   	push   eax
c000c42a:	68 44 97 02 c0       	push   0xc0029744
c000c42f:	e8 48 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c434:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c437:	83 e0 20             	and    eax,0x20
c000c43a:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c43e:	85 c0                	test   eax,eax
c000c440:	5e                   	pop    esi
c000c441:	0f 94 c0             	sete   al
c000c444:	5f                   	pop    edi
c000c445:	0f b6 c0             	movzx  eax,al
c000c448:	be 12 00 00 00       	mov    esi,0x12
c000c44d:	50                   	push   eax
c000c44e:	68 4e 97 02 c0       	push   0xc002974e
c000c453:	e8 24 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c458:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000c45c:	83 c4 10             	add    esp,0x10
c000c45f:	89 d0                	mov    eax,edx
c000c461:	85 d2                	test   edx,edx
c000c463:	74 11                	je     c000c476 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000c465:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000c469:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c46d:	c1 fe 03             	sar    esi,0x3
c000c470:	0f af f1             	imul   esi,ecx
c000c473:	83 c6 12             	add    esi,0x12
c000c476:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c47b:	74 07                	je     c000c484 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000c47d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000c482:	75 12                	jne    c000c496 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000c484:	83 ec 0c             	sub    esp,0xc
c000c487:	68 5c 97 02 c0       	push   0xc002975c
c000c48c:	e8 eb aa ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c491:	e9 a0 02 00 00       	jmp    c000c736 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000c496:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c49a:	83 f9 02             	cmp    ecx,0x2
c000c49d:	74 0e                	je     c000c4ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000c49f:	83 f9 0a             	cmp    ecx,0xa
c000c4a2:	0f 84 c8 00 00 00    	je     c000c570 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000c4a8:	e9 72 02 00 00       	jmp    c000c71f <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000c4ad:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c4b2:	75 0e                	jne    c000c4c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000c4b4:	84 c0                	test   al,al
c000c4b6:	75 0a                	jne    c000c4c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000c4b8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c4bb:	83 e8 18             	sub    eax,0x18
c000c4be:	a8 f7                	test   al,0xf7
c000c4c0:	74 0d                	je     c000c4cf <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000c4c2:	83 ec 0c             	sub    esp,0xc
c000c4c5:	68 71 97 02 c0       	push   0xc0029771
c000c4ca:	e9 58 02 00 00       	jmp    c000c727 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000c4cf:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000c4d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c4dc:	31 c0                	xor    eax,eax
c000c4de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4e2:	89 c7                	mov    edi,eax
c000c4e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c4ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c4f1:	75 15                	jne    c000c508 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000c4f3:	99                   	cdq    
c000c4f4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c4f8:	85 d2                	test   edx,edx
c000c4fa:	75 0c                	jne    c000c508 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000c4fc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c500:	29 c7                	sub    edi,eax
c000c502:	4f                   	dec    edi
c000c503:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000c508:	31 d2                	xor    edx,edx
c000c50a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c50e:	75 08                	jne    c000c518 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000c510:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000c515:	c1 e2 18             	shl    edx,0x18
c000c518:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000c51d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c521:	c1 e1 10             	shl    ecx,0x10
c000c524:	8d 47 01             	lea    eax,[edi+0x1]
c000c527:	89 cd                	mov    ebp,ecx
c000c529:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000c52e:	c1 e1 08             	shl    ecx,0x8
c000c531:	09 e9                	or     ecx,ebp
c000c533:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c537:	09 e9                	or     ecx,ebp
c000c539:	09 d1                	or     ecx,edx
c000c53b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c53f:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000c542:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000c546:	c1 fa 03             	sar    edx,0x3
c000c549:	01 d6                	add    esi,edx
c000c54b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c54f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000c553:	7e 04                	jle    c000c559 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000c555:	89 c7                	mov    edi,eax
c000c557:	eb 93                	jmp    c000c4ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000c559:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c55d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c561:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c565:	0f 8f 77 ff ff ff    	jg     c000c4e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000c56b:	e9 d3 01 00 00       	jmp    c000c743 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c570:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c575:	75 0e                	jne    c000c585 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000c577:	85 d2                	test   edx,edx
c000c579:	75 0a                	jne    c000c585 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000c57b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c57e:	83 e8 18             	sub    eax,0x18
c000c581:	a8 f7                	test   al,0xf7
c000c583:	74 0d                	je     c000c592 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000c585:	83 ec 0c             	sub    esp,0xc
c000c588:	68 7f 97 02 c0       	push   0xc002977f
c000c58d:	e9 95 01 00 00       	jmp    c000c727 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000c592:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c59a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c5a2:	31 c9                	xor    ecx,ecx
c000c5a4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5a8:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000c5ac:	0f 8e 91 01 00 00    	jle    c000c743 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c5b2:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000c5b6:	0f 8d 87 01 00 00    	jge    c000c743 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c5bc:	8d 46 01             	lea    eax,[esi+0x1]
c000c5bf:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c5c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c5c7:	83 fd 7f             	cmp    ebp,0x7f
c000c5ca:	89 e8                	mov    eax,ebp
c000c5cc:	0f 8e 9d 00 00 00    	jle    c000c66f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000c5d2:	83 e0 7f             	and    eax,0x7f
c000c5d5:	31 d2                	xor    edx,edx
c000c5d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5db:	40                   	inc    eax
c000c5dc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c5e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e4:	75 0a                	jne    c000c5f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000c5e6:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000c5eb:	89 ea                	mov    edx,ebp
c000c5ed:	c1 e2 18             	shl    edx,0x18
c000c5f0:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000c5f5:	c1 e0 10             	shl    eax,0x10
c000c5f8:	89 c7                	mov    edi,eax
c000c5fa:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000c5ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c603:	c1 e0 08             	shl    eax,0x8
c000c606:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c60a:	09 f8                	or     eax,edi
c000c60c:	31 f6                	xor    esi,esi
c000c60e:	09 c5                	or     ebp,eax
c000c610:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000c615:	09 d5                	or     ebp,edx
c000c617:	85 ff                	test   edi,edi
c000c619:	75 1d                	jne    c000c638 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000c61b:	89 c8                	mov    eax,ecx
c000c61d:	99                   	cdq    
c000c61e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c622:	85 d2                	test   edx,edx
c000c624:	75 12                	jne    c000c638 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000c626:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c62a:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000c62e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c632:	49                   	dec    ecx
c000c633:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000c638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c63c:	8d 51 01             	lea    edx,[ecx+0x1]
c000c63f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000c642:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000c646:	8d 46 01             	lea    eax,[esi+0x1]
c000c649:	7e 06                	jle    c000c651 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000c64b:	89 c6                	mov    esi,eax
c000c64d:	89 d1                	mov    ecx,edx
c000c64f:	eb c6                	jmp    c000c617 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000c651:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c655:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c659:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000c65d:	c1 f8 03             	sar    eax,0x3
c000c660:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000c664:	89 d1                	mov    ecx,edx
c000c666:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c66a:	e9 35 ff ff ff       	jmp    c000c5a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000c66f:	8d 45 01             	lea    eax,[ebp+0x1]
c000c672:	31 f6                	xor    esi,esi
c000c674:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c678:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c67d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c681:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c686:	75 1d                	jne    c000c6a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000c688:	89 c8                	mov    eax,ecx
c000c68a:	99                   	cdq    
c000c68b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c68f:	85 d2                	test   edx,edx
c000c691:	75 12                	jne    c000c6a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000c693:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c697:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000c69b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c69f:	49                   	dec    ecx
c000c6a0:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000c6a5:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000c6ad:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c6b1:	75 10                	jne    c000c6c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000c6b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6b7:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000c6bc:	c1 e7 18             	shl    edi,0x18
c000c6bf:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000c6c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6c7:	8d 51 01             	lea    edx,[ecx+0x1]
c000c6ca:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000c6cf:	c1 e0 10             	shl    eax,0x10
c000c6d2:	89 c7                	mov    edi,eax
c000c6d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6d8:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000c6dd:	c1 e0 08             	shl    eax,0x8
c000c6e0:	09 f8                	or     eax,edi
c000c6e2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c6e6:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000c6ea:	09 f8                	or     eax,edi
c000c6ec:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c6f0:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c6f4:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000c6f7:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c6fb:	c1 f8 03             	sar    eax,0x3
c000c6fe:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000c702:	8d 46 01             	lea    eax,[esi+0x1]
c000c705:	39 f5                	cmp    ebp,esi
c000c707:	7e 09                	jle    c000c712 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000c709:	89 c6                	mov    esi,eax
c000c70b:	89 d1                	mov    ecx,edx
c000c70d:	e9 6f ff ff ff       	jmp    c000c681 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000c712:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c716:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000c71a:	e9 45 ff ff ff       	jmp    c000c664 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000c71f:	52                   	push   edx
c000c720:	52                   	push   edx
c000c721:	51                   	push   ecx
c000c722:	68 8e 97 02 c0       	push   0xc002978e
c000c727:	e8 50 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c72c:	58                   	pop    eax
c000c72d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c731:	e8 95 39 00 00       	call   c00100cb <free>
c000c736:	83 c4 10             	add    esp,0x10
c000c739:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000c741:	eb 14                	jmp    c000c757 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000c743:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c747:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c74b:	89 18                	mov    DWORD PTR [eax],ebx
c000c74d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c751:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c755:	89 18                	mov    DWORD PTR [eax],ebx
c000c757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c75b:	83 c4 3c             	add    esp,0x3c
c000c75e:	5b                   	pop    ebx
c000c75f:	5e                   	pop    esi
c000c760:	5f                   	pop    edi
c000c761:	5d                   	pop    ebp
c000c762:	c3                   	ret    
c000c763:	90                   	nop

c000c764 <Video::putTGA(int, int, unsigned char*, int)>:
c000c764:	55                   	push   ebp
c000c765:	57                   	push   edi
c000c766:	56                   	push   esi
c000c767:	53                   	push   ebx
c000c768:	83 ec 28             	sub    esp,0x28
c000c76b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c76f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c773:	50                   	push   eax
c000c774:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c778:	50                   	push   eax
c000c779:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c77d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c781:	57                   	push   edi
c000c782:	e8 33 fc ff ff       	call   c000c3ba <Video::tgaParse(unsigned char*, int, int*, int*)>
c000c787:	83 c4 20             	add    esp,0x20
c000c78a:	85 c0                	test   eax,eax
c000c78c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c790:	74 3a                	je     c000c7cc <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000c792:	89 c6                	mov    esi,eax
c000c794:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c798:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c79c:	39 d8                	cmp    eax,ebx
c000c79e:	7e 2c                	jle    c000c7cc <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000c7a0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c7a8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c7ac:	39 e8                	cmp    eax,ebp
c000c7ae:	7e 19                	jle    c000c7c9 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000c7b0:	83 c6 04             	add    esi,0x4
c000c7b3:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000c7b6:	85 c0                	test   eax,eax
c000c7b8:	79 0c                	jns    c000c7c6 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000c7ba:	8b 17                	mov    edx,DWORD PTR [edi]
c000c7bc:	50                   	push   eax
c000c7bd:	53                   	push   ebx
c000c7be:	55                   	push   ebp
c000c7bf:	57                   	push   edi
c000c7c0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c7c3:	83 c4 10             	add    esp,0x10
c000c7c6:	45                   	inc    ebp
c000c7c7:	eb db                	jmp    c000c7a4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000c7c9:	43                   	inc    ebx
c000c7ca:	eb c8                	jmp    c000c794 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000c7cc:	83 c4 1c             	add    esp,0x1c
c000c7cf:	5b                   	pop    ebx
c000c7d0:	5e                   	pop    esi
c000c7d1:	5f                   	pop    edi
c000c7d2:	5d                   	pop    ebp
c000c7d3:	c3                   	ret    

c000c7d4 <ACPI::close(int, int, void*)>:
c000c7d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c7d9:	c3                   	ret    
c000c7da:	66 90                	xchg   ax,ax

c000c7dc <loadACPITables(unsigned char*)>:
c000c7dc:	57                   	push   edi
c000c7dd:	56                   	push   esi
c000c7de:	53                   	push   ebx
c000c7df:	83 ec 60             	sub    esp,0x60
c000c7e2:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000c7e7:	0f 84 43 02 00 00    	je     c000ca30 <loadACPITables(unsigned char*)+0x254>
c000c7ed:	a0 80 2d 03 c0       	mov    al,ds:0xc0032d80
c000c7f2:	0f b6 c0             	movzx  eax,al
c000c7f5:	85 c0                	test   eax,eax
c000c7f7:	74 7b                	je     c000c874 <loadACPITables(unsigned char*)+0x98>
c000c7f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c7fd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c801:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c805:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c808:	83 e8 24             	sub    eax,0x24
c000c80b:	c1 e8 03             	shr    eax,0x3
c000c80e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c812:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000c81a:	66 90                	xchg   ax,ax
c000c81c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c820:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000c824:	0f 8d ba 00 00 00    	jge    c000c8e4 <loadACPITables(unsigned char*)+0x108>
c000c82a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c82e:	83 c0 24             	add    eax,0x24
c000c831:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c835:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c839:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c83d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c841:	c1 e0 03             	shl    eax,0x3
c000c844:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c848:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c84c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c84f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c851:	89 c1                	mov    ecx,eax
c000c853:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c858:	8d 50 01             	lea    edx,[eax+0x1]
c000c85b:	89 15 60 2b 03 c0    	mov    DWORD PTR ds:0xc0032b60,edx
c000c861:	89 ca                	mov    edx,ecx
c000c863:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c86a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c86f:	eb ab                	jmp    c000c81c <loadACPITables(unsigned char*)+0x40>
c000c871:	8d 76 00             	lea    esi,[esi+0x0]
c000c874:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c878:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c87c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c883:	83 e8 24             	sub    eax,0x24
c000c886:	c1 e8 02             	shr    eax,0x2
c000c889:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c88d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c895:	8d 76 00             	lea    esi,[esi+0x0]
c000c898:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c89c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c8a0:	7d 42                	jge    c000c8e4 <loadACPITables(unsigned char*)+0x108>
c000c8a2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c8a6:	83 c0 24             	add    eax,0x24
c000c8a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c8b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c8b5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c8b9:	c1 e0 02             	shl    eax,0x2
c000c8bc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c8c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c8c6:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c8cb:	8d 50 01             	lea    edx,[eax+0x1]
c000c8ce:	89 15 60 2b 03 c0    	mov    DWORD PTR ds:0xc0032b60,edx
c000c8d4:	89 ca                	mov    edx,ecx
c000c8d6:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c8dd:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c8e2:	eb b4                	jmp    c000c898 <loadACPITables(unsigned char*)+0xbc>
c000c8e4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c8ec:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c8f1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c8f5:	0f 8d 39 01 00 00    	jge    c000ca34 <loadACPITables(unsigned char*)+0x258>
c000c8fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c8ff:	8b 04 c5 84 2b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcd47c]
c000c906:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c90a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c912:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c916:	25 ff 0f 00 00       	and    eax,0xfff
c000c91b:	89 c6                	mov    esi,eax
c000c91d:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c923:	83 ec 0c             	sub    esp,0xc
c000c926:	6a 01                	push   0x1
c000c928:	e8 7a 71 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000c92d:	83 c4 10             	add    esp,0x10
c000c930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c934:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c93a:	83 ec 0c             	sub    esp,0xc
c000c93d:	6a 01                	push   0x1
c000c93f:	6a 01                	push   0x1
c000c941:	50                   	push   eax
c000c942:	52                   	push   edx
c000c943:	53                   	push   ebx
c000c944:	e8 2b 7a 00 00       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c949:	83 c4 20             	add    esp,0x20
c000c94c:	09 f0                	or     eax,esi
c000c94e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c952:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c956:	c1 e0 03             	shl    eax,0x3
c000c959:	05 80 2b 03 c0       	add    eax,0xc0032b80
c000c95e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c96a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c972:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c976:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c97a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c97e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c982:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c986:	89 c6                	mov    esi,eax
c000c988:	89 d7                	mov    edi,edx
c000c98a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c98c:	89 c8                	mov    eax,ecx
c000c98e:	89 fa                	mov    edx,edi
c000c990:	89 f3                	mov    ebx,esi
c000c992:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c996:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c99a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c99e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c9a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9ad:	05 00 10 00 00       	add    eax,0x1000
c000c9b2:	c1 e8 0c             	shr    eax,0xc
c000c9b5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c9b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9c5:	25 ff 0f 00 00       	and    eax,0xfff
c000c9ca:	89 c6                	mov    esi,eax
c000c9cc:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c9d2:	83 ec 0c             	sub    esp,0xc
c000c9d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c9d9:	e8 c9 70 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000c9de:	83 c4 10             	add    esp,0x10
c000c9e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c9e5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	6a 01                	push   0x1
c000c9f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f4:	50                   	push   eax
c000c9f5:	52                   	push   edx
c000c9f6:	53                   	push   ebx
c000c9f7:	e8 78 79 00 00       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c9fc:	83 c4 20             	add    esp,0x20
c000c9ff:	09 f0                	or     eax,esi
c000ca01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca09:	83 ec 0c             	sub    esp,0xc
c000ca0c:	50                   	push   eax
c000ca0d:	e8 9d 73 00 00       	call   c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c000ca12:	83 c4 10             	add    esp,0x10
c000ca15:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ca19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ca1d:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000ca24:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ca29:	e9 be fe ff ff       	jmp    c000c8ec <loadACPITables(unsigned char*)+0x110>
c000ca2e:	66 90                	xchg   ax,ax
c000ca30:	90                   	nop
c000ca31:	8d 76 00             	lea    esi,[esi+0x0]
c000ca34:	83 c4 60             	add    esp,0x60
c000ca37:	5b                   	pop    ebx
c000ca38:	5e                   	pop    esi
c000ca39:	5f                   	pop    edi
c000ca3a:	c3                   	ret    
c000ca3b:	90                   	nop

c000ca3c <findRSDT(unsigned char*)>:
c000ca3c:	57                   	push   edi
c000ca3d:	56                   	push   esi
c000ca3e:	53                   	push   ebx
c000ca3f:	83 ec 50             	sub    esp,0x50
c000ca42:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000ca47:	85 c0                	test   eax,eax
c000ca49:	75 0d                	jne    c000ca58 <findRSDT(unsigned char*)+0x1c>
c000ca4b:	b8 00 00 00 00       	mov    eax,0x0
c000ca50:	e9 2b 01 00 00       	jmp    c000cb80 <findRSDT(unsigned char*)+0x144>
c000ca55:	8d 76 00             	lea    esi,[esi+0x0]
c000ca58:	89 e0                	mov    eax,esp
c000ca5a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ca5e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ca62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca66:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ca6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ca72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ca7e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ca82:	89 c6                	mov    esi,eax
c000ca84:	89 d7                	mov    edi,edx
c000ca86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca88:	89 c8                	mov    eax,ecx
c000ca8a:	89 fa                	mov    edx,edi
c000ca8c:	89 f3                	mov    ebx,esi
c000ca8e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ca92:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ca96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ca9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ca9e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000caa2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000caaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cabe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cac2:	25 ff 0f 00 00       	and    eax,0xfff
c000cac7:	89 c6                	mov    esi,eax
c000cac9:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000cacf:	83 ec 0c             	sub    esp,0xc
c000cad2:	6a 02                	push   0x2
c000cad4:	e8 ce 6f 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000cad9:	83 c4 10             	add    esp,0x10
c000cadc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000cae0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cae6:	83 ec 0c             	sub    esp,0xc
c000cae9:	6a 01                	push   0x1
c000caeb:	6a 02                	push   0x2
c000caed:	50                   	push   eax
c000caee:	52                   	push   edx
c000caef:	53                   	push   ebx
c000caf0:	e8 7f 78 00 00       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000caf5:	83 c4 20             	add    esp,0x20
c000caf8:	09 f0                	or     eax,esi
c000cafa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cafe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb02:	25 ff 0f 00 00       	and    eax,0xfff
c000cb07:	89 c6                	mov    esi,eax
c000cb09:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000cb0f:	83 ec 0c             	sub    esp,0xc
c000cb12:	6a 02                	push   0x2
c000cb14:	e8 8e 6f 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000cb19:	83 c4 10             	add    esp,0x10
c000cb1c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cb26:	83 ec 0c             	sub    esp,0xc
c000cb29:	6a 01                	push   0x1
c000cb2b:	6a 02                	push   0x2
c000cb2d:	50                   	push   eax
c000cb2e:	52                   	push   edx
c000cb2f:	53                   	push   ebx
c000cb30:	e8 3f 78 00 00       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb35:	83 c4 20             	add    esp,0x20
c000cb38:	09 f0                	or     eax,esi
c000cb3a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb3e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cb43:	85 c0                	test   eax,eax
c000cb45:	75 11                	jne    c000cb58 <findRSDT(unsigned char*)+0x11c>
c000cb47:	c6 05 80 2d 03 c0 00 	mov    BYTE PTR ds:0xc0032d80,0x0
c000cb4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb52:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb56:	eb 24                	jmp    c000cb7c <findRSDT(unsigned char*)+0x140>
c000cb58:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cb5d:	83 f8 02             	cmp    eax,0x2
c000cb60:	75 12                	jne    c000cb74 <findRSDT(unsigned char*)+0x138>
c000cb62:	c6 05 80 2d 03 c0 01 	mov    BYTE PTR ds:0xc0032d80,0x1
c000cb69:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cb6d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb71:	eb 09                	jmp    c000cb7c <findRSDT(unsigned char*)+0x140>
c000cb73:	90                   	nop
c000cb74:	b8 00 00 00 00       	mov    eax,0x0
c000cb79:	eb 05                	jmp    c000cb80 <findRSDT(unsigned char*)+0x144>
c000cb7b:	90                   	nop
c000cb7c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cb80:	83 c4 50             	add    esp,0x50
c000cb83:	5b                   	pop    ebx
c000cb84:	5e                   	pop    esi
c000cb85:	5f                   	pop    edi
c000cb86:	c3                   	ret    
c000cb87:	90                   	nop

c000cb88 <findDataTable(unsigned char*, char*)>:
c000cb88:	83 ec 1c             	sub    esp,0x1c
c000cb8b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000cb90:	75 0a                	jne    c000cb9c <findDataTable(unsigned char*, char*)+0x14>
c000cb92:	b8 00 00 00 00       	mov    eax,0x0
c000cb97:	eb 5f                	jmp    c000cbf8 <findDataTable(unsigned char*, char*)+0x70>
c000cb99:	8d 76 00             	lea    esi,[esi+0x0]
c000cb9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cba4:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000cba9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000cbad:	7d 41                	jge    c000cbf0 <findDataTable(unsigned char*, char*)+0x68>
c000cbaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbb3:	c1 e0 03             	shl    eax,0x3
c000cbb6:	05 80 2b 03 c0       	add    eax,0xc0032b80
c000cbbb:	83 ec 04             	sub    esp,0x4
c000cbbe:	6a 04                	push   0x4
c000cbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbc4:	50                   	push   eax
c000cbc5:	e8 b6 37 ff ff       	call   c0000380 <memcmp>
c000cbca:	83 c4 10             	add    esp,0x10
c000cbcd:	85 c0                	test   eax,eax
c000cbcf:	0f 94 c0             	sete   al
c000cbd2:	0f b6 c0             	movzx  eax,al
c000cbd5:	85 c0                	test   eax,eax
c000cbd7:	74 0f                	je     c000cbe8 <findDataTable(unsigned char*, char*)+0x60>
c000cbd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbdd:	8b 04 c5 84 2b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcd47c]
c000cbe4:	eb 12                	jmp    c000cbf8 <findDataTable(unsigned char*, char*)+0x70>
c000cbe6:	66 90                	xchg   ax,ax
c000cbe8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000cbed:	eb b5                	jmp    c000cba4 <findDataTable(unsigned char*, char*)+0x1c>
c000cbef:	90                   	nop
c000cbf0:	b8 00 00 00 00       	mov    eax,0x0
c000cbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf8:	83 c4 1c             	add    esp,0x1c
c000cbfb:	c3                   	ret    

c000cbfc <scanMADT()>:
c000cbfc:	53                   	push   ebx
c000cbfd:	83 ec 38             	sub    esp,0x38
c000cc00:	c7 05 88 2d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032d88,0x0
c000cc0a:	c7 05 84 2d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032d84,0x0
c000cc14:	83 ec 0c             	sub    esp,0xc
c000cc17:	68 f0 97 02 c0       	push   0xc00297f0
c000cc1c:	e8 5b a3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000cc21:	83 c4 10             	add    esp,0x10
c000cc24:	e8 31 dd 00 00       	call   c001a95a <HalFindRSDP()>
c000cc29:	a3 88 2d 03 c0       	mov    ds:0xc0032d88,eax
c000cc2e:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000cc33:	85 c0                	test   eax,eax
c000cc35:	0f 84 59 04 00 00    	je     c000d094 <scanMADT()+0x498>
c000cc3b:	83 ec 0c             	sub    esp,0xc
c000cc3e:	68 fe 97 02 c0       	push   0xc00297fe
c000cc43:	e8 34 a3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000cc48:	83 c4 10             	add    esp,0x10
c000cc4b:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000cc50:	83 ec 0c             	sub    esp,0xc
c000cc53:	50                   	push   eax
c000cc54:	e8 e3 fd ff ff       	call   c000ca3c <findRSDT(unsigned char*)>
c000cc59:	83 c4 10             	add    esp,0x10
c000cc5c:	a3 84 2d 03 c0       	mov    ds:0xc0032d84,eax
c000cc61:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000cc66:	85 c0                	test   eax,eax
c000cc68:	0f 84 2a 04 00 00    	je     c000d098 <scanMADT()+0x49c>
c000cc6e:	8b 15 84 2d 03 c0    	mov    edx,DWORD PTR ds:0xc0032d84
c000cc74:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000cc79:	83 ec 04             	sub    esp,0x4
c000cc7c:	52                   	push   edx
c000cc7d:	50                   	push   eax
c000cc7e:	68 a8 99 02 c0       	push   0xc00299a8
c000cc83:	e8 f4 a2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000cc88:	83 c4 10             	add    esp,0x10
c000cc8b:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000cc90:	83 ec 0c             	sub    esp,0xc
c000cc93:	50                   	push   eax
c000cc94:	e8 43 fb ff ff       	call   c000c7dc <loadACPITables(unsigned char*)>
c000cc99:	83 c4 10             	add    esp,0x10
c000cc9c:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000cca1:	83 ec 08             	sub    esp,0x8
c000cca4:	68 0d 98 02 c0       	push   0xc002980d
c000cca9:	50                   	push   eax
c000ccaa:	e8 d9 fe ff ff       	call   c000cb88 <findDataTable(unsigned char*, char*)>
c000ccaf:	83 c4 10             	add    esp,0x10
c000ccb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccb6:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ccbb:	0f 84 db 03 00 00    	je     c000d09c <scanMADT()+0x4a0>
c000ccc1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ccc9:	8d 76 00             	lea    esi,[esi+0x0]
c000cccc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ccd3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ccd7:	0f 87 c7 03 00 00    	ja     c000d0a4 <scanMADT()+0x4a8>
c000ccdd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000cce5:	0f 87 b9 03 00 00    	ja     c000d0a4 <scanMADT()+0x4a8>
c000cceb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ccf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccf7:	8d 50 01             	lea    edx,[eax+0x1]
c000ccfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cd02:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cd06:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000cd0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd0e:	8d 50 01             	lea    edx,[eax+0x1]
c000cd11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cd19:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cd1d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000cd21:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000cd26:	83 f8 02             	cmp    eax,0x2
c000cd29:	0f 86 71 03 00 00    	jbe    c000d0a0 <scanMADT()+0x4a4>
c000cd2f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cd34:	85 c0                	test   eax,eax
c000cd36:	75 58                	jne    c000cd90 <scanMADT()+0x194>
c000cd38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd3c:	8d 50 01             	lea    edx,[eax+0x1]
c000cd3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd43:	8a 15 80 2f 03 c0    	mov    dl,BYTE PTR ds:0xc0032f80
c000cd49:	0f b6 d2             	movzx  edx,dl
c000cd4c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cd50:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cd54:	88 82 c0 2f 03 c0    	mov    BYTE PTR [edx-0x3ffcd040],al
c000cd5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd5e:	8d 50 01             	lea    edx,[eax+0x1]
c000cd61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd65:	8a 15 80 2f 03 c0    	mov    dl,BYTE PTR ds:0xc0032f80
c000cd6b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cd6e:	88 0d 80 2f 03 c0    	mov    BYTE PTR ds:0xc0032f80,cl
c000cd74:	0f b6 d2             	movzx  edx,dl
c000cd77:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cd7b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cd7f:	88 82 a0 2f 03 c0    	mov    BYTE PTR [edx-0x3ffcd060],al
c000cd85:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cd8a:	e9 f1 02 00 00       	jmp    c000d080 <scanMADT()+0x484>
c000cd8f:	90                   	nop
c000cd90:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cd95:	83 f8 01             	cmp    eax,0x1
c000cd98:	0f 85 32 01 00 00    	jne    c000ced0 <scanMADT()+0x2d4>
c000cd9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cda2:	8d 50 01             	lea    edx,[eax+0x1]
c000cda5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda9:	8a 15 40 2e 03 c0    	mov    dl,BYTE PTR ds:0xc0032e40
c000cdaf:	0f b6 d2             	movzx  edx,dl
c000cdb2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cdb6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cdba:	88 82 60 2e 03 c0    	mov    BYTE PTR [edx-0x3ffcd1a0],al
c000cdc0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000cdc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cdc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdcd:	01 d0                	add    eax,edx
c000cdcf:	83 c0 2c             	add    eax,0x2c
c000cdd2:	8a 00                	mov    al,BYTE PTR [eax]
c000cdd4:	0f b6 d0             	movzx  edx,al
c000cdd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cddb:	8d 48 01             	lea    ecx,[eax+0x1]
c000cdde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cde2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cde6:	0f b6 c0             	movzx  eax,al
c000cde9:	c1 e0 08             	shl    eax,0x8
c000cdec:	89 d1                	mov    ecx,edx
c000cdee:	09 c1                	or     ecx,eax
c000cdf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdf4:	8d 50 02             	lea    edx,[eax+0x2]
c000cdf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdfb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cdff:	0f b6 c0             	movzx  eax,al
c000ce02:	c1 e0 10             	shl    eax,0x10
c000ce05:	09 c1                	or     ecx,eax
c000ce07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce0b:	8d 50 03             	lea    edx,[eax+0x3]
c000ce0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce12:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ce16:	0f b6 c0             	movzx  eax,al
c000ce19:	c1 e0 18             	shl    eax,0x18
c000ce1c:	09 c1                	or     ecx,eax
c000ce1e:	89 ca                	mov    edx,ecx
c000ce20:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000ce25:	0f b6 c0             	movzx  eax,al
c000ce28:	89 14 85 80 2e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd180],edx
c000ce2f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ce34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ce38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce3c:	01 d0                	add    eax,edx
c000ce3e:	83 c0 2c             	add    eax,0x2c
c000ce41:	8a 00                	mov    al,BYTE PTR [eax]
c000ce43:	0f b6 d0             	movzx  edx,al
c000ce46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce4a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ce4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce51:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ce55:	0f b6 c0             	movzx  eax,al
c000ce58:	c1 e0 08             	shl    eax,0x8
c000ce5b:	89 d1                	mov    ecx,edx
c000ce5d:	09 c1                	or     ecx,eax
c000ce5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce63:	8d 50 02             	lea    edx,[eax+0x2]
c000ce66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce6a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	c1 e0 10             	shl    eax,0x10
c000ce74:	09 c1                	or     ecx,eax
c000ce76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce7a:	8d 50 03             	lea    edx,[eax+0x3]
c000ce7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce81:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ce85:	0f b6 c0             	movzx  eax,al
c000ce88:	c1 e0 18             	shl    eax,0x18
c000ce8b:	09 c1                	or     ecx,eax
c000ce8d:	89 ca                	mov    edx,ecx
c000ce8f:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000ce94:	0f b6 c0             	movzx  eax,al
c000ce97:	89 14 85 00 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd100],edx
c000ce9e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cea3:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000cea8:	83 c0 01             	add    eax,0x1
c000ceab:	a2 40 2e 03 c0       	mov    ds:0xc0032e40,al
c000ceb0:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000ceb5:	0f b6 c0             	movzx  eax,al
c000ceb8:	83 ec 08             	sub    esp,0x8
c000cebb:	50                   	push   eax
c000cebc:	68 12 98 02 c0       	push   0xc0029812
c000cec1:	e8 b6 a0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000cec6:	83 c4 10             	add    esp,0x10
c000cec9:	e9 b2 01 00 00       	jmp    c000d080 <scanMADT()+0x484>
c000cece:	66 90                	xchg   ax,ax
c000ced0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ced5:	83 f8 02             	cmp    eax,0x2
c000ced8:	0f 85 ea 00 00 00    	jne    c000cfc8 <scanMADT()+0x3cc>
c000cede:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cee2:	8d 50 01             	lea    edx,[eax+0x1]
c000cee5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cee9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ceed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cef1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000cef5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef9:	8d 50 01             	lea    edx,[eax+0x1]
c000cefc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf04:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cf08:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000cf0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf14:	01 d0                	add    eax,edx
c000cf16:	83 c0 2c             	add    eax,0x2c
c000cf19:	8a 00                	mov    al,BYTE PTR [eax]
c000cf1b:	0f b6 d0             	movzx  edx,al
c000cf1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf22:	8d 48 01             	lea    ecx,[eax+0x1]
c000cf25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf29:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cf2d:	0f b6 c0             	movzx  eax,al
c000cf30:	c1 e0 08             	shl    eax,0x8
c000cf33:	89 d1                	mov    ecx,edx
c000cf35:	09 c1                	or     ecx,eax
c000cf37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3b:	8d 50 02             	lea    edx,[eax+0x2]
c000cf3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf42:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cf46:	0f b6 c0             	movzx  eax,al
c000cf49:	c1 e0 10             	shl    eax,0x10
c000cf4c:	09 c1                	or     ecx,eax
c000cf4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf52:	8d 50 03             	lea    edx,[eax+0x3]
c000cf55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf59:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cf5d:	0f b6 c0             	movzx  eax,al
c000cf60:	c1 e0 18             	shl    eax,0x18
c000cf63:	09 c8                	or     eax,ecx
c000cf65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cf69:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cf6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf76:	01 d0                	add    eax,edx
c000cf78:	83 c0 2c             	add    eax,0x2c
c000cf7b:	8a 00                	mov    al,BYTE PTR [eax]
c000cf7d:	0f b6 c0             	movzx  eax,al
c000cf80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf84:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf8b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000cf8f:	0f b6 d2             	movzx  edx,dl
c000cf92:	c1 e2 08             	shl    edx,0x8
c000cf95:	09 d0                	or     eax,edx
c000cf97:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000cf9c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000cfa1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000cfa6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cfaa:	88 90 08 ce 02 c0    	mov    BYTE PTR [eax-0x3ffd31f8],dl
c000cfb0:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000cfb5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000cfba:	66 89 84 12 20 2e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcd1e0],ax
c000cfc2:	e9 b9 00 00 00       	jmp    c000d080 <scanMADT()+0x484>
c000cfc7:	90                   	nop
c000cfc8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cfcd:	83 f8 04             	cmp    eax,0x4
c000cfd0:	0f 85 9a 00 00 00    	jne    c000d070 <scanMADT()+0x474>
c000cfd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfda:	8d 50 01             	lea    edx,[eax+0x1]
c000cfdd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfe1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cfe5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cfe9:	0f b6 c0             	movzx  eax,al
c000cfec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cff0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cff4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cff8:	01 d0                	add    eax,edx
c000cffa:	83 c0 2c             	add    eax,0x2c
c000cffd:	8a 00                	mov    al,BYTE PTR [eax]
c000cfff:	0f b6 d0             	movzx  edx,al
c000d002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d006:	8d 48 01             	lea    ecx,[eax+0x1]
c000d009:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d00d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d011:	0f b6 c0             	movzx  eax,al
c000d014:	c1 e0 08             	shl    eax,0x8
c000d017:	09 d0                	or     eax,edx
c000d019:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d01d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d022:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d026:	8d 50 01             	lea    edx,[eax+0x1]
c000d029:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d02d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d031:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d035:	0f b6 c0             	movzx  eax,al
c000d038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d040:	c1 e0 08             	shl    eax,0x8
c000d043:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d047:	89 c1                	mov    ecx,eax
c000d049:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d04d:	c1 e0 18             	shl    eax,0x18
c000d050:	89 c3                	mov    ebx,eax
c000d052:	a1 8c 2d 03 c0       	mov    eax,ds:0xc0032d8c
c000d057:	8d 50 01             	lea    edx,[eax+0x1]
c000d05a:	89 15 8c 2d 03 c0    	mov    DWORD PTR ds:0xc0032d8c,edx
c000d060:	09 d9                	or     ecx,ebx
c000d062:	89 ca                	mov    edx,ecx
c000d064:	89 14 85 a0 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd260],edx
c000d06b:	eb 13                	jmp    c000d080 <scanMADT()+0x484>
c000d06d:	8d 76 00             	lea    esi,[esi+0x0]
c000d070:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d075:	83 f8 05             	cmp    eax,0x5
c000d078:	75 06                	jne    c000d080 <scanMADT()+0x484>
c000d07a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d07f:	90                   	nop
c000d080:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d085:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d089:	01 d0                	add    eax,edx
c000d08b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d08f:	e9 38 fc ff ff       	jmp    c000cccc <scanMADT()+0xd0>
c000d094:	90                   	nop
c000d095:	eb 0d                	jmp    c000d0a4 <scanMADT()+0x4a8>
c000d097:	90                   	nop
c000d098:	90                   	nop
c000d099:	eb 09                	jmp    c000d0a4 <scanMADT()+0x4a8>
c000d09b:	90                   	nop
c000d09c:	90                   	nop
c000d09d:	eb 05                	jmp    c000d0a4 <scanMADT()+0x4a8>
c000d09f:	90                   	nop
c000d0a0:	90                   	nop
c000d0a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d0a4:	83 c4 38             	add    esp,0x38
c000d0a7:	5b                   	pop    ebx
c000d0a8:	c3                   	ret    
c000d0a9:	90                   	nop
c000d0aa:	66 90                	xchg   ax,ax

c000d0ac <ACPI::ACPI()>:
c000d0ac:	83 ec 0c             	sub    esp,0xc
c000d0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b3:	83 ec 08             	sub    esp,0x8
c000d0b6:	68 2e 98 02 c0       	push   0xc002982e
c000d0bb:	50                   	push   eax
c000d0bc:	e8 41 d3 ff ff       	call   c000a402 <Device::Device(char const*)>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	ba 4c 9a 02 c0       	mov    edx,0xc0029a4c
c000d0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0cd:	89 10                	mov    DWORD PTR [eax],edx
c000d0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0de:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ec:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d0f6:	90                   	nop
c000d0f7:	83 c4 0c             	add    esp,0xc
c000d0fa:	c3                   	ret    
c000d0fb:	90                   	nop

c000d0fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d0fc:	83 ec 2c             	sub    esp,0x2c
c000d0ff:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d103:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d107:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d10b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000d10f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d114:	88 d0                	mov    al,dl
c000d116:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d11a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d11f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d127:	90                   	nop
c000d128:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d12c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d132:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d136:	0f 8d b0 00 00 00    	jge    c000d1ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000d13c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d140:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d144:	83 c2 2a             	add    edx,0x2a
c000d147:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d14b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000d150:	0f b7 c0             	movzx  eax,ax
c000d153:	39 c2                	cmp    edx,eax
c000d155:	0f 85 85 00 00 00    	jne    c000d1e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d15b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d15f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d163:	83 c2 2a             	add    edx,0x2a
c000d166:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d16a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000d16f:	0f b6 c0             	movzx  eax,al
c000d172:	39 c2                	cmp    edx,eax
c000d174:	75 6a                	jne    c000d1e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d176:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d17b:	85 c0                	test   eax,eax
c000d17d:	74 3d                	je     c000d1bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000d17f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d183:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d187:	83 c2 2a             	add    edx,0x2a
c000d18a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d18e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d192:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d195:	39 c2                	cmp    edx,eax
c000d197:	74 13                	je     c000d1ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000d199:	83 ec 0c             	sub    esp,0xc
c000d19c:	68 cc 99 02 c0       	push   0xc00299cc
c000d1a1:	e8 6a 33 00 00       	call   c0010510 <KePanic(char const*)>
c000d1a6:	83 c4 10             	add    esp,0x10
c000d1a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1ac:	83 ec 0c             	sub    esp,0xc
c000d1af:	68 33 98 02 c0       	push   0xc0029833
c000d1b4:	e8 57 33 00 00       	call   c0010510 <KePanic(char const*)>
c000d1b9:	83 c4 10             	add    esp,0x10
c000d1bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d1c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d1c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d1c8:	83 c2 2a             	add    edx,0x2a
c000d1cb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d1cf:	8b 02                	mov    eax,DWORD PTR [edx]
c000d1d1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d1d4:	89 01                	mov    DWORD PTR [ecx],eax
c000d1d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d1d9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d1de:	66 90                	xchg   ax,ax
c000d1e0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000d1e5:	e9 3e ff ff ff       	jmp    c000d128 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000d1ea:	66 90                	xchg   ax,ax
c000d1ec:	90                   	nop
c000d1ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1f1:	83 c4 2c             	add    esp,0x2c
c000d1f4:	c2 04 00             	ret    0x4
c000d1f7:	90                   	nop

c000d1f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000d1f8:	83 ec 1c             	sub    esp,0x1c
c000d1fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d1ff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d203:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d207:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000d20c:	88 c8                	mov    al,cl
c000d20e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000d212:	88 d0                	mov    al,dl
c000d214:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d21c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d226:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d229:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000d22d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000d231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d235:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d23b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d23f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000d242:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d246:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000d24b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d24f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d255:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000d259:	83 c0 01             	add    eax,0x1
c000d25c:	88 c1                	mov    cl,al
c000d25e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d262:	83 c2 2a             	add    edx,0x2a
c000d265:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000d269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d26d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d277:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d27a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d27e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000d282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d286:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d28c:	8d 50 01             	lea    edx,[eax+0x1]
c000d28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d293:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000d299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d29d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d2a3:	3d 00 02 00 00       	cmp    eax,0x200
c000d2a8:	75 12                	jne    c000d2bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000d2aa:	83 ec 0c             	sub    esp,0xc
c000d2ad:	68 42 98 02 c0       	push   0xc0029842
c000d2b2:	e8 59 32 00 00       	call   c0010510 <KePanic(char const*)>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	66 90                	xchg   ax,ax
c000d2bc:	90                   	nop
c000d2bd:	83 c4 1c             	add    esp,0x1c
c000d2c0:	c3                   	ret    
c000d2c1:	90                   	nop
c000d2c2:	66 90                	xchg   ax,ax

c000d2c4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000d2c4:	b8 00 00 00 00       	mov    eax,0x0
c000d2c9:	c3                   	ret    
c000d2ca:	66 90                	xchg   ax,ax

c000d2cc <ACPI::detectPCI()>:
c000d2cc:	53                   	push   ebx
c000d2cd:	83 ec 28             	sub    esp,0x28
c000d2d0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d2d5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000d2da:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d2df:	83 ec 08             	sub    esp,0x8
c000d2e2:	68 5f 98 02 c0       	push   0xc002985f
c000d2e7:	50                   	push   eax
c000d2e8:	e8 9b f8 ff ff       	call   c000cb88 <findDataTable(unsigned char*, char*)>
c000d2ed:	83 c4 10             	add    esp,0x10
c000d2f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000d2f9:	74 0d                	je     c000d308 <ACPI::detectPCI()+0x3c>
c000d2fb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d300:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d305:	8d 76 00             	lea    esi,[esi+0x0]
c000d308:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000d310:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d314:	8a 00                	mov    al,BYTE PTR [eax]
c000d316:	0f b6 c0             	movzx  eax,al
c000d319:	83 f8 01             	cmp    eax,0x1
c000d31c:	75 0e                	jne    c000d32c <ACPI::detectPCI()+0x60>
c000d31e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d323:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d328:	eb 2e                	jmp    c000d358 <ACPI::detectPCI()+0x8c>
c000d32a:	66 90                	xchg   ax,ax
c000d32c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d330:	8a 00                	mov    al,BYTE PTR [eax]
c000d332:	0f b6 c0             	movzx  eax,al
c000d335:	83 f8 02             	cmp    eax,0x2
c000d338:	75 1e                	jne    c000d358 <ACPI::detectPCI()+0x8c>
c000d33a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d33f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d344:	85 c0                	test   eax,eax
c000d346:	74 10                	je     c000d358 <ACPI::detectPCI()+0x8c>
c000d348:	83 ec 0c             	sub    esp,0xc
c000d34b:	68 fc 99 02 c0       	push   0xc00299fc
c000d350:	e8 bb 31 00 00       	call   c0010510 <KePanic(char const*)>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000d35c:	83 f0 01             	xor    eax,0x1
c000d35f:	0f b6 c0             	movzx  eax,al
c000d362:	85 c0                	test   eax,eax
c000d364:	74 46                	je     c000d3ac <ACPI::detectPCI()+0xe0>
c000d366:	e8 c5 2d ff ff       	call   c0000130 <manualPCIProbe>
c000d36b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d36f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000d374:	75 0e                	jne    c000d384 <ACPI::detectPCI()+0xb8>
c000d376:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d37b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d380:	eb 2a                	jmp    c000d3ac <ACPI::detectPCI()+0xe0>
c000d382:	66 90                	xchg   ax,ax
c000d384:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000d389:	75 21                	jne    c000d3ac <ACPI::detectPCI()+0xe0>
c000d38b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d390:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d395:	85 c0                	test   eax,eax
c000d397:	74 13                	je     c000d3ac <ACPI::detectPCI()+0xe0>
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	68 fc 99 02 c0       	push   0xc00299fc
c000d3a1:	e8 6a 31 00 00       	call   c0010510 <KePanic(char const*)>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3ac:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d3b1:	85 c0                	test   eax,eax
c000d3b3:	0f 84 87 00 00 00    	je     c000d440 <ACPI::detectPCI()+0x174>
c000d3b9:	83 ec 0c             	sub    esp,0xc
c000d3bc:	68 64 98 02 c0       	push   0xc0029864
c000d3c1:	e8 57 07 00 00       	call   c000db1d <KeSetBootMessage(char const*)>
c000d3c6:	83 c4 10             	add    esp,0x10
c000d3c9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d3d1:	83 ec 0c             	sub    esp,0xc
c000d3d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3d8:	e8 de 2c 00 00       	call   c00100bb <malloc>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	89 c3                	mov    ebx,eax
c000d3e2:	83 ec 0c             	sub    esp,0xc
c000d3e5:	53                   	push   ebx
c000d3e6:	e8 69 1b 01 00       	call   c001ef54 <PCI::PCI()>
c000d3eb:	83 c4 10             	add    esp,0x10
c000d3ee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d3f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3f6:	83 ec 08             	sub    esp,0x8
c000d3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3fd:	50                   	push   eax
c000d3fe:	e8 9d ce ff ff       	call   c000a2a0 <Device::addChild(Device*)>
c000d403:	83 c4 10             	add    esp,0x10
c000d406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d40a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d40c:	83 c0 08             	add    eax,0x8
c000d40f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d411:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d416:	85 d2                	test   edx,edx
c000d418:	74 0a                	je     c000d424 <ACPI::detectPCI()+0x158>
c000d41a:	ba 01 00 00 00       	mov    edx,0x1
c000d41f:	eb 0b                	jmp    c000d42c <ACPI::detectPCI()+0x160>
c000d421:	8d 76 00             	lea    esi,[esi+0x0]
c000d424:	ba 02 00 00 00       	mov    edx,0x2
c000d429:	8d 76 00             	lea    esi,[esi+0x0]
c000d42c:	6a 00                	push   0x0
c000d42e:	6a 00                	push   0x0
c000d430:	52                   	push   edx
c000d431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d435:	ff d0                	call   eax
c000d437:	83 c4 10             	add    esp,0x10
c000d43a:	e9 91 00 00 00       	jmp    c000d4d0 <ACPI::detectPCI()+0x204>
c000d43f:	90                   	nop
c000d440:	83 ec 0c             	sub    esp,0xc
c000d443:	68 7c 98 02 c0       	push   0xc002987c
c000d448:	e8 d0 06 00 00       	call   c000db1d <KeSetBootMessage(char const*)>
c000d44d:	83 c4 10             	add    esp,0x10
c000d450:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d457:	83 ec 0c             	sub    esp,0xc
c000d45a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d45e:	e8 58 2c 00 00       	call   c00100bb <malloc>
c000d463:	83 c4 10             	add    esp,0x10
c000d466:	89 c3                	mov    ebx,eax
c000d468:	83 ec 0c             	sub    esp,0xc
c000d46b:	53                   	push   ebx
c000d46c:	e8 e9 26 01 00       	call   c001fb5a <IDE::IDE()>
c000d471:	83 c4 10             	add    esp,0x10
c000d474:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d478:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d47c:	83 ec 08             	sub    esp,0x8
c000d47f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d483:	50                   	push   eax
c000d484:	e8 17 ce ff ff       	call   c000a2a0 <Device::addChild(Device*)>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d490:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d49a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d49e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d4a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4ab:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000d4b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d4ba:	83 c0 08             	add    eax,0x8
c000d4bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000d4bf:	6a 00                	push   0x0
c000d4c1:	6a 00                	push   0x0
c000d4c3:	6a 00                	push   0x0
c000d4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c9:	ff d0                	call   eax
c000d4cb:	83 c4 10             	add    esp,0x10
c000d4ce:	66 90                	xchg   ax,ax
c000d4d0:	90                   	nop
c000d4d1:	83 c4 28             	add    esp,0x28
c000d4d4:	5b                   	pop    ebx
c000d4d5:	c3                   	ret    
c000d4d6:	66 90                	xchg   ax,ax

c000d4d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	83 ec 0c             	sub    esp,0xc
c000d4de:	68 91 98 02 c0       	push   0xc0029891
c000d4e3:	e8 28 30 00 00       	call   c0010510 <KePanic(char const*)>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	90                   	nop
c000d4ec:	83 c4 0c             	add    esp,0xc
c000d4ef:	c3                   	ret    

c000d4f0 <ACPI::open(int, int, void*)>:
c000d4f0:	57                   	push   edi
c000d4f1:	56                   	push   esi
c000d4f2:	53                   	push   ebx
c000d4f3:	81 ec 70 01 00 00    	sub    esp,0x170
c000d4f9:	83 ec 0c             	sub    esp,0xc
c000d4fc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d503:	e8 c4 fd ff ff       	call   c000d2cc <ACPI::detectPCI()>
c000d508:	83 c4 10             	add    esp,0x10
c000d50b:	83 ec 0c             	sub    esp,0xc
c000d50e:	68 24 9a 02 c0       	push   0xc0029a24
c000d513:	e8 05 06 00 00       	call   c000db1d <KeSetBootMessage(char const*)>
c000d518:	83 c4 10             	add    esp,0x10
c000d51b:	b8 4c 05 00 00       	mov    eax,0x54c
c000d520:	8a 00                	mov    al,BYTE PTR [eax]
c000d522:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000d529:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000d531:	83 f8 01             	cmp    eax,0x1
c000d534:	75 12                	jne    c000d548 <ACPI::open(int, int, void*)+0x58>
c000d536:	83 ec 0c             	sub    esp,0xc
c000d539:	68 a2 98 02 c0       	push   0xc00298a2
c000d53e:	e8 16 8a 00 00       	call   c0015f59 <Thr::loadKernelSymbolTable(char const*)>
c000d543:	83 c4 10             	add    esp,0x10
c000d546:	eb 34                	jmp    c000d57c <ACPI::open(int, int, void*)+0x8c>
c000d548:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000d550:	3d bb 00 00 00       	cmp    eax,0xbb
c000d555:	75 15                	jne    c000d56c <ACPI::open(int, int, void*)+0x7c>
c000d557:	83 ec 0c             	sub    esp,0xc
c000d55a:	68 c0 98 02 c0       	push   0xc00298c0
c000d55f:	e8 f5 89 00 00       	call   c0015f59 <Thr::loadKernelSymbolTable(char const*)>
c000d564:	83 c4 10             	add    esp,0x10
c000d567:	eb 13                	jmp    c000d57c <ACPI::open(int, int, void*)+0x8c>
c000d569:	8d 76 00             	lea    esi,[esi+0x0]
c000d56c:	83 ec 0c             	sub    esp,0xc
c000d56f:	68 de 98 02 c0       	push   0xc00298de
c000d574:	e8 97 2f 00 00       	call   c0010510 <KePanic(char const*)>
c000d579:	83 c4 10             	add    esp,0x10
c000d57c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000d584:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000d58f:	83 ec 0c             	sub    esp,0xc
c000d592:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d599:	e8 1d 2b 00 00       	call   c00100bb <malloc>
c000d59e:	83 c4 10             	add    esp,0x10
c000d5a1:	89 c3                	mov    ebx,eax
c000d5a3:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d5a8:	83 ec 04             	sub    esp,0x4
c000d5ab:	50                   	push   eax
c000d5ac:	68 f8 98 02 c0       	push   0xc00298f8
c000d5b1:	53                   	push   ebx
c000d5b2:	e8 1f b4 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c000d5b7:	83 c4 10             	add    esp,0x10
c000d5ba:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000d5c1:	83 ec 08             	sub    esp,0x8
c000d5c4:	6a 01                	push   0x1
c000d5c6:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d5cd:	e8 22 b4 ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c000d5d2:	83 c4 10             	add    esp,0x10
c000d5d5:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000d5dc:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000d5e4:	75 16                	jne    c000d5fc <ACPI::open(int, int, void*)+0x10c>
c000d5e6:	83 ec 0c             	sub    esp,0xc
c000d5e9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d5f0:	e8 5d b4 ff ff       	call   c0008a52 <File::close()>
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	eb 0a                	jmp    c000d604 <ACPI::open(int, int, void*)+0x114>
c000d5fa:	66 90                	xchg   ax,ax
c000d5fc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000d604:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000d60c:	74 1e                	je     c000d62c <ACPI::open(int, int, void*)+0x13c>
c000d60e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000d615:	8b 00                	mov    eax,DWORD PTR [eax]
c000d617:	83 c0 08             	add    eax,0x8
c000d61a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d61c:	83 ec 0c             	sub    esp,0xc
c000d61f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d626:	ff d0                	call   eax
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	90                   	nop
c000d62c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000d633:	83 f0 01             	xor    eax,0x1
c000d636:	0f b6 c0             	movzx  eax,al
c000d639:	85 c0                	test   eax,eax
c000d63b:	74 2f                	je     c000d66c <ACPI::open(int, int, void*)+0x17c>
c000d63d:	83 ec 0c             	sub    esp,0xc
c000d640:	68 16 99 02 c0       	push   0xc0029916
c000d645:	e8 d3 04 00 00       	call   c000db1d <KeSetBootMessage(char const*)>
c000d64a:	83 c4 10             	add    esp,0x10
c000d64d:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000d658:	83 ec 0c             	sub    esp,0xc
c000d65b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000d662:	e8 6f 66 00 00       	call   c0013cd6 <Virt::setupPageSwapping(int)>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	66 90                	xchg   ax,ax
c000d66c:	83 ec 0c             	sub    esp,0xc
c000d66f:	68 31 99 02 c0       	push   0xc0029931
c000d674:	e8 a4 04 00 00       	call   c000db1d <KeSetBootMessage(char const*)>
c000d679:	83 c4 10             	add    esp,0x10
c000d67c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000d683:	83 ec 08             	sub    esp,0x8
c000d686:	6a 13                	push   0x13
c000d688:	50                   	push   eax
c000d689:	e8 40 cf ff ff       	call   c000a5ce <getDevicesOfType(DeviceType)>
c000d68e:	83 c4 0c             	add    esp,0xc
c000d691:	8d 76 00             	lea    esi,[esi+0x0]
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d69e:	50                   	push   eax
c000d69f:	e8 6c a4 01 00       	call   c0027b10 <LinkedList<Device>::isEmpty()>
c000d6a4:	83 c4 10             	add    esp,0x10
c000d6a7:	83 f0 01             	xor    eax,0x1
c000d6aa:	0f b6 c0             	movzx  eax,al
c000d6ad:	85 c0                	test   eax,eax
c000d6af:	0f 84 3b 01 00 00    	je     c000d7f0 <ACPI::open(int, int, void*)+0x300>
c000d6b5:	83 ec 0c             	sub    esp,0xc
c000d6b8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d6bf:	50                   	push   eax
c000d6c0:	e8 67 a4 01 00       	call   c0027b2c <LinkedList<Device>::getFirstElement()>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000d6cf:	83 ec 0c             	sub    esp,0xc
c000d6d2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d6d9:	50                   	push   eax
c000d6da:	e8 55 a4 01 00       	call   c0027b34 <LinkedList<Device>::removeFirst()>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000d6e9:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000d6f0:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000d6f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000d6fb:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000d701:	ba 09 00 00 00       	mov    edx,0x9
c000d706:	fc                   	cld    
c000d707:	89 c7                	mov    edi,eax
c000d709:	89 de                	mov    esi,ebx
c000d70b:	89 d1                	mov    ecx,edx
c000d70d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d70f:	83 ec 08             	sub    esp,0x8
c000d712:	8d 44 24 38          	lea    eax,[esp+0x38]
c000d716:	50                   	push   eax
c000d717:	83 ec 24             	sub    esp,0x24
c000d71a:	89 e0                	mov    eax,esp
c000d71c:	89 c3                	mov    ebx,eax
c000d71e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000d722:	ba 09 00 00 00       	mov    edx,0x9
c000d727:	89 df                	mov    edi,ebx
c000d729:	89 c6                	mov    esi,eax
c000d72b:	89 d1                	mov    ecx,edx
c000d72d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d72f:	e8 0a 1d 01 00       	call   c001f43e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000d734:	83 c4 30             	add    esp,0x30
c000d737:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000d73e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000d746:	0f 84 48 ff ff ff    	je     c000d694 <ACPI::open(int, int, void*)+0x1a4>
c000d74c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000d757:	83 ec 0c             	sub    esp,0xc
c000d75a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d761:	e8 55 29 00 00       	call   c00100bb <malloc>
c000d766:	83 c4 10             	add    esp,0x10
c000d769:	89 c3                	mov    ebx,eax
c000d76b:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d770:	83 ec 04             	sub    esp,0x4
c000d773:	50                   	push   eax
c000d774:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d77b:	53                   	push   ebx
c000d77c:	e8 55 b2 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c000d781:	83 c4 10             	add    esp,0x10
c000d784:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000d78b:	83 ec 0c             	sub    esp,0xc
c000d78e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d795:	e8 1e b5 ff ff       	call   c0008cb8 <File::exists()>
c000d79a:	83 c4 10             	add    esp,0x10
c000d79d:	0f b6 c0             	movzx  eax,al
c000d7a0:	85 c0                	test   eax,eax
c000d7a2:	74 1c                	je     c000d7c0 <ACPI::open(int, int, void*)+0x2d0>
c000d7a4:	83 ec 04             	sub    esp,0x4
c000d7a7:	6a 00                	push   0x0
c000d7a9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000d7b0:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000d7b7:	e8 50 8f 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d7bc:	83 c4 10             	add    esp,0x10
c000d7bf:	90                   	nop
c000d7c0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000d7c8:	0f 84 c6 fe ff ff    	je     c000d694 <ACPI::open(int, int, void*)+0x1a4>
c000d7ce:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000d7d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7d7:	83 c0 08             	add    eax,0x8
c000d7da:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7dc:	83 ec 0c             	sub    esp,0xc
c000d7df:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d7e6:	ff d0                	call   eax
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	e9 a4 fe ff ff       	jmp    c000d694 <ACPI::open(int, int, void*)+0x1a4>
c000d7f0:	83 ec 0c             	sub    esp,0xc
c000d7f3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d7fa:	50                   	push   eax
c000d7fb:	e8 0c a3 01 00       	call   c0027b0c <LinkedList<Device>::~LinkedList()>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000d808:	83 ec 04             	sub    esp,0x4
c000d80b:	6a 00                	push   0x0
c000d80d:	50                   	push   eax
c000d80e:	68 4b 99 02 c0       	push   0xc002994b
c000d813:	e8 f4 8e 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d818:	83 c4 10             	add    esp,0x10
c000d81b:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d820:	85 c0                	test   eax,eax
c000d822:	0f 84 1c 01 00 00    	je     c000d944 <ACPI::open(int, int, void*)+0x454>
c000d828:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000d82d:	85 c0                	test   eax,eax
c000d82f:	0f 84 0f 01 00 00    	je     c000d944 <ACPI::open(int, int, void*)+0x454>
c000d835:	83 ec 0c             	sub    esp,0xc
c000d838:	68 68 99 02 c0       	push   0xc0029968
c000d83d:	e8 db 02 00 00       	call   c000db1d <KeSetBootMessage(char const*)>
c000d842:	83 c4 10             	add    esp,0x10
c000d845:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d85a:	e8 5c 28 00 00       	call   c00100bb <malloc>
c000d85f:	83 c4 10             	add    esp,0x10
c000d862:	89 c3                	mov    ebx,eax
c000d864:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d869:	83 ec 04             	sub    esp,0x4
c000d86c:	50                   	push   eax
c000d86d:	68 85 99 02 c0       	push   0xc0029985
c000d872:	53                   	push   ebx
c000d873:	e8 5e b1 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c000d878:	83 c4 10             	add    esp,0x10
c000d87b:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d882:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d88a:	74 20                	je     c000d8ac <ACPI::open(int, int, void*)+0x3bc>
c000d88c:	83 ec 0c             	sub    esp,0xc
c000d88f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d896:	e8 1d b4 ff ff       	call   c0008cb8 <File::exists()>
c000d89b:	83 c4 10             	add    esp,0x10
c000d89e:	0f b6 c0             	movzx  eax,al
c000d8a1:	85 c0                	test   eax,eax
c000d8a3:	74 07                	je     c000d8ac <ACPI::open(int, int, void*)+0x3bc>
c000d8a5:	b0 01                	mov    al,0x1
c000d8a7:	eb 07                	jmp    c000d8b0 <ACPI::open(int, int, void*)+0x3c0>
c000d8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8ac:	b0 00                	mov    al,0x0
c000d8ae:	66 90                	xchg   ax,ax
c000d8b0:	0f b6 c0             	movzx  eax,al
c000d8b3:	85 c0                	test   eax,eax
c000d8b5:	74 19                	je     c000d8d0 <ACPI::open(int, int, void*)+0x3e0>
c000d8b7:	83 ec 04             	sub    esp,0x4
c000d8ba:	6a 00                	push   0x0
c000d8bc:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d8c3:	68 85 99 02 c0       	push   0xc0029985
c000d8c8:	e8 3f 8e 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d8cd:	83 c4 10             	add    esp,0x10
c000d8d0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d8d8:	74 2a                	je     c000d904 <ACPI::open(int, int, void*)+0x414>
c000d8da:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d8e2:	74 20                	je     c000d904 <ACPI::open(int, int, void*)+0x414>
c000d8e4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d8eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000d8ed:	83 c0 08             	add    eax,0x8
c000d8f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d8f2:	83 ec 0c             	sub    esp,0xc
c000d8f5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d8fc:	ff d0                	call   eax
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	8d 76 00             	lea    esi,[esi+0x0]
c000d904:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d909:	83 ec 08             	sub    esp,0x8
c000d90c:	68 a2 99 02 c0       	push   0xc00299a2
c000d911:	50                   	push   eax
c000d912:	e8 71 f2 ff ff       	call   c000cb88 <findDataTable(unsigned char*, char*)>
c000d917:	83 c4 10             	add    esp,0x10
c000d91a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d921:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d929:	74 19                	je     c000d944 <ACPI::open(int, int, void*)+0x454>
c000d92b:	83 ec 08             	sub    esp,0x8
c000d92e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d935:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d93c:	e8 97 fb ff ff       	call   c000d4d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d941:	83 c4 10             	add    esp,0x10
c000d944:	b8 00 00 00 00       	mov    eax,0x0
c000d949:	81 c4 70 01 00 00    	add    esp,0x170
c000d94f:	5b                   	pop    ebx
c000d950:	5e                   	pop    esi
c000d951:	5f                   	pop    edi
c000d952:	c3                   	ret    
c000d953:	90                   	nop

c000d954 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d954:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d95a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d961:	89 c2                	mov    edx,eax
c000d963:	c1 fa 1f             	sar    edx,0x1f
c000d966:	83 ec 04             	sub    esp,0x4
c000d969:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d96d:	51                   	push   ecx
c000d96e:	52                   	push   edx
c000d96f:	50                   	push   eax
c000d970:	e8 3b 25 00 00       	call   c000feb0 <KeItoa(long long, char*)>
c000d975:	83 c4 10             	add    esp,0x10
c000d978:	83 ec 08             	sub    esp,0x8
c000d97b:	68 70 9a 02 c0       	push   0xc0029a70
c000d980:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d984:	50                   	push   eax
c000d985:	e8 b6 2c ff ff       	call   c0000640 <strcpy>
c000d98a:	83 c4 10             	add    esp,0x10
c000d98d:	83 ec 08             	sub    esp,0x8
c000d990:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d997:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d99b:	50                   	push   eax
c000d99c:	e8 9f 2e ff ff       	call   c0000840 <strcat>
c000d9a1:	83 c4 10             	add    esp,0x10
c000d9a4:	83 ec 08             	sub    esp,0x8
c000d9a7:	68 7e 9a 02 c0       	push   0xc0029a7e
c000d9ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9b0:	50                   	push   eax
c000d9b1:	e8 8a 2e ff ff       	call   c0000840 <strcat>
c000d9b6:	83 c4 10             	add    esp,0x10
c000d9b9:	83 ec 08             	sub    esp,0x8
c000d9bc:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9c3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9c7:	50                   	push   eax
c000d9c8:	e8 73 2e ff ff       	call   c0000840 <strcat>
c000d9cd:	83 c4 10             	add    esp,0x10
c000d9d0:	83 ec 08             	sub    esp,0x8
c000d9d3:	68 81 9a 02 c0       	push   0xc0029a81
c000d9d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9dc:	50                   	push   eax
c000d9dd:	e8 5e 2e ff ff       	call   c0000840 <strcat>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	83 ec 08             	sub    esp,0x8
c000d9e8:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d9ef:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9f3:	50                   	push   eax
c000d9f4:	e8 47 2e ff ff       	call   c0000840 <strcat>
c000d9f9:	83 c4 10             	add    esp,0x10
c000d9fc:	83 ec 08             	sub    esp,0x8
c000d9ff:	68 81 9a 02 c0       	push   0xc0029a81
c000da04:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da08:	50                   	push   eax
c000da09:	e8 32 2e ff ff       	call   c0000840 <strcat>
c000da0e:	83 c4 10             	add    esp,0x10
c000da11:	83 ec 08             	sub    esp,0x8
c000da14:	8d 44 24 08          	lea    eax,[esp+0x8]
c000da18:	50                   	push   eax
c000da19:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da1d:	50                   	push   eax
c000da1e:	e8 1d 2e ff ff       	call   c0000840 <strcat>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	83 ec 0c             	sub    esp,0xc
c000da29:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da2d:	50                   	push   eax
c000da2e:	e8 dd 2a 00 00       	call   c0010510 <KePanic(char const*)>
c000da33:	83 c4 10             	add    esp,0x10
c000da36:	90                   	nop
c000da37:	81 c4 2c 02 00 00    	add    esp,0x22c
c000da3d:	c3                   	ret    

c000da3e <KeInitialiseAtexit()>:
c000da3e:	83 ec 10             	sub    esp,0x10
c000da41:	c7 05 e0 2f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032fe0,0x0
c000da4b:	68 80 00 00 00       	push   0x80
c000da50:	6a 00                	push   0x0
c000da52:	68 80 30 03 c0       	push   0xc0033080
c000da57:	e8 94 2a ff ff       	call   c00004f0 <memset>
c000da5c:	83 c4 1c             	add    esp,0x1c
c000da5f:	c3                   	ret    

c000da60 <KeRegisterAtexit(void (*)(void*), void*)>:
c000da60:	a1 e0 2f 03 c0       	mov    eax,ds:0xc0032fe0
c000da65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da69:	89 14 85 80 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffccf80],edx
c000da70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da74:	89 14 85 00 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd000],edx
c000da7b:	40                   	inc    eax
c000da7c:	a3 e0 2f 03 c0       	mov    ds:0xc0032fe0,eax
c000da81:	83 f8 1f             	cmp    eax,0x1f
c000da84:	7e 0d                	jle    c000da93 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000da86:	c7 44 24 04 83 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029a83
c000da8e:	e9 7d 2a 00 00       	jmp    c0010510 <KePanic(char const*)>
c000da93:	c3                   	ret    

c000da94 <KeExecuteAtexit()>:
c000da94:	53                   	push   ebx
c000da95:	31 db                	xor    ebx,ebx
c000da97:	83 ec 08             	sub    esp,0x8
c000da9a:	39 1d e0 2f 03 c0    	cmp    DWORD PTR ds:0xc0032fe0,ebx
c000daa0:	7e 28                	jle    c000daca <KeExecuteAtexit()+0x36>
c000daa2:	8b 04 9d 80 30 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffccf80]
c000daa9:	85 c0                	test   eax,eax
c000daab:	74 1a                	je     c000dac7 <KeExecuteAtexit()+0x33>
c000daad:	83 ec 0c             	sub    esp,0xc
c000dab0:	ff 34 9d 00 30 03 c0 	push   DWORD PTR [ebx*4-0x3ffcd000]
c000dab7:	ff d0                	call   eax
c000dab9:	c7 04 9d 80 30 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffccf80],0x0
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	43                   	inc    ebx
c000dac8:	eb d0                	jmp    c000da9a <KeExecuteAtexit()+0x6>
c000daca:	83 c4 08             	add    esp,0x8
c000dacd:	5b                   	pop    ebx
c000dace:	c3                   	ret    
c000dacf:	90                   	nop

c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000dad0:	8b 15 00 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033100
c000dad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dada:	21 d0                	and    eax,edx
c000dadc:	0f 95 c0             	setne  al
c000dadf:	c3                   	ret    

c000dae0 <KeInitialiseBootConfigurationFlags()>:
c000dae0:	b8 00 05 00 00       	mov    eax,0x500
c000dae5:	8b 00                	mov    eax,DWORD PTR [eax]
c000dae7:	a3 00 31 03 c0       	mov    ds:0xc0033100,eax
c000daec:	90                   	nop
c000daed:	c3                   	ret    

c000daee <KeDisplaySplashScreen()>:
c000daee:	53                   	push   ebx
c000daef:	bb 01 00 00 00       	mov    ebx,0x1
c000daf4:	83 ec 08             	sub    esp,0x8
c000daf7:	43                   	inc    ebx
c000daf8:	0f be 83 9a 9a 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd6566]
c000daff:	85 c0                	test   eax,eax
c000db01:	74 15                	je     c000db18 <KeDisplaySplashScreen()+0x2a>
c000db03:	83 ec 0c             	sub    esp,0xc
c000db06:	6a 01                	push   0x1
c000db08:	53                   	push   ebx
c000db09:	6a 00                	push   0x0
c000db0b:	6a 0f                	push   0xf
c000db0d:	50                   	push   eax
c000db0e:	e8 f5 e8 00 00       	call   c001c408 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000db13:	83 c4 20             	add    esp,0x20
c000db16:	eb df                	jmp    c000daf7 <KeDisplaySplashScreen()+0x9>
c000db18:	83 c4 08             	add    esp,0x8
c000db1b:	5b                   	pop    ebx
c000db1c:	c3                   	ret    

c000db1d <KeSetBootMessage(char const*)>:
c000db1d:	57                   	push   edi
c000db1e:	56                   	push   esi
c000db1f:	53                   	push   ebx
c000db20:	31 db                	xor    ebx,ebx
c000db22:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db26:	83 ec 0c             	sub    esp,0xc
c000db29:	6a 14                	push   0x14
c000db2b:	53                   	push   ebx
c000db2c:	43                   	inc    ebx
c000db2d:	6a 00                	push   0x0
c000db2f:	6a 00                	push   0x0
c000db31:	6a 20                	push   0x20
c000db33:	e8 d0 e8 00 00       	call   c001c408 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000db38:	83 c4 20             	add    esp,0x20
c000db3b:	83 fb 50             	cmp    ebx,0x50
c000db3e:	75 e6                	jne    c000db26 <KeSetBootMessage(char const*)+0x9>
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	56                   	push   esi
c000db44:	e8 27 2a ff ff       	call   c0000570 <strlen>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	29 c3                	sub    ebx,eax
c000db4e:	d1 eb                	shr    ebx,1
c000db50:	89 df                	mov    edi,ebx
c000db52:	89 f0                	mov    eax,esi
c000db54:	29 d8                	sub    eax,ebx
c000db56:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000db5a:	85 c0                	test   eax,eax
c000db5c:	74 16                	je     c000db74 <KeSetBootMessage(char const*)+0x57>
c000db5e:	83 ec 0c             	sub    esp,0xc
c000db61:	6a 14                	push   0x14
c000db63:	57                   	push   edi
c000db64:	47                   	inc    edi
c000db65:	6a 00                	push   0x0
c000db67:	6a 07                	push   0x7
c000db69:	50                   	push   eax
c000db6a:	e8 99 e8 00 00       	call   c001c408 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000db6f:	83 c4 20             	add    esp,0x20
c000db72:	eb de                	jmp    c000db52 <KeSetBootMessage(char const*)+0x35>
c000db74:	5b                   	pop    ebx
c000db75:	5e                   	pop    esi
c000db76:	5f                   	pop    edi
c000db77:	c3                   	ret    

c000db78 <__cxa_atexit>:
c000db78:	31 c0                	xor    eax,eax
c000db7a:	c3                   	ret    

c000db7b <__cxa_finalize>:
c000db7b:	c3                   	ret    

c000db7c <__stack_chk_fail>:
c000db7c:	55                   	push   ebp
c000db7d:	89 e5                	mov    ebp,esp
c000db7f:	83 ec 10             	sub    esp,0x10
c000db82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000db85:	68 af 9a 02 c0       	push   0xc0029aaf
c000db8a:	e8 ed 93 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000db8f:	58                   	pop    eax
c000db90:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000db93:	5a                   	pop    edx
c000db94:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db97:	68 af 9a 02 c0       	push   0xc0029aaf
c000db9c:	e8 db 93 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000dba1:	c7 04 24 b7 9a 02 c0 	mov    DWORD PTR [esp],0xc0029ab7
c000dba8:	e8 63 29 00 00       	call   c0010510 <KePanic(char const*)>
c000dbad:	83 c4 10             	add    esp,0x10
c000dbb0:	c9                   	leave  
c000dbb1:	c3                   	ret    

c000dbb2 <__cxa_pure_virtual>:
c000dbb2:	83 ec 18             	sub    esp,0x18
c000dbb5:	68 cf 9a 02 c0       	push   0xc0029acf
c000dbba:	e8 51 29 00 00       	call   c0010510 <KePanic(char const*)>
c000dbbf:	83 c4 1c             	add    esp,0x1c
c000dbc2:	c3                   	ret    

c000dbc3 <operator new[](unsigned long)>:
c000dbc3:	e9 f3 24 00 00       	jmp    c00100bb <malloc>

c000dbc8 <operator delete(void*, unsigned long)>:
c000dbc8:	e9 0e 25 00 00       	jmp    c00100db <rfree>

c000dbcd <operator delete[](void*)>:
c000dbcd:	e9 09 25 00 00       	jmp    c00100db <rfree>

c000dbd2 <operator delete[](void*, unsigned long)>:
c000dbd2:	e9 04 25 00 00       	jmp    c00100db <rfree>
c000dbd7:	90                   	nop

c000dbd8 <CUnlockScheduler>:
c000dbd8:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000dbe0:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000dbe5:	85 c0                	test   eax,eax
c000dbe7:	75 03                	jne    c000dbec <CUnlockScheduler+0x14>
c000dbe9:	fb                   	sti    
c000dbea:	66 90                	xchg   ax,ax
c000dbec:	90                   	nop
c000dbed:	c3                   	ret    
c000dbee:	66 90                	xchg   ax,ax

c000dbf0 <CLockScheduler>:
c000dbf0:	fa                   	cli    
c000dbf1:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000dbf6:	83 c0 01             	add    eax,0x1
c000dbf9:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000dbfe:	90                   	nop
c000dbff:	c3                   	ret    

c000dc00 <CPrintf>:
c000dc00:	83 ec 0c             	sub    esp,0xc
c000dc03:	83 ec 08             	sub    esp,0x8
c000dc06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc0a:	68 e2 9a 02 c0       	push   0xc0029ae2
c000dc0f:	e8 68 93 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	90                   	nop
c000dc18:	83 c4 0c             	add    esp,0xc
c000dc1b:	c3                   	ret    

c000dc1c <CmOpen(char const*)>:
c000dc1c:	57                   	push   edi
c000dc1d:	56                   	push   esi
c000dc1e:	53                   	push   ebx
c000dc1f:	83 ec 1c             	sub    esp,0x1c
c000dc22:	6a 30                	push   0x30
c000dc24:	e8 92 24 00 00       	call   c00100bb <malloc>
c000dc29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000dc30:	89 c3                	mov    ebx,eax
c000dc32:	e8 84 24 00 00       	call   c00100bb <malloc>
c000dc37:	83 c4 0c             	add    esp,0xc
c000dc3a:	89 c6                	mov    esi,eax
c000dc3c:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000dc42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dc46:	50                   	push   eax
c000dc47:	e8 8a ad ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c000dc4c:	83 c4 0c             	add    esp,0xc
c000dc4f:	89 33                	mov    DWORD PTR [ebx],esi
c000dc51:	8d 44 24 07          	lea    eax,[esp+0x7]
c000dc55:	50                   	push   eax
c000dc56:	8d 44 24 10          	lea    eax,[esp+0x10]
c000dc5a:	50                   	push   eax
c000dc5b:	56                   	push   esi
c000dc5c:	e8 95 b0 ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c000dc61:	5a                   	pop    edx
c000dc62:	59                   	pop    ecx
c000dc63:	6a 01                	push   0x1
c000dc65:	ff 33                	push   DWORD PTR [ebx]
c000dc67:	e8 88 ad ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c000dc6c:	5e                   	pop    esi
c000dc6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc71:	e8 45 24 00 00       	call   c00100bb <malloc>
c000dc76:	5a                   	pop    edx
c000dc77:	89 c7                	mov    edi,eax
c000dc79:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dc7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc7f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc81:	56                   	push   esi
c000dc82:	57                   	push   edi
c000dc83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dc87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dc8b:	50                   	push   eax
c000dc8c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dc8f:	83 c4 14             	add    esp,0x14
c000dc92:	ff 33                	push   DWORD PTR [ebx]
c000dc94:	e8 b9 ad ff ff       	call   c0008a52 <File::close()>
c000dc99:	59                   	pop    ecx
c000dc9a:	58                   	pop    eax
c000dc9b:	6a 13                	push   0x13
c000dc9d:	ff 33                	push   DWORD PTR [ebx]
c000dc9f:	e8 50 ad ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c000dca4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dca6:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca8:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcab:	57                   	push   edi
c000dcac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dcb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dcb4:	50                   	push   eax
c000dcb5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000dcb8:	83 c4 14             	add    esp,0x14
c000dcbb:	57                   	push   edi
c000dcbc:	e8 0a 24 00 00       	call   c00100cb <free>
c000dcc1:	83 c4 10             	add    esp,0x10
c000dcc4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dcc7:	75 10                	jne    c000dcd9 <CmOpen(char const*)+0xbd>
c000dcc9:	83 ec 0c             	sub    esp,0xc
c000dccc:	68 e5 9a 02 c0       	push   0xc0029ae5
c000dcd1:	e8 3a 28 00 00       	call   c0010510 <KePanic(char const*)>
c000dcd6:	83 c4 10             	add    esp,0x10
c000dcd9:	8d 7b 05             	lea    edi,[ebx+0x5]
c000dcdc:	50                   	push   eax
c000dcdd:	6a 00                	push   0x0
c000dcdf:	6a 00                	push   0x0
c000dce1:	ff 33                	push   DWORD PTR [ebx]
c000dce3:	e8 ca ad ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c000dce8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcea:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcec:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcef:	57                   	push   edi
c000dcf0:	6a 00                	push   0x0
c000dcf2:	6a 2b                	push   0x2b
c000dcf4:	50                   	push   eax
c000dcf5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dcf8:	83 c4 1c             	add    esp,0x1c
c000dcfb:	6a 00                	push   0x0
c000dcfd:	6a 00                	push   0x0
c000dcff:	ff 33                	push   DWORD PTR [ebx]
c000dd01:	e8 ac ad ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c000dd06:	83 c4 0c             	add    esp,0xc
c000dd09:	6a 08                	push   0x8
c000dd0b:	68 07 9b 02 c0       	push   0xc0029b07
c000dd10:	57                   	push   edi
c000dd11:	e8 6a 26 ff ff       	call   c0000380 <memcmp>
c000dd16:	83 c4 10             	add    esp,0x10
c000dd19:	85 c0                	test   eax,eax
c000dd1b:	74 10                	je     c000dd2d <CmOpen(char const*)+0x111>
c000dd1d:	83 ec 0c             	sub    esp,0xc
c000dd20:	68 10 9b 02 c0       	push   0xc0029b10
c000dd25:	e8 e6 27 00 00       	call   c0010510 <KePanic(char const*)>
c000dd2a:	83 c4 10             	add    esp,0x10
c000dd2d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000dd31:	89 d8                	mov    eax,ebx
c000dd33:	83 c4 10             	add    esp,0x10
c000dd36:	5b                   	pop    ebx
c000dd37:	5e                   	pop    esi
c000dd38:	5f                   	pop    edi
c000dd39:	c3                   	ret    

c000dd3a <CmClose(Reghive_Tag*)>:
c000dd3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd3e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000dd42:	74 0b                	je     c000dd4f <CmClose(Reghive_Tag*)+0x15>
c000dd44:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd4a:	e9 03 ad ff ff       	jmp    c0008a52 <File::close()>
c000dd4f:	c3                   	ret    

c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000dd50:	53                   	push   ebx
c000dd51:	83 ec 18             	sub    esp,0x18
c000dd54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dd58:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000dd5c:	74 29                	je     c000dd87 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000dd5e:	50                   	push   eax
c000dd5f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000dd64:	99                   	cdq    
c000dd65:	52                   	push   edx
c000dd66:	50                   	push   eax
c000dd67:	ff 33                	push   DWORD PTR [ebx]
c000dd69:	e8 44 ad ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c000dd6e:	5a                   	pop    edx
c000dd6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd71:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000dd75:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd77:	51                   	push   ecx
c000dd78:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000dd7c:	6a 00                	push   0x0
c000dd7e:	6a 2b                	push   0x2b
c000dd80:	50                   	push   eax
c000dd81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd84:	83 c4 20             	add    esp,0x20
c000dd87:	83 c4 18             	add    esp,0x18
c000dd8a:	5b                   	pop    ebx
c000dd8b:	c3                   	ret    

c000dd8c <CmGetString(Reghive_Tag*, int, char*)>:
c000dd8c:	55                   	push   ebp
c000dd8d:	57                   	push   edi
c000dd8e:	56                   	push   esi
c000dd8f:	53                   	push   ebx
c000dd90:	31 db                	xor    ebx,ebx
c000dd92:	83 ec 70             	sub    esp,0x70
c000dd95:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000dd9c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000dda0:	50                   	push   eax
c000dda1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000dda8:	55                   	push   ebp
c000dda9:	e8 a2 ff ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddae:	83 c4 10             	add    esp,0x10
c000ddb1:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000ddb6:	c1 e0 08             	shl    eax,0x8
c000ddb9:	89 c2                	mov    edx,eax
c000ddbb:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000ddc0:	09 d0                	or     eax,edx
c000ddc2:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000ddc7:	c1 e0 08             	shl    eax,0x8
c000ddca:	09 d0                	or     eax,edx
c000ddcc:	74 25                	je     c000ddf3 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000ddce:	6b fb 0d             	imul   edi,ebx,0xd
c000ddd1:	52                   	push   edx
c000ddd2:	8d 54 24 39          	lea    edx,[esp+0x39]
c000ddd6:	52                   	push   edx
c000ddd7:	50                   	push   eax
c000ddd8:	55                   	push   ebp
c000ddd9:	e8 72 ff ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddde:	8d 74 24 49          	lea    esi,[esp+0x49]
c000dde2:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000dde9:	b9 27 00 00 00       	mov    ecx,0x27
c000ddee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddf0:	83 c4 10             	add    esp,0x10
c000ddf3:	83 c3 03             	add    ebx,0x3
c000ddf6:	83 fb 15             	cmp    ebx,0x15
c000ddf9:	75 b6                	jne    c000ddb1 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000ddfb:	83 c4 6c             	add    esp,0x6c
c000ddfe:	5b                   	pop    ebx
c000ddff:	5e                   	pop    esi
c000de00:	5f                   	pop    edi
c000de01:	5d                   	pop    ebp
c000de02:	c3                   	ret    

c000de03 <CmEnterDirectory(Reghive_Tag*, int)>:
c000de03:	83 ec 40             	sub    esp,0x40
c000de06:	8d 44 24 09          	lea    eax,[esp+0x9]
c000de0a:	50                   	push   eax
c000de0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de13:	e8 38 ff ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de18:	83 c4 10             	add    esp,0x10
c000de1b:	83 c8 ff             	or     eax,0xffffffff
c000de1e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000de23:	75 19                	jne    c000de3e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000de25:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000de2a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000de2f:	c1 e0 08             	shl    eax,0x8
c000de32:	09 c2                	or     edx,eax
c000de34:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000de39:	c1 e0 10             	shl    eax,0x10
c000de3c:	09 d0                	or     eax,edx
c000de3e:	83 c4 3c             	add    esp,0x3c
c000de41:	c3                   	ret    

c000de42 <CmGetNext(Reghive_Tag*, int)>:
c000de42:	83 ec 40             	sub    esp,0x40
c000de45:	8d 44 24 09          	lea    eax,[esp+0x9]
c000de49:	50                   	push   eax
c000de4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de52:	e8 f9 fe ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de57:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000de5c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000de61:	c1 e0 08             	shl    eax,0x8
c000de64:	09 c2                	or     edx,eax
c000de66:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000de6b:	83 c4 4c             	add    esp,0x4c
c000de6e:	c1 e0 10             	shl    eax,0x10
c000de71:	09 d0                	or     eax,edx
c000de73:	c3                   	ret    

c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000de74:	53                   	push   ebx
c000de75:	83 ec 18             	sub    esp,0x18
c000de78:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de7c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000de80:	74 29                	je     c000deab <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000de82:	50                   	push   eax
c000de83:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000de88:	99                   	cdq    
c000de89:	52                   	push   edx
c000de8a:	50                   	push   eax
c000de8b:	ff 33                	push   DWORD PTR [ebx]
c000de8d:	e8 20 ac ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c000de92:	5a                   	pop    edx
c000de93:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de95:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000de99:	8b 10                	mov    edx,DWORD PTR [eax]
c000de9b:	51                   	push   ecx
c000de9c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000dea0:	6a 00                	push   0x0
c000dea2:	6a 2b                	push   0x2b
c000dea4:	50                   	push   eax
c000dea5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000dea8:	83 c4 20             	add    esp,0x20
c000deab:	83 c4 18             	add    esp,0x18
c000deae:	5b                   	pop    ebx
c000deaf:	c3                   	ret    

c000deb0 <CmFreeExtent(Reghive_Tag*, int)>:
c000deb0:	53                   	push   ebx
c000deb1:	83 ec 3c             	sub    esp,0x3c
c000deb4:	6a 2b                	push   0x2b
c000deb6:	6a 00                	push   0x0
c000deb8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000debc:	53                   	push   ebx
c000debd:	e8 2e 26 ff ff       	call   c00004f0 <memset>
c000dec2:	83 c4 0c             	add    esp,0xc
c000dec5:	53                   	push   ebx
c000dec6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000deca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dece:	e8 a1 ff ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ded3:	83 c4 48             	add    esp,0x48
c000ded6:	5b                   	pop    ebx
c000ded7:	c3                   	ret    

c000ded8 <CmUpdateHeader(Reghive_Tag*)>:
c000ded8:	83 ec 0c             	sub    esp,0xc
c000dedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedf:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000dee3:	74 10                	je     c000def5 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000dee5:	52                   	push   edx
c000dee6:	8d 50 05             	lea    edx,[eax+0x5]
c000dee9:	52                   	push   edx
c000deea:	6a 00                	push   0x0
c000deec:	50                   	push   eax
c000deed:	e8 82 ff ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	83 c4 0c             	add    esp,0xc
c000def8:	c3                   	ret    

c000def9 <CmExpand(Reghive_Tag*, int)>:
c000def9:	57                   	push   edi
c000defa:	56                   	push   esi
c000defb:	83 ce ff             	or     esi,0xffffffff
c000defe:	53                   	push   ebx
c000deff:	83 ec 30             	sub    esp,0x30
c000df02:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000df06:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000df0a:	74 5f                	je     c000df6b <CmExpand(Reghive_Tag*, int)+0x72>
c000df0c:	31 d2                	xor    edx,edx
c000df0e:	31 f6                	xor    esi,esi
c000df10:	50                   	push   eax
c000df11:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000df15:	52                   	push   edx
c000df16:	50                   	push   eax
c000df17:	ff 33                	push   DWORD PTR [ebx]
c000df19:	e8 94 ab ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c000df1e:	83 c4 0c             	add    esp,0xc
c000df21:	6a 2b                	push   0x2b
c000df23:	6a 00                	push   0x0
c000df25:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000df29:	57                   	push   edi
c000df2a:	e8 c1 25 ff ff       	call   c00004f0 <memset>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000df36:	7d 1b                	jge    c000df53 <CmExpand(Reghive_Tag*, int)+0x5a>
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df3d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000df41:	8b 10                	mov    edx,DWORD PTR [eax]
c000df43:	46                   	inc    esi
c000df44:	51                   	push   ecx
c000df45:	57                   	push   edi
c000df46:	6a 00                	push   0x0
c000df48:	6a 2b                	push   0x2b
c000df4a:	50                   	push   eax
c000df4b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000df4e:	83 c4 20             	add    esp,0x20
c000df51:	eb df                	jmp    c000df32 <CmExpand(Reghive_Tag*, int)+0x39>
c000df53:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000df57:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	01 f2                	add    edx,esi
c000df5f:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000df62:	53                   	push   ebx
c000df63:	e8 70 ff ff ff       	call   c000ded8 <CmUpdateHeader(Reghive_Tag*)>
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	83 c4 30             	add    esp,0x30
c000df6e:	89 f0                	mov    eax,esi
c000df70:	5b                   	pop    ebx
c000df71:	5e                   	pop    esi
c000df72:	5f                   	pop    edi
c000df73:	c3                   	ret    

c000df74 <CmFindUnusedExtent(Reghive_Tag*)>:
c000df74:	55                   	push   ebp
c000df75:	57                   	push   edi
c000df76:	56                   	push   esi
c000df77:	53                   	push   ebx
c000df78:	83 cb ff             	or     ebx,0xffffffff
c000df7b:	83 ec 1c             	sub    esp,0x1c
c000df7e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000df82:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000df86:	74 68                	je     c000dff0 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000df88:	be 2b 00 00 00       	mov    esi,0x2b
c000df8d:	51                   	push   ecx
c000df8e:	31 ff                	xor    edi,edi
c000df90:	6a 00                	push   0x0
c000df92:	31 db                	xor    ebx,ebx
c000df94:	6a 00                	push   0x0
c000df96:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000df99:	e8 14 ab ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000dfa4:	76 3b                	jbe    c000dfe1 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000dfa6:	83 ec 0c             	sub    esp,0xc
c000dfa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dfac:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000dfb0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfb2:	51                   	push   ecx
c000dfb3:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000dfb7:	51                   	push   ecx
c000dfb8:	6a 00                	push   0x0
c000dfba:	6a 01                	push   0x1
c000dfbc:	50                   	push   eax
c000dfbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dfc0:	83 c4 20             	add    esp,0x20
c000dfc3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000dfc8:	74 26                	je     c000dff0 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000dfca:	43                   	inc    ebx
c000dfcb:	52                   	push   edx
c000dfcc:	57                   	push   edi
c000dfcd:	56                   	push   esi
c000dfce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dfd1:	e8 dc aa ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c000dfd6:	83 c6 2b             	add    esi,0x2b
c000dfd9:	83 d7 00             	adc    edi,0x0
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	eb c0                	jmp    c000dfa1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000dfe1:	50                   	push   eax
c000dfe2:	50                   	push   eax
c000dfe3:	6a 40                	push   0x40
c000dfe5:	55                   	push   ebp
c000dfe6:	e8 0e ff ff ff       	call   c000def9 <CmExpand(Reghive_Tag*, int)>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	89 c3                	mov    ebx,eax
c000dff0:	83 c4 1c             	add    esp,0x1c
c000dff3:	89 d8                	mov    eax,ebx
c000dff5:	5b                   	pop    ebx
c000dff6:	5e                   	pop    esi
c000dff7:	5f                   	pop    edi
c000dff8:	5d                   	pop    ebp
c000dff9:	c3                   	ret    

c000dffa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000dffa:	55                   	push   ebp
c000dffb:	57                   	push   edi
c000dffc:	56                   	push   esi
c000dffd:	53                   	push   ebx
c000dffe:	81 ec 88 00 00 00    	sub    esp,0x88
c000e004:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000e00b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e012:	e8 5d ff ff ff       	call   c000df74 <CmFindUnusedExtent(Reghive_Tag*)>
c000e017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e01b:	83 c4 0c             	add    esp,0xc
c000e01e:	6a 2b                	push   0x2b
c000e020:	6a 00                	push   0x0
c000e022:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000e026:	55                   	push   ebp
c000e027:	e8 c4 24 ff ff       	call   c00004f0 <memset>
c000e02c:	83 c4 10             	add    esp,0x10
c000e02f:	85 db                	test   ebx,ebx
c000e031:	74 12                	je     c000e045 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000e033:	51                   	push   ecx
c000e034:	55                   	push   ebp
c000e035:	53                   	push   ebx
c000e036:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e03d:	e8 0e fd ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e042:	83 c4 10             	add    esp,0x10
c000e045:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000e049:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e050:	b9 2b 00 00 00       	mov    ecx,0x2b
c000e055:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e057:	85 db                	test   ebx,ebx
c000e059:	74 49                	je     c000e0a4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000e05b:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000e060:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000e065:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e069:	c1 e0 08             	shl    eax,0x8
c000e06c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000e072:	09 c8                	or     eax,ecx
c000e074:	74 11                	je     c000e087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000e076:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000e07a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000e07e:	c1 e8 10             	shr    eax,0x10
c000e081:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000e085:	eb 0f                	jmp    c000e096 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000e087:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e08c:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e091:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e096:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000e09a:	c1 ea 08             	shr    edx,0x8
c000e09d:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000e0a2:	eb 0f                	jmp    c000e0b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000e0a4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e0a9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e0ae:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e0b3:	52                   	push   edx
c000e0b4:	8d 44 24 49          	lea    eax,[esp+0x49]
c000e0b8:	50                   	push   eax
c000e0b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0bd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e0c4:	e8 ab fd ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e0c9:	83 c4 10             	add    esp,0x10
c000e0cc:	85 db                	test   ebx,ebx
c000e0ce:	74 12                	je     c000e0e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000e0d0:	50                   	push   eax
c000e0d1:	55                   	push   ebp
c000e0d2:	53                   	push   ebx
c000e0d3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e0da:	e8 95 fd ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e0df:	83 c4 10             	add    esp,0x10
c000e0e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0e6:	83 c4 7c             	add    esp,0x7c
c000e0e9:	5b                   	pop    ebx
c000e0ea:	5e                   	pop    esi
c000e0eb:	5f                   	pop    edi
c000e0ec:	5d                   	pop    ebp
c000e0ed:	c3                   	ret    

c000e0ee <CmSetString(Reghive_Tag*, int, char const*)>:
c000e0ee:	55                   	push   ebp
c000e0ef:	57                   	push   edi
c000e0f0:	56                   	push   esi
c000e0f1:	53                   	push   ebx
c000e0f2:	bb 27 00 00 00       	mov    ebx,0x27
c000e0f7:	81 ec 88 00 00 00    	sub    esp,0x88
c000e0fd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e104:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000e10b:	e8 60 24 ff ff       	call   c0000570 <strlen>
c000e110:	8d 48 26             	lea    ecx,[eax+0x26]
c000e113:	89 c8                	mov    eax,ecx
c000e115:	99                   	cdq    
c000e116:	f7 fb                	idiv   ebx
c000e118:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e11c:	83 c4 10             	add    esp,0x10
c000e11f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000e125:	7e 10                	jle    c000e137 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000e127:	83 ec 0c             	sub    esp,0xc
c000e12a:	68 2b 9b 02 c0       	push   0xc0029b2b
c000e12f:	e8 dc 23 00 00       	call   c0010510 <KePanic(char const*)>
c000e134:	83 c4 10             	add    esp,0x10
c000e137:	31 ff                	xor    edi,edi
c000e139:	50                   	push   eax
c000e13a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000e13e:	53                   	push   ebx
c000e13f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e146:	56                   	push   esi
c000e147:	e8 04 fc ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e14c:	83 c4 10             	add    esp,0x10
c000e14f:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000e153:	89 d0                	mov    eax,edx
c000e155:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000e159:	c1 e0 08             	shl    eax,0x8
c000e15c:	09 c2                	or     edx,eax
c000e15e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000e162:	c1 e2 08             	shl    edx,0x8
c000e165:	09 c2                	or     edx,eax
c000e167:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000e16b:	7e 76                	jle    c000e1e3 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000e16d:	85 d2                	test   edx,edx
c000e16f:	75 25                	jne    c000e196 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000e171:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000e176:	8d 44 24 45          	lea    eax,[esp+0x45]
c000e17a:	50                   	push   eax
c000e17b:	6a 00                	push   0x0
c000e17d:	6a 00                	push   0x0
c000e17f:	56                   	push   esi
c000e180:	e8 75 fe ff ff       	call   c000dffa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 c2                	mov    edx,eax
c000e18a:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000e18d:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000e190:	c1 f8 10             	sar    eax,0x10
c000e193:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000e196:	55                   	push   ebp
c000e197:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000e19b:	55                   	push   ebp
c000e19c:	52                   	push   edx
c000e19d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1a1:	56                   	push   esi
c000e1a2:	e8 a9 fb ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e1a7:	83 c4 0c             	add    esp,0xc
c000e1aa:	6a 27                	push   0x27
c000e1ac:	6a 00                	push   0x0
c000e1ae:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e1b2:	51                   	push   ecx
c000e1b3:	e8 38 23 ff ff       	call   c00004f0 <memset>
c000e1b8:	83 c4 0c             	add    esp,0xc
c000e1bb:	6b c7 27             	imul   eax,edi,0x27
c000e1be:	6a 27                	push   0x27
c000e1c0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000e1c7:	50                   	push   eax
c000e1c8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e1cc:	51                   	push   ecx
c000e1cd:	e8 ae 24 ff ff       	call   c0000680 <strncpy>
c000e1d2:	83 c4 0c             	add    esp,0xc
c000e1d5:	55                   	push   ebp
c000e1d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e1da:	52                   	push   edx
c000e1db:	56                   	push   esi
c000e1dc:	e8 93 fc ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e1e1:	eb 19                	jmp    c000e1fc <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000e1e3:	85 d2                	test   edx,edx
c000e1e5:	74 18                	je     c000e1ff <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000e1e7:	51                   	push   ecx
c000e1e8:	51                   	push   ecx
c000e1e9:	52                   	push   edx
c000e1ea:	56                   	push   esi
c000e1eb:	e8 c0 fc ff ff       	call   c000deb0 <CmFreeExtent(Reghive_Tag*, int)>
c000e1f0:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000e1f4:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000e1f8:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000e1fc:	83 c4 10             	add    esp,0x10
c000e1ff:	47                   	inc    edi
c000e200:	83 c3 03             	add    ebx,0x3
c000e203:	83 ff 07             	cmp    edi,0x7
c000e206:	0f 85 43 ff ff ff    	jne    c000e14f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000e20c:	50                   	push   eax
c000e20d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000e211:	50                   	push   eax
c000e212:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e219:	56                   	push   esi
c000e21a:	e8 55 fc ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e21f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000e225:	5b                   	pop    ebx
c000e226:	5e                   	pop    esi
c000e227:	5f                   	pop    edi
c000e228:	5d                   	pop    ebp
c000e229:	c3                   	ret    

c000e22a <CmGetMatch(char*, char*, bool, bool*)>:
c000e22a:	56                   	push   esi
c000e22b:	53                   	push   ebx
c000e22c:	50                   	push   eax
c000e22d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e231:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e236:	74 25                	je     c000e25d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000e238:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e23b:	31 db                	xor    ebx,ebx
c000e23d:	50                   	push   eax
c000e23e:	50                   	push   eax
c000e23f:	8d 04 9d 20 ce 02 c0 	lea    eax,[ebx*4-0x3ffd31e0]
c000e246:	50                   	push   eax
c000e247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e24b:	e8 00 25 ff ff       	call   c0000750 <strcmp>
c000e250:	83 c4 10             	add    esp,0x10
c000e253:	85 c0                	test   eax,eax
c000e255:	74 2e                	je     c000e285 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e257:	43                   	inc    ebx
c000e258:	83 fb 3f             	cmp    ebx,0x3f
c000e25b:	75 e0                	jne    c000e23d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000e25d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e260:	31 db                	xor    ebx,ebx
c000e262:	8d 04 9d 20 ce 02 c0 	lea    eax,[ebx*4-0x3ffd31e0]
c000e269:	51                   	push   ecx
c000e26a:	51                   	push   ecx
c000e26b:	50                   	push   eax
c000e26c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e270:	e8 db 24 ff ff       	call   c0000750 <strcmp>
c000e275:	83 c4 10             	add    esp,0x10
c000e278:	85 c0                	test   eax,eax
c000e27a:	74 09                	je     c000e285 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e27c:	43                   	inc    ebx
c000e27d:	83 fb 3f             	cmp    ebx,0x3f
c000e280:	75 e0                	jne    c000e262 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000e282:	83 cb ff             	or     ebx,0xffffffff
c000e285:	89 d8                	mov    eax,ebx
c000e287:	5a                   	pop    edx
c000e288:	5b                   	pop    ebx
c000e289:	5e                   	pop    esi
c000e28a:	c3                   	ret    

c000e28b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000e28b:	55                   	push   ebp
c000e28c:	31 c0                	xor    eax,eax
c000e28e:	57                   	push   edi
c000e28f:	56                   	push   esi
c000e290:	53                   	push   ebx
c000e291:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e295:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e299:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000e29b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e29f:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000e2a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2a6:	83 fd 1f             	cmp    ebp,0x1f
c000e2a9:	7f 0b                	jg     c000e2b6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000e2ab:	0f b6 c2             	movzx  eax,dl
c000e2ae:	d3 e0                	shl    eax,cl
c000e2b0:	09 07                	or     DWORD PTR [edi],eax
c000e2b2:	b0 01                	mov    al,0x1
c000e2b4:	01 33                	add    DWORD PTR [ebx],esi
c000e2b6:	5b                   	pop    ebx
c000e2b7:	5e                   	pop    esi
c000e2b8:	5f                   	pop    edi
c000e2b9:	5d                   	pop    ebp
c000e2ba:	c3                   	ret    

c000e2bb <CmGetShift(unsigned int*, int*, int, bool*)>:
c000e2bb:	57                   	push   edi
c000e2bc:	56                   	push   esi
c000e2bd:	53                   	push   ebx
c000e2be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e2c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e2c6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000e2ca:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e2ce:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000e2d0:	7c 17                	jl     c000e2e9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000e2d2:	8b 17                	mov    edx,DWORD PTR [edi]
c000e2d4:	b8 01 00 00 00       	mov    eax,0x1
c000e2d9:	d3 e0                	shl    eax,cl
c000e2db:	48                   	dec    eax
c000e2dc:	21 d0                	and    eax,edx
c000e2de:	d3 ea                	shr    edx,cl
c000e2e0:	89 17                	mov    DWORD PTR [edi],edx
c000e2e2:	29 0b                	sub    DWORD PTR [ebx],ecx
c000e2e4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e2e7:	eb 05                	jmp    c000e2ee <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000e2e9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e2ec:	31 c0                	xor    eax,eax
c000e2ee:	5b                   	pop    ebx
c000e2ef:	5e                   	pop    esi
c000e2f0:	5f                   	pop    edi
c000e2f1:	c3                   	ret    

c000e2f2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000e2f2:	83 ec 40             	sub    esp,0x40
c000e2f5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e2f9:	50                   	push   eax
c000e2fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e2fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e302:	e8 49 fa ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e307:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e30b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000e30f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000e313:	89 10                	mov    DWORD PTR [eax],edx
c000e315:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000e318:	83 c4 4c             	add    esp,0x4c
c000e31b:	c3                   	ret    

c000e31c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000e31c:	55                   	push   ebp
c000e31d:	57                   	push   edi
c000e31e:	56                   	push   esi
c000e31f:	53                   	push   ebx
c000e320:	83 ec 40             	sub    esp,0x40
c000e323:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000e327:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000e32b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000e32f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000e333:	53                   	push   ebx
c000e334:	56                   	push   esi
c000e335:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e339:	e8 12 fa ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e33e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000e342:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000e346:	83 c4 0c             	add    esp,0xc
c000e349:	53                   	push   ebx
c000e34a:	56                   	push   esi
c000e34b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e34f:	e8 20 fb ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e354:	83 c4 4c             	add    esp,0x4c
c000e357:	5b                   	pop    ebx
c000e358:	5e                   	pop    esi
c000e359:	5f                   	pop    edi
c000e35a:	5d                   	pop    ebp
c000e35b:	c3                   	ret    

c000e35c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000e35c:	55                   	push   ebp
c000e35d:	57                   	push   edi
c000e35e:	56                   	push   esi
c000e35f:	31 f6                	xor    esi,esi
c000e361:	53                   	push   ebx
c000e362:	31 db                	xor    ebx,ebx
c000e364:	83 ec 40             	sub    esp,0x40
c000e367:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e36f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e377:	6a 12                	push   0x12
c000e379:	68 ee 00 00 00       	push   0xee
c000e37e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e382:	e8 69 21 ff ff       	call   c00004f0 <memset>
c000e387:	83 c4 10             	add    esp,0x10
c000e38a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000e38e:	6a 08                	push   0x8
c000e390:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e394:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000e398:	50                   	push   eax
c000e399:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e39d:	55                   	push   ebp
c000e39e:	57                   	push   edi
c000e39f:	e8 e7 fe ff ff       	call   c000e28b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e3a4:	83 c4 10             	add    esp,0x10
c000e3a7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e3ab:	50                   	push   eax
c000e3ac:	6a 06                	push   0x6
c000e3ae:	55                   	push   ebp
c000e3af:	57                   	push   edi
c000e3b0:	e8 06 ff ff ff       	call   c000e2bb <CmGetShift(unsigned int*, int*, int, bool*)>
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e3bd:	74 07                	je     c000e3c6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000e3bf:	46                   	inc    esi
c000e3c0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000e3c4:	eb e1                	jmp    c000e3a7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000e3c6:	43                   	inc    ebx
c000e3c7:	83 fb 12             	cmp    ebx,0x12
c000e3ca:	75 c2                	jne    c000e38e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000e3cc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e3d0:	31 db                	xor    ebx,ebx
c000e3d2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000e3d5:	50                   	push   eax
c000e3d6:	50                   	push   eax
c000e3d7:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000e3dc:	43                   	inc    ebx
c000e3dd:	8d 04 85 20 ce 02 c0 	lea    eax,[eax*4-0x3ffd31e0]
c000e3e4:	50                   	push   eax
c000e3e5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e3e9:	e8 52 24 ff ff       	call   c0000840 <strcat>
c000e3ee:	83 c4 10             	add    esp,0x10
c000e3f1:	83 fb 18             	cmp    ebx,0x18
c000e3f4:	75 df                	jne    c000e3d5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000e3f6:	83 c4 3c             	add    esp,0x3c
c000e3f9:	31 c0                	xor    eax,eax
c000e3fb:	5b                   	pop    ebx
c000e3fc:	5e                   	pop    esi
c000e3fd:	5f                   	pop    edi
c000e3fe:	5d                   	pop    ebp
c000e3ff:	c3                   	ret    

c000e400 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000e400:	83 ec 40             	sub    esp,0x40
c000e403:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e407:	50                   	push   eax
c000e408:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e40c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e410:	e8 3b f9 ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e415:	58                   	pop    eax
c000e416:	5a                   	pop    edx
c000e417:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000e41b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000e41f:	50                   	push   eax
c000e420:	e8 37 ff ff ff       	call   c000e35c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000e425:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000e42a:	83 c4 4c             	add    esp,0x4c
c000e42d:	c3                   	ret    

c000e42e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000e42e:	55                   	push   ebp
c000e42f:	57                   	push   edi
c000e430:	56                   	push   esi
c000e431:	53                   	push   ebx
c000e432:	31 db                	xor    ebx,ebx
c000e434:	83 ec 70             	sub    esp,0x70
c000e437:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000e43e:	6a 30                	push   0x30
c000e440:	6a 00                	push   0x0
c000e442:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e446:	56                   	push   esi
c000e447:	e8 a4 20 ff ff       	call   c00004f0 <memset>
c000e44c:	83 c4 10             	add    esp,0x10
c000e44f:	83 ec 0c             	sub    esp,0xc
c000e452:	57                   	push   edi
c000e453:	e8 18 21 ff ff       	call   c0000570 <strlen>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	39 d8                	cmp    eax,ebx
c000e45d:	76 16                	jbe    c000e475 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000e45f:	83 ec 0c             	sub    esp,0xc
c000e462:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000e466:	50                   	push   eax
c000e467:	e8 c4 24 ff ff       	call   c0000930 <toupper>
c000e46c:	83 c4 10             	add    esp,0x10
c000e46f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e472:	43                   	inc    ebx
c000e473:	eb da                	jmp    c000e44f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e475:	31 f6                	xor    esi,esi
c000e477:	52                   	push   edx
c000e478:	31 ff                	xor    edi,edi
c000e47a:	6a 18                	push   0x18
c000e47c:	6a 3f                	push   0x3f
c000e47e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e482:	50                   	push   eax
c000e483:	e8 68 20 ff ff       	call   c00004f0 <memset>
c000e488:	83 c4 10             	add    esp,0x10
c000e48b:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000e48f:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000e493:	84 c0                	test   al,al
c000e495:	0f 84 b0 00 00 00    	je     c000e54b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000e49b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e49f:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000e4a4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000e4a8:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000e4ad:	8d 6e 01             	lea    ebp,[esi+0x1]
c000e4b0:	83 ec 0c             	sub    esp,0xc
c000e4b3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000e4b7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000e4bb:	53                   	push   ebx
c000e4bc:	e8 af 20 ff ff       	call   c0000570 <strlen>
c000e4c1:	83 c4 10             	add    esp,0x10
c000e4c4:	85 c0                	test   eax,eax
c000e4c6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e4ca:	74 0b                	je     c000e4d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000e4cc:	50                   	push   eax
c000e4cd:	6a 01                	push   0x1
c000e4cf:	53                   	push   ebx
c000e4d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e4d4:	50                   	push   eax
c000e4d5:	eb 0a                	jmp    c000e4e1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000e4d7:	50                   	push   eax
c000e4d8:	6a 00                	push   0x0
c000e4da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000e4de:	50                   	push   eax
c000e4df:	6a 00                	push   0x0
c000e4e1:	e8 44 fd ff ff       	call   c000e22a <CmGetMatch(char*, char*, bool, bool*)>
c000e4e6:	83 c4 10             	add    esp,0x10
c000e4e9:	83 f8 ff             	cmp    eax,0xffffffff
c000e4ec:	75 1a                	jne    c000e508 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000e4ee:	83 ec 0c             	sub    esp,0xc
c000e4f1:	68 40 9b 02 c0       	push   0xc0029b40
c000e4f6:	e8 15 20 00 00       	call   c0010510 <KePanic(char const*)>
c000e4fb:	83 c4 10             	add    esp,0x10
c000e4fe:	b8 02 00 00 00       	mov    eax,0x2
c000e503:	e9 bc 00 00 00       	jmp    c000e5c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e508:	83 ff 18             	cmp    edi,0x18
c000e50b:	75 1a                	jne    c000e527 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000e50d:	83 ec 0c             	sub    esp,0xc
c000e510:	68 55 9b 02 c0       	push   0xc0029b55
c000e515:	e8 f6 1f 00 00       	call   c0010510 <KePanic(char const*)>
c000e51a:	83 c4 10             	add    esp,0x10
c000e51d:	b8 01 00 00 00       	mov    eax,0x1
c000e522:	e9 9d 00 00 00       	jmp    c000e5c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e527:	47                   	inc    edi
c000e528:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e52d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000e531:	74 02                	je     c000e535 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000e533:	89 ee                	mov    esi,ebp
c000e535:	83 ec 0c             	sub    esp,0xc
c000e538:	53                   	push   ebx
c000e539:	e8 32 20 ff ff       	call   c0000570 <strlen>
c000e53e:	83 c4 10             	add    esp,0x10
c000e541:	85 c0                	test   eax,eax
c000e543:	74 06                	je     c000e54b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000e545:	46                   	inc    esi
c000e546:	e9 40 ff ff ff       	jmp    c000e48b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000e54b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e553:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e55b:	31 f6                	xor    esi,esi
c000e55d:	50                   	push   eax
c000e55e:	31 ff                	xor    edi,edi
c000e560:	6a 12                	push   0x12
c000e562:	68 ee 00 00 00       	push   0xee
c000e567:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000e56e:	e8 7d 1f ff ff       	call   c00004f0 <memset>
c000e573:	83 c4 10             	add    esp,0x10
c000e576:	83 fe 17             	cmp    esi,0x17
c000e579:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000e57d:	7e 26                	jle    c000e5a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000e57f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e583:	50                   	push   eax
c000e584:	6a 08                	push   0x8
c000e586:	55                   	push   ebp
c000e587:	53                   	push   ebx
c000e588:	e8 2e fd ff ff       	call   c000e2bb <CmGetShift(unsigned int*, int*, int, bool*)>
c000e58d:	83 c4 10             	add    esp,0x10
c000e590:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e595:	74 26                	je     c000e5bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000e597:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000e59e:	4e                   	dec    esi
c000e59f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000e5a2:	47                   	inc    edi
c000e5a3:	eb 1c                	jmp    c000e5c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000e5a5:	6a 06                	push   0x6
c000e5a7:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000e5ac:	50                   	push   eax
c000e5ad:	55                   	push   ebp
c000e5ae:	53                   	push   ebx
c000e5af:	e8 d7 fc ff ff       	call   c000e28b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e5b4:	83 c4 10             	add    esp,0x10
c000e5b7:	84 c0                	test   al,al
c000e5b9:	75 06                	jne    c000e5c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000e5bb:	eb c2                	jmp    c000e57f <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000e5bd:	31 c0                	xor    eax,eax
c000e5bf:	eb 03                	jmp    c000e5c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e5c1:	46                   	inc    esi
c000e5c2:	eb b2                	jmp    c000e576 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000e5c4:	83 c4 6c             	add    esp,0x6c
c000e5c7:	5b                   	pop    ebx
c000e5c8:	5e                   	pop    esi
c000e5c9:	5f                   	pop    edi
c000e5ca:	5d                   	pop    ebp
c000e5cb:	c3                   	ret    

c000e5cc <CmCreateString(Reghive_Tag*, int, char const*)>:
c000e5cc:	53                   	push   ebx
c000e5cd:	83 ec 3c             	sub    esp,0x3c
c000e5d0:	6a 2b                	push   0x2b
c000e5d2:	6a 00                	push   0x0
c000e5d4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e5d8:	53                   	push   ebx
c000e5d9:	e8 12 1f ff ff       	call   c00004f0 <memset>
c000e5de:	58                   	pop    eax
c000e5df:	5a                   	pop    edx
c000e5e0:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e5e4:	50                   	push   eax
c000e5e5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e5e9:	e8 40 fe ff ff       	call   c000e42e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e5ee:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000e5f3:	83 c4 0c             	add    esp,0xc
c000e5f6:	6a 15                	push   0x15
c000e5f8:	6a 00                	push   0x0
c000e5fa:	8d 44 24 27          	lea    eax,[esp+0x27]
c000e5fe:	50                   	push   eax
c000e5ff:	e8 ec 1e ff ff       	call   c00004f0 <memset>
c000e604:	53                   	push   ebx
c000e605:	6a 00                	push   0x0
c000e607:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e60b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e60f:	e8 e6 f9 ff ff       	call   c000dffa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e614:	83 c4 58             	add    esp,0x58
c000e617:	5b                   	pop    ebx
c000e618:	c3                   	ret    

c000e619 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000e619:	56                   	push   esi
c000e61a:	53                   	push   ebx
c000e61b:	83 ec 48             	sub    esp,0x48
c000e61e:	6a 12                	push   0x12
c000e620:	68 ff 00 00 00       	push   0xff
c000e625:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000e629:	56                   	push   esi
c000e62a:	e8 c1 1e ff ff       	call   c00004f0 <memset>
c000e62f:	5a                   	pop    edx
c000e630:	59                   	pop    ecx
c000e631:	56                   	push   esi
c000e632:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e636:	e8 f3 fd ff ff       	call   c000e42e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e63b:	83 c4 10             	add    esp,0x10
c000e63e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e642:	85 db                	test   ebx,ebx
c000e644:	74 42                	je     c000e688 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000e646:	50                   	push   eax
c000e647:	8d 44 24 19          	lea    eax,[esp+0x19]
c000e64b:	50                   	push   eax
c000e64c:	53                   	push   ebx
c000e64d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e651:	e8 fa f6 ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e656:	83 c4 0c             	add    esp,0xc
c000e659:	6a 12                	push   0x12
c000e65b:	8d 44 24 21          	lea    eax,[esp+0x21]
c000e65f:	50                   	push   eax
c000e660:	56                   	push   esi
c000e661:	e8 1a 1d ff ff       	call   c0000380 <memcmp>
c000e666:	83 c4 10             	add    esp,0x10
c000e669:	85 c0                	test   eax,eax
c000e66b:	74 1e                	je     c000e68b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000e66d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000e672:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000e677:	c1 e3 08             	shl    ebx,0x8
c000e67a:	09 d8                	or     eax,ebx
c000e67c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000e681:	c1 e3 10             	shl    ebx,0x10
c000e684:	09 c3                	or     ebx,eax
c000e686:	eb ba                	jmp    c000e642 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000e688:	83 cb ff             	or     ebx,0xffffffff
c000e68b:	89 d8                	mov    eax,ebx
c000e68d:	83 c4 44             	add    esp,0x44
c000e690:	5b                   	pop    ebx
c000e691:	5e                   	pop    esi
c000e692:	c3                   	ret    

c000e693 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000e693:	57                   	push   edi
c000e694:	56                   	push   esi
c000e695:	53                   	push   ebx
c000e696:	83 ec 34             	sub    esp,0x34
c000e699:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000e69d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000e6a1:	6a 2b                	push   0x2b
c000e6a3:	6a 00                	push   0x0
c000e6a5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e6a9:	53                   	push   ebx
c000e6aa:	e8 41 1e ff ff       	call   c00004f0 <memset>
c000e6af:	58                   	pop    eax
c000e6b0:	5a                   	pop    edx
c000e6b1:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e6b5:	50                   	push   eax
c000e6b6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e6ba:	e8 6f fd ff ff       	call   c000e42e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e6bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e6c3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000e6c7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000e6cb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000e6cf:	53                   	push   ebx
c000e6d0:	6a 00                	push   0x0
c000e6d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e6d6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e6da:	e8 1b f9 ff ff       	call   c000dffa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e6df:	83 c4 50             	add    esp,0x50
c000e6e2:	5b                   	pop    ebx
c000e6e3:	5e                   	pop    esi
c000e6e4:	5f                   	pop    edi
c000e6e5:	c3                   	ret    

c000e6e6 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000e6e6:	55                   	push   ebp
c000e6e7:	57                   	push   edi
c000e6e8:	56                   	push   esi
c000e6e9:	53                   	push   ebx
c000e6ea:	83 ec 40             	sub    esp,0x40
c000e6ed:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000e6f1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e6f5:	6a 2b                	push   0x2b
c000e6f7:	6a 00                	push   0x0
c000e6f9:	8d 74 24 11          	lea    esi,[esp+0x11]
c000e6fd:	56                   	push   esi
c000e6fe:	e8 ed 1d ff ff       	call   c00004f0 <memset>
c000e703:	5f                   	pop    edi
c000e704:	89 ef                	mov    edi,ebp
c000e706:	58                   	pop    eax
c000e707:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e70b:	50                   	push   eax
c000e70c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e710:	e8 19 fd ff ff       	call   c000e42e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e715:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000e71a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000e71f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000e724:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000e729:	83 c4 10             	add    esp,0x10
c000e72c:	85 ed                	test   ebp,ebp
c000e72e:	74 14                	je     c000e744 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e730:	51                   	push   ecx
c000e731:	51                   	push   ecx
c000e732:	57                   	push   edi
c000e733:	53                   	push   ebx
c000e734:	e8 09 f7 ff ff       	call   c000de42 <CmGetNext(Reghive_Tag*, int)>
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	85 c0                	test   eax,eax
c000e73e:	74 04                	je     c000e744 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e740:	89 c7                	mov    edi,eax
c000e742:	eb e8                	jmp    c000e72c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000e744:	56                   	push   esi
c000e745:	6a 00                	push   0x0
c000e747:	57                   	push   edi
c000e748:	53                   	push   ebx
c000e749:	e8 ac f8 ff ff       	call   c000dffa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e74e:	83 c4 0c             	add    esp,0xc
c000e751:	89 c7                	mov    edi,eax
c000e753:	56                   	push   esi
c000e754:	50                   	push   eax
c000e755:	53                   	push   ebx
c000e756:	e8 f5 f5 ff ff       	call   c000dd50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e75b:	58                   	pop    eax
c000e75c:	5a                   	pop    edx
c000e75d:	6a 6c                	push   0x6c
c000e75f:	6a 00                	push   0x0
c000e761:	6a 00                	push   0x0
c000e763:	68 66 9b 02 c0       	push   0xc0029b66
c000e768:	57                   	push   edi
c000e769:	53                   	push   ebx
c000e76a:	e8 24 ff ff ff       	call   c000e693 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000e76f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000e773:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000e777:	c1 e8 10             	shr    eax,0x10
c000e77a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000e77e:	83 c4 1c             	add    esp,0x1c
c000e781:	56                   	push   esi
c000e782:	57                   	push   edi
c000e783:	53                   	push   ebx
c000e784:	e8 eb f6 ff ff       	call   c000de74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e789:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000e78e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000e793:	c1 e0 08             	shl    eax,0x8
c000e796:	09 c2                	or     edx,eax
c000e798:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000e79d:	83 c4 4c             	add    esp,0x4c
c000e7a0:	c1 e0 10             	shl    eax,0x10
c000e7a3:	5b                   	pop    ebx
c000e7a4:	09 d0                	or     eax,edx
c000e7a6:	5e                   	pop    esi
c000e7a7:	5f                   	pop    edi
c000e7a8:	5d                   	pop    ebp
c000e7a9:	c3                   	ret    

c000e7aa <zStrtok(char*, char const*)>:
c000e7aa:	55                   	push   ebp
c000e7ab:	57                   	push   edi
c000e7ac:	56                   	push   esi
c000e7ad:	53                   	push   ebx
c000e7ae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e7b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7b6:	85 db                	test   ebx,ebx
c000e7b8:	74 2f                	je     c000e7e9 <zStrtok(char*, char const*)+0x3f>
c000e7ba:	85 c0                	test   eax,eax
c000e7bc:	75 09                	jne    c000e7c7 <zStrtok(char*, char const*)+0x1d>
c000e7be:	a1 04 31 03 c0       	mov    eax,ds:0xc0033104
c000e7c3:	85 c0                	test   eax,eax
c000e7c5:	74 50                	je     c000e817 <zStrtok(char*, char const*)+0x6d>
c000e7c7:	31 c9                	xor    ecx,ecx
c000e7c9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000e7cd:	74 03                	je     c000e7d2 <zStrtok(char*, char const*)+0x28>
c000e7cf:	41                   	inc    ecx
c000e7d0:	eb f7                	jmp    c000e7c9 <zStrtok(char*, char const*)+0x1f>
c000e7d2:	31 d2                	xor    edx,edx
c000e7d4:	39 ca                	cmp    edx,ecx
c000e7d6:	74 15                	je     c000e7ed <zStrtok(char*, char const*)+0x43>
c000e7d8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000e7dc:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000e7df:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e7e2:	39 ee                	cmp    esi,ebp
c000e7e4:	74 13                	je     c000e7f9 <zStrtok(char*, char const*)+0x4f>
c000e7e6:	42                   	inc    edx
c000e7e7:	eb eb                	jmp    c000e7d4 <zStrtok(char*, char const*)+0x2a>
c000e7e9:	31 c0                	xor    eax,eax
c000e7eb:	eb 2a                	jmp    c000e817 <zStrtok(char*, char const*)+0x6d>
c000e7ed:	c7 05 04 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033104,0x0
c000e7f7:	eb 1e                	jmp    c000e817 <zStrtok(char*, char const*)+0x6d>
c000e7f9:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e7fc:	39 ce                	cmp    esi,ecx
c000e7fe:	75 0a                	jne    c000e80a <zStrtok(char*, char const*)+0x60>
c000e800:	40                   	inc    eax
c000e801:	a3 04 31 03 c0       	mov    ds:0xc0033104,eax
c000e806:	89 d8                	mov    eax,ebx
c000e808:	eb 0d                	jmp    c000e817 <zStrtok(char*, char const*)+0x6d>
c000e80a:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e80e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e811:	89 15 04 31 03 c0    	mov    DWORD PTR ds:0xc0033104,edx
c000e817:	5b                   	pop    ebx
c000e818:	5e                   	pop    esi
c000e819:	5f                   	pop    edi
c000e81a:	5d                   	pop    ebp
c000e81b:	c3                   	ret    

c000e81c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e81c:	57                   	push   edi
c000e81d:	56                   	push   esi
c000e81e:	53                   	push   ebx
c000e81f:	81 ec 08 01 00 00    	sub    esp,0x108
c000e825:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e82c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e833:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e837:	53                   	push   ebx
c000e838:	e8 03 1e ff ff       	call   c0000640 <strcpy>
c000e83d:	59                   	pop    ecx
c000e83e:	5e                   	pop    esi
c000e83f:	68 fe a9 02 c0       	push   0xc002a9fe
c000e844:	53                   	push   ebx
c000e845:	bb 01 00 00 00       	mov    ebx,0x1
c000e84a:	e8 5b ff ff ff       	call   c000e7aa <zStrtok(char*, char const*)>
c000e84f:	83 c4 10             	add    esp,0x10
c000e852:	85 c0                	test   eax,eax
c000e854:	74 3b                	je     c000e891 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e856:	52                   	push   edx
c000e857:	50                   	push   eax
c000e858:	6a 01                	push   0x1
c000e85a:	57                   	push   edi
c000e85b:	e8 b9 fd ff ff       	call   c000e619 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e860:	59                   	pop    ecx
c000e861:	89 c3                	mov    ebx,eax
c000e863:	5e                   	pop    esi
c000e864:	68 fe a9 02 c0       	push   0xc002a9fe
c000e869:	6a 00                	push   0x0
c000e86b:	e8 3a ff ff ff       	call   c000e7aa <zStrtok(char*, char const*)>
c000e870:	83 c4 10             	add    esp,0x10
c000e873:	89 c6                	mov    esi,eax
c000e875:	85 c0                	test   eax,eax
c000e877:	74 18                	je     c000e891 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e879:	52                   	push   edx
c000e87a:	52                   	push   edx
c000e87b:	53                   	push   ebx
c000e87c:	57                   	push   edi
c000e87d:	e8 81 f5 ff ff       	call   c000de03 <CmEnterDirectory(Reghive_Tag*, int)>
c000e882:	83 c4 10             	add    esp,0x10
c000e885:	89 c3                	mov    ebx,eax
c000e887:	83 f8 ff             	cmp    eax,0xffffffff
c000e88a:	74 05                	je     c000e891 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e88c:	50                   	push   eax
c000e88d:	56                   	push   esi
c000e88e:	53                   	push   ebx
c000e88f:	eb c9                	jmp    c000e85a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e891:	81 c4 00 01 00 00    	add    esp,0x100
c000e897:	89 d8                	mov    eax,ebx
c000e899:	5b                   	pop    ebx
c000e89a:	5e                   	pop    esi
c000e89b:	5f                   	pop    edi
c000e89c:	c3                   	ret    
c000e89d:	90                   	nop

c000e89e <Computer::close(int, int, void*)>:
c000e89e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8a3:	c3                   	ret    

c000e8a4 <Computer::Computer()>:
c000e8a4:	83 ec 0c             	sub    esp,0xc
c000e8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ab:	83 ec 08             	sub    esp,0x8
c000e8ae:	68 a8 8e 02 c0       	push   0xc0028ea8
c000e8b3:	50                   	push   eax
c000e8b4:	e8 49 bb ff ff       	call   c000a402 <Device::Device(char const*)>
c000e8b9:	83 c4 10             	add    esp,0x10
c000e8bc:	ba b8 9b 02 c0       	mov    edx,0xc0029bb8
c000e8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c5:	89 10                	mov    DWORD PTR [eax],edx
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e8e3:	90                   	nop
c000e8e4:	83 c4 0c             	add    esp,0xc
c000e8e7:	c3                   	ret    

c000e8e8 <Computer::open(int, int, void*)>:
c000e8e8:	56                   	push   esi
c000e8e9:	53                   	push   ebx
c000e8ea:	83 ec 04             	sub    esp,0x4
c000e8ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e8f1:	39 1d 08 31 03 c0    	cmp    DWORD PTR ds:0xc0033108,ebx
c000e8f7:	74 10                	je     c000e909 <Computer::open(int, int, void*)+0x21>
c000e8f9:	83 ec 0c             	sub    esp,0xc
c000e8fc:	68 84 9b 02 c0       	push   0xc0029b84
c000e901:	e8 0a 1c 00 00       	call   c0010510 <KePanic(char const*)>
c000e906:	83 c4 10             	add    esp,0x10
c000e909:	83 ec 0c             	sub    esp,0xc
c000e90c:	68 78 11 00 00       	push   0x1178
c000e911:	e8 a5 17 00 00       	call   c00100bb <malloc>
c000e916:	89 04 24             	mov    DWORD PTR [esp],eax
c000e919:	89 c6                	mov    esi,eax
c000e91b:	e8 e8 ca 00 00       	call   c001b408 <CPU::CPU()>
c000e920:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e924:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e92a:	50                   	push   eax
c000e92b:	6a 00                	push   0x0
c000e92d:	6a 00                	push   0x0
c000e92f:	56                   	push   esi
c000e930:	e8 b5 cc 00 00       	call   c001b5ea <CPU::open(int, int, void*)>
c000e935:	83 c4 14             	add    esp,0x14
c000e938:	68 6c 9b 02 c0       	push   0xc0029b6c
c000e93d:	e8 db f1 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c000e942:	e8 dd 8b ff ff       	call   c0007524 <KeSetupDeviceTree()>
c000e947:	e8 d9 8c ff ff       	call   c0007625 <KePrintDeviceTree()>
c000e94c:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e953:	e8 63 17 00 00       	call   c00100bb <malloc>
c000e958:	89 04 24             	mov    DWORD PTR [esp],eax
c000e95b:	89 c6                	mov    esi,eax
c000e95d:	e8 4a e7 ff ff       	call   c000d0ac <ACPI::ACPI()>
c000e962:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e968:	5a                   	pop    edx
c000e969:	59                   	pop    ecx
c000e96a:	56                   	push   esi
c000e96b:	53                   	push   ebx
c000e96c:	e8 2f b9 ff ff       	call   c000a2a0 <Device::addChild(Device*)>
c000e971:	5e                   	pop    esi
c000e972:	58                   	pop    eax
c000e973:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e979:	50                   	push   eax
c000e97a:	53                   	push   ebx
c000e97b:	e8 20 b9 ff ff       	call   c000a2a0 <Device::addChild(Device*)>
c000e980:	83 c4 14             	add    esp,0x14
c000e983:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e988:	5b                   	pop    ebx
c000e989:	5e                   	pop    esi
c000e98a:	c3                   	ret    

c000e98b <KeCalculateCRC32(unsigned char*, int)>:
c000e98b:	53                   	push   ebx
c000e98c:	83 c8 ff             	or     eax,0xffffffff
c000e98f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e993:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e997:	01 cb                	add    ebx,ecx
c000e999:	39 d9                	cmp    ecx,ebx
c000e99b:	74 15                	je     c000e9b2 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e99d:	41                   	inc    ecx
c000e99e:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e9a1:	31 c2                	xor    edx,eax
c000e9a3:	c1 e8 08             	shr    eax,0x8
c000e9a6:	0f b6 d2             	movzx  edx,dl
c000e9a9:	33 04 95 20 cf 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd30e0]
c000e9b0:	eb e7                	jmp    c000e999 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e9b2:	f7 d0                	not    eax
c000e9b4:	5b                   	pop    ebx
c000e9b5:	c3                   	ret    

c000e9b6 <EnvVarContainer::getEnv(char const*)>:
c000e9b6:	57                   	push   edi
c000e9b7:	56                   	push   esi
c000e9b8:	53                   	push   ebx
c000e9b9:	31 db                	xor    ebx,ebx
c000e9bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e9bf:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e9c1:	7e 2b                	jle    c000e9ee <EnvVarContainer::getEnv(char const*)+0x38>
c000e9c3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e9ca:	50                   	push   eax
c000e9cb:	50                   	push   eax
c000e9cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e9cf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e9d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e9d6:	e8 75 1d ff ff       	call   c0000750 <strcmp>
c000e9db:	83 c4 10             	add    esp,0x10
c000e9de:	85 c0                	test   eax,eax
c000e9e0:	75 09                	jne    c000e9eb <EnvVarContainer::getEnv(char const*)+0x35>
c000e9e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e9e5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e9e9:	eb 05                	jmp    c000e9f0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e9eb:	43                   	inc    ebx
c000e9ec:	eb d1                	jmp    c000e9bf <EnvVarContainer::getEnv(char const*)+0x9>
c000e9ee:	31 c0                	xor    eax,eax
c000e9f0:	5b                   	pop    ebx
c000e9f1:	5e                   	pop    esi
c000e9f2:	5f                   	pop    edi
c000e9f3:	c3                   	ret    

c000e9f4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e9f4:	55                   	push   ebp
c000e9f5:	57                   	push   edi
c000e9f6:	56                   	push   esi
c000e9f7:	53                   	push   ebx
c000e9f8:	83 ec 28             	sub    esp,0x28
c000e9fb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e9ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ea03:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ea07:	56                   	push   esi
c000ea08:	e8 63 1b ff ff       	call   c0000570 <strlen>
c000ea0d:	40                   	inc    eax
c000ea0e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ea11:	e8 a5 16 00 00       	call   c00100bb <malloc>
c000ea16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ea19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea1d:	e8 4e 1b ff ff       	call   c0000570 <strlen>
c000ea22:	40                   	inc    eax
c000ea23:	89 04 24             	mov    DWORD PTR [esp],eax
c000ea26:	e8 90 16 00 00       	call   c00100bb <malloc>
c000ea2b:	89 34 24             	mov    DWORD PTR [esp],esi
c000ea2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea32:	e8 39 1b ff ff       	call   c0000570 <strlen>
c000ea37:	83 c4 0c             	add    esp,0xc
c000ea3a:	40                   	inc    eax
c000ea3b:	50                   	push   eax
c000ea3c:	6a 00                	push   0x0
c000ea3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea42:	e8 a9 1a ff ff       	call   c00004f0 <memset>
c000ea47:	89 34 24             	mov    DWORD PTR [esp],esi
c000ea4a:	e8 21 1b ff ff       	call   c0000570 <strlen>
c000ea4f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ea53:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ea58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ea5b:	89 de                	mov    esi,ebx
c000ea5d:	e8 0e 1b ff ff       	call   c0000570 <strlen>
c000ea62:	83 c4 0c             	add    esp,0xc
c000ea65:	40                   	inc    eax
c000ea66:	50                   	push   eax
c000ea67:	6a 00                	push   0x0
c000ea69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea6d:	e8 7e 1a ff ff       	call   c00004f0 <memset>
c000ea72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ea75:	e8 f6 1a ff ff       	call   c0000570 <strlen>
c000ea7a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ea7e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ea83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea86:	40                   	inc    eax
c000ea87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ea8a:	c1 e0 03             	shl    eax,0x3
c000ea8d:	5a                   	pop    edx
c000ea8e:	59                   	pop    ecx
c000ea8f:	50                   	push   eax
c000ea90:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ea93:	e8 0f 16 00 00       	call   c00100a7 <realloc>
c000ea98:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ea9f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000eaa2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000eaa6:	b9 08 00 00 00       	mov    ecx,0x8
c000eaab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eaad:	83 c4 2c             	add    esp,0x2c
c000eab0:	5b                   	pop    ebx
c000eab1:	5e                   	pop    esi
c000eab2:	5f                   	pop    edi
c000eab3:	5d                   	pop    ebp
c000eab4:	c3                   	ret    
c000eab5:	90                   	nop

c000eab6 <EnvVarContainer::deleteEnv(char const*)>:
c000eab6:	c3                   	ret    
c000eab7:	90                   	nop

c000eab8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000eab8:	55                   	push   ebp
c000eab9:	57                   	push   edi
c000eaba:	56                   	push   esi
c000eabb:	53                   	push   ebx
c000eabc:	81 ec 38 01 00 00    	sub    esp,0x138
c000eac2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000eac9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ead0:	68 14 01 00 00       	push   0x114
c000ead5:	e8 e1 15 00 00       	call   c00100bb <malloc>
c000eada:	83 c4 0c             	add    esp,0xc
c000eadd:	89 c3                	mov    ebx,eax
c000eadf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eae2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000eae9:	50                   	push   eax
c000eaea:	e8 e7 9e ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c000eaef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eaf2:	e8 c1 a1 ff ff       	call   c0008cb8 <File::exists()>
c000eaf7:	83 c4 10             	add    esp,0x10
c000eafa:	84 c0                	test   al,al
c000eafc:	75 31                	jne    c000eb2f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000eafe:	50                   	push   eax
c000eaff:	50                   	push   eax
c000eb00:	6a 12                	push   0x12
c000eb02:	53                   	push   ebx
c000eb03:	e8 ec 9e ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c000eb08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000eb0a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000eb0d:	89 34 24             	mov    DWORD PTR [esp],esi
c000eb10:	e8 5b 1a ff ff       	call   c0000570 <strlen>
c000eb15:	5a                   	pop    edx
c000eb16:	31 d2                	xor    edx,edx
c000eb18:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000eb1c:	51                   	push   ecx
c000eb1d:	56                   	push   esi
c000eb1e:	52                   	push   edx
c000eb1f:	50                   	push   eax
c000eb20:	53                   	push   ebx
c000eb21:	ff d7                	call   edi
c000eb23:	83 c4 14             	add    esp,0x14
c000eb26:	53                   	push   ebx
c000eb27:	e8 26 9f ff ff       	call   c0008a52 <File::close()>
c000eb2c:	83 c4 10             	add    esp,0x10
c000eb2f:	56                   	push   esi
c000eb30:	31 f6                	xor    esi,esi
c000eb32:	68 00 01 00 00       	push   0x100
c000eb37:	6a 00                	push   0x0
c000eb39:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000eb3d:	50                   	push   eax
c000eb3e:	e8 ad 19 ff ff       	call   c00004f0 <memset>
c000eb43:	5f                   	pop    edi
c000eb44:	58                   	pop    eax
c000eb45:	6a 01                	push   0x1
c000eb47:	53                   	push   ebx
c000eb48:	e8 a7 9e ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c000eb4d:	83 c4 10             	add    esp,0x10
c000eb50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb58:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	8b 03                	mov    eax,DWORD PTR [ebx]
c000eb65:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000eb69:	51                   	push   ecx
c000eb6a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000eb6e:	52                   	push   edx
c000eb6f:	6a 00                	push   0x0
c000eb71:	6a 01                	push   0x1
c000eb73:	53                   	push   ebx
c000eb74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000eb77:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000eb7c:	83 c4 20             	add    esp,0x20
c000eb7f:	89 c2                	mov    edx,eax
c000eb81:	85 c0                	test   eax,eax
c000eb83:	0f 84 36 01 00 00    	je     c000ecbf <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000eb89:	83 f8 0d             	cmp    eax,0xd
c000eb8c:	0f 84 22 01 00 00    	je     c000ecb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eb92:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000eb97:	0f 84 f0 00 00 00    	je     c000ec8d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000eb9d:	83 f8 0a             	cmp    eax,0xa
c000eba0:	74 13                	je     c000ebb5 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000eba2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000eba7:	74 0c                	je     c000ebb5 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000eba9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ebaf:	0f 8e f6 00 00 00    	jle    c000ecab <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000ebb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebb9:	83 ec 0c             	sub    esp,0xc
c000ebbc:	8d 78 01             	lea    edi,[eax+0x1]
c000ebbf:	57                   	push   edi
c000ebc0:	e8 f6 14 00 00       	call   c00100bb <malloc>
c000ebc5:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ebc9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ebcd:	8d 56 04             	lea    edx,[esi+0x4]
c000ebd0:	89 14 24             	mov    DWORD PTR [esp],edx
c000ebd3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ebd7:	e8 df 14 00 00       	call   c00100bb <malloc>
c000ebdc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ebe0:	83 c4 0c             	add    esp,0xc
c000ebe3:	57                   	push   edi
c000ebe4:	6a 00                	push   0x0
c000ebe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ebea:	e8 01 19 ff ff       	call   c00004f0 <memset>
c000ebef:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ebf3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ebf7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ebfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ebfd:	83 c4 0c             	add    esp,0xc
c000ec00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ec04:	52                   	push   edx
c000ec05:	6a 00                	push   0x0
c000ec07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ec0b:	e8 e0 18 ff ff       	call   c00004f0 <memset>
c000ec10:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ec14:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ec18:	89 34 24             	mov    DWORD PTR [esp],esi
c000ec1b:	e8 50 19 ff ff       	call   c0000570 <strlen>
c000ec20:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ec24:	89 c1                	mov    ecx,eax
c000ec26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ec28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec2b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ec2e:	40                   	inc    eax
c000ec2f:	83 c4 10             	add    esp,0x10
c000ec32:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ec35:	85 d2                	test   edx,edx
c000ec37:	75 0c                	jne    c000ec45 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000ec39:	83 ec 0c             	sub    esp,0xc
c000ec3c:	6a 08                	push   0x8
c000ec3e:	e8 78 14 00 00       	call   c00100bb <malloc>
c000ec43:	eb 0c                	jmp    c000ec51 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000ec45:	c1 e0 03             	shl    eax,0x3
c000ec48:	51                   	push   ecx
c000ec49:	51                   	push   ecx
c000ec4a:	50                   	push   eax
c000ec4b:	52                   	push   edx
c000ec4c:	e8 56 14 00 00       	call   c00100a7 <realloc>
c000ec51:	83 c4 10             	add    esp,0x10
c000ec54:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ec57:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ec5a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ec5d:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ec61:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ec65:	b9 08 00 00 00       	mov    ecx,0x8
c000ec6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ec6c:	31 f6                	xor    esi,esi
c000ec6e:	50                   	push   eax
c000ec6f:	68 00 01 00 00       	push   0x100
c000ec74:	6a 00                	push   0x0
c000ec76:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ec7a:	50                   	push   eax
c000ec7b:	e8 70 18 ff ff       	call   c00004f0 <memset>
c000ec80:	83 c4 10             	add    esp,0x10
c000ec83:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ec8b:	eb 27                	jmp    c000ecb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000ec8d:	83 f8 3d             	cmp    eax,0x3d
c000ec90:	74 1e                	je     c000ecb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000ec92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ec98:	7f 07                	jg     c000eca1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000ec9a:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000ec9e:	46                   	inc    esi
c000ec9f:	eb 13                	jmp    c000ecb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eca1:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000eca9:	eb 09                	jmp    c000ecb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000ecab:	83 f8 3d             	cmp    eax,0x3d
c000ecae:	75 ea                	jne    c000ec9a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000ecb0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ecb4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ecb9:	0f 85 99 fe ff ff    	jne    c000eb58 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ecbf:	83 ec 0c             	sub    esp,0xc
c000ecc2:	53                   	push   ebx
c000ecc3:	e8 8a 9d ff ff       	call   c0008a52 <File::close()>
c000ecc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ecca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eccd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ecd0:	81 c4 3c 01 00 00    	add    esp,0x13c
c000ecd6:	5b                   	pop    ebx
c000ecd7:	5e                   	pop    esi
c000ecd8:	5f                   	pop    edi
c000ecd9:	5d                   	pop    ebp
c000ecda:	c3                   	ret    
c000ecdb:	90                   	nop

c000ecdc <EnvVarContainer::__loadSystem()>:
c000ecdc:	83 ec 10             	sub    esp,0x10
c000ecdf:	68 20 d3 02 c0       	push   0xc002d320
c000ece4:	68 dc 9b 02 c0       	push   0xc0029bdc
c000ece9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eced:	e8 c6 fd ff ff       	call   c000eab8 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ecf2:	83 c4 1c             	add    esp,0x1c
c000ecf5:	c3                   	ret    

c000ecf6 <EnvVarContainer::__loadUser()>:
c000ecf6:	c3                   	ret    
c000ecf7:	90                   	nop

c000ecf8 <EnvVarContainer::EnvVarContainer(Process*)>:
c000ecf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed0a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed18:	90                   	nop
c000ed19:	c3                   	ret    

c000ed1a <EnvVarContainer::~EnvVarContainer()>:
c000ed1a:	83 ec 0c             	sub    esp,0xc
c000ed1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed24:	85 c0                	test   eax,eax
c000ed26:	74 1d                	je     c000ed45 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ed28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed2c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed2e:	85 c0                	test   eax,eax
c000ed30:	74 13                	je     c000ed45 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ed32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed39:	83 ec 0c             	sub    esp,0xc
c000ed3c:	50                   	push   eax
c000ed3d:	e8 89 13 00 00       	call   c00100cb <free>
c000ed42:	83 c4 10             	add    esp,0x10
c000ed45:	90                   	nop
c000ed46:	83 c4 0c             	add    esp,0xc
c000ed49:	c3                   	ret    

c000ed4a <KeGetEnv(Process*, char const*)>:
c000ed4a:	53                   	push   ebx
c000ed4b:	83 ec 08             	sub    esp,0x8
c000ed4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed56:	39 05 58 33 03 c0    	cmp    DWORD PTR ds:0xc0033358,eax
c000ed5c:	74 04                	je     c000ed62 <KeGetEnv(Process*, char const*)+0x18>
c000ed5e:	85 c0                	test   eax,eax
c000ed60:	75 0b                	jne    c000ed6d <KeGetEnv(Process*, char const*)+0x23>
c000ed62:	a1 10 31 03 c0       	mov    eax,ds:0xc0033110
c000ed67:	85 c0                	test   eax,eax
c000ed69:	75 19                	jne    c000ed84 <KeGetEnv(Process*, char const*)+0x3a>
c000ed6b:	eb 27                	jmp    c000ed94 <KeGetEnv(Process*, char const*)+0x4a>
c000ed6d:	52                   	push   edx
c000ed6e:	52                   	push   edx
c000ed6f:	53                   	push   ebx
c000ed70:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000ed76:	e8 3b fc ff ff       	call   c000e9b6 <EnvVarContainer::getEnv(char const*)>
c000ed7b:	83 c4 10             	add    esp,0x10
c000ed7e:	85 c0                	test   eax,eax
c000ed80:	75 28                	jne    c000edaa <KeGetEnv(Process*, char const*)+0x60>
c000ed82:	eb de                	jmp    c000ed62 <KeGetEnv(Process*, char const*)+0x18>
c000ed84:	52                   	push   edx
c000ed85:	52                   	push   edx
c000ed86:	53                   	push   ebx
c000ed87:	50                   	push   eax
c000ed88:	e8 29 fc ff ff       	call   c000e9b6 <EnvVarContainer::getEnv(char const*)>
c000ed8d:	83 c4 10             	add    esp,0x10
c000ed90:	85 c0                	test   eax,eax
c000ed92:	75 16                	jne    c000edaa <KeGetEnv(Process*, char const*)+0x60>
c000ed94:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ed98:	a1 14 31 03 c0       	mov    eax,ds:0xc0033114
c000ed9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eda1:	83 c4 08             	add    esp,0x8
c000eda4:	5b                   	pop    ebx
c000eda5:	e9 0c fc ff ff       	jmp    c000e9b6 <EnvVarContainer::getEnv(char const*)>
c000edaa:	83 c4 08             	add    esp,0x8
c000edad:	5b                   	pop    ebx
c000edae:	c3                   	ret    

c000edaf <KeSetEnvSystem(char const*, char const*)>:
c000edaf:	83 ec 10             	sub    esp,0x10
c000edb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edba:	ff 35 14 31 03 c0    	push   DWORD PTR ds:0xc0033114
c000edc0:	e8 2f fc ff ff       	call   c000e9f4 <EnvVarContainer::setEnv(char const*, char const*)>
c000edc5:	83 c4 1c             	add    esp,0x1c
c000edc8:	c3                   	ret    

c000edc9 <KeSetEnvUser(char const*, char const*)>:
c000edc9:	a1 10 31 03 c0       	mov    eax,ds:0xc0033110
c000edce:	85 c0                	test   eax,eax
c000edd0:	74 15                	je     c000ede7 <KeSetEnvUser(char const*, char const*)+0x1e>
c000edd2:	83 ec 10             	sub    esp,0x10
c000edd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eddd:	50                   	push   eax
c000edde:	e8 11 fc ff ff       	call   c000e9f4 <EnvVarContainer::setEnv(char const*, char const*)>
c000ede3:	83 c4 1c             	add    esp,0x1c
c000ede6:	c3                   	ret    
c000ede7:	c3                   	ret    

c000ede8 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000ede8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edec:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000edf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edf6:	e9 f9 fb ff ff       	jmp    c000e9f4 <EnvVarContainer::setEnv(char const*, char const*)>

c000edfb <KeDeleteEnvSystem(char const*)>:
c000edfb:	c3                   	ret    

c000edfc <KeDeleteEnvUser(char const*)>:
c000edfc:	c3                   	ret    

c000edfd <KeDeleteEnvProcess(Process*, char const*)>:
c000edfd:	c3                   	ret    

c000edfe <KeNewProcessEnv(Process*)>:
c000edfe:	83 ec 28             	sub    esp,0x28
c000ee01:	6a 0c                	push   0xc
c000ee03:	e8 b3 12 00 00       	call   c00100bb <malloc>
c000ee08:	5a                   	pop    edx
c000ee09:	59                   	pop    ecx
c000ee0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee0e:	50                   	push   eax
c000ee0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee13:	e8 e0 fe ff ff       	call   c000ecf8 <EnvVarContainer::EnvVarContainer(Process*)>
c000ee18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee1c:	83 c4 2c             	add    esp,0x2c
c000ee1f:	c3                   	ret    

c000ee20 <KeCopyProcessEnv(Process*, Process*)>:
c000ee20:	57                   	push   edi
c000ee21:	56                   	push   esi
c000ee22:	53                   	push   ebx
c000ee23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee27:	83 ec 0c             	sub    esp,0xc
c000ee2a:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000ee30:	6a 0c                	push   0xc
c000ee32:	e8 84 12 00 00       	call   c00100bb <malloc>
c000ee37:	89 c3                	mov    ebx,eax
c000ee39:	58                   	pop    eax
c000ee3a:	5a                   	pop    edx
c000ee3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 b3 fe ff ff       	call   c000ecf8 <EnvVarContainer::EnvVarContainer(Process*)>
c000ee45:	8b 07                	mov    eax,DWORD PTR [edi]
c000ee47:	89 03                	mov    DWORD PTR [ebx],eax
c000ee49:	c1 e0 03             	shl    eax,0x3
c000ee4c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee4f:	e8 67 12 00 00       	call   c00100bb <malloc>
c000ee54:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ee57:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ee59:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ee5c:	c1 e1 03             	shl    ecx,0x3
c000ee5f:	89 c7                	mov    edi,eax
c000ee61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee63:	83 c4 10             	add    esp,0x10
c000ee66:	89 d8                	mov    eax,ebx
c000ee68:	5b                   	pop    ebx
c000ee69:	5e                   	pop    esi
c000ee6a:	5f                   	pop    edi
c000ee6b:	c3                   	ret    

c000ee6c <KeLoadSystemEnv()>:
c000ee6c:	53                   	push   ebx
c000ee6d:	83 ec 14             	sub    esp,0x14
c000ee70:	6a 0c                	push   0xc
c000ee72:	e8 44 12 00 00       	call   c00100bb <malloc>
c000ee77:	89 c3                	mov    ebx,eax
c000ee79:	58                   	pop    eax
c000ee7a:	5a                   	pop    edx
c000ee7b:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000ee81:	53                   	push   ebx
c000ee82:	e8 71 fe ff ff       	call   c000ecf8 <EnvVarContainer::EnvVarContainer(Process*)>
c000ee87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee8a:	89 1d 14 31 03 c0    	mov    DWORD PTR ds:0xc0033114,ebx
c000ee90:	e8 47 fe ff ff       	call   c000ecdc <EnvVarContainer::__loadSystem()>
c000ee95:	83 c4 18             	add    esp,0x18
c000ee98:	5b                   	pop    ebx
c000ee99:	c3                   	ret    

c000ee9a <KeLoadUserEnv()>:
c000ee9a:	53                   	push   ebx
c000ee9b:	83 ec 14             	sub    esp,0x14
c000ee9e:	6a 0c                	push   0xc
c000eea0:	e8 16 12 00 00       	call   c00100bb <malloc>
c000eea5:	89 c3                	mov    ebx,eax
c000eea7:	58                   	pop    eax
c000eea8:	5a                   	pop    edx
c000eea9:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000eeaf:	53                   	push   ebx
c000eeb0:	e8 43 fe ff ff       	call   c000ecf8 <EnvVarContainer::EnvVarContainer(Process*)>
c000eeb5:	89 1d 10 31 03 c0    	mov    DWORD PTR ds:0xc0033110,ebx
c000eebb:	83 c4 18             	add    esp,0x18
c000eebe:	5b                   	pop    ebx
c000eebf:	c3                   	ret    

c000eec0 <KeFlushEnv()>:
c000eec0:	c3                   	ret    

c000eec1 <KeGetProcessTotalEnvCount(Process*)>:
c000eec1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec5:	8b 15 10 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033110
c000eecb:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000eed1:	a1 14 31 03 c0       	mov    eax,ds:0xc0033114
c000eed6:	8b 00                	mov    eax,DWORD PTR [eax]
c000eed8:	03 01                	add    eax,DWORD PTR [ecx]
c000eeda:	85 d2                	test   edx,edx
c000eedc:	74 02                	je     c000eee0 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000eede:	03 02                	add    eax,DWORD PTR [edx]
c000eee0:	c3                   	ret    

c000eee1 <KeGetProcessEnvPair(Process*, int)>:
c000eee1:	57                   	push   edi
c000eee2:	56                   	push   esi
c000eee3:	8b 35 10 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033110
c000eee9:	53                   	push   ebx
c000eeea:	85 f6                	test   esi,esi
c000eeec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eef0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eef4:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000eefa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eefe:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ef00:	75 16                	jne    c000ef18 <KeGetProcessEnvPair(Process*, int)+0x37>
c000ef02:	39 c2                	cmp    edx,eax
c000ef04:	7c 16                	jl     c000ef1c <KeGetProcessEnvPair(Process*, int)+0x3b>
c000ef06:	8b 0d 14 31 03 c0    	mov    ecx,DWORD PTR ds:0xc0033114
c000ef0c:	8b 31                	mov    esi,DWORD PTR [ecx]
c000ef0e:	01 c6                	add    esi,eax
c000ef10:	39 d6                	cmp    esi,edx
c000ef12:	7e 3c                	jle    c000ef50 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000ef14:	29 c2                	sub    edx,eax
c000ef16:	eb 04                	jmp    c000ef1c <KeGetProcessEnvPair(Process*, int)+0x3b>
c000ef18:	39 c2                	cmp    edx,eax
c000ef1a:	7d 05                	jge    c000ef21 <KeGetProcessEnvPair(Process*, int)+0x40>
c000ef1c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000ef1f:	eb 20                	jmp    c000ef41 <KeGetProcessEnvPair(Process*, int)+0x60>
c000ef21:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ef23:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000ef26:	39 d1                	cmp    ecx,edx
c000ef28:	7e 04                	jle    c000ef2e <KeGetProcessEnvPair(Process*, int)+0x4d>
c000ef2a:	29 c2                	sub    edx,eax
c000ef2c:	eb 10                	jmp    c000ef3e <KeGetProcessEnvPair(Process*, int)+0x5d>
c000ef2e:	8b 35 14 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033114
c000ef34:	03 0e                	add    ecx,DWORD PTR [esi]
c000ef36:	39 d1                	cmp    ecx,edx
c000ef38:	7e 16                	jle    c000ef50 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000ef3a:	29 c2                	sub    edx,eax
c000ef3c:	29 fa                	sub    edx,edi
c000ef3e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ef41:	8d 14 d0             	lea    edx,[eax+edx*8]
c000ef44:	8b 02                	mov    eax,DWORD PTR [edx]
c000ef46:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ef49:	89 03                	mov    DWORD PTR [ebx],eax
c000ef4b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000ef4e:	eb 1d                	jmp    c000ef6d <KeGetProcessEnvPair(Process*, int)+0x8c>
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 fe 9b 02 c0       	push   0xc0029bfe
c000ef58:	e8 b3 15 00 00       	call   c0010510 <KePanic(char const*)>
c000ef5d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ef63:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	89 d8                	mov    eax,ebx
c000ef6f:	5b                   	pop    ebx
c000ef70:	5e                   	pop    esi
c000ef71:	5f                   	pop    edi
c000ef72:	c2 04 00             	ret    0x4
c000ef75:	66 90                	xchg   ax,ax
c000ef77:	90                   	nop

c000ef78 <KeDisplayProgramFault(char const*)>:
c000ef78:	83 ec 0c             	sub    esp,0xc
c000ef7b:	83 ec 0c             	sub    esp,0xc
c000ef7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef82:	e8 f5 7f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ef87:	83 c4 10             	add    esp,0x10
c000ef8a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ef8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ef94:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ef9a:	85 c0                	test   eax,eax
c000ef9c:	74 22                	je     c000efc0 <KeDisplayProgramFault(char const*)+0x48>
c000ef9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000efa3:	8b 00                	mov    eax,DWORD PTR [eax]
c000efa5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000efa8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000efae:	6a 04                	push   0x4
c000efb0:	6a 0f                	push   0xf
c000efb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efb6:	50                   	push   eax
c000efb7:	e8 32 3f 00 00       	call   c0012eee <VgaText::puts(char const*, VgaColour, VgaColour)>
c000efbc:	83 c4 10             	add    esp,0x10
c000efbf:	90                   	nop
c000efc0:	90                   	nop
c000efc1:	83 c4 0c             	add    esp,0xc
c000efc4:	c3                   	ret    
c000efc5:	8d 76 00             	lea    esi,[esi+0x0]

c000efc8 <KeGeneralProtectionFault(void*, void*)>:
c000efc8:	83 ec 0c             	sub    esp,0xc
c000efcb:	83 ec 08             	sub    esp,0x8
c000efce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efd6:	e8 54 b9 00 00       	call   c001a92f <HalHandleGeneralProtectionFault(void*, void*)>
c000efdb:	83 c4 10             	add    esp,0x10
c000efde:	0f b6 c0             	movzx  eax,al
c000efe1:	85 c0                	test   eax,eax
c000efe3:	75 2f                	jne    c000f014 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000efe5:	83 ec 0c             	sub    esp,0xc
c000efe8:	68 18 9c 02 c0       	push   0xc0029c18
c000efed:	e8 86 ff ff ff       	call   c000ef78 <KeDisplayProgramFault(char const*)>
c000eff2:	83 c4 10             	add    esp,0x10
c000eff5:	83 ec 0c             	sub    esp,0xc
c000eff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000effc:	e8 a7 ba 00 00       	call   c001aaa8 <HalDisplayDebugInfo(void*)>
c000f001:	83 c4 10             	add    esp,0x10
c000f004:	83 ec 0c             	sub    esp,0xc
c000f007:	6a 7e                	push   0x7e
c000f009:	e8 9a 88 00 00       	call   c00178a8 <KeTerminateCurrentThread(int)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	eb 05                	jmp    c000f018 <KeGeneralProtectionFault(void*, void*)+0x50>
c000f013:	90                   	nop
c000f014:	90                   	nop
c000f015:	8d 76 00             	lea    esi,[esi+0x0]
c000f018:	83 c4 0c             	add    esp,0xc
c000f01b:	c3                   	ret    

c000f01c <KePageFault(void*, void*)>:
c000f01c:	83 ec 0c             	sub    esp,0xc
c000f01f:	83 ec 08             	sub    esp,0x8
c000f022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f02a:	e8 08 ba 00 00       	call   c001aa37 <HalHandlePageFault(void*, void*)>
c000f02f:	83 c4 10             	add    esp,0x10
c000f032:	0f b6 c0             	movzx  eax,al
c000f035:	85 c0                	test   eax,eax
c000f037:	75 2f                	jne    c000f068 <KePageFault(void*, void*)+0x4c>
c000f039:	83 ec 0c             	sub    esp,0xc
c000f03c:	68 31 9c 02 c0       	push   0xc0029c31
c000f041:	e8 32 ff ff ff       	call   c000ef78 <KeDisplayProgramFault(char const*)>
c000f046:	83 c4 10             	add    esp,0x10
c000f049:	83 ec 0c             	sub    esp,0xc
c000f04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f050:	e8 53 ba 00 00       	call   c001aaa8 <HalDisplayDebugInfo(void*)>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	83 ec 0c             	sub    esp,0xc
c000f05b:	6a 7f                	push   0x7f
c000f05d:	e8 46 88 00 00       	call   c00178a8 <KeTerminateCurrentThread(int)>
c000f062:	83 c4 10             	add    esp,0x10
c000f065:	eb 05                	jmp    c000f06c <KePageFault(void*, void*)+0x50>
c000f067:	90                   	nop
c000f068:	90                   	nop
c000f069:	8d 76 00             	lea    esi,[esi+0x0]
c000f06c:	83 c4 0c             	add    esp,0xc
c000f06f:	c3                   	ret    

c000f070 <KeOpcodeFault(void*, void*)>:
c000f070:	83 ec 0c             	sub    esp,0xc
c000f073:	83 ec 08             	sub    esp,0x8
c000f076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f07e:	e8 e3 b9 00 00       	call   c001aa66 <HalHandleOpcodeFault(void*, void*)>
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	0f b6 c0             	movzx  eax,al
c000f089:	85 c0                	test   eax,eax
c000f08b:	75 2f                	jne    c000f0bc <KeOpcodeFault(void*, void*)+0x4c>
c000f08d:	83 ec 0c             	sub    esp,0xc
c000f090:	68 3c 9c 02 c0       	push   0xc0029c3c
c000f095:	e8 de fe ff ff       	call   c000ef78 <KeDisplayProgramFault(char const*)>
c000f09a:	83 c4 10             	add    esp,0x10
c000f09d:	83 ec 0c             	sub    esp,0xc
c000f0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0a4:	e8 ff b9 00 00       	call   c001aaa8 <HalDisplayDebugInfo(void*)>
c000f0a9:	83 c4 10             	add    esp,0x10
c000f0ac:	83 ec 0c             	sub    esp,0xc
c000f0af:	6a 7c                	push   0x7c
c000f0b1:	e8 f2 87 00 00       	call   c00178a8 <KeTerminateCurrentThread(int)>
c000f0b6:	83 c4 10             	add    esp,0x10
c000f0b9:	eb 05                	jmp    c000f0c0 <KeOpcodeFault(void*, void*)+0x50>
c000f0bb:	90                   	nop
c000f0bc:	90                   	nop
c000f0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c0:	83 c4 0c             	add    esp,0xc
c000f0c3:	c3                   	ret    

c000f0c4 <KeOtherFault(void*, void*)>:
c000f0c4:	83 ec 0c             	sub    esp,0xc
c000f0c7:	83 ec 0c             	sub    esp,0xc
c000f0ca:	68 58 9c 02 c0       	push   0xc0029c58
c000f0cf:	e8 a4 fe ff ff       	call   c000ef78 <KeDisplayProgramFault(char const*)>
c000f0d4:	83 c4 10             	add    esp,0x10
c000f0d7:	83 ec 0c             	sub    esp,0xc
c000f0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0de:	e8 c5 b9 00 00       	call   c001aaa8 <HalDisplayDebugInfo(void*)>
c000f0e3:	83 c4 10             	add    esp,0x10
c000f0e6:	83 ec 0c             	sub    esp,0xc
c000f0e9:	6a 7d                	push   0x7d
c000f0eb:	e8 b8 87 00 00       	call   c00178a8 <KeTerminateCurrentThread(int)>
c000f0f0:	83 c4 10             	add    esp,0x10
c000f0f3:	90                   	nop
c000f0f4:	83 c4 0c             	add    esp,0xc
c000f0f7:	c3                   	ret    

c000f0f8 <KeNonMaskableInterrupt(void*, void*)>:
c000f0f8:	83 ec 0c             	sub    esp,0xc
c000f0fb:	e8 36 bd 00 00       	call   c001ae36 <HalReceivedNMI()>
c000f100:	90                   	nop
c000f101:	83 c4 0c             	add    esp,0xc
c000f104:	c3                   	ret    
c000f105:	8d 76 00             	lea    esi,[esi+0x0]

c000f108 <KeDoubleFault(void*, void*)>:
c000f108:	83 ec 0c             	sub    esp,0xc
c000f10b:	83 ec 0c             	sub    esp,0xc
c000f10e:	68 49 9c 02 c0       	push   0xc0029c49
c000f113:	e8 f8 13 00 00       	call   c0010510 <KePanic(char const*)>
c000f118:	83 c4 10             	add    esp,0x10
c000f11b:	90                   	nop
c000f11c:	83 c4 0c             	add    esp,0xc
c000f11f:	c3                   	ret    

c000f120 <GDTEntry::setBase(unsigned int)>:
c000f120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f124:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f128:	89 c1                	mov    ecx,eax
c000f12a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f12e:	c1 e9 10             	shr    ecx,0x10
c000f131:	c1 e8 18             	shr    eax,0x18
c000f134:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f137:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f13a:	c3                   	ret    
c000f13b:	90                   	nop

c000f13c <GDTEntry::setLimit(unsigned int)>:
c000f13c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f144:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f147:	66 89 01             	mov    WORD PTR [ecx],ax
c000f14a:	83 e2 f0             	and    edx,0xfffffff0
c000f14d:	c1 e8 10             	shr    eax,0x10
c000f150:	83 e0 0f             	and    eax,0xf
c000f153:	09 d0                	or     eax,edx
c000f155:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f158:	c3                   	ret    
c000f159:	90                   	nop

c000f15a <GDT::GDT()>:
c000f15a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f15e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f16e:	90                   	nop
c000f16f:	c3                   	ret    

c000f170 <GDT::addEntry(GDTEntry)>:
c000f170:	53                   	push   ebx
c000f171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f175:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f179:	8b 02                	mov    eax,DWORD PTR [edx]
c000f17b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f17f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f183:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f187:	8d 48 01             	lea    ecx,[eax+0x1]
c000f18a:	c1 e0 03             	shl    eax,0x3
c000f18d:	89 0a                	mov    DWORD PTR [edx],ecx
c000f18f:	5b                   	pop    ebx
c000f190:	c3                   	ret    
c000f191:	90                   	nop

c000f192 <GDT::getNumberOfEntries()>:
c000f192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f196:	8b 00                	mov    eax,DWORD PTR [eax]
c000f198:	c3                   	ret    
c000f199:	90                   	nop

c000f19a <GDT::flush()>:
c000f19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f19e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f1a0:	83 c0 04             	add    eax,0x4
c000f1a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f1aa:	a3 1a 31 03 c0       	mov    ds:0xc003311a,eax
c000f1af:	66 89 15 18 31 03 c0 	mov    WORD PTR ds:0xc0033118,dx
c000f1b6:	e9 9f 11 ff ff       	jmp    c000035a <loadGDT>
c000f1bb:	90                   	nop

c000f1bc <GDT::setup()>:
c000f1bc:	57                   	push   edi
c000f1bd:	56                   	push   esi
c000f1be:	53                   	push   ebx
c000f1bf:	83 ec 30             	sub    esp,0x30
c000f1c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000f1c6:	6a 00                	push   0x0
c000f1c8:	8d 74 24 14          	lea    esi,[esp+0x14]
c000f1cc:	56                   	push   esi
c000f1cd:	e8 4e ff ff ff       	call   c000f120 <GDTEntry::setBase(unsigned int)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	56                   	push   esi
c000f1d5:	e8 62 ff ff ff       	call   c000f13c <GDTEntry::setLimit(unsigned int)>
c000f1da:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000f1e2:	6a 00                	push   0x0
c000f1e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f1e8:	56                   	push   esi
c000f1e9:	e8 32 ff ff ff       	call   c000f120 <GDTEntry::setBase(unsigned int)>
c000f1ee:	68 ff ff ff 00       	push   0xffffff
c000f1f3:	56                   	push   esi
c000f1f4:	e8 43 ff ff ff       	call   c000f13c <GDTEntry::setLimit(unsigned int)>
c000f1f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f201:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f205:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000f209:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f20e:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f213:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f217:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f21b:	89 f8                	mov    eax,edi
c000f21d:	89 fa                	mov    edx,edi
c000f21f:	80 e4 f7             	and    ah,0xf7
c000f222:	80 ce 60             	or     dh,0x60
c000f225:	89 c7                	mov    edi,eax
c000f227:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000f22b:	80 cc 60             	or     ah,0x60
c000f22e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f232:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f236:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f23e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f242:	83 c4 20             	add    esp,0x20
c000f245:	6a 00                	push   0x0
c000f247:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f24b:	50                   	push   eax
c000f24c:	e8 cf fe ff ff       	call   c000f120 <GDTEntry::setBase(unsigned int)>
c000f251:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000f255:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000f259:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000f25d:	83 e0 3f             	and    eax,0x3f
c000f260:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000f264:	6a 00                	push   0x0
c000f266:	8d 44 24 34          	lea    eax,[esp+0x34]
c000f26a:	50                   	push   eax
c000f26b:	e8 b0 fe ff ff       	call   c000f120 <GDTEntry::setBase(unsigned int)>
c000f270:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000f274:	83 e0 3f             	and    eax,0x3f
c000f277:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000f27b:	83 c4 0c             	add    esp,0xc
c000f27e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f286:	53                   	push   ebx
c000f287:	e8 e4 fe ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c000f28c:	83 c4 0c             	add    esp,0xc
c000f28f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f293:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f297:	53                   	push   ebx
c000f298:	e8 d3 fe ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c000f29d:	83 c4 0c             	add    esp,0xc
c000f2a0:	57                   	push   edi
c000f2a1:	56                   	push   esi
c000f2a2:	53                   	push   ebx
c000f2a3:	e8 c8 fe ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c000f2a8:	83 c4 0c             	add    esp,0xc
c000f2ab:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f2af:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 b7 fe ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c000f2b9:	83 c4 0c             	add    esp,0xc
c000f2bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 a6 fe ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c000f2ca:	83 c4 0c             	add    esp,0xc
c000f2cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2d5:	53                   	push   ebx
c000f2d6:	e8 95 fe ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c000f2db:	83 c4 0c             	add    esp,0xc
c000f2de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f2e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f2e6:	53                   	push   ebx
c000f2e7:	e8 84 fe ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c000f2ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2ef:	e8 a6 fe ff ff       	call   c000f19a <GDT::flush()>
c000f2f4:	83 c4 40             	add    esp,0x40
c000f2f7:	5b                   	pop    ebx
c000f2f8:	5e                   	pop    esi
c000f2f9:	5f                   	pop    edi
c000f2fa:	c3                   	ret    

c000f2fb <idleFunction(void*)>:
c000f2fb:	83 ec 0c             	sub    esp,0xc
c000f2fe:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f305:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f30c:	75 01                	jne    c000f30f <idleFunction(void*)+0x14>
c000f30e:	fb                   	sti    
c000f30f:	e8 bd bb 00 00       	call   c001aed1 <HalSystemIdle()>
c000f314:	e8 21 89 01 00       	call   c0027c3a <idleCommon()>
c000f319:	eb f4                	jmp    c000f30f <idleFunction(void*)+0x14>
c000f31b:	90                   	nop

c000f31c <IDTEntry::IDTEntry(bool)>:
c000f31c:	53                   	push   ebx
c000f31d:	83 ec 04             	sub    esp,0x4
c000f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f324:	88 04 24             	mov    BYTE PTR [esp],al
c000f327:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f32b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f335:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f33d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f340:	83 e2 f0             	and    edx,0xfffffff0
c000f343:	83 ca 0e             	or     edx,0xe
c000f346:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f349:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f34d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f350:	83 e2 ef             	and    edx,0xffffffef
c000f353:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f356:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000f35a:	85 c0                	test   eax,eax
c000f35c:	74 06                	je     c000f364 <IDTEntry::IDTEntry(bool)+0x48>
c000f35e:	b2 03                	mov    dl,0x3
c000f360:	eb 06                	jmp    c000f368 <IDTEntry::IDTEntry(bool)+0x4c>
c000f362:	66 90                	xchg   ax,ax
c000f364:	b2 00                	mov    dl,0x0
c000f366:	66 90                	xchg   ax,ax
c000f368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f36c:	83 e2 03             	and    edx,0x3
c000f36f:	89 d3                	mov    ebx,edx
c000f371:	c1 e3 05             	shl    ebx,0x5
c000f374:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f377:	83 e2 9f             	and    edx,0xffffff9f
c000f37a:	88 d1                	mov    cl,dl
c000f37c:	88 da                	mov    dl,bl
c000f37e:	09 ca                	or     edx,ecx
c000f380:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f387:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f38a:	83 ca 80             	or     edx,0xffffff80
c000f38d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f390:	90                   	nop
c000f391:	83 c4 04             	add    esp,0x4
c000f394:	5b                   	pop    ebx
c000f395:	c3                   	ret    

c000f396 <IDTEntry::setOffset(unsigned int)>:
c000f396:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f39a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f39e:	66 89 02             	mov    WORD PTR [edx],ax
c000f3a1:	c1 e8 10             	shr    eax,0x10
c000f3a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f3a8:	c3                   	ret    
c000f3a9:	90                   	nop
c000f3aa:	66 90                	xchg   ax,ax

c000f3ac <IDT::IDT()>:
c000f3ac:	90                   	nop
c000f3ad:	c3                   	ret    

c000f3ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f3ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3b2:	83 c0 30             	add    eax,0x30
c000f3b5:	c3                   	ret    

c000f3b6 <IDT::addEntry(IDTEntry, int)>:
c000f3b6:	53                   	push   ebx
c000f3b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f3bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3ce:	5b                   	pop    ebx
c000f3cf:	c3                   	ret    

c000f3d0 <IDT::addEntry(int, void (*)(), bool)>:
c000f3d0:	53                   	push   ebx
c000f3d1:	83 ec 10             	sub    esp,0x10
c000f3d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3d9:	50                   	push   eax
c000f3da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3de:	53                   	push   ebx
c000f3df:	e8 38 ff ff ff       	call   c000f31c <IDTEntry::IDTEntry(bool)>
c000f3e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 a8 ff ff ff       	call   c000f396 <IDTEntry::setOffset(unsigned int)>
c000f3ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3fe:	e8 b3 ff ff ff       	call   c000f3b6 <IDT::addEntry(IDTEntry, int)>
c000f403:	83 c4 30             	add    esp,0x30
c000f406:	5b                   	pop    ebx
c000f407:	c3                   	ret    

c000f408 <IDT::flush()>:
c000f408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f40c:	66 c7 05 20 31 03 c0 ff 07 	mov    WORD PTR ds:0xc0033120,0x7ff
c000f415:	a3 22 31 03 c0       	mov    ds:0xc0033122,eax
c000f41a:	0f 01 1d 20 31 03 c0 	lidtd  ds:0xc0033120
c000f421:	c3                   	ret    

c000f422 <IDT::setup()>:
c000f422:	57                   	push   edi
c000f423:	56                   	push   esi
c000f424:	53                   	push   ebx
c000f425:	83 ec 10             	sub    esp,0x10
c000f428:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f42c:	6a 00                	push   0x0
c000f42e:	68 e0 27 02 c0       	push   0xc00227e0
c000f433:	6a 00                	push   0x0
c000f435:	53                   	push   ebx
c000f436:	e8 95 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f43b:	6a 00                	push   0x0
c000f43d:	68 f0 27 02 c0       	push   0xc00227f0
c000f442:	6a 01                	push   0x1
c000f444:	53                   	push   ebx
c000f445:	e8 86 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f44a:	83 c4 20             	add    esp,0x20
c000f44d:	6a 00                	push   0x0
c000f44f:	68 fa 27 02 c0       	push   0xc00227fa
c000f454:	6a 02                	push   0x2
c000f456:	53                   	push   ebx
c000f457:	e8 74 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f45c:	6a 00                	push   0x0
c000f45e:	68 04 28 02 c0       	push   0xc0022804
c000f463:	6a 03                	push   0x3
c000f465:	53                   	push   ebx
c000f466:	e8 65 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f46b:	83 c4 20             	add    esp,0x20
c000f46e:	6a 00                	push   0x0
c000f470:	68 0e 28 02 c0       	push   0xc002280e
c000f475:	6a 04                	push   0x4
c000f477:	53                   	push   ebx
c000f478:	e8 53 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f47d:	6a 00                	push   0x0
c000f47f:	68 18 28 02 c0       	push   0xc0022818
c000f484:	6a 05                	push   0x5
c000f486:	53                   	push   ebx
c000f487:	e8 44 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f48c:	83 c4 20             	add    esp,0x20
c000f48f:	6a 00                	push   0x0
c000f491:	68 22 28 02 c0       	push   0xc0022822
c000f496:	6a 06                	push   0x6
c000f498:	53                   	push   ebx
c000f499:	e8 32 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f49e:	6a 00                	push   0x0
c000f4a0:	68 2c 28 02 c0       	push   0xc002282c
c000f4a5:	6a 07                	push   0x7
c000f4a7:	53                   	push   ebx
c000f4a8:	e8 23 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4ad:	83 c4 20             	add    esp,0x20
c000f4b0:	6a 00                	push   0x0
c000f4b2:	68 36 28 02 c0       	push   0xc0022836
c000f4b7:	6a 08                	push   0x8
c000f4b9:	53                   	push   ebx
c000f4ba:	e8 11 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4bf:	6a 00                	push   0x0
c000f4c1:	68 3e 28 02 c0       	push   0xc002283e
c000f4c6:	6a 09                	push   0x9
c000f4c8:	53                   	push   ebx
c000f4c9:	e8 02 ff ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4ce:	83 c4 20             	add    esp,0x20
c000f4d1:	6a 00                	push   0x0
c000f4d3:	68 48 28 02 c0       	push   0xc0022848
c000f4d8:	6a 0a                	push   0xa
c000f4da:	53                   	push   ebx
c000f4db:	e8 f0 fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4e0:	6a 00                	push   0x0
c000f4e2:	68 50 28 02 c0       	push   0xc0022850
c000f4e7:	6a 0b                	push   0xb
c000f4e9:	53                   	push   ebx
c000f4ea:	e8 e1 fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	6a 00                	push   0x0
c000f4f4:	68 58 28 02 c0       	push   0xc0022858
c000f4f9:	6a 0c                	push   0xc
c000f4fb:	53                   	push   ebx
c000f4fc:	e8 cf fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f501:	6a 00                	push   0x0
c000f503:	68 60 28 02 c0       	push   0xc0022860
c000f508:	6a 0d                	push   0xd
c000f50a:	53                   	push   ebx
c000f50b:	e8 c0 fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f510:	83 c4 20             	add    esp,0x20
c000f513:	6a 00                	push   0x0
c000f515:	68 7a 28 02 c0       	push   0xc002287a
c000f51a:	6a 0e                	push   0xe
c000f51c:	53                   	push   ebx
c000f51d:	e8 ae fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f522:	6a 00                	push   0x0
c000f524:	68 82 28 02 c0       	push   0xc0022882
c000f529:	6a 0f                	push   0xf
c000f52b:	53                   	push   ebx
c000f52c:	e8 9f fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f531:	83 c4 20             	add    esp,0x20
c000f534:	6a 00                	push   0x0
c000f536:	68 8c 28 02 c0       	push   0xc002288c
c000f53b:	6a 10                	push   0x10
c000f53d:	53                   	push   ebx
c000f53e:	e8 8d fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f543:	6a 00                	push   0x0
c000f545:	68 96 28 02 c0       	push   0xc0022896
c000f54a:	6a 11                	push   0x11
c000f54c:	53                   	push   ebx
c000f54d:	e8 7e fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f552:	83 c4 20             	add    esp,0x20
c000f555:	6a 00                	push   0x0
c000f557:	68 a0 28 02 c0       	push   0xc00228a0
c000f55c:	6a 12                	push   0x12
c000f55e:	53                   	push   ebx
c000f55f:	e8 6c fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f564:	6a 01                	push   0x1
c000f566:	68 3a 29 02 c0       	push   0xc002293a
c000f56b:	6a 60                	push   0x60
c000f56d:	53                   	push   ebx
c000f56e:	e8 5d fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f573:	83 c4 20             	add    esp,0x20
c000f576:	6a 00                	push   0x0
c000f578:	68 41 29 02 c0       	push   0xc0022941
c000f57d:	6a 20                	push   0x20
c000f57f:	53                   	push   ebx
c000f580:	e8 4b fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f585:	6a 00                	push   0x0
c000f587:	68 2c 29 02 c0       	push   0xc002292c
c000f58c:	6a 21                	push   0x21
c000f58e:	53                   	push   ebx
c000f58f:	e8 3c fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f594:	83 c4 20             	add    esp,0x20
c000f597:	6a 00                	push   0x0
c000f599:	68 33 29 02 c0       	push   0xc0022933
c000f59e:	6a 22                	push   0x22
c000f5a0:	53                   	push   ebx
c000f5a1:	e8 2a fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5a6:	6a 00                	push   0x0
c000f5a8:	68 aa 28 02 c0       	push   0xc00228aa
c000f5ad:	6a 23                	push   0x23
c000f5af:	53                   	push   ebx
c000f5b0:	e8 1b fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5b5:	83 c4 20             	add    esp,0x20
c000f5b8:	6a 00                	push   0x0
c000f5ba:	68 b4 28 02 c0       	push   0xc00228b4
c000f5bf:	6a 24                	push   0x24
c000f5c1:	53                   	push   ebx
c000f5c2:	e8 09 fe ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5c7:	6a 00                	push   0x0
c000f5c9:	68 be 28 02 c0       	push   0xc00228be
c000f5ce:	6a 25                	push   0x25
c000f5d0:	53                   	push   ebx
c000f5d1:	e8 fa fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5d6:	83 c4 20             	add    esp,0x20
c000f5d9:	6a 00                	push   0x0
c000f5db:	68 c8 28 02 c0       	push   0xc00228c8
c000f5e0:	6a 26                	push   0x26
c000f5e2:	53                   	push   ebx
c000f5e3:	e8 e8 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5e8:	6a 00                	push   0x0
c000f5ea:	68 d2 28 02 c0       	push   0xc00228d2
c000f5ef:	6a 27                	push   0x27
c000f5f1:	53                   	push   ebx
c000f5f2:	e8 d9 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5f7:	83 c4 20             	add    esp,0x20
c000f5fa:	6a 00                	push   0x0
c000f5fc:	68 dc 28 02 c0       	push   0xc00228dc
c000f601:	6a 28                	push   0x28
c000f603:	53                   	push   ebx
c000f604:	e8 c7 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f609:	6a 00                	push   0x0
c000f60b:	68 e6 28 02 c0       	push   0xc00228e6
c000f610:	6a 29                	push   0x29
c000f612:	53                   	push   ebx
c000f613:	e8 b8 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f618:	83 c4 20             	add    esp,0x20
c000f61b:	6a 00                	push   0x0
c000f61d:	68 f0 28 02 c0       	push   0xc00228f0
c000f622:	6a 2a                	push   0x2a
c000f624:	53                   	push   ebx
c000f625:	e8 a6 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f62a:	6a 00                	push   0x0
c000f62c:	68 fa 28 02 c0       	push   0xc00228fa
c000f631:	6a 2b                	push   0x2b
c000f633:	53                   	push   ebx
c000f634:	e8 97 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f639:	83 c4 20             	add    esp,0x20
c000f63c:	6a 00                	push   0x0
c000f63e:	68 04 29 02 c0       	push   0xc0022904
c000f643:	6a 2c                	push   0x2c
c000f645:	53                   	push   ebx
c000f646:	e8 85 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f64b:	6a 00                	push   0x0
c000f64d:	68 0e 29 02 c0       	push   0xc002290e
c000f652:	6a 2d                	push   0x2d
c000f654:	53                   	push   ebx
c000f655:	e8 76 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f65a:	83 c4 20             	add    esp,0x20
c000f65d:	6a 00                	push   0x0
c000f65f:	68 18 29 02 c0       	push   0xc0022918
c000f664:	6a 2e                	push   0x2e
c000f666:	53                   	push   ebx
c000f667:	e8 64 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f66c:	6a 00                	push   0x0
c000f66e:	68 22 29 02 c0       	push   0xc0022922
c000f673:	6a 2f                	push   0x2f
c000f675:	53                   	push   ebx
c000f676:	e8 55 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f67b:	83 c4 20             	add    esp,0x20
c000f67e:	6a 00                	push   0x0
c000f680:	68 48 2a 02 c0       	push   0xc0022a48
c000f685:	6a 30                	push   0x30
c000f687:	53                   	push   ebx
c000f688:	e8 43 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f68d:	6a 00                	push   0x0
c000f68f:	68 52 2a 02 c0       	push   0xc0022a52
c000f694:	6a 31                	push   0x31
c000f696:	53                   	push   ebx
c000f697:	e8 34 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f69c:	83 c4 20             	add    esp,0x20
c000f69f:	6a 00                	push   0x0
c000f6a1:	68 5c 2a 02 c0       	push   0xc0022a5c
c000f6a6:	6a 32                	push   0x32
c000f6a8:	53                   	push   ebx
c000f6a9:	e8 22 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f6ae:	6a 00                	push   0x0
c000f6b0:	68 66 2a 02 c0       	push   0xc0022a66
c000f6b5:	6a 33                	push   0x33
c000f6b7:	53                   	push   ebx
c000f6b8:	e8 13 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f6bd:	83 c4 20             	add    esp,0x20
c000f6c0:	6a 00                	push   0x0
c000f6c2:	68 70 2a 02 c0       	push   0xc0022a70
c000f6c7:	6a 34                	push   0x34
c000f6c9:	53                   	push   ebx
c000f6ca:	e8 01 fd ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f6cf:	6a 00                	push   0x0
c000f6d1:	68 7a 2a 02 c0       	push   0xc0022a7a
c000f6d6:	6a 35                	push   0x35
c000f6d8:	53                   	push   ebx
c000f6d9:	e8 f2 fc ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f6de:	83 c4 20             	add    esp,0x20
c000f6e1:	6a 00                	push   0x0
c000f6e3:	68 84 2a 02 c0       	push   0xc0022a84
c000f6e8:	6a 36                	push   0x36
c000f6ea:	53                   	push   ebx
c000f6eb:	e8 e0 fc ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f6f0:	6a 00                	push   0x0
c000f6f2:	68 8e 2a 02 c0       	push   0xc0022a8e
c000f6f7:	6a 37                	push   0x37
c000f6f9:	53                   	push   ebx
c000f6fa:	e8 d1 fc ff ff       	call   c000f3d0 <IDT::addEntry(int, void (*)(), bool)>
c000f6ff:	83 c4 1c             	add    esp,0x1c
c000f702:	6a 03                	push   0x3
c000f704:	6a 02                	push   0x2
c000f706:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000f70c:	e8 7d 4b 00 00       	call   c001428e <VAS::allocatePages(int, int)>
c000f711:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f718:	89 c6                	mov    esi,eax
c000f71a:	e8 9c 09 00 00       	call   c00100bb <malloc>
c000f71f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f725:	89 04 24             	mov    DWORD PTR [esp],eax
c000f728:	89 c7                	mov    edi,eax
c000f72a:	e8 29 3c 00 00       	call   c0013358 <TSS::TSS()>
c000f72f:	83 c4 0c             	add    esp,0xc
c000f732:	68 36 28 02 c0       	push   0xc0022836
c000f737:	56                   	push   esi
c000f738:	57                   	push   edi
c000f739:	e8 5e 3c 00 00       	call   c001339c <TSS::setup(unsigned long, unsigned long)>
c000f73e:	89 c6                	mov    esi,eax
c000f740:	58                   	pop    eax
c000f741:	5a                   	pop    edx
c000f742:	6a 00                	push   0x0
c000f744:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f748:	50                   	push   eax
c000f749:	e8 ce fb ff ff       	call   c000f31c <IDTEntry::IDTEntry(bool)>
c000f74e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f752:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f757:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f75e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f764:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f768:	80 ce 05             	or     dh,0x5
c000f76b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f76e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f772:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f776:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f779:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f77c:	e8 87 fc ff ff       	call   c000f408 <IDT::flush()>
c000f781:	83 c4 20             	add    esp,0x20
c000f784:	5b                   	pop    ebx
c000f785:	5e                   	pop    esi
c000f786:	5f                   	pop    edi
c000f787:	c3                   	ret    

c000f788 <CPU::current()>:
c000f788:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000f78d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f793:	c3                   	ret    

c000f794 <operator new(unsigned long)>:
c000f794:	e9 22 09 00 00       	jmp    c00100bb <malloc>

c000f799 <operator delete(void*)>:
c000f799:	e9 3d 09 00 00       	jmp    c00100db <rfree>

c000f79e <disableIRQs()>:
c000f79e:	fa                   	cli    
c000f79f:	c3                   	ret    

c000f7a0 <enableIRQs()>:
c000f7a0:	fb                   	sti    
c000f7a1:	c3                   	ret    

c000f7a2 <lockScheduler()>:
c000f7a2:	fa                   	cli    
c000f7a3:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000f7a9:	c3                   	ret    

c000f7aa <unlockScheduler()>:
c000f7aa:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f7b1:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f7b8:	75 01                	jne    c000f7bb <unlockScheduler()+0x11>
c000f7ba:	fb                   	sti    
c000f7bb:	c3                   	ret    

c000f7bc <lockStuff()>:
c000f7bc:	fa                   	cli    
c000f7bd:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000f7c3:	ff 05 2c 33 03 c0    	inc    DWORD PTR ds:0xc003332c
c000f7c9:	c3                   	ret    

c000f7ca <unlockStuff()>:
c000f7ca:	83 ec 0c             	sub    esp,0xc
c000f7cd:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000f7d2:	48                   	dec    eax
c000f7d3:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000f7d8:	75 18                	jne    c000f7f2 <unlockStuff()+0x28>
c000f7da:	83 3d 28 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033328,0x0
c000f7e1:	74 0f                	je     c000f7f2 <unlockStuff()+0x28>
c000f7e3:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c000f7ed:	e8 b6 78 00 00       	call   c00170a8 <schedule()>
c000f7f2:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f7f9:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f800:	75 01                	jne    c000f803 <unlockStuff()+0x39>
c000f802:	fb                   	sti    
c000f803:	83 c4 0c             	add    esp,0xc
c000f806:	c3                   	ret    

c000f807 <Virt::getAKernelVAS()>:
c000f807:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c000f80c:	c3                   	ret    

c000f80d <__not_memcpy>:
c000f80d:	57                   	push   edi
c000f80e:	56                   	push   esi
c000f80f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f813:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f817:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f81b:	89 c7                	mov    edi,eax
c000f81d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f81f:	5e                   	pop    esi
c000f820:	5f                   	pop    edi
c000f821:	c3                   	ret    

c000f822 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f822:	55                   	push   ebp
c000f823:	b9 0a 00 00 00       	mov    ecx,0xa
c000f828:	57                   	push   edi
c000f829:	56                   	push   esi
c000f82a:	53                   	push   ebx
c000f82b:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f830:	81 ec ac 00 00 00    	sub    esp,0xac
c000f836:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f83d:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f842:	99                   	cdq    
c000f843:	f7 f9                	idiv   ecx
c000f845:	89 d5                	mov    ebp,edx
c000f847:	99                   	cdq    
c000f848:	f7 f9                	idiv   ecx
c000f84a:	8d 42 30             	lea    eax,[edx+0x30]
c000f84d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f851:	8d 45 30             	lea    eax,[ebp+0x30]
c000f854:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f858:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f85f:	99                   	cdq    
c000f860:	f7 fb                	idiv   ebx
c000f862:	bb 64 00 00 00       	mov    ebx,0x64
c000f867:	99                   	cdq    
c000f868:	f7 f9                	idiv   ecx
c000f86a:	8d 42 30             	lea    eax,[edx+0x30]
c000f86d:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f871:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f878:	99                   	cdq    
c000f879:	f7 fb                	idiv   ebx
c000f87b:	31 db                	xor    ebx,ebx
c000f87d:	99                   	cdq    
c000f87e:	f7 f9                	idiv   ecx
c000f880:	8d 42 30             	lea    eax,[edx+0x30]
c000f883:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f887:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f88f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f893:	0f be 8b 44 31 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffccebc]
c000f89a:	83 f9 59             	cmp    ecx,0x59
c000f89d:	74 1c                	je     c000f8bb <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f89f:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f8a6:	83 f9 4d             	cmp    ecx,0x4d
c000f8a9:	0f 84 e3 00 00 00    	je     c000f992 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f8af:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f8b6:	e9 d7 00 00 00       	jmp    c000f992 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f8bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f8c0:	74 27                	je     c000f8e9 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f8c2:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f8c6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8cb:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f8cf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f8d3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f8d7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f8db:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f8df:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f8e3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f8e7:	eb 15                	jmp    c000f8fe <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f8e9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f8ed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f8f1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f8f5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f8f9:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f8fe:	50                   	push   eax
c000f8ff:	50                   	push   eax
c000f900:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f904:	57                   	push   edi
c000f905:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f909:	56                   	push   esi
c000f90a:	e8 31 0f ff ff       	call   c0000840 <strcat>
c000f90f:	83 c4 10             	add    esp,0x10
c000f912:	83 fb 02             	cmp    ebx,0x2
c000f915:	74 1a                	je     c000f931 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f917:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f91c:	a1 48 31 03 c0       	mov    eax,ds:0xc0033148
c000f921:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f925:	55                   	push   ebp
c000f926:	55                   	push   ebp
c000f927:	57                   	push   edi
c000f928:	56                   	push   esi
c000f929:	e8 12 0f ff ff       	call   c0000840 <strcat>
c000f92e:	83 c4 10             	add    esp,0x10
c000f931:	43                   	inc    ebx
c000f932:	83 fb 03             	cmp    ebx,0x3
c000f935:	0f 85 58 ff ff ff    	jne    c000f893 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f93b:	51                   	push   ecx
c000f93c:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f943:	6a 00                	push   0x0
c000f945:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f94c:	e8 9f 0b ff ff       	call   c00004f0 <memset>
c000f951:	89 34 24             	mov    DWORD PTR [esp],esi
c000f954:	e8 17 0c ff ff       	call   c0000570 <strlen>
c000f959:	83 c4 10             	add    esp,0x10
c000f95c:	40                   	inc    eax
c000f95d:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f964:	72 17                	jb     c000f97d <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f966:	52                   	push   edx
c000f967:	52                   	push   edx
c000f968:	56                   	push   esi
c000f969:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f970:	e8 cb 0c ff ff       	call   c0000640 <strcpy>
c000f975:	83 c4 10             	add    esp,0x10
c000f978:	e9 8a 00 00 00       	jmp    c000fa07 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f97d:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f984:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f98b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f98e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f990:	eb 75                	jmp    c000fa07 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f992:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f996:	89 ef                	mov    edi,ebp
c000f998:	50                   	push   eax
c000f999:	c1 ff 1f             	sar    edi,0x1f
c000f99c:	50                   	push   eax
c000f99d:	57                   	push   edi
c000f99e:	55                   	push   ebp
c000f99f:	e8 70 04 00 00       	call   c000fe14 <KeGetDigitsInNumber(long long)>
c000f9a4:	83 c4 10             	add    esp,0x10
c000f9a7:	48                   	dec    eax
c000f9a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9ac:	75 1c                	jne    c000f9ca <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f9ae:	83 f9 44             	cmp    ecx,0x44
c000f9b1:	75 09                	jne    c000f9bc <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f9b3:	80 3d 60 31 03 c0 00 	cmp    BYTE PTR ds:0xc0033160,0x0
c000f9ba:	eb 0c                	jmp    c000f9c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f9bc:	83 f9 4d             	cmp    ecx,0x4d
c000f9bf:	75 2b                	jne    c000f9ec <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f9c1:	80 3d 61 31 03 c0 00 	cmp    BYTE PTR ds:0xc0033161,0x0
c000f9c8:	74 22                	je     c000f9ec <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f9ca:	89 e8                	mov    eax,ebp
c000f9cc:	b9 0a 00 00 00       	mov    ecx,0xa
c000f9d1:	99                   	cdq    
c000f9d2:	f7 f9                	idiv   ecx
c000f9d4:	89 d5                	mov    ebp,edx
c000f9d6:	99                   	cdq    
c000f9d7:	f7 f9                	idiv   ecx
c000f9d9:	83 c2 30             	add    edx,0x30
c000f9dc:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f9e0:	8d 55 30             	lea    edx,[ebp+0x30]
c000f9e3:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f9e7:	e9 0d ff ff ff       	jmp    c000f8f9 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f9ec:	89 e8                	mov    eax,ebp
c000f9ee:	b9 0a 00 00 00       	mov    ecx,0xa
c000f9f3:	99                   	cdq    
c000f9f4:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f9f9:	f7 f9                	idiv   ecx
c000f9fb:	83 c2 30             	add    edx,0x30
c000f9fe:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000fa02:	e9 f7 fe ff ff       	jmp    c000f8fe <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000fa07:	81 c4 ac 00 00 00    	add    esp,0xac
c000fa0d:	5b                   	pop    ebx
c000fa0e:	5e                   	pop    esi
c000fa0f:	5f                   	pop    edi
c000fa10:	5d                   	pop    ebp
c000fa11:	c3                   	ret    

c000fa12 <KeFormatShortDate(char*, int, int, int, int)>:
c000fa12:	83 ec 14             	sub    esp,0x14
c000fa15:	6a 00                	push   0x0
c000fa17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa2b:	e8 f2 fd ff ff       	call   c000f822 <KeFormatDate(char*, int, int, int, int, bool)>
c000fa30:	83 c4 2c             	add    esp,0x2c
c000fa33:	c3                   	ret    

c000fa34 <KeFormatLongDate(char*, int, int, int, int)>:
c000fa34:	83 ec 14             	sub    esp,0x14
c000fa37:	6a 01                	push   0x1
c000fa39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa4d:	e8 d0 fd ff ff       	call   c000f822 <KeFormatDate(char*, int, int, int, int, bool)>
c000fa52:	83 c4 2c             	add    esp,0x2c
c000fa55:	c3                   	ret    

c000fa56 <KeSetLocale(klocale_t)>:
c000fa56:	57                   	push   edi
c000fa57:	b9 09 00 00 00       	mov    ecx,0x9
c000fa5c:	56                   	push   esi
c000fa5d:	bf 40 31 03 c0       	mov    edi,0xc0033140
c000fa62:	fc                   	cld    
c000fa63:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000fa67:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fa69:	5e                   	pop    esi
c000fa6a:	5f                   	pop    edi
c000fa6b:	c3                   	ret    

c000fa6c <KeInitialiseLocale()>:
c000fa6c:	57                   	push   edi
c000fa6d:	56                   	push   esi
c000fa6e:	83 ec 3c             	sub    esp,0x3c
c000fa71:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000fa79:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000fa81:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000fa89:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000fa91:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000fa98:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000faa0:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000faa8:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000faaf:	68 80 9c 02 c0       	push   0xc0029c80
c000fab4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fab8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fabc:	50                   	push   eax
c000fabd:	e8 7e 0b ff ff       	call   c0000640 <strcpy>
c000fac2:	83 ec 20             	sub    esp,0x20
c000fac5:	b9 09 00 00 00       	mov    ecx,0x9
c000faca:	fc                   	cld    
c000facb:	89 e7                	mov    edi,esp
c000facd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000facf:	e8 82 ff ff ff       	call   c000fa56 <KeSetLocale(klocale_t)>
c000fad4:	83 c4 64             	add    esp,0x64
c000fad7:	5e                   	pop    esi
c000fad8:	5f                   	pop    edi
c000fad9:	c3                   	ret    

c000fada <KeFormatCurrency(char*, int, long long, long long)>:
c000fada:	c3                   	ret    

c000fadb <KeFormatCurrency(char*, int, double)>:
c000fadb:	c3                   	ret    

c000fadc <KeFormatNumber(char*, long long, long long)>:
c000fadc:	c3                   	ret    

c000fadd <KeFormatNumber(char*, double)>:
c000fadd:	c3                   	ret    
c000fade:	66 90                	xchg   ax,ax

c000fae0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000fae0:	55                   	push   ebp
c000fae1:	57                   	push   edi
c000fae2:	56                   	push   esi
c000fae3:	53                   	push   ebx
c000fae4:	83 ec 5c             	sub    esp,0x5c
c000fae7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000faeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000faef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000faf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000faf7:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000fafb:	bb 2f 89 02 c0       	mov    ebx,0xc002892f
c000fb00:	bd 11 00 00 00       	mov    ebp,0x11
c000fb05:	89 d0                	mov    eax,edx
c000fb07:	83 e0 01             	and    eax,0x1
c000fb0a:	74 10                	je     c000fb1c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000fb0c:	8a 03                	mov    al,BYTE PTR [ebx]
c000fb0e:	88 02                	mov    BYTE PTR [edx],al
c000fb10:	8d 52 01             	lea    edx,[edx+0x1]
c000fb13:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000fb16:	83 ed 01             	sub    ebp,0x1
c000fb19:	8d 76 00             	lea    esi,[esi+0x0]
c000fb1c:	89 d0                	mov    eax,edx
c000fb1e:	83 e0 02             	and    eax,0x2
c000fb21:	74 11                	je     c000fb34 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000fb23:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000fb26:	66 89 02             	mov    WORD PTR [edx],ax
c000fb29:	8d 52 02             	lea    edx,[edx+0x2]
c000fb2c:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000fb2f:	83 ed 02             	sub    ebp,0x2
c000fb32:	66 90                	xchg   ax,ax
c000fb34:	89 e8                	mov    eax,ebp
c000fb36:	c1 e8 02             	shr    eax,0x2
c000fb39:	fc                   	cld    
c000fb3a:	89 d7                	mov    edi,edx
c000fb3c:	89 de                	mov    esi,ebx
c000fb3e:	89 c1                	mov    ecx,eax
c000fb40:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fb42:	89 f3                	mov    ebx,esi
c000fb44:	89 fa                	mov    edx,edi
c000fb46:	b9 00 00 00 00       	mov    ecx,0x0
c000fb4b:	89 e8                	mov    eax,ebp
c000fb4d:	83 e0 02             	and    eax,0x2
c000fb50:	74 0e                	je     c000fb60 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000fb52:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000fb56:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000fb5a:	8d 41 02             	lea    eax,[ecx+0x2]
c000fb5d:	89 c1                	mov    ecx,eax
c000fb5f:	90                   	nop
c000fb60:	89 e8                	mov    eax,ebp
c000fb62:	83 e0 01             	and    eax,0x1
c000fb65:	74 09                	je     c000fb70 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000fb67:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000fb6a:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000fb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb70:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000fb74:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000fb78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fb80:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000fb84:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000fb88:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000fb8d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fb91:	89 c2                	mov    edx,eax
c000fb93:	c1 fa 1f             	sar    edx,0x1f
c000fb96:	52                   	push   edx
c000fb97:	50                   	push   eax
c000fb98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fb9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fba0:	e8 8f 32 01 00       	call   c0022e34 <__udivdi3>
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000fbac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000fbb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbb4:	80 f4 00             	xor    ah,0x0
c000fbb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fbbb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fbbf:	80 f4 00             	xor    ah,0x0
c000fbc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbc6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fbca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fbce:	89 f8                	mov    eax,edi
c000fbd0:	09 f0                	or     eax,esi
c000fbd2:	74 04                	je     c000fbd8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000fbd4:	eb b2                	jmp    c000fb88 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000fbd6:	66 90                	xchg   ax,ax
c000fbd8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fbdc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbdf:	90                   	nop
c000fbe0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fbe4:	89 c1                	mov    ecx,eax
c000fbe6:	89 c3                	mov    ebx,eax
c000fbe8:	c1 fb 1f             	sar    ebx,0x1f
c000fbeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fbef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fbf3:	53                   	push   ebx
c000fbf4:	51                   	push   ecx
c000fbf5:	52                   	push   edx
c000fbf6:	50                   	push   eax
c000fbf7:	e8 38 33 01 00       	call   c0022f34 <__umoddi3>
c000fbfc:	83 c4 10             	add    esp,0x10
c000fbff:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000fc04:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000fc08:	01 c8                	add    eax,ecx
c000fc0a:	8a 10                	mov    dl,BYTE PTR [eax]
c000fc0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fc10:	88 10                	mov    BYTE PTR [eax],dl
c000fc12:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fc16:	89 c2                	mov    edx,eax
c000fc18:	c1 fa 1f             	sar    edx,0x1f
c000fc1b:	52                   	push   edx
c000fc1c:	50                   	push   eax
c000fc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc25:	e8 0a 32 01 00       	call   c0022e34 <__udivdi3>
c000fc2a:	83 c4 10             	add    esp,0x10
c000fc2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc39:	80 f4 00             	xor    ah,0x0
c000fc3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc44:	80 f4 00             	xor    ah,0x0
c000fc47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fc4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc4f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc53:	89 f8                	mov    eax,edi
c000fc55:	09 f0                	or     eax,esi
c000fc57:	74 03                	je     c000fc5c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000fc59:	eb 85                	jmp    c000fbe0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000fc5b:	90                   	nop
c000fc5c:	90                   	nop
c000fc5d:	83 c4 5c             	add    esp,0x5c
c000fc60:	5b                   	pop    ebx
c000fc61:	5e                   	pop    esi
c000fc62:	5f                   	pop    edi
c000fc63:	5d                   	pop    ebp
c000fc64:	c3                   	ret    
c000fc65:	8d 76 00             	lea    esi,[esi+0x0]

c000fc68 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000fc68:	55                   	push   ebp
c000fc69:	57                   	push   edi
c000fc6a:	56                   	push   esi
c000fc6b:	53                   	push   ebx
c000fc6c:	83 ec 5c             	sub    esp,0x5c
c000fc6f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000fc73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc77:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000fc7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc7f:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000fc83:	bb 2f 89 02 c0       	mov    ebx,0xc002892f
c000fc88:	bd 11 00 00 00       	mov    ebp,0x11
c000fc8d:	89 d0                	mov    eax,edx
c000fc8f:	83 e0 01             	and    eax,0x1
c000fc92:	74 10                	je     c000fca4 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000fc94:	8a 03                	mov    al,BYTE PTR [ebx]
c000fc96:	88 02                	mov    BYTE PTR [edx],al
c000fc98:	8d 52 01             	lea    edx,[edx+0x1]
c000fc9b:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000fc9e:	83 ed 01             	sub    ebp,0x1
c000fca1:	8d 76 00             	lea    esi,[esi+0x0]
c000fca4:	89 d0                	mov    eax,edx
c000fca6:	83 e0 02             	and    eax,0x2
c000fca9:	74 11                	je     c000fcbc <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000fcab:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000fcae:	66 89 02             	mov    WORD PTR [edx],ax
c000fcb1:	8d 52 02             	lea    edx,[edx+0x2]
c000fcb4:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000fcb7:	83 ed 02             	sub    ebp,0x2
c000fcba:	66 90                	xchg   ax,ax
c000fcbc:	89 e8                	mov    eax,ebp
c000fcbe:	c1 e8 02             	shr    eax,0x2
c000fcc1:	fc                   	cld    
c000fcc2:	89 d7                	mov    edi,edx
c000fcc4:	89 de                	mov    esi,ebx
c000fcc6:	89 c1                	mov    ecx,eax
c000fcc8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fcca:	89 f3                	mov    ebx,esi
c000fccc:	89 fa                	mov    edx,edi
c000fcce:	b9 00 00 00 00       	mov    ecx,0x0
c000fcd3:	89 e8                	mov    eax,ebp
c000fcd5:	83 e0 02             	and    eax,0x2
c000fcd8:	74 0e                	je     c000fce8 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000fcda:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000fcde:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000fce2:	8d 41 02             	lea    eax,[ecx+0x2]
c000fce5:	89 c1                	mov    ecx,eax
c000fce7:	90                   	nop
c000fce8:	89 e8                	mov    eax,ebp
c000fcea:	83 e0 01             	and    eax,0x1
c000fced:	74 09                	je     c000fcf8 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000fcef:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000fcf2:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000fcfc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000fd00:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fd05:	79 1d                	jns    c000fd24 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000fd07:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000fd0b:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000fd10:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000fd14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fd18:	8d 50 01             	lea    edx,[eax+0x1]
c000fd1b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000fd1f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000fd22:	66 90                	xchg   ax,ax
c000fd24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fd2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000fd30:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000fd34:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000fd39:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fd3d:	89 c2                	mov    edx,eax
c000fd3f:	c1 fa 1f             	sar    edx,0x1f
c000fd42:	52                   	push   edx
c000fd43:	50                   	push   eax
c000fd44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fd48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fd4c:	e8 e3 30 01 00       	call   c0022e34 <__udivdi3>
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000fd58:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000fd5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fd60:	80 f4 00             	xor    ah,0x0
c000fd63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd67:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fd6b:	80 f4 00             	xor    ah,0x0
c000fd6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd72:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fd76:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd7a:	89 f8                	mov    eax,edi
c000fd7c:	09 f0                	or     eax,esi
c000fd7e:	74 04                	je     c000fd84 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000fd80:	eb b2                	jmp    c000fd34 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000fd82:	66 90                	xchg   ax,ax
c000fd84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fd88:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fd8b:	90                   	nop
c000fd8c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fd90:	89 c1                	mov    ecx,eax
c000fd92:	89 c3                	mov    ebx,eax
c000fd94:	c1 fb 1f             	sar    ebx,0x1f
c000fd97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fd9f:	53                   	push   ebx
c000fda0:	51                   	push   ecx
c000fda1:	52                   	push   edx
c000fda2:	50                   	push   eax
c000fda3:	e8 0c 2f 01 00       	call   c0022cb4 <__moddi3>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000fdb0:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000fdb4:	01 c8                	add    eax,ecx
c000fdb6:	8a 10                	mov    dl,BYTE PTR [eax]
c000fdb8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fdbc:	88 10                	mov    BYTE PTR [eax],dl
c000fdbe:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fdc2:	89 c2                	mov    edx,eax
c000fdc4:	c1 fa 1f             	sar    edx,0x1f
c000fdc7:	52                   	push   edx
c000fdc8:	50                   	push   eax
c000fdc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdcd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdd1:	e8 92 2d 01 00       	call   c0022b68 <__divdi3>
c000fdd6:	83 c4 10             	add    esp,0x10
c000fdd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fddd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fde1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fde5:	80 f4 00             	xor    ah,0x0
c000fde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fdec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fdf0:	80 f4 00             	xor    ah,0x0
c000fdf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fdf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdfb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fdff:	89 f8                	mov    eax,edi
c000fe01:	09 f0                	or     eax,esi
c000fe03:	74 03                	je     c000fe08 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000fe05:	eb 85                	jmp    c000fd8c <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000fe07:	90                   	nop
c000fe08:	90                   	nop
c000fe09:	83 c4 5c             	add    esp,0x5c
c000fe0c:	5b                   	pop    ebx
c000fe0d:	5e                   	pop    esi
c000fe0e:	5f                   	pop    edi
c000fe0f:	5d                   	pop    ebp
c000fe10:	c3                   	ret    
c000fe11:	8d 76 00             	lea    esi,[esi+0x0]

c000fe14 <KeGetDigitsInNumber(long long)>:
c000fe14:	56                   	push   esi
c000fe15:	53                   	push   ebx
c000fe16:	83 ec 24             	sub    esp,0x24
c000fe19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe29:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fe31:	8d 76 00             	lea    esi,[esi+0x0]
c000fe34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe38:	80 f4 00             	xor    ah,0x0
c000fe3b:	89 c3                	mov    ebx,eax
c000fe3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe41:	80 f4 00             	xor    ah,0x0
c000fe44:	89 c6                	mov    esi,eax
c000fe46:	89 f0                	mov    eax,esi
c000fe48:	09 d8                	or     eax,ebx
c000fe4a:	74 28                	je     c000fe74 <KeGetDigitsInNumber(long long)+0x60>
c000fe4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe54:	6a 00                	push   0x0
c000fe56:	6a 0a                	push   0xa
c000fe58:	52                   	push   edx
c000fe59:	50                   	push   eax
c000fe5a:	e8 09 2d 01 00       	call   c0022b68 <__divdi3>
c000fe5f:	83 c4 10             	add    esp,0x10
c000fe62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe6a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fe6f:	eb c3                	jmp    c000fe34 <KeGetDigitsInNumber(long long)+0x20>
c000fe71:	8d 76 00             	lea    esi,[esi+0x0]
c000fe74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe78:	83 c4 24             	add    esp,0x24
c000fe7b:	5b                   	pop    ebx
c000fe7c:	5e                   	pop    esi
c000fe7d:	c3                   	ret    
c000fe7e:	66 90                	xchg   ax,ax

c000fe80 <KeItoa(unsigned long long, char*)>:
c000fe80:	83 ec 1c             	sub    esp,0x1c
c000fe83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe93:	6a 0a                	push   0xa
c000fe95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fea1:	e8 3a fc ff ff       	call   c000fae0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fea6:	83 c4 10             	add    esp,0x10
c000fea9:	90                   	nop
c000feaa:	83 c4 1c             	add    esp,0x1c
c000fead:	c3                   	ret    
c000feae:	66 90                	xchg   ax,ax

c000feb0 <KeItoa(long long, char*)>:
c000feb0:	83 ec 1c             	sub    esp,0x1c
c000feb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000febb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000febf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fec3:	6a 0a                	push   0xa
c000fec5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fec9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fed1:	e8 92 fd ff ff       	call   c000fc68 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	90                   	nop
c000feda:	83 c4 1c             	add    esp,0x1c
c000fedd:	c3                   	ret    
c000fede:	66 90                	xchg   ax,ax

c000fee0 <KeXtoa(unsigned long long, char*)>:
c000fee0:	83 ec 1c             	sub    esp,0x1c
c000fee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fee7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000feeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fef3:	6a 10                	push   0x10
c000fef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fef9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fefd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ff01:	e8 da fb ff ff       	call   c000fae0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000ff06:	83 c4 10             	add    esp,0x10
c000ff09:	90                   	nop
c000ff0a:	83 c4 1c             	add    esp,0x1c
c000ff0d:	c3                   	ret    

c000ff0e <sbrk>:
c000ff0e:	55                   	push   ebp
c000ff0f:	57                   	push   edi
c000ff10:	56                   	push   esi
c000ff11:	53                   	push   ebx
c000ff12:	83 ec 1c             	sub    esp,0x1c
c000ff15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff19:	85 c0                	test   eax,eax
c000ff1b:	74 61                	je     c000ff7e <sbrk+0x70>
c000ff1d:	78 66                	js     c000ff85 <sbrk+0x77>
c000ff1f:	8b 15 70 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d370
c000ff25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff29:	05 ff 0f 00 00       	add    eax,0xfff
c000ff2e:	89 c5                	mov    ebp,eax
c000ff30:	78 6b                	js     c000ff9d <sbrk+0x8f>
c000ff32:	c1 fd 0c             	sar    ebp,0xc
c000ff35:	bb 00 00 00 00       	mov    ebx,0x0
c000ff3a:	8b 35 90 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033290
c000ff40:	8b 3d 70 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d370
c000ff46:	e8 b9 07 00 00       	call   c0010704 <Phys::allocatePage()>
c000ff4b:	68 01 04 00 00       	push   0x401
c000ff50:	57                   	push   edi
c000ff51:	50                   	push   eax
c000ff52:	56                   	push   esi
c000ff53:	e8 32 42 00 00       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ff58:	81 05 70 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d370,0x1000
c000ff62:	83 c3 01             	add    ebx,0x1
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	39 dd                	cmp    ebp,ebx
c000ff6a:	75 ce                	jne    c000ff3a <sbrk+0x2c>
c000ff6c:	0f 20 d8             	mov    eax,cr3
c000ff6f:	0f 22 d8             	mov    cr3,eax
c000ff72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff76:	83 c4 1c             	add    esp,0x1c
c000ff79:	5b                   	pop    ebx
c000ff7a:	5e                   	pop    esi
c000ff7b:	5f                   	pop    edi
c000ff7c:	5d                   	pop    ebp
c000ff7d:	c3                   	ret    
c000ff7e:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c000ff83:	eb f1                	jmp    c000ff76 <sbrk+0x68>
c000ff85:	83 ec 08             	sub    esp,0x8
c000ff88:	50                   	push   eax
c000ff89:	68 84 9c 02 c0       	push   0xc0029c84
c000ff8e:	e8 e9 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ff93:	83 c4 10             	add    esp,0x10
c000ff96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff9b:	eb d9                	jmp    c000ff76 <sbrk+0x68>
c000ff9d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000ffa3:	eb 8d                	jmp    c000ff32 <sbrk+0x24>

c000ffa5 <sbrk_thunk>:
c000ffa5:	83 ec 0c             	sub    esp,0xc
c000ffa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffac:	3d ff bf 00 00       	cmp    eax,0xbfff
c000ffb1:	7f 10                	jg     c000ffc3 <sbrk_thunk+0x1e>
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	50                   	push   eax
c000ffb7:	e8 52 ff ff ff       	call   c000ff0e <sbrk>
c000ffbc:	83 c4 10             	add    esp,0x10
c000ffbf:	83 c4 0c             	add    esp,0xc
c000ffc2:	c3                   	ret    
c000ffc3:	83 ec 08             	sub    esp,0x8
c000ffc6:	50                   	push   eax
c000ffc7:	68 b4 9c 02 c0       	push   0xc0029cb4
c000ffcc:	e8 ab 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ffd9:	eb e4                	jmp    c000ffbf <sbrk_thunk+0x1a>

c000ffdb <mmap>:
c000ffdb:	55                   	push   ebp
c000ffdc:	57                   	push   edi
c000ffdd:	56                   	push   esi
c000ffde:	53                   	push   ebx
c000ffdf:	83 ec 18             	sub    esp,0x18
c000ffe2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffe6:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000ffec:	89 fb                	mov    ebx,edi
c000ffee:	c1 eb 0c             	shr    ebx,0xc
c000fff1:	53                   	push   ebx
c000fff2:	e8 b0 3a 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000fff7:	89 c5                	mov    ebp,eax
c000fff9:	83 c4 10             	add    esp,0x10
c000fffc:	85 db                	test   ebx,ebx
c000fffe:	7e 2f                	jle    c001002f <mmap+0x54>
c0010000:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0010006:	01 c7                	add    edi,eax
c0010008:	89 c3                	mov    ebx,eax
c001000a:	8b 35 90 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033290
c0010010:	e8 ef 06 00 00       	call   c0010704 <Phys::allocatePage()>
c0010015:	68 01 04 00 00       	push   0x401
c001001a:	53                   	push   ebx
c001001b:	50                   	push   eax
c001001c:	56                   	push   esi
c001001d:	e8 68 41 00 00       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0010022:	81 c3 00 10 00 00    	add    ebx,0x1000
c0010028:	83 c4 10             	add    esp,0x10
c001002b:	39 fb                	cmp    ebx,edi
c001002d:	75 db                	jne    c001000a <mmap+0x2f>
c001002f:	89 e8                	mov    eax,ebp
c0010031:	83 c4 0c             	add    esp,0xc
c0010034:	5b                   	pop    ebx
c0010035:	5e                   	pop    esi
c0010036:	5f                   	pop    edi
c0010037:	5d                   	pop    ebp
c0010038:	c3                   	ret    

c0010039 <munmap>:
c0010039:	83 ec 18             	sub    esp,0x18
c001003c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010040:	e8 6a 3d 00 00       	call   c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c0010045:	b8 00 00 00 00       	mov    eax,0x0
c001004a:	83 c4 1c             	add    esp,0x1c
c001004d:	c3                   	ret    

c001004e <liballoc_lock()>:
c001004e:	fa                   	cli    
c001004f:	83 05 30 33 03 c0 01 	add    DWORD PTR ds:0xc0033330,0x1
c0010056:	b8 00 00 00 00       	mov    eax,0x0
c001005b:	c3                   	ret    

c001005c <liballoc_unlock()>:
c001005c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0010064:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c001006b:	75 01                	jne    c001006e <liballoc_unlock()+0x12>
c001006d:	fb                   	sti    
c001006e:	b8 00 00 00 00       	mov    eax,0x0
c0010073:	c3                   	ret    

c0010074 <liballoc_alloc(int)>:
c0010074:	83 ec 10             	sub    esp,0x10
c0010077:	6a 01                	push   0x1
c0010079:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001007d:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c0010083:	e8 06 42 00 00       	call   c001428e <VAS::allocatePages(int, int)>
c0010088:	83 c4 1c             	add    esp,0x1c
c001008b:	c3                   	ret    

c001008c <liballoc_free(void*, int)>:
c001008c:	83 ec 14             	sub    esp,0x14
c001008f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010093:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c0010099:	e8 4e 3e 00 00       	call   c0013eec <VAS::freeAllocatedPages(unsigned long)>
c001009e:	b8 00 00 00 00       	mov    eax,0x0
c00100a3:	83 c4 1c             	add    esp,0x1c
c00100a6:	c3                   	ret    

c00100a7 <realloc>:
c00100a7:	83 ec 14             	sub    esp,0x14
c00100aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b2:	e8 a0 16 ff ff       	call   c0001757 <dlrealloc>
c00100b7:	83 c4 1c             	add    esp,0x1c
c00100ba:	c3                   	ret    

c00100bb <malloc>:
c00100bb:	83 ec 18             	sub    esp,0x18
c00100be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c2:	e8 53 11 ff ff       	call   c000121a <dlmalloc>
c00100c7:	83 c4 1c             	add    esp,0x1c
c00100ca:	c3                   	ret    

c00100cb <free>:
c00100cb:	83 ec 18             	sub    esp,0x18
c00100ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100d2:	e8 7c 0c ff ff       	call   c0000d53 <dlfree>
c00100d7:	83 c4 1c             	add    esp,0x1c
c00100da:	c3                   	ret    

c00100db <rfree>:
c00100db:	83 ec 18             	sub    esp,0x18
c00100de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100e2:	e8 6c 0c ff ff       	call   c0000d53 <dlfree>
c00100e7:	83 c4 1c             	add    esp,0x1c
c00100ea:	c3                   	ret    

c00100eb <calloc>:
c00100eb:	56                   	push   esi
c00100ec:	53                   	push   ebx
c00100ed:	83 ec 10             	sub    esp,0x10
c00100f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00100f4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00100f9:	53                   	push   ebx
c00100fa:	e8 bc ff ff ff       	call   c00100bb <malloc>
c00100ff:	89 c6                	mov    esi,eax
c0010101:	83 c4 0c             	add    esp,0xc
c0010104:	53                   	push   ebx
c0010105:	6a 00                	push   0x0
c0010107:	50                   	push   eax
c0010108:	e8 e3 03 ff ff       	call   c00004f0 <memset>
c001010d:	89 f0                	mov    eax,esi
c001010f:	83 c4 14             	add    esp,0x14
c0010112:	5b                   	pop    ebx
c0010113:	5e                   	pop    esi
c0010114:	c3                   	ret    
c0010115:	66 90                	xchg   ax,ax
c0010117:	90                   	nop

c0010118 <KeMailboxTryPost(Mailbox*, void*)>:
c0010118:	83 ec 10             	sub    esp,0x10
c001011b:	fa                   	cli    
c001011c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010121:	83 c0 01             	add    eax,0x1
c0010124:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0010129:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001012e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010135:	85 c0                	test   eax,eax
c0010137:	75 23                	jne    c001015c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c0010139:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001013d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010141:	89 10                	mov    DWORD PTR [eax],edx
c0010143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010147:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001014a:	8d 50 01             	lea    edx,[eax+0x1]
c001014d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010151:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010154:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0010159:	8d 76 00             	lea    esi,[esi+0x0]
c001015c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0010164:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010169:	85 c0                	test   eax,eax
c001016b:	75 03                	jne    c0010170 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c001016d:	fb                   	sti    
c001016e:	66 90                	xchg   ax,ax
c0010170:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010174:	83 c4 10             	add    esp,0x10
c0010177:	c3                   	ret    

c0010178 <KeMailboxTryGet(Mailbox*, void**)>:
c0010178:	83 ec 10             	sub    esp,0x10
c001017b:	fa                   	cli    
c001017c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010181:	83 c0 01             	add    eax,0x1
c0010184:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0010189:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001018e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010192:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010195:	83 f8 01             	cmp    eax,0x1
c0010198:	75 22                	jne    c00101bc <KeMailboxTryGet(Mailbox*, void**)+0x44>
c001019a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001019e:	8b 10                	mov    edx,DWORD PTR [eax]
c00101a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00101a4:	89 10                	mov    DWORD PTR [eax],edx
c00101a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101ad:	8d 50 ff             	lea    edx,[eax-0x1]
c00101b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00101b7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00101bc:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00101c4:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00101c9:	85 c0                	test   eax,eax
c00101cb:	75 03                	jne    c00101d0 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c00101cd:	fb                   	sti    
c00101ce:	66 90                	xchg   ax,ax
c00101d0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00101d4:	83 c4 10             	add    esp,0x10
c00101d7:	c3                   	ret    

c00101d8 <KeMailboxCreate()>:
c00101d8:	83 ec 1c             	sub    esp,0x1c
c00101db:	83 ec 0c             	sub    esp,0xc
c00101de:	6a 08                	push   0x8
c00101e0:	e8 d6 fe ff ff       	call   c00100bb <malloc>
c00101e5:	83 c4 10             	add    esp,0x10
c00101e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00101f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010201:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010205:	83 c4 1c             	add    esp,0x1c
c0010208:	c3                   	ret    
c0010209:	8d 76 00             	lea    esi,[esi+0x0]

c001020c <KeMailboxPost(Mailbox*, void*)>:
c001020c:	83 ec 1c             	sub    esp,0x1c
c001020f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010214:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010218:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001021c:	e8 f7 fe ff ff       	call   c0010118 <KeMailboxTryPost(Mailbox*, void*)>
c0010221:	83 c4 08             	add    esp,0x8
c0010224:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010228:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001022c:	83 f0 01             	xor    eax,0x1
c001022f:	0f b6 c0             	movzx  eax,al
c0010232:	85 c0                	test   eax,eax
c0010234:	74 26                	je     c001025c <KeMailboxPost(Mailbox*, void*)+0x50>
c0010236:	fa                   	cli    
c0010237:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001023c:	83 c0 01             	add    eax,0x1
c001023f:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0010244:	e8 5f 6e 00 00       	call   c00170a8 <schedule()>
c0010249:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0010251:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010256:	85 c0                	test   eax,eax
c0010258:	75 02                	jne    c001025c <KeMailboxPost(Mailbox*, void*)+0x50>
c001025a:	fb                   	sti    
c001025b:	90                   	nop
c001025c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0010261:	85 c0                	test   eax,eax
c0010263:	75 03                	jne    c0010268 <KeMailboxPost(Mailbox*, void*)+0x5c>
c0010265:	eb ad                	jmp    c0010214 <KeMailboxPost(Mailbox*, void*)+0x8>
c0010267:	90                   	nop
c0010268:	90                   	nop
c0010269:	83 c4 1c             	add    esp,0x1c
c001026c:	c3                   	ret    
c001026d:	8d 76 00             	lea    esi,[esi+0x0]

c0010270 <KeMailboxGet(Mailbox*, void**)>:
c0010270:	83 ec 1c             	sub    esp,0x1c
c0010273:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010278:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001027c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010280:	e8 f3 fe ff ff       	call   c0010178 <KeMailboxTryGet(Mailbox*, void**)>
c0010285:	83 c4 08             	add    esp,0x8
c0010288:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001028c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010290:	83 f0 01             	xor    eax,0x1
c0010293:	0f b6 c0             	movzx  eax,al
c0010296:	85 c0                	test   eax,eax
c0010298:	74 26                	je     c00102c0 <KeMailboxGet(Mailbox*, void**)+0x50>
c001029a:	fa                   	cli    
c001029b:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00102a0:	83 c0 01             	add    eax,0x1
c00102a3:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00102a8:	e8 fb 6d 00 00       	call   c00170a8 <schedule()>
c00102ad:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00102b5:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00102ba:	85 c0                	test   eax,eax
c00102bc:	75 02                	jne    c00102c0 <KeMailboxGet(Mailbox*, void**)+0x50>
c00102be:	fb                   	sti    
c00102bf:	90                   	nop
c00102c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00102c5:	85 c0                	test   eax,eax
c00102c7:	75 03                	jne    c00102cc <KeMailboxGet(Mailbox*, void**)+0x5c>
c00102c9:	eb ad                	jmp    c0010278 <KeMailboxGet(Mailbox*, void**)+0x8>
c00102cb:	90                   	nop
c00102cc:	90                   	nop
c00102cd:	83 c4 1c             	add    esp,0x1c
c00102d0:	c3                   	ret    
c00102d1:	8d 76 00             	lea    esi,[esi+0x0]

c00102d4 <KeMailboxDestroy(Mailbox*)>:
c00102d4:	83 ec 0c             	sub    esp,0xc
c00102d7:	83 ec 0c             	sub    esp,0xc
c00102da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102de:	e8 e8 fd ff ff       	call   c00100cb <free>
c00102e3:	83 c4 10             	add    esp,0x10
c00102e6:	90                   	nop
c00102e7:	83 c4 0c             	add    esp,0xc
c00102ea:	c3                   	ret    

c00102eb <KeFirstTask()>:
c00102eb:	53                   	push   ebx
c00102ec:	83 ec 08             	sub    esp,0x8
c00102ef:	fb                   	sti    
c00102f0:	e8 7a a5 00 00       	call   c001a86f <HalEnableNMI()>
c00102f5:	83 ec 0c             	sub    esp,0xc
c00102f8:	68 c3 9c 02 c0       	push   0xc0029cc3
c00102fd:	e8 1b d8 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0010302:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c0010309:	e8 ad fd ff ff       	call   c00100bb <malloc>
c001030e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0010315:	89 c3                	mov    ebx,eax
c0010317:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001031c:	50                   	push   eax
c001031d:	68 dc 9c 02 c0       	push   0xc0029cdc
c0010322:	6a 01                	push   0x1
c0010324:	53                   	push   ebx
c0010325:	e8 72 68 00 00       	call   c0016b9c <Process::Process(bool, char const*, Process*, char**)>
c001032a:	83 c4 20             	add    esp,0x20
c001032d:	68 ff 00 00 00       	push   0xff
c0010332:	6a 00                	push   0x0
c0010334:	68 fb f2 00 c0       	push   0xc000f2fb
c0010339:	53                   	push   ebx
c001033a:	e8 9d 6a 00 00       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c001033f:	8b 15 58 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033358
c0010345:	6a 7a                	push   0x7a
c0010347:	6a 00                	push   0x0
c0010349:	68 90 77 01 c0       	push   0xc0017790
c001034e:	52                   	push   edx
c001034f:	e8 88 6a 00 00       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c0010354:	83 c4 14             	add    esp,0x14
c0010357:	a3 10 33 03 c0       	mov    ds:0xc0033310,eax
c001035c:	68 64 9d 02 c0       	push   0xc0029d64
c0010361:	e8 b7 d7 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0010366:	c6 05 0d 31 03 c0 01 	mov    BYTE PTR ds:0xc003310d,0x1
c001036d:	e8 e9 0b 00 00       	call   c0010f5b <KeInitRand()>
c0010372:	e8 9f 78 00 00       	call   c0017c16 <Vm::initialise8086()>
c0010377:	e8 18 83 ff ff       	call   c0008694 <Fs::initVFS()>
c001037c:	c7 04 24 31 99 02 c0 	mov    DWORD PTR [esp],0xc0029931
c0010383:	e8 95 d7 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0010388:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001038d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0010393:	8b 10                	mov    edx,DWORD PTR [eax]
c0010395:	6a 00                	push   0x0
c0010397:	6a 00                	push   0x0
c0010399:	6a 00                	push   0x0
c001039b:	50                   	push   eax
c001039c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001039f:	83 c4 14             	add    esp,0x14
c00103a2:	68 64 9d 02 c0       	push   0xc0029d64
c00103a7:	e8 71 d7 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00103ac:	e8 c7 7a ff ff       	call   c0007e78 <KeInitialiseSymlinks()>
c00103b1:	e8 b6 ea ff ff       	call   c000ee6c <KeLoadSystemEnv()>
c00103b6:	e8 e5 09 00 00       	call   c0010da0 <KeSetupPowerManager()>
c00103bb:	c7 04 24 e9 9c 02 c0 	mov    DWORD PTR [esp],0xc0029ce9
c00103c2:	e8 56 d7 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00103c7:	83 c4 0c             	add    esp,0xc
c00103ca:	8b 0d 08 31 03 c0    	mov    ecx,DWORD PTR ds:0xc0033108
c00103d0:	6a 00                	push   0x0
c00103d2:	51                   	push   ecx
c00103d3:	68 fa 9c 02 c0       	push   0xc0029cfa
c00103d8:	e8 2f 63 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c00103dd:	83 c4 10             	add    esp,0x10
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	6a 02                	push   0x2
c00103e5:	e8 7e 6d 00 00       	call   c0017168 <blockTask(TaskState)>
c00103ea:	83 c4 10             	add    esp,0x10
c00103ed:	eb f1                	jmp    c00103e0 <KeFirstTask()+0xf5>

c00103ef <KeEntryPoint>:
c00103ef:	57                   	push   edi
c00103f0:	bf f9 03 00 00       	mov    edi,0x3f9
c00103f5:	56                   	push   esi
c00103f6:	31 f6                	xor    esi,esi
c00103f8:	53                   	push   ebx
c00103f9:	83 ec 20             	sub    esp,0x20
c00103fc:	e8 df d6 ff ff       	call   c000dae0 <KeInitialiseBootConfigurationFlags()>
c0010401:	89 f0                	mov    eax,esi
c0010403:	89 fa                	mov    edx,edi
c0010405:	ee                   	out    dx,al
c0010406:	bb fb 03 00 00       	mov    ebx,0x3fb
c001040b:	b0 80                	mov    al,0x80
c001040d:	89 da                	mov    edx,ebx
c001040f:	ee                   	out    dx,al
c0010410:	b1 03                	mov    cl,0x3
c0010412:	ba f8 03 00 00       	mov    edx,0x3f8
c0010417:	88 c8                	mov    al,cl
c0010419:	ee                   	out    dx,al
c001041a:	89 f0                	mov    eax,esi
c001041c:	89 fa                	mov    edx,edi
c001041e:	ee                   	out    dx,al
c001041f:	88 c8                	mov    al,cl
c0010421:	89 da                	mov    edx,ebx
c0010423:	ee                   	out    dx,al
c0010424:	b0 c7                	mov    al,0xc7
c0010426:	ba fa 03 00 00       	mov    edx,0x3fa
c001042b:	ee                   	out    dx,al
c001042c:	b0 0b                	mov    al,0xb
c001042e:	ba fc 03 00 00       	mov    edx,0x3fc
c0010433:	ee                   	out    dx,al
c0010434:	83 ec 0c             	sub    esp,0xc
c0010437:	68 16 9d 02 c0       	push   0xc0029d16
c001043c:	e8 3b 6b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010441:	e8 a8 d6 ff ff       	call   c000daee <KeDisplaySplashScreen()>
c0010446:	a1 24 05 00 00       	mov    eax,ds:0x524
c001044b:	05 ff 0f 00 00       	add    eax,0xfff
c0010450:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010455:	89 04 24             	mov    DWORD PTR [esp],eax
c0010458:	e8 41 04 00 00       	call   c001089e <Phys::physicalMemorySetup(unsigned int)>
c001045d:	e8 23 38 00 00       	call   c0013c85 <Virt::virtualMemorySetup()>
c0010462:	e8 d7 d5 ff ff       	call   c000da3e <KeInitialiseAtexit()>
c0010467:	58                   	pop    eax
c0010468:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c001046c:	53                   	push   ebx
c001046d:	e8 fa 3a 00 00       	call   c0013f6c <VAS::VAS()>
c0010472:	89 1d 90 32 03 c0    	mov    DWORD PTR ds:0xc0033290,ebx
c0010478:	e8 ab 64 01 00       	call   c0026928 <_init>
c001047d:	c7 04 24 2d 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d2d
c0010484:	e8 94 d6 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0010489:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c0010490:	e8 26 fc ff ff       	call   c00100bb <malloc>
c0010495:	89 04 24             	mov    DWORD PTR [esp],eax
c0010498:	89 c6                	mov    esi,eax
c001049a:	e8 05 e4 ff ff       	call   c000e8a4 <Computer::Computer()>
c001049f:	8b 15 90 32 03 c0    	mov    edx,DWORD PTR ds:0xc0033290
c00104a5:	89 35 08 31 03 c0    	mov    DWORD PTR ds:0xc0033108,esi
c00104ab:	52                   	push   edx
c00104ac:	6a 00                	push   0x0
c00104ae:	6a 00                	push   0x0
c00104b0:	56                   	push   esi
c00104b1:	e8 32 e4 ff ff       	call   c000e8e8 <Computer::open(int, int, void*)>
c00104b6:	83 c4 14             	add    esp,0x14
c00104b9:	68 88 9d 02 c0       	push   0xc0029d88
c00104be:	e8 5a d6 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00104c3:	e8 2d ab 00 00       	call   c001aff5 <HalInitialiseCoprocessor()>
c00104c8:	c7 04 24 47 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d47
c00104cf:	e8 49 d6 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00104d4:	c7 04 24 eb 02 01 c0 	mov    DWORD PTR [esp],0xc00102eb
c00104db:	e8 80 6a 00 00       	call   c0016f60 <setupMultitasking(void (*)())>
c00104e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104e3:	e8 3a 3b 00 00       	call   c0014022 <VAS::~VAS()>
c00104e8:	83 c4 30             	add    esp,0x30
c00104eb:	5b                   	pop    ebx
c00104ec:	5e                   	pop    esi
c00104ed:	5f                   	pop    edi
c00104ee:	c3                   	ret    
c00104ef:	90                   	nop

c00104f0 <Mutex::Mutex()>:
c00104f0:	83 ec 0c             	sub    esp,0xc
c00104f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f7:	83 ec 08             	sub    esp,0x8
c00104fa:	6a 01                	push   0x1
c00104fc:	50                   	push   eax
c00104fd:	e8 fa 0c 00 00       	call   c00111fc <Semaphore::Semaphore(int)>
c0010502:	83 c4 10             	add    esp,0x10
c0010505:	90                   	nop
c0010506:	83 c4 0c             	add    esp,0xc
c0010509:	c3                   	ret    

c001050a <KeIsKernelInPanic()>:
c001050a:	a0 64 31 03 c0       	mov    al,ds:0xc0033164
c001050f:	c3                   	ret    

c0010510 <KePanic(char const*)>:
c0010510:	c6 05 64 31 03 c0 01 	mov    BYTE PTR ds:0xc0033164,0x1
c0010517:	e9 77 ab 00 00       	jmp    c001b093 <HalPanic(char const*)>

c001051c <Phys::allocateDMA(unsigned long)>:
c001051c:	55                   	push   ebp
c001051d:	31 ed                	xor    ebp,ebp
c001051f:	57                   	push   edi
c0010520:	56                   	push   esi
c0010521:	53                   	push   ebx
c0010522:	31 db                	xor    ebx,ebx
c0010524:	83 ec 1c             	sub    esp,0x1c
c0010527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001052b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010533:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010539:	31 c0                	xor    eax,eax
c001053b:	c1 ef 0c             	shr    edi,0xc
c001053e:	eb 1b                	jmp    c001055b <Phys::allocateDMA(unsigned long)+0x3f>
c0010540:	85 c0                	test   eax,eax
c0010542:	75 06                	jne    c001054a <Phys::allocateDMA(unsigned long)+0x2e>
c0010544:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010548:	89 dd                	mov    ebp,ebx
c001054a:	8d 70 01             	lea    esi,[eax+0x1]
c001054d:	39 f7                	cmp    edi,esi
c001054f:	74 37                	je     c0010588 <Phys::allocateDMA(unsigned long)+0x6c>
c0010551:	89 f0                	mov    eax,esi
c0010553:	83 c3 01             	add    ebx,0x1
c0010556:	83 fb 0f             	cmp    ebx,0xf
c0010559:	7f 13                	jg     c001056e <Phys::allocateDMA(unsigned long)+0x52>
c001055b:	80 bb 80 31 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffcce80],0x0
c0010562:	74 dc                	je     c0010540 <Phys::allocateDMA(unsigned long)+0x24>
c0010564:	31 c0                	xor    eax,eax
c0010566:	83 c3 01             	add    ebx,0x1
c0010569:	83 fb 0f             	cmp    ebx,0xf
c001056c:	7e ed                	jle    c001055b <Phys::allocateDMA(unsigned long)+0x3f>
c001056e:	83 ec 0c             	sub    esp,0xc
c0010571:	68 ac 9d 02 c0       	push   0xc0029dac
c0010576:	e8 95 ff ff ff       	call   c0010510 <KePanic(char const*)>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	31 c0                	xor    eax,eax
c0010580:	83 c4 1c             	add    esp,0x1c
c0010583:	5b                   	pop    ebx
c0010584:	5e                   	pop    esi
c0010585:	5f                   	pop    edi
c0010586:	5d                   	pop    ebp
c0010587:	c3                   	ret    
c0010588:	89 e9                	mov    ecx,ebp
c001058a:	c1 f9 04             	sar    ecx,0x4
c001058d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010591:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0010595:	89 ca                	mov    edx,ecx
c0010597:	83 ea 01             	sub    edx,0x1
c001059a:	79 03                	jns    c001059f <Phys::allocateDMA(unsigned long)+0x83>
c001059c:	8d 51 0e             	lea    edx,[ecx+0xe]
c001059f:	c1 fa 04             	sar    edx,0x4
c00105a2:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00105a6:	74 08                	je     c00105b0 <Phys::allocateDMA(unsigned long)+0x94>
c00105a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00105ac:	31 c0                	xor    eax,eax
c00105ae:	eb b6                	jmp    c0010566 <Phys::allocateDMA(unsigned long)+0x4a>
c00105b0:	85 f6                	test   esi,esi
c00105b2:	74 17                	je     c00105cb <Phys::allocateDMA(unsigned long)+0xaf>
c00105b4:	8d 95 80 31 03 c0    	lea    edx,[ebp-0x3ffcce80]
c00105ba:	8d 84 05 81 31 03 c0 	lea    eax,[ebp+eax*1-0x3ffcce7f]
c00105c1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00105c4:	83 c2 01             	add    edx,0x1
c00105c7:	39 d0                	cmp    eax,edx
c00105c9:	75 f6                	jne    c00105c1 <Phys::allocateDMA(unsigned long)+0xa5>
c00105cb:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c00105d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105d4:	01 f8                	add    eax,edi
c00105d6:	85 d2                	test   edx,edx
c00105d8:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c00105dd:	74 17                	je     c00105f6 <Phys::allocateDMA(unsigned long)+0xda>
c00105df:	83 ec 0c             	sub    esp,0xc
c00105e2:	68 ac 9d 02 c0       	push   0xc0029dac
c00105e7:	e8 24 ff ff ff       	call   c0010510 <KePanic(char const*)>
c00105ec:	83 c4 10             	add    esp,0x10
c00105ef:	89 f0                	mov    eax,esi
c00105f1:	e9 5d ff ff ff       	jmp    c0010553 <Phys::allocateDMA(unsigned long)+0x37>
c00105f6:	c1 e5 0c             	shl    ebp,0xc
c00105f9:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00105ff:	e9 7c ff ff ff       	jmp    c0010580 <Phys::allocateDMA(unsigned long)+0x64>

c0010604 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010608:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001060e:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c0010613:	c1 ea 0c             	shr    edx,0xc
c0010616:	29 d0                	sub    eax,edx
c0010618:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c001061d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010621:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0010626:	c1 e8 0c             	shr    eax,0xc
c0010629:	85 d2                	test   edx,edx
c001062b:	74 11                	je     c001063e <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c001062d:	05 80 31 03 c0       	add    eax,0xc0033180
c0010632:	01 c2                	add    edx,eax
c0010634:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010637:	83 c0 01             	add    eax,0x1
c001063a:	39 d0                	cmp    eax,edx
c001063c:	75 f6                	jne    c0010634 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001063e:	c3                   	ret    

c001063f <Phys::setPageState(unsigned long, bool)>:
c001063f:	57                   	push   edi
c0010640:	56                   	push   esi
c0010641:	8b 35 d8 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3d8
c0010647:	53                   	push   ebx
c0010648:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001064d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010651:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010655:	0f b6 c0             	movzx  eax,al
c0010658:	89 ca                	mov    edx,ecx
c001065a:	83 e1 07             	and    ecx,0x7
c001065d:	c1 ea 03             	shr    edx,0x3
c0010660:	d3 c3                	rol    ebx,cl
c0010662:	01 d6                	add    esi,edx
c0010664:	d3 e0                	shl    eax,cl
c0010666:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0010669:	21 fb                	and    ebx,edi
c001066b:	88 1e                	mov    BYTE PTR [esi],bl
c001066d:	8b 1d d8 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d3d8
c0010673:	01 da                	add    edx,ebx
c0010675:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010677:	09 c8                	or     eax,ecx
c0010679:	88 02                	mov    BYTE PTR [edx],al
c001067b:	5b                   	pop    ebx
c001067c:	5e                   	pop    esi
c001067d:	5f                   	pop    edi
c001067e:	c3                   	ret    

c001067f <Phys::getPageState(unsigned long)>:
c001067f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010683:	8b 15 d8 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3d8
c0010689:	89 c8                	mov    eax,ecx
c001068b:	83 e1 07             	and    ecx,0x7
c001068e:	c1 e8 03             	shr    eax,0x3
c0010691:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010695:	d3 f8                	sar    eax,cl
c0010697:	83 e0 01             	and    eax,0x1
c001069a:	c3                   	ret    

c001069b <Phys::freePage(unsigned long)>:
c001069b:	53                   	push   ebx
c001069c:	83 ec 08             	sub    esp,0x8
c001069f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a3:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00106a9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00106af:	76 41                	jbe    c00106f2 <Phys::freePage(unsigned long)+0x57>
c00106b1:	c1 e8 0c             	shr    eax,0xc
c00106b4:	50                   	push   eax
c00106b5:	89 c3                	mov    ebx,eax
c00106b7:	e8 c3 ff ff ff       	call   c001067f <Phys::getPageState(unsigned long)>
c00106bc:	5a                   	pop    edx
c00106bd:	84 c0                	test   al,al
c00106bf:	74 20                	je     c00106e1 <Phys::freePage(unsigned long)+0x46>
c00106c1:	83 ec 08             	sub    esp,0x8
c00106c4:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c00106c9:	6a 00                	push   0x0
c00106cb:	83 e8 01             	sub    eax,0x1
c00106ce:	53                   	push   ebx
c00106cf:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c00106d4:	e8 66 ff ff ff       	call   c001063f <Phys::setPageState(unsigned long, bool)>
c00106d9:	83 c4 10             	add    esp,0x10
c00106dc:	83 c4 08             	add    esp,0x8
c00106df:	5b                   	pop    ebx
c00106e0:	c3                   	ret    
c00106e1:	c7 44 24 10 be 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029dbe
c00106e9:	83 c4 08             	add    esp,0x8
c00106ec:	5b                   	pop    ebx
c00106ed:	e9 1e fe ff ff       	jmp    c0010510 <KePanic(char const*)>
c00106f2:	68 00 10 00 00       	push   0x1000
c00106f7:	50                   	push   eax
c00106f8:	e8 07 ff ff ff       	call   c0010604 <Phys::freeDMA(unsigned long, unsigned long)>
c00106fd:	59                   	pop    ecx
c00106fe:	5b                   	pop    ebx
c00106ff:	83 c4 08             	add    esp,0x8
c0010702:	5b                   	pop    ebx
c0010703:	c3                   	ret    

c0010704 <Phys::allocatePage()>:
c0010704:	56                   	push   esi
c0010705:	53                   	push   ebx
c0010706:	83 ec 14             	sub    esp,0x14
c0010709:	8b 35 6c 31 03 c0    	mov    esi,DWORD PTR ds:0xc003316c
c001070f:	89 f3                	mov    ebx,esi
c0010711:	eb 18                	jmp    c001072b <Phys::allocatePage()+0x27>
c0010713:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010719:	75 0c                	jne    c0010727 <Phys::allocatePage()+0x23>
c001071b:	c7 05 6c 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003316c,0x0
c0010725:	31 db                	xor    ebx,ebx
c0010727:	39 de                	cmp    esi,ebx
c0010729:	74 5b                	je     c0010786 <Phys::allocatePage()+0x82>
c001072b:	53                   	push   ebx
c001072c:	e8 4e ff ff ff       	call   c001067f <Phys::getPageState(unsigned long)>
c0010731:	59                   	pop    ecx
c0010732:	84 c0                	test   al,al
c0010734:	74 29                	je     c001075f <Phys::allocatePage()+0x5b>
c0010736:	83 c3 01             	add    ebx,0x1
c0010739:	89 1d 6c 31 03 c0    	mov    DWORD PTR ds:0xc003316c,ebx
c001073f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010745:	76 cc                	jbe    c0010713 <Phys::allocatePage()+0xf>
c0010747:	83 ec 0c             	sub    esp,0xc
c001074a:	68 d4 9d 02 c0       	push   0xc0029dd4
c001074f:	e8 bc fd ff ff       	call   c0010510 <KePanic(char const*)>
c0010754:	8b 1d 6c 31 03 c0    	mov    ebx,DWORD PTR ds:0xc003316c
c001075a:	83 c4 10             	add    esp,0x10
c001075d:	eb b4                	jmp    c0010713 <Phys::allocatePage()+0xf>
c001075f:	6a 01                	push   0x1
c0010761:	53                   	push   ebx
c0010762:	e8 d8 fe ff ff       	call   c001063f <Phys::setPageState(unsigned long, bool)>
c0010767:	8b 1d 78 31 03 c0    	mov    ebx,DWORD PTR ds:0xc0033178
c001076d:	a1 6c 31 03 c0       	mov    eax,ds:0xc003316c
c0010772:	83 c3 01             	add    ebx,0x1
c0010775:	5e                   	pop    esi
c0010776:	89 1d 78 31 03 c0    	mov    DWORD PTR ds:0xc0033178,ebx
c001077c:	c1 e0 0c             	shl    eax,0xc
c001077f:	5a                   	pop    edx
c0010780:	83 c4 14             	add    esp,0x14
c0010783:	5b                   	pop    ebx
c0010784:	5e                   	pop    esi
c0010785:	c3                   	ret    
c0010786:	83 ec 0c             	sub    esp,0xc
c0010789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001078e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010791:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010797:	51                   	push   ecx
c0010798:	e8 9f 43 00 00       	call   c0014b3c <VAS::scanForEviction()>
c001079d:	83 c4 10             	add    esp,0x10
c00107a0:	85 c0                	test   eax,eax
c00107a2:	75 1b                	jne    c00107bf <Phys::allocatePage()+0xbb>
c00107a4:	83 ec 0c             	sub    esp,0xc
c00107a7:	68 1c 9e 02 c0       	push   0xc0029e1c
c00107ac:	e8 5f fd ff ff       	call   c0010510 <KePanic(char const*)>
c00107b1:	8b 1d 6c 31 03 c0    	mov    ebx,DWORD PTR ds:0xc003316c
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	e9 6c ff ff ff       	jmp    c001072b <Phys::allocatePage()+0x27>
c00107bf:	83 ec 08             	sub    esp,0x8
c00107c2:	8b 15 78 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033178
c00107c8:	6a 01                	push   0x1
c00107ca:	83 c2 01             	add    edx,0x1
c00107cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00107d1:	89 15 78 31 03 c0    	mov    DWORD PTR ds:0xc0033178,edx
c00107d7:	89 c2                	mov    edx,eax
c00107d9:	c1 ea 0c             	shr    edx,0xc
c00107dc:	52                   	push   edx
c00107dd:	e8 5d fe ff ff       	call   c001063f <Phys::setPageState(unsigned long, bool)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e9:	eb 95                	jmp    c0010780 <Phys::allocatePage()+0x7c>

c00107eb <Phys::allocateContiguousPages(int)>:
c00107eb:	57                   	push   edi
c00107ec:	56                   	push   esi
c00107ed:	53                   	push   ebx
c00107ee:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00107f2:	fa                   	cli    
c00107f3:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c00107f9:	83 ec 0c             	sub    esp,0xc
c00107fc:	83 c2 01             	add    edx,0x1
c00107ff:	68 4c 9e 02 c0       	push   0xc0029e4c
c0010804:	89 15 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,edx
c001080a:	31 db                	xor    ebx,ebx
c001080c:	e8 6b 67 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	85 db                	test   ebx,ebx
c0010816:	75 11                	jne    c0010829 <Phys::allocateContiguousPages(int)+0x3e>
c0010818:	e8 e7 fe ff ff       	call   c0010704 <Phys::allocatePage()>
c001081d:	83 ff 01             	cmp    edi,0x1
c0010820:	89 c6                	mov    esi,eax
c0010822:	74 21                	je     c0010845 <Phys::allocateContiguousPages(int)+0x5a>
c0010824:	bb 01 00 00 00       	mov    ebx,0x1
c0010829:	e8 d6 fe ff ff       	call   c0010704 <Phys::allocatePage()>
c001082e:	89 da                	mov    edx,ebx
c0010830:	c1 e2 0c             	shl    edx,0xc
c0010833:	01 f2                	add    edx,esi
c0010835:	39 c2                	cmp    edx,eax
c0010837:	74 24                	je     c001085d <Phys::allocateContiguousPages(int)+0x72>
c0010839:	bb 01 00 00 00       	mov    ebx,0x1
c001083e:	89 c6                	mov    esi,eax
c0010840:	83 ff 01             	cmp    edi,0x1
c0010843:	75 e4                	jne    c0010829 <Phys::allocateContiguousPages(int)+0x3e>
c0010845:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001084d:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010852:	85 c0                	test   eax,eax
c0010854:	75 01                	jne    c0010857 <Phys::allocateContiguousPages(int)+0x6c>
c0010856:	fb                   	sti    
c0010857:	89 f0                	mov    eax,esi
c0010859:	5b                   	pop    ebx
c001085a:	5e                   	pop    esi
c001085b:	5f                   	pop    edi
c001085c:	c3                   	ret    
c001085d:	83 c3 01             	add    ebx,0x1
c0010860:	39 fb                	cmp    ebx,edi
c0010862:	75 b0                	jne    c0010814 <Phys::allocateContiguousPages(int)+0x29>
c0010864:	eb df                	jmp    c0010845 <Phys::allocateContiguousPages(int)+0x5a>

c0010866 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010866:	56                   	push   esi
c0010867:	53                   	push   ebx
c0010868:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001086c:	39 1d 70 31 03 c0    	cmp    DWORD PTR ds:0xc0033170,ebx
c0010872:	73 06                	jae    c001087a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010874:	89 1d 70 31 03 c0    	mov    DWORD PTR ds:0xc0033170,ebx
c001087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001087e:	c1 eb 0c             	shr    ebx,0xc
c0010881:	c1 e8 0c             	shr    eax,0xc
c0010884:	39 d8                	cmp    eax,ebx
c0010886:	73 13                	jae    c001089b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010888:	6a 00                	push   0x0
c001088a:	8d 70 01             	lea    esi,[eax+0x1]
c001088d:	50                   	push   eax
c001088e:	e8 ac fd ff ff       	call   c001063f <Phys::setPageState(unsigned long, bool)>
c0010893:	5a                   	pop    edx
c0010894:	89 f0                	mov    eax,esi
c0010896:	59                   	pop    ecx
c0010897:	39 f3                	cmp    ebx,esi
c0010899:	75 ed                	jne    c0010888 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001089b:	5b                   	pop    ebx
c001089c:	5e                   	pop    esi
c001089d:	c3                   	ret    

c001089e <Phys::physicalMemorySetup(unsigned int)>:
c001089e:	55                   	push   ebp
c001089f:	57                   	push   edi
c00108a0:	56                   	push   esi
c00108a1:	53                   	push   ebx
c00108a2:	83 ec 40             	sub    esp,0x40
c00108a5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00108a9:	6a 10                	push   0x10
c00108ab:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00108b1:	6a 00                	push   0x0
c00108b3:	68 80 31 03 c0       	push   0xc0033180
c00108b8:	e8 33 fc fe ff       	call   c00004f0 <memset>
c00108bd:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c00108c3:	31 db                	xor    ebx,ebx
c00108c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00108c9:	5a                   	pop    edx
c00108ca:	59                   	pop    ecx
c00108cb:	50                   	push   eax
c00108cc:	68 d9 9d 02 c0       	push   0xc0029dd9
c00108d1:	e8 a6 66 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	83 ec 08             	sub    esp,0x8
c00108dc:	6a 01                	push   0x1
c00108de:	53                   	push   ebx
c00108df:	83 c3 01             	add    ebx,0x1
c00108e2:	e8 58 fd ff ff       	call   c001063f <Phys::setPageState(unsigned long, bool)>
c00108e7:	83 c4 10             	add    esp,0x10
c00108ea:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00108f0:	75 e7                	jne    c00108d9 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c00108f2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00108f9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010900:	c1 e0 08             	shl    eax,0x8
c0010903:	09 c2                	or     edx,eax
c0010905:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0010909:	0f 84 b5 01 00 00    	je     c0010ac4 <Phys::physicalMemorySetup(unsigned int)+0x226>
c001090f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010913:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001091b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010920:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010924:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001092c:	eb 1c                	jmp    c001094a <Phys::physicalMemorySetup(unsigned int)+0xac>
c001092e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010932:	83 c3 18             	add    ebx,0x18
c0010935:	83 c0 01             	add    eax,0x1
c0010938:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001093c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010940:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010944:	0f 84 5d 01 00 00    	je     c0010aa7 <Phys::physicalMemorySetup(unsigned int)+0x209>
c001094a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001094d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010950:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010953:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010957:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001095b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001095d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010960:	01 f0                	add    eax,esi
c0010962:	55                   	push   ebp
c0010963:	11 fa                	adc    edx,edi
c0010965:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001096d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010971:	50                   	push   eax
c0010972:	56                   	push   esi
c0010973:	68 ac 9e 02 c0       	push   0xc0029eac
c0010978:	e8 ff 65 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001097d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010981:	83 c4 10             	add    esp,0x10
c0010984:	09 f8                	or     eax,edi
c0010986:	0f 85 1b 01 00 00    	jne    c0010aa7 <Phys::physicalMemorySetup(unsigned int)+0x209>
c001098c:	83 fd 01             	cmp    ebp,0x1
c001098f:	75 9d                	jne    c001092e <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010991:	ba 00 00 08 00       	mov    edx,0x80000
c0010996:	89 c1                	mov    ecx,eax
c0010998:	39 f2                	cmp    edx,esi
c001099a:	19 f9                	sbb    ecx,edi
c001099c:	0f 82 ab 00 00 00    	jb     c0010a4d <Phys::physicalMemorySetup(unsigned int)+0x1af>
c00109a2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00109a6:	89 c1                	mov    ecx,eax
c00109a8:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00109ac:	0f 83 9b 00 00 00    	jae    c0010a4d <Phys::physicalMemorySetup(unsigned int)+0x1af>
c00109b2:	ba 00 00 0a 00       	mov    edx,0xa0000
c00109b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00109bb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00109bf:	39 fa                	cmp    edx,edi
c00109c1:	19 e8                	sbb    eax,ebp
c00109c3:	0f 82 e6 00 00 00    	jb     c0010aaf <Phys::physicalMemorySetup(unsigned int)+0x211>
c00109c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00109cd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00109d1:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00109d7:	ba ff 1f 00 00       	mov    edx,0x1fff
c00109dc:	83 d5 ff             	adc    ebp,0xffffffff
c00109df:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00109e3:	31 c0                	xor    eax,eax
c00109e5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00109e9:	39 fa                	cmp    edx,edi
c00109eb:	89 c1                	mov    ecx,eax
c00109ed:	19 e9                	sbb    ecx,ebp
c00109ef:	0f 83 39 ff ff ff    	jae    c001092e <Phys::physicalMemorySetup(unsigned int)+0x90>
c00109f5:	be 00 00 08 00       	mov    esi,0x80000
c00109fa:	83 ec 04             	sub    esp,0x4
c00109fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010a01:	57                   	push   edi
c0010a02:	56                   	push   esi
c0010a03:	68 d0 9e 02 c0       	push   0xc0029ed0
c0010a08:	e8 6f 65 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010a0d:	5a                   	pop    edx
c0010a0e:	59                   	pop    ecx
c0010a0f:	57                   	push   edi
c0010a10:	56                   	push   esi
c0010a11:	e8 50 fe ff ff       	call   c0010866 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010a16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010a1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010a1e:	8b 35 7c 31 03 c0    	mov    esi,DWORD PTR ds:0xc003317c
c0010a24:	83 c4 0c             	add    esp,0xc
c0010a27:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010a2b:	01 f0                	add    eax,esi
c0010a2d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010a34:	a3 7c 31 03 c0       	mov    ds:0xc003317c,eax
c0010a39:	52                   	push   edx
c0010a3a:	50                   	push   eax
c0010a3b:	68 ff 9d 02 c0       	push   0xc0029dff
c0010a40:	e8 37 65 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010a45:	83 c4 10             	add    esp,0x10
c0010a48:	e9 e1 fe ff ff       	jmp    c001092e <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010a4d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010a51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010a59:	39 ea                	cmp    edx,ebp
c0010a5b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010a5f:	0f 82 c9 fe ff ff    	jb     c001092e <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010a65:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010a6a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010a6e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010a72:	0f 83 b6 fe ff ff    	jae    c001092e <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010a78:	39 ee                	cmp    esi,ebp
c0010a7a:	89 f8                	mov    eax,edi
c0010a7c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010a80:	0f 83 74 ff ff ff    	jae    c00109fa <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010a86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a8e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010a92:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010a96:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010a9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010a9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010aa2:	e9 53 ff ff ff       	jmp    c00109fa <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010aa7:	83 c4 3c             	add    esp,0x3c
c0010aaa:	5b                   	pop    ebx
c0010aab:	5e                   	pop    esi
c0010aac:	5f                   	pop    edi
c0010aad:	5d                   	pop    ebp
c0010aae:	c3                   	ret    
c0010aaf:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010ab7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010abf:	e9 05 ff ff ff       	jmp    c00109c9 <Phys::physicalMemorySetup(unsigned int)+0x12b>
c0010ac4:	c7 44 24 50 f1 9d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0029df1
c0010acc:	83 c4 3c             	add    esp,0x3c
c0010acf:	5b                   	pop    ebx
c0010ad0:	5e                   	pop    esi
c0010ad1:	5f                   	pop    edi
c0010ad2:	5d                   	pop    ebp
c0010ad3:	e9 38 fa ff ff       	jmp    c0010510 <KePanic(char const*)>

c0010ad8 <Pipe::isAtty()>:
c0010ad8:	31 c0                	xor    eax,eax
c0010ada:	c3                   	ret    
c0010adb:	90                   	nop

c0010adc <Pipe::~Pipe()>:
c0010adc:	83 ec 0c             	sub    esp,0xc
c0010adf:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c0010ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae8:	89 10                	mov    DWORD PTR [eax],edx
c0010aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	50                   	push   eax
c0010af2:	e8 43 2d 00 00       	call   c001383a <UnixFile::~UnixFile()>
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	90                   	nop
c0010afb:	83 c4 0c             	add    esp,0xc
c0010afe:	c3                   	ret    
c0010aff:	90                   	nop

c0010b00 <Pipe::~Pipe()>:
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	83 ec 0c             	sub    esp,0xc
c0010b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0a:	e8 cd ff ff ff       	call   c0010adc <Pipe::~Pipe()>
c0010b0f:	83 c4 10             	add    esp,0x10
c0010b12:	83 ec 08             	sub    esp,0x8
c0010b15:	6a 20                	push   0x20
c0010b17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1b:	e8 a8 d0 ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0010b20:	83 c4 10             	add    esp,0x10
c0010b23:	83 c4 0c             	add    esp,0xc
c0010b26:	c3                   	ret    
c0010b27:	90                   	nop

c0010b28 <Pipe::write(unsigned long long, void*, int*)>:
c0010b28:	55                   	push   ebp
c0010b29:	57                   	push   edi
c0010b2a:	56                   	push   esi
c0010b2b:	53                   	push   ebx
c0010b2c:	83 ec 1c             	sub    esp,0x1c
c0010b2f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010b37:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010b3a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010b3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b45:	89 d8                	mov    eax,ebx
c0010b47:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010b4a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010b4e:	89 d6                	mov    esi,edx
c0010b50:	89 d7                	mov    edi,edx
c0010b52:	c1 ff 1f             	sar    edi,0x1f
c0010b55:	03 34 24             	add    esi,DWORD PTR [esp]
c0010b58:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010b5c:	c1 f8 1f             	sar    eax,0x1f
c0010b5f:	39 f3                	cmp    ebx,esi
c0010b61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b69:	19 f8                	sbb    eax,edi
c0010b6b:	b8 01 00 00 00       	mov    eax,0x1
c0010b70:	72 6e                	jb     c0010be0 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010b72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010b75:	01 d0                	add    eax,edx
c0010b77:	99                   	cdq    
c0010b78:	f7 fb                	idiv   ebx
c0010b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b7e:	29 d3                	sub    ebx,edx
c0010b80:	89 d7                	mov    edi,edx
c0010b82:	89 de                	mov    esi,ebx
c0010b84:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010b87:	c1 fb 1f             	sar    ebx,0x1f
c0010b8a:	39 f2                	cmp    edx,esi
c0010b8c:	19 d8                	sbb    eax,ebx
c0010b8e:	b8 00 00 00 00       	mov    eax,0x0
c0010b93:	72 04                	jb     c0010b99 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010b95:	89 d0                	mov    eax,edx
c0010b97:	29 f0                	sub    eax,esi
c0010b99:	89 d3                	mov    ebx,edx
c0010b9b:	29 c3                	sub    ebx,eax
c0010b9d:	74 0b                	je     c0010baa <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010b9f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010ba2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010ba6:	89 d9                	mov    ecx,ebx
c0010ba8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010baa:	85 c0                	test   eax,eax
c0010bac:	74 0d                	je     c0010bbb <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010bae:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010bb2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010bb5:	89 de                	mov    esi,ebx
c0010bb7:	89 c1                	mov    ecx,eax
c0010bb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bbb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010bbe:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010bc3:	75 10                	jne    c0010bd5 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	68 f9 9e 02 c0       	push   0xc0029ef9
c0010bcd:	e8 3e f9 ff ff       	call   c0010510 <KePanic(char const*)>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bd9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010bdc:	89 08                	mov    DWORD PTR [eax],ecx
c0010bde:	31 c0                	xor    eax,eax
c0010be0:	83 c4 1c             	add    esp,0x1c
c0010be3:	5b                   	pop    ebx
c0010be4:	5e                   	pop    esi
c0010be5:	5f                   	pop    edi
c0010be6:	5d                   	pop    ebp
c0010be7:	c3                   	ret    

c0010be8 <Pipe::read(unsigned long long, void*, int*)>:
c0010be8:	55                   	push   ebp
c0010be9:	57                   	push   edi
c0010bea:	56                   	push   esi
c0010beb:	53                   	push   ebx
c0010bec:	83 ec 1c             	sub    esp,0x1c
c0010bef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010bf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010bf7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010bfb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010bfe:	89 c8                	mov    eax,ecx
c0010c00:	99                   	cdq    
c0010c01:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010c05:	74 27                	je     c0010c2e <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010c07:	39 f9                	cmp    ecx,edi
c0010c09:	89 d1                	mov    ecx,edx
c0010c0b:	19 f1                	sbb    ecx,esi
c0010c0d:	73 1f                	jae    c0010c2e <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010c0f:	fa                   	cli    
c0010c10:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0010c16:	e8 8d 64 00 00       	call   c00170a8 <schedule()>
c0010c1b:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0010c22:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0010c29:	75 d0                	jne    c0010bfb <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010c2b:	fb                   	sti    
c0010c2c:	eb cd                	jmp    c0010bfb <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010c2e:	39 f8                	cmp    eax,edi
c0010c30:	89 d1                	mov    ecx,edx
c0010c32:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c35:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010c39:	19 f1                	sbb    ecx,esi
c0010c3b:	73 07                	jae    c0010c44 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c0010c3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c40:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c44:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010c47:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010c4a:	29 f7                	sub    edi,esi
c0010c4c:	89 f8                	mov    eax,edi
c0010c4e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010c52:	99                   	cdq    
c0010c53:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c5a:	19 d0                	sbb    eax,edx
c0010c5c:	73 07                	jae    c0010c65 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c0010c5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010c61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c65:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010c68:	89 ea                	mov    edx,ebp
c0010c6a:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010c6e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c73:	74 0d                	je     c0010c82 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c0010c75:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010c78:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010c7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c82:	85 d2                	test   edx,edx
c0010c84:	74 11                	je     c0010c97 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010c86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c8a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010c8d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010c91:	89 d1                	mov    ecx,edx
c0010c93:	89 c7                	mov    edi,eax
c0010c95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c97:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010c9a:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010c9d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010ca0:	99                   	cdq    
c0010ca1:	89 f7                	mov    edi,esi
c0010ca3:	03 04 24             	add    eax,DWORD PTR [esp]
c0010ca6:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010caa:	c1 ff 1f             	sar    edi,0x1f
c0010cad:	57                   	push   edi
c0010cae:	56                   	push   esi
c0010caf:	52                   	push   edx
c0010cb0:	50                   	push   eax
c0010cb1:	e8 7e 22 01 00       	call   c0022f34 <__umoddi3>
c0010cb6:	83 c4 10             	add    esp,0x10
c0010cb9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010cbc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010cc1:	75 10                	jne    c0010cd3 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010cc3:	83 ec 0c             	sub    esp,0xc
c0010cc6:	68 16 9f 02 c0       	push   0xc0029f16
c0010ccb:	e8 40 f8 ff ff       	call   c0010510 <KePanic(char const*)>
c0010cd0:	83 c4 10             	add    esp,0x10
c0010cd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010cd7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010cda:	89 10                	mov    DWORD PTR [eax],edx
c0010cdc:	83 c4 1c             	add    esp,0x1c
c0010cdf:	31 c0                	xor    eax,eax
c0010ce1:	5b                   	pop    ebx
c0010ce2:	5e                   	pop    esi
c0010ce3:	5f                   	pop    edi
c0010ce4:	5d                   	pop    ebp
c0010ce5:	c3                   	ret    

c0010ce6 <Pipe::Pipe(int)>:
c0010ce6:	83 ec 0c             	sub    esp,0xc
c0010ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ced:	83 ec 08             	sub    esp,0x8
c0010cf0:	6a 00                	push   0x0
c0010cf2:	50                   	push   eax
c0010cf3:	e8 5c 29 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c0010d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d04:	89 10                	mov    DWORD PTR [eax],edx
c0010d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d15:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d20:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010d27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	50                   	push   eax
c0010d2f:	e8 87 f3 ff ff       	call   c00100bb <malloc>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	89 c2                	mov    edx,eax
c0010d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d44:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010d48:	90                   	nop
c0010d49:	83 c4 0c             	add    esp,0xc
c0010d4c:	c3                   	ret    

c0010d4d <KePowerThread(void*)>:
c0010d4d:	83 ec 0c             	sub    esp,0xc
c0010d50:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0010d57:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0010d5e:	75 01                	jne    c0010d61 <KePowerThread(void*)+0x14>
c0010d60:	fb                   	sti    
c0010d61:	c6 05 ac 31 03 c0 00 	mov    BYTE PTR ds:0xc00331ac,0x0
c0010d68:	50                   	push   eax
c0010d69:	50                   	push   eax
c0010d6a:	6a 00                	push   0x0
c0010d6c:	6a 0a                	push   0xa
c0010d6e:	e8 41 65 00 00       	call   c00172b4 <sleep(unsigned long long)>
c0010d73:	83 05 e4 31 03 c0 0a 	add    DWORD PTR ds:0xc00331e4,0xa
c0010d7a:	83 c4 10             	add    esp,0x10
c0010d7d:	eb e2                	jmp    c0010d61 <KePowerThread(void*)+0x14>

c0010d7f <KeChangePowerSettings(PowerSettings)>:
c0010d7f:	57                   	push   edi
c0010d80:	b9 09 00 00 00       	mov    ecx,0x9
c0010d85:	56                   	push   esi
c0010d86:	bf c0 31 03 c0       	mov    edi,0xc00331c0
c0010d8b:	fc                   	cld    
c0010d8c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010d90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d92:	5e                   	pop    esi
c0010d93:	5f                   	pop    edi
c0010d94:	c3                   	ret    

c0010d95 <KeUserIOReceived()>:
c0010d95:	c7 05 e4 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331e4,0x0
c0010d9f:	c3                   	ret    

c0010da0 <KeSetupPowerManager()>:
c0010da0:	83 ec 0c             	sub    esp,0xc
c0010da3:	c7 05 e4 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331e4,0x0
c0010dad:	68 f0 00 00 00       	push   0xf0
c0010db2:	c6 05 ac 31 03 c0 00 	mov    BYTE PTR ds:0xc00331ac,0x0
c0010db9:	6a 00                	push   0x0
c0010dbb:	68 4d 0d 01 c0       	push   0xc0010d4d
c0010dc0:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0010dc6:	e8 11 60 00 00       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c0010dcb:	c7 05 c0 31 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00331c0,0x2
c0010dd5:	c7 05 c4 31 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00331c4,0x1
c0010ddf:	c7 05 c8 31 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00331c8,0x3
c0010de9:	c7 05 cc 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331cc,0x0
c0010df3:	c7 05 d8 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331d8,0x0
c0010dfd:	c7 05 d0 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331d0,0x0
c0010e07:	c7 05 dc 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331dc,0x0
c0010e11:	c7 05 d4 31 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00331d4,0x3c
c0010e1b:	c7 05 e0 31 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00331e0,0x3c
c0010e25:	83 c4 1c             	add    esp,0x1c
c0010e28:	c3                   	ret    

c0010e29 <KePrepareShutdown()>:
c0010e29:	83 ec 0c             	sub    esp,0xc
c0010e2c:	e8 63 cc ff ff       	call   c000da94 <KeExecuteAtexit()>
c0010e31:	83 ec 0c             	sub    esp,0xc
c0010e34:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0010e39:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c0010e3f:	e8 c4 96 ff ff       	call   c000a508 <Device::closeAll()>
c0010e44:	83 c4 1c             	add    esp,0x1c
c0010e47:	c3                   	ret    

c0010e48 <KeRegisterShutdownHandler(void (*)())>:
c0010e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e4c:	a3 a8 31 03 c0       	mov    ds:0xc00331a8,eax
c0010e51:	c3                   	ret    

c0010e52 <KeRegisterRestartHandler(void (*)())>:
c0010e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e56:	a3 a4 31 03 c0       	mov    ds:0xc00331a4,eax
c0010e5b:	c3                   	ret    

c0010e5c <KeRegisterSleepHandler(void (*)())>:
c0010e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e60:	a3 a0 31 03 c0       	mov    ds:0xc00331a0,eax
c0010e65:	c3                   	ret    

c0010e66 <KeShutdown()>:
c0010e66:	83 ec 0c             	sub    esp,0xc
c0010e69:	e8 bb ff ff ff       	call   c0010e29 <KePrepareShutdown()>
c0010e6e:	a1 a8 31 03 c0       	mov    eax,ds:0xc00331a8
c0010e73:	85 c0                	test   eax,eax
c0010e75:	74 04                	je     c0010e7b <KeShutdown()+0x15>
c0010e77:	ff d0                	call   eax
c0010e79:	eb 10                	jmp    c0010e8b <KeShutdown()+0x25>
c0010e7b:	83 ec 0c             	sub    esp,0xc
c0010e7e:	68 50 9f 02 c0       	push   0xc0029f50
c0010e83:	e8 88 f6 ff ff       	call   c0010510 <KePanic(char const*)>
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	83 ec 0c             	sub    esp,0xc
c0010e8e:	68 71 9f 02 c0       	push   0xc0029f71
c0010e93:	e8 78 f6 ff ff       	call   c0010510 <KePanic(char const*)>
c0010e98:	83 c4 1c             	add    esp,0x1c
c0010e9b:	c3                   	ret    

c0010e9c <KeSleep()>:
c0010e9c:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c0010ea1:	85 c0                	test   eax,eax
c0010ea3:	74 02                	je     c0010ea7 <KeSleep()+0xb>
c0010ea5:	ff e0                	jmp    eax
c0010ea7:	c3                   	ret    

c0010ea8 <KeHandlePowerButton()>:
c0010ea8:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c0010ead:	83 f8 02             	cmp    eax,0x2
c0010eb0:	75 02                	jne    c0010eb4 <KeHandlePowerButton()+0xc>
c0010eb2:	eb b2                	jmp    c0010e66 <KeShutdown()>
c0010eb4:	48                   	dec    eax
c0010eb5:	75 02                	jne    c0010eb9 <KeHandlePowerButton()+0x11>
c0010eb7:	eb e3                	jmp    c0010e9c <KeSleep()>
c0010eb9:	c3                   	ret    

c0010eba <KeHandleSleepButton()>:
c0010eba:	a1 c4 31 03 c0       	mov    eax,ds:0xc00331c4
c0010ebf:	83 f8 02             	cmp    eax,0x2
c0010ec2:	75 02                	jne    c0010ec6 <KeHandleSleepButton()+0xc>
c0010ec4:	eb a0                	jmp    c0010e66 <KeShutdown()>
c0010ec6:	48                   	dec    eax
c0010ec7:	75 02                	jne    c0010ecb <KeHandleSleepButton()+0x11>
c0010ec9:	eb d1                	jmp    c0010e9c <KeSleep()>
c0010ecb:	c3                   	ret    

c0010ecc <KeRestart()>:
c0010ecc:	83 ec 0c             	sub    esp,0xc
c0010ecf:	e8 55 ff ff ff       	call   c0010e29 <KePrepareShutdown()>
c0010ed4:	a1 a4 31 03 c0       	mov    eax,ds:0xc00331a4
c0010ed9:	85 c0                	test   eax,eax
c0010edb:	74 02                	je     c0010edf <KeRestart()+0x13>
c0010edd:	ff d0                	call   eax
c0010edf:	83 ec 0c             	sub    esp,0xc
c0010ee2:	68 95 9f 02 c0       	push   0xc0029f95
c0010ee7:	e8 24 f6 ff ff       	call   c0010510 <KePanic(char const*)>
c0010eec:	83 c4 1c             	add    esp,0x1c
c0010eef:	c3                   	ret    

c0010ef0 <KeRand()>:
c0010ef0:	69 05 e8 31 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00331e8,0x2875
c0010efa:	69 0d ec 31 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00331ec,0xa2e7b175
c0010f04:	53                   	push   ebx
c0010f05:	01 c1                	add    ecx,eax
c0010f07:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010f0c:	f7 25 e8 31 03 c0    	mul    DWORD PTR ds:0xc00331e8
c0010f12:	01 ca                	add    edx,ecx
c0010f14:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010f19:	83 d2 00             	adc    edx,0x0
c0010f1c:	a3 e8 31 03 c0       	mov    ds:0xc00331e8,eax
c0010f21:	0f b7 da             	movzx  ebx,dx
c0010f24:	89 da                	mov    edx,ebx
c0010f26:	89 1d ec 31 03 c0    	mov    DWORD PTR ds:0xc00331ec,ebx
c0010f2c:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010f30:	5b                   	pop    ebx
c0010f31:	c3                   	ret    

c0010f32 <KeSeedRand(unsigned int)>:
c0010f32:	53                   	push   ebx
c0010f33:	83 ec 08             	sub    esp,0x8
c0010f36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f3a:	e8 9a a4 00 00       	call   c001b3d9 <HalGetRand()>
c0010f3f:	c7 05 ec 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331ec,0x0
c0010f49:	31 d8                	xor    eax,ebx
c0010f4b:	a3 e8 31 03 c0       	mov    ds:0xc00331e8,eax
c0010f50:	e8 9b ff ff ff       	call   c0010ef0 <KeRand()>
c0010f55:	83 c4 08             	add    esp,0x8
c0010f58:	5b                   	pop    ebx
c0010f59:	eb 95                	jmp    c0010ef0 <KeRand()>

c0010f5b <KeInitRand()>:
c0010f5b:	83 ec 0c             	sub    esp,0xc
c0010f5e:	e8 44 a2 00 00       	call   c001b1a7 <HalQueryPerformanceCounter()>
c0010f63:	0f 20 da             	mov    edx,cr3
c0010f66:	0f 22 da             	mov    cr3,edx
c0010f69:	0f 20 da             	mov    edx,cr3
c0010f6c:	0f 22 da             	mov    cr3,edx
c0010f6f:	0f 20 da             	mov    edx,cr3
c0010f72:	0f 22 da             	mov    cr3,edx
c0010f75:	0f 20 da             	mov    edx,cr3
c0010f78:	0f 22 da             	mov    cr3,edx
c0010f7b:	83 ec 0c             	sub    esp,0xc
c0010f7e:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010f83:	50                   	push   eax
c0010f84:	e8 a9 ff ff ff       	call   c0010f32 <KeSeedRand(unsigned int)>
c0010f89:	83 c4 1c             	add    esp,0x1c
c0010f8c:	c3                   	ret    
c0010f8d:	66 90                	xchg   ax,ax
c0010f8f:	90                   	nop

c0010f90 <KeResolveCompatibilitySymbol(char*)>:
c0010f90:	83 ec 0c             	sub    esp,0xc
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	68 a4 9f 02 c0       	push   0xc0029fa4
c0010f9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9f:	e8 ac f7 fe ff       	call   c0000750 <strcmp>
c0010fa4:	83 c4 10             	add    esp,0x10
c0010fa7:	85 c0                	test   eax,eax
c0010fa9:	0f 94 c0             	sete   al
c0010fac:	0f b6 c0             	movzx  eax,al
c0010faf:	85 c0                	test   eax,eax
c0010fb1:	74 0d                	je     c0010fc0 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010fb3:	b8 08 31 03 c0       	mov    eax,0xc0033108
c0010fb8:	e9 3b 02 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc0:	83 ec 08             	sub    esp,0x8
c0010fc3:	68 ad 9f 02 c0       	push   0xc0029fad
c0010fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fcc:	e8 7f f7 fe ff       	call   c0000750 <strcmp>
c0010fd1:	83 c4 10             	add    esp,0x10
c0010fd4:	85 c0                	test   eax,eax
c0010fd6:	0f 94 c0             	sete   al
c0010fd9:	0f b6 c0             	movzx  eax,al
c0010fdc:	85 c0                	test   eax,eax
c0010fde:	74 0c                	je     c0010fec <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010fe0:	b8 34 2e 02 c0       	mov    eax,0xc0022e34
c0010fe5:	e9 0e 02 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010fea:	66 90                	xchg   ax,ax
c0010fec:	83 ec 08             	sub    esp,0x8
c0010fef:	68 b7 9f 02 c0       	push   0xc0029fb7
c0010ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff8:	e8 53 f7 fe ff       	call   c0000750 <strcmp>
c0010ffd:	83 c4 10             	add    esp,0x10
c0011000:	85 c0                	test   eax,eax
c0011002:	0f 94 c0             	sete   al
c0011005:	0f b6 c0             	movzx  eax,al
c0011008:	85 c0                	test   eax,eax
c001100a:	74 0c                	je     c0011018 <KeResolveCompatibilitySymbol(char*)+0x88>
c001100c:	b8 08 31 03 c0       	mov    eax,0xc0033108
c0011011:	e9 e2 01 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011016:	66 90                	xchg   ax,ax
c0011018:	83 ec 08             	sub    esp,0x8
c001101b:	68 ca 9f 02 c0       	push   0xc0029fca
c0011020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011024:	e8 27 f7 fe ff       	call   c0000750 <strcmp>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	85 c0                	test   eax,eax
c001102e:	0f 94 c0             	sete   al
c0011031:	0f b6 c0             	movzx  eax,al
c0011034:	85 c0                	test   eax,eax
c0011036:	74 0c                	je     c0011044 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011038:	b8 68 2b 02 c0       	mov    eax,0xc0022b68
c001103d:	e9 b6 01 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011042:	66 90                	xchg   ax,ax
c0011044:	83 ec 08             	sub    esp,0x8
c0011047:	68 d3 9f 02 c0       	push   0xc0029fd3
c001104c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011050:	e8 fb f6 fe ff       	call   c0000750 <strcmp>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	85 c0                	test   eax,eax
c001105a:	0f 94 c0             	sete   al
c001105d:	0f b6 c0             	movzx  eax,al
c0011060:	85 c0                	test   eax,eax
c0011062:	74 0c                	je     c0011070 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011064:	b8 10 05 01 c0       	mov    eax,0xc0010510
c0011069:	e9 8a 01 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c001106e:	66 90                	xchg   ax,ax
c0011070:	83 ec 08             	sub    esp,0x8
c0011073:	68 e6 9f 02 c0       	push   0xc0029fe6
c0011078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001107c:	e8 cf f6 fe ff       	call   c0000750 <strcmp>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	85 c0                	test   eax,eax
c0011086:	0f 94 c0             	sete   al
c0011089:	0f b6 c0             	movzx  eax,al
c001108c:	85 c0                	test   eax,eax
c001108e:	74 0c                	je     c001109c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011090:	b8 1d db 00 c0       	mov    eax,0xc000db1d
c0011095:	e9 5e 01 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c001109a:	66 90                	xchg   ax,ax
c001109c:	83 ec 08             	sub    esp,0x8
c001109f:	68 03 a0 02 c0       	push   0xc002a003
c00110a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a8:	e8 a3 f6 fe ff       	call   c0000750 <strcmp>
c00110ad:	83 c4 10             	add    esp,0x10
c00110b0:	85 c0                	test   eax,eax
c00110b2:	0f 94 c0             	sete   al
c00110b5:	0f b6 c0             	movzx  eax,al
c00110b8:	85 c0                	test   eax,eax
c00110ba:	74 0c                	je     c00110c8 <KeResolveCompatibilitySymbol(char*)+0x138>
c00110bc:	b8 34 2f 02 c0       	mov    eax,0xc0022f34
c00110c1:	e9 32 01 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c00110c6:	66 90                	xchg   ax,ax
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	68 0d a0 02 c0       	push   0xc002a00d
c00110d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d4:	e8 77 f6 fe ff       	call   c0000750 <strcmp>
c00110d9:	83 c4 10             	add    esp,0x10
c00110dc:	85 c0                	test   eax,eax
c00110de:	0f 94 c0             	sete   al
c00110e1:	0f b6 c0             	movzx  eax,al
c00110e4:	85 c0                	test   eax,eax
c00110e6:	74 0c                	je     c00110f4 <KeResolveCompatibilitySymbol(char*)+0x164>
c00110e8:	b8 b4 2c 02 c0       	mov    eax,0xc0022cb4
c00110ed:	e9 06 01 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c00110f2:	66 90                	xchg   ax,ax
c00110f4:	83 ec 08             	sub    esp,0x8
c00110f7:	68 16 a0 02 c0       	push   0xc002a016
c00110fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011100:	e8 4b f6 fe ff       	call   c0000750 <strcmp>
c0011105:	83 c4 10             	add    esp,0x10
c0011108:	85 c0                	test   eax,eax
c001110a:	0f 94 c0             	sete   al
c001110d:	0f b6 c0             	movzx  eax,al
c0011110:	85 c0                	test   eax,eax
c0011112:	74 0c                	je     c0011120 <KeResolveCompatibilitySymbol(char*)+0x190>
c0011114:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0011119:	e9 da 00 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c001111e:	66 90                	xchg   ax,ax
c0011120:	83 ec 08             	sub    esp,0x8
c0011123:	68 2e a0 02 c0       	push   0xc002a02e
c0011128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112c:	e8 1f f6 fe ff       	call   c0000750 <strcmp>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	85 c0                	test   eax,eax
c0011136:	0f 94 c0             	sete   al
c0011139:	0f b6 c0             	movzx  eax,al
c001113c:	85 c0                	test   eax,eax
c001113e:	74 0c                	je     c001114c <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0011140:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0011145:	e9 ae 00 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c001114a:	66 90                	xchg   ax,ax
c001114c:	83 ec 08             	sub    esp,0x8
c001114f:	68 3b a0 02 c0       	push   0xc002a03b
c0011154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011158:	e8 f3 f5 fe ff       	call   c0000750 <strcmp>
c001115d:	83 c4 10             	add    esp,0x10
c0011160:	85 c0                	test   eax,eax
c0011162:	0f 94 c0             	sete   al
c0011165:	0f b6 c0             	movzx  eax,al
c0011168:	85 c0                	test   eax,eax
c001116a:	74 0c                	je     c0011178 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c001116c:	b8 0d 31 03 c0       	mov    eax,0xc003310d
c0011171:	e9 82 00 00 00       	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011176:	66 90                	xchg   ax,ax
c0011178:	83 ec 08             	sub    esp,0x8
c001117b:	68 48 a0 02 c0       	push   0xc002a048
c0011180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011184:	e8 c7 f5 fe ff       	call   c0000750 <strcmp>
c0011189:	83 c4 10             	add    esp,0x10
c001118c:	85 c0                	test   eax,eax
c001118e:	0f 94 c0             	sete   al
c0011191:	0f b6 c0             	movzx  eax,al
c0011194:	85 c0                	test   eax,eax
c0011196:	74 08                	je     c00111a0 <KeResolveCompatibilitySymbol(char*)+0x210>
c0011198:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c001119d:	eb 59                	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c001119f:	90                   	nop
c00111a0:	83 ec 08             	sub    esp,0x8
c00111a3:	68 59 a0 02 c0       	push   0xc002a059
c00111a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ac:	e8 9f f5 fe ff       	call   c0000750 <strcmp>
c00111b1:	83 c4 10             	add    esp,0x10
c00111b4:	85 c0                	test   eax,eax
c00111b6:	0f 94 c0             	sete   al
c00111b9:	0f b6 c0             	movzx  eax,al
c00111bc:	85 c0                	test   eax,eax
c00111be:	74 08                	je     c00111c8 <KeResolveCompatibilitySymbol(char*)+0x238>
c00111c0:	b8 0d 31 03 c0       	mov    eax,0xc003310d
c00111c5:	eb 31                	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c00111c7:	90                   	nop
c00111c8:	83 ec 08             	sub    esp,0x8
c00111cb:	68 6a a0 02 c0       	push   0xc002a06a
c00111d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d4:	e8 77 f5 fe ff       	call   c0000750 <strcmp>
c00111d9:	83 c4 10             	add    esp,0x10
c00111dc:	85 c0                	test   eax,eax
c00111de:	0f 94 c0             	sete   al
c00111e1:	0f b6 c0             	movzx  eax,al
c00111e4:	85 c0                	test   eax,eax
c00111e6:	74 08                	je     c00111f0 <KeResolveCompatibilitySymbol(char*)+0x260>
c00111e8:	b8 a8 78 01 c0       	mov    eax,0xc00178a8
c00111ed:	eb 09                	jmp    c00111f8 <KeResolveCompatibilitySymbol(char*)+0x268>
c00111ef:	90                   	nop
c00111f0:	b8 00 00 00 00       	mov    eax,0x0
c00111f5:	8d 76 00             	lea    esi,[esi+0x0]
c00111f8:	83 c4 0c             	add    esp,0xc
c00111fb:	c3                   	ret    

c00111fc <Semaphore::Semaphore(int)>:
c00111fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011204:	89 10                	mov    DWORD PTR [eax],edx
c0011206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001120a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0011211:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011215:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001121c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011220:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011227:	90                   	nop
c0011228:	c3                   	ret    
c0011229:	90                   	nop
c001122a:	66 90                	xchg   ax,ax

c001122c <Semaphore::tryAcquire()>:
c001122c:	83 ec 0c             	sub    esp,0xc
c001122f:	fa                   	cli    
c0011230:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011235:	83 c0 01             	add    eax,0x1
c0011238:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001123d:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011242:	83 c0 01             	add    eax,0x1
c0011245:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001124a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011255:	8b 00                	mov    eax,DWORD PTR [eax]
c0011257:	39 c2                	cmp    edx,eax
c0011259:	7d 59                	jge    c00112b4 <Semaphore::tryAcquire()+0x88>
c001125b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011262:	8d 50 01             	lea    edx,[eax+0x1]
c0011265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011269:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001126c:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011271:	83 e8 01             	sub    eax,0x1
c0011274:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011279:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001127e:	85 c0                	test   eax,eax
c0011280:	75 1a                	jne    c001129c <Semaphore::tryAcquire()+0x70>
c0011282:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0011287:	85 c0                	test   eax,eax
c0011289:	74 11                	je     c001129c <Semaphore::tryAcquire()+0x70>
c001128b:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0011295:	e8 0e 5e 00 00       	call   c00170a8 <schedule()>
c001129a:	66 90                	xchg   ax,ax
c001129c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00112a4:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00112a9:	85 c0                	test   eax,eax
c00112ab:	75 03                	jne    c00112b0 <Semaphore::tryAcquire()+0x84>
c00112ad:	fb                   	sti    
c00112ae:	66 90                	xchg   ax,ax
c00112b0:	b0 01                	mov    al,0x1
c00112b2:	eb 48                	jmp    c00112fc <Semaphore::tryAcquire()+0xd0>
c00112b4:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00112b9:	83 e8 01             	sub    eax,0x1
c00112bc:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00112c1:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00112c6:	85 c0                	test   eax,eax
c00112c8:	75 1a                	jne    c00112e4 <Semaphore::tryAcquire()+0xb8>
c00112ca:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c00112cf:	85 c0                	test   eax,eax
c00112d1:	74 11                	je     c00112e4 <Semaphore::tryAcquire()+0xb8>
c00112d3:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c00112dd:	e8 c6 5d 00 00       	call   c00170a8 <schedule()>
c00112e2:	66 90                	xchg   ax,ax
c00112e4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00112ec:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00112f1:	85 c0                	test   eax,eax
c00112f3:	75 03                	jne    c00112f8 <Semaphore::tryAcquire()+0xcc>
c00112f5:	fb                   	sti    
c00112f6:	66 90                	xchg   ax,ax
c00112f8:	b0 00                	mov    al,0x0
c00112fa:	66 90                	xchg   ax,ax
c00112fc:	83 c4 0c             	add    esp,0xc
c00112ff:	c3                   	ret    

c0011300 <Semaphore::assertLocked(char const*)>:
c0011300:	83 ec 0c             	sub    esp,0xc
c0011303:	fa                   	cli    
c0011304:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011309:	83 c0 01             	add    eax,0x1
c001130c:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0011311:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011316:	83 c0 01             	add    eax,0x1
c0011319:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001131e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011322:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011329:	8b 00                	mov    eax,DWORD PTR [eax]
c001132b:	39 c2                	cmp    edx,eax
c001132d:	7d 11                	jge    c0011340 <Semaphore::assertLocked(char const*)+0x40>
c001132f:	83 ec 0c             	sub    esp,0xc
c0011332:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011336:	e8 d5 f1 ff ff       	call   c0010510 <KePanic(char const*)>
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	66 90                	xchg   ax,ax
c0011340:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011345:	83 e8 01             	sub    eax,0x1
c0011348:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001134d:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011352:	85 c0                	test   eax,eax
c0011354:	75 1a                	jne    c0011370 <Semaphore::assertLocked(char const*)+0x70>
c0011356:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c001135b:	85 c0                	test   eax,eax
c001135d:	74 11                	je     c0011370 <Semaphore::assertLocked(char const*)+0x70>
c001135f:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0011369:	e8 3a 5d 00 00       	call   c00170a8 <schedule()>
c001136e:	66 90                	xchg   ax,ax
c0011370:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0011378:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001137d:	85 c0                	test   eax,eax
c001137f:	75 03                	jne    c0011384 <Semaphore::assertLocked(char const*)+0x84>
c0011381:	fb                   	sti    
c0011382:	66 90                	xchg   ax,ax
c0011384:	90                   	nop
c0011385:	83 c4 0c             	add    esp,0xc
c0011388:	c3                   	ret    
c0011389:	90                   	nop
c001138a:	66 90                	xchg   ax,ax

c001138c <Semaphore::acquire(int)>:
c001138c:	83 ec 1c             	sub    esp,0x1c
c001138f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011394:	0f 84 ae 00 00 00    	je     c0011448 <Semaphore::acquire(int)+0xbc>
c001139a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113a2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00113a7:	90                   	nop
c00113a8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00113ad:	85 c0                	test   eax,eax
c00113af:	0f 84 87 00 00 00    	je     c001143c <Semaphore::acquire(int)+0xb0>
c00113b5:	83 ec 0c             	sub    esp,0xc
c00113b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00113bc:	e8 6b fe ff ff       	call   c001122c <Semaphore::tryAcquire()>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	83 f0 01             	xor    eax,0x1
c00113c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00113cb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00113cf:	83 f0 01             	xor    eax,0x1
c00113d2:	0f b6 c0             	movzx  eax,al
c00113d5:	85 c0                	test   eax,eax
c00113d7:	75 5f                	jne    c0011438 <Semaphore::acquire(int)+0xac>
c00113d9:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00113de:	7f 34                	jg     c0011414 <Semaphore::acquire(int)+0x88>
c00113e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00113e4:	89 d0                	mov    eax,edx
c00113e6:	c1 e0 02             	shl    eax,0x2
c00113e9:	01 d0                	add    eax,edx
c00113eb:	01 c0                	add    eax,eax
c00113ed:	89 c2                	mov    edx,eax
c00113ef:	c1 fa 1f             	sar    edx,0x1f
c00113f2:	83 ec 08             	sub    esp,0x8
c00113f5:	52                   	push   edx
c00113f6:	50                   	push   eax
c00113f7:	e8 a0 5e 00 00       	call   c001729c <milliTenthSleep(unsigned long long)>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011403:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0011407:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001140f:	eb 97                	jmp    c00113a8 <Semaphore::acquire(int)+0x1c>
c0011411:	8d 76 00             	lea    esi,[esi+0x0]
c0011414:	83 ec 08             	sub    esp,0x8
c0011417:	6a 00                	push   0x0
c0011419:	68 90 01 00 00       	push   0x190
c001141e:	e8 79 5e 00 00       	call   c001729c <milliTenthSleep(unsigned long long)>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c001142b:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0011430:	e9 73 ff ff ff       	jmp    c00113a8 <Semaphore::acquire(int)+0x1c>
c0011435:	8d 76 00             	lea    esi,[esi+0x0]
c0011438:	90                   	nop
c0011439:	8d 76 00             	lea    esi,[esi+0x0]
c001143c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011440:	e9 fb 00 00 00       	jmp    c0011540 <Semaphore::acquire(int)+0x1b4>
c0011445:	8d 76 00             	lea    esi,[esi+0x0]
c0011448:	fa                   	cli    
c0011449:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001144e:	83 c0 01             	add    eax,0x1
c0011451:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0011456:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001145b:	83 c0 01             	add    eax,0x1
c001145e:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011467:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001146a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001146e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011470:	39 c2                	cmp    edx,eax
c0011472:	7d 14                	jge    c0011488 <Semaphore::acquire(int)+0xfc>
c0011474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011478:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001147b:	8d 50 01             	lea    edx,[eax+0x1]
c001147e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011482:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011485:	eb 6d                	jmp    c00114f4 <Semaphore::acquire(int)+0x168>
c0011487:	90                   	nop
c0011488:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001148d:	8b 00                	mov    eax,DWORD PTR [eax]
c001148f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001149a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149d:	85 c0                	test   eax,eax
c001149f:	75 13                	jne    c00114b4 <Semaphore::acquire(int)+0x128>
c00114a1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00114a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00114a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114af:	eb 17                	jmp    c00114c8 <Semaphore::acquire(int)+0x13c>
c00114b1:	8d 76 00             	lea    esi,[esi+0x0]
c00114b4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00114b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114c0:	8b 12                	mov    edx,DWORD PTR [edx]
c00114c2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114c5:	8d 76 00             	lea    esi,[esi+0x0]
c00114c8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00114cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00114cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00114d6:	83 ec 0c             	sub    esp,0xc
c00114d9:	68 80 a0 02 c0       	push   0xc002a080
c00114de:	e8 99 5a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00114e3:	83 c4 10             	add    esp,0x10
c00114e6:	83 ec 0c             	sub    esp,0xc
c00114e9:	6a 05                	push   0x5
c00114eb:	e8 78 5c 00 00       	call   c0017168 <blockTask(TaskState)>
c00114f0:	83 c4 10             	add    esp,0x10
c00114f3:	90                   	nop
c00114f4:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00114f9:	83 e8 01             	sub    eax,0x1
c00114fc:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011501:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011506:	85 c0                	test   eax,eax
c0011508:	75 1a                	jne    c0011524 <Semaphore::acquire(int)+0x198>
c001150a:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c001150f:	85 c0                	test   eax,eax
c0011511:	74 11                	je     c0011524 <Semaphore::acquire(int)+0x198>
c0011513:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c001151d:	e8 86 5b 00 00       	call   c00170a8 <schedule()>
c0011522:	66 90                	xchg   ax,ax
c0011524:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001152c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011531:	85 c0                	test   eax,eax
c0011533:	75 03                	jne    c0011538 <Semaphore::acquire(int)+0x1ac>
c0011535:	fb                   	sti    
c0011536:	66 90                	xchg   ax,ax
c0011538:	b8 00 00 00 00       	mov    eax,0x0
c001153d:	8d 76 00             	lea    esi,[esi+0x0]
c0011540:	83 c4 1c             	add    esp,0x1c
c0011543:	c3                   	ret    

c0011544 <Semaphore::acquire()>:
c0011544:	83 ec 0c             	sub    esp,0xc
c0011547:	83 ec 08             	sub    esp,0x8
c001154a:	6a 00                	push   0x0
c001154c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011550:	e8 37 fe ff ff       	call   c001138c <Semaphore::acquire(int)>
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	90                   	nop
c0011559:	83 c4 0c             	add    esp,0xc
c001155c:	c3                   	ret    
c001155d:	90                   	nop
c001155e:	66 90                	xchg   ax,ax

c0011560 <Semaphore::release()>:
c0011560:	83 ec 1c             	sub    esp,0x1c
c0011563:	fa                   	cli    
c0011564:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011569:	83 c0 01             	add    eax,0x1
c001156c:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0011571:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011576:	83 c0 01             	add    eax,0x1
c0011579:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001157e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011582:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011585:	85 c0                	test   eax,eax
c0011587:	74 2b                	je     c00115b4 <Semaphore::release()+0x54>
c0011589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001158d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011590:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011594:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011598:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001159b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001159f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115a2:	83 ec 0c             	sub    esp,0xc
c00115a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115a9:	e8 56 5e 00 00       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c00115ae:	83 c4 10             	add    esp,0x10
c00115b1:	eb 15                	jmp    c00115c8 <Semaphore::release()+0x68>
c00115b3:	90                   	nop
c00115b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115bb:	8d 50 ff             	lea    edx,[eax-0x1]
c00115be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115c5:	8d 76 00             	lea    esi,[esi+0x0]
c00115c8:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00115cd:	83 e8 01             	sub    eax,0x1
c00115d0:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00115d5:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00115da:	85 c0                	test   eax,eax
c00115dc:	75 1a                	jne    c00115f8 <Semaphore::release()+0x98>
c00115de:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c00115e3:	85 c0                	test   eax,eax
c00115e5:	74 11                	je     c00115f8 <Semaphore::release()+0x98>
c00115e7:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c00115f1:	e8 b2 5a 00 00       	call   c00170a8 <schedule()>
c00115f6:	66 90                	xchg   ax,ax
c00115f8:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0011600:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011605:	85 c0                	test   eax,eax
c0011607:	75 03                	jne    c001160c <Semaphore::release()+0xac>
c0011609:	fb                   	sti    
c001160a:	66 90                	xchg   ax,ax
c001160c:	90                   	nop
c001160d:	83 c4 1c             	add    esp,0x1c
c0011610:	c3                   	ret    

c0011611 <KiSigKill(int)>:
c0011611:	83 ec 0c             	sub    esp,0xc
c0011614:	6a 00                	push   0x0
c0011616:	6a 00                	push   0x0
c0011618:	6a ff                	push   0xffffffff
c001161a:	6a 01                	push   0x1
c001161c:	e8 31 ca 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011621:	83 c4 1c             	add    esp,0x1c
c0011624:	c3                   	ret    

c0011625 <KiDefaultSignalHandlerIgnore(int)>:
c0011625:	c3                   	ret    

c0011626 <KiDefaultSignalHandlerPause(int)>:
c0011626:	57                   	push   edi
c0011627:	b9 07 00 00 00       	mov    ecx,0x7
c001162c:	56                   	push   esi
c001162d:	be db a0 02 c0       	mov    esi,0xc002a0db
c0011632:	83 ec 24             	sub    esp,0x24
c0011635:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011639:	fc                   	cld    
c001163a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001163c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011640:	50                   	push   eax
c0011641:	6a 00                	push   0x0
c0011643:	6a 00                	push   0x0
c0011645:	6a 27                	push   0x27
c0011647:	e8 06 ca 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001164c:	83 c4 34             	add    esp,0x34
c001164f:	5e                   	pop    esi
c0011650:	5f                   	pop    edi
c0011651:	c3                   	ret    

c0011652 <KiDefaultSignalHandlerResume(int)>:
c0011652:	57                   	push   edi
c0011653:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011658:	56                   	push   esi
c0011659:	be f7 a0 02 c0       	mov    esi,0xc002a0f7
c001165e:	83 ec 24             	sub    esp,0x24
c0011661:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011665:	fc                   	cld    
c0011666:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011668:	8d 44 24 03          	lea    eax,[esp+0x3]
c001166c:	50                   	push   eax
c001166d:	6a 00                	push   0x0
c001166f:	6a 00                	push   0x0
c0011671:	6a 27                	push   0x27
c0011673:	e8 da c9 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011678:	83 c4 34             	add    esp,0x34
c001167b:	5e                   	pop    esi
c001167c:	5f                   	pop    edi
c001167d:	c3                   	ret    

c001167e <KeDeinitSignals(SigHandlerBlock*)>:
c001167e:	e9 48 ea ff ff       	jmp    c00100cb <free>

c0011683 <KeInitSignals()>:
c0011683:	53                   	push   ebx
c0011684:	83 ec 14             	sub    esp,0x14
c0011687:	68 c8 00 00 00       	push   0xc8
c001168c:	e8 2a ea ff ff       	call   c00100bb <malloc>
c0011691:	83 c4 0c             	add    esp,0xc
c0011694:	89 c3                	mov    ebx,eax
c0011696:	6a 04                	push   0x4
c0011698:	6a 00                	push   0x0
c001169a:	50                   	push   eax
c001169b:	e8 50 ee fe ff       	call   c00004f0 <memset>
c00116a0:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c00116aa:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c00116b4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00116bb:	83 c4 0c             	add    esp,0xc
c00116be:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00116c4:	6a 20                	push   0x20
c00116c6:	6a 00                	push   0x0
c00116c8:	50                   	push   eax
c00116c9:	e8 22 ee fe ff       	call   c00004f0 <memset>
c00116ce:	83 c4 0c             	add    esp,0xc
c00116d1:	6a 44                	push   0x44
c00116d3:	6a 00                	push   0x0
c00116d5:	53                   	push   ebx
c00116d6:	e8 15 ee fe ff       	call   c00004f0 <memset>
c00116db:	83 c4 0c             	add    esp,0xc
c00116de:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c00116e4:	6a 11                	push   0x11
c00116e6:	6a 00                	push   0x0
c00116e8:	50                   	push   eax
c00116e9:	e8 02 ee fe ff       	call   c00004f0 <memset>
c00116ee:	89 d8                	mov    eax,ebx
c00116f0:	83 c4 18             	add    esp,0x18
c00116f3:	5b                   	pop    ebx
c00116f4:	c3                   	ret    

c00116f5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00116f5:	53                   	push   ebx
c00116f6:	b8 01 00 00 00       	mov    eax,0x1
c00116fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011703:	83 f9 10             	cmp    ecx,0x10
c0011706:	7f 21                	jg     c0011729 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011708:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001170b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001170f:	89 03                	mov    DWORD PTR [ebx],eax
c0011711:	b8 01 00 00 00       	mov    eax,0x1
c0011716:	d3 e0                	shl    eax,cl
c0011718:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001171c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001171f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011727:	31 c0                	xor    eax,eax
c0011729:	5b                   	pop    ebx
c001172a:	c3                   	ret    

c001172b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001172b:	55                   	push   ebp
c001172c:	57                   	push   edi
c001172d:	bf 08 00 00 00       	mov    edi,0x8
c0011732:	56                   	push   esi
c0011733:	53                   	push   ebx
c0011734:	83 ec 14             	sub    esp,0x14
c0011737:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001173b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001173f:	68 14 a1 02 c0       	push   0xc002a114
c0011744:	e8 33 58 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011749:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011750:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	31 c9                	xor    ecx,ecx
c001175b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001175f:	99                   	cdq    
c0011760:	f7 ff                	idiv   edi
c0011762:	8d 42 24             	lea    eax,[edx+0x24]
c0011765:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011769:	85 f6                	test   esi,esi
c001176b:	75 1a                	jne    c0011787 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c001176d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011771:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011775:	50                   	push   eax
c0011776:	50                   	push   eax
c0011777:	52                   	push   edx
c0011778:	68 2a a1 02 c0       	push   0xc002a12a
c001177d:	e8 fa 57 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011782:	83 c4 10             	add    esp,0x10
c0011785:	eb 1b                	jmp    c00117a2 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011787:	41                   	inc    ecx
c0011788:	83 f9 08             	cmp    ecx,0x8
c001178b:	75 ce                	jne    c001175b <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	be 01 00 00 00       	mov    esi,0x1
c0011795:	68 4b a1 02 c0       	push   0xc002a14b
c001179a:	e8 dd 57 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	83 c4 0c             	add    esp,0xc
c00117a5:	89 f0                	mov    eax,esi
c00117a7:	5b                   	pop    ebx
c00117a8:	5e                   	pop    esi
c00117a9:	5f                   	pop    edi
c00117aa:	5d                   	pop    ebp
c00117ab:	c3                   	ret    

c00117ac <KeCheckSignal(SigHandlerBlock*, int*)>:
c00117ac:	55                   	push   ebp
c00117ad:	57                   	push   edi
c00117ae:	56                   	push   esi
c00117af:	53                   	push   ebx
c00117b0:	83 ec 1c             	sub    esp,0x1c
c00117b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00117b7:	85 db                	test   ebx,ebx
c00117b9:	0f 84 e0 00 00 00    	je     c001189f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00117bf:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00117c6:	0f 84 d3 00 00 00    	je     c001189f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00117cc:	31 c9                	xor    ecx,ecx
c00117ce:	bf 08 00 00 00       	mov    edi,0x8
c00117d3:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00117d9:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00117dc:	99                   	cdq    
c00117dd:	f7 ff                	idiv   edi
c00117df:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00117e6:	85 ed                	test   ebp,ebp
c00117e8:	0f 84 d2 00 00 00    	je     c00118c0 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c00117ee:	89 e9                	mov    ecx,ebp
c00117f0:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00117f6:	bf 01 00 00 00       	mov    edi,0x1
c00117fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117ff:	d3 e7                	shl    edi,cl
c0011801:	31 c9                	xor    ecx,ecx
c0011803:	b8 01 00 00 00       	mov    eax,0x1
c0011808:	d3 e0                	shl    eax,cl
c001180a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001180e:	74 0a                	je     c001181a <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011810:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011814:	0f 85 85 00 00 00    	jne    c001189f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001181a:	41                   	inc    ecx
c001181b:	83 f9 11             	cmp    ecx,0x11
c001181e:	75 e3                	jne    c0011803 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0011820:	46                   	inc    esi
c0011821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011825:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001182b:	09 f8                	or     eax,edi
c001182d:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011838:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001183e:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011845:	31 c0                	xor    eax,eax
c0011847:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001184f:	74 09                	je     c001185a <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011851:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011858:	eb 06                	jmp    c0011860 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c001185a:	40                   	inc    eax
c001185b:	83 f8 08             	cmp    eax,0x8
c001185e:	75 e7                	jne    c0011847 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011860:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011863:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011867:	83 fd 09             	cmp    ebp,0x9
c001186a:	89 2a                	mov    DWORD PTR [edx],ebp
c001186c:	75 14                	jne    c0011882 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	68 5c a1 02 c0       	push   0xc002a15c
c0011876:	e8 01 57 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001187b:	b8 11 16 01 c0       	mov    eax,0xc0011611
c0011880:	eb 39                	jmp    c00118bb <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011882:	83 f8 01             	cmp    eax,0x1
c0011885:	75 1c                	jne    c00118a3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011887:	83 ec 0c             	sub    esp,0xc
c001188a:	f7 d7                	not    edi
c001188c:	68 66 a1 02 c0       	push   0xc002a166
c0011891:	e8 e6 56 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011896:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	31 c0                	xor    eax,eax
c00118a1:	eb 30                	jmp    c00118d3 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00118a3:	85 c0                	test   eax,eax
c00118a5:	75 2c                	jne    c00118d3 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00118a7:	83 ec 0c             	sub    esp,0xc
c00118aa:	68 73 a1 02 c0       	push   0xc002a173
c00118af:	e8 c8 56 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00118b4:	8b 04 ad e0 d3 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd2c20]
c00118bb:	83 c4 10             	add    esp,0x10
c00118be:	eb 13                	jmp    c00118d3 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00118c0:	46                   	inc    esi
c00118c1:	41                   	inc    ecx
c00118c2:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118c8:	83 f9 08             	cmp    ecx,0x8
c00118cb:	0f 85 02 ff ff ff    	jne    c00117d3 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c00118d1:	eb cc                	jmp    c001189f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00118d3:	83 c4 1c             	add    esp,0x1c
c00118d6:	5b                   	pop    ebx
c00118d7:	5e                   	pop    esi
c00118d8:	5f                   	pop    edi
c00118d9:	5d                   	pop    ebp
c00118da:	c3                   	ret    

c00118db <KiCheckSignalZ>:
c00118db:	80 3d 0c 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310c,0x0
c00118e2:	74 43                	je     c0011927 <KiCheckSignalZ+0x4c>
c00118e4:	83 ec 24             	sub    esp,0x24
c00118e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00118eb:	50                   	push   eax
c00118ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118f4:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00118fa:	e8 ad fe ff ff       	call   c00117ac <KeCheckSignal(SigHandlerBlock*, int*)>
c00118ff:	83 c4 10             	add    esp,0x10
c0011902:	31 d2                	xor    edx,edx
c0011904:	85 c0                	test   eax,eax
c0011906:	74 19                	je     c0011921 <KiCheckSignalZ+0x46>
c0011908:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001190e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011911:	89 02                	mov    DWORD PTR [edx],eax
c0011913:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001191a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001191e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011921:	89 d0                	mov    eax,edx
c0011923:	83 c4 1c             	add    esp,0x1c
c0011926:	c3                   	ret    
c0011927:	31 d2                	xor    edx,edx
c0011929:	89 d0                	mov    eax,edx
c001192b:	c3                   	ret    

c001192c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001192c:	56                   	push   esi
c001192d:	53                   	push   ebx
c001192e:	bb 01 00 00 00       	mov    ebx,0x1
c0011933:	52                   	push   edx
c0011934:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011938:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001193c:	d3 e3                	shl    ebx,cl
c001193e:	83 f9 10             	cmp    ecx,0x10
c0011941:	7f 08                	jg     c001194b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011943:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011949:	75 10                	jne    c001195b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001194b:	83 ec 0c             	sub    esp,0xc
c001194e:	68 96 a1 02 c0       	push   0xc002a196
c0011953:	e8 b8 eb ff ff       	call   c0010510 <KePanic(char const*)>
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	f7 d3                	not    ebx
c001195d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011963:	58                   	pop    eax
c0011964:	5b                   	pop    ebx
c0011965:	5e                   	pop    esi
c0011966:	c3                   	ret    

c0011967 <KiFinishSignalZ>:
c0011967:	53                   	push   ebx
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011974:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011977:	83 fa 08             	cmp    edx,0x8
c001197a:	75 0c                	jne    c0011988 <KiFinishSignalZ+0x21>
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	50                   	push   eax
c0011980:	e8 7f 5a 00 00       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c0011985:	83 c4 10             	add    esp,0x10
c0011988:	50                   	push   eax
c0011989:	50                   	push   eax
c001198a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001198d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011992:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011995:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001199b:	e8 8c ff ff ff       	call   c001192c <KeCompleteSignal(SigHandlerBlock*, int)>
c00119a0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00119a6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00119ad:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00119b4:	83 c4 18             	add    esp,0x18
c00119b7:	5b                   	pop    ebx
c00119b8:	c3                   	ret    

c00119b9 <SysSeekDir(regs*)>:
c00119b9:	31 c0                	xor    eax,eax
c00119bb:	31 d2                	xor    edx,edx
c00119bd:	c3                   	ret    

c00119be <SysTellDir(regs*)>:
c00119be:	31 c0                	xor    eax,eax
c00119c0:	31 d2                	xor    edx,edx
c00119c2:	c3                   	ret    

c00119c3 <SysVerify(regs*)>:
c00119c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119c7:	31 d2                	xor    edx,edx
c00119c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119cc:	c3                   	ret    

c00119cd <SysGetArgc(regs*)>:
c00119cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119d5:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c00119db:	89 c2                	mov    edx,eax
c00119dd:	c1 fa 1f             	sar    edx,0x1f
c00119e0:	c3                   	ret    

c00119e1 <SysTTYName(regs*)>:
c00119e1:	b8 01 00 00 00       	mov    eax,0x1
c00119e6:	31 d2                	xor    edx,edx
c00119e8:	c3                   	ret    

c00119e9 <SysFormatDisk(regs*)>:
c00119e9:	56                   	push   esi
c00119ea:	53                   	push   ebx
c00119eb:	83 ec 04             	sub    esp,0x4
c00119ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119f2:	8b 1d 04 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032304
c00119f8:	eb 28                	jmp    c0011a22 <SysFormatDisk(regs*)+0x39>
c00119fa:	83 ec 0c             	sub    esp,0xc
c00119fd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a00:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a03:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a05:	51                   	push   ecx
c0011a06:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a09:	51                   	push   ecx
c0011a0a:	50                   	push   eax
c0011a0b:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0011a12:	50                   	push   eax
c0011a13:	53                   	push   ebx
c0011a14:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a17:	83 c4 20             	add    esp,0x20
c0011a1a:	83 f8 08             	cmp    eax,0x8
c0011a1d:	75 14                	jne    c0011a33 <SysFormatDisk(regs*)+0x4a>
c0011a1f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a22:	85 db                	test   ebx,ebx
c0011a24:	75 d4                	jne    c00119fa <SysFormatDisk(regs*)+0x11>
c0011a26:	83 c4 04             	add    esp,0x4
c0011a29:	b8 03 00 00 00       	mov    eax,0x3
c0011a2e:	31 d2                	xor    edx,edx
c0011a30:	5b                   	pop    ebx
c0011a31:	5e                   	pop    esi
c0011a32:	c3                   	ret    
c0011a33:	85 c0                	test   eax,eax
c0011a35:	74 1f                	je     c0011a56 <SysFormatDisk(regs*)+0x6d>
c0011a37:	83 f8 09             	cmp    eax,0x9
c0011a3a:	74 0d                	je     c0011a49 <SysFormatDisk(regs*)+0x60>
c0011a3c:	83 c4 04             	add    esp,0x4
c0011a3f:	b8 02 00 00 00       	mov    eax,0x2
c0011a44:	31 d2                	xor    edx,edx
c0011a46:	5b                   	pop    ebx
c0011a47:	5e                   	pop    esi
c0011a48:	c3                   	ret    
c0011a49:	83 c4 04             	add    esp,0x4
c0011a4c:	b8 01 00 00 00       	mov    eax,0x1
c0011a51:	31 d2                	xor    edx,edx
c0011a53:	5b                   	pop    ebx
c0011a54:	5e                   	pop    esi
c0011a55:	c3                   	ret    
c0011a56:	83 c4 04             	add    esp,0x4
c0011a59:	31 c0                	xor    eax,eax
c0011a5b:	31 d2                	xor    edx,edx
c0011a5d:	5b                   	pop    ebx
c0011a5e:	5e                   	pop    esi
c0011a5f:	c3                   	ret    

c0011a60 <SysSetDiskVolumeLabel(regs*)>:
c0011a60:	56                   	push   esi
c0011a61:	53                   	push   ebx
c0011a62:	83 ec 04             	sub    esp,0x4
c0011a65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a69:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a6c:	83 f8 19             	cmp    eax,0x19
c0011a6f:	77 33                	ja     c0011aa4 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a71:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c0011a78:	85 c9                	test   ecx,ecx
c0011a7a:	74 28                	je     c0011aa4 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a7c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a7f:	85 db                	test   ebx,ebx
c0011a81:	74 21                	je     c0011aa4 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a83:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a89:	85 d2                	test   edx,edx
c0011a8b:	74 17                	je     c0011aa4 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a8d:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a8f:	53                   	push   ebx
c0011a90:	50                   	push   eax
c0011a91:	51                   	push   ecx
c0011a92:	52                   	push   edx
c0011a93:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	89 c2                	mov    edx,eax
c0011a9b:	83 c4 04             	add    esp,0x4
c0011a9e:	c1 fa 1f             	sar    edx,0x1f
c0011aa1:	5b                   	pop    ebx
c0011aa2:	5e                   	pop    esi
c0011aa3:	c3                   	ret    
c0011aa4:	83 c4 04             	add    esp,0x4
c0011aa7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011aac:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ab1:	5b                   	pop    ebx
c0011ab2:	5e                   	pop    esi
c0011ab3:	c3                   	ret    

c0011ab4 <SysGetDiskVolumeLabel(regs*)>:
c0011ab4:	57                   	push   edi
c0011ab5:	56                   	push   esi
c0011ab6:	53                   	push   ebx
c0011ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011abb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011abe:	83 fa 19             	cmp    edx,0x19
c0011ac1:	77 3c                	ja     c0011aff <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ac3:	8b 0c 95 e0 2a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffcd520]
c0011aca:	85 c9                	test   ecx,ecx
c0011acc:	74 31                	je     c0011aff <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ace:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ad1:	85 db                	test   ebx,ebx
c0011ad3:	74 2a                	je     c0011aff <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ad5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ad8:	85 f6                	test   esi,esi
c0011ada:	74 23                	je     c0011aff <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011adc:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ae2:	85 c0                	test   eax,eax
c0011ae4:	74 19                	je     c0011aff <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	8b 38                	mov    edi,DWORD PTR [eax]
c0011aeb:	56                   	push   esi
c0011aec:	53                   	push   ebx
c0011aed:	52                   	push   edx
c0011aee:	51                   	push   ecx
c0011aef:	50                   	push   eax
c0011af0:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011af3:	83 c4 20             	add    esp,0x20
c0011af6:	89 c2                	mov    edx,eax
c0011af8:	5b                   	pop    ebx
c0011af9:	c1 fa 1f             	sar    edx,0x1f
c0011afc:	5e                   	pop    esi
c0011afd:	5f                   	pop    edi
c0011afe:	c3                   	ret    
c0011aff:	5b                   	pop    ebx
c0011b00:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b05:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b0a:	5e                   	pop    esi
c0011b0b:	5f                   	pop    edi
c0011b0c:	c3                   	ret    

c0011b0d <SysRealpath(regs*)>:
c0011b0d:	83 ec 0c             	sub    esp,0xc
c0011b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b14:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011b17:	85 d2                	test   edx,edx
c0011b19:	74 07                	je     c0011b22 <SysRealpath(regs*)+0x15>
c0011b1b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011b1e:	85 c0                	test   eax,eax
c0011b20:	75 0b                	jne    c0011b2d <SysRealpath(regs*)+0x20>
c0011b22:	b8 01 00 00 00       	mov    eax,0x1
c0011b27:	31 d2                	xor    edx,edx
c0011b29:	83 c4 0c             	add    esp,0xc
c0011b2c:	c3                   	ret    
c0011b2d:	6a 00                	push   0x0
c0011b2f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b35:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011b38:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011b3e:	51                   	push   ecx
c0011b3f:	52                   	push   edx
c0011b40:	50                   	push   eax
c0011b41:	e8 78 6b ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011b46:	83 c4 10             	add    esp,0x10
c0011b49:	31 c0                	xor    eax,eax
c0011b4b:	31 d2                	xor    edx,edx
c0011b4d:	83 c4 0c             	add    esp,0xc
c0011b50:	c3                   	ret    

c0011b51 <SysReadDir(regs*)>:
c0011b51:	53                   	push   ebx
c0011b52:	83 ec 18             	sub    esp,0x18
c0011b55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b59:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b5c:	83 f8 02             	cmp    eax,0x2
c0011b5f:	76 61                	jbe    c0011bc2 <SysReadDir(regs*)+0x71>
c0011b61:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011b68:	77 49                	ja     c0011bb3 <SysReadDir(regs*)+0x62>
c0011b6a:	83 ec 0c             	sub    esp,0xc
c0011b6d:	50                   	push   eax
c0011b6e:	e8 d6 1d 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011b73:	83 c4 10             	add    esp,0x10
c0011b76:	85 c0                	test   eax,eax
c0011b78:	74 39                	je     c0011bb3 <SysReadDir(regs*)+0x62>
c0011b7a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b82:	83 ec 0c             	sub    esp,0xc
c0011b85:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b87:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b8b:	51                   	push   ecx
c0011b8c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b8f:	51                   	push   ecx
c0011b90:	6a 00                	push   0x0
c0011b92:	68 10 01 00 00       	push   0x110
c0011b97:	50                   	push   eax
c0011b98:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b9b:	83 c4 20             	add    esp,0x20
c0011b9e:	85 c0                	test   eax,eax
c0011ba0:	74 29                	je     c0011bcb <SysReadDir(regs*)+0x7a>
c0011ba2:	83 f8 07             	cmp    eax,0x7
c0011ba5:	74 1b                	je     c0011bc2 <SysReadDir(regs*)+0x71>
c0011ba7:	b8 02 00 00 00       	mov    eax,0x2
c0011bac:	31 d2                	xor    edx,edx
c0011bae:	83 c4 18             	add    esp,0x18
c0011bb1:	5b                   	pop    ebx
c0011bb2:	c3                   	ret    
c0011bb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bb8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bbd:	83 c4 18             	add    esp,0x18
c0011bc0:	5b                   	pop    ebx
c0011bc1:	c3                   	ret    
c0011bc2:	b8 01 00 00 00       	mov    eax,0x1
c0011bc7:	31 d2                	xor    edx,edx
c0011bc9:	eb e3                	jmp    c0011bae <SysReadDir(regs*)+0x5d>
c0011bcb:	31 c0                	xor    eax,eax
c0011bcd:	31 d2                	xor    edx,edx
c0011bcf:	eb dd                	jmp    c0011bae <SysReadDir(regs*)+0x5d>

c0011bd1 <SysIsATTY(regs*)>:
c0011bd1:	83 ec 0c             	sub    esp,0xc
c0011bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bd8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bdb:	83 f8 02             	cmp    eax,0x2
c0011bde:	76 07                	jbe    c0011be7 <SysIsATTY(regs*)+0x16>
c0011be0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011be5:	75 26                	jne    c0011c0d <SysIsATTY(regs*)+0x3c>
c0011be7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bef:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011bf5:	85 c0                	test   eax,eax
c0011bf7:	74 24                	je     c0011c1d <SysIsATTY(regs*)+0x4c>
c0011bf9:	83 ec 0c             	sub    esp,0xc
c0011bfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bfe:	50                   	push   eax
c0011bff:	ff 12                	call   DWORD PTR [edx]
c0011c01:	31 d2                	xor    edx,edx
c0011c03:	0f b6 c0             	movzx  eax,al
c0011c06:	83 c4 10             	add    esp,0x10
c0011c09:	83 c4 0c             	add    esp,0xc
c0011c0c:	c3                   	ret    
c0011c0d:	83 ec 0c             	sub    esp,0xc
c0011c10:	50                   	push   eax
c0011c11:	e8 33 1d 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	85 c0                	test   eax,eax
c0011c1b:	75 dc                	jne    c0011bf9 <SysIsATTY(regs*)+0x28>
c0011c1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c27:	83 c4 0c             	add    esp,0xc
c0011c2a:	c3                   	ret    

c0011c2b <SysSeek(regs*)>:
c0011c2b:	53                   	push   ebx
c0011c2c:	83 ec 08             	sub    esp,0x8
c0011c2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c33:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c36:	8d 50 fd             	lea    edx,[eax-0x3]
c0011c39:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011c3f:	77 39                	ja     c0011c7a <SysSeek(regs*)+0x4f>
c0011c41:	83 ec 0c             	sub    esp,0xc
c0011c44:	50                   	push   eax
c0011c45:	e8 ff 1c 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	85 c0                	test   eax,eax
c0011c4f:	74 29                	je     c0011c7a <SysSeek(regs*)+0x4f>
c0011c51:	83 ec 04             	sub    esp,0x4
c0011c54:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c57:	31 db                	xor    ebx,ebx
c0011c59:	53                   	push   ebx
c0011c5a:	51                   	push   ecx
c0011c5b:	50                   	push   eax
c0011c5c:	e8 51 6e ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	85 c0                	test   eax,eax
c0011c66:	0f 95 c0             	setne  al
c0011c69:	31 d2                	xor    edx,edx
c0011c6b:	0f b6 c0             	movzx  eax,al
c0011c6e:	f7 d8                	neg    eax
c0011c70:	83 d2 00             	adc    edx,0x0
c0011c73:	83 c4 08             	add    esp,0x8
c0011c76:	f7 da                	neg    edx
c0011c78:	5b                   	pop    ebx
c0011c79:	c3                   	ret    
c0011c7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c84:	83 c4 08             	add    esp,0x8
c0011c87:	5b                   	pop    ebx
c0011c88:	c3                   	ret    

c0011c89 <SysTell(regs*)>:
c0011c89:	53                   	push   ebx
c0011c8a:	83 ec 08             	sub    esp,0x8
c0011c8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c91:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c94:	83 f8 02             	cmp    eax,0x2
c0011c97:	76 56                	jbe    c0011cef <SysTell(regs*)+0x66>
c0011c99:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c9e:	76 19                	jbe    c0011cb9 <SysTell(regs*)+0x30>
c0011ca0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ca3:	31 d2                	xor    edx,edx
c0011ca5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cb2:	31 c0                	xor    eax,eax
c0011cb4:	83 c4 08             	add    esp,0x8
c0011cb7:	5b                   	pop    ebx
c0011cb8:	c3                   	ret    
c0011cb9:	83 ec 0c             	sub    esp,0xc
c0011cbc:	50                   	push   eax
c0011cbd:	e8 87 1c 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011cc2:	83 c4 10             	add    esp,0x10
c0011cc5:	85 c0                	test   eax,eax
c0011cc7:	74 26                	je     c0011cef <SysTell(regs*)+0x66>
c0011cc9:	83 ec 08             	sub    esp,0x8
c0011ccc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ccf:	52                   	push   edx
c0011cd0:	50                   	push   eax
c0011cd1:	e8 88 6e ff ff       	call   c0008b5e <File::tell(unsigned long long*)>
c0011cd6:	83 c4 10             	add    esp,0x10
c0011cd9:	85 c0                	test   eax,eax
c0011cdb:	0f 95 c0             	setne  al
c0011cde:	31 d2                	xor    edx,edx
c0011ce0:	0f b6 c0             	movzx  eax,al
c0011ce3:	f7 d8                	neg    eax
c0011ce5:	83 d2 00             	adc    edx,0x0
c0011ce8:	83 c4 08             	add    esp,0x8
c0011ceb:	f7 da                	neg    edx
c0011ced:	5b                   	pop    ebx
c0011cee:	c3                   	ret    
c0011cef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cf4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cf9:	83 c4 08             	add    esp,0x8
c0011cfc:	5b                   	pop    ebx
c0011cfd:	c3                   	ret    

c0011cfe <SysSize(regs*)>:
c0011cfe:	53                   	push   ebx
c0011cff:	83 ec 18             	sub    esp,0x18
c0011d02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d09:	83 f8 02             	cmp    eax,0x2
c0011d0c:	76 5b                	jbe    c0011d69 <SysSize(regs*)+0x6b>
c0011d0e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d13:	76 19                	jbe    c0011d2e <SysSize(regs*)+0x30>
c0011d15:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d18:	31 d2                	xor    edx,edx
c0011d1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d27:	31 c0                	xor    eax,eax
c0011d29:	83 c4 18             	add    esp,0x18
c0011d2c:	5b                   	pop    ebx
c0011d2d:	c3                   	ret    
c0011d2e:	83 ec 0c             	sub    esp,0xc
c0011d31:	50                   	push   eax
c0011d32:	e8 12 1c 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	85 c0                	test   eax,eax
c0011d3c:	74 2b                	je     c0011d69 <SysSize(regs*)+0x6b>
c0011d3e:	83 ec 04             	sub    esp,0x4
c0011d41:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d45:	52                   	push   edx
c0011d46:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d49:	52                   	push   edx
c0011d4a:	50                   	push   eax
c0011d4b:	e8 a6 6f ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	85 c0                	test   eax,eax
c0011d55:	0f 95 c0             	setne  al
c0011d58:	31 d2                	xor    edx,edx
c0011d5a:	0f b6 c0             	movzx  eax,al
c0011d5d:	f7 d8                	neg    eax
c0011d5f:	83 d2 00             	adc    edx,0x0
c0011d62:	83 c4 18             	add    esp,0x18
c0011d65:	f7 da                	neg    edx
c0011d67:	5b                   	pop    ebx
c0011d68:	c3                   	ret    
c0011d69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d73:	83 c4 18             	add    esp,0x18
c0011d76:	5b                   	pop    ebx
c0011d77:	c3                   	ret    

c0011d78 <SysSizeFromFilename(regs*)>:
c0011d78:	55                   	push   ebp
c0011d79:	57                   	push   edi
c0011d7a:	56                   	push   esi
c0011d7b:	53                   	push   ebx
c0011d7c:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011d82:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011d89:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011d8c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011d8f:	85 f6                	test   esi,esi
c0011d91:	74 34                	je     c0011dc7 <SysSizeFromFilename(regs*)+0x4f>
c0011d93:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011d99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d9c:	83 f8 02             	cmp    eax,0x2
c0011d9f:	76 2d                	jbe    c0011dce <SysSizeFromFilename(regs*)+0x56>
c0011da1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011da6:	76 3b                	jbe    c0011de3 <SysSizeFromFilename(regs*)+0x6b>
c0011da8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011dab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011db1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011db8:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011dbe:	31 c0                	xor    eax,eax
c0011dc0:	5b                   	pop    ebx
c0011dc1:	31 d2                	xor    edx,edx
c0011dc3:	5e                   	pop    esi
c0011dc4:	5f                   	pop    edi
c0011dc5:	5d                   	pop    ebp
c0011dc6:	c3                   	ret    
c0011dc7:	89 f8                	mov    eax,edi
c0011dc9:	83 f8 02             	cmp    eax,0x2
c0011dcc:	77 d3                	ja     c0011da1 <SysSizeFromFilename(regs*)+0x29>
c0011dce:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011dd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dd9:	5b                   	pop    ebx
c0011dda:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ddf:	5e                   	pop    esi
c0011de0:	5f                   	pop    edi
c0011de1:	5d                   	pop    ebp
c0011de2:	c3                   	ret    
c0011de3:	83 ec 0c             	sub    esp,0xc
c0011de6:	68 14 01 00 00       	push   0x114
c0011deb:	e8 cb e2 ff ff       	call   c00100bb <malloc>
c0011df0:	6a 01                	push   0x1
c0011df2:	89 c5                	mov    ebp,eax
c0011df4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dfc:	50                   	push   eax
c0011dfd:	57                   	push   edi
c0011dfe:	55                   	push   ebp
c0011dff:	e8 d4 6a ff ff       	call   c00088d8 <File::File(char const*, Process*, bool)>
c0011e04:	83 c4 20             	add    esp,0x20
c0011e07:	85 ed                	test   ebp,ebp
c0011e09:	74 c3                	je     c0011dce <SysSizeFromFilename(regs*)+0x56>
c0011e0b:	83 ec 04             	sub    esp,0x4
c0011e0e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011e12:	50                   	push   eax
c0011e13:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011e16:	51                   	push   ecx
c0011e17:	55                   	push   ebp
c0011e18:	e8 d9 6e ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c0011e1d:	89 c3                	mov    ebx,eax
c0011e1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011e22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011e25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e28:	83 c4 10             	add    esp,0x10
c0011e2b:	85 db                	test   ebx,ebx
c0011e2d:	75 9f                	jne    c0011dce <SysSizeFromFilename(regs*)+0x56>
c0011e2f:	6a 00                	push   0x0
c0011e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e39:	05 0c 01 00 00       	add    eax,0x10c
c0011e3e:	50                   	push   eax
c0011e3f:	57                   	push   edi
c0011e40:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011e47:	53                   	push   ebx
c0011e48:	e8 71 68 ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e4d:	58                   	pop    eax
c0011e4e:	5a                   	pop    edx
c0011e4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011e53:	50                   	push   eax
c0011e54:	53                   	push   ebx
c0011e55:	e8 ea 62 ff ff       	call   c0008144 <KeDereferenceSymlink(char const*, char*)>
c0011e5a:	83 c4 10             	add    esp,0x10
c0011e5d:	83 f8 01             	cmp    eax,0x1
c0011e60:	74 1a                	je     c0011e7c <SysSizeFromFilename(regs*)+0x104>
c0011e62:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011e67:	74 26                	je     c0011e8f <SysSizeFromFilename(regs*)+0x117>
c0011e69:	85 f6                	test   esi,esi
c0011e6b:	0f 84 47 ff ff ff    	je     c0011db8 <SysSizeFromFilename(regs*)+0x40>
c0011e71:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011e77:	e9 3c ff ff ff       	jmp    c0011db8 <SysSizeFromFilename(regs*)+0x40>
c0011e7c:	85 f6                	test   esi,esi
c0011e7e:	0f 84 34 ff ff ff    	je     c0011db8 <SysSizeFromFilename(regs*)+0x40>
c0011e84:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011e8a:	e9 29 ff ff ff       	jmp    c0011db8 <SysSizeFromFilename(regs*)+0x40>
c0011e8f:	85 f6                	test   esi,esi
c0011e91:	0f 84 21 ff ff ff    	je     c0011db8 <SysSizeFromFilename(regs*)+0x40>
c0011e97:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011e9d:	e9 16 ff ff ff       	jmp    c0011db8 <SysSizeFromFilename(regs*)+0x40>

c0011ea2 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011ea2:	55                   	push   ebp
c0011ea3:	57                   	push   edi
c0011ea4:	56                   	push   esi
c0011ea5:	53                   	push   ebx
c0011ea6:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011eac:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011eb3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011eb6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011eb9:	85 f6                	test   esi,esi
c0011ebb:	74 34                	je     c0011ef1 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011ebd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011ec3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ec6:	83 f8 02             	cmp    eax,0x2
c0011ec9:	76 2d                	jbe    c0011ef8 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011ecb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ed0:	76 3b                	jbe    c0011f0d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011ed2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ed5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011edb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ee2:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011ee8:	31 c0                	xor    eax,eax
c0011eea:	5b                   	pop    ebx
c0011eeb:	31 d2                	xor    edx,edx
c0011eed:	5e                   	pop    esi
c0011eee:	5f                   	pop    edi
c0011eef:	5d                   	pop    ebp
c0011ef0:	c3                   	ret    
c0011ef1:	89 f8                	mov    eax,edi
c0011ef3:	83 f8 02             	cmp    eax,0x2
c0011ef6:	77 d3                	ja     c0011ecb <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011ef8:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011efe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f03:	5b                   	pop    ebx
c0011f04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f09:	5e                   	pop    esi
c0011f0a:	5f                   	pop    edi
c0011f0b:	5d                   	pop    ebp
c0011f0c:	c3                   	ret    
c0011f0d:	83 ec 0c             	sub    esp,0xc
c0011f10:	68 14 01 00 00       	push   0x114
c0011f15:	e8 a1 e1 ff ff       	call   c00100bb <malloc>
c0011f1a:	6a 00                	push   0x0
c0011f1c:	89 c5                	mov    ebp,eax
c0011f1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f26:	50                   	push   eax
c0011f27:	57                   	push   edi
c0011f28:	55                   	push   ebp
c0011f29:	e8 aa 69 ff ff       	call   c00088d8 <File::File(char const*, Process*, bool)>
c0011f2e:	83 c4 20             	add    esp,0x20
c0011f31:	85 ed                	test   ebp,ebp
c0011f33:	74 c3                	je     c0011ef8 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011f35:	83 ec 04             	sub    esp,0x4
c0011f38:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011f3c:	50                   	push   eax
c0011f3d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f40:	51                   	push   ecx
c0011f41:	55                   	push   ebp
c0011f42:	e8 af 6d ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c0011f47:	89 c3                	mov    ebx,eax
c0011f49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011f4c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011f4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f52:	83 c4 10             	add    esp,0x10
c0011f55:	85 db                	test   ebx,ebx
c0011f57:	75 9f                	jne    c0011ef8 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011f59:	6a 00                	push   0x0
c0011f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f60:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f63:	05 0c 01 00 00       	add    eax,0x10c
c0011f68:	50                   	push   eax
c0011f69:	57                   	push   edi
c0011f6a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011f71:	53                   	push   ebx
c0011f72:	e8 47 67 ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f77:	58                   	pop    eax
c0011f78:	5a                   	pop    edx
c0011f79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011f7d:	50                   	push   eax
c0011f7e:	53                   	push   ebx
c0011f7f:	e8 c0 61 ff ff       	call   c0008144 <KeDereferenceSymlink(char const*, char*)>
c0011f84:	83 c4 10             	add    esp,0x10
c0011f87:	83 f8 01             	cmp    eax,0x1
c0011f8a:	74 1a                	je     c0011fa6 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011f8c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f91:	74 26                	je     c0011fb9 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011f93:	85 f6                	test   esi,esi
c0011f95:	0f 84 47 ff ff ff    	je     c0011ee2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011f9b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011fa1:	e9 3c ff ff ff       	jmp    c0011ee2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011fa6:	85 f6                	test   esi,esi
c0011fa8:	0f 84 34 ff ff ff    	je     c0011ee2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011fae:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011fb4:	e9 29 ff ff ff       	jmp    c0011ee2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011fb9:	85 f6                	test   esi,esi
c0011fbb:	0f 84 21 ff ff ff    	je     c0011ee2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011fc1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011fc7:	e9 16 ff ff ff       	jmp    c0011ee2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011fcc <SysClose(regs*)>:
c0011fcc:	53                   	push   ebx
c0011fcd:	83 ec 08             	sub    esp,0x8
c0011fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fd4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fd7:	83 f8 02             	cmp    eax,0x2
c0011fda:	76 41                	jbe    c001201d <SysClose(regs*)+0x51>
c0011fdc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011fe2:	83 fa 01             	cmp    edx,0x1
c0011fe5:	76 2d                	jbe    c0012014 <SysClose(regs*)+0x48>
c0011fe7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fec:	77 2f                	ja     c001201d <SysClose(regs*)+0x51>
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	50                   	push   eax
c0011ff2:	e8 52 19 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	89 c3                	mov    ebx,eax
c0011ffc:	85 c0                	test   eax,eax
c0011ffe:	74 1d                	je     c001201d <SysClose(regs*)+0x51>
c0012000:	83 ec 0c             	sub    esp,0xc
c0012003:	50                   	push   eax
c0012004:	e8 49 6a ff ff       	call   c0008a52 <File::close()>
c0012009:	8b 03                	mov    eax,DWORD PTR [ebx]
c001200b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001200e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012011:	83 c4 10             	add    esp,0x10
c0012014:	31 c0                	xor    eax,eax
c0012016:	31 d2                	xor    edx,edx
c0012018:	83 c4 08             	add    esp,0x8
c001201b:	5b                   	pop    ebx
c001201c:	c3                   	ret    
c001201d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012022:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012027:	83 c4 08             	add    esp,0x8
c001202a:	5b                   	pop    ebx
c001202b:	c3                   	ret    

c001202c <SysOpenDir(regs*)>:
c001202c:	56                   	push   esi
c001202d:	53                   	push   ebx
c001202e:	83 ec 04             	sub    esp,0x4
c0012031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012035:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012038:	85 c9                	test   ecx,ecx
c001203a:	74 5d                	je     c0012099 <SysOpenDir(regs*)+0x6d>
c001203c:	83 ec 0c             	sub    esp,0xc
c001203f:	68 14 01 00 00       	push   0x114
c0012044:	e8 72 e0 ff ff       	call   c00100bb <malloc>
c0012049:	83 c4 0c             	add    esp,0xc
c001204c:	89 c6                	mov    esi,eax
c001204e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012053:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012056:	50                   	push   eax
c0012057:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001205a:	52                   	push   edx
c001205b:	56                   	push   esi
c001205c:	e8 55 6e ff ff       	call   c0008eb6 <Directory::Directory(char const*, Process*)>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	85 f6                	test   esi,esi
c0012066:	74 31                	je     c0012099 <SysOpenDir(regs*)+0x6d>
c0012068:	83 ec 0c             	sub    esp,0xc
c001206b:	56                   	push   esi
c001206c:	e8 0d 6f ff ff       	call   c0008f7e <Directory::open()>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	85 c0                	test   eax,eax
c0012076:	75 21                	jne    c0012099 <SysOpenDir(regs*)+0x6d>
c0012078:	83 ec 0c             	sub    esp,0xc
c001207b:	56                   	push   esi
c001207c:	e8 cb 15 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c0012081:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012084:	83 c4 10             	add    esp,0x10
c0012087:	89 02                	mov    DWORD PTR [edx],eax
c0012089:	c1 f8 1f             	sar    eax,0x1f
c001208c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001208f:	83 c4 04             	add    esp,0x4
c0012092:	31 c0                	xor    eax,eax
c0012094:	31 d2                	xor    edx,edx
c0012096:	5b                   	pop    ebx
c0012097:	5e                   	pop    esi
c0012098:	c3                   	ret    
c0012099:	83 c4 04             	add    esp,0x4
c001209c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120a6:	5b                   	pop    ebx
c00120a7:	5e                   	pop    esi
c00120a8:	c3                   	ret    

c00120a9 <SysMakeDir(regs*)>:
c00120a9:	56                   	push   esi
c00120aa:	53                   	push   ebx
c00120ab:	83 ec 10             	sub    esp,0x10
c00120ae:	68 14 01 00 00       	push   0x114
c00120b3:	e8 03 e0 ff ff       	call   c00100bb <malloc>
c00120b8:	83 c4 0c             	add    esp,0xc
c00120bb:	89 c3                	mov    ebx,eax
c00120bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120c5:	50                   	push   eax
c00120c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120ca:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00120cd:	52                   	push   edx
c00120ce:	53                   	push   ebx
c00120cf:	e8 e2 6d ff ff       	call   c0008eb6 <Directory::Directory(char const*, Process*)>
c00120d4:	83 c4 10             	add    esp,0x10
c00120d7:	85 db                	test   ebx,ebx
c00120d9:	74 2c                	je     c0012107 <SysMakeDir(regs*)+0x5e>
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	53                   	push   ebx
c00120df:	e8 7a 70 ff ff       	call   c000915e <Directory::create()>
c00120e4:	89 c6                	mov    esi,eax
c00120e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120ee:	83 c4 10             	add    esp,0x10
c00120f1:	31 c0                	xor    eax,eax
c00120f3:	85 f6                	test   esi,esi
c00120f5:	0f 95 c0             	setne  al
c00120f8:	31 d2                	xor    edx,edx
c00120fa:	f7 d8                	neg    eax
c00120fc:	83 d2 00             	adc    edx,0x0
c00120ff:	83 c4 04             	add    esp,0x4
c0012102:	f7 da                	neg    edx
c0012104:	5b                   	pop    ebx
c0012105:	5e                   	pop    esi
c0012106:	c3                   	ret    
c0012107:	83 c4 04             	add    esp,0x4
c001210a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001210f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012114:	5b                   	pop    ebx
c0012115:	5e                   	pop    esi
c0012116:	c3                   	ret    

c0012117 <SysCloseDir(regs*)>:
c0012117:	53                   	push   ebx
c0012118:	83 ec 08             	sub    esp,0x8
c001211b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001211f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012122:	8d 50 fd             	lea    edx,[eax-0x3]
c0012125:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001212b:	77 2f                	ja     c001215c <SysCloseDir(regs*)+0x45>
c001212d:	83 ec 0c             	sub    esp,0xc
c0012130:	50                   	push   eax
c0012131:	e8 13 18 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	89 c3                	mov    ebx,eax
c001213b:	85 c0                	test   eax,eax
c001213d:	74 1d                	je     c001215c <SysCloseDir(regs*)+0x45>
c001213f:	83 ec 0c             	sub    esp,0xc
c0012142:	50                   	push   eax
c0012143:	e8 92 6e ff ff       	call   c0008fda <Directory::close()>
c0012148:	8b 03                	mov    eax,DWORD PTR [ebx]
c001214a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001214d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012150:	83 c4 10             	add    esp,0x10
c0012153:	31 c0                	xor    eax,eax
c0012155:	31 d2                	xor    edx,edx
c0012157:	83 c4 08             	add    esp,0x8
c001215a:	5b                   	pop    ebx
c001215b:	c3                   	ret    
c001215c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012161:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012166:	83 c4 08             	add    esp,0x8
c0012169:	5b                   	pop    ebx
c001216a:	c3                   	ret    

c001216b <SysWait(regs*)>:
c001216b:	83 ec 10             	sub    esp,0x10
c001216e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012172:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012175:	52                   	push   edx
c0012176:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012179:	51                   	push   ecx
c001217a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001217d:	50                   	push   eax
c001217e:	e8 21 50 00 00       	call   c00171a4 <waitTask(int, int*, int)>
c0012183:	83 c4 1c             	add    esp,0x1c
c0012186:	89 c2                	mov    edx,eax
c0012188:	c1 fa 1f             	sar    edx,0x1f
c001218b:	c3                   	ret    

c001218c <SysNotImpl(regs*)>:
c001218c:	83 ec 18             	sub    esp,0x18
c001218f:	68 a7 a1 02 c0       	push   0xc002a1a7
c0012194:	e8 77 e3 ff ff       	call   c0010510 <KePanic(char const*)>
c0012199:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001219e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121a3:	83 c4 1c             	add    esp,0x1c
c00121a6:	c3                   	ret    

c00121a7 <SysPanic(regs*)>:
c00121a7:	83 ec 18             	sub    esp,0x18
c00121aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121ae:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00121b1:	50                   	push   eax
c00121b2:	e8 59 e3 ff ff       	call   c0010510 <KePanic(char const*)>
c00121b7:	b8 01 00 00 00       	mov    eax,0x1
c00121bc:	31 d2                	xor    edx,edx
c00121be:	83 c4 1c             	add    esp,0x1c
c00121c1:	c3                   	ret    

c00121c2 <SysRmdir(regs*)>:
c00121c2:	56                   	push   esi
c00121c3:	53                   	push   ebx
c00121c4:	83 ec 20             	sub    esp,0x20
c00121c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121cb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00121ce:	68 14 01 00 00       	push   0x114
c00121d3:	e8 e3 de ff ff       	call   c00100bb <malloc>
c00121d8:	6a 00                	push   0x0
c00121da:	89 c3                	mov    ebx,eax
c00121dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121e4:	50                   	push   eax
c00121e5:	56                   	push   esi
c00121e6:	53                   	push   ebx
c00121e7:	e8 ec 66 ff ff       	call   c00088d8 <File::File(char const*, Process*, bool)>
c00121ec:	83 c4 14             	add    esp,0x14
c00121ef:	53                   	push   ebx
c00121f0:	e8 cd 69 ff ff       	call   c0008bc2 <File::unlink()>
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	85 db                	test   ebx,ebx
c00121fa:	74 14                	je     c0012210 <SysRmdir(regs*)+0x4e>
c00121fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012200:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012202:	83 ec 0c             	sub    esp,0xc
c0012205:	53                   	push   ebx
c0012206:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012210:	85 c0                	test   eax,eax
c0012212:	0f 95 c0             	setne  al
c0012215:	31 d2                	xor    edx,edx
c0012217:	0f b6 c0             	movzx  eax,al
c001221a:	f7 d8                	neg    eax
c001221c:	83 d2 00             	adc    edx,0x0
c001221f:	83 c4 14             	add    esp,0x14
c0012222:	f7 da                	neg    edx
c0012224:	5b                   	pop    ebx
c0012225:	5e                   	pop    esi
c0012226:	c3                   	ret    

c0012227 <SysUnlink(regs*)>:
c0012227:	56                   	push   esi
c0012228:	53                   	push   ebx
c0012229:	83 ec 20             	sub    esp,0x20
c001222c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012230:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012233:	68 14 01 00 00       	push   0x114
c0012238:	e8 7e de ff ff       	call   c00100bb <malloc>
c001223d:	6a 00                	push   0x0
c001223f:	89 c3                	mov    ebx,eax
c0012241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012246:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012249:	50                   	push   eax
c001224a:	56                   	push   esi
c001224b:	53                   	push   ebx
c001224c:	e8 87 66 ff ff       	call   c00088d8 <File::File(char const*, Process*, bool)>
c0012251:	83 c4 14             	add    esp,0x14
c0012254:	53                   	push   ebx
c0012255:	e8 68 69 ff ff       	call   c0008bc2 <File::unlink()>
c001225a:	83 c4 10             	add    esp,0x10
c001225d:	85 db                	test   ebx,ebx
c001225f:	74 14                	je     c0012275 <SysUnlink(regs*)+0x4e>
c0012261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012265:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012267:	83 ec 0c             	sub    esp,0xc
c001226a:	53                   	push   ebx
c001226b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001226e:	83 c4 10             	add    esp,0x10
c0012271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012275:	85 c0                	test   eax,eax
c0012277:	0f 95 c0             	setne  al
c001227a:	31 d2                	xor    edx,edx
c001227c:	0f b6 c0             	movzx  eax,al
c001227f:	f7 d8                	neg    eax
c0012281:	83 d2 00             	adc    edx,0x0
c0012284:	83 c4 14             	add    esp,0x14
c0012287:	f7 da                	neg    edx
c0012289:	5b                   	pop    ebx
c001228a:	5e                   	pop    esi
c001228b:	c3                   	ret    

c001228c <SysGetArgv(regs*)>:
c001228c:	83 ec 0c             	sub    esp,0xc
c001228f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012293:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012296:	85 c0                	test   eax,eax
c0012298:	78 2c                	js     c00122c6 <SysGetArgv(regs*)+0x3a>
c001229a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00122a0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00122a3:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c00122a9:	7d 1b                	jge    c00122c6 <SysGetArgv(regs*)+0x3a>
c00122ab:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c00122b2:	85 c0                	test   eax,eax
c00122b4:	74 18                	je     c00122ce <SysGetArgv(regs*)+0x42>
c00122b6:	83 ec 08             	sub    esp,0x8
c00122b9:	50                   	push   eax
c00122ba:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00122bd:	50                   	push   eax
c00122be:	e8 7d e3 fe ff       	call   c0000640 <strcpy>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	31 c0                	xor    eax,eax
c00122c8:	31 d2                	xor    edx,edx
c00122ca:	83 c4 0c             	add    esp,0xc
c00122cd:	c3                   	ret    
c00122ce:	b8 01 00 00 00       	mov    eax,0x1
c00122d3:	31 d2                	xor    edx,edx
c00122d5:	83 c4 0c             	add    esp,0xc
c00122d8:	c3                   	ret    

c00122d9 <SysUSleep(regs*)>:
c00122d9:	83 ec 1c             	sub    esp,0x1c
c00122dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00122e0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00122e3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00122e6:	6a 00                	push   0x0
c00122e8:	6a 64                	push   0x64
c00122ea:	52                   	push   edx
c00122eb:	50                   	push   eax
c00122ec:	e8 43 0b 01 00       	call   c0022e34 <__udivdi3>
c00122f1:	83 c4 18             	add    esp,0x18
c00122f4:	52                   	push   edx
c00122f5:	50                   	push   eax
c00122f6:	e8 a1 4f 00 00       	call   c001729c <milliTenthSleep(unsigned long long)>
c00122fb:	31 c0                	xor    eax,eax
c00122fd:	31 d2                	xor    edx,edx
c00122ff:	83 c4 1c             	add    esp,0x1c
c0012302:	c3                   	ret    

c0012303 <SysSpawn(regs*)>:
c0012303:	56                   	push   esi
c0012304:	53                   	push   ebx
c0012305:	83 ec 04             	sub    esp,0x4
c0012308:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001230c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001230f:	85 f6                	test   esi,esi
c0012311:	75 0a                	jne    c001231d <SysSpawn(regs*)+0x1a>
c0012313:	83 c4 04             	add    esp,0x4
c0012316:	31 c0                	xor    eax,eax
c0012318:	31 d2                	xor    edx,edx
c001231a:	5b                   	pop    ebx
c001231b:	5e                   	pop    esi
c001231c:	c3                   	ret    
c001231d:	83 ec 0c             	sub    esp,0xc
c0012320:	68 c4 07 00 00       	push   0x7c4
c0012325:	e8 91 dd ff ff       	call   c00100bb <malloc>
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012330:	89 c6                	mov    esi,eax
c0012332:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012335:	85 c9                	test   ecx,ecx
c0012337:	74 39                	je     c0012372 <SysSpawn(regs*)+0x6f>
c0012339:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001233e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012341:	52                   	push   edx
c0012342:	50                   	push   eax
c0012343:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012346:	50                   	push   eax
c0012347:	56                   	push   esi
c0012348:	e8 17 46 00 00       	call   c0016964 <Process::Process(char const*, Process*, char**)>
c001234d:	83 c4 10             	add    esp,0x10
c0012350:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0012357:	75 ba                	jne    c0012313 <SysSpawn(regs*)+0x10>
c0012359:	83 ec 0c             	sub    esp,0xc
c001235c:	56                   	push   esi
c001235d:	e8 de 4b 00 00       	call   c0016f40 <Process::createUserThread()>
c0012362:	8b 06                	mov    eax,DWORD PTR [esi]
c0012364:	83 c4 10             	add    esp,0x10
c0012367:	89 c2                	mov    edx,eax
c0012369:	83 c4 04             	add    esp,0x4
c001236c:	c1 fa 1f             	sar    edx,0x1f
c001236f:	5b                   	pop    ebx
c0012370:	5e                   	pop    esi
c0012371:	c3                   	ret    
c0012372:	31 c0                	xor    eax,eax
c0012374:	eb cb                	jmp    c0012341 <SysSpawn(regs*)+0x3e>

c0012376 <SysGetEnv(regs*)>:
c0012376:	57                   	push   edi
c0012377:	56                   	push   esi
c0012378:	53                   	push   ebx
c0012379:	83 ec 1c             	sub    esp,0x1c
c001237c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012380:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012385:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012388:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001238b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c001238e:	51                   	push   ecx
c001238f:	e8 2d cb ff ff       	call   c000eec1 <KeGetProcessTotalEnvCount(Process*)>
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	39 c7                	cmp    edi,eax
c0012399:	7c 14                	jl     c00123af <SysGetEnv(regs*)+0x39>
c001239b:	85 f6                	test   esi,esi
c001239d:	75 0b                	jne    c00123aa <SysGetEnv(regs*)+0x34>
c001239f:	83 c4 10             	add    esp,0x10
c00123a2:	31 c0                	xor    eax,eax
c00123a4:	5b                   	pop    ebx
c00123a5:	31 d2                	xor    edx,edx
c00123a7:	5e                   	pop    esi
c00123a8:	5f                   	pop    edi
c00123a9:	c3                   	ret    
c00123aa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123ad:	eb f0                	jmp    c001239f <SysGetEnv(regs*)+0x29>
c00123af:	8d 44 24 08          	lea    eax,[esp+0x8]
c00123b3:	83 ec 04             	sub    esp,0x4
c00123b6:	57                   	push   edi
c00123b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00123bd:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c00123c0:	57                   	push   edi
c00123c1:	50                   	push   eax
c00123c2:	e8 1a cb ff ff       	call   c000eee1 <KeGetProcessEnvPair(Process*, int)>
c00123c7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ce:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00123d2:	83 c4 0c             	add    esp,0xc
c00123d5:	85 d2                	test   edx,edx
c00123d7:	75 23                	jne    c00123fc <SysGetEnv(regs*)+0x86>
c00123d9:	83 ec 0c             	sub    esp,0xc
c00123dc:	50                   	push   eax
c00123dd:	e8 8e e1 fe ff       	call   c0000570 <strlen>
c00123e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123e5:	89 c3                	mov    ebx,eax
c00123e7:	e8 84 e1 fe ff       	call   c0000570 <strlen>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	31 d2                	xor    edx,edx
c00123f8:	5b                   	pop    ebx
c00123f9:	5e                   	pop    esi
c00123fa:	5f                   	pop    edi
c00123fb:	c3                   	ret    
c00123fc:	83 ec 08             	sub    esp,0x8
c00123ff:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012402:	50                   	push   eax
c0012403:	56                   	push   esi
c0012404:	e8 37 e2 fe ff       	call   c0000640 <strcpy>
c0012409:	58                   	pop    eax
c001240a:	5a                   	pop    edx
c001240b:	68 c1 a1 02 c0       	push   0xc002a1c1
c0012410:	56                   	push   esi
c0012411:	e8 2a e4 fe ff       	call   c0000840 <strcat>
c0012416:	59                   	pop    ecx
c0012417:	5b                   	pop    ebx
c0012418:	57                   	push   edi
c0012419:	56                   	push   esi
c001241a:	e8 21 e4 fe ff       	call   c0000840 <strcat>
c001241f:	83 c4 10             	add    esp,0x10
c0012422:	e9 78 ff ff ff       	jmp    c001239f <SysGetEnv(regs*)+0x29>

c0012427 <SysSetFatAttrib(regs*)>:
c0012427:	57                   	push   edi
c0012428:	56                   	push   esi
c0012429:	53                   	push   ebx
c001242a:	83 ec 1c             	sub    esp,0x1c
c001242d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012431:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012434:	68 14 01 00 00       	push   0x114
c0012439:	e8 7d dc ff ff       	call   c00100bb <malloc>
c001243e:	83 c4 0c             	add    esp,0xc
c0012441:	89 c3                	mov    ebx,eax
c0012443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012448:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001244b:	50                   	push   eax
c001244c:	57                   	push   edi
c001244d:	53                   	push   ebx
c001244e:	e8 83 65 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c0012453:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012456:	83 c4 0c             	add    esp,0xc
c0012459:	0f b6 d4             	movzx  edx,ah
c001245c:	0f b6 c0             	movzx  eax,al
c001245f:	52                   	push   edx
c0012460:	50                   	push   eax
c0012461:	53                   	push   ebx
c0012462:	e8 f5 67 ff ff       	call   c0008c5c <File::chfatattr(unsigned char, unsigned char)>
c0012467:	83 c4 10             	add    esp,0x10
c001246a:	85 db                	test   ebx,ebx
c001246c:	74 14                	je     c0012482 <SysSetFatAttrib(regs*)+0x5b>
c001246e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012472:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012474:	83 ec 0c             	sub    esp,0xc
c0012477:	53                   	push   ebx
c0012478:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012482:	85 c0                	test   eax,eax
c0012484:	0f 95 c0             	setne  al
c0012487:	31 d2                	xor    edx,edx
c0012489:	0f b6 c0             	movzx  eax,al
c001248c:	f7 d8                	neg    eax
c001248e:	83 d2 00             	adc    edx,0x0
c0012491:	83 c4 10             	add    esp,0x10
c0012494:	f7 da                	neg    edx
c0012496:	5b                   	pop    ebx
c0012497:	5e                   	pop    esi
c0012498:	5f                   	pop    edi
c0012499:	c3                   	ret    

c001249a <SysShutdown(regs*)>:
c001249a:	83 ec 1c             	sub    esp,0x1c
c001249d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124a1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00124a4:	85 c9                	test   ecx,ecx
c00124a6:	74 18                	je     c00124c0 <SysShutdown(regs*)+0x26>
c00124a8:	83 f9 01             	cmp    ecx,0x1
c00124ab:	74 26                	je     c00124d3 <SysShutdown(regs*)+0x39>
c00124ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124b7:	83 f9 02             	cmp    ecx,0x2
c00124ba:	74 24                	je     c00124e0 <SysShutdown(regs*)+0x46>
c00124bc:	83 c4 1c             	add    esp,0x1c
c00124bf:	c3                   	ret    
c00124c0:	e8 a1 e9 ff ff       	call   c0010e66 <KeShutdown()>
c00124c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124cf:	83 c4 1c             	add    esp,0x1c
c00124d2:	c3                   	ret    
c00124d3:	e8 c4 e9 ff ff       	call   c0010e9c <KeSleep()>
c00124d8:	31 c0                	xor    eax,eax
c00124da:	31 d2                	xor    edx,edx
c00124dc:	83 c4 1c             	add    esp,0x1c
c00124df:	c3                   	ret    
c00124e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124e8:	e8 df e9 ff ff       	call   c0010ecc <KeRestart()>
c00124ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124f5:	eb c5                	jmp    c00124bc <SysShutdown(regs*)+0x22>

c00124f7 <SysPipe(regs*)>:
c00124f7:	57                   	push   edi
c00124f8:	56                   	push   esi
c00124f9:	53                   	push   ebx
c00124fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124fe:	83 ec 0c             	sub    esp,0xc
c0012501:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012504:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012507:	6a 20                	push   0x20
c0012509:	e8 ad db ff ff       	call   c00100bb <malloc>
c001250e:	89 c3                	mov    ebx,eax
c0012510:	58                   	pop    eax
c0012511:	5a                   	pop    edx
c0012512:	68 00 50 00 00       	push   0x5000
c0012517:	53                   	push   ebx
c0012518:	e8 c9 e7 ff ff       	call   c0010ce6 <Pipe::Pipe(int)>
c001251d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012520:	e8 27 11 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c0012525:	89 07                	mov    DWORD PTR [edi],eax
c0012527:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001252a:	e8 1d 11 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c001252f:	83 c4 10             	add    esp,0x10
c0012532:	89 06                	mov    DWORD PTR [esi],eax
c0012534:	31 d2                	xor    edx,edx
c0012536:	5b                   	pop    ebx
c0012537:	31 c0                	xor    eax,eax
c0012539:	5e                   	pop    esi
c001253a:	5f                   	pop    edi
c001253b:	c3                   	ret    

c001253c <SysGetUnixTime(regs*)>:
c001253c:	57                   	push   edi
c001253d:	56                   	push   esi
c001253e:	53                   	push   ebx
c001253f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012543:	83 ec 08             	sub    esp,0x8
c0012546:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012549:	52                   	push   edx
c001254a:	68 c3 a1 02 c0       	push   0xc002a1c3
c001254f:	e8 28 4a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012554:	83 c4 10             	add    esp,0x10
c0012557:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c001255b:	74 3d                	je     c001259a <SysGetUnixTime(regs*)+0x5e>
c001255d:	83 ec 0c             	sub    esp,0xc
c0012560:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0012565:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001256b:	50                   	push   eax
c001256c:	e8 15 74 ff ff       	call   c0009986 <Clock::timeInSecondsLocal()>
c0012571:	83 c4 0c             	add    esp,0xc
c0012574:	52                   	push   edx
c0012575:	50                   	push   eax
c0012576:	68 d7 a1 02 c0       	push   0xc002a1d7
c001257b:	e8 fc 49 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012580:	83 c4 10             	add    esp,0x10
c0012583:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0012588:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001258e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012592:	5b                   	pop    ebx
c0012593:	5e                   	pop    esi
c0012594:	5f                   	pop    edi
c0012595:	e9 ec 73 ff ff       	jmp    c0009986 <Clock::timeInSecondsLocal()>
c001259a:	8b 35 50 2b 03 c0    	mov    esi,DWORD PTR ds:0xc0032b50
c00125a0:	8b 3d 54 2b 03 c0    	mov    edi,DWORD PTR ds:0xc0032b54
c00125a6:	89 f0                	mov    eax,esi
c00125a8:	89 fa                	mov    edx,edi
c00125aa:	01 f0                	add    eax,esi
c00125ac:	11 fa                	adc    edx,edi
c00125ae:	01 f0                	add    eax,esi
c00125b0:	11 fa                	adc    edx,edi
c00125b2:	89 c1                	mov    ecx,eax
c00125b4:	89 d3                	mov    ebx,edx
c00125b6:	0f a4 cb 05          	shld   ebx,ecx,0x5
c00125ba:	c1 e1 05             	shl    ecx,0x5
c00125bd:	01 c8                	add    eax,ecx
c00125bf:	11 da                	adc    edx,ebx
c00125c1:	01 f0                	add    eax,esi
c00125c3:	5b                   	pop    ebx
c00125c4:	11 fa                	adc    edx,edi
c00125c6:	5e                   	pop    esi
c00125c7:	5f                   	pop    edi
c00125c8:	c3                   	ret    

c00125c9 <string_ends_with(char const*, char const*)>:
c00125c9:	57                   	push   edi
c00125ca:	56                   	push   esi
c00125cb:	53                   	push   ebx
c00125cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125d0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00125d4:	83 ec 0c             	sub    esp,0xc
c00125d7:	53                   	push   ebx
c00125d8:	e8 93 df fe ff       	call   c0000570 <strlen>
c00125dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125e0:	89 c6                	mov    esi,eax
c00125e2:	e8 89 df fe ff       	call   c0000570 <strlen>
c00125e7:	83 c4 10             	add    esp,0x10
c00125ea:	39 c6                	cmp    esi,eax
c00125ec:	7d 06                	jge    c00125f4 <string_ends_with(char const*, char const*)+0x2b>
c00125ee:	5b                   	pop    ebx
c00125ef:	31 c0                	xor    eax,eax
c00125f1:	5e                   	pop    esi
c00125f2:	5f                   	pop    edi
c00125f3:	c3                   	ret    
c00125f4:	83 ec 08             	sub    esp,0x8
c00125f7:	29 c6                	sub    esi,eax
c00125f9:	57                   	push   edi
c00125fa:	01 f3                	add    ebx,esi
c00125fc:	53                   	push   ebx
c00125fd:	e8 4e e1 fe ff       	call   c0000750 <strcmp>
c0012602:	83 c4 10             	add    esp,0x10
c0012605:	85 c0                	test   eax,eax
c0012607:	5b                   	pop    ebx
c0012608:	0f 94 c0             	sete   al
c001260b:	5e                   	pop    esi
c001260c:	0f b6 c0             	movzx  eax,al
c001260f:	5f                   	pop    edi
c0012610:	c3                   	ret    

c0012611 <SysOpen(regs*)>:
c0012611:	56                   	push   esi
c0012612:	53                   	push   ebx
c0012613:	81 ec 04 01 00 00    	sub    esp,0x104
c0012619:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012620:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012623:	85 c0                	test   eax,eax
c0012625:	0f 84 bc 01 00 00    	je     c00127e7 <SysOpen(regs*)+0x1d6>
c001262b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001262e:	85 c0                	test   eax,eax
c0012630:	0f 84 b1 01 00 00    	je     c00127e7 <SysOpen(regs*)+0x1d6>
c0012636:	6a 00                	push   0x0
c0012638:	68 de a1 02 c0       	push   0xc002a1de
c001263d:	50                   	push   eax
c001263e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012642:	56                   	push   esi
c0012643:	e8 76 60 ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012648:	89 34 24             	mov    DWORD PTR [esp],esi
c001264b:	e8 20 df fe ff       	call   c0000570 <strlen>
c0012650:	83 c4 10             	add    esp,0x10
c0012653:	83 e8 01             	sub    eax,0x1
c0012656:	74 21                	je     c0012679 <SysOpen(regs*)+0x68>
c0012658:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001265c:	eb 12                	jmp    c0012670 <SysOpen(regs*)+0x5f>
c001265e:	83 fa 3a             	cmp    edx,0x3a
c0012661:	74 12                	je     c0012675 <SysOpen(regs*)+0x64>
c0012663:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012667:	83 e8 01             	sub    eax,0x1
c001266a:	74 0d                	je     c0012679 <SysOpen(regs*)+0x68>
c001266c:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012670:	83 fa 2e             	cmp    edx,0x2e
c0012673:	75 e9                	jne    c001265e <SysOpen(regs*)+0x4d>
c0012675:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012679:	83 ec 08             	sub    esp,0x8
c001267c:	68 e2 a1 02 c0       	push   0xc002a1e2
c0012681:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012684:	50                   	push   eax
c0012685:	e8 3f ff ff ff       	call   c00125c9 <string_ends_with(char const*, char const*)>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	85 c0                	test   eax,eax
c001268f:	74 1d                	je     c00126ae <SysOpen(regs*)+0x9d>
c0012691:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012694:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001269a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126a1:	81 c4 04 01 00 00    	add    esp,0x104
c00126a7:	31 c0                	xor    eax,eax
c00126a9:	31 d2                	xor    edx,edx
c00126ab:	5b                   	pop    ebx
c00126ac:	5e                   	pop    esi
c00126ad:	c3                   	ret    
c00126ae:	83 ec 08             	sub    esp,0x8
c00126b1:	68 e7 a1 02 c0       	push   0xc002a1e7
c00126b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126b9:	50                   	push   eax
c00126ba:	e8 0a ff ff ff       	call   c00125c9 <string_ends_with(char const*, char const*)>
c00126bf:	83 c4 10             	add    esp,0x10
c00126c2:	85 c0                	test   eax,eax
c00126c4:	75 cb                	jne    c0012691 <SysOpen(regs*)+0x80>
c00126c6:	83 ec 08             	sub    esp,0x8
c00126c9:	68 e3 a1 02 c0       	push   0xc002a1e3
c00126ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126d1:	50                   	push   eax
c00126d2:	e8 79 e0 fe ff       	call   c0000750 <strcmp>
c00126d7:	83 c4 10             	add    esp,0x10
c00126da:	85 c0                	test   eax,eax
c00126dc:	74 b3                	je     c0012691 <SysOpen(regs*)+0x80>
c00126de:	83 ec 08             	sub    esp,0x8
c00126e1:	68 e2 a1 02 c0       	push   0xc002a1e2
c00126e6:	56                   	push   esi
c00126e7:	e8 dd fe ff ff       	call   c00125c9 <string_ends_with(char const*, char const*)>
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	85 c0                	test   eax,eax
c00126f1:	75 9e                	jne    c0012691 <SysOpen(regs*)+0x80>
c00126f3:	83 ec 08             	sub    esp,0x8
c00126f6:	68 ec a1 02 c0       	push   0xc002a1ec
c00126fb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126fe:	50                   	push   eax
c00126ff:	e8 c5 fe ff ff       	call   c00125c9 <string_ends_with(char const*, char const*)>
c0012704:	83 c4 10             	add    esp,0x10
c0012707:	85 c0                	test   eax,eax
c0012709:	0f 85 eb 00 00 00    	jne    c00127fa <SysOpen(regs*)+0x1e9>
c001270f:	83 ec 08             	sub    esp,0x8
c0012712:	68 f1 a1 02 c0       	push   0xc002a1f1
c0012717:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001271a:	50                   	push   eax
c001271b:	e8 a9 fe ff ff       	call   c00125c9 <string_ends_with(char const*, char const*)>
c0012720:	83 c4 10             	add    esp,0x10
c0012723:	85 c0                	test   eax,eax
c0012725:	0f 85 cf 00 00 00    	jne    c00127fa <SysOpen(regs*)+0x1e9>
c001272b:	83 ec 08             	sub    esp,0x8
c001272e:	68 ed a1 02 c0       	push   0xc002a1ed
c0012733:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012736:	51                   	push   ecx
c0012737:	e8 14 e0 fe ff       	call   c0000750 <strcmp>
c001273c:	83 c4 10             	add    esp,0x10
c001273f:	85 c0                	test   eax,eax
c0012741:	0f 84 b3 00 00 00    	je     c00127fa <SysOpen(regs*)+0x1e9>
c0012747:	83 ec 08             	sub    esp,0x8
c001274a:	68 ec a1 02 c0       	push   0xc002a1ec
c001274f:	56                   	push   esi
c0012750:	e8 74 fe ff ff       	call   c00125c9 <string_ends_with(char const*, char const*)>
c0012755:	83 c4 10             	add    esp,0x10
c0012758:	85 c0                	test   eax,eax
c001275a:	0f 85 9a 00 00 00    	jne    c00127fa <SysOpen(regs*)+0x1e9>
c0012760:	83 ec 0c             	sub    esp,0xc
c0012763:	68 14 01 00 00       	push   0x114
c0012768:	e8 4e d9 ff ff       	call   c00100bb <malloc>
c001276d:	83 c4 0c             	add    esp,0xc
c0012770:	89 c6                	mov    esi,eax
c0012772:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012777:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001277a:	50                   	push   eax
c001277b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001277e:	52                   	push   edx
c001277f:	56                   	push   esi
c0012780:	e8 51 62 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c0012785:	83 c4 10             	add    esp,0x10
c0012788:	85 f6                	test   esi,esi
c001278a:	74 5b                	je     c00127e7 <SysOpen(regs*)+0x1d6>
c001278c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001278f:	0f b6 c2             	movzx  eax,dl
c0012792:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012795:	89 d0                	mov    eax,edx
c0012797:	83 e0 01             	and    eax,0x1
c001279a:	f6 c2 02             	test   dl,0x2
c001279d:	74 03                	je     c00127a2 <SysOpen(regs*)+0x191>
c001279f:	83 c8 02             	or     eax,0x2
c00127a2:	f6 c2 04             	test   dl,0x4
c00127a5:	74 03                	je     c00127aa <SysOpen(regs*)+0x199>
c00127a7:	83 c8 04             	or     eax,0x4
c00127aa:	f6 c2 08             	test   dl,0x8
c00127ad:	74 03                	je     c00127b2 <SysOpen(regs*)+0x1a1>
c00127af:	83 c8 0a             	or     eax,0xa
c00127b2:	80 e2 10             	and    dl,0x10
c00127b5:	74 03                	je     c00127ba <SysOpen(regs*)+0x1a9>
c00127b7:	83 c8 12             	or     eax,0x12
c00127ba:	83 ec 08             	sub    esp,0x8
c00127bd:	50                   	push   eax
c00127be:	56                   	push   esi
c00127bf:	e8 30 62 ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c00127c4:	83 c4 10             	add    esp,0x10
c00127c7:	85 c0                	test   eax,eax
c00127c9:	75 1c                	jne    c00127e7 <SysOpen(regs*)+0x1d6>
c00127cb:	83 ec 0c             	sub    esp,0xc
c00127ce:	56                   	push   esi
c00127cf:	e8 78 0e 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c00127d4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00127d7:	83 c4 10             	add    esp,0x10
c00127da:	89 02                	mov    DWORD PTR [edx],eax
c00127dc:	c1 f8 1f             	sar    eax,0x1f
c00127df:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00127e2:	e9 ba fe ff ff       	jmp    c00126a1 <SysOpen(regs*)+0x90>
c00127e7:	81 c4 04 01 00 00    	add    esp,0x104
c00127ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00127f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00127f7:	5b                   	pop    ebx
c00127f8:	5e                   	pop    esi
c00127f9:	c3                   	ret    
c00127fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00127fd:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012803:	e9 92 fe ff ff       	jmp    c001269a <SysOpen(regs*)+0x89>

c0012808 <KeSystemCall(regs*, void*)>:
c0012808:	53                   	push   ebx
c0012809:	83 ec 08             	sub    esp,0x8
c001280c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012810:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012813:	83 f8 48             	cmp    eax,0x48
c0012816:	77 16                	ja     c001282e <KeSystemCall(regs*, void*)+0x26>
c0012818:	8b 14 85 40 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2bc0]
c001281f:	85 d2                	test   edx,edx
c0012821:	74 0b                	je     c001282e <KeSystemCall(regs*, void*)+0x26>
c0012823:	83 ec 0c             	sub    esp,0xc
c0012826:	53                   	push   ebx
c0012827:	ff d2                	call   edx
c0012829:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001282c:	eb 0d                	jmp    c001283b <KeSystemCall(regs*, void*)+0x33>
c001282e:	52                   	push   edx
c001282f:	52                   	push   edx
c0012830:	50                   	push   eax
c0012831:	68 f6 a1 02 c0       	push   0xc002a1f6
c0012836:	e8 41 47 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001283b:	83 c4 10             	add    esp,0x10
c001283e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012843:	31 d2                	xor    edx,edx
c0012845:	83 c4 08             	add    esp,0x8
c0012848:	5b                   	pop    ebx
c0012849:	c3                   	ret    

c001284a <VgaText::isAtty()>:
c001284a:	b0 01                	mov    al,0x1
c001284c:	c3                   	ret    
c001284d:	90                   	nop

c001284e <VgaText::~VgaText()>:
c001284e:	83 ec 0c             	sub    esp,0xc
c0012851:	ba 60 a2 02 c0       	mov    edx,0xc002a260
c0012856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285a:	89 10                	mov    DWORD PTR [eax],edx
c001285c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012860:	83 ec 0c             	sub    esp,0xc
c0012863:	50                   	push   eax
c0012864:	e8 d1 0f 00 00       	call   c001383a <UnixFile::~UnixFile()>
c0012869:	83 c4 10             	add    esp,0x10
c001286c:	90                   	nop
c001286d:	83 c4 0c             	add    esp,0xc
c0012870:	c3                   	ret    
c0012871:	90                   	nop

c0012872 <VgaText::~VgaText()>:
c0012872:	83 ec 0c             	sub    esp,0xc
c0012875:	83 ec 0c             	sub    esp,0xc
c0012878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001287c:	e8 cd ff ff ff       	call   c001284e <VgaText::~VgaText()>
c0012881:	83 c4 10             	add    esp,0x10
c0012884:	83 ec 08             	sub    esp,0x8
c0012887:	68 84 01 00 00       	push   0x184
c001288c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012890:	e8 33 b3 ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0012895:	83 c4 10             	add    esp,0x10
c0012898:	83 c4 0c             	add    esp,0xc
c001289b:	c3                   	ret    

c001289c <VgaText::read(unsigned long long, void*, int*)>:
c001289c:	83 ec 10             	sub    esp,0x10
c001289f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ab:	e8 0b 85 ff ff       	call   c000adbb <readKeyboard(VgaText*, char*, unsigned long)>
c00128b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128b4:	89 02                	mov    DWORD PTR [edx],eax
c00128b6:	31 c0                	xor    eax,eax
c00128b8:	83 c4 1c             	add    esp,0x1c
c00128bb:	c3                   	ret    

c00128bc <setTerminalScrollLock(bool)>:
c00128bc:	c3                   	ret    

c00128bd <doTerminalCycle()>:
c00128bd:	c3                   	ret    

c00128be <addToTerminalCycle(VgaText*)>:
c00128be:	c3                   	ret    

c00128bf <scrollTerminalScrollLock(int)>:
c00128bf:	c3                   	ret    

c00128c0 <VgaText::updateTitle()>:
c00128c0:	c3                   	ret    
c00128c1:	90                   	nop

c00128c2 <VgaText::load()>:
c00128c2:	c3                   	ret    
c00128c3:	90                   	nop

c00128c4 <VgaText::updateCursor()>:
c00128c4:	83 ec 14             	sub    esp,0x14
c00128c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128cb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00128ce:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00128d1:	e8 96 9b 00 00       	call   c001c46c <HalConsoleCursorUpdate(int, int)>
c00128d6:	83 c4 1c             	add    esp,0x1c
c00128d9:	c3                   	ret    

c00128da <VgaText::doANSI_SGR(int)>:
c00128da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128e2:	85 d2                	test   edx,edx
c00128e4:	75 0b                	jne    c00128f1 <VgaText::doANSI_SGR(int)+0x17>
c00128e6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00128e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00128ec:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00128ef:	eb 59                	jmp    c001294a <VgaText::doANSI_SGR(int)+0x70>
c00128f1:	83 fa 07             	cmp    edx,0x7
c00128f4:	75 0b                	jne    c0012901 <VgaText::doANSI_SGR(int)+0x27>
c00128f6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00128f9:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00128fc:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00128ff:	eb 49                	jmp    c001294a <VgaText::doANSI_SGR(int)+0x70>
c0012901:	83 fa 1b             	cmp    edx,0x1b
c0012904:	74 e0                	je     c00128e6 <VgaText::doANSI_SGR(int)+0xc>
c0012906:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012909:	83 f9 07             	cmp    ecx,0x7
c001290c:	77 09                	ja     c0012917 <VgaText::doANSI_SGR(int)+0x3d>
c001290e:	8b 14 8d a0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a60]
c0012915:	eb 20                	jmp    c0012937 <VgaText::doANSI_SGR(int)+0x5d>
c0012917:	8d 4a d8             	lea    ecx,[edx-0x28]
c001291a:	83 f9 07             	cmp    ecx,0x7
c001291d:	77 09                	ja     c0012928 <VgaText::doANSI_SGR(int)+0x4e>
c001291f:	8b 14 8d a0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a60]
c0012926:	eb 22                	jmp    c001294a <VgaText::doANSI_SGR(int)+0x70>
c0012928:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001292b:	83 f9 07             	cmp    ecx,0x7
c001292e:	77 0b                	ja     c001293b <VgaText::doANSI_SGR(int)+0x61>
c0012930:	8b 14 95 58 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ba8]
c0012937:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001293a:	c3                   	ret    
c001293b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001293e:	83 f9 07             	cmp    ecx,0x7
c0012941:	77 0a                	ja     c001294d <VgaText::doANSI_SGR(int)+0x73>
c0012943:	8b 14 95 30 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2bd0]
c001294a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001294d:	c3                   	ret    

c001294e <VgaText::setDefaultBgColour(VgaColour)>:
c001294e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012952:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012956:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012959:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001295c:	c3                   	ret    
c001295d:	90                   	nop

c001295e <VgaText::setDefaultFgColour(VgaColour)>:
c001295e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012966:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012969:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001296c:	c3                   	ret    
c001296d:	90                   	nop

c001296e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001296e:	53                   	push   ebx
c001296f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012973:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012977:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001297b:	51                   	push   ecx
c001297c:	e8 cd ff ff ff       	call   c001294e <VgaText::setDefaultBgColour(VgaColour)>
c0012981:	58                   	pop    eax
c0012982:	5a                   	pop    edx
c0012983:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012987:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001298b:	5b                   	pop    ebx
c001298c:	eb d0                	jmp    c001295e <VgaText::setDefaultFgColour(VgaColour)>

c001298e <VgaText::setTitleTextColour(VgaColour)>:
c001298e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012992:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012996:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012999:	c3                   	ret    

c001299a <VgaText::setTitleColour(VgaColour)>:
c001299a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001299e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00129a5:	c3                   	ret    

c00129a6 <VgaText::setTitle(char*)>:
c00129a6:	c3                   	ret    
c00129a7:	90                   	nop

c00129a8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00129a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00129b1:	83 e0 0f             	and    eax,0xf
c00129b4:	c1 e2 04             	shl    edx,0x4
c00129b7:	09 d0                	or     eax,edx
c00129b9:	c3                   	ret    

c00129ba <VgaText::scrollScreen()>:
c00129ba:	55                   	push   ebp
c00129bb:	57                   	push   edi
c00129bc:	56                   	push   esi
c00129bd:	be 01 00 00 00       	mov    esi,0x1
c00129c2:	53                   	push   ebx
c00129c3:	83 ec 0c             	sub    esp,0xc
c00129c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129ca:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00129cd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00129d3:	31 ff                	xor    edi,edi
c00129d5:	01 e9                	add    ecx,ebp
c00129d7:	8a 01                	mov    al,BYTE PTR [ecx]
c00129d9:	83 fe 18             	cmp    esi,0x18
c00129dc:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00129e2:	75 20                	jne    c0012a04 <VgaText::scrollScreen()+0x4a>
c00129e4:	f7 c7 01 00 00 00    	test   edi,0x1
c00129ea:	74 15                	je     c0012a01 <VgaText::scrollScreen()+0x47>
c00129ec:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00129f0:	50                   	push   eax
c00129f1:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00129f5:	50                   	push   eax
c00129f6:	e8 ad ff ff ff       	call   c00129a8 <VgaText::combineColours(unsigned char, unsigned char)>
c00129fb:	5a                   	pop    edx
c00129fc:	5a                   	pop    edx
c00129fd:	88 01                	mov    BYTE PTR [ecx],al
c00129ff:	eb 03                	jmp    c0012a04 <VgaText::scrollScreen()+0x4a>
c0012a01:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012a04:	47                   	inc    edi
c0012a05:	41                   	inc    ecx
c0012a06:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012a0c:	75 c9                	jne    c00129d7 <VgaText::scrollScreen()+0x1d>
c0012a0e:	46                   	inc    esi
c0012a0f:	83 fe 19             	cmp    esi,0x19
c0012a12:	75 b9                	jne    c00129cd <VgaText::scrollScreen()+0x13>
c0012a14:	39 1d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,ebx
c0012a1a:	75 1f                	jne    c0012a3b <VgaText::scrollScreen()+0x81>
c0012a1c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012a20:	74 05                	je     c0012a27 <VgaText::scrollScreen()+0x6d>
c0012a22:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012a25:	eb 14                	jmp    c0012a3b <VgaText::scrollScreen()+0x81>
c0012a27:	50                   	push   eax
c0012a28:	50                   	push   eax
c0012a29:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012a2d:	50                   	push   eax
c0012a2e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012a32:	50                   	push   eax
c0012a33:	e8 c8 98 00 00       	call   c001c300 <HalConsoleScroll(int, int)>
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012a3f:	83 c4 0c             	add    esp,0xc
c0012a42:	5b                   	pop    ebx
c0012a43:	5e                   	pop    esi
c0012a44:	5f                   	pop    edi
c0012a45:	5d                   	pop    ebp
c0012a46:	e9 79 fe ff ff       	jmp    c00128c4 <VgaText::updateCursor()>
c0012a4b:	90                   	nop

c0012a4c <VgaText::combineCharAndColour(char, unsigned char)>:
c0012a4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012a51:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012a56:	c1 e0 08             	shl    eax,0x8
c0012a59:	09 d0                	or     eax,edx
c0012a5b:	c3                   	ret    

c0012a5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012a5c:	55                   	push   ebp
c0012a5d:	57                   	push   edi
c0012a5e:	56                   	push   esi
c0012a5f:	53                   	push   ebx
c0012a60:	83 ec 1c             	sub    esp,0x1c
c0012a63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012a67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012a6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a6f:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012a72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a76:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012a7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a7e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a82:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012a86:	85 ed                	test   ebp,ebp
c0012a88:	75 14                	jne    c0012a9e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012a8a:	c7 44 24 30 0a a2 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a20a
c0012a92:	83 c4 1c             	add    esp,0x1c
c0012a95:	5b                   	pop    ebx
c0012a96:	5e                   	pop    esi
c0012a97:	5f                   	pop    edi
c0012a98:	5d                   	pop    ebp
c0012a99:	e9 72 da ff ff       	jmp    c0010510 <KePanic(char const*)>
c0012a9e:	50                   	push   eax
c0012a9f:	50                   	push   eax
c0012aa0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012aa5:	50                   	push   eax
c0012aa6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012aab:	50                   	push   eax
c0012aac:	e8 f7 fe ff ff       	call   c00129a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0012ab1:	5a                   	pop    edx
c0012ab2:	0f be c9             	movsx  ecx,cl
c0012ab5:	5a                   	pop    edx
c0012ab6:	0f b6 c0             	movzx  eax,al
c0012ab9:	50                   	push   eax
c0012aba:	51                   	push   ecx
c0012abb:	e8 8c ff ff ff       	call   c0012a4c <VgaText::combineCharAndColour(char, unsigned char)>
c0012ac0:	6b d6 50             	imul   edx,esi,0x50
c0012ac3:	83 c4 10             	add    esp,0x10
c0012ac6:	01 da                	add    edx,ebx
c0012ac8:	0f b7 d2             	movzx  edx,dx
c0012acb:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012ad0:	39 3d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,edi
c0012ad6:	75 28                	jne    c0012b00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012adc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012ae0:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012ae4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012ae8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012aec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012af0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012af4:	83 c4 1c             	add    esp,0x1c
c0012af7:	5b                   	pop    ebx
c0012af8:	5e                   	pop    esi
c0012af9:	5f                   	pop    edi
c0012afa:	5d                   	pop    ebp
c0012afb:	e9 08 99 00 00       	jmp    c001c408 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012b00:	83 c4 1c             	add    esp,0x1c
c0012b03:	5b                   	pop    ebx
c0012b04:	5e                   	pop    esi
c0012b05:	5f                   	pop    edi
c0012b06:	5d                   	pop    ebp
c0012b07:	c3                   	ret    

c0012b08 <VgaText::getCursorX()>:
c0012b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b0c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012b0f:	c3                   	ret    

c0012b10 <VgaText::getCursorY()>:
c0012b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b14:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012b17:	c3                   	ret    

c0012b18 <VgaText::setCursor(int, int)>:
c0012b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b20:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012b23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b27:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012b2a:	e9 95 fd ff ff       	jmp    c00128c4 <VgaText::updateCursor()>

c0012b2f <setActiveTerminal(VgaText*)>:
c0012b2f:	53                   	push   ebx
c0012b30:	83 ec 08             	sub    esp,0x8
c0012b33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b37:	85 db                	test   ebx,ebx
c0012b39:	75 11                	jne    c0012b4c <setActiveTerminal(VgaText*)+0x1d>
c0012b3b:	c7 44 24 10 1a a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a21a
c0012b43:	83 c4 08             	add    esp,0x8
c0012b46:	5b                   	pop    ebx
c0012b47:	e9 c4 d9 ff ff       	jmp    c0010510 <KePanic(char const*)>
c0012b4c:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c0012b51:	85 c0                	test   eax,eax
c0012b53:	74 0c                	je     c0012b61 <setActiveTerminal(VgaText*)+0x32>
c0012b55:	83 ec 0c             	sub    esp,0xc
c0012b58:	50                   	push   eax
c0012b59:	e8 66 fd ff ff       	call   c00128c4 <VgaText::updateCursor()>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	89 1d f4 31 03 c0    	mov    DWORD PTR ds:0xc00331f4,ebx
c0012b67:	50                   	push   eax
c0012b68:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012b6b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012b6e:	53                   	push   ebx
c0012b6f:	e8 a4 ff ff ff       	call   c0012b18 <VgaText::setCursor(int, int)>
c0012b74:	83 c4 18             	add    esp,0x18
c0012b77:	5b                   	pop    ebx
c0012b78:	c3                   	ret    
c0012b79:	90                   	nop

c0012b7a <VgaText::clearScreen()>:
c0012b7a:	57                   	push   edi
c0012b7b:	56                   	push   esi
c0012b7c:	31 f6                	xor    esi,esi
c0012b7e:	53                   	push   ebx
c0012b7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b83:	52                   	push   edx
c0012b84:	6a 00                	push   0x0
c0012b86:	6a 00                	push   0x0
c0012b88:	53                   	push   ebx
c0012b89:	e8 8a ff ff ff       	call   c0012b18 <VgaText::setCursor(int, int)>
c0012b8e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012b95:	83 c4 10             	add    esp,0x10
c0012b98:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012b9b:	7e 20                	jle    c0012bbd <VgaText::clearScreen()+0x43>
c0012b9d:	31 ff                	xor    edi,edi
c0012b9f:	50                   	push   eax
c0012ba0:	50                   	push   eax
c0012ba1:	56                   	push   esi
c0012ba2:	57                   	push   edi
c0012ba3:	47                   	inc    edi
c0012ba4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012ba7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012baa:	6a 20                	push   0x20
c0012bac:	53                   	push   ebx
c0012bad:	e8 aa fe ff ff       	call   c0012a5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012bb2:	83 c4 20             	add    esp,0x20
c0012bb5:	83 ff 50             	cmp    edi,0x50
c0012bb8:	75 e5                	jne    c0012b9f <VgaText::clearScreen()+0x25>
c0012bba:	46                   	inc    esi
c0012bbb:	eb db                	jmp    c0012b98 <VgaText::clearScreen()+0x1e>
c0012bbd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012bc4:	5b                   	pop    ebx
c0012bc5:	5e                   	pop    esi
c0012bc6:	5f                   	pop    edi
c0012bc7:	c3                   	ret    

c0012bc8 <VgaText::setCursorX(int)>:
c0012bc8:	83 ec 10             	sub    esp,0x10
c0012bcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bcf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd6:	50                   	push   eax
c0012bd7:	e8 3c ff ff ff       	call   c0012b18 <VgaText::setCursor(int, int)>
c0012bdc:	83 c4 1c             	add    esp,0x1c
c0012bdf:	c3                   	ret    

c0012be0 <VgaText::setCursorY(int)>:
c0012be0:	83 ec 10             	sub    esp,0x10
c0012be3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012be7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012beb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012bee:	50                   	push   eax
c0012bef:	e8 24 ff ff ff       	call   c0012b18 <VgaText::setCursor(int, int)>
c0012bf4:	83 c4 1c             	add    esp,0x1c
c0012bf7:	c3                   	ret    

c0012bf8 <VgaText::incrementCursor(bool)>:
c0012bf8:	56                   	push   esi
c0012bf9:	53                   	push   ebx
c0012bfa:	51                   	push   ecx
c0012bfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012c03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012c06:	40                   	inc    eax
c0012c07:	83 f8 50             	cmp    eax,0x50
c0012c0a:	74 05                	je     c0012c11 <VgaText::incrementCursor(bool)+0x19>
c0012c0c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012c0f:	eb 24                	jmp    c0012c35 <VgaText::incrementCursor(bool)+0x3d>
c0012c11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012c14:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0012c1e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012c21:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012c24:	75 0f                	jne    c0012c35 <VgaText::incrementCursor(bool)+0x3d>
c0012c26:	83 ec 0c             	sub    esp,0xc
c0012c29:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012c2c:	53                   	push   ebx
c0012c2d:	e8 88 fd ff ff       	call   c00129ba <VgaText::scrollScreen()>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	89 f0                	mov    eax,esi
c0012c37:	84 c0                	test   al,al
c0012c39:	74 0c                	je     c0012c47 <VgaText::incrementCursor(bool)+0x4f>
c0012c3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c3f:	5a                   	pop    edx
c0012c40:	5b                   	pop    ebx
c0012c41:	5e                   	pop    esi
c0012c42:	e9 7d fc ff ff       	jmp    c00128c4 <VgaText::updateCursor()>
c0012c47:	58                   	pop    eax
c0012c48:	5b                   	pop    ebx
c0012c49:	5e                   	pop    esi
c0012c4a:	c3                   	ret    
c0012c4b:	90                   	nop

c0012c4c <VgaText::decrementCursor(bool)>:
c0012c4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012c54:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012c57:	85 c0                	test   eax,eax
c0012c59:	74 04                	je     c0012c5f <VgaText::decrementCursor(bool)+0x13>
c0012c5b:	48                   	dec    eax
c0012c5c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012c5f:	84 c9                	test   cl,cl
c0012c61:	74 09                	je     c0012c6c <VgaText::decrementCursor(bool)+0x20>
c0012c63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c67:	e9 58 fc ff ff       	jmp    c00128c4 <VgaText::updateCursor()>
c0012c6c:	c3                   	ret    
c0012c6d:	90                   	nop

c0012c6e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012c6e:	53                   	push   ebx
c0012c6f:	83 ec 08             	sub    esp,0x8
c0012c72:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012c77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012c7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012c83:	83 f8 07             	cmp    eax,0x7
c0012c86:	75 21                	jne    c0012ca9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012c88:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012c90:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012c98:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012ca0:	83 c4 08             	add    esp,0x8
c0012ca3:	5b                   	pop    ebx
c0012ca4:	e9 ce 65 ff ff       	jmp    c0009277 <KeBeep(int, int, bool)>
c0012ca9:	83 f8 0d             	cmp    eax,0xd
c0012cac:	75 09                	jne    c0012cb7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012cae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012cb5:	eb 2d                	jmp    c0012ce4 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012cb7:	83 f8 0a             	cmp    eax,0xa
c0012cba:	75 31                	jne    c0012ced <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012cbc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012cbf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012cc6:	8d 50 01             	lea    edx,[eax+0x1]
c0012cc9:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012ccc:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012ccf:	75 0f                	jne    c0012ce0 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012cd1:	83 ec 0c             	sub    esp,0xc
c0012cd4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012cd7:	53                   	push   ebx
c0012cd8:	e8 dd fc ff ff       	call   c00129ba <VgaText::scrollScreen()>
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ce4:	83 c4 08             	add    esp,0x8
c0012ce7:	5b                   	pop    ebx
c0012ce8:	e9 d7 fb ff ff       	jmp    c00128c4 <VgaText::updateCursor()>
c0012ced:	83 f8 08             	cmp    eax,0x8
c0012cf0:	75 25                	jne    c0012d17 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012cf2:	50                   	push   eax
c0012cf3:	50                   	push   eax
c0012cf4:	6a 01                	push   0x1
c0012cf6:	53                   	push   ebx
c0012cf7:	e8 50 ff ff ff       	call   c0012c4c <VgaText::decrementCursor(bool)>
c0012cfc:	5a                   	pop    edx
c0012cfd:	59                   	pop    ecx
c0012cfe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012d01:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012d04:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d07:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012d0a:	6a 20                	push   0x20
c0012d0c:	53                   	push   ebx
c0012d0d:	e8 4a fd ff ff       	call   c0012a5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012d12:	83 c4 28             	add    esp,0x28
c0012d15:	5b                   	pop    ebx
c0012d16:	c3                   	ret    
c0012d17:	83 ec 08             	sub    esp,0x8
c0012d1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012d1d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012d20:	51                   	push   ecx
c0012d21:	52                   	push   edx
c0012d22:	50                   	push   eax
c0012d23:	53                   	push   ebx
c0012d24:	e8 33 fd ff ff       	call   c0012a5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012d29:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012d2d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012d35:	83 c4 28             	add    esp,0x28
c0012d38:	5b                   	pop    ebx
c0012d39:	e9 ba fe ff ff       	jmp    c0012bf8 <VgaText::incrementCursor(bool)>

c0012d3e <VgaText::putchar(char)>:
c0012d3e:	57                   	push   edi
c0012d3f:	56                   	push   esi
c0012d40:	53                   	push   ebx
c0012d41:	83 ec 10             	sub    esp,0x10
c0012d44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012d48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d4c:	89 f8                	mov    eax,edi
c0012d4e:	0f be c0             	movsx  eax,al
c0012d51:	83 f8 5b             	cmp    eax,0x5b
c0012d54:	75 18                	jne    c0012d6e <VgaText::putchar(char)+0x30>
c0012d56:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012d5a:	74 20                	je     c0012d7c <VgaText::putchar(char)+0x3e>
c0012d5c:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012d62:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012d69:	e9 c1 00 00 00       	jmp    c0012e2f <VgaText::putchar(char)+0xf1>
c0012d6e:	83 f8 1b             	cmp    eax,0x1b
c0012d71:	75 09                	jne    c0012d7c <VgaText::putchar(char)+0x3e>
c0012d73:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012d77:	e9 b3 00 00 00       	jmp    c0012e2f <VgaText::putchar(char)+0xf1>
c0012d7c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012d7f:	84 c9                	test   cl,cl
c0012d81:	0f 84 98 00 00 00    	je     c0012e1f <VgaText::putchar(char)+0xe1>
c0012d87:	8d 77 c0             	lea    esi,[edi-0x40]
c0012d8a:	89 f2                	mov    edx,esi
c0012d8c:	80 fa 3e             	cmp    dl,0x3e
c0012d8f:	77 78                	ja     c0012e09 <VgaText::putchar(char)+0xcb>
c0012d91:	83 f8 6d             	cmp    eax,0x6d
c0012d94:	75 47                	jne    c0012ddd <VgaText::putchar(char)+0x9f>
c0012d96:	31 f6                	xor    esi,esi
c0012d98:	31 d2                	xor    edx,edx
c0012d9a:	31 c0                	xor    eax,eax
c0012d9c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012d9f:	7e 2d                	jle    c0012dce <VgaText::putchar(char)+0x90>
c0012da1:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012da6:	83 fa 3b             	cmp    edx,0x3b
c0012da9:	75 17                	jne    c0012dc2 <VgaText::putchar(char)+0x84>
c0012dab:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0012daf:	50                   	push   eax
c0012db0:	53                   	push   ebx
c0012db1:	e8 24 fb ff ff       	call   c00128da <VgaText::doANSI_SGR(int)>
c0012db6:	59                   	pop    ecx
c0012db7:	31 d2                	xor    edx,edx
c0012db9:	5f                   	pop    edi
c0012dba:	31 c0                	xor    eax,eax
c0012dbc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012dc0:	eb 09                	jmp    c0012dcb <VgaText::putchar(char)+0x8d>
c0012dc2:	6b c0 0a             	imul   eax,eax,0xa
c0012dc5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012dc9:	88 ca                	mov    dl,cl
c0012dcb:	46                   	inc    esi
c0012dcc:	eb ce                	jmp    c0012d9c <VgaText::putchar(char)+0x5e>
c0012dce:	84 d2                	test   dl,dl
c0012dd0:	74 2f                	je     c0012e01 <VgaText::putchar(char)+0xc3>
c0012dd2:	50                   	push   eax
c0012dd3:	53                   	push   ebx
c0012dd4:	e8 01 fb ff ff       	call   c00128da <VgaText::doANSI_SGR(int)>
c0012dd9:	58                   	pop    eax
c0012dda:	5a                   	pop    edx
c0012ddb:	eb 24                	jmp    c0012e01 <VgaText::putchar(char)+0xc3>
c0012ddd:	83 f8 4a             	cmp    eax,0x4a
c0012de0:	75 1f                	jne    c0012e01 <VgaText::putchar(char)+0xc3>
c0012de2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012de6:	75 19                	jne    c0012e01 <VgaText::putchar(char)+0xc3>
c0012de8:	83 ec 0c             	sub    esp,0xc
c0012deb:	53                   	push   ebx
c0012dec:	e8 89 fd ff ff       	call   c0012b7a <VgaText::clearScreen()>
c0012df1:	83 c4 0c             	add    esp,0xc
c0012df4:	6a 00                	push   0x0
c0012df6:	6a 00                	push   0x0
c0012df8:	53                   	push   ebx
c0012df9:	e8 1a fd ff ff       	call   c0012b18 <VgaText::setCursor(int, int)>
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012e07:	eb 26                	jmp    c0012e2f <VgaText::putchar(char)+0xf1>
c0012e09:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012e0c:	83 f8 0e             	cmp    eax,0xe
c0012e0f:	7f 1e                	jg     c0012e2f <VgaText::putchar(char)+0xf1>
c0012e11:	8d 48 01             	lea    ecx,[eax+0x1]
c0012e14:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012e17:	89 f9                	mov    ecx,edi
c0012e19:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0012e1d:	eb 10                	jmp    c0012e2f <VgaText::putchar(char)+0xf1>
c0012e1f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012e22:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012e25:	50                   	push   eax
c0012e26:	53                   	push   ebx
c0012e27:	e8 42 fe ff ff       	call   c0012c6e <VgaText::putchar(char, VgaColour, VgaColour)>
c0012e2c:	83 c4 10             	add    esp,0x10
c0012e2f:	83 c4 10             	add    esp,0x10
c0012e32:	5b                   	pop    ebx
c0012e33:	5e                   	pop    esi
c0012e34:	5f                   	pop    edi
c0012e35:	c3                   	ret    

c0012e36 <VgaText::putx(unsigned int)>:
c0012e36:	57                   	push   edi
c0012e37:	b9 11 00 00 00       	mov    ecx,0x11
c0012e3c:	56                   	push   esi
c0012e3d:	be 2f 89 02 c0       	mov    esi,0xc002892f
c0012e42:	53                   	push   ebx
c0012e43:	83 ec 20             	sub    esp,0x20
c0012e46:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012e4a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012e4e:	fc                   	cld    
c0012e4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e51:	be 08 00 00 00       	mov    esi,0x8
c0012e56:	50                   	push   eax
c0012e57:	50                   	push   eax
c0012e58:	89 d8                	mov    eax,ebx
c0012e5a:	c1 e3 04             	shl    ebx,0x4
c0012e5d:	c1 e8 1c             	shr    eax,0x1c
c0012e60:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012e65:	50                   	push   eax
c0012e66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e6a:	e8 cf fe ff ff       	call   c0012d3e <VgaText::putchar(char)>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	4e                   	dec    esi
c0012e73:	75 e1                	jne    c0012e56 <VgaText::putx(unsigned int)+0x20>
c0012e75:	83 c4 20             	add    esp,0x20
c0012e78:	5b                   	pop    ebx
c0012e79:	5e                   	pop    esi
c0012e7a:	5f                   	pop    edi
c0012e7b:	c3                   	ret    

c0012e7c <VgaText::puts(char const*)>:
c0012e7c:	53                   	push   ebx
c0012e7d:	83 ec 08             	sub    esp,0x8
c0012e80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e84:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e87:	85 c0                	test   eax,eax
c0012e89:	74 12                	je     c0012e9d <VgaText::puts(char const*)+0x21>
c0012e8b:	43                   	inc    ebx
c0012e8c:	51                   	push   ecx
c0012e8d:	51                   	push   ecx
c0012e8e:	50                   	push   eax
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	e8 a6 fe ff ff       	call   c0012d3e <VgaText::putchar(char)>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	eb e7                	jmp    c0012e84 <VgaText::puts(char const*)+0x8>
c0012e9d:	83 c4 08             	add    esp,0x8
c0012ea0:	5b                   	pop    ebx
c0012ea1:	c3                   	ret    

c0012ea2 <VgaText::write(unsigned long long, void*, int*)>:
c0012ea2:	55                   	push   ebp
c0012ea3:	57                   	push   edi
c0012ea4:	56                   	push   esi
c0012ea5:	53                   	push   ebx
c0012ea6:	83 ec 0c             	sub    esp,0xc
c0012ea9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ead:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012eb1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012eb5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012ebc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012ebf:	39 eb                	cmp    ebx,ebp
c0012ec1:	74 13                	je     c0012ed6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012ec3:	43                   	inc    ebx
c0012ec4:	50                   	push   eax
c0012ec5:	50                   	push   eax
c0012ec6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012eca:	50                   	push   eax
c0012ecb:	56                   	push   esi
c0012ecc:	e8 6d fe ff ff       	call   c0012d3e <VgaText::putchar(char)>
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	eb e9                	jmp    c0012ebf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012ed6:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012edd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ee1:	89 38                	mov    DWORD PTR [eax],edi
c0012ee3:	83 c4 0c             	add    esp,0xc
c0012ee6:	31 c0                	xor    eax,eax
c0012ee8:	5b                   	pop    ebx
c0012ee9:	5e                   	pop    esi
c0012eea:	5f                   	pop    edi
c0012eeb:	5d                   	pop    ebp
c0012eec:	c3                   	ret    
c0012eed:	90                   	nop

c0012eee <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012eee:	55                   	push   ebp
c0012eef:	57                   	push   edi
c0012ef0:	56                   	push   esi
c0012ef1:	53                   	push   ebx
c0012ef2:	83 ec 1c             	sub    esp,0x1c
c0012ef5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012ef9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012efd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f01:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012f08:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012f0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f10:	85 db                	test   ebx,ebx
c0012f12:	75 14                	jne    c0012f28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0012f14:	c7 44 24 30 28 a2 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a228
c0012f1c:	83 c4 1c             	add    esp,0x1c
c0012f1f:	5b                   	pop    ebx
c0012f20:	5e                   	pop    esi
c0012f21:	5f                   	pop    edi
c0012f22:	5d                   	pop    ebp
c0012f23:	e9 e8 d5 ff ff       	jmp    c0010510 <KePanic(char const*)>
c0012f28:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012f2f:	50                   	push   eax
c0012f30:	50                   	push   eax
c0012f31:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012f36:	50                   	push   eax
c0012f37:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012f3c:	50                   	push   eax
c0012f3d:	e8 66 fa ff ff       	call   c00129a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0012f42:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012f46:	83 c4 10             	add    esp,0x10
c0012f49:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012f4c:	0f b6 e8             	movzx  ebp,al
c0012f4f:	0f b7 c9             	movzx  ecx,cx
c0012f52:	01 c9                	add    ecx,ecx
c0012f54:	01 cb                	add    ebx,ecx
c0012f56:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f59:	85 c0                	test   eax,eax
c0012f5b:	0f 84 ef 00 00 00    	je     c0013050 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012f61:	83 f8 0d             	cmp    eax,0xd
c0012f64:	75 0c                	jne    c0012f72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012f66:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012f6d:	e9 d8 00 00 00       	jmp    c001304a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012f72:	83 f8 0a             	cmp    eax,0xa
c0012f75:	75 44                	jne    c0012fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012f77:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012f7a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012f81:	8d 48 01             	lea    ecx,[eax+0x1]
c0012f84:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012f87:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012f8a:	75 0f                	jne    c0012f9b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012f8c:	83 ec 0c             	sub    esp,0xc
c0012f8f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012f92:	57                   	push   edi
c0012f93:	e8 22 fa ff ff       	call   c00129ba <VgaText::scrollScreen()>
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	83 ec 0c             	sub    esp,0xc
c0012f9e:	57                   	push   edi
c0012f9f:	e8 20 f9 ff ff       	call   c00128c4 <VgaText::updateCursor()>
c0012fa4:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012fae:	0f b7 db             	movzx  ebx,bx
c0012fb1:	01 db                	add    ebx,ebx
c0012fb3:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012fb6:	e9 8f 00 00 00       	jmp    c001304a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012fbb:	83 f8 08             	cmp    eax,0x8
c0012fbe:	75 34                	jne    c0012ff4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012fc0:	51                   	push   ecx
c0012fc1:	51                   	push   ecx
c0012fc2:	6a 01                	push   0x1
c0012fc4:	57                   	push   edi
c0012fc5:	e8 82 fc ff ff       	call   c0012c4c <VgaText::decrementCursor(bool)>
c0012fca:	5b                   	pop    ebx
c0012fcb:	58                   	pop    eax
c0012fcc:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012fcf:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012fd2:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012fd5:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012fd8:	6a 20                	push   0x20
c0012fda:	57                   	push   edi
c0012fdb:	e8 7c fa ff ff       	call   c0012a5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012fe0:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012fe4:	83 c4 20             	add    esp,0x20
c0012fe7:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012fea:	0f b7 db             	movzx  ebx,bx
c0012fed:	01 db                	add    ebx,ebx
c0012fef:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012ff2:	eb 56                	jmp    c001304a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012ff4:	52                   	push   edx
c0012ff5:	52                   	push   edx
c0012ff6:	55                   	push   ebp
c0012ff7:	50                   	push   eax
c0012ff8:	e8 4f fa ff ff       	call   c0012a4c <VgaText::combineCharAndColour(char, unsigned char)>
c0012ffd:	83 c4 10             	add    esp,0x10
c0013000:	66 89 03             	mov    WORD PTR [ebx],ax
c0013003:	39 3d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,edi
c0013009:	75 1d                	jne    c0013028 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001300b:	83 ec 0c             	sub    esp,0xc
c001300e:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0013011:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0013014:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013018:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001301c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001301f:	50                   	push   eax
c0013020:	e8 e3 93 00 00       	call   c001c408 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0013025:	83 c4 20             	add    esp,0x20
c0013028:	83 c3 02             	add    ebx,0x2
c001302b:	50                   	push   eax
c001302c:	50                   	push   eax
c001302d:	6a 00                	push   0x0
c001302f:	57                   	push   edi
c0013030:	e8 c3 fb ff ff       	call   c0012bf8 <VgaText::incrementCursor(bool)>
c0013035:	83 c4 10             	add    esp,0x10
c0013038:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c001303c:	75 0c                	jne    c001304a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001303e:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0013042:	0f b7 db             	movzx  ebx,bx
c0013045:	01 db                	add    ebx,ebx
c0013047:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001304a:	46                   	inc    esi
c001304b:	e9 06 ff ff ff       	jmp    c0012f56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	57                   	push   edi
c0013054:	e8 6b f8 ff ff       	call   c00128c4 <VgaText::updateCursor()>
c0013059:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0013060:	83 c4 2c             	add    esp,0x2c
c0013063:	5b                   	pop    ebx
c0013064:	5e                   	pop    esi
c0013065:	5f                   	pop    edi
c0013066:	5d                   	pop    ebp
c0013067:	c3                   	ret    

c0013068 <VgaText::VgaText(char const*)>:
c0013068:	56                   	push   esi
c0013069:	53                   	push   ebx
c001306a:	83 ec 04             	sub    esp,0x4
c001306d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013071:	83 ec 08             	sub    esp,0x8
c0013074:	6a 00                	push   0x0
c0013076:	50                   	push   eax
c0013077:	e8 d8 05 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	ba 60 a2 02 c0       	mov    edx,0xc002a260
c0013084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013088:	89 10                	mov    DWORD PTR [eax],edx
c001308a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0013095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013099:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00130a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00130a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ac:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00130b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00130bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130bf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00130c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ca:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00130d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00130dc:	83 ec 0c             	sub    esp,0xc
c00130df:	68 38 a2 02 c0       	push   0xc002a238
c00130e4:	e8 93 3e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00130f7:	83 ec 0c             	sub    esp,0xc
c00130fa:	6a 01                	push   0x1
c00130fc:	e8 a6 09 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0013101:	83 c4 10             	add    esp,0x10
c0013104:	89 c2                	mov    edx,eax
c0013106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001310d:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c0013113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013117:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001311a:	89 c6                	mov    esi,eax
c001311c:	e8 e3 d5 ff ff       	call   c0010704 <Phys::allocatePage()>
c0013121:	68 05 0c 00 00       	push   0xc05
c0013126:	56                   	push   esi
c0013127:	50                   	push   eax
c0013128:	53                   	push   ebx
c0013129:	e8 5c 10 00 00       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c001312e:	83 c4 10             	add    esp,0x10
c0013131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013135:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013138:	83 ec 04             	sub    esp,0x4
c001313b:	68 a0 0f 00 00       	push   0xfa0
c0013140:	6a 00                	push   0x0
c0013142:	50                   	push   eax
c0013143:	e8 a8 d3 fe ff       	call   c00004f0 <memset>
c0013148:	83 c4 10             	add    esp,0x10
c001314b:	83 ec 04             	sub    esp,0x4
c001314e:	6a 00                	push   0x0
c0013150:	6a 07                	push   0x7
c0013152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013156:	e8 13 f8 ff ff       	call   c001296e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	83 ec 04             	sub    esp,0x4
c0013161:	6a 00                	push   0x0
c0013163:	6a 00                	push   0x0
c0013165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013169:	e8 aa f9 ff ff       	call   c0012b18 <VgaText::setCursor(int, int)>
c001316e:	83 c4 10             	add    esp,0x10
c0013171:	83 ec 0c             	sub    esp,0xc
c0013174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013178:	e8 fd f9 ff ff       	call   c0012b7a <VgaText::clearScreen()>
c001317d:	83 c4 10             	add    esp,0x10
c0013180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013184:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0013188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001318c:	05 82 00 00 00       	add    eax,0x82
c0013191:	83 ec 04             	sub    esp,0x4
c0013194:	68 80 00 00 00       	push   0x80
c0013199:	6a 00                	push   0x0
c001319b:	50                   	push   eax
c001319c:	e8 4f d3 fe ff       	call   c00004f0 <memset>
c00131a1:	83 c4 10             	add    esp,0x10
c00131a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a8:	05 02 01 00 00       	add    eax,0x102
c00131ad:	83 ec 04             	sub    esp,0x4
c00131b0:	68 80 00 00 00       	push   0x80
c00131b5:	6a 00                	push   0x0
c00131b7:	50                   	push   eax
c00131b8:	e8 33 d3 fe ff       	call   c00004f0 <memset>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	90                   	nop
c00131c1:	83 c4 04             	add    esp,0x4
c00131c4:	5b                   	pop    ebx
c00131c5:	5e                   	pop    esi
c00131c6:	c3                   	ret    
c00131c7:	90                   	nop

c00131c8 <VgaText::receiveKey(unsigned char)>:
c00131c8:	55                   	push   ebp
c00131c9:	57                   	push   edi
c00131ca:	56                   	push   esi
c00131cb:	53                   	push   ebx
c00131cc:	83 ec 2c             	sub    esp,0x2c
c00131cf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00131d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00131d7:	89 ef                	mov    edi,ebp
c00131d9:	81 e7 ff 00 00 00    	and    edi,0xff
c00131df:	0f 84 66 01 00 00    	je     c001334b <VgaText::receiveKey(unsigned char)+0x183>
c00131e5:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00131eb:	83 ff 08             	cmp    edi,0x8
c00131ee:	75 73                	jne    c0013263 <VgaText::receiveKey(unsigned char)+0x9b>
c00131f0:	83 ec 0c             	sub    esp,0xc
c00131f3:	56                   	push   esi
c00131f4:	e8 77 d3 fe ff       	call   c0000570 <strlen>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	85 c0                	test   eax,eax
c00131fe:	0f 84 02 01 00 00    	je     c0013306 <VgaText::receiveKey(unsigned char)+0x13e>
c0013204:	50                   	push   eax
c0013205:	50                   	push   eax
c0013206:	6a 08                	push   0x8
c0013208:	53                   	push   ebx
c0013209:	e8 30 fb ff ff       	call   c0012d3e <VgaText::putchar(char)>
c001320e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013211:	e8 5a d3 fe ff       	call   c0000570 <strlen>
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0013221:	83 fa 0d             	cmp    edx,0xd
c0013224:	89 d0                	mov    eax,edx
c0013226:	0f 95 c1             	setne  cl
c0013229:	83 fa 1f             	cmp    edx,0x1f
c001322c:	0f 9e c2             	setle  dl
c001322f:	0f b6 d2             	movzx  edx,dl
c0013232:	85 ca                	test   edx,ecx
c0013234:	74 17                	je     c001324d <VgaText::receiveKey(unsigned char)+0x85>
c0013236:	83 e8 08             	sub    eax,0x8
c0013239:	3c 02                	cmp    al,0x2
c001323b:	76 10                	jbe    c001324d <VgaText::receiveKey(unsigned char)+0x85>
c001323d:	55                   	push   ebp
c001323e:	55                   	push   ebp
c001323f:	68 4b a2 02 c0       	push   0xc002a24b
c0013244:	53                   	push   ebx
c0013245:	e8 32 fc ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001324a:	83 c4 10             	add    esp,0x10
c001324d:	83 ec 0c             	sub    esp,0xc
c0013250:	56                   	push   esi
c0013251:	e8 1a d3 fe ff       	call   c0000570 <strlen>
c0013256:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001325e:	e9 a0 00 00 00       	jmp    c0013303 <VgaText::receiveKey(unsigned char)+0x13b>
c0013263:	83 ec 0c             	sub    esp,0xc
c0013266:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001326c:	50                   	push   eax
c001326d:	e8 fe d2 fe ff       	call   c0000570 <strlen>
c0013272:	89 34 24             	mov    DWORD PTR [esp],esi
c0013275:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013279:	e8 f2 d2 fe ff       	call   c0000570 <strlen>
c001327e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0013289:	3d 80 00 00 00       	cmp    eax,0x80
c001328e:	0f 87 b7 00 00 00    	ja     c001334b <VgaText::receiveKey(unsigned char)+0x183>
c0013294:	8d 45 ff             	lea    eax,[ebp-0x1]
c0013297:	8d 55 f7             	lea    edx,[ebp-0x9]
c001329a:	3c 1e                	cmp    al,0x1e
c001329c:	0f 96 c0             	setbe  al
c001329f:	80 fa 01             	cmp    dl,0x1
c00132a2:	0f 97 c2             	seta   dl
c00132a5:	0f b6 d2             	movzx  edx,dl
c00132a8:	85 c2                	test   edx,eax
c00132aa:	74 2e                	je     c00132da <VgaText::receiveKey(unsigned char)+0x112>
c00132ac:	83 ff 0d             	cmp    edi,0xd
c00132af:	74 29                	je     c00132da <VgaText::receiveKey(unsigned char)+0x112>
c00132b1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00132b4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00132b7:	68 51 a2 02 c0       	push   0xc002a251
c00132bc:	53                   	push   ebx
c00132bd:	e8 2c fc ff ff       	call   c0012eee <VgaText::puts(char const*, VgaColour, VgaColour)>
c00132c2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00132c5:	8d 45 40             	lea    eax,[ebp+0x40]
c00132c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00132cb:	0f b6 c0             	movzx  eax,al
c00132ce:	50                   	push   eax
c00132cf:	53                   	push   ebx
c00132d0:	e8 99 f9 ff ff       	call   c0012c6e <VgaText::putchar(char, VgaColour, VgaColour)>
c00132d5:	83 c4 20             	add    esp,0x20
c00132d8:	eb 11                	jmp    c00132eb <VgaText::receiveKey(unsigned char)+0x123>
c00132da:	89 e8                	mov    eax,ebp
c00132dc:	51                   	push   ecx
c00132dd:	0f be c0             	movsx  eax,al
c00132e0:	51                   	push   ecx
c00132e1:	50                   	push   eax
c00132e2:	53                   	push   ebx
c00132e3:	e8 56 fa ff ff       	call   c0012d3e <VgaText::putchar(char)>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00132f0:	89 e8                	mov    eax,ebp
c00132f2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00132f6:	52                   	push   edx
c00132f7:	52                   	push   edx
c00132f8:	8d 44 24 26          	lea    eax,[esp+0x26]
c00132fc:	50                   	push   eax
c00132fd:	56                   	push   esi
c00132fe:	e8 3d d5 fe ff       	call   c0000840 <strcat>
c0013303:	83 c4 10             	add    esp,0x10
c0013306:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c001330c:	b0 01                	mov    al,0x1
c001330e:	83 ff 1c             	cmp    edi,0x1c
c0013311:	77 0e                	ja     c0013321 <VgaText::receiveKey(unsigned char)+0x159>
c0013313:	b8 08 04 00 10       	mov    eax,0x10000408
c0013318:	89 f9                	mov    ecx,edi
c001331a:	d3 e8                	shr    eax,cl
c001331c:	f7 d0                	not    eax
c001331e:	83 e0 01             	and    eax,0x1
c0013321:	84 c0                	test   al,al
c0013323:	74 04                	je     c0013329 <VgaText::receiveKey(unsigned char)+0x161>
c0013325:	84 d2                	test   dl,dl
c0013327:	74 22                	je     c001334b <VgaText::receiveKey(unsigned char)+0x183>
c0013329:	81 c3 02 01 00 00    	add    ebx,0x102
c001332f:	50                   	push   eax
c0013330:	50                   	push   eax
c0013331:	56                   	push   esi
c0013332:	53                   	push   ebx
c0013333:	e8 08 d5 fe ff       	call   c0000840 <strcat>
c0013338:	83 c4 0c             	add    esp,0xc
c001333b:	68 80 00 00 00       	push   0x80
c0013340:	6a 00                	push   0x0
c0013342:	56                   	push   esi
c0013343:	e8 a8 d1 fe ff       	call   c00004f0 <memset>
c0013348:	83 c4 10             	add    esp,0x10
c001334b:	83 c4 2c             	add    esp,0x2c
c001334e:	5b                   	pop    ebx
c001334f:	5e                   	pop    esi
c0013350:	5f                   	pop    edi
c0013351:	5d                   	pop    ebp
c0013352:	c3                   	ret    
c0013353:	90                   	nop

c0013354 <VgaText::doUpdate()>:
c0013354:	c3                   	ret    
c0013355:	66 90                	xchg   ax,ax
c0013357:	90                   	nop

c0013358 <TSS::TSS()>:
c0013358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001335c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013363:	90                   	nop
c0013364:	c3                   	ret    
c0013365:	90                   	nop
c0013366:	66 90                	xchg   ax,ax

c0013368 <TSS::setESP(unsigned long)>:
c0013368:	55                   	push   ebp
c0013369:	89 e5                	mov    ebp,esp
c001336b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001336e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013371:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013374:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013377:	90                   	nop
c0013378:	5d                   	pop    ebp
c0013379:	c3                   	ret    
c001337a:	66 90                	xchg   ax,ax

c001337c <TSS::flush()>:
c001337c:	55                   	push   ebp
c001337d:	89 e5                	mov    ebp,esp
c001337f:	83 ec 10             	sub    esp,0x10
c0013382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013385:	8b 00                	mov    eax,DWORD PTR [eax]
c0013387:	83 c8 03             	or     eax,0x3
c001338a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001338e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0013392:	66 89 d0             	mov    ax,dx
c0013395:	0f 00 d8             	ltr    ax
c0013398:	90                   	nop
c0013399:	c9                   	leave  
c001339a:	c3                   	ret    
c001339b:	90                   	nop

c001339c <TSS::setup(unsigned long, unsigned long)>:
c001339c:	55                   	push   ebp
c001339d:	89 e5                	mov    ebp,esp
c001339f:	83 ec 18             	sub    esp,0x18
c00133a2:	83 ec 0c             	sub    esp,0xc
c00133a5:	6a 68                	push   0x68
c00133a7:	e8 0f cd ff ff       	call   c00100bb <malloc>
c00133ac:	83 c4 10             	add    esp,0x10
c00133af:	89 c2                	mov    edx,eax
c00133b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00133b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133bd:	83 ec 08             	sub    esp,0x8
c00133c0:	50                   	push   eax
c00133c1:	68 74 a2 02 c0       	push   0xc002a274
c00133c6:	e8 b1 3b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133d4:	83 ec 04             	sub    esp,0x4
c00133d7:	6a 68                	push   0x68
c00133d9:	6a 00                	push   0x0
c00133db:	50                   	push   eax
c00133dc:	e8 0f d1 fe ff       	call   c00004f0 <memset>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133ea:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00133f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133f6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00133fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013402:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013405:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001340b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001340e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0013414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001341a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0013420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013426:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001342c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001342f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013432:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0013438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001343b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001343e:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0013444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013447:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001344a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0013450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013453:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013456:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0013459:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001345c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001345f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013462:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013465:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0013468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001346b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001346e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0013475:	83 ec 0c             	sub    esp,0xc
c0013478:	68 8b a2 02 c0       	push   0xc002a28b
c001347d:	e8 fa 3a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001348b:	0f 20 da             	mov    edx,cr3
c001348e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0013491:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0013494:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0013497:	83 ec 0c             	sub    esp,0xc
c001349a:	68 8e a2 02 c0       	push   0xc002a28e
c001349f:	e8 d8 3a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00134a4:	83 c4 10             	add    esp,0x10
c00134a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00134aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00134ad:	83 ec 08             	sub    esp,0x8
c00134b0:	50                   	push   eax
c00134b1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00134b4:	50                   	push   eax
c00134b5:	e8 66 bc ff ff       	call   c000f120 <GDTEntry::setBase(unsigned int)>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	83 ec 08             	sub    esp,0x8
c00134c0:	6a 68                	push   0x68
c00134c2:	8d 45 ec             	lea    eax,[ebp-0x14]
c00134c5:	50                   	push   eax
c00134c6:	e8 71 bc ff ff       	call   c000f13c <GDTEntry::setLimit(unsigned int)>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00134d2:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00134d5:	83 e0 0f             	and    eax,0xf
c00134d8:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00134db:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00134de:	83 c8 40             	or     eax,0x40
c00134e1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	68 91 a2 02 c0       	push   0xc002a291
c00134ec:	e8 8b 3a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00134f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00134ff:	83 ec 08             	sub    esp,0x8
c0013502:	50                   	push   eax
c0013503:	68 94 a2 02 c0       	push   0xc002a294
c0013508:	e8 6f 3a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0013515:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001351b:	05 64 01 00 00       	add    eax,0x164
c0013520:	83 ec 04             	sub    esp,0x4
c0013523:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0013526:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0013529:	50                   	push   eax
c001352a:	e8 41 bc ff ff       	call   c000f170 <GDT::addEntry(GDTEntry)>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	89 c2                	mov    edx,eax
c0013534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013537:	89 10                	mov    DWORD PTR [eax],edx
c0013539:	83 ec 0c             	sub    esp,0xc
c001353c:	68 a9 a2 02 c0       	push   0xc002a2a9
c0013541:	e8 36 3a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013546:	83 c4 10             	add    esp,0x10
c0013549:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001354e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013554:	05 64 01 00 00       	add    eax,0x164
c0013559:	83 ec 0c             	sub    esp,0xc
c001355c:	50                   	push   eax
c001355d:	e8 38 bc ff ff       	call   c000f19a <GDT::flush()>
c0013562:	83 c4 10             	add    esp,0x10
c0013565:	83 ec 0c             	sub    esp,0xc
c0013568:	68 ac a2 02 c0       	push   0xc002a2ac
c001356d:	e8 0a 3a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013578:	8b 00                	mov    eax,DWORD PTR [eax]
c001357a:	c9                   	leave  
c001357b:	c3                   	ret    

c001357c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001357c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013580:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013587:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001358c:	75 08                	jne    c0013596 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001358e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013594:	eb 38                	jmp    c00135ce <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0013596:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001359b:	75 17                	jne    c00135b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001359d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00135a5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00135ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00135b1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00135b4:	89 c1                	mov    ecx,eax
c00135b6:	83 e1 fd             	and    ecx,0xfffffffd
c00135b9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00135bf:	74 cd                	je     c001358e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00135c1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00135c6:	83 e0 ef             	and    eax,0xffffffef
c00135c9:	83 f8 08             	cmp    eax,0x8
c00135cc:	76 c0                	jbe    c001358e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00135ce:	31 c0                	xor    eax,eax
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop

c00135d2 <ReservedFilename::isAtty()>:
c00135d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00135d9:	31 c0                	xor    eax,eax
c00135db:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00135e1:	74 09                	je     c00135ec <ReservedFilename::isAtty()+0x1a>
c00135e3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00135e9:	0f 94 c0             	sete   al
c00135ec:	c3                   	ret    
c00135ed:	90                   	nop

c00135ee <ReservedFilename::write(unsigned long long, void*, int*)>:
c00135ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00135f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00135fd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013602:	75 08                	jne    c001360c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013604:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001360a:	eb 3d                	jmp    c0013649 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001360c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013611:	75 17                	jne    c001362a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0013613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013618:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001361b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013621:	8b 10                	mov    edx,DWORD PTR [eax]
c0013623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013627:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001362a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001362f:	75 04                	jne    c0013635 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013631:	89 0a                	mov    DWORD PTR [edx],ecx
c0013633:	eb 14                	jmp    c0013649 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013635:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001363a:	74 c8                	je     c0013604 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001363c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013641:	83 e0 ef             	and    eax,0xffffffef
c0013644:	83 f8 08             	cmp    eax,0x8
c0013647:	76 bb                	jbe    c0013604 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013649:	31 c0                	xor    eax,eax
c001364b:	c3                   	ret    

c001364c <UnixFile::getFileDescriptor()>:
c001364c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013653:	c3                   	ret    

c0013654 <UnixFile::UnixFile(int)>:
c0013654:	53                   	push   ebx
c0013655:	83 ec 28             	sub    esp,0x28
c0013658:	ba d8 a2 02 c0       	mov    edx,0xc002a2d8
c001365d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013661:	89 10                	mov    DWORD PTR [eax],edx
c0013663:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001366b:	0f 8f 90 01 00 00    	jg     c0013801 <UnixFile::UnixFile(int)+0x1ad>
c0013671:	a1 e0 d5 02 c0       	mov    eax,ds:0xc002d5e0
c0013676:	8d 50 01             	lea    edx,[eax+0x1]
c0013679:	89 15 e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,edx
c001367f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013683:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013686:	83 ec 08             	sub    esp,0x8
c0013689:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001368d:	68 78 32 03 c0       	push   0xc0033278
c0013692:	e8 0b 46 01 00       	call   c0027ca2 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013697:	83 c4 10             	add    esp,0x10
c001369a:	a0 74 32 03 c0       	mov    al,ds:0xc0033274
c001369f:	83 f0 01             	xor    eax,0x1
c00136a2:	0f b6 c0             	movzx  eax,al
c00136a5:	85 c0                	test   eax,eax
c00136a7:	0f 84 55 01 00 00    	je     c0013802 <UnixFile::UnixFile(int)+0x1ae>
c00136ad:	c6 05 74 32 03 c0 01 	mov    BYTE PTR ds:0xc0033274,0x1
c00136b4:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c3:	e8 f3 c9 ff ff       	call   c00100bb <malloc>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	89 c3                	mov    ebx,eax
c00136cd:	83 ec 08             	sub    esp,0x8
c00136d0:	68 03 ff ff 0f       	push   0xfffff03
c00136d5:	53                   	push   ebx
c00136d6:	e8 2d 01 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c00136db:	83 c4 10             	add    esp,0x10
c00136de:	89 1d 6c 32 03 c0    	mov    DWORD PTR ds:0xc003326c,ebx
c00136e4:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f3:	e8 c3 c9 ff ff       	call   c00100bb <malloc>
c00136f8:	83 c4 10             	add    esp,0x10
c00136fb:	89 c3                	mov    ebx,eax
c00136fd:	83 ec 08             	sub    esp,0x8
c0013700:	68 01 ff ff 0f       	push   0xfffff01
c0013705:	53                   	push   ebx
c0013706:	e8 fd 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	89 1d 70 32 03 c0    	mov    DWORD PTR ds:0xc0033270,ebx
c0013714:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001371c:	83 ec 0c             	sub    esp,0xc
c001371f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013723:	e8 93 c9 ff ff       	call   c00100bb <malloc>
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	89 c3                	mov    ebx,eax
c001372d:	83 ec 08             	sub    esp,0x8
c0013730:	68 00 ff ff 0f       	push   0xfffff00
c0013735:	53                   	push   ebx
c0013736:	e8 cd 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c001373b:	83 c4 10             	add    esp,0x10
c001373e:	89 1d 64 32 03 c0    	mov    DWORD PTR ds:0xc0033264,ebx
c0013744:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013753:	e8 63 c9 ff ff       	call   c00100bb <malloc>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	89 c3                	mov    ebx,eax
c001375d:	83 ec 08             	sub    esp,0x8
c0013760:	68 02 ff ff 0f       	push   0xfffff02
c0013765:	53                   	push   ebx
c0013766:	e8 9d 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	89 1d 68 32 03 c0    	mov    DWORD PTR ds:0xc0033268,ebx
c0013774:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001377c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013781:	7f 7f                	jg     c0013802 <UnixFile::UnixFile(int)+0x1ae>
c0013783:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013792:	e8 24 c9 ff ff       	call   c00100bb <malloc>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	89 c3                	mov    ebx,eax
c001379c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137a0:	05 10 ff ff 0f       	add    eax,0xfffff10
c00137a5:	83 ec 08             	sub    esp,0x8
c00137a8:	50                   	push   eax
c00137a9:	53                   	push   ebx
c00137aa:	e8 59 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c00137af:	83 c4 10             	add    esp,0x10
c00137b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137b6:	89 1c 85 40 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccdc0],ebx
c00137bd:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00137c5:	83 ec 0c             	sub    esp,0xc
c00137c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137cc:	e8 ea c8 ff ff       	call   c00100bb <malloc>
c00137d1:	83 c4 10             	add    esp,0x10
c00137d4:	89 c3                	mov    ebx,eax
c00137d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137da:	05 20 ff ff 0f       	add    eax,0xfffff20
c00137df:	83 ec 08             	sub    esp,0x8
c00137e2:	50                   	push   eax
c00137e3:	53                   	push   ebx
c00137e4:	e8 1f 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c00137e9:	83 c4 10             	add    esp,0x10
c00137ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137f0:	89 1c 85 00 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce00],ebx
c00137f7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00137fc:	e9 7b ff ff ff       	jmp    c001377c <UnixFile::UnixFile(int)+0x128>
c0013801:	90                   	nop
c0013802:	83 c4 28             	add    esp,0x28
c0013805:	5b                   	pop    ebx
c0013806:	c3                   	ret    
c0013807:	90                   	nop

c0013808 <ReservedFilename::ReservedFilename(int)>:
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380f:	83 ec 08             	sub    esp,0x8
c0013812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013816:	50                   	push   eax
c0013817:	e8 38 fe ff ff       	call   c0013654 <UnixFile::UnixFile(int)>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	ba f4 a2 02 c0       	mov    edx,0xc002a2f4
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	89 10                	mov    DWORD PTR [eax],edx
c001382a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013832:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013835:	90                   	nop
c0013836:	83 c4 0c             	add    esp,0xc
c0013839:	c3                   	ret    

c001383a <UnixFile::~UnixFile()>:
c001383a:	83 ec 1c             	sub    esp,0x1c
c001383d:	ba d8 a2 02 c0       	mov    edx,0xc002a2d8
c0013842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013846:	89 10                	mov    DWORD PTR [eax],edx
c0013848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001384c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001384f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013854:	7f 76                	jg     c00138cc <UnixFile::~UnixFile()+0x92>
c0013856:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	68 78 32 03 c0       	push   0xc0033278
c0013866:	e8 0b 45 01 00       	call   c0027d76 <LinkedList<UnixFile>::getFirstElement()>
c001386b:	83 c4 10             	add    esp,0x10
c001386e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	68 78 32 03 c0       	push   0xc0033278
c001387a:	e8 ff 44 01 00       	call   c0027d7e <LinkedList<UnixFile>::removeFirst()>
c001387f:	83 c4 10             	add    esp,0x10
c0013882:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013886:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001388a:	74 43                	je     c00138cf <UnixFile::~UnixFile()+0x95>
c001388c:	83 ec 08             	sub    esp,0x8
c001388f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013893:	68 78 32 03 c0       	push   0xc0033278
c0013898:	e8 05 44 01 00       	call   c0027ca2 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001389d:	83 c4 10             	add    esp,0x10
c00138a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a4:	8d 50 01             	lea    edx,[eax+0x1]
c00138a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00138ab:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00138b0:	0f 94 c0             	sete   al
c00138b3:	0f b6 c0             	movzx  eax,al
c00138b6:	85 c0                	test   eax,eax
c00138b8:	74 a4                	je     c001385e <UnixFile::~UnixFile()+0x24>
c00138ba:	83 ec 0c             	sub    esp,0xc
c00138bd:	68 b0 a2 02 c0       	push   0xc002a2b0
c00138c2:	e8 49 cc ff ff       	call   c0010510 <KePanic(char const*)>
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	eb 92                	jmp    c001385e <UnixFile::~UnixFile()+0x24>
c00138cc:	90                   	nop
c00138cd:	eb 01                	jmp    c00138d0 <UnixFile::~UnixFile()+0x96>
c00138cf:	90                   	nop
c00138d0:	90                   	nop
c00138d1:	83 c4 1c             	add    esp,0x1c
c00138d4:	c3                   	ret    
c00138d5:	90                   	nop

c00138d6 <UnixFile::~UnixFile()>:
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e0:	e8 55 ff ff ff       	call   c001383a <UnixFile::~UnixFile()>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	83 ec 08             	sub    esp,0x8
c00138eb:	6a 0c                	push   0xc
c00138ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138f1:	e8 d2 a2 ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	83 c4 0c             	add    esp,0xc
c00138fc:	c3                   	ret    
c00138fd:	90                   	nop

c00138fe <ReservedFilename::~ReservedFilename()>:
c00138fe:	83 ec 0c             	sub    esp,0xc
c0013901:	ba f4 a2 02 c0       	mov    edx,0xc002a2f4
c0013906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390a:	89 10                	mov    DWORD PTR [eax],edx
c001390c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013910:	83 ec 0c             	sub    esp,0xc
c0013913:	50                   	push   eax
c0013914:	e8 21 ff ff ff       	call   c001383a <UnixFile::~UnixFile()>
c0013919:	83 c4 10             	add    esp,0x10
c001391c:	90                   	nop
c001391d:	83 c4 0c             	add    esp,0xc
c0013920:	c3                   	ret    
c0013921:	90                   	nop

c0013922 <ReservedFilename::~ReservedFilename()>:
c0013922:	83 ec 0c             	sub    esp,0xc
c0013925:	83 ec 0c             	sub    esp,0xc
c0013928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392c:	e8 cd ff ff ff       	call   c00138fe <ReservedFilename::~ReservedFilename()>
c0013931:	83 c4 10             	add    esp,0x10
c0013934:	83 ec 08             	sub    esp,0x8
c0013937:	6a 0c                	push   0xc
c0013939:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001393d:	e8 86 a2 ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	83 c4 0c             	add    esp,0xc
c0013948:	c3                   	ret    

c0013949 <KeGetFileFromDescriptor(int)>:
c0013949:	53                   	push   ebx
c001394a:	83 ec 08             	sub    esp,0x8
c001394d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013951:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013957:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001395d:	7f 30                	jg     c001398f <KeGetFileFromDescriptor(int)+0x46>
c001395f:	83 ec 0c             	sub    esp,0xc
c0013962:	68 78 32 03 c0       	push   0xc0033278
c0013967:	e8 0a 44 01 00       	call   c0027d76 <LinkedList<UnixFile>::getFirstElement()>
c001396c:	83 c4 10             	add    esp,0x10
c001396f:	8d 50 ff             	lea    edx,[eax-0x1]
c0013972:	83 fa fd             	cmp    edx,0xfffffffd
c0013975:	76 04                	jbe    c001397b <KeGetFileFromDescriptor(int)+0x32>
c0013977:	31 c0                	xor    eax,eax
c0013979:	eb 6e                	jmp    c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c001397b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001397e:	74 69                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c0013980:	52                   	push   edx
c0013981:	52                   	push   edx
c0013982:	50                   	push   eax
c0013983:	68 78 32 03 c0       	push   0xc0033278
c0013988:	e8 93 44 01 00       	call   c0027e20 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001398d:	eb dd                	jmp    c001396c <KeGetFileFromDescriptor(int)+0x23>
c001398f:	a1 6c 32 03 c0       	mov    eax,ds:0xc003326c
c0013994:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001399a:	74 4d                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c001399c:	a1 70 32 03 c0       	mov    eax,ds:0xc0033270
c00139a1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00139a7:	74 40                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139a9:	a1 68 32 03 c0       	mov    eax,ds:0xc0033268
c00139ae:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00139b4:	74 33                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139b6:	a1 64 32 03 c0       	mov    eax,ds:0xc0033264
c00139bb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00139c1:	74 26                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139c3:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00139c9:	83 f8 08             	cmp    eax,0x8
c00139cc:	77 09                	ja     c00139d7 <KeGetFileFromDescriptor(int)+0x8e>
c00139ce:	8b 04 85 40 32 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccdc0]
c00139d5:	eb 12                	jmp    c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139d7:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00139dd:	83 fb 08             	cmp    ebx,0x8
c00139e0:	77 95                	ja     c0013977 <KeGetFileFromDescriptor(int)+0x2e>
c00139e2:	8b 04 9d 00 32 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcce00]
c00139e9:	83 c4 08             	add    esp,0x8
c00139ec:	5b                   	pop    ebx
c00139ed:	c3                   	ret    

c00139ee <__static_initialization_and_destruction_0(int, int)>:
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00139f6:	75 34                	jne    c0013a2c <__static_initialization_and_destruction_0(int, int)+0x3e>
c00139f8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013a00:	75 2a                	jne    c0013a2c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013a02:	83 ec 0c             	sub    esp,0xc
c0013a05:	68 78 32 03 c0       	push   0xc0033278
c0013a0a:	e8 51 42 01 00       	call   c0027c60 <LinkedList<UnixFile>::LinkedList()>
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	83 ec 04             	sub    esp,0x4
c0013a15:	68 c0 cd 02 c0       	push   0xc002cdc0
c0013a1a:	68 78 32 03 c0       	push   0xc0033278
c0013a1f:	68 5e 7c 02 c0       	push   0xc0027c5e
c0013a24:	e8 4f a1 ff ff       	call   c000db78 <__cxa_atexit>
c0013a29:	83 c4 10             	add    esp,0x10
c0013a2c:	90                   	nop
c0013a2d:	83 c4 0c             	add    esp,0xc
c0013a30:	c3                   	ret    

c0013a31 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013a31:	83 ec 0c             	sub    esp,0xc
c0013a34:	83 ec 08             	sub    esp,0x8
c0013a37:	68 ff ff 00 00       	push   0xffff
c0013a3c:	6a 01                	push   0x1
c0013a3e:	e8 ab ff ff ff       	call   c00139ee <__static_initialization_and_destruction_0(int, int)>
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	83 c4 0c             	add    esp,0xc
c0013a49:	c3                   	ret    

c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013a4a:	53                   	push   ebx
c0013a4b:	8b 15 e8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5e8
c0013a51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a59:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013a5f:	89 d8                	mov    eax,ebx
c0013a61:	d1 e8                	shr    eax,1
c0013a63:	01 d0                	add    eax,edx
c0013a65:	80 e3 01             	and    bl,0x1
c0013a68:	8a 10                	mov    dl,BYTE PTR [eax]
c0013a6a:	75 09                	jne    c0013a75 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013a6c:	83 e2 f0             	and    edx,0xfffffff0
c0013a6f:	09 ca                	or     edx,ecx
c0013a71:	88 10                	mov    BYTE PTR [eax],dl
c0013a73:	5b                   	pop    ebx
c0013a74:	c3                   	ret    
c0013a75:	83 e2 0f             	and    edx,0xf
c0013a78:	0f b6 c9             	movzx  ecx,cl
c0013a7b:	c1 e1 04             	shl    ecx,0x4
c0013a7e:	09 ca                	or     edx,ecx
c0013a80:	88 10                	mov    BYTE PTR [eax],dl
c0013a82:	5b                   	pop    ebx
c0013a83:	c3                   	ret    

c0013a84 <Virt::getPageState(unsigned long)>:
c0013a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a88:	8b 0d e8 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5e8
c0013a8e:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013a94:	89 d0                	mov    eax,edx
c0013a96:	d1 e8                	shr    eax,1
c0013a98:	80 e2 01             	and    dl,0x1
c0013a9b:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013a9e:	74 03                	je     c0013aa3 <Virt::getPageState(unsigned long)+0x1f>
c0013aa0:	c1 e8 04             	shr    eax,0x4
c0013aa3:	83 e0 0f             	and    eax,0xf
c0013aa6:	c3                   	ret    

c0013aa7 <Virt::allocateKernelVirtualPages(int)>:
c0013aa7:	55                   	push   ebp
c0013aa8:	31 ed                	xor    ebp,ebp
c0013aaa:	57                   	push   edi
c0013aab:	31 ff                	xor    edi,edi
c0013aad:	56                   	push   esi
c0013aae:	53                   	push   ebx
c0013aaf:	31 db                	xor    ebx,ebx
c0013ab1:	83 ec 0c             	sub    esp,0xc
c0013ab4:	8b 35 e4 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5e4
c0013aba:	56                   	push   esi
c0013abb:	e8 c4 ff ff ff       	call   c0013a84 <Virt::getPageState(unsigned long)>
c0013ac0:	5a                   	pop    edx
c0013ac1:	84 c0                	test   al,al
c0013ac3:	75 41                	jne    c0013b06 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013ac5:	85 db                	test   ebx,ebx
c0013ac7:	75 02                	jne    c0013acb <Virt::allocateKernelVirtualPages(int)+0x24>
c0013ac9:	89 f5                	mov    ebp,esi
c0013acb:	83 c3 01             	add    ebx,0x1
c0013ace:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013ad2:	74 5f                	je     c0013b33 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013ad4:	83 c6 01             	add    esi,0x1
c0013ad7:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013add:	76 34                	jbe    c0013b13 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0013adf:	c7 05 e4 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d5e4,0xc8000
c0013ae9:	f7 c7 01 00 00 00    	test   edi,0x1
c0013aef:	75 2a                	jne    c0013b1b <Virt::allocateKernelVirtualPages(int)+0x74>
c0013af1:	be 00 80 0c 00       	mov    esi,0xc8000
c0013af6:	bf 01 00 00 00       	mov    edi,0x1
c0013afb:	56                   	push   esi
c0013afc:	e8 83 ff ff ff       	call   c0013a84 <Virt::getPageState(unsigned long)>
c0013b01:	5a                   	pop    edx
c0013b02:	84 c0                	test   al,al
c0013b04:	74 bf                	je     c0013ac5 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013b06:	31 db                	xor    ebx,ebx
c0013b08:	83 c6 01             	add    esi,0x1
c0013b0b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013b11:	77 cc                	ja     c0013adf <Virt::allocateKernelVirtualPages(int)+0x38>
c0013b13:	89 35 e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,esi
c0013b19:	eb 9f                	jmp    c0013aba <Virt::allocateKernelVirtualPages(int)+0x13>
c0013b1b:	83 ec 0c             	sub    esp,0xc
c0013b1e:	68 08 a3 02 c0       	push   0xc002a308
c0013b23:	e8 e8 c9 ff ff       	call   c0010510 <KePanic(char const*)>
c0013b28:	8b 35 e4 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5e4
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	eb 87                	jmp    c0013aba <Virt::allocateKernelVirtualPages(int)+0x13>
c0013b33:	89 2d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,ebp
c0013b39:	83 fb 01             	cmp    ebx,0x1
c0013b3c:	74 6f                	je     c0013bad <Virt::allocateKernelVirtualPages(int)+0x106>
c0013b3e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b42:	85 c9                	test   ecx,ecx
c0013b44:	74 49                	je     c0013b8f <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013b46:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b4a:	89 e8                	mov    eax,ebp
c0013b4c:	31 db                	xor    ebx,ebx
c0013b4e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0013b51:	eb 18                	jmp    c0013b6b <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013b53:	6a 01                	push   0x1
c0013b55:	83 c3 01             	add    ebx,0x1
c0013b58:	50                   	push   eax
c0013b59:	e8 ec fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013b5e:	58                   	pop    eax
c0013b5f:	5a                   	pop    edx
c0013b60:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013b64:	74 29                	je     c0013b8f <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013b66:	a1 e4 d5 02 c0       	mov    eax,ds:0xc002d5e4
c0013b6b:	8d 50 01             	lea    edx,[eax+0x1]
c0013b6e:	85 db                	test   ebx,ebx
c0013b70:	89 15 e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,edx
c0013b76:	74 24                	je     c0013b9c <Virt::allocateKernelVirtualPages(int)+0xf5>
c0013b78:	39 df                	cmp    edi,ebx
c0013b7a:	75 d7                	jne    c0013b53 <Virt::allocateKernelVirtualPages(int)+0xac>
c0013b7c:	6a 03                	push   0x3
c0013b7e:	83 c3 01             	add    ebx,0x1
c0013b81:	50                   	push   eax
c0013b82:	e8 c3 fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013b87:	59                   	pop    ecx
c0013b88:	5e                   	pop    esi
c0013b89:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013b8d:	75 d7                	jne    c0013b66 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013b8f:	83 c4 0c             	add    esp,0xc
c0013b92:	89 e8                	mov    eax,ebp
c0013b94:	5b                   	pop    ebx
c0013b95:	c1 e0 0c             	shl    eax,0xc
c0013b98:	5e                   	pop    esi
c0013b99:	5f                   	pop    edi
c0013b9a:	5d                   	pop    ebp
c0013b9b:	c3                   	ret    
c0013b9c:	6a 02                	push   0x2
c0013b9e:	bb 01 00 00 00       	mov    ebx,0x1
c0013ba3:	50                   	push   eax
c0013ba4:	e8 a1 fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ba9:	58                   	pop    eax
c0013baa:	5a                   	pop    edx
c0013bab:	eb b9                	jmp    c0013b66 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013bad:	6a 04                	push   0x4
c0013baf:	8d 45 01             	lea    eax,[ebp+0x1]
c0013bb2:	55                   	push   ebp
c0013bb3:	a3 e4 d5 02 c0       	mov    ds:0xc002d5e4,eax
c0013bb8:	e8 8d fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013bbd:	5b                   	pop    ebx
c0013bbe:	89 e8                	mov    eax,ebp
c0013bc0:	5e                   	pop    esi
c0013bc1:	c1 e0 0c             	shl    eax,0xc
c0013bc4:	83 c4 0c             	add    esp,0xc
c0013bc7:	5b                   	pop    ebx
c0013bc8:	5e                   	pop    esi
c0013bc9:	5f                   	pop    edi
c0013bca:	5d                   	pop    ebp
c0013bcb:	c3                   	ret    

c0013bcc <Virt::freeSwapfilePage(unsigned long)>:
c0013bcc:	53                   	push   ebx
c0013bcd:	8b 15 8c 32 03 c0    	mov    edx,DWORD PTR ds:0xc003328c
c0013bd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013bd7:	b8 01 00 00 00       	mov    eax,0x1
c0013bdc:	89 cb                	mov    ebx,ecx
c0013bde:	d3 e0                	shl    eax,cl
c0013be0:	c1 eb 05             	shr    ebx,0x5
c0013be3:	f7 d0                	not    eax
c0013be5:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013be8:	21 c1                	and    ecx,eax
c0013bea:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013bed:	5b                   	pop    ebx
c0013bee:	c3                   	ret    

c0013bef <Virt::swapIDToSector(unsigned long)>:
c0013bef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf3:	8b 15 ec d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5ec
c0013bf9:	8b 0d f4 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5f4
c0013bff:	0f af c2             	imul   eax,edx
c0013c02:	01 c8                	add    eax,ecx
c0013c04:	c3                   	ret    

c0013c05 <Virt::allocateSwapfilePage()>:
c0013c05:	55                   	push   ebp
c0013c06:	31 d2                	xor    edx,edx
c0013c08:	57                   	push   edi
c0013c09:	56                   	push   esi
c0013c0a:	53                   	push   ebx
c0013c0b:	83 ec 0c             	sub    esp,0xc
c0013c0e:	8b 0d ec d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ec
c0013c14:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0013c19:	f7 f1                	div    ecx
c0013c1b:	39 0d f0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5f0,ecx
c0013c21:	72 2f                	jb     c0013c52 <Virt::allocateSwapfilePage()+0x4d>
c0013c23:	8b 35 8c 32 03 c0    	mov    esi,DWORD PTR ds:0xc003328c
c0013c29:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c2b:	f6 c2 01             	test   dl,0x1
c0013c2e:	74 3e                	je     c0013c6e <Virt::allocateSwapfilePage()+0x69>
c0013c30:	31 c9                	xor    ecx,ecx
c0013c32:	bf 01 00 00 00       	mov    edi,0x1
c0013c37:	eb 12                	jmp    c0013c4b <Virt::allocateSwapfilePage()+0x46>
c0013c39:	89 fd                	mov    ebp,edi
c0013c3b:	89 ca                	mov    edx,ecx
c0013c3d:	d3 e5                	shl    ebp,cl
c0013c3f:	c1 ea 05             	shr    edx,0x5
c0013c42:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013c45:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013c47:	85 ea                	test   edx,ebp
c0013c49:	74 2c                	je     c0013c77 <Virt::allocateSwapfilePage()+0x72>
c0013c4b:	83 c1 01             	add    ecx,0x1
c0013c4e:	39 c8                	cmp    eax,ecx
c0013c50:	77 e7                	ja     c0013c39 <Virt::allocateSwapfilePage()+0x34>
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	68 1b a6 02 c0       	push   0xc002a61b
c0013c5a:	e8 b1 c8 ff ff       	call   c0010510 <KePanic(char const*)>
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	31 c9                	xor    ecx,ecx
c0013c64:	83 c4 0c             	add    esp,0xc
c0013c67:	89 c8                	mov    eax,ecx
c0013c69:	5b                   	pop    ebx
c0013c6a:	5e                   	pop    esi
c0013c6b:	5f                   	pop    edi
c0013c6c:	5d                   	pop    ebp
c0013c6d:	c3                   	ret    
c0013c6e:	89 f3                	mov    ebx,esi
c0013c70:	bd 01 00 00 00       	mov    ebp,0x1
c0013c75:	31 c9                	xor    ecx,ecx
c0013c77:	09 ea                	or     edx,ebp
c0013c79:	89 c8                	mov    eax,ecx
c0013c7b:	89 13                	mov    DWORD PTR [ebx],edx
c0013c7d:	83 c4 0c             	add    esp,0xc
c0013c80:	5b                   	pop    ebx
c0013c81:	5e                   	pop    esi
c0013c82:	5f                   	pop    edi
c0013c83:	5d                   	pop    ebp
c0013c84:	c3                   	ret    

c0013c85 <Virt::virtualMemorySetup()>:
c0013c85:	53                   	push   ebx
c0013c86:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013c8b:	6a 0f                	push   0xf
c0013c8d:	53                   	push   ebx
c0013c8e:	83 c3 01             	add    ebx,0x1
c0013c91:	e8 b4 fd ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013c96:	58                   	pop    eax
c0013c97:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013c9d:	5a                   	pop    edx
c0013c9e:	75 eb                	jne    c0013c8b <Virt::virtualMemorySetup()+0x6>
c0013ca0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013ca5:	6a 00                	push   0x0
c0013ca7:	53                   	push   ebx
c0013ca8:	83 c3 01             	add    ebx,0x1
c0013cab:	e8 9a fd ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013cb0:	59                   	pop    ecx
c0013cb1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013cb7:	58                   	pop    eax
c0013cb8:	75 eb                	jne    c0013ca5 <Virt::virtualMemorySetup()+0x20>
c0013cba:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013cbf:	6a 0f                	push   0xf
c0013cc1:	53                   	push   ebx
c0013cc2:	83 c3 01             	add    ebx,0x1
c0013cc5:	e8 80 fd ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013cca:	58                   	pop    eax
c0013ccb:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013cd1:	5a                   	pop    edx
c0013cd2:	75 eb                	jne    c0013cbf <Virt::virtualMemorySetup()+0x3a>
c0013cd4:	5b                   	pop    ebx
c0013cd5:	c3                   	ret    

c0013cd6 <Virt::setupPageSwapping(int)>:
c0013cd6:	53                   	push   ebx
c0013cd7:	83 ec 0c             	sub    esp,0xc
c0013cda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cde:	a1 e8 2a 03 c0       	mov    eax,ds:0xc0032ae8
c0013ce3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013ce9:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ceb:	53                   	push   ebx
c0013cec:	c1 e3 0b             	shl    ebx,0xb
c0013cef:	68 32 a6 02 c0       	push   0xc002a632
c0013cf4:	50                   	push   eax
c0013cf5:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013cf8:	89 1d f0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5f0,ebx
c0013cfe:	c6 05 f8 d5 02 c0 43 	mov    BYTE PTR ds:0xc002d5f8,0x43
c0013d05:	c1 eb 08             	shr    ebx,0x8
c0013d08:	a3 f4 d5 02 c0       	mov    ds:0xc002d5f4,eax
c0013d0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d10:	c7 05 ec d5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d5ec,0x8
c0013d1a:	e8 9c c3 ff ff       	call   c00100bb <malloc>
c0013d1f:	83 c4 0c             	add    esp,0xc
c0013d22:	89 c1                	mov    ecx,eax
c0013d24:	a3 8c 32 03 c0       	mov    ds:0xc003328c,eax
c0013d29:	31 d2                	xor    edx,edx
c0013d2b:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0013d30:	f7 35 ec d5 02 c0    	div    DWORD PTR ds:0xc002d5ec
c0013d36:	c1 e8 05             	shr    eax,0x5
c0013d39:	50                   	push   eax
c0013d3a:	6a 00                	push   0x0
c0013d3c:	51                   	push   ecx
c0013d3d:	e8 ae c7 fe ff       	call   c00004f0 <memset>
c0013d42:	83 c4 18             	add    esp,0x18
c0013d45:	5b                   	pop    ebx
c0013d46:	c3                   	ret    
c0013d47:	90                   	nop

c0013d48 <VAS::setCPUSpecific(unsigned long)>:
c0013d48:	c3                   	ret    
c0013d49:	90                   	nop

c0013d4a <VAS::VAS(VAS*)>:
c0013d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d59:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013d60:	90                   	nop
c0013d61:	c3                   	ret    

c0013d62 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d66:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013d6b:	89 c2                	mov    edx,eax
c0013d6d:	c1 e8 0a             	shr    eax,0xa
c0013d70:	c1 ea 16             	shr    edx,0x16
c0013d73:	83 f9 01             	cmp    ecx,0x1
c0013d76:	19 c9                	sbb    ecx,ecx
c0013d78:	c1 e2 0c             	shl    edx,0xc
c0013d7b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013d81:	25 fc 0f 00 00       	and    eax,0xffc
c0013d86:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013d8d:	01 d0                	add    eax,edx
c0013d8f:	c3                   	ret    

c0013d90 <VAS::getPageTableEntry(unsigned long)>:
c0013d90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d94:	89 ca                	mov    edx,ecx
c0013d96:	c1 e9 0a             	shr    ecx,0xa
c0013d99:	c1 ea 16             	shr    edx,0x16
c0013d9c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013da2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013da8:	c1 e0 0c             	shl    eax,0xc
c0013dab:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013dae:	c3                   	ret    

c0013daf <Virt::freeKernelVirtualPages(unsigned long)>:
c0013daf:	55                   	push   ebp
c0013db0:	57                   	push   edi
c0013db1:	bf 01 00 00 00       	mov    edi,0x1
c0013db6:	56                   	push   esi
c0013db7:	53                   	push   ebx
c0013db8:	83 ec 1c             	sub    esp,0x1c
c0013dbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013dbf:	c1 ee 0c             	shr    esi,0xc
c0013dc2:	eb 48                	jmp    c0013e0c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013dc4:	83 ec 08             	sub    esp,0x8
c0013dc7:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c0013dcc:	55                   	push   ebp
c0013dcd:	50                   	push   eax
c0013dce:	e8 bd ff ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0013dd3:	83 c4 10             	add    esp,0x10
c0013dd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dd8:	f6 c6 04             	test   dh,0x4
c0013ddb:	75 70                	jne    c0013e4d <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013ddd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013de3:	83 fb 04             	cmp    ebx,0x4
c0013de6:	0f 84 8a 00 00 00    	je     c0013e76 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013dec:	83 fb 02             	cmp    ebx,0x2
c0013def:	0f 84 9a 00 00 00    	je     c0013e8f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013df5:	83 fb 03             	cmp    ebx,0x3
c0013df8:	0f 84 be 00 00 00    	je     c0013ebc <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013dfe:	83 fb 01             	cmp    ebx,0x1
c0013e01:	0f 84 a2 00 00 00    	je     c0013ea9 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013e07:	83 c6 01             	add    esi,0x1
c0013e0a:	31 ff                	xor    edi,edi
c0013e0c:	56                   	push   esi
c0013e0d:	89 f5                	mov    ebp,esi
c0013e0f:	e8 70 fc ff ff       	call   c0013a84 <Virt::getPageState(unsigned long)>
c0013e14:	c1 e5 0c             	shl    ebp,0xc
c0013e17:	0f b6 d8             	movzx  ebx,al
c0013e1a:	5a                   	pop    edx
c0013e1b:	85 db                	test   ebx,ebx
c0013e1d:	75 a5                	jne    c0013dc4 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013e1f:	83 ec 0c             	sub    esp,0xc
c0013e22:	68 49 a6 02 c0       	push   0xc002a649
c0013e27:	e8 e4 c6 ff ff       	call   c0010510 <KePanic(char const*)>
c0013e2c:	5a                   	pop    edx
c0013e2d:	59                   	pop    ecx
c0013e2e:	55                   	push   ebp
c0013e2f:	8b 2d 90 32 03 c0    	mov    ebp,DWORD PTR ds:0xc0033290
c0013e35:	55                   	push   ebp
c0013e36:	e8 55 ff ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e40:	f6 c6 04             	test   dh,0x4
c0013e43:	75 08                	jne    c0013e4d <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013e45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e4b:	eb ba                	jmp    c0013e07 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013e4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e51:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013e57:	83 ec 0c             	sub    esp,0xc
c0013e5a:	52                   	push   edx
c0013e5b:	e8 3b c8 ff ff       	call   c001069b <Phys::freePage(unsigned long)>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	83 fb 04             	cmp    ebx,0x4
c0013e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e70:	0f 85 76 ff ff ff    	jne    c0013dec <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013e76:	83 e7 01             	and    edi,0x1
c0013e79:	75 46                	jne    c0013ec1 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013e7b:	c7 44 24 30 28 a3 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a328
c0013e83:	83 c4 1c             	add    esp,0x1c
c0013e86:	5b                   	pop    ebx
c0013e87:	5e                   	pop    esi
c0013e88:	5f                   	pop    edi
c0013e89:	5d                   	pop    ebp
c0013e8a:	e9 81 c6 ff ff       	jmp    c0010510 <KePanic(char const*)>
c0013e8f:	83 e7 01             	and    edi,0x1
c0013e92:	75 15                	jne    c0013ea9 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	68 65 a6 02 c0       	push   0xc002a665
c0013e9c:	e8 6f c6 ff ff       	call   c0010510 <KePanic(char const*)>
c0013ea1:	83 c4 10             	add    esp,0x10
c0013ea4:	e9 5e ff ff ff       	jmp    c0013e07 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013ea9:	83 ec 08             	sub    esp,0x8
c0013eac:	6a 00                	push   0x0
c0013eae:	56                   	push   esi
c0013eaf:	e8 96 fb ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013eb4:	83 c4 10             	add    esp,0x10
c0013eb7:	e9 4b ff ff ff       	jmp    c0013e07 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013ebc:	83 e7 01             	and    edi,0x1
c0013ebf:	75 16                	jne    c0013ed7 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013ec1:	83 ec 08             	sub    esp,0x8
c0013ec4:	6a 00                	push   0x0
c0013ec6:	56                   	push   esi
c0013ec7:	e8 7e fb ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ecc:	83 c4 10             	add    esp,0x10
c0013ecf:	83 c4 1c             	add    esp,0x1c
c0013ed2:	5b                   	pop    ebx
c0013ed3:	5e                   	pop    esi
c0013ed4:	5f                   	pop    edi
c0013ed5:	5d                   	pop    ebp
c0013ed6:	c3                   	ret    
c0013ed7:	c7 44 24 30 81 a6 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a681
c0013edf:	83 c4 1c             	add    esp,0x1c
c0013ee2:	5b                   	pop    ebx
c0013ee3:	5e                   	pop    esi
c0013ee4:	5f                   	pop    edi
c0013ee5:	5d                   	pop    ebp
c0013ee6:	e9 25 c6 ff ff       	jmp    c0010510 <KePanic(char const*)>
c0013eeb:	90                   	nop

c0013eec <VAS::freeAllocatedPages(unsigned long)>:
c0013eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ef4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013ef8:	74 09                	je     c0013f03 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013efa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013efe:	e9 ac fe ff ff       	jmp    c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c0013f03:	c7 44 24 04 4c a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a34c
c0013f0b:	e9 6c 30 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013f10 <VAS::virtualToPhysical(unsigned long)>:
c0013f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f14:	50                   	push   eax
c0013f15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f19:	52                   	push   edx
c0013f1a:	e8 71 fe ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0013f1f:	59                   	pop    ecx
c0013f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f22:	5a                   	pop    edx
c0013f23:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f28:	c3                   	ret    
c0013f29:	90                   	nop

c0013f2a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013f2a:	55                   	push   ebp
c0013f2b:	57                   	push   edi
c0013f2c:	56                   	push   esi
c0013f2d:	53                   	push   ebx
c0013f2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f32:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013f36:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013f3a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f3e:	85 db                	test   ebx,ebx
c0013f40:	7e 24                	jle    c0013f66 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013f42:	c1 e3 0c             	shl    ebx,0xc
c0013f45:	01 f3                	add    ebx,esi
c0013f47:	56                   	push   esi
c0013f48:	81 c6 00 10 00 00    	add    esi,0x1000
c0013f4e:	55                   	push   ebp
c0013f4f:	e8 3c fe ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0013f54:	5a                   	pop    edx
c0013f55:	59                   	pop    ecx
c0013f56:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f5c:	21 f9                	and    ecx,edi
c0013f5e:	09 d1                	or     ecx,edx
c0013f60:	39 f3                	cmp    ebx,esi
c0013f62:	89 08                	mov    DWORD PTR [eax],ecx
c0013f64:	75 e1                	jne    c0013f47 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013f66:	5b                   	pop    ebx
c0013f67:	5e                   	pop    esi
c0013f68:	5f                   	pop    edi
c0013f69:	5d                   	pop    ebp
c0013f6a:	c3                   	ret    
c0013f6b:	90                   	nop

c0013f6c <VAS::VAS()>:
c0013f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f7b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f86:	a3 90 32 03 c0       	mov    ds:0xc0033290,eax
c0013f8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f8f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f97:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f9e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013fa5:	ba 7d e0 02 c0       	mov    edx,0xc002e07d
c0013faa:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0013faf:	29 c2                	sub    edx,eax
c0013fb1:	89 d0                	mov    eax,edx
c0013fb3:	05 ff 0f 00 00       	add    eax,0xfff
c0013fb8:	c1 e8 0c             	shr    eax,0xc
c0013fbb:	89 c2                	mov    edx,eax
c0013fbd:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0013fc2:	6a 04                	push   0x4
c0013fc4:	6a ff                	push   0xffffffff
c0013fc6:	52                   	push   edx
c0013fc7:	50                   	push   eax
c0013fc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fcc:	e8 59 ff ff ff       	call   c0013f2a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013fd1:	83 c4 14             	add    esp,0x14
c0013fd4:	90                   	nop
c0013fd5:	c3                   	ret    

c0013fd6 <VAS::setToWriteCombining(unsigned long, int)>:
c0013fd6:	a1 24 34 03 c0       	mov    eax,ds:0xc0033424
c0013fdb:	50                   	push   eax
c0013fdc:	6a ff                	push   0xffffffff
c0013fde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013fe2:	52                   	push   edx
c0013fe3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013fe7:	51                   	push   ecx
c0013fe8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fec:	50                   	push   eax
c0013fed:	e8 38 ff ff ff       	call   c0013f2a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013ff2:	83 c4 14             	add    esp,0x14
c0013ff5:	c3                   	ret    

c0013ff6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013ff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ffa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013ffd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014001:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0014004:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0014009:	83 f8 01             	cmp    eax,0x1
c001400c:	19 c0                	sbb    eax,eax
c001400e:	83 ca 03             	or     edx,0x3
c0014011:	83 e0 fc             	and    eax,0xfffffffc
c0014014:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001401b:	0f 20 d8             	mov    eax,cr3
c001401e:	0f 22 d8             	mov    cr3,eax
c0014021:	c3                   	ret    

c0014022 <VAS::~VAS()>:
c0014022:	83 ec 2c             	sub    esp,0x2c
c0014025:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001402d:	fa                   	cli    
c001402e:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0014033:	83 c0 01             	add    eax,0x1
c0014036:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001403b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014040:	8b 00                	mov    eax,DWORD PTR [eax]
c0014042:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014045:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001404b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001404f:	6a 01                	push   0x1
c0014051:	50                   	push   eax
c0014052:	e8 9f ff ff ff       	call   c0013ff6 <VAS::mapOtherVASIn(bool, VAS*)>
c0014057:	83 c4 0c             	add    esp,0xc
c001405a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014062:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001406a:	0f 8f d8 00 00 00    	jg     c0014148 <VAS::~VAS()+0x126>
c0014070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014074:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014077:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001407b:	c1 e2 02             	shl    edx,0x2
c001407e:	01 d0                	add    eax,edx
c0014080:	8b 00                	mov    eax,DWORD PTR [eax]
c0014082:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408a:	83 e0 01             	and    eax,0x1
c001408d:	0f 84 ab 00 00 00    	je     c001413e <VAS::~VAS()+0x11c>
c0014093:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001409b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00140a3:	7f 74                	jg     c0014119 <VAS::~VAS()+0xf7>
c00140a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140a9:	c1 e0 0a             	shl    eax,0xa
c00140ac:	89 c2                	mov    edx,eax
c00140ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140b2:	01 d0                	add    eax,edx
c00140b4:	c1 e0 0c             	shl    eax,0xc
c00140b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00140c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00140c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00140c5:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00140cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00140cf:	6a 01                	push   0x1
c00140d1:	50                   	push   eax
c00140d2:	e8 8b fc ff ff       	call   c0013d62 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00140d7:	83 c4 0c             	add    esp,0xc
c00140da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00140e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ec:	25 01 04 00 00       	and    eax,0x401
c00140f1:	3d 01 04 00 00       	cmp    eax,0x401
c00140f6:	75 1a                	jne    c0014112 <VAS::~VAS()+0xf0>
c00140f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014101:	83 ec 0c             	sub    esp,0xc
c0014104:	50                   	push   eax
c0014105:	e8 91 c5 ff ff       	call   c001069b <Phys::freePage(unsigned long)>
c001410a:	83 c4 10             	add    esp,0x10
c001410d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014112:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0014117:	eb 82                	jmp    c001409b <VAS::~VAS()+0x79>
c0014119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411d:	25 00 04 00 00       	and    eax,0x400
c0014122:	74 1a                	je     c001413e <VAS::~VAS()+0x11c>
c0014124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014128:	25 00 f0 ff ff       	and    eax,0xfffff000
c001412d:	83 ec 0c             	sub    esp,0xc
c0014130:	50                   	push   eax
c0014131:	e8 65 c5 ff ff       	call   c001069b <Phys::freePage(unsigned long)>
c0014136:	83 c4 10             	add    esp,0x10
c0014139:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001413e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014143:	e9 1a ff ff ff       	jmp    c0014062 <VAS::~VAS()+0x40>
c0014148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001414c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001414f:	83 ec 0c             	sub    esp,0xc
c0014152:	50                   	push   eax
c0014153:	e8 57 fc ff ff       	call   c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c0014158:	83 c4 10             	add    esp,0x10
c001415b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001415f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014162:	83 ec 0c             	sub    esp,0xc
c0014165:	50                   	push   eax
c0014166:	e8 30 c5 ff ff       	call   c001069b <Phys::freePage(unsigned long)>
c001416b:	83 c4 10             	add    esp,0x10
c001416e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014173:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001417b:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0014180:	85 c0                	test   eax,eax
c0014182:	75 01                	jne    c0014185 <VAS::~VAS()+0x163>
c0014184:	fb                   	sti    
c0014185:	90                   	nop
c0014186:	83 c4 2c             	add    esp,0x2c
c0014189:	c3                   	ret    

c001418a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001418a:	55                   	push   ebp
c001418b:	57                   	push   edi
c001418c:	56                   	push   esi
c001418d:	53                   	push   ebx
c001418e:	83 ec 1c             	sub    esp,0x1c
c0014191:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014195:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0014199:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001419f:	77 08                	ja     c00141a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00141a1:	0f 20 d8             	mov    eax,cr3
c00141a4:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00141a7:	75 49                	jne    c00141f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c00141a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00141ad:	09 d8                	or     eax,ebx
c00141af:	a9 ff 0f 00 00       	test   eax,0xfff
c00141b4:	75 59                	jne    c001420f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c00141b6:	89 de                	mov    esi,ebx
c00141b8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00141bb:	c1 ee 16             	shr    esi,0x16
c00141be:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00141c5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00141c9:	74 56                	je     c0014221 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c00141cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00141cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00141d3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00141d9:	c1 eb 0a             	shr    ebx,0xa
c00141dc:	c1 e6 0c             	shl    esi,0xc
c00141df:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00141e5:	09 d0                	or     eax,edx
c00141e7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00141ea:	83 c4 1c             	add    esp,0x1c
c00141ed:	5b                   	pop    ebx
c00141ee:	5e                   	pop    esi
c00141ef:	5f                   	pop    edi
c00141f0:	5d                   	pop    ebp
c00141f1:	c3                   	ret    
c00141f2:	83 ec 0c             	sub    esp,0xc
c00141f5:	68 70 a3 02 c0       	push   0xc002a370
c00141fa:	e8 7d 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00141ff:	83 c4 10             	add    esp,0x10
c0014202:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014206:	09 d8                	or     eax,ebx
c0014208:	a9 ff 0f 00 00       	test   eax,0xfff
c001420d:	74 a7                	je     c00141b6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001420f:	83 ec 0c             	sub    esp,0xc
c0014212:	68 d8 a3 02 c0       	push   0xc002a3d8
c0014217:	e8 f4 c2 ff ff       	call   c0010510 <KePanic(char const*)>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	eb 95                	jmp    c00141b6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0014221:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014225:	e8 da c4 ff ff       	call   c0010704 <Phys::allocatePage()>
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	89 c5                	mov    ebp,eax
c001422f:	8b 0d 90 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033290
c0014235:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014239:	6a 01                	push   0x1
c001423b:	e8 67 f8 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0014240:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014247:	6a 01                	push   0x1
c0014249:	50                   	push   eax
c001424a:	55                   	push   ebp
c001424b:	81 cd 07 04 00 00    	or     ebp,0x407
c0014251:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014255:	51                   	push   ecx
c0014256:	e8 19 01 00 00       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001425b:	83 c4 1c             	add    esp,0x1c
c001425e:	68 00 10 00 00       	push   0x1000
c0014263:	6a 00                	push   0x0
c0014265:	50                   	push   eax
c0014266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001426a:	e8 81 c2 fe ff       	call   c00004f0 <memset>
c001426f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014273:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014276:	e8 34 fb ff ff       	call   c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c001427b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001427f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014282:	83 c4 10             	add    esp,0x10
c0014285:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0014288:	e9 3e ff ff ff       	jmp    c00141cb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001428d:	90                   	nop

c001428e <VAS::allocatePages(int, int)>:
c001428e:	55                   	push   ebp
c001428f:	57                   	push   edi
c0014290:	56                   	push   esi
c0014291:	53                   	push   ebx
c0014292:	83 ec 1c             	sub    esp,0x1c
c0014295:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014299:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001429d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00142a1:	75 71                	jne    c0014314 <VAS::allocatePages(int, int)+0x86>
c00142a3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142aa:	85 c0                	test   eax,eax
c00142ac:	74 4d                	je     c00142fb <VAS::allocatePages(int, int)+0x6d>
c00142ae:	89 dd                	mov    ebp,ebx
c00142b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142b4:	c1 e5 0c             	shl    ebp,0xc
c00142b7:	01 c5                	add    ebp,eax
c00142b9:	85 db                	test   ebx,ebx
c00142bb:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00142be:	7e 29                	jle    c00142e9 <VAS::allocatePages(int, int)+0x5b>
c00142c0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00142c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00142c8:	81 cf 00 04 00 00    	or     edi,0x400
c00142ce:	e8 31 c4 ff ff       	call   c0010704 <Phys::allocatePage()>
c00142d3:	57                   	push   edi
c00142d4:	53                   	push   ebx
c00142d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00142db:	50                   	push   eax
c00142dc:	56                   	push   esi
c00142dd:	e8 a8 fe ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c00142e2:	83 c4 10             	add    esp,0x10
c00142e5:	39 dd                	cmp    ebp,ebx
c00142e7:	75 e5                	jne    c00142ce <VAS::allocatePages(int, int)+0x40>
c00142e9:	0f 20 d8             	mov    eax,cr3
c00142ec:	0f 22 d8             	mov    cr3,eax
c00142ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142f3:	83 c4 1c             	add    esp,0x1c
c00142f6:	5b                   	pop    ebx
c00142f7:	5e                   	pop    esi
c00142f8:	5f                   	pop    edi
c00142f9:	5d                   	pop    ebp
c00142fa:	c3                   	ret    
c00142fb:	83 ec 0c             	sub    esp,0xc
c00142fe:	68 fc a3 02 c0       	push   0xc002a3fc
c0014303:	e8 08 c2 ff ff       	call   c0010510 <KePanic(char const*)>
c0014308:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001430b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	eb 9a                	jmp    c00142ae <VAS::allocatePages(int, int)+0x20>
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	53                   	push   ebx
c0014318:	e8 8a f7 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c001431d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014321:	83 c4 10             	add    esp,0x10
c0014324:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0014329:	77 37                	ja     c0014362 <VAS::allocatePages(int, int)+0xd4>
c001432b:	85 db                	test   ebx,ebx
c001432d:	7e ba                	jle    c00142e9 <VAS::allocatePages(int, int)+0x5b>
c001432f:	c1 e3 0c             	shl    ebx,0xc
c0014332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014336:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001433a:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001433d:	81 cf 00 04 00 00    	or     edi,0x400
c0014343:	89 c3                	mov    ebx,eax
c0014345:	e8 ba c3 ff ff       	call   c0010704 <Phys::allocatePage()>
c001434a:	57                   	push   edi
c001434b:	53                   	push   ebx
c001434c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014352:	50                   	push   eax
c0014353:	56                   	push   esi
c0014354:	e8 31 fe ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	39 dd                	cmp    ebp,ebx
c001435e:	75 e5                	jne    c0014345 <VAS::allocatePages(int, int)+0xb7>
c0014360:	eb 87                	jmp    c00142e9 <VAS::allocatePages(int, int)+0x5b>
c0014362:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014366:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c001436b:	09 c2                	or     edx,eax
c001436d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0014371:	eb b8                	jmp    c001432b <VAS::allocatePages(int, int)+0x9d>
c0014373:	90                   	nop

c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0014374:	55                   	push   ebp
c0014375:	57                   	push   edi
c0014376:	56                   	push   esi
c0014377:	53                   	push   ebx
c0014378:	83 ec 0c             	sub    esp,0xc
c001437b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001437f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014383:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014387:	85 db                	test   ebx,ebx
c0014389:	7e 2f                	jle    c00143ba <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c001438b:	c1 e3 0c             	shl    ebx,0xc
c001438e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014392:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0014396:	01 d3                	add    ebx,edx
c0014398:	55                   	push   ebp
c0014399:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001439d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143a1:	29 c2                	sub    edx,eax
c00143a3:	01 f2                	add    edx,esi
c00143a5:	52                   	push   edx
c00143a6:	56                   	push   esi
c00143a7:	81 c6 00 10 00 00    	add    esi,0x1000
c00143ad:	57                   	push   edi
c00143ae:	e8 d7 fd ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c00143b3:	83 c4 10             	add    esp,0x10
c00143b6:	39 de                	cmp    esi,ebx
c00143b8:	75 de                	jne    c0014398 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c00143ba:	0f 20 d8             	mov    eax,cr3
c00143bd:	0f 22 d8             	mov    cr3,eax
c00143c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143c4:	83 c4 0c             	add    esp,0xc
c00143c7:	5b                   	pop    ebx
c00143c8:	5e                   	pop    esi
c00143c9:	5f                   	pop    edi
c00143ca:	5d                   	pop    ebp
c00143cb:	c3                   	ret    

c00143cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00143cc:	55                   	push   ebp
c00143cd:	57                   	push   edi
c00143ce:	56                   	push   esi
c00143cf:	53                   	push   ebx
c00143d0:	83 ec 1c             	sub    esp,0x1c
c00143d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00143d7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00143db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00143df:	09 f8                	or     eax,edi
c00143e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00143e5:	a9 ff 0f 00 00       	test   eax,0xfff
c00143ea:	75 4f                	jne    c001443b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00143ec:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00143f0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00143f3:	c1 eb 16             	shr    ebx,0x16
c00143f6:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00143fd:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0014401:	74 52                	je     c0014455 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0014403:	0f b6 f2             	movzx  esi,dl
c0014406:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001440a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001440e:	c1 e8 0a             	shr    eax,0xa
c0014411:	83 fe 01             	cmp    esi,0x1
c0014414:	19 d2                	sbb    edx,edx
c0014416:	c1 e3 0c             	shl    ebx,0xc
c0014419:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001441f:	25 fc 0f 00 00       	and    eax,0xffc
c0014424:	01 d8                	add    eax,ebx
c0014426:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001442a:	09 d9                	or     ecx,ebx
c001442c:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0014433:	83 c4 1c             	add    esp,0x1c
c0014436:	5b                   	pop    ebx
c0014437:	5e                   	pop    esi
c0014438:	5f                   	pop    edi
c0014439:	5d                   	pop    ebp
c001443a:	c3                   	ret    
c001443b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001443f:	83 ec 0c             	sub    esp,0xc
c0014442:	68 28 a4 02 c0       	push   0xc002a428
c0014447:	e8 c4 c0 ff ff       	call   c0010510 <KePanic(char const*)>
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014453:	eb 97                	jmp    c00143ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0014455:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014459:	e8 a6 c2 ff ff       	call   c0010704 <Phys::allocatePage()>
c001445e:	83 ec 0c             	sub    esp,0xc
c0014461:	89 c5                	mov    ebp,eax
c0014463:	8b 0d 90 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033290
c0014469:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001446d:	6a 01                	push   0x1
c001446f:	e8 33 f6 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0014474:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001447b:	6a 01                	push   0x1
c001447d:	50                   	push   eax
c001447e:	55                   	push   ebp
c001447f:	81 cd 07 04 00 00    	or     ebp,0x407
c0014485:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014489:	51                   	push   ecx
c001448a:	e8 e5 fe ff ff       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001448f:	83 c4 1c             	add    esp,0x1c
c0014492:	68 00 10 00 00       	push   0x1000
c0014497:	6a 00                	push   0x0
c0014499:	50                   	push   eax
c001449a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001449e:	e8 4d c0 fe ff       	call   c00004f0 <memset>
c00144a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00144a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00144aa:	e8 00 f9 ff ff       	call   c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c00144af:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00144b2:	83 c4 10             	add    esp,0x10
c00144b5:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c00144b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144bc:	e9 42 ff ff ff       	jmp    c0014403 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c00144c1:	90                   	nop

c00144c2 <VAS::VAS(bool)>:
c00144c2:	53                   	push   ebx
c00144c3:	83 ec 28             	sub    esp,0x28
c00144c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00144ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00144e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00144ec:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00144ef:	e8 10 c2 ff ff       	call   c0010704 <Phys::allocatePage()>
c00144f4:	89 c2                	mov    edx,eax
c00144f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00144fd:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c0014503:	83 ec 0c             	sub    esp,0xc
c0014506:	6a 01                	push   0x1
c0014508:	e8 9a f5 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c001450d:	83 c4 10             	add    esp,0x10
c0014510:	89 c2                	mov    edx,eax
c0014512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014516:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014519:	83 ec 0c             	sub    esp,0xc
c001451c:	6a 03                	push   0x3
c001451e:	6a 01                	push   0x1
c0014520:	52                   	push   edx
c0014521:	50                   	push   eax
c0014522:	53                   	push   ebx
c0014523:	e8 4c fe ff ff       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014528:	83 c4 20             	add    esp,0x20
c001452b:	89 c2                	mov    edx,eax
c001452d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014531:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0014534:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001453c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0014544:	7f 1d                	jg     c0014563 <VAS::VAS(bool)+0xa1>
c0014546:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001454a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001454d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014551:	c1 e2 02             	shl    edx,0x2
c0014554:	01 d0                	add    eax,edx
c0014556:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001455c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014561:	eb d9                	jmp    c001453c <VAS::VAS(bool)+0x7a>
c0014563:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001456b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0014573:	7f 59                	jg     c00145ce <VAS::VAS(bool)+0x10c>
c0014575:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014579:	2d 00 02 00 00       	sub    eax,0x200
c001457e:	c1 e0 0c             	shl    eax,0xc
c0014581:	89 c2                	mov    edx,eax
c0014583:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c0014588:	89 d1                	mov    ecx,edx
c001458a:	09 c1                	or     ecx,eax
c001458c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014590:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014593:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014597:	c1 e2 02             	shl    edx,0x2
c001459a:	01 d0                	add    eax,edx
c001459c:	83 c9 05             	or     ecx,0x5
c001459f:	89 ca                	mov    edx,ecx
c00145a1:	89 10                	mov    DWORD PTR [eax],edx
c00145a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145a7:	2d 40 03 00 00       	sub    eax,0x340
c00145ac:	83 f8 7f             	cmp    eax,0x7f
c00145af:	77 16                	ja     c00145c7 <VAS::VAS(bool)+0x105>
c00145b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00145b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00145bc:	c1 e2 02             	shl    edx,0x2
c00145bf:	01 d0                	add    eax,edx
c00145c1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00145c7:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00145cc:	eb 9d                	jmp    c001456b <VAS::VAS(bool)+0xa9>
c00145ce:	8b 15 28 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033428
c00145d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00145db:	05 20 0c 00 00       	add    eax,0xc20
c00145e0:	81 ca 03 40 00 00    	or     edx,0x4003
c00145e6:	89 10                	mov    DWORD PTR [eax],edx
c00145e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145ec:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00145ef:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c00145f4:	09 c2                	or     edx,eax
c00145f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00145fd:	05 fc 0f 00 00       	add    eax,0xffc
c0014602:	83 ca 03             	or     edx,0x3
c0014605:	89 10                	mov    DWORD PTR [eax],edx
c0014607:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001460c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014612:	83 ec 0c             	sub    esp,0xc
c0014615:	50                   	push   eax
c0014616:	e8 e3 5e ff ff       	call   c000a4fe <Device::getName()>
c001461b:	83 c4 10             	add    esp,0x10
c001461e:	83 ec 08             	sub    esp,0x8
c0014621:	68 9b a6 02 c0       	push   0xc002a69b
c0014626:	50                   	push   eax
c0014627:	e8 24 c1 fe ff       	call   c0000750 <strcmp>
c001462c:	83 c4 10             	add    esp,0x10
c001462f:	85 c0                	test   eax,eax
c0014631:	0f 94 c0             	sete   al
c0014634:	0f b6 c0             	movzx  eax,al
c0014637:	85 c0                	test   eax,eax
c0014639:	74 68                	je     c00146a3 <VAS::VAS(bool)+0x1e1>
c001463b:	fa                   	cli    
c001463c:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0014641:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014647:	05 68 09 00 00       	add    eax,0x968
c001464c:	83 ec 0c             	sub    esp,0xc
c001464f:	50                   	push   eax
c0014650:	e8 59 ad ff ff       	call   c000f3ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014655:	83 c4 10             	add    esp,0x10
c0014658:	25 00 f0 ff ff       	and    eax,0xfffff000
c001465d:	89 c3                	mov    ebx,eax
c001465f:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0014664:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001466a:	05 68 09 00 00       	add    eax,0x968
c001466f:	83 ec 0c             	sub    esp,0xc
c0014672:	50                   	push   eax
c0014673:	e8 36 ad ff ff       	call   c000f3ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014678:	83 c4 10             	add    esp,0x10
c001467b:	83 ec 08             	sub    esp,0x8
c001467e:	50                   	push   eax
c001467f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014683:	e8 08 f7 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0014688:	83 c4 10             	add    esp,0x10
c001468b:	8b 00                	mov    eax,DWORD PTR [eax]
c001468d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014692:	6a 11                	push   0x11
c0014694:	53                   	push   ebx
c0014695:	50                   	push   eax
c0014696:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001469a:	e8 eb fa ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c001469f:	83 c4 10             	add    esp,0x10
c00146a2:	fb                   	sti    
c00146a3:	90                   	nop
c00146a4:	83 c4 28             	add    esp,0x28
c00146a7:	5b                   	pop    ebx
c00146a8:	c3                   	ret    
c00146a9:	90                   	nop

c00146aa <VAS::evict(unsigned long)>:
c00146aa:	55                   	push   ebp
c00146ab:	57                   	push   edi
c00146ac:	56                   	push   esi
c00146ad:	53                   	push   ebx
c00146ae:	83 ec 24             	sub    esp,0x24
c00146b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00146b5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00146b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146bd:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00146c2:	50                   	push   eax
c00146c3:	68 a9 a6 02 c0       	push   0xc002a6a9
c00146c8:	e8 af 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00146cd:	e8 33 f5 ff ff       	call   c0013c05 <Virt::allocateSwapfilePage()>
c00146d2:	83 c4 10             	add    esp,0x10
c00146d5:	89 c7                	mov    edi,eax
c00146d7:	a1 ec d5 02 c0       	mov    eax,ds:0xc002d5ec
c00146dc:	85 c0                	test   eax,eax
c00146de:	7e 40                	jle    c0014720 <VAS::evict(unsigned long)+0x76>
c00146e0:	89 ee                	mov    esi,ebp
c00146e2:	31 db                	xor    ebx,ebx
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	57                   	push   edi
c00146e8:	e8 02 f5 ff ff       	call   c0013bef <Virt::swapIDToSector(unsigned long)>
c00146ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00146f0:	01 d8                	add    eax,ebx
c00146f2:	6a 01                	push   0x1
c00146f4:	31 d2                	xor    edx,edx
c00146f6:	83 c3 01             	add    ebx,0x1
c00146f9:	52                   	push   edx
c00146fa:	81 c6 00 02 00 00    	add    esi,0x200
c0014700:	50                   	push   eax
c0014701:	0f be 05 f8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5f8
c0014708:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001470f:	50                   	push   eax
c0014710:	e8 15 6c ff ff       	call   c000b32a <LogicalDisk::write(unsigned long long, int, void*)>
c0014715:	83 c4 20             	add    esp,0x20
c0014718:	39 1d ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,ebx
c001471e:	7f c4                	jg     c00146e4 <VAS::evict(unsigned long)+0x3a>
c0014720:	83 ec 08             	sub    esp,0x8
c0014723:	c1 e7 0c             	shl    edi,0xc
c0014726:	55                   	push   ebp
c0014727:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001472b:	50                   	push   eax
c001472c:	e8 5f f6 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0014731:	8b 10                	mov    edx,DWORD PTR [eax]
c0014733:	89 d3                	mov    ebx,edx
c0014735:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001473b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014741:	09 d7                	or     edi,edx
c0014743:	89 38                	mov    DWORD PTR [eax],edi
c0014745:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014748:	8b 15 88 32 03 c0    	mov    edx,DWORD PTR ds:0xc0033288
c001474e:	83 c2 01             	add    edx,0x1
c0014751:	89 15 88 32 03 c0    	mov    DWORD PTR ds:0xc0033288,edx
c0014757:	e8 3f bf ff ff       	call   c001069b <Phys::freePage(unsigned long)>
c001475c:	0f 20 d8             	mov    eax,cr3
c001475f:	0f 22 d8             	mov    cr3,eax
c0014762:	8b 0d 88 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033288
c0014768:	51                   	push   ecx
c0014769:	55                   	push   ebp
c001476a:	53                   	push   ebx
c001476b:	68 4c a4 02 c0       	push   0xc002a44c
c0014770:	e8 07 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014775:	83 c4 18             	add    esp,0x18
c0014778:	a1 84 32 03 c0       	mov    eax,ds:0xc0033284
c001477d:	50                   	push   eax
c001477e:	8d 50 01             	lea    edx,[eax+0x1]
c0014781:	68 be a6 02 c0       	push   0xc002a6be
c0014786:	89 15 84 32 03 c0    	mov    DWORD PTR ds:0xc0033284,edx
c001478c:	e8 eb 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014791:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0014796:	c7 44 24 40 d0 a6 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a6d0
c001479e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00147a2:	83 c4 2c             	add    esp,0x2c
c00147a5:	5b                   	pop    ebx
c00147a6:	5e                   	pop    esi
c00147a7:	5f                   	pop    edi
c00147a8:	5d                   	pop    ebp
c00147a9:	e9 ce 27 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c00147ae <VAS::canLockPage(unsigned long)>:
c00147ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147b2:	50                   	push   eax
c00147b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147b7:	52                   	push   edx
c00147b8:	e8 d3 f5 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c00147bd:	59                   	pop    ecx
c00147be:	8b 00                	mov    eax,DWORD PTR [eax]
c00147c0:	5a                   	pop    edx
c00147c1:	c1 e8 0b             	shr    eax,0xb
c00147c4:	83 e0 01             	and    eax,0x1
c00147c7:	c3                   	ret    

c00147c8 <VAS::unlockPage(unsigned long)>:
c00147c8:	83 ec 0c             	sub    esp,0xc
c00147cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147cf:	50                   	push   eax
c00147d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147d4:	52                   	push   edx
c00147d5:	e8 b6 f5 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c00147da:	59                   	pop    ecx
c00147db:	5a                   	pop    edx
c00147dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00147de:	f6 c6 08             	test   dh,0x8
c00147e1:	75 09                	jne    c00147ec <VAS::unlockPage(unsigned long)+0x24>
c00147e3:	80 ce 08             	or     dh,0x8
c00147e6:	89 10                	mov    DWORD PTR [eax],edx
c00147e8:	83 c4 0c             	add    esp,0xc
c00147eb:	c3                   	ret    
c00147ec:	c7 44 24 10 80 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a480
c00147f4:	83 c4 0c             	add    esp,0xc
c00147f7:	e9 14 bd ff ff       	jmp    c0010510 <KePanic(char const*)>

c00147fc <VAS::canLockPages(unsigned long, int)>:
c00147fc:	55                   	push   ebp
c00147fd:	57                   	push   edi
c00147fe:	56                   	push   esi
c00147ff:	53                   	push   ebx
c0014800:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014804:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014808:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001480c:	85 ff                	test   edi,edi
c001480e:	7e 23                	jle    c0014833 <VAS::canLockPages(unsigned long, int)+0x37>
c0014810:	31 f6                	xor    esi,esi
c0014812:	eb 0d                	jmp    c0014821 <VAS::canLockPages(unsigned long, int)+0x25>
c0014814:	81 c3 00 10 00 00    	add    ebx,0x1000
c001481a:	83 c6 01             	add    esi,0x1
c001481d:	39 f7                	cmp    edi,esi
c001481f:	74 0d                	je     c001482e <VAS::canLockPages(unsigned long, int)+0x32>
c0014821:	53                   	push   ebx
c0014822:	55                   	push   ebp
c0014823:	e8 86 ff ff ff       	call   c00147ae <VAS::canLockPage(unsigned long)>
c0014828:	5a                   	pop    edx
c0014829:	84 c0                	test   al,al
c001482b:	59                   	pop    ecx
c001482c:	75 e6                	jne    c0014814 <VAS::canLockPages(unsigned long, int)+0x18>
c001482e:	5b                   	pop    ebx
c001482f:	5e                   	pop    esi
c0014830:	5f                   	pop    edi
c0014831:	5d                   	pop    ebp
c0014832:	c3                   	ret    
c0014833:	b0 01                	mov    al,0x1
c0014835:	eb f7                	jmp    c001482e <VAS::canLockPages(unsigned long, int)+0x32>
c0014837:	90                   	nop

c0014838 <VAS::unlockPages(unsigned long, int)>:
c0014838:	55                   	push   ebp
c0014839:	57                   	push   edi
c001483a:	56                   	push   esi
c001483b:	53                   	push   ebx
c001483c:	83 ec 0c             	sub    esp,0xc
c001483f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014843:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014847:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001484b:	85 ff                	test   edi,edi
c001484d:	7e 1c                	jle    c001486b <VAS::unlockPages(unsigned long, int)+0x33>
c001484f:	31 f6                	xor    esi,esi
c0014851:	83 ec 08             	sub    esp,0x8
c0014854:	83 c6 01             	add    esi,0x1
c0014857:	53                   	push   ebx
c0014858:	81 c3 00 10 00 00    	add    ebx,0x1000
c001485e:	55                   	push   ebp
c001485f:	e8 64 ff ff ff       	call   c00147c8 <VAS::unlockPage(unsigned long)>
c0014864:	83 c4 10             	add    esp,0x10
c0014867:	39 f7                	cmp    edi,esi
c0014869:	75 e6                	jne    c0014851 <VAS::unlockPages(unsigned long, int)+0x19>
c001486b:	83 c4 0c             	add    esp,0xc
c001486e:	5b                   	pop    ebx
c001486f:	5e                   	pop    esi
c0014870:	5f                   	pop    edi
c0014871:	5d                   	pop    ebp
c0014872:	c3                   	ret    
c0014873:	90                   	nop

c0014874 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014874:	55                   	push   ebp
c0014875:	57                   	push   edi
c0014876:	56                   	push   esi
c0014877:	53                   	push   ebx
c0014878:	81 ec 0c 10 00 00    	sub    esp,0x100c
c001487e:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014885:	89 c5                	mov    ebp,eax
c0014887:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c001488d:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014892:	77 11                	ja     c00148a5 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014894:	85 ed                	test   ebp,ebp
c0014896:	75 1d                	jne    c00148b5 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014898:	31 c0                	xor    eax,eax
c001489a:	81 c4 0c 10 00 00    	add    esp,0x100c
c00148a0:	5b                   	pop    ebx
c00148a1:	5e                   	pop    esi
c00148a2:	5f                   	pop    edi
c00148a3:	5d                   	pop    ebp
c00148a4:	c3                   	ret    
c00148a5:	83 ec 0c             	sub    esp,0xc
c00148a8:	68 e5 a6 02 c0       	push   0xc002a6e5
c00148ad:	e8 5e bc ff ff       	call   c0010510 <KePanic(char const*)>
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	83 ec 08             	sub    esp,0x8
c00148b8:	55                   	push   ebp
c00148b9:	8b 9c 24 2c 10 00 00 	mov    ebx,DWORD PTR [esp+0x102c]
c00148c0:	53                   	push   ebx
c00148c1:	e8 ca f4 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c00148c6:	83 c4 10             	add    esp,0x10
c00148c9:	89 c3                	mov    ebx,eax
c00148cb:	85 c0                	test   eax,eax
c00148cd:	74 c9                	je     c0014898 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c00148cf:	8b 38                	mov    edi,DWORD PTR [eax]
c00148d1:	f7 c7 00 02 00 00    	test   edi,0x200
c00148d7:	0f 85 b3 00 00 00    	jne    c0014990 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00148dd:	89 f8                	mov    eax,edi
c00148df:	25 01 04 00 00       	and    eax,0x401
c00148e4:	3d 00 04 00 00       	cmp    eax,0x400
c00148e9:	75 ad                	jne    c0014898 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c00148eb:	e8 14 be ff ff       	call   c0010704 <Phys::allocatePage()>
c00148f0:	c1 ef 0c             	shr    edi,0xc
c00148f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00148f5:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00148fb:	09 c2                	or     edx,eax
c00148fd:	81 ca 01 08 00 00    	or     edx,0x801
c0014903:	89 13                	mov    DWORD PTR [ebx],edx
c0014905:	8b 15 ec d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5ec
c001490b:	85 d2                	test   edx,edx
c001490d:	7e 4d                	jle    c001495c <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c001490f:	89 ee                	mov    esi,ebp
c0014911:	31 db                	xor    ebx,ebx
c0014913:	83 ec 08             	sub    esp,0x8
c0014916:	56                   	push   esi
c0014917:	68 0c a7 02 c0       	push   0xc002a70c
c001491c:	e8 5b 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014921:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014924:	e8 c6 f2 ff ff       	call   c0013bef <Virt::swapIDToSector(unsigned long)>
c0014929:	89 34 24             	mov    DWORD PTR [esp],esi
c001492c:	01 d8                	add    eax,ebx
c001492e:	6a 01                	push   0x1
c0014930:	31 d2                	xor    edx,edx
c0014932:	83 c3 01             	add    ebx,0x1
c0014935:	52                   	push   edx
c0014936:	81 c6 00 02 00 00    	add    esi,0x200
c001493c:	50                   	push   eax
c001493d:	0f be 05 f8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5f8
c0014944:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001494b:	50                   	push   eax
c001494c:	e8 6d 69 ff ff       	call   c000b2be <LogicalDisk::read(unsigned long long, int, void*)>
c0014951:	83 c4 20             	add    esp,0x20
c0014954:	39 1d ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,ebx
c001495a:	7f b7                	jg     c0014913 <VAS::tryLoadBackOffDisk(unsigned long)+0x9f>
c001495c:	83 ec 04             	sub    esp,0x4
c001495f:	a1 88 32 03 c0       	mov    eax,ds:0xc0033288
c0014964:	83 e8 01             	sub    eax,0x1
c0014967:	50                   	push   eax
c0014968:	a3 88 32 03 c0       	mov    ds:0xc0033288,eax
c001496d:	55                   	push   ebp
c001496e:	68 f7 a6 02 c0       	push   0xc002a6f7
c0014973:	e8 04 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014978:	89 3c 24             	mov    DWORD PTR [esp],edi
c001497b:	e8 4c f2 ff ff       	call   c0013bcc <Virt::freeSwapfilePage(unsigned long)>
c0014980:	0f 20 d8             	mov    eax,cr3
c0014983:	0f 22 d8             	mov    cr3,eax
c0014986:	b0 01                	mov    al,0x1
c0014988:	83 c4 10             	add    esp,0x10
c001498b:	e9 0a ff ff ff       	jmp    c001489a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014990:	83 ec 0c             	sub    esp,0xc
c0014993:	68 b0 a4 02 c0       	push   0xc002a4b0
c0014998:	e8 df 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001499d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001499f:	e8 60 bd ff ff       	call   c0010704 <Phys::allocatePage()>
c00149a4:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00149aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149ac:	83 c9 01             	or     ecx,0x1
c00149af:	89 0b                	mov    DWORD PTR [ebx],ecx
c00149b1:	0f 20 da             	mov    edx,cr3
c00149b4:	0f 22 da             	mov    cr3,edx
c00149b7:	ba 00 10 00 00       	mov    edx,0x1000
c00149bc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00149c0:	89 d1                	mov    ecx,edx
c00149c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149c4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149c6:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00149cc:	09 c8                	or     eax,ecx
c00149ce:	83 c8 02             	or     eax,0x2
c00149d1:	89 03                	mov    DWORD PTR [ebx],eax
c00149d3:	0f 20 d8             	mov    eax,cr3
c00149d6:	0f 22 d8             	mov    cr3,eax
c00149d9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00149dd:	89 ef                	mov    edi,ebp
c00149df:	89 d1                	mov    ecx,edx
c00149e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149e3:	b0 01                	mov    al,0x1
c00149e5:	83 c4 10             	add    esp,0x10
c00149e8:	e9 ad fe ff ff       	jmp    c001489a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c00149ed:	90                   	nop

c00149ee <VAS::lockPage(unsigned long)>:
c00149ee:	56                   	push   esi
c00149ef:	53                   	push   ebx
c00149f0:	83 ec 04             	sub    esp,0x4
c00149f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149fb:	50                   	push   eax
c00149fc:	56                   	push   esi
c00149fd:	e8 8e f3 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0014a02:	5a                   	pop    edx
c0014a03:	89 c3                	mov    ebx,eax
c0014a05:	59                   	pop    ecx
c0014a06:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a08:	a8 01                	test   al,0x1
c0014a0a:	74 10                	je     c0014a1c <VAS::lockPage(unsigned long)+0x2e>
c0014a0c:	f6 c4 08             	test   ah,0x8
c0014a0f:	74 28                	je     c0014a39 <VAS::lockPage(unsigned long)+0x4b>
c0014a11:	80 e4 f7             	and    ah,0xf7
c0014a14:	89 03                	mov    DWORD PTR [ebx],eax
c0014a16:	83 c4 04             	add    esp,0x4
c0014a19:	5b                   	pop    ebx
c0014a1a:	5e                   	pop    esi
c0014a1b:	c3                   	ret    
c0014a1c:	83 ec 08             	sub    esp,0x8
c0014a1f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a24:	50                   	push   eax
c0014a25:	56                   	push   esi
c0014a26:	e8 49 fe ff ff       	call   c0014874 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014a2b:	83 c4 10             	add    esp,0x10
c0014a2e:	84 c0                	test   al,al
c0014a30:	74 19                	je     c0014a4b <VAS::lockPage(unsigned long)+0x5d>
c0014a32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a34:	f6 c4 08             	test   ah,0x8
c0014a37:	75 d8                	jne    c0014a11 <VAS::lockPage(unsigned long)+0x23>
c0014a39:	c7 44 24 10 80 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a480
c0014a41:	83 c4 04             	add    esp,0x4
c0014a44:	5b                   	pop    ebx
c0014a45:	5e                   	pop    esi
c0014a46:	e9 c5 ba ff ff       	jmp    c0010510 <KePanic(char const*)>
c0014a4b:	83 ec 0c             	sub    esp,0xc
c0014a4e:	68 d0 a4 02 c0       	push   0xc002a4d0
c0014a53:	e8 b8 ba ff ff       	call   c0010510 <KePanic(char const*)>
c0014a58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a5a:	83 c4 10             	add    esp,0x10
c0014a5d:	eb ad                	jmp    c0014a0c <VAS::lockPage(unsigned long)+0x1e>
c0014a5f:	90                   	nop

c0014a60 <VAS::lockPages(unsigned long, int)>:
c0014a60:	55                   	push   ebp
c0014a61:	57                   	push   edi
c0014a62:	56                   	push   esi
c0014a63:	53                   	push   ebx
c0014a64:	83 ec 0c             	sub    esp,0xc
c0014a67:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014a6b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014a6f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014a73:	85 ff                	test   edi,edi
c0014a75:	7e 1c                	jle    c0014a93 <VAS::lockPages(unsigned long, int)+0x33>
c0014a77:	31 f6                	xor    esi,esi
c0014a79:	83 ec 08             	sub    esp,0x8
c0014a7c:	83 c6 01             	add    esi,0x1
c0014a7f:	53                   	push   ebx
c0014a80:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014a86:	55                   	push   ebp
c0014a87:	e8 62 ff ff ff       	call   c00149ee <VAS::lockPage(unsigned long)>
c0014a8c:	83 c4 10             	add    esp,0x10
c0014a8f:	39 f7                	cmp    edi,esi
c0014a91:	75 e6                	jne    c0014a79 <VAS::lockPages(unsigned long, int)+0x19>
c0014a93:	83 c4 0c             	add    esp,0xc
c0014a96:	5b                   	pop    ebx
c0014a97:	5e                   	pop    esi
c0014a98:	5f                   	pop    edi
c0014a99:	5d                   	pop    ebp
c0014a9a:	c3                   	ret    
c0014a9b:	90                   	nop

c0014a9c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014a9c:	55                   	push   ebp
c0014a9d:	57                   	push   edi
c0014a9e:	56                   	push   esi
c0014a9f:	53                   	push   ebx
c0014aa0:	83 ec 28             	sub    esp,0x28
c0014aa3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014aa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014aab:	50                   	push   eax
c0014aac:	e8 f6 ef ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0014ab1:	83 c4 0c             	add    esp,0xc
c0014ab4:	89 c5                	mov    ebp,eax
c0014ab6:	6a 07                	push   0x7
c0014ab8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014abc:	52                   	push   edx
c0014abd:	56                   	push   esi
c0014abe:	e8 cb f7 ff ff       	call   c001428e <VAS::allocatePages(int, int)>
c0014ac3:	83 c4 10             	add    esp,0x10
c0014ac6:	89 c7                	mov    edi,eax
c0014ac8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014acc:	85 c9                	test   ecx,ecx
c0014ace:	74 2f                	je     c0014aff <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014ad0:	31 db                	xor    ebx,ebx
c0014ad2:	e8 2d bc ff ff       	call   c0010704 <Phys::allocatePage()>
c0014ad7:	83 c3 01             	add    ebx,0x1
c0014ada:	6a 03                	push   0x3
c0014adc:	55                   	push   ebp
c0014add:	50                   	push   eax
c0014ade:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ae2:	56                   	push   esi
c0014ae3:	e8 a2 f6 ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014ae8:	6a 07                	push   0x7
c0014aea:	57                   	push   edi
c0014aeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014aef:	50                   	push   eax
c0014af0:	56                   	push   esi
c0014af1:	e8 94 f6 ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014af6:	83 c4 20             	add    esp,0x20
c0014af9:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014afd:	75 d3                	jne    c0014ad2 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014aff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014b03:	89 28                	mov    DWORD PTR [eax],ebp
c0014b05:	83 c4 1c             	add    esp,0x1c
c0014b08:	89 f8                	mov    eax,edi
c0014b0a:	5b                   	pop    ebx
c0014b0b:	5e                   	pop    esi
c0014b0c:	5f                   	pop    edi
c0014b0d:	5d                   	pop    ebp
c0014b0e:	c3                   	ret    
c0014b0f:	90                   	nop

c0014b10 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014b10:	53                   	push   ebx
c0014b11:	83 ec 14             	sub    esp,0x14
c0014b14:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014b18:	68 00 a5 02 c0       	push   0xc002a500
c0014b1d:	e8 5a 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014b22:	c7 04 24 60 a5 02 c0 	mov    DWORD PTR [esp],0xc002a560
c0014b29:	e8 4e 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014b2e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014b32:	83 c4 18             	add    esp,0x18
c0014b35:	5b                   	pop    ebx
c0014b36:	e9 74 f2 ff ff       	jmp    c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c0014b3b:	90                   	nop

c0014b3c <VAS::scanForEviction()>:
c0014b3c:	57                   	push   edi
c0014b3d:	56                   	push   esi
c0014b3e:	31 f6                	xor    esi,esi
c0014b40:	53                   	push   ebx
c0014b41:	83 ec 18             	sub    esp,0x18
c0014b44:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014b48:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0014b4d:	50                   	push   eax
c0014b4e:	68 dc a5 02 c0       	push   0xc002a5dc
c0014b53:	e8 24 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014b58:	c7 04 24 25 a7 02 c0 	mov    DWORD PTR [esp],0xc002a725
c0014b5f:	e8 18 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014b64:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014b67:	83 c4 10             	add    esp,0x10
c0014b6a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014b70:	75 0e                	jne    c0014b80 <VAS::scanForEviction()+0x44>
c0014b72:	89 da                	mov    edx,ebx
c0014b74:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014b77:	c1 ea 16             	shr    edx,0x16
c0014b7a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014b7e:	74 5b                	je     c0014bdb <VAS::scanForEviction()+0x9f>
c0014b80:	83 ec 08             	sub    esp,0x8
c0014b83:	53                   	push   ebx
c0014b84:	57                   	push   edi
c0014b85:	e8 06 f2 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b8f:	89 d1                	mov    ecx,edx
c0014b91:	c1 e9 0c             	shr    ecx,0xc
c0014b94:	74 10                	je     c0014ba6 <VAS::scanForEviction()+0x6a>
c0014b96:	89 d1                	mov    ecx,edx
c0014b98:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0014b9e:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0014ba4:	74 40                	je     c0014be6 <VAS::scanForEviction()+0xaa>
c0014ba6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014bac:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014bb2:	76 2d                	jbe    c0014be1 <VAS::scanForEviction()+0xa5>
c0014bb4:	83 c6 01             	add    esi,0x1
c0014bb7:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014bbe:	83 fe 03             	cmp    esi,0x3
c0014bc1:	74 37                	je     c0014bfa <VAS::scanForEviction()+0xbe>
c0014bc3:	31 db                	xor    ebx,ebx
c0014bc5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014bcb:	75 b3                	jne    c0014b80 <VAS::scanForEviction()+0x44>
c0014bcd:	89 da                	mov    edx,ebx
c0014bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014bd2:	c1 ea 16             	shr    edx,0x16
c0014bd5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014bd9:	75 a5                	jne    c0014b80 <VAS::scanForEviction()+0x44>
c0014bdb:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014be1:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014be4:	eb 84                	jmp    c0014b6a <VAS::scanForEviction()+0x2e>
c0014be6:	f6 c2 01             	test   dl,0x1
c0014be9:	74 bb                	je     c0014ba6 <VAS::scanForEviction()+0x6a>
c0014beb:	f6 c2 20             	test   dl,0x20
c0014bee:	74 13                	je     c0014c03 <VAS::scanForEviction()+0xc7>
c0014bf0:	83 e2 df             	and    edx,0xffffffdf
c0014bf3:	89 10                	mov    DWORD PTR [eax],edx
c0014bf5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014bf8:	eb ac                	jmp    c0014ba6 <VAS::scanForEviction()+0x6a>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	31 c0                	xor    eax,eax
c0014bff:	5b                   	pop    ebx
c0014c00:	5e                   	pop    esi
c0014c01:	5f                   	pop    edi
c0014c02:	c3                   	ret    
c0014c03:	83 ec 08             	sub    esp,0x8
c0014c06:	89 d0                	mov    eax,edx
c0014c08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c11:	53                   	push   ebx
c0014c12:	68 41 a7 02 c0       	push   0xc002a741
c0014c17:	e8 60 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c1c:	58                   	pop    eax
c0014c1d:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014c20:	5a                   	pop    edx
c0014c21:	51                   	push   ecx
c0014c22:	57                   	push   edi
c0014c23:	e8 82 fa ff ff       	call   c00146aa <VAS::evict(unsigned long)>
c0014c28:	5b                   	pop    ebx
c0014c29:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014c2c:	5e                   	pop    esi
c0014c2d:	50                   	push   eax
c0014c2e:	68 55 a7 02 c0       	push   0xc002a755
c0014c33:	e8 44 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c38:	58                   	pop    eax
c0014c39:	5a                   	pop    edx
c0014c3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c3e:	50                   	push   eax
c0014c3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c43:	68 68 a7 02 c0       	push   0xc002a768
c0014c48:	e8 2f 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c4d:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014c50:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014c56:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014c59:	8b 3d 30 33 03 c0    	mov    edi,DWORD PTR ds:0xc0033330
c0014c5f:	5b                   	pop    ebx
c0014c60:	5e                   	pop    esi
c0014c61:	57                   	push   edi
c0014c62:	68 fc a5 02 c0       	push   0xc002a5fc
c0014c67:	e8 10 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c6c:	83 c4 10             	add    esp,0x10
c0014c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c73:	83 c4 10             	add    esp,0x10
c0014c76:	5b                   	pop    ebx
c0014c77:	5e                   	pop    esi
c0014c78:	5f                   	pop    edi
c0014c79:	c3                   	ret    

c0014c7a <mapVASFirstTime>:
c0014c7a:	55                   	push   ebp
c0014c7b:	57                   	push   edi
c0014c7c:	56                   	push   esi
c0014c7d:	53                   	push   ebx
c0014c7e:	83 ec 0c             	sub    esp,0xc
c0014c81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c86:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014c89:	83 fa 01             	cmp    edx,0x1
c0014c8c:	0f 84 cb 00 00 00    	je     c0014d5d <mapVASFirstTime+0xe3>
c0014c92:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014c95:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014c98:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014c9d:	c1 e5 15             	shl    ebp,0x15
c0014ca0:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014ca5:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014cab:	29 eb                	sub    ebx,ebp
c0014cad:	29 ef                	sub    edi,ebp
c0014caf:	e8 50 ba ff ff       	call   c0010704 <Phys::allocatePage()>
c0014cb4:	83 ec 0c             	sub    esp,0xc
c0014cb7:	68 03 04 00 00       	push   0x403
c0014cbc:	6a 01                	push   0x1
c0014cbe:	53                   	push   ebx
c0014cbf:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014cc5:	50                   	push   eax
c0014cc6:	56                   	push   esi
c0014cc7:	e8 a8 f6 ff ff       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014ccc:	83 c4 20             	add    esp,0x20
c0014ccf:	39 fb                	cmp    ebx,edi
c0014cd1:	75 dc                	jne    c0014caf <mapVASFirstTime+0x35>
c0014cd3:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014cd8:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014cdd:	29 eb                	sub    ebx,ebp
c0014cdf:	29 ef                	sub    edi,ebp
c0014ce1:	e8 1e ba ff ff       	call   c0010704 <Phys::allocatePage()>
c0014ce6:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014cea:	83 fa 01             	cmp    edx,0x1
c0014ced:	19 d2                	sbb    edx,edx
c0014cef:	83 ec 0c             	sub    esp,0xc
c0014cf2:	83 e2 04             	and    edx,0x4
c0014cf5:	81 c2 03 04 00 00    	add    edx,0x403
c0014cfb:	52                   	push   edx
c0014cfc:	6a 01                	push   0x1
c0014cfe:	53                   	push   ebx
c0014cff:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014d05:	50                   	push   eax
c0014d06:	56                   	push   esi
c0014d07:	e8 68 f6 ff ff       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014d0c:	83 c4 20             	add    esp,0x20
c0014d0f:	39 df                	cmp    edi,ebx
c0014d11:	75 ce                	jne    c0014ce1 <mapVASFirstTime+0x67>
c0014d13:	83 ec 0c             	sub    esp,0xc
c0014d16:	bb 7c f0 02 c0       	mov    ebx,0xc002f07c
c0014d1b:	6a 04                	push   0x4
c0014d1d:	81 eb 00 e0 02 c0    	sub    ebx,0xc002e000
c0014d23:	6a ff                	push   0xffffffff
c0014d25:	c1 eb 0c             	shr    ebx,0xc
c0014d28:	53                   	push   ebx
c0014d29:	68 00 e0 02 c0       	push   0xc002e000
c0014d2e:	56                   	push   esi
c0014d2f:	e8 f6 f1 ff ff       	call   c0013f2a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014d34:	83 c4 14             	add    esp,0x14
c0014d37:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c0014d3c:	6a 04                	push   0x4
c0014d3e:	6a ff                	push   0xffffffff
c0014d40:	53                   	push   ebx
c0014d41:	68 00 e0 02 c0       	push   0xc002e000
c0014d46:	50                   	push   eax
c0014d47:	e8 de f1 ff ff       	call   c0013f2a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014d4c:	0f 20 d8             	mov    eax,cr3
c0014d4f:	0f 22 d8             	mov    cr3,eax
c0014d52:	83 c4 20             	add    esp,0x20
c0014d55:	83 c4 0c             	add    esp,0xc
c0014d58:	5b                   	pop    ebx
c0014d59:	5e                   	pop    esi
c0014d5a:	5f                   	pop    edi
c0014d5b:	5d                   	pop    ebp
c0014d5c:	c3                   	ret    
c0014d5d:	83 ec 0c             	sub    esp,0xc
c0014d60:	68 75 a7 02 c0       	push   0xc002a775
c0014d65:	e8 12 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014d6a:	83 c4 10             	add    esp,0x10
c0014d6d:	83 c4 0c             	add    esp,0xc
c0014d70:	5b                   	pop    ebx
c0014d71:	5e                   	pop    esi
c0014d72:	5f                   	pop    edi
c0014d73:	5d                   	pop    ebp
c0014d74:	c3                   	ret    

c0014d75 <SysAlarm(regs*)>:
c0014d75:	53                   	push   ebx
c0014d76:	83 ec 10             	sub    esp,0x10
c0014d79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014d7d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d80:	68 8e a7 02 c0       	push   0xc002a78e
c0014d85:	e8 f2 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014d8a:	83 c4 0c             	add    esp,0xc
c0014d8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014d90:	31 d2                	xor    edx,edx
c0014d92:	52                   	push   edx
c0014d93:	50                   	push   eax
c0014d94:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014d9a:	e8 ad 09 00 00       	call   c001574c <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014d9f:	83 c4 18             	add    esp,0x18
c0014da2:	5b                   	pop    ebx
c0014da3:	c3                   	ret    

c0014da4 <SysEject(regs*)>:
c0014da4:	83 ec 0c             	sub    esp,0xc
c0014da7:	83 ca ff             	or     edx,0xffffffff
c0014daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dae:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014db1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014db6:	83 e9 41             	sub    ecx,0x41
c0014db9:	83 f9 19             	cmp    ecx,0x19
c0014dbc:	77 18                	ja     c0014dd6 <SysEject(regs*)+0x32>
c0014dbe:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0014dc5:	85 c9                	test   ecx,ecx
c0014dc7:	74 0d                	je     c0014dd6 <SysEject(regs*)+0x32>
c0014dc9:	83 ec 0c             	sub    esp,0xc
c0014dcc:	51                   	push   ecx
c0014dcd:	e8 82 64 ff ff       	call   c000b254 <LogicalDisk::eject()>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	99                   	cdq    
c0014dd6:	83 c4 0c             	add    esp,0xc
c0014dd9:	c3                   	ret    

c0014dda <SysExit(regs*)>:
c0014dda:	83 ec 18             	sub    esp,0x18
c0014ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014de1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014de4:	e8 bf 2a 00 00       	call   c00178a8 <KeTerminateCurrentThread(int)>
c0014de9:	83 c8 ff             	or     eax,0xffffffff
c0014dec:	83 c4 1c             	add    esp,0x1c
c0014def:	89 c2                	mov    edx,eax
c0014df1:	c3                   	ret    

c0014df2 <SysGetCwd(regs*)>:
c0014df2:	83 ec 10             	sub    esp,0x10
c0014df5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014df9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014dfc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e04:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014e07:	e8 5e 38 ff ff       	call   c000866a <Fs::getcwd(Process*, char*, int)>
c0014e0c:	83 c4 1c             	add    esp,0x1c
c0014e0f:	99                   	cdq    
c0014e10:	c3                   	ret    

c0014e11 <SysGetPID(regs*)>:
c0014e11:	83 ec 14             	sub    esp,0x14
c0014e14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e1c:	ff 30                	push   DWORD PTR [eax]
c0014e1e:	68 a3 a7 02 c0       	push   0xc002a7a3
c0014e23:	e8 54 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e32:	83 c4 1c             	add    esp,0x1c
c0014e35:	99                   	cdq    
c0014e36:	c3                   	ret    

c0014e37 <SysGetRAMData(regs*)>:
c0014e37:	8b 0d 7c 31 03 c0    	mov    ecx,DWORD PTR ds:0xc003317c
c0014e3d:	a1 88 32 03 c0       	mov    eax,ds:0xc0033288
c0014e42:	03 05 78 31 03 c0    	add    eax,DWORD PTR ds:0xc0033178
c0014e48:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014e4e:	99                   	cdq    
c0014e4f:	f7 f9                	idiv   ecx
c0014e51:	c1 e0 18             	shl    eax,0x18
c0014e54:	09 c8                	or     eax,ecx
c0014e56:	99                   	cdq    
c0014e57:	c3                   	ret    

c0014e58 <SysGetVGAPtr(regs*)>:
c0014e58:	55                   	push   ebp
c0014e59:	57                   	push   edi
c0014e5a:	56                   	push   esi
c0014e5b:	53                   	push   ebx
c0014e5c:	83 ec 1c             	sub    esp,0x1c
c0014e5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014e63:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014e66:	83 f8 ff             	cmp    eax,0xffffffff
c0014e69:	74 23                	je     c0014e8e <SysGetVGAPtr(regs*)+0x36>
c0014e6b:	83 ec 0c             	sub    esp,0xc
c0014e6e:	50                   	push   eax
c0014e6f:	e8 e0 24 00 00       	call   c0017354 <KeProcessFromPID(int)>
c0014e74:	31 d2                	xor    edx,edx
c0014e76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e7a:	83 c4 10             	add    esp,0x10
c0014e7d:	b8 01 00 00 00       	mov    eax,0x1
c0014e82:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e87:	75 11                	jne    c0014e9a <SysGetVGAPtr(regs*)+0x42>
c0014e89:	e9 80 00 00 00       	jmp    c0014f0e <SysGetVGAPtr(regs*)+0xb6>
c0014e8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e93:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e9e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014ea2:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014ea8:	74 0c                	je     c0014eb6 <SysGetVGAPtr(regs*)+0x5e>
c0014eaa:	83 ec 0c             	sub    esp,0xc
c0014ead:	55                   	push   ebp
c0014eae:	e8 7c dc ff ff       	call   c0012b2f <setActiveTerminal(VgaText*)>
c0014eb3:	83 c4 10             	add    esp,0x10
c0014eb6:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014eb9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014ebc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014ec1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ec3:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014ec6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ec9:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014ecf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014ed2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ed5:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014edb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014edf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014ee2:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014ee9:	c1 e8 07             	shr    eax,0x7
c0014eec:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014ef2:	50                   	push   eax
c0014ef3:	50                   	push   eax
c0014ef4:	68 b2 a7 02 c0       	push   0xc002a7b2
c0014ef9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014efc:	05 ac 0f 00 00       	add    eax,0xfac
c0014f01:	50                   	push   eax
c0014f02:	e8 39 b7 fe ff       	call   c0000640 <strcpy>
c0014f07:	83 c4 10             	add    esp,0x10
c0014f0a:	31 c0                	xor    eax,eax
c0014f0c:	31 d2                	xor    edx,edx
c0014f0e:	83 c4 1c             	add    esp,0x1c
c0014f11:	5b                   	pop    ebx
c0014f12:	5e                   	pop    esi
c0014f13:	5f                   	pop    edi
c0014f14:	5d                   	pop    ebp
c0014f15:	c3                   	ret    
c0014f16:	66 90                	xchg   ax,ax

c0014f18 <SysKill(regs*)>:
c0014f18:	53                   	push   ebx
c0014f19:	83 ec 08             	sub    esp,0x8
c0014f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f20:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014f24:	75 16                	jne    c0014f3c <SysKill(regs*)+0x24>
c0014f26:	83 ec 0c             	sub    esp,0xc
c0014f29:	68 bc a7 02 c0       	push   0xc002a7bc
c0014f2e:	e8 dd b5 ff ff       	call   c0010510 <KePanic(char const*)>
c0014f33:	83 c4 10             	add    esp,0x10
c0014f36:	e9 89 00 00 00       	jmp    c0014fc4 <SysKill(regs*)+0xac>
c0014f3b:	90                   	nop
c0014f3c:	83 ec 0c             	sub    esp,0xc
c0014f3f:	68 4c 33 03 c0       	push   0xc003334c
c0014f44:	e8 d3 29 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f49:	8d 76 00             	lea    esi,[esi+0x0]
c0014f4c:	83 c4 10             	add    esp,0x10
c0014f4f:	85 c0                	test   eax,eax
c0014f51:	74 19                	je     c0014f6c <SysKill(regs*)+0x54>
c0014f53:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014f56:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014f59:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014f5b:	74 33                	je     c0014f90 <SysKill(regs*)+0x78>
c0014f5d:	52                   	push   edx
c0014f5e:	52                   	push   edx
c0014f5f:	50                   	push   eax
c0014f60:	68 4c 33 03 c0       	push   0xc003334c
c0014f65:	e8 be 2e 01 00       	call   c0027e28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014f6a:	eb e0                	jmp    c0014f4c <SysKill(regs*)+0x34>
c0014f6c:	83 ec 0c             	sub    esp,0xc
c0014f6f:	68 40 33 03 c0       	push   0xc0033340
c0014f74:	e8 a3 29 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f79:	8d 76 00             	lea    esi,[esi+0x0]
c0014f7c:	83 c4 10             	add    esp,0x10
c0014f7f:	85 c0                	test   eax,eax
c0014f81:	74 41                	je     c0014fc4 <SysKill(regs*)+0xac>
c0014f83:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014f86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014f89:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014f8b:	75 27                	jne    c0014fb4 <SysKill(regs*)+0x9c>
c0014f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f90:	51                   	push   ecx
c0014f91:	51                   	push   ecx
c0014f92:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014f95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f9d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014fa3:	e8 83 c7 ff ff       	call   c001172b <KeRaiseSignal(SigHandlerBlock*, int)>
c0014fa8:	83 c4 10             	add    esp,0x10
c0014fab:	31 c0                	xor    eax,eax
c0014fad:	31 d2                	xor    edx,edx
c0014faf:	eb 1b                	jmp    c0014fcc <SysKill(regs*)+0xb4>
c0014fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0014fb4:	52                   	push   edx
c0014fb5:	52                   	push   edx
c0014fb6:	50                   	push   eax
c0014fb7:	68 40 33 03 c0       	push   0xc0033340
c0014fbc:	e8 67 2e 01 00       	call   c0027e28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014fc1:	eb b9                	jmp    c0014f7c <SysKill(regs*)+0x64>
c0014fc3:	90                   	nop
c0014fc4:	83 c8 ff             	or     eax,0xffffffff
c0014fc7:	89 c2                	mov    edx,eax
c0014fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014fcc:	83 c4 08             	add    esp,0x8
c0014fcf:	5b                   	pop    ebx
c0014fd0:	c3                   	ret    

c0014fd1 <SysLoadDLL(regs*)>:
c0014fd1:	56                   	push   esi
c0014fd2:	31 d2                	xor    edx,edx
c0014fd4:	53                   	push   ebx
c0014fd5:	b8 01 00 00 00       	mov    eax,0x1
c0014fda:	53                   	push   ebx
c0014fdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014fdf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014fe3:	0f 84 82 00 00 00    	je     c001506b <SysLoadDLL(regs*)+0x9a>
c0014fe9:	83 ec 0c             	sub    esp,0xc
c0014fec:	68 14 01 00 00       	push   0x114
c0014ff1:	e8 c5 b0 ff ff       	call   c00100bb <malloc>
c0014ff6:	83 c4 0c             	add    esp,0xc
c0014ff9:	89 c3                	mov    ebx,eax
c0014ffb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015000:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015003:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015006:	53                   	push   ebx
c0015007:	e8 ca 39 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c001500c:	83 c4 10             	add    esp,0x10
c001500f:	31 d2                	xor    edx,edx
c0015011:	b8 02 00 00 00       	mov    eax,0x2
c0015016:	85 db                	test   ebx,ebx
c0015018:	74 51                	je     c001506b <SysLoadDLL(regs*)+0x9a>
c001501a:	83 ec 0c             	sub    esp,0xc
c001501d:	53                   	push   ebx
c001501e:	e8 95 3c ff ff       	call   c0008cb8 <File::exists()>
c0015023:	83 c4 10             	add    esp,0x10
c0015026:	84 c0                	test   al,al
c0015028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001502a:	75 11                	jne    c001503d <SysLoadDLL(regs*)+0x6c>
c001502c:	83 ec 0c             	sub    esp,0xc
c001502f:	53                   	push   ebx
c0015030:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	b8 03 00 00 00       	mov    eax,0x3
c001503b:	eb 2c                	jmp    c0015069 <SysLoadDLL(regs*)+0x98>
c001503d:	83 ec 0c             	sub    esp,0xc
c0015040:	53                   	push   ebx
c0015041:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015044:	83 c4 0c             	add    esp,0xc
c0015047:	6a 00                	push   0x0
c0015049:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c001504f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015052:	e8 b5 16 00 00       	call   c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0015057:	83 c4 10             	add    esp,0x10
c001505a:	88 c1                	mov    cl,al
c001505c:	31 d2                	xor    edx,edx
c001505e:	31 c0                	xor    eax,eax
c0015060:	84 c9                	test   cl,cl
c0015062:	75 07                	jne    c001506b <SysLoadDLL(regs*)+0x9a>
c0015064:	b8 04 00 00 00       	mov    eax,0x4
c0015069:	31 d2                	xor    edx,edx
c001506b:	59                   	pop    ecx
c001506c:	5b                   	pop    ebx
c001506d:	5e                   	pop    esi
c001506e:	c3                   	ret    

c001506f <SysPause(regs*)>:
c001506f:	83 ec 18             	sub    esp,0x18
c0015072:	6a 08                	push   0x8
c0015074:	e8 ef 20 00 00       	call   c0017168 <blockTask(TaskState)>
c0015079:	31 c0                	xor    eax,eax
c001507b:	31 d2                	xor    edx,edx
c001507d:	83 c4 1c             	add    esp,0x1c
c0015080:	c3                   	ret    

c0015081 <SysPthreadCreate(regs*)>:
c0015081:	83 ec 18             	sub    esp,0x18
c0015084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015089:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001508c:	e8 af 1e 00 00       	call   c0016f40 <Process::createUserThread()>
c0015091:	31 c0                	xor    eax,eax
c0015093:	31 d2                	xor    edx,edx
c0015095:	83 c4 1c             	add    esp,0x1c
c0015098:	c3                   	ret    

c0015099 <SysPthreadGetTID(regs*)>:
c0015099:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001509e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150a1:	99                   	cdq    
c00150a2:	c3                   	ret    

c00150a3 <SysInternalPthreadGetContext(regs*)>:
c00150a3:	31 c0                	xor    eax,eax
c00150a5:	31 d2                	xor    edx,edx
c00150a7:	c3                   	ret    

c00150a8 <SysInternalPthreadGetStartLocation(regs*)>:
c00150a8:	31 c0                	xor    eax,eax
c00150aa:	31 d2                	xor    edx,edx
c00150ac:	c3                   	ret    

c00150ad <SysPthreadJoin(regs*)>:
c00150ad:	31 c0                	xor    eax,eax
c00150af:	31 d2                	xor    edx,edx
c00150b1:	c3                   	ret    

c00150b2 <SysPthreadExit(regs*)>:
c00150b2:	83 ec 18             	sub    esp,0x18
c00150b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150b9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00150bc:	e8 e7 27 00 00       	call   c00178a8 <KeTerminateCurrentThread(int)>
c00150c1:	83 c8 ff             	or     eax,0xffffffff
c00150c4:	83 c4 1c             	add    esp,0x1c
c00150c7:	89 c2                	mov    edx,eax
c00150c9:	c3                   	ret    

c00150ca <SysRead(regs*)>:
c00150ca:	57                   	push   edi
c00150cb:	56                   	push   esi
c00150cc:	53                   	push   ebx
c00150cd:	83 ec 10             	sub    esp,0x10
c00150d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00150d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00150d7:	83 f8 02             	cmp    eax,0x2
c00150da:	77 10                	ja     c00150ec <SysRead(regs*)+0x22>
c00150dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150e4:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00150ea:	eb 0e                	jmp    c00150fa <SysRead(regs*)+0x30>
c00150ec:	83 ec 0c             	sub    esp,0xc
c00150ef:	50                   	push   eax
c00150f0:	e8 54 e8 ff ff       	call   c0013949 <KeGetFileFromDescriptor(int)>
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	89 c1                	mov    ecx,eax
c00150fa:	83 c8 ff             	or     eax,0xffffffff
c00150fd:	85 c9                	test   ecx,ecx
c00150ff:	89 c2                	mov    edx,eax
c0015101:	74 28                	je     c001512b <SysRead(regs*)+0x61>
c0015103:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001510b:	31 ff                	xor    edi,edi
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015112:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015116:	52                   	push   edx
c0015117:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001511a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001511d:	57                   	push   edi
c001511e:	56                   	push   esi
c001511f:	51                   	push   ecx
c0015120:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015123:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015127:	83 c4 20             	add    esp,0x20
c001512a:	99                   	cdq    
c001512b:	83 c4 10             	add    esp,0x10
c001512e:	5b                   	pop    ebx
c001512f:	5e                   	pop    esi
c0015130:	5f                   	pop    edi
c0015131:	c3                   	ret    

c0015132 <SysRegisterSignal(regs*)>:
c0015132:	83 ec 18             	sub    esp,0x18
c0015135:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015139:	6a 00                	push   0x0
c001513b:	6a 00                	push   0x0
c001513d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015140:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015148:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001514b:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0015151:	e8 9f c5 ff ff       	call   c00116f5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0015156:	83 c4 2c             	add    esp,0x2c
c0015159:	99                   	cdq    
c001515a:	c3                   	ret    

c001515b <SysRegistryGetTypeFromPath(regs*)>:
c001515b:	53                   	push   ebx
c001515c:	81 ec 40 01 00 00    	sub    esp,0x140
c0015162:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0015169:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001516c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001516f:	e8 a8 96 ff ff       	call   c000e81c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0015174:	83 c4 10             	add    esp,0x10
c0015177:	89 c1                	mov    ecx,eax
c0015179:	85 c0                	test   eax,eax
c001517b:	74 15                	je     c0015192 <SysRegistryGetTypeFromPath(regs*)+0x37>
c001517d:	50                   	push   eax
c001517e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015182:	50                   	push   eax
c0015183:	51                   	push   ecx
c0015184:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015187:	e8 74 92 ff ff       	call   c000e400 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	99                   	cdq    
c0015190:	eb 05                	jmp    c0015197 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0015192:	83 c8 ff             	or     eax,0xffffffff
c0015195:	89 c2                	mov    edx,eax
c0015197:	81 c4 38 01 00 00    	add    esp,0x138
c001519d:	5b                   	pop    ebx
c001519e:	c3                   	ret    

c001519f <SysRegistryReadExtent(regs*)>:
c001519f:	83 ec 1c             	sub    esp,0x1c
c00151a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151a6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00151a9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00151ac:	85 c0                	test   eax,eax
c00151ae:	79 1f                	jns    c00151cf <SysRegistryReadExtent(regs*)+0x30>
c00151b0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00151b5:	52                   	push   edx
c00151b6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00151ba:	52                   	push   edx
c00151bb:	50                   	push   eax
c00151bc:	51                   	push   ecx
c00151bd:	e8 30 91 ff ff       	call   c000e2f2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00151c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	eb 14                	jmp    c00151e3 <SysRegistryReadExtent(regs*)+0x44>
c00151cf:	83 ec 04             	sub    esp,0x4
c00151d2:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00151d5:	50                   	push   eax
c00151d6:	51                   	push   ecx
c00151d7:	e8 b0 8b ff ff       	call   c000dd8c <CmGetString(Reghive_Tag*, int, char*)>
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	31 c0                	xor    eax,eax
c00151e1:	31 d2                	xor    edx,edx
c00151e3:	83 c4 1c             	add    esp,0x1c
c00151e6:	c3                   	ret    

c00151e7 <SysRegistryPathToExtentLookup(regs*)>:
c00151e7:	83 ec 14             	sub    esp,0x14
c00151ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151ee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00151f1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151f4:	e8 23 96 ff ff       	call   c000e81c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00151f9:	83 c4 1c             	add    esp,0x1c
c00151fc:	99                   	cdq    
c00151fd:	c3                   	ret    

c00151fe <SysRegistryEnterDirectory(regs*)>:
c00151fe:	83 ec 14             	sub    esp,0x14
c0015201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015205:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015208:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001520b:	e8 f3 8b ff ff       	call   c000de03 <CmEnterDirectory(Reghive_Tag*, int)>
c0015210:	83 c4 1c             	add    esp,0x1c
c0015213:	99                   	cdq    
c0015214:	c3                   	ret    

c0015215 <SysRegistryGetNext(regs*)>:
c0015215:	83 ec 14             	sub    esp,0x14
c0015218:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001521c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001521f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015222:	e8 1b 8c ff ff       	call   c000de42 <CmGetNext(Reghive_Tag*, int)>
c0015227:	83 c4 1c             	add    esp,0x1c
c001522a:	99                   	cdq    
c001522b:	c3                   	ret    

c001522c <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001522c:	57                   	push   edi
c001522d:	56                   	push   esi
c001522e:	53                   	push   ebx
c001522f:	81 ec 34 01 00 00    	sub    esp,0x134
c0015235:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001523c:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0015240:	57                   	push   edi
c0015241:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015244:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015247:	e8 b4 91 ff ff       	call   c000e400 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001524c:	89 c3                	mov    ebx,eax
c001524e:	58                   	pop    eax
c001524f:	5a                   	pop    edx
c0015250:	57                   	push   edi
c0015251:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015254:	e8 e7 b3 fe ff       	call   c0000640 <strcpy>
c0015259:	89 d8                	mov    eax,ebx
c001525b:	81 c4 40 01 00 00    	add    esp,0x140
c0015261:	99                   	cdq    
c0015262:	5b                   	pop    ebx
c0015263:	5e                   	pop    esi
c0015264:	5f                   	pop    edi
c0015265:	c3                   	ret    

c0015266 <SysRegistryOpen(regs*)>:
c0015266:	83 ec 18             	sub    esp,0x18
c0015269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001526d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015270:	e8 a7 89 ff ff       	call   c000dc1c <CmOpen(char const*)>
c0015275:	83 c4 1c             	add    esp,0x1c
c0015278:	99                   	cdq    
c0015279:	c3                   	ret    

c001527a <SysRegistryClose(regs*)>:
c001527a:	83 ec 18             	sub    esp,0x18
c001527d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015281:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015284:	e8 b1 8a ff ff       	call   c000dd3a <CmClose(Reghive_Tag*)>
c0015289:	31 c0                	xor    eax,eax
c001528b:	31 d2                	xor    edx,edx
c001528d:	83 c4 1c             	add    esp,0x1c
c0015290:	c3                   	ret    

c0015291 <SysRegistryEasyReadString(regs*)>:
c0015291:	57                   	push   edi
c0015292:	56                   	push   esi
c0015293:	53                   	push   ebx
c0015294:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001529e:	e8 79 89 ff ff       	call   c000dc1c <CmOpen(char const*)>
c00152a3:	5a                   	pop    edx
c00152a4:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00152a7:	59                   	pop    ecx
c00152a8:	89 c3                	mov    ebx,eax
c00152aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152ad:	50                   	push   eax
c00152ae:	e8 69 95 ff ff       	call   c000e81c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	89 c1                	mov    ecx,eax
c00152b8:	b8 01 00 00 00       	mov    eax,0x1
c00152bd:	85 c9                	test   ecx,ecx
c00152bf:	7e 16                	jle    c00152d7 <SysRegistryEasyReadString(regs*)+0x46>
c00152c1:	50                   	push   eax
c00152c2:	57                   	push   edi
c00152c3:	51                   	push   ecx
c00152c4:	53                   	push   ebx
c00152c5:	e8 c2 8a ff ff       	call   c000dd8c <CmGetString(Reghive_Tag*, int, char*)>
c00152ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152cd:	e8 68 8a ff ff       	call   c000dd3a <CmClose(Reghive_Tag*)>
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	31 c0                	xor    eax,eax
c00152d7:	5b                   	pop    ebx
c00152d8:	31 d2                	xor    edx,edx
c00152da:	5e                   	pop    esi
c00152db:	5f                   	pop    edi
c00152dc:	c3                   	ret    

c00152dd <SysRegistryEasyReadInteger(regs*)>:
c00152dd:	56                   	push   esi
c00152de:	53                   	push   ebx
c00152df:	83 ec 10             	sub    esp,0x10
c00152e2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00152e6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00152e9:	e8 2e 89 ff ff       	call   c000dc1c <CmOpen(char const*)>
c00152ee:	5a                   	pop    edx
c00152ef:	89 c3                	mov    ebx,eax
c00152f1:	59                   	pop    ecx
c00152f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152f5:	50                   	push   eax
c00152f6:	e8 21 95 ff ff       	call   c000e81c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00152fb:	83 c4 10             	add    esp,0x10
c00152fe:	89 c1                	mov    ecx,eax
c0015300:	b8 01 00 00 00       	mov    eax,0x1
c0015305:	85 c9                	test   ecx,ecx
c0015307:	7e 18                	jle    c0015321 <SysRegistryEasyReadInteger(regs*)+0x44>
c0015309:	50                   	push   eax
c001530a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001530d:	51                   	push   ecx
c001530e:	53                   	push   ebx
c001530f:	e8 de 8f ff ff       	call   c000e2f2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015317:	e8 1e 8a ff ff       	call   c000dd3a <CmClose(Reghive_Tag*)>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	31 c0                	xor    eax,eax
c0015321:	59                   	pop    ecx
c0015322:	31 d2                	xor    edx,edx
c0015324:	5b                   	pop    ebx
c0015325:	5e                   	pop    esi
c0015326:	c3                   	ret    

c0015327 <SysSbrk(regs*)>:
c0015327:	56                   	push   esi
c0015328:	53                   	push   ebx
c0015329:	50                   	push   eax
c001532a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015333:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015336:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015339:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c001533f:	85 db                	test   ebx,ebx
c0015341:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015344:	74 02                	je     c0015348 <SysSbrk(regs*)+0x21>
c0015346:	79 06                	jns    c001534e <SysSbrk(regs*)+0x27>
c0015348:	89 f0                	mov    eax,esi
c001534a:	31 d2                	xor    edx,edx
c001534c:	eb 2a                	jmp    c0015378 <SysSbrk(regs*)+0x51>
c001534e:	83 c8 ff             	or     eax,0xffffffff
c0015351:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015357:	89 c2                	mov    edx,eax
c0015359:	77 1d                	ja     c0015378 <SysSbrk(regs*)+0x51>
c001535b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015361:	50                   	push   eax
c0015362:	c1 ea 0c             	shr    edx,0xc
c0015365:	68 07 0c 00 00       	push   0xc07
c001536a:	52                   	push   edx
c001536b:	51                   	push   ecx
c001536c:	e8 1d ef ff ff       	call   c001428e <VAS::allocatePages(int, int)>
c0015371:	89 f0                	mov    eax,esi
c0015373:	31 d2                	xor    edx,edx
c0015375:	83 c4 10             	add    esp,0x10
c0015378:	59                   	pop    ecx
c0015379:	5b                   	pop    ebx
c001537a:	5e                   	pop    esi
c001537b:	c3                   	ret    

c001537c <SysSetCwd(regs*)>:
c001537c:	83 ec 14             	sub    esp,0x14
c001537f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015383:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015386:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001538b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001538e:	e8 c4 39 ff ff       	call   c0008d57 <Fs::setcwd(Process*, char*)>
c0015393:	83 c4 1c             	add    esp,0x1c
c0015396:	99                   	cdq    
c0015397:	c3                   	ret    

c0015398 <SysSetTime(regs*)>:
c0015398:	55                   	push   ebp
c0015399:	31 d2                	xor    edx,edx
c001539b:	57                   	push   edi
c001539c:	56                   	push   esi
c001539d:	be 18 00 00 00       	mov    esi,0x18
c00153a2:	53                   	push   ebx
c00153a3:	bb 3c 00 00 00       	mov    ebx,0x3c
c00153a8:	83 ec 20             	sub    esp,0x20
c00153ab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00153af:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00153b2:	f7 f3                	div    ebx
c00153b4:	89 d7                	mov    edi,edx
c00153b6:	31 d2                	xor    edx,edx
c00153b8:	f7 f3                	div    ebx
c00153ba:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00153bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153c1:	bb 10 0e 00 00       	mov    ebx,0xe10
c00153c6:	31 d2                	xor    edx,edx
c00153c8:	f7 f3                	div    ebx
c00153ca:	31 d2                	xor    edx,edx
c00153cc:	f7 f6                	div    esi
c00153ce:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00153d1:	89 d5                	mov    ebp,edx
c00153d3:	89 c3                	mov    ebx,eax
c00153d5:	be 0c 00 00 00       	mov    esi,0xc
c00153da:	83 e3 1f             	and    ebx,0x1f
c00153dd:	c1 e8 05             	shr    eax,0x5
c00153e0:	43                   	inc    ebx
c00153e1:	31 d2                	xor    edx,edx
c00153e3:	f7 f6                	div    esi
c00153e5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00153e9:	57                   	push   edi
c00153ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00153ee:	55                   	push   ebp
c00153ef:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c00153f3:	56                   	push   esi
c00153f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00153f8:	53                   	push   ebx
c00153f9:	68 dd a7 02 c0       	push   0xc002a7dd
c00153fe:	e8 79 1b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015403:	83 c4 1c             	add    esp,0x1c
c0015406:	57                   	push   edi
c0015407:	c1 e7 10             	shl    edi,0x10
c001540a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001540e:	55                   	push   ebp
c001540f:	56                   	push   esi
c0015410:	c1 e6 10             	shl    esi,0x10
c0015413:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015417:	53                   	push   ebx
c0015418:	68 ff a7 02 c0       	push   0xc002a7ff
c001541d:	e8 5a 1b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015422:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0015427:	31 d2                	xor    edx,edx
c0015429:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c001542f:	31 c0                	xor    eax,eax
c0015431:	88 d8                	mov    al,bl
c0015433:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0015437:	0f b7 d8             	movzx  ebx,ax
c001543a:	09 f3                	or     ebx,esi
c001543c:	89 d8                	mov    eax,ebx
c001543e:	89 eb                	mov    ebx,ebp
c0015440:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0015444:	88 da                	mov    dl,bl
c0015446:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c001544a:	83 c4 1c             	add    esp,0x1c
c001544d:	89 d6                	mov    esi,edx
c001544f:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0015455:	09 fe                	or     esi,edi
c0015457:	56                   	push   esi
c0015458:	50                   	push   eax
c0015459:	51                   	push   ecx
c001545a:	e8 69 49 ff ff       	call   c0009dc8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001545f:	83 c4 2c             	add    esp,0x2c
c0015462:	83 f0 01             	xor    eax,0x1
c0015465:	5b                   	pop    ebx
c0015466:	0f b6 c0             	movzx  eax,al
c0015469:	5e                   	pop    esi
c001546a:	31 d2                	xor    edx,edx
c001546c:	5f                   	pop    edi
c001546d:	5d                   	pop    ebp
c001546e:	c3                   	ret    

c001546f <SysSymlink(regs*)>:
c001546f:	56                   	push   esi
c0015470:	83 c8 ff             	or     eax,0xffffffff
c0015473:	53                   	push   ebx
c0015474:	89 c2                	mov    edx,eax
c0015476:	81 ec 34 02 00 00    	sub    esp,0x234
c001547c:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0015483:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015487:	74 50                	je     c00154d9 <SysSymlink(regs*)+0x6a>
c0015489:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001548c:	85 c9                	test   ecx,ecx
c001548e:	74 49                	je     c00154d9 <SysSymlink(regs*)+0x6a>
c0015490:	6a 01                	push   0x1
c0015492:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015497:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001549a:	05 0c 01 00 00       	add    eax,0x10c
c001549f:	50                   	push   eax
c00154a0:	51                   	push   ecx
c00154a1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00154a5:	56                   	push   esi
c00154a6:	e8 13 32 ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00154ab:	6a 01                	push   0x1
c00154ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154b5:	05 0c 01 00 00       	add    eax,0x10c
c00154ba:	50                   	push   eax
c00154bb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00154be:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00154c5:	53                   	push   ebx
c00154c6:	e8 f3 31 ff ff       	call   c00086be <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00154cb:	83 c4 18             	add    esp,0x18
c00154ce:	56                   	push   esi
c00154cf:	53                   	push   ebx
c00154d0:	e8 16 2e ff ff       	call   c00082eb <KeCreateSymlink(char const*, char const*)>
c00154d5:	83 c4 10             	add    esp,0x10
c00154d8:	99                   	cdq    
c00154d9:	81 c4 34 02 00 00    	add    esp,0x234
c00154df:	5b                   	pop    ebx
c00154e0:	5e                   	pop    esi
c00154e1:	c3                   	ret    

c00154e2 <SysTimezone(regs*)>:
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154e9:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00154ed:	75 17                	jne    c0015506 <SysTimezone(regs*)+0x24>
c00154ef:	83 ec 0c             	sub    esp,0xc
c00154f2:	68 21 a8 02 c0       	push   0xc002a821
c00154f7:	e8 80 1a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00154fc:	83 c8 ff             	or     eax,0xffffffff
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	89 c2                	mov    edx,eax
c0015504:	eb 16                	jmp    c001551c <SysTimezone(regs*)+0x3a>
c0015506:	83 ec 0c             	sub    esp,0xc
c0015509:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001550c:	e8 44 43 ff ff       	call   c0009855 <KeSetTimezone(int)>
c0015511:	31 d2                	xor    edx,edx
c0015513:	83 f0 01             	xor    eax,0x1
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	0f b6 c0             	movzx  eax,al
c001551c:	83 c4 0c             	add    esp,0xc
c001551f:	c3                   	ret    

c0015520 <SysTruncate(regs*)>:
c0015520:	55                   	push   ebp
c0015521:	57                   	push   edi
c0015522:	31 ff                	xor    edi,edi
c0015524:	56                   	push   esi
c0015525:	53                   	push   ebx
c0015526:	83 ec 0c             	sub    esp,0xc
c0015529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001552d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015530:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0015533:	89 ce                	mov    esi,ecx
c0015535:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015539:	0f 84 9a 00 00 00    	je     c00155d9 <SysTruncate(regs*)+0xb9>
c001553f:	83 ec 0c             	sub    esp,0xc
c0015542:	68 14 01 00 00       	push   0x114
c0015547:	e8 6f ab ff ff       	call   c00100bb <malloc>
c001554c:	83 c4 0c             	add    esp,0xc
c001554f:	89 c3                	mov    ebx,eax
c0015551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015556:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015559:	55                   	push   ebp
c001555a:	53                   	push   ebx
c001555b:	e8 76 34 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c0015560:	83 c4 10             	add    esp,0x10
c0015563:	31 d2                	xor    edx,edx
c0015565:	b8 03 00 00 00       	mov    eax,0x3
c001556a:	85 db                	test   ebx,ebx
c001556c:	0f 84 a2 00 00 00    	je     c0015614 <SysTruncate(regs*)+0xf4>
c0015572:	51                   	push   ecx
c0015573:	51                   	push   ecx
c0015574:	6a 02                	push   0x2
c0015576:	53                   	push   ebx
c0015577:	e8 78 34 ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c001557c:	83 c4 10             	add    esp,0x10
c001557f:	85 c0                	test   eax,eax
c0015581:	74 13                	je     c0015596 <SysTruncate(regs*)+0x76>
c0015583:	83 ec 0c             	sub    esp,0xc
c0015586:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015588:	53                   	push   ebx
c0015589:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001558c:	83 c4 10             	add    esp,0x10
c001558f:	b8 04 00 00 00       	mov    eax,0x4
c0015594:	eb 7c                	jmp    c0015612 <SysTruncate(regs*)+0xf2>
c0015596:	52                   	push   edx
c0015597:	57                   	push   edi
c0015598:	56                   	push   esi
c0015599:	53                   	push   ebx
c001559a:	e8 69 35 ff ff       	call   c0008b08 <File::truncate(unsigned long long)>
c001559f:	83 c4 10             	add    esp,0x10
c00155a2:	85 c0                	test   eax,eax
c00155a4:	74 1b                	je     c00155c1 <SysTruncate(regs*)+0xa1>
c00155a6:	83 ec 0c             	sub    esp,0xc
c00155a9:	53                   	push   ebx
c00155aa:	e8 a3 34 ff ff       	call   c0008a52 <File::close()>
c00155af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155b7:	83 c4 10             	add    esp,0x10
c00155ba:	b8 05 00 00 00       	mov    eax,0x5
c00155bf:	eb 51                	jmp    c0015612 <SysTruncate(regs*)+0xf2>
c00155c1:	83 ec 0c             	sub    esp,0xc
c00155c4:	53                   	push   ebx
c00155c5:	e8 88 34 ff ff       	call   c0008a52 <File::close()>
c00155ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	31 c0                	xor    eax,eax
c00155d7:	eb 39                	jmp    c0015612 <SysTruncate(regs*)+0xf2>
c00155d9:	31 d2                	xor    edx,edx
c00155db:	b8 01 00 00 00       	mov    eax,0x1
c00155e0:	83 fd 02             	cmp    ebp,0x2
c00155e3:	7e 2f                	jle    c0015614 <SysTruncate(regs*)+0xf4>
c00155e5:	83 ec 0c             	sub    esp,0xc
c00155e8:	51                   	push   ecx
c00155e9:	e8 5b e3 ff ff       	call   c0013949 <KeGetFileFromDescriptor(int)>
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	89 c1                	mov    ecx,eax
c00155f3:	31 d2                	xor    edx,edx
c00155f5:	b8 02 00 00 00       	mov    eax,0x2
c00155fa:	85 c9                	test   ecx,ecx
c00155fc:	74 16                	je     c0015614 <SysTruncate(regs*)+0xf4>
c00155fe:	50                   	push   eax
c00155ff:	57                   	push   edi
c0015600:	56                   	push   esi
c0015601:	51                   	push   ecx
c0015602:	e8 01 35 ff ff       	call   c0008b08 <File::truncate(unsigned long long)>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	85 c0                	test   eax,eax
c001560c:	0f 95 c0             	setne  al
c001560f:	0f b6 c0             	movzx  eax,al
c0015612:	31 d2                	xor    edx,edx
c0015614:	83 c4 0c             	add    esp,0xc
c0015617:	5b                   	pop    ebx
c0015618:	5e                   	pop    esi
c0015619:	5f                   	pop    edi
c001561a:	5d                   	pop    ebp
c001561b:	c3                   	ret    

c001561c <SysWrite(regs*)>:
c001561c:	57                   	push   edi
c001561d:	56                   	push   esi
c001561e:	53                   	push   ebx
c001561f:	83 ec 10             	sub    esp,0x10
c0015622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015626:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015629:	83 f8 02             	cmp    eax,0x2
c001562c:	77 10                	ja     c001563e <SysWrite(regs*)+0x22>
c001562e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015633:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015636:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001563c:	eb 0e                	jmp    c001564c <SysWrite(regs*)+0x30>
c001563e:	83 ec 0c             	sub    esp,0xc
c0015641:	50                   	push   eax
c0015642:	e8 02 e3 ff ff       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0015647:	83 c4 10             	add    esp,0x10
c001564a:	89 c1                	mov    ecx,eax
c001564c:	83 c8 ff             	or     eax,0xffffffff
c001564f:	85 c9                	test   ecx,ecx
c0015651:	89 c2                	mov    edx,eax
c0015653:	74 28                	je     c001567d <SysWrite(regs*)+0x61>
c0015655:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001565d:	31 ff                	xor    edi,edi
c001565f:	83 ec 0c             	sub    esp,0xc
c0015662:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015664:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015668:	52                   	push   edx
c0015669:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001566c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001566f:	57                   	push   edi
c0015670:	56                   	push   esi
c0015671:	51                   	push   ecx
c0015672:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015675:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015679:	83 c4 20             	add    esp,0x20
c001567c:	99                   	cdq    
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	5b                   	pop    ebx
c0015681:	5e                   	pop    esi
c0015682:	5f                   	pop    edi
c0015683:	c3                   	ret    

c0015684 <SysWsbe(regs*)>:
c0015684:	55                   	push   ebp
c0015685:	57                   	push   edi
c0015686:	56                   	push   esi
c0015687:	53                   	push   ebx
c0015688:	83 ec 3c             	sub    esp,0x3c
c001568b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001568f:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015696:	75 2d                	jne    c00156c5 <SysWsbe(regs*)+0x41>
c0015698:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001569f:	75 24                	jne    c00156c5 <SysWsbe(regs*)+0x41>
c00156a1:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00156a8:	75 1b                	jne    c00156c5 <SysWsbe(regs*)+0x41>
c00156aa:	6a 01                	push   0x1
c00156ac:	6a 00                	push   0x0
c00156ae:	68 aa a7 00 c0       	push   0xc000a7aa
c00156b3:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c00156b9:	e8 1e 17 00 00       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c00156be:	83 c4 10             	add    esp,0x10
c00156c1:	31 c0                	xor    eax,eax
c00156c3:	eb 52                	jmp    c0015717 <SysWsbe(regs*)+0x93>
c00156c5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00156c9:	be 36 a8 02 c0       	mov    esi,0xc002a836
c00156ce:	b9 0b 00 00 00       	mov    ecx,0xb
c00156d3:	fc                   	cld    
c00156d4:	83 ec 0c             	sub    esp,0xc
c00156d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00156d9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00156dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156e5:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c00156eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00156ed:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00156f0:	57                   	push   edi
c00156f1:	e8 7a ae fe ff       	call   c0000570 <strlen>
c00156f6:	5a                   	pop    edx
c00156f7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00156fb:	52                   	push   edx
c00156fc:	31 d2                	xor    edx,edx
c00156fe:	57                   	push   edi
c00156ff:	52                   	push   edx
c0015700:	50                   	push   eax
c0015701:	56                   	push   esi
c0015702:	ff d5                	call   ebp
c0015704:	83 c4 14             	add    esp,0x14
c0015707:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001570a:	e8 99 21 00 00       	call   c00178a8 <KeTerminateCurrentThread(int)>
c001570f:	83 c4 10             	add    esp,0x10
c0015712:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015717:	83 c4 3c             	add    esp,0x3c
c001571a:	31 d2                	xor    edx,edx
c001571c:	5b                   	pop    ebx
c001571d:	5e                   	pop    esi
c001571e:	5f                   	pop    edi
c001571f:	5d                   	pop    ebp
c0015720:	c3                   	ret    

c0015721 <SysYield(regs*)>:
c0015721:	83 ec 0c             	sub    esp,0xc
c0015724:	fa                   	cli    
c0015725:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c001572b:	e8 78 19 00 00       	call   c00170a8 <schedule()>
c0015730:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0015737:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c001573e:	75 01                	jne    c0015741 <SysYield(regs*)+0x20>
c0015740:	fb                   	sti    
c0015741:	31 c0                	xor    eax,eax
c0015743:	31 d2                	xor    edx,edx
c0015745:	83 c4 0c             	add    esp,0xc
c0015748:	c3                   	ret    
c0015749:	66 90                	xchg   ax,ax
c001574b:	90                   	nop

c001574c <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c001574c:	55                   	push   ebp
c001574d:	57                   	push   edi
c001574e:	56                   	push   esi
c001574f:	53                   	push   ebx
c0015750:	83 ec 2c             	sub    esp,0x2c
c0015753:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015757:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001575b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001575f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015763:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015767:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c001576a:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c001576e:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015772:	c1 e0 08             	shl    eax,0x8
c0015775:	09 c1                	or     ecx,eax
c0015777:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001577b:	c1 e0 10             	shl    eax,0x10
c001577e:	09 c1                	or     ecx,eax
c0015780:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015784:	83 e0 7f             	and    eax,0x7f
c0015787:	c1 e0 18             	shl    eax,0x18
c001578a:	09 c8                	or     eax,ecx
c001578c:	89 c5                	mov    ebp,eax
c001578e:	89 f8                	mov    eax,edi
c0015790:	80 f4 00             	xor    ah,0x0
c0015793:	89 c3                	mov    ebx,eax
c0015795:	89 e8                	mov    eax,ebp
c0015797:	80 f4 00             	xor    ah,0x0
c001579a:	89 c6                	mov    esi,eax
c001579c:	89 f0                	mov    eax,esi
c001579e:	09 d8                	or     eax,ebx
c00157a0:	74 42                	je     c00157e4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c00157a2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00157a6:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c00157a9:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c00157ad:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00157b1:	c1 e0 08             	shl    eax,0x8
c00157b4:	09 c6                	or     esi,eax
c00157b6:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00157ba:	c1 e0 10             	shl    eax,0x10
c00157bd:	09 c6                	or     esi,eax
c00157bf:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00157c3:	83 e0 7f             	and    eax,0x7f
c00157c6:	c1 e0 18             	shl    eax,0x18
c00157c9:	09 f0                	or     eax,esi
c00157cb:	89 c3                	mov    ebx,eax
c00157cd:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c00157d2:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c00157d8:	29 c1                	sub    ecx,eax
c00157da:	19 d3                	sbb    ebx,edx
c00157dc:	89 c8                	mov    eax,ecx
c00157de:	89 da                	mov    edx,ebx
c00157e0:	eb 0e                	jmp    c00157f0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c00157e2:	66 90                	xchg   ax,ax
c00157e4:	b8 00 00 00 00       	mov    eax,0x0
c00157e9:	ba 00 00 00 00       	mov    edx,0x0
c00157ee:	66 90                	xchg   ax,ax
c00157f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00157f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00157f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157fc:	80 f4 00             	xor    ah,0x0
c00157ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015807:	80 f4 00             	xor    ah,0x0
c001580a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001580e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015812:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0015816:	89 e8                	mov    eax,ebp
c0015818:	09 f8                	or     eax,edi
c001581a:	74 30                	je     c001584c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c001581c:	8b 0d 50 2b 03 c0    	mov    ecx,DWORD PTR ds:0xc0032b50
c0015822:	8b 1d 54 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b54
c0015828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001582c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015830:	01 c8                	add    eax,ecx
c0015832:	11 da                	adc    edx,ebx
c0015834:	89 c6                	mov    esi,eax
c0015836:	83 e6 ff             	and    esi,0xffffffff
c0015839:	89 34 24             	mov    DWORD PTR [esp],esi
c001583c:	89 d0                	mov    eax,edx
c001583e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015843:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015847:	eb 13                	jmp    c001585c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0015849:	8d 76 00             	lea    esi,[esi+0x0]
c001584c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015853:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001585b:	90                   	nop
c001585c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015860:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015863:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015867:	89 cf                	mov    edi,ecx
c0015869:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c001586c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001586f:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015873:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015878:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c001587b:	83 e1 00             	and    ecx,0x0
c001587e:	09 ca                	or     edx,ecx
c0015880:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015883:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015887:	c1 ea 08             	shr    edx,0x8
c001588a:	0f b6 d2             	movzx  edx,dl
c001588d:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015890:	83 e1 00             	and    ecx,0x0
c0015893:	09 ca                	or     edx,ecx
c0015895:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001589c:	c1 ea 10             	shr    edx,0x10
c001589f:	0f b6 d2             	movzx  edx,dl
c00158a2:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c00158a5:	83 e1 00             	and    ecx,0x0
c00158a8:	09 ca                	or     edx,ecx
c00158aa:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c00158ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00158b1:	c1 ea 18             	shr    edx,0x18
c00158b4:	83 e2 7f             	and    edx,0x7f
c00158b7:	89 d3                	mov    ebx,edx
c00158b9:	83 e3 7f             	and    ebx,0x7f
c00158bc:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c00158bf:	83 e2 80             	and    edx,0xffffff80
c00158c2:	88 d1                	mov    cl,dl
c00158c4:	88 da                	mov    dl,bl
c00158c6:	09 ca                	or     edx,ecx
c00158c8:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c00158cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158d3:	83 c4 2c             	add    esp,0x2c
c00158d6:	5b                   	pop    ebx
c00158d7:	5e                   	pop    esi
c00158d8:	5f                   	pop    edi
c00158d9:	5d                   	pop    ebp
c00158da:	c3                   	ret    
c00158db:	90                   	nop

c00158dc <KeCheckAlarm(ThreadControlBlock*)>:
c00158dc:	55                   	push   ebp
c00158dd:	57                   	push   edi
c00158de:	56                   	push   esi
c00158df:	53                   	push   ebx
c00158e0:	83 ec 0c             	sub    esp,0xc
c00158e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158e7:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c00158ea:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c00158ee:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c00158f2:	c1 e5 08             	shl    ebp,0x8
c00158f5:	09 fd                	or     ebp,edi
c00158f7:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c00158fb:	c1 e7 10             	shl    edi,0x10
c00158fe:	09 ef                	or     edi,ebp
c0015900:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015904:	83 e0 7f             	and    eax,0x7f
c0015907:	c1 e0 18             	shl    eax,0x18
c001590a:	09 f8                	or     eax,edi
c001590c:	89 c1                	mov    ecx,eax
c001590e:	89 d0                	mov    eax,edx
c0015910:	80 f4 00             	xor    ah,0x0
c0015913:	89 c3                	mov    ebx,eax
c0015915:	89 c8                	mov    eax,ecx
c0015917:	80 f4 00             	xor    ah,0x0
c001591a:	89 c6                	mov    esi,eax
c001591c:	89 f0                	mov    eax,esi
c001591e:	09 d8                	or     eax,ebx
c0015920:	0f 84 9e 00 00 00    	je     c00159c4 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015926:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001592a:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c001592d:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c0015931:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c0015935:	c1 e6 08             	shl    esi,0x8
c0015938:	09 de                	or     esi,ebx
c001593a:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c001593e:	c1 e3 10             	shl    ebx,0x10
c0015941:	09 f3                	or     ebx,esi
c0015943:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c0015947:	83 e1 7f             	and    ecx,0x7f
c001594a:	c1 e1 18             	shl    ecx,0x18
c001594d:	09 d9                	or     ecx,ebx
c001594f:	89 ca                	mov    edx,ecx
c0015951:	89 c1                	mov    ecx,eax
c0015953:	89 d3                	mov    ebx,edx
c0015955:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c001595a:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c0015960:	39 c8                	cmp    eax,ecx
c0015962:	89 d0                	mov    eax,edx
c0015964:	19 d8                	sbb    eax,ebx
c0015966:	72 5c                	jb     c00159c4 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001596c:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015973:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015976:	83 e2 00             	and    edx,0x0
c0015979:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001597c:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c001597f:	83 e2 00             	and    edx,0x0
c0015982:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015985:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015988:	83 e2 00             	and    edx,0x0
c001598b:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001598e:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015991:	83 e2 80             	and    edx,0xffffff80
c0015994:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015997:	83 ec 0c             	sub    esp,0xc
c001599a:	68 62 a8 02 c0       	push   0xc002a862
c001599f:	e8 d8 15 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159ae:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c00159b4:	83 ec 08             	sub    esp,0x8
c00159b7:	6a 0e                	push   0xe
c00159b9:	50                   	push   eax
c00159ba:	e8 6c bd ff ff       	call   c001172b <KeRaiseSignal(SigHandlerBlock*, int)>
c00159bf:	83 c4 10             	add    esp,0x10
c00159c2:	66 90                	xchg   ax,ax
c00159c4:	90                   	nop
c00159c5:	83 c4 0c             	add    esp,0xc
c00159c8:	5b                   	pop    ebx
c00159c9:	5e                   	pop    esi
c00159ca:	5f                   	pop    edi
c00159cb:	5d                   	pop    ebp
c00159cc:	c3                   	ret    

c00159cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00159cd:	55                   	push   ebp
c00159ce:	57                   	push   edi
c00159cf:	56                   	push   esi
c00159d0:	53                   	push   ebx
c00159d1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00159d7:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00159df:	0f 95 c0             	setne  al
c00159e2:	31 d2                	xor    edx,edx
c00159e4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00159ec:	0f 94 c2             	sete   dl
c00159ef:	85 c2                	test   edx,eax
c00159f1:	74 34                	je     c0015a27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00159f3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00159fe:	74 27                	je     c0015a27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015a00:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015a07:	05 00 10 00 00       	add    eax,0x1000
c0015a0c:	89 c1                	mov    ecx,eax
c0015a0e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a13:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0015a19:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015a20:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0015a27:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015a37:	6a 01                	push   0x1
c0015a39:	e8 69 e0 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	89 c3                	mov    ebx,eax
c0015a43:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015a49:	0f 86 26 01 00 00    	jbe    c0015b75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015a4f:	c1 ee 0c             	shr    esi,0xc
c0015a52:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015a59:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015a5d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015a65:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015a6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a70:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015a77:	29 ef                	sub    edi,ebp
c0015a79:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015a7d:	0f 83 f9 00 00 00    	jae    c0015b7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015a83:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015a89:	76 05                	jbe    c0015a90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015a8b:	bf 00 10 00 00       	mov    edi,0x1000
c0015a90:	83 ec 0c             	sub    esp,0xc
c0015a93:	31 d2                	xor    edx,edx
c0015a95:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015a9c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015a9e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015aa2:	50                   	push   eax
c0015aa3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015aa7:	56                   	push   esi
c0015aa8:	52                   	push   edx
c0015aa9:	57                   	push   edi
c0015aaa:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015ab1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ab4:	83 c4 20             	add    esp,0x20
c0015ab7:	85 c0                	test   eax,eax
c0015ab9:	75 06                	jne    c0015ac1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015abb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015abf:	74 13                	je     c0015ad4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	53                   	push   ebx
c0015ac5:	e8 e5 e2 ff ff       	call   c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	31 c0                	xor    eax,eax
c0015acf:	e9 80 01 00 00       	jmp    c0015c54 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015ad4:	fa                   	cli    
c0015ad5:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0015adb:	e8 24 ac ff ff       	call   c0010704 <Phys::allocatePage()>
c0015ae0:	6a 07                	push   0x7
c0015ae2:	89 c7                	mov    edi,eax
c0015ae4:	53                   	push   ebx
c0015ae5:	50                   	push   eax
c0015ae6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aeb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015aee:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015af4:	e8 91 e6 ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015af9:	83 c4 0c             	add    esp,0xc
c0015afc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015b03:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b09:	6a 00                	push   0x0
c0015b0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b13:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b19:	e8 d8 e4 ff ff       	call   c0013ff6 <VAS::mapOtherVASIn(bool, VAS*)>
c0015b1e:	58                   	pop    eax
c0015b1f:	5a                   	pop    edx
c0015b20:	68 07 0c 00 00       	push   0xc07
c0015b25:	55                   	push   ebp
c0015b26:	57                   	push   edi
c0015b27:	89 df                	mov    edi,ebx
c0015b29:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015b30:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b36:	6a 00                	push   0x0
c0015b38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b40:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b46:	e8 81 e8 ff ff       	call   c00143cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015b4b:	b9 00 10 00 00       	mov    ecx,0x1000
c0015b50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015b52:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0015b59:	83 c4 20             	add    esp,0x20
c0015b5c:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0015b63:	75 01                	jne    c0015b66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0015b65:	fb                   	sti    
c0015b66:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015b6c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015b70:	e9 f0 fe ff ff       	jmp    c0015a65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0015b75:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015b7c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015b83:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015b89:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015b8f:	0f 86 b1 00 00 00    	jbe    c0015c46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015b95:	fa                   	cli    
c0015b96:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0015b9c:	c1 ee 0c             	shr    esi,0xc
c0015b9f:	51                   	push   ecx
c0015ba0:	31 ff                	xor    edi,edi
c0015ba2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015ba9:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015baf:	6a 00                	push   0x0
c0015bb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015bb9:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015bbf:	e8 32 e4 ff ff       	call   c0013ff6 <VAS::mapOtherVASIn(bool, VAS*)>
c0015bc4:	83 c4 10             	add    esp,0x10
c0015bc7:	e8 38 ab ff ff       	call   c0010704 <Phys::allocatePage()>
c0015bcc:	47                   	inc    edi
c0015bcd:	6a 07                	push   0x7
c0015bcf:	53                   	push   ebx
c0015bd0:	50                   	push   eax
c0015bd1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015bd5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015bdb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015bde:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015be4:	e8 a1 e5 ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015be9:	58                   	pop    eax
c0015bea:	5a                   	pop    edx
c0015beb:	68 07 0c 00 00       	push   0xc07
c0015bf0:	55                   	push   ebp
c0015bf1:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015bf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bfb:	50                   	push   eax
c0015bfc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015c03:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015c09:	6a 00                	push   0x0
c0015c0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c13:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015c19:	e8 ae e7 ff ff       	call   c00143cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015c1e:	83 c4 1c             	add    esp,0x1c
c0015c21:	68 00 10 00 00       	push   0x1000
c0015c26:	6a 00                	push   0x0
c0015c28:	53                   	push   ebx
c0015c29:	e8 c2 a8 fe ff       	call   c00004f0 <memset>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	39 fe                	cmp    esi,edi
c0015c33:	77 92                	ja     c0015bc7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0015c35:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0015c3c:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0015c43:	75 01                	jne    c0015c46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015c45:	fb                   	sti    
c0015c46:	83 ec 0c             	sub    esp,0xc
c0015c49:	53                   	push   ebx
c0015c4a:	e8 60 e1 ff ff       	call   c0013daf <Virt::freeKernelVirtualPages(unsigned long)>
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	b0 01                	mov    al,0x1
c0015c54:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015c5a:	5b                   	pop    ebx
c0015c5b:	5e                   	pop    esi
c0015c5c:	5f                   	pop    edi
c0015c5d:	5d                   	pop    ebp
c0015c5e:	c3                   	ret    

c0015c5f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015c5f:	55                   	push   ebp
c0015c60:	57                   	push   edi
c0015c61:	56                   	push   esi
c0015c62:	53                   	push   ebx
c0015c63:	83 ec 68             	sub    esp,0x68
c0015c66:	68 14 01 00 00       	push   0x114
c0015c6b:	e8 4b a4 ff ff       	call   c00100bb <malloc>
c0015c70:	83 c4 0c             	add    esp,0xc
c0015c73:	89 c6                	mov    esi,eax
c0015c75:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015c79:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015c7d:	50                   	push   eax
c0015c7e:	e8 53 2d ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c0015c83:	5b                   	pop    ebx
c0015c84:	5f                   	pop    edi
c0015c85:	6a 01                	push   0x1
c0015c87:	56                   	push   esi
c0015c88:	e8 67 2d ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c0015c8d:	83 c4 10             	add    esp,0x10
c0015c90:	85 c0                	test   eax,eax
c0015c92:	0f 85 c6 01 00 00    	jne    c0015e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015c98:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	6a 34                	push   0x34
c0015ca5:	e8 11 a4 ff ff       	call   c00100bb <malloc>
c0015caa:	59                   	pop    ecx
c0015cab:	89 c3                	mov    ebx,eax
c0015cad:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015cb1:	8b 06                	mov    eax,DWORD PTR [esi]
c0015cb3:	57                   	push   edi
c0015cb4:	53                   	push   ebx
c0015cb5:	6a 00                	push   0x0
c0015cb7:	6a 34                	push   0x34
c0015cb9:	56                   	push   esi
c0015cba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015cbd:	83 c4 20             	add    esp,0x20
c0015cc0:	85 c0                	test   eax,eax
c0015cc2:	0f 85 96 01 00 00    	jne    c0015e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015cc8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015cce:	0f 85 8a 01 00 00    	jne    c0015e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015cd4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015cd7:	85 c0                	test   eax,eax
c0015cd9:	0f 84 7f 01 00 00    	je     c0015e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015cdf:	52                   	push   edx
c0015ce0:	31 d2                	xor    edx,edx
c0015ce2:	52                   	push   edx
c0015ce3:	50                   	push   eax
c0015ce4:	56                   	push   esi
c0015ce5:	e8 c8 2d ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0015cea:	83 c4 10             	add    esp,0x10
c0015ced:	85 c0                	test   eax,eax
c0015cef:	0f 85 69 01 00 00    	jne    c0015e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015cf5:	83 ec 0c             	sub    esp,0xc
c0015cf8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015cfb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015cff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015d03:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015d07:	0f af c2             	imul   eax,edx
c0015d0a:	50                   	push   eax
c0015d0b:	e8 ab a3 ff ff       	call   c00100bb <malloc>
c0015d10:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015d12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015d16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015d19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d1d:	31 ff                	xor    edi,edi
c0015d1f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015d23:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015d27:	0f af c2             	imul   eax,edx
c0015d2a:	99                   	cdq    
c0015d2b:	52                   	push   edx
c0015d2c:	50                   	push   eax
c0015d2d:	56                   	push   esi
c0015d2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d31:	83 c4 20             	add    esp,0x20
c0015d34:	0f b7 c7             	movzx  eax,di
c0015d37:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c0015d3b:	73 71                	jae    c0015dae <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c0015d3d:	6b c0 28             	imul   eax,eax,0x28
c0015d40:	55                   	push   ebp
c0015d41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d45:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c0015d49:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015d4c:	6b d2 28             	imul   edx,edx,0x28
c0015d4f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015d53:	31 d2                	xor    edx,edx
c0015d55:	52                   	push   edx
c0015d56:	50                   	push   eax
c0015d57:	56                   	push   esi
c0015d58:	e8 55 2d ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0015d5d:	83 c4 0c             	add    esp,0xc
c0015d60:	6a 20                	push   0x20
c0015d62:	6a 00                	push   0x0
c0015d64:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015d68:	55                   	push   ebp
c0015d69:	e8 82 a7 fe ff       	call   c00004f0 <memset>
c0015d6e:	58                   	pop    eax
c0015d6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d71:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015d75:	52                   	push   edx
c0015d76:	55                   	push   ebp
c0015d77:	6a 00                	push   0x0
c0015d79:	6a 1f                	push   0x1f
c0015d7b:	56                   	push   esi
c0015d7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d7f:	83 c4 18             	add    esp,0x18
c0015d82:	55                   	push   ebp
c0015d83:	68 73 a8 02 c0       	push   0xc002a873
c0015d88:	e8 c3 a9 fe ff       	call   c0000750 <strcmp>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	85 c0                	test   eax,eax
c0015d92:	75 17                	jne    c0015dab <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015d94:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015d98:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015d9c:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015da2:	83 c8 80             	or     eax,0xffffff80
c0015da5:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015dab:	47                   	inc    edi
c0015dac:	eb 86                	jmp    c0015d34 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015dae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015db1:	85 c0                	test   eax,eax
c0015db3:	0f 84 a5 00 00 00    	je     c0015e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015db9:	31 d2                	xor    edx,edx
c0015dbb:	57                   	push   edi
c0015dbc:	52                   	push   edx
c0015dbd:	50                   	push   eax
c0015dbe:	56                   	push   esi
c0015dbf:	e8 ee 2c ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0015dc4:	83 c4 10             	add    esp,0x10
c0015dc7:	85 c0                	test   eax,eax
c0015dc9:	0f 85 8f 00 00 00    	jne    c0015e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015dcf:	83 ec 0c             	sub    esp,0xc
c0015dd2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015dd6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015dda:	31 ed                	xor    ebp,ebp
c0015ddc:	0f af c2             	imul   eax,edx
c0015ddf:	50                   	push   eax
c0015de0:	e8 d6 a2 ff ff       	call   c00100bb <malloc>
c0015de5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015de9:	59                   	pop    ecx
c0015dea:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015dec:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015df0:	50                   	push   eax
c0015df1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015df5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015df9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015dfd:	0f af c2             	imul   eax,edx
c0015e00:	99                   	cdq    
c0015e01:	52                   	push   edx
c0015e02:	50                   	push   eax
c0015e03:	56                   	push   esi
c0015e04:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e07:	83 c4 20             	add    esp,0x20
c0015e0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015e12:	0f b7 fd             	movzx  edi,bp
c0015e15:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0015e19:	0f 83 80 00 00 00    	jae    c0015e9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c0015e1f:	c1 e7 05             	shl    edi,0x5
c0015e22:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c0015e26:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015e29:	75 6e                	jne    c0015e99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015e2b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015e2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e32:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015e35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015e39:	52                   	push   edx
c0015e3a:	31 d2                	xor    edx,edx
c0015e3c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015e3f:	52                   	push   edx
c0015e40:	50                   	push   eax
c0015e41:	56                   	push   esi
c0015e42:	e8 6b 2c ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	85 c0                	test   eax,eax
c0015e4c:	74 17                	je     c0015e65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c0015e4e:	83 ec 0c             	sub    esp,0xc
c0015e51:	68 82 a8 02 c0       	push   0xc002a882
c0015e56:	e8 21 11 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	31 c0                	xor    eax,eax
c0015e60:	e9 8a 00 00 00       	jmp    c0015eef <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c0015e65:	83 ec 0c             	sub    esp,0xc
c0015e68:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015e6b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015e6e:	50                   	push   eax
c0015e6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e77:	56                   	push   esi
c0015e78:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015e7f:	e8 49 fb ff ff       	call   c00159cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015e84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e88:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015e8c:	83 c4 20             	add    esp,0x20
c0015e8f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015e93:	73 04                	jae    c0015e99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e99:	45                   	inc    ebp
c0015e9a:	e9 73 ff ff ff       	jmp    c0015e12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015e9f:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015ea3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015eab:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015eb1:	83 ec 0c             	sub    esp,0xc
c0015eb4:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015eba:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015ebf:	05 00 10 00 00       	add    eax,0x1000
c0015ec4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ec7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ecb:	e8 fb a1 ff ff       	call   c00100cb <free>
c0015ed0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ed3:	e8 f3 a1 ff ff       	call   c00100cb <free>
c0015ed8:	58                   	pop    eax
c0015ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015edd:	e8 e9 a1 ff ff       	call   c00100cb <free>
c0015ee2:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ee5:	e8 68 2b ff ff       	call   c0008a52 <File::close()>
c0015eea:	83 c4 10             	add    esp,0x10
c0015eed:	b0 01                	mov    al,0x1
c0015eef:	83 c4 5c             	add    esp,0x5c
c0015ef2:	5b                   	pop    ebx
c0015ef3:	5e                   	pop    esi
c0015ef4:	5f                   	pop    edi
c0015ef5:	5d                   	pop    ebp
c0015ef6:	c3                   	ret    

c0015ef7 <Thr::runtimeReferenceHelper()>:
c0015ef7:	83 ec 18             	sub    esp,0x18
c0015efa:	68 8a a8 02 c0       	push   0xc002a88a
c0015eff:	e8 78 10 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015f04:	fa                   	cli    
c0015f05:	83 c4 10             	add    esp,0x10
c0015f08:	eb fe                	jmp    c0015f08 <Thr::runtimeReferenceHelper()+0x11>

c0015f0a <Thr::getAddressOfKernelSymbol(char const*)>:
c0015f0a:	57                   	push   edi
c0015f0b:	56                   	push   esi
c0015f0c:	53                   	push   ebx
c0015f0d:	31 db                	xor    ebx,ebx
c0015f0f:	39 1d 00 33 03 c0    	cmp    DWORD PTR ds:0xc0033300,ebx
c0015f15:	7e 3c                	jle    c0015f53 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015f17:	8b 34 9d e0 32 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffccd20]
c0015f1e:	31 ff                	xor    edi,edi
c0015f20:	39 3c 9d a0 32 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffccd60],edi
c0015f27:	7e 27                	jle    c0015f50 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015f29:	50                   	push   eax
c0015f2a:	50                   	push   eax
c0015f2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f2f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015f31:	03 04 9d c0 32 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffccd40]
c0015f38:	50                   	push   eax
c0015f39:	e8 12 a8 fe ff       	call   c0000750 <strcmp>
c0015f3e:	83 c4 10             	add    esp,0x10
c0015f41:	85 c0                	test   eax,eax
c0015f43:	75 05                	jne    c0015f4a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015f45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015f48:	eb 0b                	jmp    c0015f55 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015f4a:	83 c6 10             	add    esi,0x10
c0015f4d:	47                   	inc    edi
c0015f4e:	eb d0                	jmp    c0015f20 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015f50:	43                   	inc    ebx
c0015f51:	eb bc                	jmp    c0015f0f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015f53:	31 c0                	xor    eax,eax
c0015f55:	5b                   	pop    ebx
c0015f56:	5e                   	pop    esi
c0015f57:	5f                   	pop    edi
c0015f58:	c3                   	ret    

c0015f59 <Thr::loadKernelSymbolTable(char const*)>:
c0015f59:	55                   	push   ebp
c0015f5a:	57                   	push   edi
c0015f5b:	56                   	push   esi
c0015f5c:	53                   	push   ebx
c0015f5d:	83 ec 68             	sub    esp,0x68
c0015f60:	8b 35 58 33 03 c0    	mov    esi,DWORD PTR ds:0xc0033358
c0015f66:	68 14 01 00 00       	push   0x114
c0015f6b:	e8 4b a1 ff ff       	call   c00100bb <malloc>
c0015f70:	83 c4 0c             	add    esp,0xc
c0015f73:	89 c3                	mov    ebx,eax
c0015f75:	56                   	push   esi
c0015f76:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015f7a:	50                   	push   eax
c0015f7b:	e8 56 2a ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c0015f80:	5e                   	pop    esi
c0015f81:	5f                   	pop    edi
c0015f82:	6a 01                	push   0x1
c0015f84:	53                   	push   ebx
c0015f85:	e8 6a 2a ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	85 c0                	test   eax,eax
c0015f8f:	74 0a                	je     c0015f9b <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015f91:	83 ec 0c             	sub    esp,0xc
c0015f94:	68 ac a8 02 c0       	push   0xc002a8ac
c0015f99:	eb 34                	jmp    c0015fcf <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015f9b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015fa3:	83 ec 0c             	sub    esp,0xc
c0015fa6:	6a 34                	push   0x34
c0015fa8:	e8 0e a1 ff ff       	call   c00100bb <malloc>
c0015fad:	59                   	pop    ecx
c0015fae:	89 c7                	mov    edi,eax
c0015fb0:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015fb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fb6:	56                   	push   esi
c0015fb7:	57                   	push   edi
c0015fb8:	6a 00                	push   0x0
c0015fba:	6a 34                	push   0x34
c0015fbc:	53                   	push   ebx
c0015fbd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fc0:	83 c4 20             	add    esp,0x20
c0015fc3:	85 c0                	test   eax,eax
c0015fc5:	74 17                	je     c0015fde <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015fc7:	83 ec 0c             	sub    esp,0xc
c0015fca:	68 c3 a8 02 c0       	push   0xc002a8c3
c0015fcf:	e8 3c a5 ff ff       	call   c0010510 <KePanic(char const*)>
c0015fd4:	83 c4 10             	add    esp,0x10
c0015fd7:	31 c0                	xor    eax,eax
c0015fd9:	e9 31 02 00 00       	jmp    c001620f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015fde:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015fe4:	75 e1                	jne    c0015fc7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015fe6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015fe9:	85 c0                	test   eax,eax
c0015feb:	74 da                	je     c0015fc7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015fed:	52                   	push   edx
c0015fee:	31 d2                	xor    edx,edx
c0015ff0:	52                   	push   edx
c0015ff1:	50                   	push   eax
c0015ff2:	53                   	push   ebx
c0015ff3:	e8 ba 2a ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0015ff8:	83 c4 10             	add    esp,0x10
c0015ffb:	85 c0                	test   eax,eax
c0015ffd:	75 c8                	jne    c0015fc7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015fff:	83 ec 0c             	sub    esp,0xc
c0016002:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016006:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001600a:	31 ed                	xor    ebp,ebp
c001600c:	0f af c2             	imul   eax,edx
c001600f:	50                   	push   eax
c0016010:	e8 a6 a0 ff ff       	call   c00100bb <malloc>
c0016015:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016017:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001601b:	89 34 24             	mov    DWORD PTR [esp],esi
c001601e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016022:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016026:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001602a:	0f af c2             	imul   eax,edx
c001602d:	99                   	cdq    
c001602e:	52                   	push   edx
c001602f:	50                   	push   eax
c0016030:	53                   	push   ebx
c0016031:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016034:	83 c4 20             	add    esp,0x20
c0016037:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001603f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016047:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001604f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016057:	0f b7 f5             	movzx  esi,bp
c001605a:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001605e:	0f 83 a7 00 00 00    	jae    c001610b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016064:	6b f6 28             	imul   esi,esi,0x28
c0016067:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001606b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001606e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016072:	50                   	push   eax
c0016073:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016077:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001607b:	8b 16                	mov    edx,DWORD PTR [esi]
c001607d:	6b c0 28             	imul   eax,eax,0x28
c0016080:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016084:	89 d0                	mov    eax,edx
c0016086:	31 d2                	xor    edx,edx
c0016088:	52                   	push   edx
c0016089:	50                   	push   eax
c001608a:	53                   	push   ebx
c001608b:	e8 22 2a ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0016090:	83 c4 0c             	add    esp,0xc
c0016093:	6a 20                	push   0x20
c0016095:	6a 00                	push   0x0
c0016097:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001609b:	52                   	push   edx
c001609c:	e8 4f a4 fe ff       	call   c00004f0 <memset>
c00160a1:	58                   	pop    eax
c00160a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160a4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00160a8:	51                   	push   ecx
c00160a9:	8d 54 24 40          	lea    edx,[esp+0x40]
c00160ad:	52                   	push   edx
c00160ae:	6a 00                	push   0x0
c00160b0:	6a 1f                	push   0x1f
c00160b2:	53                   	push   ebx
c00160b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00160b6:	83 c4 18             	add    esp,0x18
c00160b9:	68 da a8 02 c0       	push   0xc002a8da
c00160be:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00160c2:	52                   	push   edx
c00160c3:	e8 88 a6 fe ff       	call   c0000750 <strcmp>
c00160c8:	83 c4 10             	add    esp,0x10
c00160cb:	85 c0                	test   eax,eax
c00160cd:	75 0f                	jne    c00160de <Thr::loadKernelSymbolTable(char const*)+0x185>
c00160cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00160d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160de:	50                   	push   eax
c00160df:	50                   	push   eax
c00160e0:	68 e2 a8 02 c0       	push   0xc002a8e2
c00160e5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00160e9:	50                   	push   eax
c00160ea:	e8 61 a6 fe ff       	call   c0000750 <strcmp>
c00160ef:	83 c4 10             	add    esp,0x10
c00160f2:	85 c0                	test   eax,eax
c00160f4:	75 0f                	jne    c0016105 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00160f6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00160f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016101:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016105:	45                   	inc    ebp
c0016106:	e9 4c ff ff ff       	jmp    c0016057 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001610b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016110:	75 10                	jne    c0016122 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016112:	83 ec 0c             	sub    esp,0xc
c0016115:	68 ea a8 02 c0       	push   0xc002a8ea
c001611a:	e8 f1 a3 ff ff       	call   c0010510 <KePanic(char const*)>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016127:	75 10                	jne    c0016139 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016129:	83 ec 0c             	sub    esp,0xc
c001612c:	68 ea a8 02 c0       	push   0xc002a8ea
c0016131:	e8 da a3 ff ff       	call   c0010510 <KePanic(char const*)>
c0016136:	83 c4 10             	add    esp,0x10
c0016139:	31 d2                	xor    edx,edx
c001613b:	50                   	push   eax
c001613c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016140:	52                   	push   edx
c0016141:	50                   	push   eax
c0016142:	53                   	push   ebx
c0016143:	e8 6a 29 ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c0016148:	5a                   	pop    edx
c0016149:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001614d:	e8 69 9f ff ff       	call   c00100bb <malloc>
c0016152:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016156:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001615a:	31 c9                	xor    ecx,ecx
c001615c:	5e                   	pop    esi
c001615d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001615f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016163:	55                   	push   ebp
c0016164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016168:	51                   	push   ecx
c0016169:	52                   	push   edx
c001616a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001616e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016172:	53                   	push   ebx
c0016173:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016176:	83 c4 14             	add    esp,0x14
c0016179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001617d:	e8 39 9f ff ff       	call   c00100bb <malloc>
c0016182:	89 c6                	mov    esi,eax
c0016184:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016186:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016189:	56                   	push   esi
c001618a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001618e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016192:	51                   	push   ecx
c0016193:	52                   	push   edx
c0016194:	53                   	push   ebx
c0016195:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016198:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001619c:	8b 15 00 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033300
c00161a2:	83 c4 1c             	add    esp,0x1c
c00161a5:	c1 e8 04             	shr    eax,0x4
c00161a8:	89 04 95 a0 32 03 c0 	mov    DWORD PTR [edx*4-0x3ffccd60],eax
c00161af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00161b3:	31 d2                	xor    edx,edx
c00161b5:	52                   	push   edx
c00161b6:	50                   	push   eax
c00161b7:	53                   	push   ebx
c00161b8:	e8 f5 28 ff ff       	call   c0008ab2 <File::seek(unsigned long long)>
c00161bd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00161bf:	31 d2                	xor    edx,edx
c00161c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00161c4:	56                   	push   esi
c00161c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161c9:	52                   	push   edx
c00161ca:	50                   	push   eax
c00161cb:	53                   	push   ebx
c00161cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161cf:	83 c4 14             	add    esp,0x14
c00161d2:	53                   	push   ebx
c00161d3:	e8 7a 28 ff ff       	call   c0008a52 <File::close()>
c00161d8:	5d                   	pop    ebp
c00161d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00161dd:	e8 e9 9e ff ff       	call   c00100cb <free>
c00161e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00161e5:	e8 e1 9e ff ff       	call   c00100cb <free>
c00161ea:	a1 00 33 03 c0       	mov    eax,ds:0xc0033300
c00161ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00161f3:	8d 50 01             	lea    edx,[eax+0x1]
c00161f6:	89 0c 85 e0 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd20],ecx
c00161fd:	89 34 85 c0 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd40],esi
c0016204:	89 15 00 33 03 c0    	mov    DWORD PTR ds:0xc0033300,edx
c001620a:	83 c4 10             	add    esp,0x10
c001620d:	b0 01                	mov    al,0x1
c001620f:	83 c4 5c             	add    esp,0x5c
c0016212:	5b                   	pop    ebx
c0016213:	5e                   	pop    esi
c0016214:	5f                   	pop    edi
c0016215:	5d                   	pop    ebp
c0016216:	c3                   	ret    

c0016217 <KeIsELFValid(Elf32_Ehdr*)>:
c0016217:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001621b:	31 c0                	xor    eax,eax
c001621d:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c0016220:	75 13                	jne    c0016235 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016222:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c0016226:	75 0d                	jne    c0016235 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016228:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c001622c:	75 07                	jne    c0016235 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c001622e:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c0016232:	0f 94 c0             	sete   al
c0016235:	c3                   	ret    

c0016236 <KeGetELFSectionHeader(unsigned char*, int)>:
c0016236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001623a:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c001623f:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c0016242:	01 d0                	add    eax,edx
c0016244:	c3                   	ret    

c0016245 <KeGetELFProgramHeader(unsigned char*, int)>:
c0016245:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016249:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001624d:	c1 e0 05             	shl    eax,0x5
c0016250:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c0016253:	01 d0                	add    eax,edx
c0016255:	c3                   	ret    

c0016256 <KeLookupELFString(unsigned char*, int)>:
c0016256:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001625a:	31 c0                	xor    eax,eax
c001625c:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c0016260:	85 d2                	test   edx,edx
c0016262:	74 14                	je     c0016278 <KeLookupELFString(unsigned char*, int)+0x22>
c0016264:	52                   	push   edx
c0016265:	51                   	push   ecx
c0016266:	e8 cb ff ff ff       	call   c0016236 <KeGetELFSectionHeader(unsigned char*, int)>
c001626b:	5a                   	pop    edx
c001626c:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c001626f:	5a                   	pop    edx
c0016270:	89 c8                	mov    eax,ecx
c0016272:	74 04                	je     c0016278 <KeLookupELFString(unsigned char*, int)+0x22>
c0016274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016278:	c3                   	ret    

c0016279 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c0016279:	55                   	push   ebp
c001627a:	57                   	push   edi
c001627b:	56                   	push   esi
c001627c:	53                   	push   ebx
c001627d:	31 db                	xor    ebx,ebx
c001627f:	83 ec 1c             	sub    esp,0x1c
c0016282:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016286:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016289:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001628d:	89 c5                	mov    ebp,eax
c001628f:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c0016294:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016298:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001629c:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c00162a0:	39 d8                	cmp    eax,ebx
c00162a2:	0f 8e 81 00 00 00    	jle    c0016329 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xb0>
c00162a8:	53                   	push   ebx
c00162a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00162ad:	e8 93 ff ff ff       	call   c0016245 <KeGetELFProgramHeader(unsigned char*, int)>
c00162b2:	5a                   	pop    edx
c00162b3:	83 38 01             	cmp    DWORD PTR [eax],0x1
c00162b6:	59                   	pop    ecx
c00162b7:	75 6a                	jne    c0016323 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c00162b9:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00162bc:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00162bf:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c00162c2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00162c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00162c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00162ce:	75 22                	jne    c00162f2 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x79>
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	68 04 a9 02 c0       	push   0xc002a904
c00162d8:	e8 33 a2 ff ff       	call   c0010510 <KePanic(char const*)>
c00162dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162e1:	01 f2                	add    edx,esi
c00162e3:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00162e7:	83 c4 10             	add    esp,0x10
c00162ea:	39 d5                	cmp    ebp,edx
c00162ec:	73 35                	jae    c0016323 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c00162ee:	89 d5                	mov    ebp,edx
c00162f0:	eb 31                	jmp    c0016323 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c00162f2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00162f6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00162f9:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c00162fd:	01 f2                	add    edx,esi
c00162ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016303:	89 d7                	mov    edi,edx
c0016305:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0016308:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001630a:	50                   	push   eax
c001630b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001630f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016313:	50                   	push   eax
c0016314:	6a 00                	push   0x0
c0016316:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c001631a:	52                   	push   edx
c001631b:	e8 d0 a1 fe ff       	call   c00004f0 <memset>
c0016320:	83 c4 10             	add    esp,0x10
c0016323:	43                   	inc    ebx
c0016324:	e9 6f ff ff ff       	jmp    c0016298 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x1f>
c0016329:	83 c4 1c             	add    esp,0x1c
c001632c:	89 e8                	mov    eax,ebp
c001632e:	5b                   	pop    ebx
c001632f:	5e                   	pop    esi
c0016330:	5f                   	pop    edi
c0016331:	5d                   	pop    ebp
c0016332:	c3                   	ret    

c0016333 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c0016333:	57                   	push   edi
c0016334:	56                   	push   esi
c0016335:	53                   	push   ebx
c0016336:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001633a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001633e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016342:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016346:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016349:	85 db                	test   ebx,ebx
c001634b:	74 04                	je     c0016351 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c001634d:	85 c0                	test   eax,eax
c001634f:	75 05                	jne    c0016356 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c0016351:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0016354:	eb 5c                	jmp    c00163b2 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0016356:	50                   	push   eax
c0016357:	51                   	push   ecx
c0016358:	e8 d9 fe ff ff       	call   c0016236 <KeGetELFSectionHeader(unsigned char*, int)>
c001635d:	5f                   	pop    edi
c001635e:	89 c7                	mov    edi,eax
c0016360:	5a                   	pop    edx
c0016361:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016364:	31 d2                	xor    edx,edx
c0016366:	f7 77 24             	div    DWORD PTR [edi+0x24]
c0016369:	39 c3                	cmp    ebx,eax
c001636b:	73 e4                	jae    c0016351 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c001636d:	c1 e3 04             	shl    ebx,0x4
c0016370:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0016373:	01 cb                	add    ebx,ecx
c0016375:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0016379:	85 d2                	test   edx,edx
c001637b:	75 39                	jne    c00163b6 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c001637d:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0016380:	51                   	push   ecx
c0016381:	e8 b0 fe ff ff       	call   c0016236 <KeGetELFSectionHeader(unsigned char*, int)>
c0016386:	52                   	push   edx
c0016387:	03 0b                	add    ecx,DWORD PTR [ebx]
c0016389:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c001638c:	51                   	push   ecx
c001638d:	e8 78 fb ff ff       	call   c0015f0a <Thr::getAddressOfKernelSymbol(char const*)>
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	85 c0                	test   eax,eax
c0016397:	75 32                	jne    c00163cb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016399:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c001639d:	75 03                	jne    c00163a2 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c001639f:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	68 2d a9 02 c0       	push   0xc002a92d
c00163aa:	e8 cd 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	31 c0                	xor    eax,eax
c00163b4:	eb 15                	jmp    c00163cb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00163b6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00163b9:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c00163bf:	74 0a                	je     c00163cb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00163c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163c5:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00163c9:	01 d0                	add    eax,edx
c00163cb:	5b                   	pop    ebx
c00163cc:	5e                   	pop    esi
c00163cd:	5f                   	pop    edi
c00163ce:	c3                   	ret    

c00163cf <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c00163cf:	55                   	push   ebp
c00163d0:	57                   	push   edi
c00163d1:	56                   	push   esi
c00163d2:	53                   	push   ebx
c00163d3:	83 ec 1c             	sub    esp,0x1c
c00163d6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00163da:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00163de:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00163e2:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c00163e5:	8b 1e                	mov    ebx,DWORD PTR [esi]
c00163e7:	29 ef                	sub    edi,ebp
c00163e9:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00163ec:	01 fb                	add    ebx,edi
c00163ee:	c1 ea 08             	shr    edx,0x8
c00163f1:	74 2d                	je     c0016420 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c00163f3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00163f8:	50                   	push   eax
c00163f9:	50                   	push   eax
c00163fa:	55                   	push   ebp
c00163fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00163ff:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0016403:	50                   	push   eax
c0016404:	52                   	push   edx
c0016405:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016409:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001640c:	51                   	push   ecx
c001640d:	e8 21 ff ff ff       	call   c0016333 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c0016412:	83 c4 20             	add    esp,0x20
c0016415:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001641a:	74 06                	je     c0016422 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c001641c:	31 c0                	xor    eax,eax
c001641e:	eb 27                	jmp    c0016447 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0016420:	31 c0                	xor    eax,eax
c0016422:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c0016426:	83 fa 01             	cmp    edx,0x1
c0016429:	75 04                	jne    c001642f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c001642b:	01 03                	add    DWORD PTR [ebx],eax
c001642d:	eb 16                	jmp    c0016445 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c001642f:	83 fa 02             	cmp    edx,0x2
c0016432:	75 08                	jne    c001643c <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0016434:	03 03                	add    eax,DWORD PTR [ebx]
c0016436:	29 d8                	sub    eax,ebx
c0016438:	89 03                	mov    DWORD PTR [ebx],eax
c001643a:	eb 09                	jmp    c0016445 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c001643c:	31 c0                	xor    eax,eax
c001643e:	83 fa 08             	cmp    edx,0x8
c0016441:	75 04                	jne    c0016447 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0016443:	01 3b                	add    DWORD PTR [ebx],edi
c0016445:	b0 01                	mov    al,0x1
c0016447:	83 c4 1c             	add    esp,0x1c
c001644a:	5b                   	pop    ebx
c001644b:	5e                   	pop    esi
c001644c:	5f                   	pop    edi
c001644d:	5d                   	pop    ebp
c001644e:	c3                   	ret    

c001644f <KePerformRelocations(unsigned char*, unsigned long)>:
c001644f:	55                   	push   ebp
c0016450:	31 ed                	xor    ebp,ebp
c0016452:	57                   	push   edi
c0016453:	56                   	push   esi
c0016454:	53                   	push   ebx
c0016455:	83 ec 1c             	sub    esp,0x1c
c0016458:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001645c:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0016460:	39 e8                	cmp    eax,ebp
c0016462:	0f 8e 92 00 00 00    	jle    c00164fa <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c0016468:	55                   	push   ebp
c0016469:	56                   	push   esi
c001646a:	e8 c7 fd ff ff       	call   c0016236 <KeGetELFSectionHeader(unsigned char*, int)>
c001646f:	5a                   	pop    edx
c0016470:	89 c3                	mov    ebx,eax
c0016472:	59                   	pop    ecx
c0016473:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016476:	83 f8 09             	cmp    eax,0x9
c0016479:	75 64                	jne    c00164df <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c001647b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001647e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0016481:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016485:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016488:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001648c:	ff 33                	push   DWORD PTR [ebx]
c001648e:	56                   	push   esi
c001648f:	e8 c2 fd ff ff       	call   c0016256 <KeLookupELFString(unsigned char*, int)>
c0016494:	68 4e a9 02 c0       	push   0xc002a94e
c0016499:	50                   	push   eax
c001649a:	e8 b1 a2 fe ff       	call   c0000750 <strcmp>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	89 c1                	mov    ecx,eax
c00164a4:	85 c0                	test   eax,eax
c00164a6:	75 4c                	jne    c00164f4 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00164a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164ac:	31 d2                	xor    edx,edx
c00164ae:	01 f7                	add    edi,esi
c00164b0:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00164b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164b8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c00164bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164c0:	7d 32                	jge    c00164f4 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00164c2:	57                   	push   edi
c00164c3:	83 c7 08             	add    edi,0x8
c00164c6:	53                   	push   ebx
c00164c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00164cb:	56                   	push   esi
c00164cc:	e8 fe fe ff ff       	call   c00163cf <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c00164d1:	83 c4 10             	add    esp,0x10
c00164d4:	84 c0                	test   al,al
c00164d6:	74 24                	je     c00164fc <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c00164d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164dc:	41                   	inc    ecx
c00164dd:	eb d9                	jmp    c00164b8 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c00164df:	83 f8 04             	cmp    eax,0x4
c00164e2:	75 10                	jne    c00164f4 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	68 57 a9 02 c0       	push   0xc002a957
c00164ec:	e8 1f a0 ff ff       	call   c0010510 <KePanic(char const*)>
c00164f1:	83 c4 10             	add    esp,0x10
c00164f4:	45                   	inc    ebp
c00164f5:	e9 62 ff ff ff       	jmp    c001645c <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c00164fa:	b0 01                	mov    al,0x1
c00164fc:	83 c4 1c             	add    esp,0x1c
c00164ff:	5b                   	pop    ebx
c0016500:	5e                   	pop    esi
c0016501:	5f                   	pop    edi
c0016502:	5d                   	pop    ebp
c0016503:	c3                   	ret    

c0016504 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0016504:	57                   	push   edi
c0016505:	56                   	push   esi
c0016506:	53                   	push   ebx
c0016507:	83 ec 10             	sub    esp,0x10
c001650a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001650e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016512:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016516:	53                   	push   ebx
c0016517:	e8 fb fc ff ff       	call   c0016217 <KeIsELFValid(Elf32_Ehdr*)>
c001651c:	59                   	pop    ecx
c001651d:	84 c0                	test   al,al
c001651f:	75 04                	jne    c0016525 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0016521:	31 c0                	xor    eax,eax
c0016523:	eb 4d                	jmp    c0016572 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016525:	81 e6 ff 00 00 00    	and    esi,0xff
c001652b:	74 07                	je     c0016534 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c001652d:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0016532:	74 ed                	je     c0016521 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016534:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0016539:	74 e6                	je     c0016521 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c001653b:	52                   	push   edx
c001653c:	57                   	push   edi
c001653d:	56                   	push   esi
c001653e:	53                   	push   ebx
c001653f:	e8 35 fd ff ff       	call   c0016279 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0016544:	59                   	pop    ecx
c0016545:	5a                   	pop    edx
c0016546:	50                   	push   eax
c0016547:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001654b:	68 78 a9 02 c0       	push   0xc002a978
c0016550:	e8 27 0a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016555:	83 c4 10             	add    esp,0x10
c0016558:	85 f6                	test   esi,esi
c001655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001655e:	74 12                	je     c0016572 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016560:	50                   	push   eax
c0016561:	50                   	push   eax
c0016562:	57                   	push   edi
c0016563:	53                   	push   ebx
c0016564:	e8 e6 fe ff ff       	call   c001644f <KePerformRelocations(unsigned char*, unsigned long)>
c0016569:	83 c4 10             	add    esp,0x10
c001656c:	84 c0                	test   al,al
c001656e:	74 b1                	je     c0016521 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016570:	89 f8                	mov    eax,edi
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	5b                   	pop    ebx
c0016576:	5e                   	pop    esi
c0016577:	5f                   	pop    edi
c0016578:	c3                   	ret    

c0016579 <KeLoadDriver(char const*)>:
c0016579:	57                   	push   edi
c001657a:	56                   	push   esi
c001657b:	53                   	push   ebx
c001657c:	83 ec 28             	sub    esp,0x28
c001657f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016583:	57                   	push   edi
c0016584:	68 9c a9 02 c0       	push   0xc002a99c
c0016589:	e8 ee 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001658e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016595:	e8 21 9b ff ff       	call   c00100bb <malloc>
c001659a:	83 c4 0c             	add    esp,0xc
c001659d:	89 c3                	mov    ebx,eax
c001659f:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c00165a5:	57                   	push   edi
c00165a6:	50                   	push   eax
c00165a7:	e8 2a 24 ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c00165ac:	83 c4 10             	add    esp,0x10
c00165af:	85 db                	test   ebx,ebx
c00165b1:	0f 84 20 01 00 00    	je     c00166d7 <KeLoadDriver(char const*)+0x15e>
c00165b7:	50                   	push   eax
c00165b8:	8d 44 24 17          	lea    eax,[esp+0x17]
c00165bc:	50                   	push   eax
c00165bd:	8d 44 24 20          	lea    eax,[esp+0x20]
c00165c1:	50                   	push   eax
c00165c2:	53                   	push   ebx
c00165c3:	e8 2e 27 ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c00165c8:	83 c4 10             	add    esp,0x10
c00165cb:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00165d0:	0f 85 01 01 00 00    	jne    c00166d7 <KeLoadDriver(char const*)+0x15e>
c00165d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00165de:	89 d1                	mov    ecx,edx
c00165e0:	09 c1                	or     ecx,eax
c00165e2:	0f 84 ef 00 00 00    	je     c00166d7 <KeLoadDriver(char const*)+0x15e>
c00165e8:	05 ff 0f 00 00       	add    eax,0xfff
c00165ed:	83 d2 00             	adc    edx,0x0
c00165f0:	51                   	push   ecx
c00165f1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00165f5:	6a 03                	push   0x3
c00165f7:	50                   	push   eax
c00165f8:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00165fe:	e8 8b dc ff ff       	call   c001428e <VAS::allocatePages(int, int)>
c0016603:	83 c4 0c             	add    esp,0xc
c0016606:	89 c6                	mov    esi,eax
c0016608:	50                   	push   eax
c0016609:	57                   	push   edi
c001660a:	68 b2 a9 02 c0       	push   0xc002a9b2
c001660f:	e8 68 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016614:	5f                   	pop    edi
c0016615:	58                   	pop    eax
c0016616:	6a 01                	push   0x1
c0016618:	53                   	push   ebx
c0016619:	e8 d6 23 ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c001661e:	83 c4 10             	add    esp,0x10
c0016621:	85 c0                	test   eax,eax
c0016623:	74 11                	je     c0016636 <KeLoadDriver(char const*)+0xbd>
c0016625:	83 ec 0c             	sub    esp,0xc
c0016628:	8b 03                	mov    eax,DWORD PTR [ebx]
c001662a:	53                   	push   ebx
c001662b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001662e:	83 c4 10             	add    esp,0x10
c0016631:	e9 a1 00 00 00       	jmp    c00166d7 <KeLoadDriver(char const*)+0x15e>
c0016636:	83 ec 0c             	sub    esp,0xc
c0016639:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001663d:	e8 79 9a ff ff       	call   c00100bb <malloc>
c0016642:	5a                   	pop    edx
c0016643:	89 c7                	mov    edi,eax
c0016645:	8d 54 24 20          	lea    edx,[esp+0x20]
c0016649:	8b 03                	mov    eax,DWORD PTR [ebx]
c001664b:	52                   	push   edx
c001664c:	57                   	push   edi
c001664d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016651:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016655:	53                   	push   ebx
c0016656:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016659:	83 c4 14             	add    esp,0x14
c001665c:	53                   	push   ebx
c001665d:	31 db                	xor    ebx,ebx
c001665f:	e8 ee 23 ff ff       	call   c0008a52 <File::close()>
c0016664:	83 c4 0c             	add    esp,0xc
c0016667:	56                   	push   esi
c0016668:	6a 01                	push   0x1
c001666a:	57                   	push   edi
c001666b:	e8 94 fe ff ff       	call   c0016504 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0016670:	83 c4 10             	add    esp,0x10
c0016673:	89 c7                	mov    edi,eax
c0016675:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016679:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001667d:	05 ff 0f 00 00       	add    eax,0xfff
c0016682:	83 d2 00             	adc    edx,0x0
c0016685:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016689:	c1 ea 0c             	shr    edx,0xc
c001668c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016694:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0016698:	ba 00 00 00 00       	mov    edx,0x0
c001669d:	89 d0                	mov    eax,edx
c001669f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00166a3:	73 34                	jae    c00166d9 <KeLoadDriver(char const*)+0x160>
c00166a5:	50                   	push   eax
c00166a6:	50                   	push   eax
c00166a7:	89 d8                	mov    eax,ebx
c00166a9:	c1 e0 0c             	shl    eax,0xc
c00166ac:	01 f0                	add    eax,esi
c00166ae:	50                   	push   eax
c00166af:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00166b5:	e8 d6 d6 ff ff       	call   c0013d90 <VAS::getPageTableEntry(unsigned long)>
c00166ba:	83 c4 10             	add    esp,0x10
c00166bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00166bf:	a8 60                	test   al,0x60
c00166c1:	75 11                	jne    c00166d4 <KeLoadDriver(char const*)+0x15b>
c00166c3:	83 ec 0c             	sub    esp,0xc
c00166c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00166cb:	50                   	push   eax
c00166cc:	e8 ca 9f ff ff       	call   c001069b <Phys::freePage(unsigned long)>
c00166d1:	83 c4 10             	add    esp,0x10
c00166d4:	43                   	inc    ebx
c00166d5:	eb 9e                	jmp    c0016675 <KeLoadDriver(char const*)+0xfc>
c00166d7:	31 ff                	xor    edi,edi
c00166d9:	83 c4 20             	add    esp,0x20
c00166dc:	89 f8                	mov    eax,edi
c00166de:	5b                   	pop    ebx
c00166df:	5e                   	pop    esi
c00166e0:	5f                   	pop    edi
c00166e1:	c3                   	ret    

c00166e2 <KeExecuteDriver(unsigned long, void*)>:
c00166e2:	56                   	push   esi
c00166e3:	53                   	push   ebx
c00166e4:	51                   	push   ecx
c00166e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00166ed:	85 db                	test   ebx,ebx
c00166ef:	75 10                	jne    c0016701 <KeExecuteDriver(unsigned long, void*)+0x1f>
c00166f1:	83 ec 0c             	sub    esp,0xc
c00166f4:	68 be a9 02 c0       	push   0xc002a9be
c00166f9:	e8 12 9e ff ff       	call   c0010510 <KePanic(char const*)>
c00166fe:	83 c4 10             	add    esp,0x10
c0016701:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0016705:	89 d8                	mov    eax,ebx
c0016707:	5a                   	pop    edx
c0016708:	5b                   	pop    ebx
c0016709:	5e                   	pop    esi
c001670a:	ff e0                	jmp    eax

c001670c <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c001670c:	57                   	push   edi
c001670d:	56                   	push   esi
c001670e:	53                   	push   ebx
c001670f:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0016715:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c001671c:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0016723:	56                   	push   esi
c0016724:	e8 50 fe ff ff       	call   c0016579 <KeLoadDriver(char const*)>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	85 c0                	test   eax,eax
c001672e:	74 16                	je     c0016746 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0016730:	53                   	push   ebx
c0016731:	53                   	push   ebx
c0016732:	b3 01                	mov    bl,0x1
c0016734:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001673b:	50                   	push   eax
c001673c:	e8 a1 ff ff ff       	call   c00166e2 <KeExecuteDriver(unsigned long, void*)>
c0016741:	83 c4 10             	add    esp,0x10
c0016744:	eb 2d                	jmp    c0016773 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016746:	89 fb                	mov    ebx,edi
c0016748:	84 db                	test   bl,bl
c001674a:	74 27                	je     c0016773 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c001674c:	50                   	push   eax
c001674d:	50                   	push   eax
c001674e:	68 e8 a9 02 c0       	push   0xc002a9e8
c0016753:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016757:	53                   	push   ebx
c0016758:	e8 e3 9e fe ff       	call   c0000640 <strcpy>
c001675d:	5a                   	pop    edx
c001675e:	59                   	pop    ecx
c001675f:	56                   	push   esi
c0016760:	53                   	push   ebx
c0016761:	e8 da a0 fe ff       	call   c0000840 <strcat>
c0016766:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016769:	e8 a2 9d ff ff       	call   c0010510 <KePanic(char const*)>
c001676e:	31 db                	xor    ebx,ebx
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	81 c4 00 01 00 00    	add    esp,0x100
c0016779:	88 d8                	mov    al,bl
c001677b:	5b                   	pop    ebx
c001677c:	5e                   	pop    esi
c001677d:	5f                   	pop    edi
c001677e:	c3                   	ret    

c001677f <KeProcessExec(Process*, char const*)>:
c001677f:	56                   	push   esi
c0016780:	53                   	push   ebx
c0016781:	83 ec 04             	sub    esp,0x4
c0016784:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016788:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c001678e:	85 f6                	test   esi,esi
c0016790:	74 16                	je     c00167a8 <KeProcessExec(Process*, char const*)+0x29>
c0016792:	83 ec 0c             	sub    esp,0xc
c0016795:	56                   	push   esi
c0016796:	e8 87 d8 ff ff       	call   c0014022 <VAS::~VAS()>
c001679b:	58                   	pop    eax
c001679c:	5a                   	pop    edx
c001679d:	6a 14                	push   0x14
c001679f:	56                   	push   esi
c00167a0:	e8 23 74 ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	6a 14                	push   0x14
c00167ad:	e8 09 99 ff ff       	call   c00100bb <malloc>
c00167b2:	89 c6                	mov    esi,eax
c00167b4:	58                   	pop    eax
c00167b5:	5a                   	pop    edx
c00167b6:	6a 00                	push   0x0
c00167b8:	56                   	push   esi
c00167b9:	e8 04 dd ff ff       	call   c00144c2 <VAS::VAS(bool)>
c00167be:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c00167c4:	59                   	pop    ecx
c00167c5:	5e                   	pop    esi
c00167c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ca:	50                   	push   eax
c00167cb:	53                   	push   ebx
c00167cc:	e8 8e f4 ff ff       	call   c0015c5f <Thr::loadProgramIntoMemory(Process*, char const*)>
c00167d1:	83 c4 14             	add    esp,0x14
c00167d4:	31 c0                	xor    eax,eax
c00167d6:	5b                   	pop    ebx
c00167d7:	5e                   	pop    esi
c00167d8:	c3                   	ret    
c00167d9:	66 90                	xchg   ax,ax
c00167db:	90                   	nop

c00167dc <userModeEntryPoint(void*)>:
c00167dc:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00167e4:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00167e9:	85 c0                	test   eax,eax
c00167eb:	75 03                	jne    c00167f0 <userModeEntryPoint(void*)+0x14>
c00167ed:	fb                   	sti    
c00167ee:	66 90                	xchg   ax,ax
c00167f0:	fb                   	sti    
c00167f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167f9:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00167ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016803:	e9 37 9a fe ff       	jmp    c000023f <goToUsermode>

c0016808 <changeTSS>:
c0016808:	83 ec 14             	sub    esp,0x14
c001680b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016810:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016813:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016818:	c1 e2 15             	shl    edx,0x15
c001681b:	29 d0                	sub    eax,edx
c001681d:	50                   	push   eax
c001681e:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0016823:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016829:	05 68 11 00 00       	add    eax,0x1168
c001682e:	50                   	push   eax
c001682f:	e8 34 cb ff ff       	call   c0013368 <TSS::setESP(unsigned long)>
c0016834:	83 c4 1c             	add    esp,0x1c
c0016837:	c3                   	ret    

c0016838 <switchToThread(ThreadControlBlock*)>:
c0016838:	57                   	push   edi
c0016839:	8b 0d 2c 33 03 c0    	mov    ecx,DWORD PTR ds:0xc003332c
c001683f:	56                   	push   esi
c0016840:	85 c9                	test   ecx,ecx
c0016842:	53                   	push   ebx
c0016843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016847:	0f 85 9b 00 00 00    	jne    c00168e8 <switchToThread(ThreadControlBlock*)+0xb0>
c001684d:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016851:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016857:	0f 84 87 00 00 00    	je     c00168e4 <switchToThread(ThreadControlBlock*)+0xac>
c001685d:	b8 00 04 00 00       	mov    eax,0x400
c0016862:	29 d0                	sub    eax,edx
c0016864:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016867:	d1 f8                	sar    eax,1
c0016869:	01 d0                	add    eax,edx
c001686b:	90                   	nop
c001686c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001686f:	e8 33 49 00 00       	call   c001b1a7 <HalQueryPerformanceCounter()>
c0016874:	a3 70 33 03 c0       	mov    ds:0xc0033370,eax
c0016879:	89 15 74 33 03 c0    	mov    DWORD PTR ds:0xc0033374,edx
c001687f:	89 c6                	mov    esi,eax
c0016881:	89 d7                	mov    edi,edx
c0016883:	2b 35 60 33 03 c0    	sub    esi,DWORD PTR ds:0xc0033360
c0016889:	a3 60 33 03 c0       	mov    ds:0xc0033360,eax
c001688e:	1b 3d 64 33 03 c0    	sbb    edi,DWORD PTR ds:0xc0033364
c0016894:	89 35 68 33 03 c0    	mov    DWORD PTR ds:0xc0033368,esi
c001689a:	89 3d 6c 33 03 c0    	mov    DWORD PTR ds:0xc003336c,edi
c00168a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00168a6:	89 15 64 33 03 c0    	mov    DWORD PTR ds:0xc0033364,edx
c00168ac:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00168af:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00168b2:	01 c6                	add    esi,eax
c00168b4:	11 d7                	adc    edi,edx
c00168b6:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00168b9:	83 ec 0c             	sub    esp,0xc
c00168bc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00168bf:	53                   	push   ebx
c00168c0:	e8 b2 99 fe ff       	call   c0000277 <switchToThreadASM>
c00168c5:	0f 20 c0             	mov    eax,cr0
c00168c8:	83 c8 08             	or     eax,0x8
c00168cb:	0f 22 c0             	mov    cr0,eax
c00168ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168da:	5b                   	pop    ebx
c00168db:	5e                   	pop    esi
c00168dc:	5f                   	pop    edi
c00168dd:	e9 fa ef ff ff       	jmp    c00158dc <KeCheckAlarm(ThreadControlBlock*)>
c00168e2:	66 90                	xchg   ax,ax
c00168e4:	31 c0                	xor    eax,eax
c00168e6:	eb 84                	jmp    c001686c <switchToThread(ThreadControlBlock*)+0x34>
c00168e8:	5b                   	pop    ebx
c00168e9:	c7 05 28 33 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x1
c00168f3:	5e                   	pop    esi
c00168f4:	5f                   	pop    edi
c00168f5:	c3                   	ret    
c00168f6:	66 90                	xchg   ax,ax

c00168f8 <Process::addArgs(char**)>:
c00168f8:	57                   	push   edi
c00168f9:	56                   	push   esi
c00168fa:	53                   	push   ebx
c00168fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168ff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016903:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c001690d:	85 ff                	test   edi,edi
c001690f:	74 4f                	je     c0016960 <Process::addArgs(char**)+0x68>
c0016911:	8b 07                	mov    eax,DWORD PTR [edi]
c0016913:	85 c0                	test   eax,eax
c0016915:	74 49                	je     c0016960 <Process::addArgs(char**)+0x68>
c0016917:	31 db                	xor    ebx,ebx
c0016919:	8d 76 00             	lea    esi,[esi+0x0]
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	50                   	push   eax
c0016920:	e8 4b 9c fe ff       	call   c0000570 <strlen>
c0016925:	83 c0 01             	add    eax,0x1
c0016928:	89 04 24             	mov    DWORD PTR [esp],eax
c001692b:	e8 8b 97 ff ff       	call   c00100bb <malloc>
c0016930:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c0016937:	5a                   	pop    edx
c0016938:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001693b:	59                   	pop    ecx
c001693c:	83 c3 01             	add    ebx,0x1
c001693f:	52                   	push   edx
c0016940:	50                   	push   eax
c0016941:	e8 fa 9c fe ff       	call   c0000640 <strcpy>
c0016946:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c001694c:	83 c4 10             	add    esp,0x10
c001694f:	83 c1 01             	add    ecx,0x1
c0016952:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c0016958:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001695b:	85 c0                	test   eax,eax
c001695d:	75 bd                	jne    c001691c <Process::addArgs(char**)+0x24>
c001695f:	90                   	nop
c0016960:	5b                   	pop    ebx
c0016961:	5e                   	pop    esi
c0016962:	5f                   	pop    edi
c0016963:	c3                   	ret    

c0016964 <Process::Process(char const*, Process*, char**)>:
c0016964:	56                   	push   esi
c0016965:	53                   	push   ebx
c0016966:	83 ec 14             	sub    esp,0x14
c0016969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696d:	05 0c 02 00 00       	add    eax,0x20c
c0016972:	bb 07 00 00 00       	mov    ebx,0x7
c0016977:	89 c6                	mov    esi,eax
c0016979:	8d 76 00             	lea    esi,[esi+0x0]
c001697c:	85 db                	test   ebx,ebx
c001697e:	78 14                	js     c0016994 <Process::Process(char const*, Process*, char**)+0x30>
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	56                   	push   esi
c0016984:	e8 ab 14 01 00       	call   c0027e34 <ThreadControlBlock::ThreadControlBlock()>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	83 c6 73             	add    esi,0x73
c001698f:	83 eb 01             	sub    ebx,0x1
c0016992:	eb e8                	jmp    c001697c <Process::Process(char const*, Process*, char**)+0x18>
c0016994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016998:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001699f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a3:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c00169aa:	83 ec 0c             	sub    esp,0xc
c00169ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169b1:	e8 48 84 ff ff       	call   c000edfe <KeNewProcessEnv(Process*)>
c00169b6:	83 c4 10             	add    esp,0x10
c00169b9:	89 c2                	mov    edx,eax
c00169bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169bf:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00169c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c9:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00169d2:	a1 fc d5 02 c0       	mov    eax,ds:0xc002d5fc
c00169d7:	8d 50 01             	lea    edx,[eax+0x1]
c00169da:	89 15 fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,edx
c00169e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169e4:	89 02                	mov    DWORD PTR [edx],eax
c00169e6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00169ee:	83 ec 0c             	sub    esp,0xc
c00169f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00169f5:	e8 c1 96 ff ff       	call   c00100bb <malloc>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	89 c3                	mov    ebx,eax
c00169ff:	83 ec 08             	sub    esp,0x8
c0016a02:	6a 00                	push   0x0
c0016a04:	53                   	push   ebx
c0016a05:	e8 b8 da ff ff       	call   c00144c2 <VAS::VAS(bool)>
c0016a0a:	83 c4 10             	add    esp,0x10
c0016a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a11:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016a17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a1b:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016a25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016a2d:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016a33:	e8 4b ac ff ff       	call   c0011683 <KeInitSignals()>
c0016a38:	89 c2                	mov    edx,eax
c0016a3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a3e:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a48:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a4e:	85 c0                	test   eax,eax
c0016a50:	74 42                	je     c0016a94 <Process::Process(char const*, Process*, char**)+0x130>
c0016a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a56:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a5c:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016a62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a66:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a70:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a80:	05 0c 01 00 00       	add    eax,0x10c
c0016a85:	83 ec 08             	sub    esp,0x8
c0016a88:	52                   	push   edx
c0016a89:	50                   	push   eax
c0016a8a:	e8 b1 9b fe ff       	call   c0000640 <strcpy>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	eb 7c                	jmp    c0016b10 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016a94:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016a9c:	83 ec 0c             	sub    esp,0xc
c0016a9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016aa3:	e8 13 96 ff ff       	call   c00100bb <malloc>
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	89 c3                	mov    ebx,eax
c0016aad:	83 ec 08             	sub    esp,0x8
c0016ab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ab4:	53                   	push   ebx
c0016ab5:	e8 ae c5 ff ff       	call   c0013068 <VgaText::VgaText(char const*)>
c0016aba:	83 c4 10             	add    esp,0x10
c0016abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac1:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016ad1:	83 ec 0c             	sub    esp,0xc
c0016ad4:	50                   	push   eax
c0016ad5:	e8 e4 bd ff ff       	call   c00128be <addToTerminalCycle(VgaText*)>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016ae7:	83 ec 0c             	sub    esp,0xc
c0016aea:	50                   	push   eax
c0016aeb:	e8 3f c0 ff ff       	call   c0012b2f <setActiveTerminal(VgaText*)>
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af7:	05 0c 01 00 00       	add    eax,0x10c
c0016afc:	83 ec 08             	sub    esp,0x8
c0016aff:	68 fc a9 02 c0       	push   0xc002a9fc
c0016b04:	50                   	push   eax
c0016b05:	e8 36 9b fe ff       	call   c0000640 <strcpy>
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b14:	83 c0 0c             	add    eax,0xc
c0016b17:	83 ec 08             	sub    esp,0x8
c0016b1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b1e:	50                   	push   eax
c0016b1f:	e8 1c 9b fe ff       	call   c0000640 <strcpy>
c0016b24:	83 c4 10             	add    esp,0x10
c0016b27:	83 ec 08             	sub    esp,0x8
c0016b2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016b2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b32:	e8 c1 fd ff ff       	call   c00168f8 <Process::addArgs(char**)>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3e:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016b44:	83 e2 7f             	and    edx,0x7f
c0016b47:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016b4d:	83 ec 08             	sub    esp,0x8
c0016b50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b58:	e8 02 f1 ff ff       	call   c0015c5f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016b5d:	83 c4 10             	add    esp,0x10
c0016b60:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016b64:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016b68:	83 f0 01             	xor    eax,0x1
c0016b6b:	88 c2                	mov    dl,al
c0016b6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b71:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016b77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b7d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016b82:	52                   	push   edx
c0016b83:	50                   	push   eax
c0016b84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b88:	68 68 aa 02 c0       	push   0xc002aa68
c0016b8d:	e8 ea 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	90                   	nop
c0016b96:	83 c4 14             	add    esp,0x14
c0016b99:	5b                   	pop    ebx
c0016b9a:	5e                   	pop    esi
c0016b9b:	c3                   	ret    

c0016b9c <Process::Process(bool, char const*, Process*, char**)>:
c0016b9c:	56                   	push   esi
c0016b9d:	53                   	push   ebx
c0016b9e:	83 ec 24             	sub    esp,0x24
c0016ba1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ba5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bad:	05 0c 02 00 00       	add    eax,0x20c
c0016bb2:	bb 07 00 00 00       	mov    ebx,0x7
c0016bb7:	89 c6                	mov    esi,eax
c0016bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bbc:	85 db                	test   ebx,ebx
c0016bbe:	78 14                	js     c0016bd4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016bc0:	83 ec 0c             	sub    esp,0xc
c0016bc3:	56                   	push   esi
c0016bc4:	e8 6b 12 01 00       	call   c0027e34 <ThreadControlBlock::ThreadControlBlock()>
c0016bc9:	83 c4 10             	add    esp,0x10
c0016bcc:	83 c6 73             	add    esi,0x73
c0016bcf:	83 eb 01             	sub    ebx,0x1
c0016bd2:	eb e8                	jmp    c0016bbc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016bd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bd8:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016bdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016be3:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016bea:	83 ec 0c             	sub    esp,0xc
c0016bed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016bf1:	e8 08 82 ff ff       	call   c000edfe <KeNewProcessEnv(Process*)>
c0016bf6:	83 c4 10             	add    esp,0x10
c0016bf9:	89 c2                	mov    edx,eax
c0016bfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bff:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016c05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c09:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016c12:	a1 fc d5 02 c0       	mov    eax,ds:0xc002d5fc
c0016c17:	8d 50 01             	lea    edx,[eax+0x1]
c0016c1a:	89 15 fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,edx
c0016c20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016c24:	89 02                	mov    DWORD PTR [edx],eax
c0016c26:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016c2e:	83 ec 0c             	sub    esp,0xc
c0016c31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016c35:	e8 81 94 ff ff       	call   c00100bb <malloc>
c0016c3a:	83 c4 10             	add    esp,0x10
c0016c3d:	89 c3                	mov    ebx,eax
c0016c3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016c44:	83 ec 08             	sub    esp,0x8
c0016c47:	50                   	push   eax
c0016c48:	53                   	push   ebx
c0016c49:	e8 74 d8 ff ff       	call   c00144c2 <VAS::VAS(bool)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c55:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c5f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016c69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c6d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016c71:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016c77:	e8 07 aa ff ff       	call   c0011683 <KeInitSignals()>
c0016c7c:	89 c2                	mov    edx,eax
c0016c7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c82:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c8c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c92:	85 c0                	test   eax,eax
c0016c94:	74 42                	je     c0016cd8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016c96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c9a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ca0:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016ca6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016caa:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016cb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cb4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016cba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016cc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cc4:	05 0c 01 00 00       	add    eax,0x10c
c0016cc9:	83 ec 08             	sub    esp,0x8
c0016ccc:	52                   	push   edx
c0016ccd:	50                   	push   eax
c0016cce:	e8 6d 99 fe ff       	call   c0000640 <strcpy>
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	eb 7c                	jmp    c0016d54 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016cd8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ce7:	e8 cf 93 ff ff       	call   c00100bb <malloc>
c0016cec:	83 c4 10             	add    esp,0x10
c0016cef:	89 c3                	mov    ebx,eax
c0016cf1:	83 ec 08             	sub    esp,0x8
c0016cf4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016cf8:	53                   	push   ebx
c0016cf9:	e8 6a c3 ff ff       	call   c0013068 <VgaText::VgaText(char const*)>
c0016cfe:	83 c4 10             	add    esp,0x10
c0016d01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d05:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d0f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d15:	83 ec 0c             	sub    esp,0xc
c0016d18:	50                   	push   eax
c0016d19:	e8 a0 bb ff ff       	call   c00128be <addToTerminalCycle(VgaText*)>
c0016d1e:	83 c4 10             	add    esp,0x10
c0016d21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d25:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d2b:	83 ec 0c             	sub    esp,0xc
c0016d2e:	50                   	push   eax
c0016d2f:	e8 fb bd ff ff       	call   c0012b2f <setActiveTerminal(VgaText*)>
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d3b:	05 0c 01 00 00       	add    eax,0x10c
c0016d40:	83 ec 08             	sub    esp,0x8
c0016d43:	68 fc a9 02 c0       	push   0xc002a9fc
c0016d48:	50                   	push   eax
c0016d49:	e8 f2 98 fe ff       	call   c0000640 <strcpy>
c0016d4e:	83 c4 10             	add    esp,0x10
c0016d51:	8d 76 00             	lea    esi,[esi+0x0]
c0016d54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d58:	83 c0 0c             	add    eax,0xc
c0016d5b:	83 ec 08             	sub    esp,0x8
c0016d5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d62:	50                   	push   eax
c0016d63:	e8 d8 98 fe ff       	call   c0000640 <strcpy>
c0016d68:	83 c4 10             	add    esp,0x10
c0016d6b:	83 ec 08             	sub    esp,0x8
c0016d6e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d76:	e8 7d fb ff ff       	call   c00168f8 <Process::addArgs(char**)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	90                   	nop
c0016d7f:	83 c4 24             	add    esp,0x24
c0016d82:	5b                   	pop    ebx
c0016d83:	5e                   	pop    esi
c0016d84:	c3                   	ret    
c0016d85:	8d 76 00             	lea    esi,[esi+0x0]

c0016d88 <taskStartupFunction>:
c0016d88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d8d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016d90:	c3                   	ret    
c0016d91:	8d 76 00             	lea    esi,[esi+0x0]

c0016d94 <KeDisablePreemption()>:
c0016d94:	a1 0c 33 03 c0       	mov    eax,ds:0xc003330c
c0016d99:	85 c0                	test   eax,eax
c0016d9b:	75 13                	jne    c0016db0 <KeDisablePreemption()+0x1c>
c0016d9d:	8a 15 0c 31 03 c0    	mov    dl,BYTE PTR ds:0xc003310c
c0016da3:	c6 05 0c 31 03 c0 00 	mov    BYTE PTR ds:0xc003310c,0x0
c0016daa:	88 15 08 33 03 c0    	mov    BYTE PTR ds:0xc0033308,dl
c0016db0:	83 c0 01             	add    eax,0x1
c0016db3:	a3 0c 33 03 c0       	mov    ds:0xc003330c,eax
c0016db8:	c3                   	ret    
c0016db9:	8d 76 00             	lea    esi,[esi+0x0]

c0016dbc <KeRestorePreemption()>:
c0016dbc:	a1 0c 33 03 c0       	mov    eax,ds:0xc003330c
c0016dc1:	83 e8 01             	sub    eax,0x1
c0016dc4:	a3 0c 33 03 c0       	mov    ds:0xc003330c,eax
c0016dc9:	75 0d                	jne    c0016dd8 <KeRestorePreemption()+0x1c>
c0016dcb:	a0 08 33 03 c0       	mov    al,ds:0xc0033308
c0016dd0:	a2 0c 31 03 c0       	mov    ds:0xc003310c,al
c0016dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd8:	c3                   	ret    
c0016dd9:	90                   	nop
c0016dda:	66 90                	xchg   ax,ax

c0016ddc <Process::createThread(void (*)(void*), void*, int)>:
c0016ddc:	55                   	push   ebp
c0016ddd:	31 c9                	xor    ecx,ecx
c0016ddf:	57                   	push   edi
c0016de0:	56                   	push   esi
c0016de1:	53                   	push   ebx
c0016de2:	83 ec 0c             	sub    esp,0xc
c0016de5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016de9:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016df0:	89 f2                	mov    edx,esi
c0016df2:	66 90                	xchg   ax,ax
c0016df4:	0f b7 c2             	movzx  eax,dx
c0016df7:	80 e2 01             	and    dl,0x1
c0016dfa:	74 18                	je     c0016e14 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016dfc:	d1 f8                	sar    eax,1
c0016dfe:	83 c1 01             	add    ecx,0x1
c0016e01:	89 c2                	mov    edx,eax
c0016e03:	83 f9 10             	cmp    ecx,0x10
c0016e06:	75 ec                	jne    c0016df4 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016e08:	83 c4 0c             	add    esp,0xc
c0016e0b:	31 db                	xor    ebx,ebx
c0016e0d:	89 d8                	mov    eax,ebx
c0016e0f:	5b                   	pop    ebx
c0016e10:	5e                   	pop    esi
c0016e11:	5f                   	pop    edi
c0016e12:	5d                   	pop    ebp
c0016e13:	c3                   	ret    
c0016e14:	b8 01 00 00 00       	mov    eax,0x1
c0016e19:	d3 e0                	shl    eax,cl
c0016e1b:	09 c6                	or     esi,eax
c0016e1d:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016e20:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016e27:	01 c0                	add    eax,eax
c0016e29:	01 c8                	add    eax,ecx
c0016e2b:	01 c0                	add    eax,eax
c0016e2d:	01 c8                	add    eax,ecx
c0016e2f:	8d 04 80             	lea    eax,[eax+eax*4]
c0016e32:	01 d8                	add    eax,ebx
c0016e34:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016e3b:	75 0b                	jne    c0016e48 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016e3d:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016e47:	90                   	nop
c0016e48:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016e54:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016e57:	01 c0                	add    eax,eax
c0016e59:	01 c8                	add    eax,ecx
c0016e5b:	01 c0                	add    eax,eax
c0016e5d:	01 c8                	add    eax,ecx
c0016e5f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016e62:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016e65:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016e6b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016e71:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e75:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016e7b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016e81:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016e87:	89 ca                	mov    edx,ecx
c0016e89:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016e90:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016e94:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016e9e:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016ea8:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016eaf:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016eb6:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016ebd:	f7 da                	neg    edx
c0016ebf:	c1 e2 15             	shl    edx,0x15
c0016ec2:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016ec8:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016ece:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016ed2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016edc:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016ee2:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016ee8:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016eee:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016ef8:	83 e2 80             	and    edx,0xffffff80
c0016efb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016f05:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016f0b:	68 00 01 00 00       	push   0x100
c0016f10:	e8 a6 91 ff ff       	call   c00100bb <malloc>
c0016f15:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016f18:	58                   	pop    eax
c0016f19:	5a                   	pop    edx
c0016f1a:	53                   	push   ebx
c0016f1b:	68 00 aa 02 c0       	push   0xc002aa00
c0016f20:	e8 57 00 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016f25:	59                   	pop    ecx
c0016f26:	5e                   	pop    esi
c0016f27:	53                   	push   ebx
c0016f28:	68 4c 33 03 c0       	push   0xc003334c
c0016f2d:	e8 ae 0a 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f32:	89 d8                	mov    eax,ebx
c0016f34:	83 c4 10             	add    esp,0x10
c0016f37:	83 c4 0c             	add    esp,0xc
c0016f3a:	5b                   	pop    ebx
c0016f3b:	5e                   	pop    esi
c0016f3c:	5f                   	pop    edi
c0016f3d:	5d                   	pop    ebp
c0016f3e:	c3                   	ret    
c0016f3f:	90                   	nop

c0016f40 <Process::createUserThread()>:
c0016f40:	83 ec 0c             	sub    esp,0xc
c0016f43:	68 80 00 00 00       	push   0x80
c0016f48:	6a 00                	push   0x0
c0016f4a:	68 dc 67 01 c0       	push   0xc00167dc
c0016f4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f53:	50                   	push   eax
c0016f54:	e8 83 fe ff ff       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c0016f59:	83 c4 1c             	add    esp,0x1c
c0016f5c:	c3                   	ret    
c0016f5d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f60 <setupMultitasking(void (*)())>:
c0016f60:	56                   	push   esi
c0016f61:	53                   	push   ebx
c0016f62:	83 ec 04             	sub    esp,0x4
c0016f65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f69:	eb 11                	jmp    c0016f7c <setupMultitasking(void (*)())+0x1c>
c0016f6b:	90                   	nop
c0016f6c:	83 ec 0c             	sub    esp,0xc
c0016f6f:	68 4c 33 03 c0       	push   0xc003334c
c0016f74:	e8 ab 09 01 00       	call   c0027924 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f79:	83 c4 10             	add    esp,0x10
c0016f7c:	83 ec 0c             	sub    esp,0xc
c0016f7f:	68 4c 33 03 c0       	push   0xc003334c
c0016f84:	e8 77 09 01 00       	call   c0027900 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f89:	83 c4 10             	add    esp,0x10
c0016f8c:	84 c0                	test   al,al
c0016f8e:	74 dc                	je     c0016f6c <setupMultitasking(void (*)())+0xc>
c0016f90:	83 ec 0c             	sub    esp,0xc
c0016f93:	68 c4 07 00 00       	push   0x7c4
c0016f98:	e8 1e 91 ff ff       	call   c00100bb <malloc>
c0016f9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016fa4:	89 c3                	mov    ebx,eax
c0016fa6:	6a 00                	push   0x0
c0016fa8:	68 14 aa 02 c0       	push   0xc002aa14
c0016fad:	6a 01                	push   0x1
c0016faf:	50                   	push   eax
c0016fb0:	e8 e7 fb ff ff       	call   c0016b9c <Process::Process(bool, char const*, Process*, char**)>
c0016fb5:	83 c4 14             	add    esp,0x14
c0016fb8:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016fbe:	89 1d 58 33 03 c0    	mov    DWORD PTR ds:0xc0033358,ebx
c0016fc4:	50                   	push   eax
c0016fc5:	e8 65 bb ff ff       	call   c0012b2f <setActiveTerminal(VgaText*)>
c0016fca:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016fd1:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016fdb:	83 c8 01             	or     eax,0x1
c0016fde:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016fe5:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016feb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016fee:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016ff8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016ffe:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017004:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001700e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017018:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017022:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017028:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017032:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017038:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017042:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0017049:	e8 6d 90 ff ff       	call   c00100bb <malloc>
c001704e:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0017058:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001705e:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0017065:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c001706c:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0017073:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c001707a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017080:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017086:	5a                   	pop    edx
c0017087:	59                   	pop    ecx
c0017088:	68 fc a9 02 c0       	push   0xc002a9fc
c001708d:	50                   	push   eax
c001708e:	e8 ad 95 fe ff       	call   c0000640 <strcpy>
c0017093:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001709a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001709e:	83 c4 14             	add    esp,0x14
c00170a1:	5b                   	pop    ebx
c00170a2:	5e                   	pop    esi
c00170a3:	e9 c1 91 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c00170a8 <schedule()>:
c00170a8:	8b 15 2c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003332c
c00170ae:	85 d2                	test   edx,edx
c00170b0:	74 0e                	je     c00170c0 <schedule()+0x18>
c00170b2:	c7 05 28 33 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x1
c00170bc:	c3                   	ret    
c00170bd:	8d 76 00             	lea    esi,[esi+0x0]
c00170c0:	53                   	push   ebx
c00170c1:	83 ec 14             	sub    esp,0x14
c00170c4:	68 4c 33 03 c0       	push   0xc003334c
c00170c9:	e8 32 08 01 00       	call   c0027900 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	84 c0                	test   al,al
c00170d3:	75 3f                	jne    c0017114 <schedule()+0x6c>
c00170d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170da:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00170dd:	83 fa 01             	cmp    edx,0x1
c00170e0:	74 3a                	je     c001711c <schedule()+0x74>
c00170e2:	66 90                	xchg   ax,ax
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	68 4c 33 03 c0       	push   0xc003334c
c00170ec:	e8 2b 08 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170f1:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c00170f8:	89 c3                	mov    ebx,eax
c00170fa:	e8 25 08 01 00       	call   c0027924 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00170ff:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017106:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017109:	e8 2a f7 ff ff       	call   c0016838 <switchToThread(ThreadControlBlock*)>
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	8d 76 00             	lea    esi,[esi+0x0]
c0017114:	83 c4 08             	add    esp,0x8
c0017117:	5b                   	pop    ebx
c0017118:	c3                   	ret    
c0017119:	8d 76 00             	lea    esi,[esi+0x0]
c001711c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017123:	83 ec 08             	sub    esp,0x8
c0017126:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001712b:	50                   	push   eax
c001712c:	68 4c 33 03 c0       	push   0xc003334c
c0017131:	e8 aa 08 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017136:	83 c4 10             	add    esp,0x10
c0017139:	eb a9                	jmp    c00170e4 <schedule()+0x3c>
c001713b:	90                   	nop

c001713c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001713c:	83 ec 0c             	sub    esp,0xc
c001713f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017144:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017148:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001714b:	e8 58 ff ff ff       	call   c00170a8 <schedule()>
c0017150:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017158:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001715d:	85 c0                	test   eax,eax
c001715f:	75 03                	jne    c0017164 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0017161:	fb                   	sti    
c0017162:	66 90                	xchg   ax,ax
c0017164:	83 c4 0c             	add    esp,0xc
c0017167:	c3                   	ret    

c0017168 <blockTask(TaskState)>:
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	fa                   	cli    
c001716c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017171:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017175:	83 c0 01             	add    eax,0x1
c0017178:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001717d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017182:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017185:	e8 1e ff ff ff       	call   c00170a8 <schedule()>
c001718a:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017192:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017198:	85 d2                	test   edx,edx
c001719a:	75 04                	jne    c00171a0 <blockTask(TaskState)+0x38>
c001719c:	fb                   	sti    
c001719d:	8d 76 00             	lea    esi,[esi+0x0]
c00171a0:	83 c4 0c             	add    esp,0xc
c00171a3:	c3                   	ret    

c00171a4 <waitTask(int, int*, int)>:
c00171a4:	83 ec 18             	sub    esp,0x18
c00171a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171b0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00171b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171bc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00171bf:	6a 07                	push   0x7
c00171c1:	e8 a2 ff ff ff       	call   c0017168 <blockTask(TaskState)>
c00171c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c00171d1:	85 d2                	test   edx,edx
c00171d3:	74 0b                	je     c00171e0 <waitTask(int, int*, int)+0x3c>
c00171d5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c00171d8:	89 02                	mov    DWORD PTR [edx],eax
c00171da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171df:	90                   	nop
c00171e0:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c00171e3:	83 c4 0c             	add    esp,0xc
c00171e6:	c3                   	ret    
c00171e7:	90                   	nop

c00171e8 <milliTenthSleepUntil(unsigned long long)>:
c00171e8:	83 ec 0c             	sub    esp,0xc
c00171eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00171f3:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c00171f9:	89 d1                	mov    ecx,edx
c00171fb:	1b 0d 54 2b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0032b54
c0017201:	73 05                	jae    c0017208 <milliTenthSleepUntil(unsigned long long)+0x20>
c0017203:	90                   	nop
c0017204:	83 c4 0c             	add    esp,0xc
c0017207:	c3                   	ret    
c0017208:	fa                   	cli    
c0017209:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c001720f:	83 ec 08             	sub    esp,0x8
c0017212:	83 c1 01             	add    ecx,0x1
c0017215:	89 0d 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,ecx
c001721b:	8b 0d 2c 33 03 c0    	mov    ecx,DWORD PTR ds:0xc003332c
c0017221:	83 c1 01             	add    ecx,0x1
c0017224:	89 0d 2c 33 03 c0    	mov    DWORD PTR ds:0xc003332c,ecx
c001722a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017230:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017233:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001723b:	50                   	push   eax
c001723c:	68 40 33 03 c0       	push   0xc0033340
c0017241:	e8 9a 07 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017246:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001724d:	e8 16 ff ff ff       	call   c0017168 <blockTask(TaskState)>
c0017252:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0017257:	83 c4 10             	add    esp,0x10
c001725a:	83 e8 01             	sub    eax,0x1
c001725d:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0017262:	85 c0                	test   eax,eax
c0017264:	75 0a                	jne    c0017270 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017266:	8b 15 28 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033328
c001726c:	85 d2                	test   edx,edx
c001726e:	75 18                	jne    c0017288 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0017270:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017278:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001727d:	85 c0                	test   eax,eax
c001727f:	75 83                	jne    c0017204 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0017281:	fb                   	sti    
c0017282:	83 c4 0c             	add    esp,0xc
c0017285:	c3                   	ret    
c0017286:	66 90                	xchg   ax,ax
c0017288:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0017292:	e8 11 fe ff ff       	call   c00170a8 <schedule()>
c0017297:	eb d7                	jmp    c0017270 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017299:	8d 76 00             	lea    esi,[esi+0x0]

c001729c <milliTenthSleep(unsigned long long)>:
c001729c:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c00172a1:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c00172a7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00172ab:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00172af:	e9 34 ff ff ff       	jmp    c00171e8 <milliTenthSleepUntil(unsigned long long)>

c00172b4 <sleep(unsigned long long)>:
c00172b4:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c00172bc:	b8 10 27 00 00       	mov    eax,0x2710
c00172c1:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00172c5:	01 ca                	add    edx,ecx
c00172c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00172cf:	eb cb                	jmp    c001729c <milliTenthSleep(unsigned long long)>
c00172d1:	8d 76 00             	lea    esi,[esi+0x0]

c00172d4 <sleep(unsigned int)>:
c00172d4:	83 ec 14             	sub    esp,0x14
c00172d7:	b8 10 27 00 00       	mov    eax,0x2710
c00172dc:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c00172e0:	52                   	push   edx
c00172e1:	50                   	push   eax
c00172e2:	e8 b5 ff ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c00172e7:	83 c4 1c             	add    esp,0x1c
c00172ea:	c3                   	ret    
c00172eb:	90                   	nop

c00172ec <milliTenthSleep(unsigned int)>:
c00172ec:	83 ec 14             	sub    esp,0x14
c00172ef:	31 d2                	xor    edx,edx
c00172f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172f5:	03 05 50 2b 03 c0    	add    eax,DWORD PTR ds:0xc0032b50
c00172fb:	13 15 54 2b 03 c0    	adc    edx,DWORD PTR ds:0xc0032b54
c0017301:	52                   	push   edx
c0017302:	50                   	push   eax
c0017303:	e8 e0 fe ff ff       	call   c00171e8 <milliTenthSleepUntil(unsigned long long)>
c0017308:	83 c4 1c             	add    esp,0x1c
c001730b:	c3                   	ret    

c001730c <taskReturned>:
c001730c:	83 ec 18             	sub    esp,0x18
c001730f:	68 9c aa 02 c0       	push   0xc002aa9c
c0017314:	e8 f7 91 ff ff       	call   c0010510 <KePanic(char const*)>
c0017319:	83 c4 10             	add    esp,0x10
c001731c:	83 ec 0c             	sub    esp,0xc
c001731f:	6a 02                	push   0x2
c0017321:	e8 42 fe ff ff       	call   c0017168 <blockTask(TaskState)>
c0017326:	fa                   	cli    
c0017327:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001732c:	83 c0 01             	add    eax,0x1
c001732f:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017334:	e8 6f fd ff ff       	call   c00170a8 <schedule()>
c0017339:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017341:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017347:	83 c4 10             	add    esp,0x10
c001734a:	85 d2                	test   edx,edx
c001734c:	75 ce                	jne    c001731c <taskReturned+0x10>
c001734e:	fb                   	sti    
c001734f:	eb cb                	jmp    c001731c <taskReturned+0x10>
c0017351:	8d 76 00             	lea    esi,[esi+0x0]

c0017354 <KeProcessFromPID(int)>:
c0017354:	57                   	push   edi
c0017355:	56                   	push   esi
c0017356:	53                   	push   ebx
c0017357:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001735b:	fa                   	cli    
c001735c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017361:	83 ec 0c             	sub    esp,0xc
c0017364:	83 c0 01             	add    eax,0x1
c0017367:	68 4c 33 03 c0       	push   0xc003334c
c001736c:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017371:	e8 a6 05 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017376:	83 c4 10             	add    esp,0x10
c0017379:	89 c7                	mov    edi,eax
c001737b:	eb 17                	jmp    c0017394 <KeProcessFromPID(int)+0x40>
c001737d:	8d 76 00             	lea    esi,[esi+0x0]
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	68 4c 33 03 c0       	push   0xc003334c
c0017388:	e8 8f 05 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	39 f8                	cmp    eax,edi
c0017392:	74 50                	je     c00173e4 <KeProcessFromPID(int)+0x90>
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	68 4c 33 03 c0       	push   0xc003334c
c001739c:	e8 7b 05 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173a1:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c00173a8:	89 c3                	mov    ebx,eax
c00173aa:	e8 75 05 01 00       	call   c0027924 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173af:	59                   	pop    ecx
c00173b0:	58                   	pop    eax
c00173b1:	53                   	push   ebx
c00173b2:	68 4c 33 03 c0       	push   0xc003334c
c00173b7:	e8 24 06 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173bf:	83 c4 10             	add    esp,0x10
c00173c2:	39 30                	cmp    DWORD PTR [eax],esi
c00173c4:	75 ba                	jne    c0017380 <KeProcessFromPID(int)+0x2c>
c00173c6:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00173ce:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c00173d4:	85 d2                	test   edx,edx
c00173d6:	74 08                	je     c00173e0 <KeProcessFromPID(int)+0x8c>
c00173d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173db:	5b                   	pop    ebx
c00173dc:	5e                   	pop    esi
c00173dd:	5f                   	pop    edi
c00173de:	c3                   	ret    
c00173df:	90                   	nop
c00173e0:	fb                   	sti    
c00173e1:	eb f5                	jmp    c00173d8 <KeProcessFromPID(int)+0x84>
c00173e3:	90                   	nop
c00173e4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00173ec:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00173f1:	85 c0                	test   eax,eax
c00173f3:	75 07                	jne    c00173fc <KeProcessFromPID(int)+0xa8>
c00173f5:	fb                   	sti    
c00173f6:	31 c0                	xor    eax,eax
c00173f8:	5b                   	pop    ebx
c00173f9:	5e                   	pop    esi
c00173fa:	5f                   	pop    edi
c00173fb:	c3                   	ret    
c00173fc:	5b                   	pop    ebx
c00173fd:	31 c0                	xor    eax,eax
c00173ff:	5e                   	pop    esi
c0017400:	5f                   	pop    edi
c0017401:	c3                   	ret    
c0017402:	66 90                	xchg   ax,ax

c0017404 <unblockTask(ThreadControlBlock*)>:
c0017404:	53                   	push   ebx
c0017405:	83 ec 08             	sub    esp,0x8
c0017408:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001740c:	fa                   	cli    
c001740d:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017413:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017416:	83 c2 01             	add    edx,0x1
c0017419:	85 c0                	test   eax,eax
c001741b:	89 15 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,edx
c0017421:	74 6d                	je     c0017490 <unblockTask(ThreadControlBlock*)+0x8c>
c0017423:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017426:	83 f8 01             	cmp    eax,0x1
c0017429:	74 39                	je     c0017464 <unblockTask(ThreadControlBlock*)+0x60>
c001742b:	83 ec 0c             	sub    esp,0xc
c001742e:	68 4c 33 03 c0       	push   0xc003334c
c0017433:	e8 e4 04 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017438:	83 c4 10             	add    esp,0x10
c001743b:	85 c0                	test   eax,eax
c001743d:	75 1d                	jne    c001745c <unblockTask(ThreadControlBlock*)+0x58>
c001743f:	eb 63                	jmp    c00174a4 <unblockTask(ThreadControlBlock*)+0xa0>
c0017441:	8d 76 00             	lea    esi,[esi+0x0]
c0017444:	83 ec 08             	sub    esp,0x8
c0017447:	50                   	push   eax
c0017448:	68 4c 33 03 c0       	push   0xc003334c
c001744d:	e8 d6 09 01 00       	call   c0027e28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017452:	83 c4 10             	add    esp,0x10
c0017455:	85 c0                	test   eax,eax
c0017457:	74 4b                	je     c00174a4 <unblockTask(ThreadControlBlock*)+0xa0>
c0017459:	8d 76 00             	lea    esi,[esi+0x0]
c001745c:	39 c3                	cmp    ebx,eax
c001745e:	75 e4                	jne    c0017444 <unblockTask(ThreadControlBlock*)+0x40>
c0017460:	eb 12                	jmp    c0017474 <unblockTask(ThreadControlBlock*)+0x70>
c0017462:	66 90                	xchg   ax,ax
c0017464:	83 ec 0c             	sub    esp,0xc
c0017467:	68 32 aa 02 c0       	push   0xc002aa32
c001746c:	e8 0b fb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017471:	83 c4 10             	add    esp,0x10
c0017474:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001747c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017481:	85 c0                	test   eax,eax
c0017483:	75 03                	jne    c0017488 <unblockTask(ThreadControlBlock*)+0x84>
c0017485:	fb                   	sti    
c0017486:	66 90                	xchg   ax,ax
c0017488:	83 c4 08             	add    esp,0x8
c001748b:	5b                   	pop    ebx
c001748c:	c3                   	ret    
c001748d:	8d 76 00             	lea    esi,[esi+0x0]
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	68 1b aa 02 c0       	push   0xc002aa1b
c0017498:	e8 df fa fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	eb d2                	jmp    c0017474 <unblockTask(ThreadControlBlock*)+0x70>
c00174a2:	66 90                	xchg   ax,ax
c00174a4:	83 ec 08             	sub    esp,0x8
c00174a7:	53                   	push   ebx
c00174a8:	68 4c 33 03 c0       	push   0xc003334c
c00174ad:	e8 2e 05 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00174b2:	83 c4 10             	add    esp,0x10
c00174b5:	eb bd                	jmp    c0017474 <unblockTask(ThreadControlBlock*)+0x70>
c00174b7:	90                   	nop

c00174b8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00174b8:	55                   	push   ebp
c00174b9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00174be:	57                   	push   edi
c00174bf:	56                   	push   esi
c00174c0:	53                   	push   ebx
c00174c1:	83 ec 1c             	sub    esp,0x1c
c00174c4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00174c8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00174cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174ce:	d3 c0                	rol    eax,cl
c00174d0:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c00174d7:	21 c8                	and    eax,ecx
c00174d9:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c00174e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174e3:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c00174eb:	0f 85 b7 01 00 00    	jne    c00176a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00174f1:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c00174f7:	85 ed                	test   ebp,ebp
c00174f9:	7e 29                	jle    c0017524 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c00174fb:	31 f6                	xor    esi,esi
c00174fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017500:	83 ec 0c             	sub    esp,0xc
c0017503:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001750a:	83 c6 01             	add    esi,0x1
c001750d:	57                   	push   edi
c001750e:	e8 b8 8b ff ff       	call   c00100cb <free>
c0017513:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017516:	83 c4 10             	add    esp,0x10
c0017519:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c001751f:	7f df                	jg     c0017500 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017521:	8d 76 00             	lea    esi,[esi+0x0]
c0017524:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c001752e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017531:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0017537:	89 f7                	mov    edi,esi
c0017539:	85 ed                	test   ebp,ebp
c001753b:	74 1b                	je     c0017558 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001753d:	83 ec 0c             	sub    esp,0xc
c0017540:	55                   	push   ebp
c0017541:	e8 d4 77 ff ff       	call   c000ed1a <EnvVarContainer::~EnvVarContainer()>
c0017546:	59                   	pop    ecx
c0017547:	5e                   	pop    esi
c0017548:	6a 0c                	push   0xc
c001754a:	55                   	push   ebp
c001754b:	e8 78 66 ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0017550:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	89 f7                	mov    edi,esi
c0017558:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001755e:	85 c0                	test   eax,eax
c0017560:	0f 84 b6 00 00 00    	je     c001761c <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0017566:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017569:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001756d:	31 c9                	xor    ecx,ecx
c001756f:	eb 17                	jmp    c0017588 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017571:	8d 76 00             	lea    esi,[esi+0x0]
c0017574:	83 c1 01             	add    ecx,0x1
c0017577:	83 f9 10             	cmp    ecx,0x10
c001757a:	0f 84 9c 00 00 00    	je     c001761c <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0017580:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017586:	66 90                	xchg   ax,ax
c0017588:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c001758f:	d3 fa                	sar    edx,cl
c0017591:	80 e2 01             	and    dl,0x1
c0017594:	74 de                	je     c0017574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017596:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017599:	01 d2                	add    edx,edx
c001759b:	01 ca                	add    edx,ecx
c001759d:	01 d2                	add    edx,edx
c001759f:	01 ca                	add    edx,ecx
c00175a1:	8d 14 92             	lea    edx,[edx+edx*4]
c00175a4:	01 d0                	add    eax,edx
c00175a6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00175ac:	83 fd 07             	cmp    ebp,0x7
c00175af:	75 c3                	jne    c0017574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175b1:	05 40 02 00 00       	add    eax,0x240
c00175b6:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00175b9:	83 fd ff             	cmp    ebp,0xffffffff
c00175bc:	0f 8c ee 00 00 00    	jl     c00176b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00175c2:	0f 84 ac 01 00 00    	je     c0017774 <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c00175c8:	85 ed                	test   ebp,ebp
c00175ca:	0f 84 90 01 00 00    	je     c0017760 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c00175d0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00175d2:	75 a0                	jne    c0017574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175d4:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00175da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00175de:	01 d0                	add    eax,edx
c00175e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00175e4:	83 ec 0c             	sub    esp,0xc
c00175e7:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00175ed:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175f0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00175f6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00175fd:	50                   	push   eax
c00175fe:	e8 01 fe ff ff       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c0017603:	83 c4 10             	add    esp,0x10
c0017606:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017609:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001760d:	89 f7                	mov    edi,esi
c001760f:	83 c1 01             	add    ecx,0x1
c0017612:	83 f9 10             	cmp    ecx,0x10
c0017615:	0f 85 65 ff ff ff    	jne    c0017580 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001761b:	90                   	nop
c001761c:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0017622:	85 c0                	test   eax,eax
c0017624:	74 62                	je     c0017688 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017626:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c001762c:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0017632:	74 54                	je     c0017688 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017634:	83 ec 0c             	sub    esp,0xc
c0017637:	68 4c 33 03 c0       	push   0xc003334c
c001763c:	e8 db 02 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017641:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0017648:	89 c7                	mov    edi,eax
c001764a:	e8 b1 02 01 00       	call   c0027900 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001764f:	83 c4 10             	add    esp,0x10
c0017652:	84 c0                	test   al,al
c0017654:	0f 84 ce 00 00 00    	je     c0017728 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c001765a:	66 90                	xchg   ax,ax
c001765c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001765f:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0017665:	85 d2                	test   edx,edx
c0017667:	74 0f                	je     c0017678 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017669:	83 ec 0c             	sub    esp,0xc
c001766c:	8b 02                	mov    eax,DWORD PTR [edx]
c001766e:	52                   	push   edx
c001766f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017672:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0017682:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017685:	8d 76 00             	lea    esi,[esi+0x0]
c0017688:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c001768e:	85 db                	test   ebx,ebx
c0017690:	74 16                	je     c00176a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017692:	83 ec 0c             	sub    esp,0xc
c0017695:	53                   	push   ebx
c0017696:	e8 87 c9 ff ff       	call   c0014022 <VAS::~VAS()>
c001769b:	58                   	pop    eax
c001769c:	5a                   	pop    edx
c001769d:	6a 14                	push   0x14
c001769f:	53                   	push   ebx
c00176a0:	e8 23 65 ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	83 c4 1c             	add    esp,0x1c
c00176ab:	5b                   	pop    ebx
c00176ac:	5e                   	pop    esi
c00176ad:	5f                   	pop    edi
c00176ae:	5d                   	pop    ebp
c00176af:	c3                   	ret    
c00176b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00176b4:	83 ec 0c             	sub    esp,0xc
c00176b7:	68 d0 aa 02 c0       	push   0xc002aad0
c00176bc:	e8 4f 8e ff ff       	call   c0010510 <KePanic(char const*)>
c00176c1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00176c4:	83 c4 10             	add    esp,0x10
c00176c7:	89 f7                	mov    edi,esi
c00176c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00176cd:	e9 a2 fe ff ff       	jmp    c0017574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00176da:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c00176e0:	75 1e                	jne    c0017700 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00176e2:	83 ec 0c             	sub    esp,0xc
c00176e5:	68 38 ab 02 c0       	push   0xc002ab38
c00176ea:	e8 8d f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00176ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00176f6:	e8 6d fa ff ff       	call   c0017168 <blockTask(TaskState)>
c00176fb:	83 c4 10             	add    esp,0x10
c00176fe:	66 90                	xchg   ax,ax
c0017700:	83 ec 08             	sub    esp,0x8
c0017703:	56                   	push   esi
c0017704:	68 4c 33 03 c0       	push   0xc003334c
c0017709:	e8 d2 02 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001770e:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0017715:	e8 02 02 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001771a:	83 c4 10             	add    esp,0x10
c001771d:	39 f8                	cmp    eax,edi
c001771f:	0f 84 37 ff ff ff    	je     c001765c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c0017725:	8d 76 00             	lea    esi,[esi+0x0]
c0017728:	83 ec 0c             	sub    esp,0xc
c001772b:	68 4c 33 03 c0       	push   0xc003334c
c0017730:	e8 e7 01 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017735:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c001773c:	89 c6                	mov    esi,eax
c001773e:	e8 e1 01 01 00       	call   c0027924 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	39 f3                	cmp    ebx,esi
c0017748:	74 b6                	je     c0017700 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001774a:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001774d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017750:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0017756:	75 a8                	jne    c0017700 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017758:	e9 77 ff ff ff       	jmp    c00176d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c001775d:	8d 76 00             	lea    esi,[esi+0x0]
c0017760:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017764:	83 ec 0c             	sub    esp,0xc
c0017767:	68 04 ab 02 c0       	push   0xc002ab04
c001776c:	e9 4b ff ff ff       	jmp    c00176bc <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c0017771:	8d 76 00             	lea    esi,[esi+0x0]
c0017774:	8b 36                	mov    esi,DWORD PTR [esi]
c0017776:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001777a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001777d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017780:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017786:	01 d7                	add    edi,edx
c0017788:	89 f8                	mov    eax,edi
c001778a:	e9 51 fe ff ff       	jmp    c00175e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c001778f:	90                   	nop

c0017790 <cleanerTaskFunction(void*)>:
c0017790:	53                   	push   ebx
c0017791:	83 ec 08             	sub    esp,0x8
c0017794:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001779c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00177a1:	85 c0                	test   eax,eax
c00177a3:	75 03                	jne    c00177a8 <cleanerTaskFunction(void*)+0x18>
c00177a5:	fb                   	sti    
c00177a6:	66 90                	xchg   ax,ax
c00177a8:	fa                   	cli    
c00177a9:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00177ae:	83 c0 01             	add    eax,0x1
c00177b1:	80 3d 14 33 03 c0 00 	cmp    BYTE PTR ds:0xc0033314,0x0
c00177b8:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00177bd:	0f 85 c9 00 00 00    	jne    c001788c <cleanerTaskFunction(void*)+0xfc>
c00177c3:	83 ec 0c             	sub    esp,0xc
c00177c6:	6a 02                	push   0x2
c00177c8:	e8 6f f9 ff ff       	call   c001713c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00177cd:	83 c4 10             	add    esp,0x10
c00177d0:	c6 05 14 33 03 c0 00 	mov    BYTE PTR ds:0xc0033314,0x0
c00177d7:	fa                   	cli    
c00177d8:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c00177de:	8b 1d 2c 33 03 c0    	mov    ebx,DWORD PTR ds:0xc003332c
c00177e4:	83 c1 01             	add    ecx,0x1
c00177e7:	83 c3 01             	add    ebx,0x1
c00177ea:	89 0d 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,ecx
c00177f0:	89 1d 2c 33 03 c0    	mov    DWORD PTR ds:0xc003332c,ebx
c00177f6:	fa                   	cli    
c00177f7:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00177fc:	83 c0 01             	add    eax,0x1
c00177ff:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017804:	eb 2a                	jmp    c0017830 <cleanerTaskFunction(void*)+0xa0>
c0017806:	66 90                	xchg   ax,ax
c0017808:	83 ec 0c             	sub    esp,0xc
c001780b:	68 34 33 03 c0       	push   0xc0033334
c0017810:	e8 07 01 01 00       	call   c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017815:	c7 04 24 34 33 03 c0 	mov    DWORD PTR [esp],0xc0033334
c001781c:	89 c3                	mov    ebx,eax
c001781e:	e8 01 01 01 00       	call   c0027924 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017826:	e8 8d fc ff ff       	call   c00174b8 <cleanupTerminatedTask(ThreadControlBlock*)>
c001782b:	83 c4 10             	add    esp,0x10
c001782e:	66 90                	xchg   ax,ax
c0017830:	83 ec 0c             	sub    esp,0xc
c0017833:	68 34 33 03 c0       	push   0xc0033334
c0017838:	e8 c3 00 01 00       	call   c0027900 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001783d:	83 c4 10             	add    esp,0x10
c0017840:	84 c0                	test   al,al
c0017842:	74 c4                	je     c0017808 <cleanerTaskFunction(void*)+0x78>
c0017844:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001784c:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017852:	85 d2                	test   edx,edx
c0017854:	75 02                	jne    c0017858 <cleanerTaskFunction(void*)+0xc8>
c0017856:	fb                   	sti    
c0017857:	90                   	nop
c0017858:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001785d:	83 e8 01             	sub    eax,0x1
c0017860:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0017865:	0f 85 29 ff ff ff    	jne    c0017794 <cleanerTaskFunction(void*)+0x4>
c001786b:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0017870:	85 c0                	test   eax,eax
c0017872:	0f 84 1c ff ff ff    	je     c0017794 <cleanerTaskFunction(void*)+0x4>
c0017878:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0017882:	e8 21 f8 ff ff       	call   c00170a8 <schedule()>
c0017887:	e9 08 ff ff ff       	jmp    c0017794 <cleanerTaskFunction(void*)+0x4>
c001788c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017894:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017899:	85 c0                	test   eax,eax
c001789b:	0f 85 2f ff ff ff    	jne    c00177d0 <cleanerTaskFunction(void*)+0x40>
c00178a1:	fb                   	sti    
c00178a2:	e9 29 ff ff ff       	jmp    c00177d0 <cleanerTaskFunction(void*)+0x40>
c00178a7:	90                   	nop

c00178a8 <KeTerminateCurrentThread(int)>:
c00178a8:	83 ec 14             	sub    esp,0x14
c00178ab:	fa                   	cli    
c00178ac:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00178b1:	83 c0 01             	add    eax,0x1
c00178b4:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00178b9:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00178be:	83 c0 01             	add    eax,0x1
c00178c1:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00178c6:	fa                   	cli    
c00178c7:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00178cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178d0:	83 c0 01             	add    eax,0x1
c00178d3:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00178d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178dd:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00178e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00178e8:	50                   	push   eax
c00178e9:	68 34 33 03 c0       	push   0xc0033334
c00178ee:	e8 ed 00 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00178f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178f8:	83 c4 10             	add    esp,0x10
c00178fb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017902:	a1 10 33 03 c0       	mov    eax,ds:0xc0033310
c0017907:	85 c0                	test   eax,eax
c0017909:	0f 84 81 00 00 00    	je     c0017990 <KeTerminateCurrentThread(int)+0xe8>
c001790f:	83 ec 0c             	sub    esp,0xc
c0017912:	c6 05 14 33 03 c0 01 	mov    BYTE PTR ds:0xc0033314,0x1
c0017919:	50                   	push   eax
c001791a:	e8 e5 fa ff ff       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	66 90                	xchg   ax,ax
c0017924:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001792c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017931:	85 c0                	test   eax,eax
c0017933:	75 03                	jne    c0017938 <KeTerminateCurrentThread(int)+0x90>
c0017935:	fb                   	sti    
c0017936:	66 90                	xchg   ax,ax
c0017938:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001793d:	83 e8 01             	sub    eax,0x1
c0017940:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0017945:	75 09                	jne    c0017950 <KeTerminateCurrentThread(int)+0xa8>
c0017947:	83 3d 28 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033328,0x0
c001794e:	75 54                	jne    c00179a4 <KeTerminateCurrentThread(int)+0xfc>
c0017950:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017958:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c001795e:	85 c9                	test   ecx,ecx
c0017960:	75 06                	jne    c0017968 <KeTerminateCurrentThread(int)+0xc0>
c0017962:	66 90                	xchg   ax,ax
c0017964:	fb                   	sti    
c0017965:	8d 76 00             	lea    esi,[esi+0x0]
c0017968:	fa                   	cli    
c0017969:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001796e:	83 c0 01             	add    eax,0x1
c0017971:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017976:	e8 2d f7 ff ff       	call   c00170a8 <schedule()>
c001797b:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017983:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017989:	85 d2                	test   edx,edx
c001798b:	75 db                	jne    c0017968 <KeTerminateCurrentThread(int)+0xc0>
c001798d:	eb d5                	jmp    c0017964 <KeTerminateCurrentThread(int)+0xbc>
c001798f:	90                   	nop
c0017990:	83 ec 0c             	sub    esp,0xc
c0017993:	68 49 aa 02 c0       	push   0xc002aa49
c0017998:	e8 df f5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001799d:	83 c4 10             	add    esp,0x10
c00179a0:	eb 82                	jmp    c0017924 <KeTerminateCurrentThread(int)+0x7c>
c00179a2:	66 90                	xchg   ax,ax
c00179a4:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c00179ae:	e8 f5 f6 ff ff       	call   c00170a8 <schedule()>
c00179b3:	eb 9b                	jmp    c0017950 <KeTerminateCurrentThread(int)+0xa8>
c00179b5:	8d 76 00             	lea    esi,[esi+0x0]

c00179b8 <__static_initialization_and_destruction_0(int, int)>:
c00179b8:	83 ec 0c             	sub    esp,0xc
c00179bb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00179c0:	0f 85 8e 00 00 00    	jne    c0017a54 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00179c6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00179ce:	0f 85 80 00 00 00    	jne    c0017a54 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00179d4:	83 ec 0c             	sub    esp,0xc
c00179d7:	68 4c 33 03 c0       	push   0xc003334c
c00179dc:	e8 9f 04 01 00       	call   c0027e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	83 ec 04             	sub    esp,0x4
c00179e7:	68 c0 cd 02 c0       	push   0xc002cdc0
c00179ec:	68 4c 33 03 c0       	push   0xc003334c
c00179f1:	68 30 7e 02 c0       	push   0xc0027e30
c00179f6:	e8 7d 61 ff ff       	call   c000db78 <__cxa_atexit>
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	83 ec 0c             	sub    esp,0xc
c0017a01:	68 40 33 03 c0       	push   0xc0033340
c0017a06:	e8 75 04 01 00       	call   c0027e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a0b:	83 c4 10             	add    esp,0x10
c0017a0e:	83 ec 04             	sub    esp,0x4
c0017a11:	68 c0 cd 02 c0       	push   0xc002cdc0
c0017a16:	68 40 33 03 c0       	push   0xc0033340
c0017a1b:	68 30 7e 02 c0       	push   0xc0027e30
c0017a20:	e8 53 61 ff ff       	call   c000db78 <__cxa_atexit>
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	83 ec 0c             	sub    esp,0xc
c0017a2b:	68 34 33 03 c0       	push   0xc0033334
c0017a30:	e8 4b 04 01 00       	call   c0027e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a35:	83 c4 10             	add    esp,0x10
c0017a38:	83 ec 04             	sub    esp,0x4
c0017a3b:	68 c0 cd 02 c0       	push   0xc002cdc0
c0017a40:	68 34 33 03 c0       	push   0xc0033334
c0017a45:	68 30 7e 02 c0       	push   0xc0027e30
c0017a4a:	e8 29 61 ff ff       	call   c000db78 <__cxa_atexit>
c0017a4f:	83 c4 10             	add    esp,0x10
c0017a52:	66 90                	xchg   ax,ax
c0017a54:	90                   	nop
c0017a55:	83 c4 0c             	add    esp,0xc
c0017a58:	c3                   	ret    
c0017a59:	8d 76 00             	lea    esi,[esi+0x0]

c0017a5c <_GLOBAL__sub_I_keNextPID>:
c0017a5c:	83 ec 0c             	sub    esp,0xc
c0017a5f:	83 ec 08             	sub    esp,0x8
c0017a62:	68 ff ff 00 00       	push   0xffff
c0017a67:	6a 01                	push   0x1
c0017a69:	e8 4a ff ff ff       	call   c00179b8 <__static_initialization_and_destruction_0(int, int)>
c0017a6e:	83 c4 10             	add    esp,0x10
c0017a71:	83 c4 0c             	add    esp,0xc
c0017a74:	c3                   	ret    

c0017a75 <Vm::inbv(unsigned short)>:
c0017a75:	55                   	push   ebp
c0017a76:	89 e5                	mov    ebp,esp
c0017a78:	83 ec 14             	sub    esp,0x14
c0017a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a7e:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017a82:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017a86:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017a8b:	75 07                	jne    c0017a94 <Vm::inbv(unsigned short)+0x1f>
c0017a8d:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017a92:	eb 16                	jmp    c0017aaa <Vm::inbv(unsigned short)+0x35>
c0017a94:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017a98:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017a9c:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017aa0:	89 c2                	mov    edx,eax
c0017aa2:	ec                   	in     al,dx
c0017aa3:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017aa6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017aa9:	90                   	nop
c0017aaa:	c9                   	leave  
c0017aab:	c3                   	ret    

c0017aac <Vm::outbv(unsigned short, unsigned char)>:
c0017aac:	55                   	push   ebp
c0017aad:	89 e5                	mov    ebp,esp
c0017aaf:	83 ec 18             	sub    esp,0x18
c0017ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ab5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017ab8:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017abc:	88 d0                	mov    al,dl
c0017abe:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017ac1:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017ac5:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017aca:	75 2d                	jne    c0017af9 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c0017acc:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017ad1:	8d 50 01             	lea    edx,[eax+0x1]
c0017ad4:	89 15 90 33 03 c0    	mov    DWORD PTR ds:0xc0033390,edx
c0017ada:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c0017add:	88 90 a0 33 03 c0    	mov    BYTE PTR [eax-0x3ffccc60],dl
c0017ae3:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017ae8:	83 f8 20             	cmp    eax,0x20
c0017aeb:	75 23                	jne    c0017b10 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017aed:	c7 05 90 33 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x1f
c0017af7:	eb 17                	jmp    c0017b10 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017af9:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c0017afd:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017b01:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017b05:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017b08:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017b0b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017b0f:	ee                   	out    dx,al
c0017b10:	90                   	nop
c0017b11:	c9                   	leave  
c0017b12:	c3                   	ret    

c0017b13 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017b13:	55                   	push   ebp
c0017b14:	89 e5                	mov    ebp,esp
c0017b16:	83 ec 08             	sub    esp,0x8
c0017b19:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017b1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b1f:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c0017b23:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c0017b27:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c0017b2b:	c1 e0 04             	shl    eax,0x4
c0017b2e:	89 c2                	mov    edx,eax
c0017b30:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c0017b34:	01 d0                	add    eax,edx
c0017b36:	c9                   	leave  
c0017b37:	c3                   	ret    

c0017b38 <Vm::getSegment(unsigned int)>:
c0017b38:	55                   	push   ebp
c0017b39:	89 e5                	mov    ebp,esp
c0017b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b3e:	c1 e8 10             	shr    eax,0x10
c0017b41:	5d                   	pop    ebp
c0017b42:	c3                   	ret    

c0017b43 <Vm::getOffset(unsigned int)>:
c0017b43:	55                   	push   ebp
c0017b44:	89 e5                	mov    ebp,esp
c0017b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b49:	5d                   	pop    ebp
c0017b4a:	c3                   	ret    

c0017b4b <Vm::mainloop2()>:
c0017b4b:	55                   	push   ebp
c0017b4c:	89 e5                	mov    ebp,esp
c0017b4e:	53                   	push   ebx
c0017b4f:	83 ec 04             	sub    esp,0x4
c0017b52:	fa                   	cli    
c0017b53:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017b58:	83 c0 01             	add    eax,0x1
c0017b5b:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017b60:	c6 05 89 33 03 c0 01 	mov    BYTE PTR ds:0xc0033389,0x1
c0017b67:	83 ec 0c             	sub    esp,0xc
c0017b6a:	6a 02                	push   0x2
c0017b6c:	e8 cb f5 ff ff       	call   c001713c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017b71:	83 c4 10             	add    esp,0x10
c0017b74:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b7b:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c0017b7f:	0f b7 d8             	movzx  ebx,ax
c0017b82:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b89:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c0017b8d:	0f b7 c8             	movzx  ecx,ax
c0017b90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b97:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c0017b9b:	0f b7 d0             	movzx  edx,ax
c0017b9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ba5:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017ba9:	0f b7 c0             	movzx  eax,ax
c0017bac:	53                   	push   ebx
c0017bad:	51                   	push   ecx
c0017bae:	52                   	push   edx
c0017baf:	50                   	push   eax
c0017bb0:	e8 5a 86 fe ff       	call   c000020f <goToVM86>
c0017bb5:	83 c4 10             	add    esp,0x10
c0017bb8:	90                   	nop
c0017bb9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0017bbc:	c9                   	leave  
c0017bbd:	c3                   	ret    

c0017bbe <Vm::mainVm8086Loop(void*)>:
c0017bbe:	55                   	push   ebp
c0017bbf:	89 e5                	mov    ebp,esp
c0017bc1:	83 ec 08             	sub    esp,0x8
c0017bc4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017bcc:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017bd1:	85 c0                	test   eax,eax
c0017bd3:	75 01                	jne    c0017bd6 <Vm::mainVm8086Loop(void*)+0x18>
c0017bd5:	fb                   	sti    
c0017bd6:	e8 70 ff ff ff       	call   c0017b4b <Vm::mainloop2()>
c0017bdb:	90                   	nop
c0017bdc:	c9                   	leave  
c0017bdd:	c3                   	ret    

c0017bde <Vm::mainloop3(unsigned long)>:
c0017bde:	55                   	push   ebp
c0017bdf:	89 e5                	mov    ebp,esp
c0017be1:	83 ec 08             	sub    esp,0x8
c0017be4:	fa                   	cli    
c0017be5:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017bea:	83 c0 01             	add    eax,0x1
c0017bed:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017bf2:	c6 05 88 33 03 c0 01 	mov    BYTE PTR ds:0xc0033388,0x1
c0017bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bfc:	a3 84 33 03 c0       	mov    ds:0xc0033384,eax
c0017c01:	83 ec 0c             	sub    esp,0xc
c0017c04:	6a 02                	push   0x2
c0017c06:	e8 31 f5 ff ff       	call   c001713c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	e8 38 ff ff ff       	call   c0017b4b <Vm::mainloop2()>
c0017c13:	90                   	nop
c0017c14:	c9                   	leave  
c0017c15:	c3                   	ret    

c0017c16 <Vm::initialise8086()>:
c0017c16:	55                   	push   ebp
c0017c17:	89 e5                	mov    ebp,esp
c0017c19:	83 ec 08             	sub    esp,0x8
c0017c1c:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0017c21:	68 80 00 00 00       	push   0x80
c0017c26:	6a 00                	push   0x0
c0017c28:	68 be 7b 01 c0       	push   0xc0017bbe
c0017c2d:	50                   	push   eax
c0017c2e:	e8 a9 f1 ff ff       	call   c0016ddc <Process::createThread(void (*)(void*), void*, int)>
c0017c33:	83 c4 10             	add    esp,0x10
c0017c36:	a3 8c 33 03 c0       	mov    ds:0xc003338c,eax
c0017c3b:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0017c40:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0017c46:	83 ec 0c             	sub    esp,0xc
c0017c49:	6a 07                	push   0x7
c0017c4b:	68 10 01 00 00       	push   0x110
c0017c50:	6a 00                	push   0x0
c0017c52:	6a 00                	push   0x0
c0017c54:	50                   	push   eax
c0017c55:	e8 1a c7 ff ff       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c5a:	83 c4 20             	add    esp,0x20
c0017c5d:	90                   	nop
c0017c5e:	c9                   	leave  
c0017c5f:	c3                   	ret    

c0017c60 <Vm::finish8086()>:
c0017c60:	55                   	push   ebp
c0017c61:	89 e5                	mov    ebp,esp
c0017c63:	83 ec 18             	sub    esp,0x18
c0017c66:	fa                   	cli    
c0017c67:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017c6c:	83 c0 01             	add    eax,0x1
c0017c6f:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017c74:	a0 88 33 03 c0       	mov    al,ds:0xc0033388
c0017c79:	0f b6 c0             	movzx  eax,al
c0017c7c:	85 c0                	test   eax,eax
c0017c7e:	75 19                	jne    c0017c99 <Vm::finish8086()+0x39>
c0017c80:	e8 23 f4 ff ff       	call   c00170a8 <schedule()>
c0017c85:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017c8d:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017c92:	85 c0                	test   eax,eax
c0017c94:	75 d0                	jne    c0017c66 <Vm::finish8086()+0x6>
c0017c96:	fb                   	sti    
c0017c97:	eb cd                	jmp    c0017c66 <Vm::finish8086()+0x6>
c0017c99:	90                   	nop
c0017c9a:	a1 84 33 03 c0       	mov    eax,ds:0xc0033384
c0017c9f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017ca2:	c6 05 88 33 03 c0 00 	mov    BYTE PTR ds:0xc0033388,0x0
c0017ca9:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017cae:	83 ec 0c             	sub    esp,0xc
c0017cb1:	50                   	push   eax
c0017cb2:	e8 4d f7 ff ff       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c0017cb7:	83 c4 10             	add    esp,0x10
c0017cba:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017cc2:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017cc7:	85 c0                	test   eax,eax
c0017cc9:	75 01                	jne    c0017ccc <Vm::finish8086()+0x6c>
c0017ccb:	fb                   	sti    
c0017ccc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017ccf:	c9                   	leave  
c0017cd0:	c3                   	ret    

c0017cd1 <Vm::getOutput8086(unsigned char*)>:
c0017cd1:	55                   	push   ebp
c0017cd2:	89 e5                	mov    ebp,esp
c0017cd4:	57                   	push   edi
c0017cd5:	56                   	push   esi
c0017cd6:	53                   	push   ebx
c0017cd7:	83 ec 20             	sub    esp,0x20
c0017cda:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017cdf:	89 c2                	mov    edx,eax
c0017ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ce4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017ce7:	c7 45 e8 a0 33 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00333a0
c0017cee:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017cf1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017cf4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017cf7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017cfa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017cfd:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017d00:	89 c6                	mov    esi,eax
c0017d02:	89 d7                	mov    edi,edx
c0017d04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d06:	89 c8                	mov    eax,ecx
c0017d08:	89 fa                	mov    edx,edi
c0017d0a:	89 f3                	mov    ebx,esi
c0017d0c:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017d0f:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0017d12:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017d15:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017d1a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0017d1d:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017d27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0017d2a:	83 c4 20             	add    esp,0x20
c0017d2d:	5b                   	pop    ebx
c0017d2e:	5e                   	pop    esi
c0017d2f:	5f                   	pop    edi
c0017d30:	5d                   	pop    ebp
c0017d31:	c3                   	ret    

c0017d32 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017d32:	55                   	push   ebp
c0017d33:	89 e5                	mov    ebp,esp
c0017d35:	57                   	push   edi
c0017d36:	56                   	push   esi
c0017d37:	53                   	push   ebx
c0017d38:	83 ec 3c             	sub    esp,0x3c
c0017d3b:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0017d3e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0017d41:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0017d44:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d47:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c0017d4b:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c0017d4f:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c0017d53:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c0017d57:	a0 80 33 03 c0       	mov    al,ds:0xc0033380
c0017d5c:	83 f0 01             	xor    eax,0x1
c0017d5f:	0f b6 c0             	movzx  eax,al
c0017d62:	85 c0                	test   eax,eax
c0017d64:	74 07                	je     c0017d6d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017d66:	c6 05 80 33 03 c0 01 	mov    BYTE PTR ds:0xc0033380,0x1
c0017d6d:	fa                   	cli    
c0017d6e:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017d73:	83 c0 01             	add    eax,0x1
c0017d76:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017d7b:	a0 89 33 03 c0       	mov    al,ds:0xc0033389
c0017d80:	0f b6 c0             	movzx  eax,al
c0017d83:	85 c0                	test   eax,eax
c0017d85:	75 19                	jne    c0017da0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c0017d87:	e8 1c f3 ff ff       	call   c00170a8 <schedule()>
c0017d8c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017d94:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017d99:	85 c0                	test   eax,eax
c0017d9b:	75 d0                	jne    c0017d6d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017d9d:	fb                   	sti    
c0017d9e:	eb cd                	jmp    c0017d6d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017da0:	90                   	nop
c0017da1:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017da7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017daa:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0017dae:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017db4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017db7:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c0017dbb:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017dc1:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017dc4:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c0017dc8:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017dce:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0017dd1:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0017dd5:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017dda:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017dde:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017de8:	83 ec 04             	sub    esp,0x4
c0017deb:	6a 20                	push   0x20
c0017ded:	6a 00                	push   0x0
c0017def:	68 a0 33 03 c0       	push   0xc00333a0
c0017df4:	e8 f7 86 fe ff       	call   c00004f0 <memset>
c0017df9:	83 c4 10             	add    esp,0x10
c0017dfc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017dff:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c0017e03:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c0017e07:	83 ec 08             	sub    esp,0x8
c0017e0a:	52                   	push   edx
c0017e0b:	50                   	push   eax
c0017e0c:	e8 02 fd ff ff       	call   c0017b13 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e1a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017e1d:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017e20:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017e23:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0017e26:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017e29:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0017e2c:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0017e2f:	89 c6                	mov    esi,eax
c0017e31:	89 d7                	mov    edi,edx
c0017e33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e35:	89 c8                	mov    eax,ecx
c0017e37:	89 fa                	mov    edx,edi
c0017e39:	89 f3                	mov    ebx,esi
c0017e3b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0017e3e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017e41:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0017e44:	c6 05 89 33 03 c0 00 	mov    BYTE PTR ds:0xc0033389,0x0
c0017e4b:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017e53:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017e58:	85 c0                	test   eax,eax
c0017e5a:	75 01                	jne    c0017e5d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x12b>
c0017e5c:	fb                   	sti    
c0017e5d:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017e62:	83 ec 0c             	sub    esp,0xc
c0017e65:	50                   	push   eax
c0017e66:	e8 99 f5 ff ff       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	b0 01                	mov    al,0x1
c0017e70:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017e73:	5b                   	pop    ebx
c0017e74:	5e                   	pop    esi
c0017e75:	5f                   	pop    edi
c0017e76:	5d                   	pop    ebp
c0017e77:	c3                   	ret    

c0017e78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017e78:	55                   	push   ebp
c0017e79:	89 e5                	mov    ebp,esp
c0017e7b:	56                   	push   esi
c0017e7c:	53                   	push   ebx
c0017e7d:	83 ec 30             	sub    esp,0x30
c0017e80:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017e83:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017e86:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017e89:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017e8c:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c0017e90:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c0017e94:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c0017e98:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0017e9c:	a0 80 33 03 c0       	mov    al,ds:0xc0033380
c0017ea1:	83 f0 01             	xor    eax,0x1
c0017ea4:	0f b6 c0             	movzx  eax,al
c0017ea7:	85 c0                	test   eax,eax
c0017ea9:	74 07                	je     c0017eb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c0017eab:	c6 05 80 33 03 c0 01 	mov    BYTE PTR ds:0xc0033380,0x1
c0017eb2:	83 ec 08             	sub    esp,0x8
c0017eb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017eb8:	68 60 ab 02 c0       	push   0xc002ab60
c0017ebd:	e8 ba f0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	fa                   	cli    
c0017ec6:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017ecb:	83 c0 01             	add    eax,0x1
c0017ece:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017ed3:	a0 89 33 03 c0       	mov    al,ds:0xc0033389
c0017ed8:	0f b6 c0             	movzx  eax,al
c0017edb:	85 c0                	test   eax,eax
c0017edd:	75 19                	jne    c0017ef8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0017edf:	e8 c4 f1 ff ff       	call   c00170a8 <schedule()>
c0017ee4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017eec:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017ef1:	85 c0                	test   eax,eax
c0017ef3:	75 d0                	jne    c0017ec5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017ef5:	fb                   	sti    
c0017ef6:	eb cd                	jmp    c0017ec5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017ef8:	90                   	nop
c0017ef9:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017eff:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017f02:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0017f06:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017f0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017f0f:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c0017f13:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017f19:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
c0017f1c:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c0017f20:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017f26:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017f29:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0017f2d:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017f32:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017f36:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017f40:	83 ec 04             	sub    esp,0x4
c0017f43:	6a 20                	push   0x20
c0017f45:	6a 00                	push   0x0
c0017f47:	68 a0 33 03 c0       	push   0xc00333a0
c0017f4c:	e8 9f 85 fe ff       	call   c00004f0 <memset>
c0017f51:	83 c4 10             	add    esp,0x10
c0017f54:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c0017f5b:	83 ec 0c             	sub    esp,0xc
c0017f5e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017f61:	e8 55 81 ff ff       	call   c00100bb <malloc>
c0017f66:	83 c4 10             	add    esp,0x10
c0017f69:	89 c3                	mov    ebx,eax
c0017f6b:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0017f70:	83 ec 04             	sub    esp,0x4
c0017f73:	50                   	push   eax
c0017f74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f77:	53                   	push   ebx
c0017f78:	e8 59 0a ff ff       	call   c00089d6 <File::File(char const*, Process*)>
c0017f7d:	83 c4 10             	add    esp,0x10
c0017f80:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0017f83:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0017f87:	75 29                	jne    c0017fb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c0017f89:	83 ec 0c             	sub    esp,0xc
c0017f8c:	68 82 ab 02 c0       	push   0xc002ab82
c0017f91:	e8 7a 85 ff ff       	call   c0010510 <KePanic(char const*)>
c0017f96:	83 c4 10             	add    esp,0x10
c0017f99:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017fa1:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017fa6:	85 c0                	test   eax,eax
c0017fa8:	75 01                	jne    c0017fab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x133>
c0017faa:	fb                   	sti    
c0017fab:	b0 00                	mov    al,0x0
c0017fad:	e9 fb 00 00 00       	jmp    c00180ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0017fb2:	83 ec 04             	sub    esp,0x4
c0017fb5:	8d 45 df             	lea    eax,[ebp-0x21]
c0017fb8:	50                   	push   eax
c0017fb9:	8d 45 e0             	lea    eax,[ebp-0x20]
c0017fbc:	50                   	push   eax
c0017fbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017fc0:	e8 31 0d ff ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0017fcb:	0f b6 c0             	movzx  eax,al
c0017fce:	85 c0                	test   eax,eax
c0017fd0:	74 29                	je     c0017ffb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017fd2:	83 ec 0c             	sub    esp,0xc
c0017fd5:	68 96 ab 02 c0       	push   0xc002ab96
c0017fda:	e8 31 85 ff ff       	call   c0010510 <KePanic(char const*)>
c0017fdf:	83 c4 10             	add    esp,0x10
c0017fe2:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017fea:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017fef:	85 c0                	test   eax,eax
c0017ff1:	75 01                	jne    c0017ff4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c0017ff3:	fb                   	sti    
c0017ff4:	b0 00                	mov    al,0x0
c0017ff6:	e9 b2 00 00 00       	jmp    c00180ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0017ffb:	83 ec 08             	sub    esp,0x8
c0017ffe:	6a 01                	push   0x1
c0018000:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0018003:	e8 ec 09 ff ff       	call   c00089f4 <File::open(FileOpenMode)>
c0018008:	83 c4 10             	add    esp,0x10
c001800b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001800e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0018012:	74 26                	je     c001803a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1c2>
c0018014:	83 ec 0c             	sub    esp,0xc
c0018017:	68 af ab 02 c0       	push   0xc002abaf
c001801c:	e8 ef 84 ff ff       	call   c0010510 <KePanic(char const*)>
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001802c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0018031:	85 c0                	test   eax,eax
c0018033:	75 01                	jne    c0018036 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0018035:	fb                   	sti    
c0018036:	b0 00                	mov    al,0x0
c0018038:	eb 73                	jmp    c00180ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c001803a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001803d:	8b 00                	mov    eax,DWORD PTR [eax]
c001803f:	83 c0 0c             	add    eax,0xc
c0018042:	8b 18                	mov    ebx,DWORD PTR [eax]
c0018044:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c0018048:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c001804c:	83 ec 08             	sub    esp,0x8
c001804f:	52                   	push   edx
c0018050:	50                   	push   eax
c0018051:	e8 bd fa ff ff       	call   c0017b13 <Vm::realToLinear(unsigned short, unsigned short)>
c0018056:	83 c4 10             	add    esp,0x10
c0018059:	89 c6                	mov    esi,eax
c001805b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001805e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018061:	83 ec 0c             	sub    esp,0xc
c0018064:	8d 4d d8             	lea    ecx,[ebp-0x28]
c0018067:	51                   	push   ecx
c0018068:	56                   	push   esi
c0018069:	52                   	push   edx
c001806a:	50                   	push   eax
c001806b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001806e:	ff d3                	call   ebx
c0018070:	83 c4 20             	add    esp,0x20
c0018073:	83 ec 0c             	sub    esp,0xc
c0018076:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0018079:	e8 d4 09 ff ff       	call   c0008a52 <File::close()>
c001807e:	83 c4 10             	add    esp,0x10
c0018081:	c6 05 89 33 03 c0 00 	mov    BYTE PTR ds:0xc0033389,0x0
c0018088:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0018090:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0018095:	85 c0                	test   eax,eax
c0018097:	75 01                	jne    c001809a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x222>
c0018099:	fb                   	sti    
c001809a:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c001809f:	83 ec 0c             	sub    esp,0xc
c00180a2:	50                   	push   eax
c00180a3:	e8 5c f3 ff ff       	call   c0017404 <unblockTask(ThreadControlBlock*)>
c00180a8:	83 c4 10             	add    esp,0x10
c00180ab:	b0 01                	mov    al,0x1
c00180ad:	8d 65 f8             	lea    esp,[ebp-0x8]
c00180b0:	5b                   	pop    ebx
c00180b1:	5e                   	pop    esi
c00180b2:	5d                   	pop    ebp
c00180b3:	c3                   	ret    

c00180b4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00180b4:	55                   	push   ebp
c00180b5:	89 e5                	mov    ebp,esp
c00180b7:	83 ec 68             	sub    esp,0x68
c00180ba:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00180bd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00180c0:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c00180c4:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c00180c8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c00180cf:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c00180d2:	83 e8 06             	sub    eax,0x6
c00180d5:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c00180d9:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c00180dd:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c00180e1:	52                   	push   edx
c00180e2:	50                   	push   eax
c00180e3:	e8 2b fa ff ff       	call   c0017b13 <Vm::realToLinear(unsigned short, unsigned short)>
c00180e8:	83 c4 08             	add    esp,0x8
c00180eb:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00180ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180f1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00180f4:	83 e8 06             	sub    eax,0x6
c00180f7:	0f b7 d0             	movzx  edx,ax
c00180fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180fd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018103:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018106:	83 c0 02             	add    eax,0x2
c0018109:	0f b7 c0             	movzx  eax,ax
c001810c:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001810f:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0018112:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c0018116:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0018119:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001811c:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c0018120:	88 c2                	mov    dl,al
c0018122:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018125:	88 10                	mov    BYTE PTR [eax],dl
c0018127:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c001812b:	c1 e8 08             	shr    eax,0x8
c001812e:	89 c2                	mov    edx,eax
c0018130:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018133:	83 c0 01             	add    eax,0x1
c0018136:	88 10                	mov    BYTE PTR [eax],dl
c0018138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001813b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001813e:	0f b7 c0             	movzx  eax,ax
c0018141:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018144:	83 c2 02             	add    edx,0x2
c0018147:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c001814a:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c001814e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018151:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0018154:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0018158:	88 c2                	mov    dl,al
c001815a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001815d:	88 10                	mov    BYTE PTR [eax],dl
c001815f:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c0018163:	c1 e8 08             	shr    eax,0x8
c0018166:	89 c2                	mov    edx,eax
c0018168:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001816b:	83 c0 01             	add    eax,0x1
c001816e:	88 10                	mov    BYTE PTR [eax],dl
c0018170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018173:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018176:	0f b7 c0             	movzx  eax,ax
c0018179:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001817c:	83 c2 04             	add    edx,0x4
c001817f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018182:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c0018186:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018189:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001818c:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c0018190:	88 c2                	mov    dl,al
c0018192:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018195:	88 10                	mov    BYTE PTR [eax],dl
c0018197:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c001819b:	c1 e8 08             	shr    eax,0x8
c001819e:	89 c2                	mov    edx,eax
c00181a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00181a3:	83 c0 01             	add    eax,0x1
c00181a6:	88 10                	mov    BYTE PTR [eax],dl
c00181a8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00181ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00181af:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00181b2:	0f b6 c0             	movzx  eax,al
c00181b5:	85 c0                	test   eax,eax
c00181b7:	74 5e                	je     c0018217 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c00181b9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00181bc:	83 c0 04             	add    eax,0x4
c00181bf:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c00181c2:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00181c5:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00181c8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00181cb:	8a 00                	mov    al,BYTE PTR [eax]
c00181cd:	0f b6 c0             	movzx  eax,al
c00181d0:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c00181d3:	83 c2 01             	add    edx,0x1
c00181d6:	8a 12                	mov    dl,BYTE PTR [edx]
c00181d8:	0f b6 d2             	movzx  edx,dl
c00181db:	c1 e2 08             	shl    edx,0x8
c00181de:	09 d0                	or     eax,edx
c00181e0:	80 cc 02             	or     ah,0x2
c00181e3:	0f b7 c0             	movzx  eax,ax
c00181e6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00181e9:	83 c2 04             	add    edx,0x4
c00181ec:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00181ef:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c00181f3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00181f6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00181f9:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c00181fd:	88 c2                	mov    dl,al
c00181ff:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018202:	88 10                	mov    BYTE PTR [eax],dl
c0018204:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0018208:	c1 e8 08             	shr    eax,0x8
c001820b:	89 c2                	mov    edx,eax
c001820d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018210:	83 c0 01             	add    eax,0x1
c0018213:	88 10                	mov    BYTE PTR [eax],dl
c0018215:	eb 5e                	jmp    c0018275 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c0018217:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001821a:	83 c0 04             	add    eax,0x4
c001821d:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018220:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018223:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018226:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018229:	8a 00                	mov    al,BYTE PTR [eax]
c001822b:	0f b6 c0             	movzx  eax,al
c001822e:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c0018231:	83 c2 01             	add    edx,0x1
c0018234:	8a 12                	mov    dl,BYTE PTR [edx]
c0018236:	0f b6 d2             	movzx  edx,dl
c0018239:	c1 e2 08             	shl    edx,0x8
c001823c:	09 d0                	or     eax,edx
c001823e:	0f b7 c0             	movzx  eax,ax
c0018241:	25 ff fd 00 00       	and    eax,0xfdff
c0018246:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018249:	83 c2 04             	add    edx,0x4
c001824c:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c001824f:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c0018253:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018256:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0018259:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c001825d:	88 c2                	mov    dl,al
c001825f:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018262:	88 10                	mov    BYTE PTR [eax],dl
c0018264:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c0018268:	c1 e8 08             	shr    eax,0x8
c001826b:	89 c2                	mov    edx,eax
c001826d:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018270:	83 c0 01             	add    eax,0x1
c0018273:	88 10                	mov    BYTE PTR [eax],dl
c0018275:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001827a:	8b 00                	mov    eax,DWORD PTR [eax]
c001827c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018280:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018283:	c1 e0 02             	shl    eax,0x2
c0018286:	8d 50 02             	lea    edx,[eax+0x2]
c0018289:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001828c:	01 d0                	add    eax,edx
c001828e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018291:	0f b7 d0             	movzx  edx,ax
c0018294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018297:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001829a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001829d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00182a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00182a7:	01 d0                	add    eax,edx
c00182a9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00182ac:	0f b7 d0             	movzx  edx,ax
c00182af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00182b5:	90                   	nop
c00182b6:	c9                   	leave  
c00182b7:	c3                   	ret    

c00182b8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00182b8:	55                   	push   ebp
c00182b9:	89 e5                	mov    ebp,esp
c00182bb:	83 ec 28             	sub    esp,0x28
c00182be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00182c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00182c4:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00182c8:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00182cc:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00182d0:	c1 e0 04             	shl    eax,0x4
c00182d3:	89 c2                	mov    edx,eax
c00182d5:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00182d9:	01 d0                	add    eax,edx
c00182db:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00182e0:	7e 10                	jle    c00182f2 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c00182e2:	83 ec 0c             	sub    esp,0xc
c00182e5:	68 c8 ab 02 c0       	push   0xc002abc8
c00182ea:	e8 21 82 ff ff       	call   c0010510 <KePanic(char const*)>
c00182ef:	83 c4 10             	add    esp,0x10
c00182f2:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00182f6:	c1 e0 04             	shl    eax,0x4
c00182f9:	89 c2                	mov    edx,eax
c00182fb:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00182ff:	01 d0                	add    eax,edx
c0018301:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018304:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018307:	8a 00                	mov    al,BYTE PTR [eax]
c0018309:	c9                   	leave  
c001830a:	c3                   	ret    

c001830b <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001830b:	55                   	push   ebp
c001830c:	89 e5                	mov    ebp,esp
c001830e:	83 ec 28             	sub    esp,0x28
c0018311:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018314:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018317:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001831b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001831f:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018323:	c1 e0 04             	shl    eax,0x4
c0018326:	89 c2                	mov    edx,eax
c0018328:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001832c:	01 d0                	add    eax,edx
c001832e:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018333:	7e 10                	jle    c0018345 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0018335:	83 ec 0c             	sub    esp,0xc
c0018338:	68 c8 ab 02 c0       	push   0xc002abc8
c001833d:	e8 ce 81 ff ff       	call   c0010510 <KePanic(char const*)>
c0018342:	83 c4 10             	add    esp,0x10
c0018345:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018349:	c1 e0 04             	shl    eax,0x4
c001834c:	89 c2                	mov    edx,eax
c001834e:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018352:	01 d0                	add    eax,edx
c0018354:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018357:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001835a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001835d:	c9                   	leave  
c001835e:	c3                   	ret    

c001835f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001835f:	55                   	push   ebp
c0018360:	89 e5                	mov    ebp,esp
c0018362:	83 ec 28             	sub    esp,0x28
c0018365:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018368:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001836b:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001836f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018373:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018377:	c1 e0 04             	shl    eax,0x4
c001837a:	89 c2                	mov    edx,eax
c001837c:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018380:	01 d0                	add    eax,edx
c0018382:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018387:	7e 10                	jle    c0018399 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c0018389:	83 ec 0c             	sub    esp,0xc
c001838c:	68 c8 ab 02 c0       	push   0xc002abc8
c0018391:	e8 7a 81 ff ff       	call   c0010510 <KePanic(char const*)>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001839d:	c1 e0 04             	shl    eax,0x4
c00183a0:	89 c2                	mov    edx,eax
c00183a2:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00183a6:	01 d0                	add    eax,edx
c00183a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00183ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00183ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00183b0:	c9                   	leave  
c00183b1:	c3                   	ret    

c00183b2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00183b2:	55                   	push   ebp
c00183b3:	89 e5                	mov    ebp,esp
c00183b5:	83 ec 28             	sub    esp,0x28
c00183b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00183bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00183be:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00183c1:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00183c5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00183c9:	88 c8                	mov    al,cl
c00183cb:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c00183ce:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00183d2:	c1 e0 04             	shl    eax,0x4
c00183d5:	89 c2                	mov    edx,eax
c00183d7:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00183db:	01 d0                	add    eax,edx
c00183dd:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00183e2:	7e 10                	jle    c00183f4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c00183e4:	83 ec 0c             	sub    esp,0xc
c00183e7:	68 c8 ab 02 c0       	push   0xc002abc8
c00183ec:	e8 1f 81 ff ff       	call   c0010510 <KePanic(char const*)>
c00183f1:	83 c4 10             	add    esp,0x10
c00183f4:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00183f8:	c1 e0 04             	shl    eax,0x4
c00183fb:	89 c2                	mov    edx,eax
c00183fd:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018401:	01 d0                	add    eax,edx
c0018403:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018409:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c001840c:	88 10                	mov    BYTE PTR [eax],dl
c001840e:	90                   	nop
c001840f:	c9                   	leave  
c0018410:	c3                   	ret    

c0018411 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018411:	55                   	push   ebp
c0018412:	89 e5                	mov    ebp,esp
c0018414:	83 ec 28             	sub    esp,0x28
c0018417:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001841a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001841d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018420:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0018424:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c0018428:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001842c:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018430:	c1 e0 04             	shl    eax,0x4
c0018433:	89 c2                	mov    edx,eax
c0018435:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018439:	01 d0                	add    eax,edx
c001843b:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018440:	7e 10                	jle    c0018452 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c0018442:	83 ec 0c             	sub    esp,0xc
c0018445:	68 c8 ab 02 c0       	push   0xc002abc8
c001844a:	e8 c1 80 ff ff       	call   c0010510 <KePanic(char const*)>
c001844f:	83 c4 10             	add    esp,0x10
c0018452:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018456:	c1 e0 04             	shl    eax,0x4
c0018459:	89 c2                	mov    edx,eax
c001845b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001845f:	01 d0                	add    eax,edx
c0018461:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018464:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018467:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c001846a:	66 89 02             	mov    WORD PTR [edx],ax
c001846d:	90                   	nop
c001846e:	c9                   	leave  
c001846f:	c3                   	ret    

c0018470 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018470:	55                   	push   ebp
c0018471:	89 e5                	mov    ebp,esp
c0018473:	83 ec 28             	sub    esp,0x28
c0018476:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018479:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001847c:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018480:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018484:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018488:	c1 e0 04             	shl    eax,0x4
c001848b:	89 c2                	mov    edx,eax
c001848d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018491:	01 d0                	add    eax,edx
c0018493:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018498:	7e 10                	jle    c00184aa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c001849a:	83 ec 0c             	sub    esp,0xc
c001849d:	68 c8 ab 02 c0       	push   0xc002abc8
c00184a2:	e8 69 80 ff ff       	call   c0010510 <KePanic(char const*)>
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00184ae:	c1 e0 04             	shl    eax,0x4
c00184b1:	89 c2                	mov    edx,eax
c00184b3:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00184b7:	01 d0                	add    eax,edx
c00184b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00184bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00184bf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00184c2:	89 10                	mov    DWORD PTR [eax],edx
c00184c4:	90                   	nop
c00184c5:	c9                   	leave  
c00184c6:	c3                   	ret    

c00184c7 <Vm::faultHandler(regs*)>:
c00184c7:	55                   	push   ebp
c00184c8:	89 e5                	mov    ebp,esp
c00184ca:	57                   	push   edi
c00184cb:	56                   	push   esi
c00184cc:	53                   	push   ebx
c00184cd:	81 ec ac 00 00 00    	sub    esp,0xac
c00184d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00184d9:	0f b7 d0             	movzx  edx,ax
c00184dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184e2:	0f b7 c0             	movzx  eax,ax
c00184e5:	52                   	push   edx
c00184e6:	50                   	push   eax
c00184e7:	e8 27 f6 ff ff       	call   c0017b13 <Vm::realToLinear(unsigned short, unsigned short)>
c00184ec:	83 c4 08             	add    esp,0x8
c00184ef:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00184f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184f5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00184f8:	0f b7 d0             	movzx  edx,ax
c00184fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184fe:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018501:	0f b7 c0             	movzx  eax,ax
c0018504:	52                   	push   edx
c0018505:	50                   	push   eax
c0018506:	e8 08 f6 ff ff       	call   c0017b13 <Vm::realToLinear(unsigned short, unsigned short)>
c001850b:	83 c4 08             	add    esp,0x8
c001850e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018514:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018517:	0f b7 d0             	movzx  edx,ax
c001851a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001851d:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018520:	0f b7 c0             	movzx  eax,ax
c0018523:	52                   	push   edx
c0018524:	50                   	push   eax
c0018525:	e8 e9 f5 ff ff       	call   c0017b13 <Vm::realToLinear(unsigned short, unsigned short)>
c001852a:	83 c4 08             	add    esp,0x8
c001852d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0018530:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0018537:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c001853b:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c001853f:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0018543:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018546:	8a 00                	mov    al,BYTE PTR [eax]
c0018548:	0f b6 c0             	movzx  eax,al
c001854b:	83 e8 26             	sub    eax,0x26
c001854e:	3d d5 00 00 00       	cmp    eax,0xd5
c0018553:	0f 87 f4 0c 00 00    	ja     c001924d <Vm::faultHandler(regs*)+0xd86>
c0018559:	8b 04 85 48 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53b8]
c0018560:	ff e0                	jmp    eax
c0018562:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0018566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018569:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001856c:	8d 50 01             	lea    edx,[eax+0x1]
c001856f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018572:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018575:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018579:	e9 83 0d 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c001857e:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0018582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018585:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018588:	8d 50 01             	lea    edx,[eax+0x1]
c001858b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001858e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018591:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018595:	e9 67 0d 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c001859a:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c001859e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185a4:	8d 50 01             	lea    edx,[eax+0x1]
c00185a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185ad:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00185b1:	e9 4b 0d 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c00185b6:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c00185ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185c0:	8d 50 01             	lea    edx,[eax+0x1]
c00185c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185c9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00185cd:	e9 2f 0d 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c00185d2:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c00185d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185dc:	8d 50 01             	lea    edx,[eax+0x1]
c00185df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185e5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00185e9:	e9 13 0d 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c00185ee:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c00185f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185f8:	8d 50 01             	lea    edx,[eax+0x1]
c00185fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018601:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018605:	e9 f7 0c 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c001860a:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001860e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018611:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018614:	8d 50 01             	lea    edx,[eax+0x1]
c0018617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001861a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001861d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018621:	e9 db 0c 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c0018626:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c001862a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001862d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018630:	8d 50 01             	lea    edx,[eax+0x1]
c0018633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018636:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018639:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001863d:	e9 bf 0c 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c0018642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018645:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018648:	8d 50 01             	lea    edx,[eax+0x1]
c001864b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001864e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018651:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018655:	e9 a7 0c 00 00       	jmp    c0019301 <Vm::faultHandler(regs*)+0xe3a>
c001865a:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001865e:	85 c0                	test   eax,eax
c0018660:	74 5b                	je     c00186bd <Vm::faultHandler(regs*)+0x1f6>
c0018662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018665:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018668:	83 e8 04             	sub    eax,0x4
c001866b:	0f b7 d0             	movzx  edx,ax
c001866e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018671:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018674:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c0018678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001867b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001867e:	25 ff 0d 00 00       	and    eax,0xdff
c0018683:	89 c2                	mov    edx,eax
c0018685:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018688:	89 10                	mov    DWORD PTR [eax],edx
c001868a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001868f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018691:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018694:	0f b6 c0             	movzx  eax,al
c0018697:	85 c0                	test   eax,eax
c0018699:	74 11                	je     c00186ac <Vm::faultHandler(regs*)+0x1e5>
c001869b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001869e:	8b 00                	mov    eax,DWORD PTR [eax]
c00186a0:	80 cc 02             	or     ah,0x2
c00186a3:	89 c2                	mov    edx,eax
c00186a5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186a8:	89 10                	mov    DWORD PTR [eax],edx
c00186aa:	eb 64                	jmp    c0018710 <Vm::faultHandler(regs*)+0x249>
c00186ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186af:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b1:	80 e4 fd             	and    ah,0xfd
c00186b4:	89 c2                	mov    edx,eax
c00186b6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186b9:	89 10                	mov    DWORD PTR [eax],edx
c00186bb:	eb 53                	jmp    c0018710 <Vm::faultHandler(regs*)+0x249>
c00186bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186c0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00186c3:	83 e8 02             	sub    eax,0x2
c00186c6:	0f b7 d0             	movzx  edx,ax
c00186c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186cc:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00186cf:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c00186d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00186d9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00186dc:	66 89 02             	mov    WORD PTR [edx],ax
c00186df:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00186e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00186e6:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00186e9:	0f b6 c0             	movzx  eax,al
c00186ec:	85 c0                	test   eax,eax
c00186ee:	74 11                	je     c0018701 <Vm::faultHandler(regs*)+0x23a>
c00186f0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00186f3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00186f6:	80 cc 02             	or     ah,0x2
c00186f9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00186fc:	66 89 02             	mov    WORD PTR [edx],ax
c00186ff:	eb 0f                	jmp    c0018710 <Vm::faultHandler(regs*)+0x249>
c0018701:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018704:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018707:	80 e4 fd             	and    ah,0xfd
c001870a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001870d:	66 89 02             	mov    WORD PTR [edx],ax
c0018710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018713:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018716:	8d 50 01             	lea    edx,[eax+0x1]
c0018719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001871c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001871f:	b0 01                	mov    al,0x1
c0018721:	e9 e0 0b 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018726:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001872a:	85 c0                	test   eax,eax
c001872c:	74 46                	je     c0018774 <Vm::faultHandler(regs*)+0x2ad>
c001872e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018731:	8b 00                	mov    eax,DWORD PTR [eax]
c0018733:	25 ff 0d 00 00       	and    eax,0xdff
c0018738:	0d 00 02 02 00       	or     eax,0x20200
c001873d:	89 c2                	mov    edx,eax
c001873f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018742:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018745:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018748:	8b 00                	mov    eax,DWORD PTR [eax]
c001874a:	25 00 02 00 00       	and    eax,0x200
c001874f:	89 c2                	mov    edx,eax
c0018751:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018756:	8b 00                	mov    eax,DWORD PTR [eax]
c0018758:	85 d2                	test   edx,edx
c001875a:	0f 95 c2             	setne  dl
c001875d:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018763:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018766:	83 c0 04             	add    eax,0x4
c0018769:	0f b7 d0             	movzx  edx,ax
c001876c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001876f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018772:	eb 47                	jmp    c00187bb <Vm::faultHandler(regs*)+0x2f4>
c0018774:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018777:	66 8b 00             	mov    ax,WORD PTR [eax]
c001877a:	0f b7 c0             	movzx  eax,ax
c001877d:	0d 00 02 02 00       	or     eax,0x20200
c0018782:	89 c2                	mov    edx,eax
c0018784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018787:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001878a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001878d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018790:	0f b7 c0             	movzx  eax,ax
c0018793:	25 00 02 00 00       	and    eax,0x200
c0018798:	89 c2                	mov    edx,eax
c001879a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001879f:	8b 00                	mov    eax,DWORD PTR [eax]
c00187a1:	85 d2                	test   edx,edx
c00187a3:	0f 95 c2             	setne  dl
c00187a6:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00187a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ac:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00187af:	83 c0 02             	add    eax,0x2
c00187b2:	0f b7 d0             	movzx  edx,ax
c00187b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187b8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00187bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187c1:	8d 50 01             	lea    edx,[eax+0x1]
c00187c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187ca:	b0 01                	mov    al,0x1
c00187cc:	e9 35 0b 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c00187d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187d4:	83 c0 01             	add    eax,0x1
c00187d7:	8a 00                	mov    al,BYTE PTR [eax]
c00187d9:	0f b6 c0             	movzx  eax,al
c00187dc:	3d ee 00 00 00       	cmp    eax,0xee
c00187e1:	75 19                	jne    c00187fc <Vm::faultHandler(regs*)+0x335>
c00187e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187e6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00187e9:	83 ec 0c             	sub    esp,0xc
c00187ec:	50                   	push   eax
c00187ed:	e8 ec f3 ff ff       	call   c0017bde <Vm::mainloop3(unsigned long)>
c00187f2:	83 c4 10             	add    esp,0x10
c00187f5:	b0 01                	mov    al,0x1
c00187f7:	e9 0a 0b 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c00187fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ff:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018802:	0f b7 c8             	movzx  ecx,ax
c0018805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018808:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001880b:	0f b7 d0             	movzx  edx,ax
c001880e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018811:	83 c0 01             	add    eax,0x1
c0018814:	8a 00                	mov    al,BYTE PTR [eax]
c0018816:	0f b6 c0             	movzx  eax,al
c0018819:	83 ec 0c             	sub    esp,0xc
c001881c:	51                   	push   ecx
c001881d:	52                   	push   edx
c001881e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0018821:	50                   	push   eax
c0018822:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018825:	e8 8a f8 ff ff       	call   c00180b4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001882a:	83 c4 20             	add    esp,0x20
c001882d:	b0 01                	mov    al,0x1
c001882f:	e9 d2 0a 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018834:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018839:	8b 00                	mov    eax,DWORD PTR [eax]
c001883b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001883f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018842:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018845:	8d 50 01             	lea    edx,[eax+0x1]
c0018848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001884b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001884e:	b0 01                	mov    al,0x1
c0018850:	e9 b1 0a 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018855:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001885a:	8b 00                	mov    eax,DWORD PTR [eax]
c001885c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018863:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018866:	8d 50 01             	lea    edx,[eax+0x1]
c0018869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001886c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001886f:	b0 01                	mov    al,0x1
c0018871:	e9 90 0a 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018876:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018879:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c001887c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c001887f:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0018882:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0018885:	8a 00                	mov    al,BYTE PTR [eax]
c0018887:	0f b6 c0             	movzx  eax,al
c001888a:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c001888d:	83 c2 01             	add    edx,0x1
c0018890:	8a 12                	mov    dl,BYTE PTR [edx]
c0018892:	0f b6 d2             	movzx  edx,dl
c0018895:	c1 e2 08             	shl    edx,0x8
c0018898:	09 d0                	or     eax,edx
c001889a:	0f b7 d0             	movzx  edx,ax
c001889d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00188a3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00188a6:	83 c0 02             	add    eax,0x2
c00188a9:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00188ac:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00188af:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c00188b2:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00188b5:	8a 00                	mov    al,BYTE PTR [eax]
c00188b7:	0f b6 c0             	movzx  eax,al
c00188ba:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c00188bd:	83 c2 01             	add    edx,0x1
c00188c0:	8a 12                	mov    dl,BYTE PTR [edx]
c00188c2:	0f b6 d2             	movzx  edx,dl
c00188c5:	c1 e2 08             	shl    edx,0x8
c00188c8:	09 d0                	or     eax,edx
c00188ca:	0f b7 d0             	movzx  edx,ax
c00188cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00188d3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00188d6:	83 c0 04             	add    eax,0x4
c00188d9:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c00188dc:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00188df:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c00188e2:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c00188e5:	8a 00                	mov    al,BYTE PTR [eax]
c00188e7:	0f b6 c0             	movzx  eax,al
c00188ea:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c00188ed:	83 c2 01             	add    edx,0x1
c00188f0:	8a 12                	mov    dl,BYTE PTR [edx]
c00188f2:	0f b6 d2             	movzx  edx,dl
c00188f5:	c1 e2 08             	shl    edx,0x8
c00188f8:	09 d0                	or     eax,edx
c00188fa:	0f b7 c0             	movzx  eax,ax
c00188fd:	0d 00 02 02 00       	or     eax,0x20200
c0018902:	89 c2                	mov    edx,eax
c0018904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018907:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001890a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001890d:	83 c0 04             	add    eax,0x4
c0018910:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018913:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018916:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018919:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001891c:	8a 00                	mov    al,BYTE PTR [eax]
c001891e:	0f b6 c0             	movzx  eax,al
c0018921:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018924:	83 c2 01             	add    edx,0x1
c0018927:	8a 12                	mov    dl,BYTE PTR [edx]
c0018929:	0f b6 d2             	movzx  edx,dl
c001892c:	c1 e2 08             	shl    edx,0x8
c001892f:	09 d0                	or     eax,edx
c0018931:	0f b7 c0             	movzx  eax,ax
c0018934:	25 00 02 00 00       	and    eax,0x200
c0018939:	89 c2                	mov    edx,eax
c001893b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018940:	8b 00                	mov    eax,DWORD PTR [eax]
c0018942:	85 d2                	test   edx,edx
c0018944:	0f 95 c2             	setne  dl
c0018947:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c001894a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001894d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018950:	83 c0 06             	add    eax,0x6
c0018953:	0f b7 d0             	movzx  edx,ax
c0018956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018959:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001895c:	b0 01                	mov    al,0x1
c001895e:	e9 a3 09 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018963:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0018969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001896c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001896f:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c0018973:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018977:	85 c0                	test   eax,eax
c0018979:	74 7a                	je     c00189f5 <Vm::faultHandler(regs*)+0x52e>
c001897b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001897e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018981:	3d ff ff 00 00       	cmp    eax,0xffff
c0018986:	76 6d                	jbe    c00189f5 <Vm::faultHandler(regs*)+0x52e>
c0018988:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001898b:	83 c0 05             	add    eax,0x5
c001898e:	8a 00                	mov    al,BYTE PTR [eax]
c0018990:	0f b6 c0             	movzx  eax,al
c0018993:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018999:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001899c:	83 c0 04             	add    eax,0x4
c001899f:	8a 00                	mov    al,BYTE PTR [eax]
c00189a1:	0f b6 f8             	movzx  edi,al
c00189a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189a7:	83 c0 03             	add    eax,0x3
c00189aa:	8a 00                	mov    al,BYTE PTR [eax]
c00189ac:	0f b6 f0             	movzx  esi,al
c00189af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189b2:	83 c0 02             	add    eax,0x2
c00189b5:	8a 00                	mov    al,BYTE PTR [eax]
c00189b7:	0f b6 d8             	movzx  ebx,al
c00189ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189bd:	83 c0 01             	add    eax,0x1
c00189c0:	8a 00                	mov    al,BYTE PTR [eax]
c00189c2:	0f b6 c8             	movzx  ecx,al
c00189c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189c8:	8a 00                	mov    al,BYTE PTR [eax]
c00189ca:	0f b6 d0             	movzx  edx,al
c00189cd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189d0:	8a 00                	mov    al,BYTE PTR [eax]
c00189d2:	0f b6 c0             	movzx  eax,al
c00189d5:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00189db:	57                   	push   edi
c00189dc:	56                   	push   esi
c00189dd:	53                   	push   ebx
c00189de:	51                   	push   ecx
c00189df:	52                   	push   edx
c00189e0:	50                   	push   eax
c00189e1:	68 e8 ab 02 c0       	push   0xc002abe8
c00189e6:	e8 91 e5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00189eb:	83 c4 20             	add    esp,0x20
c00189ee:	b0 00                	mov    al,0x0
c00189f0:	e9 11 09 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c00189f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189f8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00189fb:	0f b7 c0             	movzx  eax,ax
c00189fe:	83 ec 0c             	sub    esp,0xc
c0018a01:	50                   	push   eax
c0018a02:	e8 6e f0 ff ff       	call   c0017a75 <Vm::inbv(unsigned short)>
c0018a07:	83 c4 10             	add    esp,0x10
c0018a0a:	0f b6 c8             	movzx  ecx,al
c0018a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a13:	0f b7 d0             	movzx  edx,ax
c0018a16:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018a1a:	83 ec 04             	sub    esp,0x4
c0018a1d:	51                   	push   ecx
c0018a1e:	52                   	push   edx
c0018a1f:	50                   	push   eax
c0018a20:	e8 8d f9 ff ff       	call   c00183b2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018a25:	83 c4 10             	add    esp,0x10
c0018a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a2b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a2e:	25 00 04 00 00       	and    eax,0x400
c0018a33:	85 c0                	test   eax,eax
c0018a35:	74 14                	je     c0018a4b <Vm::faultHandler(regs*)+0x584>
c0018a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a3d:	83 e8 01             	sub    eax,0x1
c0018a40:	0f b7 d0             	movzx  edx,ax
c0018a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018a49:	eb 12                	jmp    c0018a5d <Vm::faultHandler(regs*)+0x596>
c0018a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a4e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a51:	83 c0 01             	add    eax,0x1
c0018a54:	0f b7 d0             	movzx  edx,ax
c0018a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a5a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a60:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a63:	8d 50 01             	lea    edx,[eax+0x1]
c0018a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a69:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018a6c:	b0 01                	mov    al,0x1
c0018a6e:	e9 93 08 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018a73:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018a7f:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018a83:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018a87:	85 c0                	test   eax,eax
c0018a89:	74 7a                	je     c0018b05 <Vm::faultHandler(regs*)+0x63e>
c0018a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a8e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a91:	3d ff ff 00 00       	cmp    eax,0xffff
c0018a96:	76 6d                	jbe    c0018b05 <Vm::faultHandler(regs*)+0x63e>
c0018a98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a9b:	83 c0 05             	add    eax,0x5
c0018a9e:	8a 00                	mov    al,BYTE PTR [eax]
c0018aa0:	0f b6 c0             	movzx  eax,al
c0018aa3:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018aa9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018aac:	83 c0 04             	add    eax,0x4
c0018aaf:	8a 00                	mov    al,BYTE PTR [eax]
c0018ab1:	0f b6 f8             	movzx  edi,al
c0018ab4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ab7:	83 c0 03             	add    eax,0x3
c0018aba:	8a 00                	mov    al,BYTE PTR [eax]
c0018abc:	0f b6 f0             	movzx  esi,al
c0018abf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ac2:	83 c0 02             	add    eax,0x2
c0018ac5:	8a 00                	mov    al,BYTE PTR [eax]
c0018ac7:	0f b6 d8             	movzx  ebx,al
c0018aca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018acd:	83 c0 01             	add    eax,0x1
c0018ad0:	8a 00                	mov    al,BYTE PTR [eax]
c0018ad2:	0f b6 c8             	movzx  ecx,al
c0018ad5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ad8:	8a 00                	mov    al,BYTE PTR [eax]
c0018ada:	0f b6 d0             	movzx  edx,al
c0018add:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ae0:	8a 00                	mov    al,BYTE PTR [eax]
c0018ae2:	0f b6 c0             	movzx  eax,al
c0018ae5:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018aeb:	57                   	push   edi
c0018aec:	56                   	push   esi
c0018aed:	53                   	push   ebx
c0018aee:	51                   	push   ecx
c0018aef:	52                   	push   edx
c0018af0:	50                   	push   eax
c0018af1:	68 e8 ab 02 c0       	push   0xc002abe8
c0018af6:	e8 81 e4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018afb:	83 c4 20             	add    esp,0x20
c0018afe:	b0 00                	mov    al,0x0
c0018b00:	e9 01 08 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018b05:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018b09:	85 c0                	test   eax,eax
c0018b0b:	74 6f                	je     c0018b7c <Vm::faultHandler(regs*)+0x6b5>
c0018b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b10:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018b13:	0f b7 c0             	movzx  eax,ax
c0018b16:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c0018b1a:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c0018b1e:	89 c2                	mov    edx,eax
c0018b20:	ed                   	in     eax,dx
c0018b21:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c0018b24:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c0018b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018b2d:	0f b7 d0             	movzx  edx,ax
c0018b30:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018b34:	83 ec 04             	sub    esp,0x4
c0018b37:	51                   	push   ecx
c0018b38:	52                   	push   edx
c0018b39:	50                   	push   eax
c0018b3a:	e8 31 f9 ff ff       	call   c0018470 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018b3f:	83 c4 10             	add    esp,0x10
c0018b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b48:	25 00 04 00 00       	and    eax,0x400
c0018b4d:	85 c0                	test   eax,eax
c0018b4f:	74 17                	je     c0018b68 <Vm::faultHandler(regs*)+0x6a1>
c0018b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b54:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018b57:	83 e8 04             	sub    eax,0x4
c0018b5a:	0f b7 d0             	movzx  edx,ax
c0018b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018b63:	e9 83 00 00 00       	jmp    c0018beb <Vm::faultHandler(regs*)+0x724>
c0018b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b6b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018b6e:	83 c0 04             	add    eax,0x4
c0018b71:	0f b7 d0             	movzx  edx,ax
c0018b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018b7a:	eb 6f                	jmp    c0018beb <Vm::faultHandler(regs*)+0x724>
c0018b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b7f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018b82:	0f b7 c0             	movzx  eax,ax
c0018b85:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018b89:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c0018b8d:	89 c2                	mov    edx,eax
c0018b8f:	66 ed                	in     ax,dx
c0018b91:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c0018b95:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018b98:	0f b7 c8             	movzx  ecx,ax
c0018b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ba1:	0f b7 d0             	movzx  edx,ax
c0018ba4:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018ba8:	83 ec 04             	sub    esp,0x4
c0018bab:	51                   	push   ecx
c0018bac:	52                   	push   edx
c0018bad:	50                   	push   eax
c0018bae:	e8 5e f8 ff ff       	call   c0018411 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018bbc:	25 00 04 00 00       	and    eax,0x400
c0018bc1:	85 c0                	test   eax,eax
c0018bc3:	74 14                	je     c0018bd9 <Vm::faultHandler(regs*)+0x712>
c0018bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bcb:	83 e8 02             	sub    eax,0x2
c0018bce:	0f b7 d0             	movzx  edx,ax
c0018bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bd4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018bd7:	eb 12                	jmp    c0018beb <Vm::faultHandler(regs*)+0x724>
c0018bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bdf:	83 c0 02             	add    eax,0x2
c0018be2:	0f b7 d0             	movzx  edx,ax
c0018be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018be8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018bf1:	8d 50 01             	lea    edx,[eax+0x1]
c0018bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bf7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018bfa:	b0 01                	mov    al,0x1
c0018bfc:	e9 05 07 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018c01:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018c07:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018c0b:	83 f8 06             	cmp    eax,0x6
c0018c0e:	77 4f                	ja     c0018c5f <Vm::faultHandler(regs*)+0x798>
c0018c10:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c0018c17:	ff e0                	jmp    eax
c0018c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018c1f:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c23:	eb 3a                	jmp    c0018c5f <Vm::faultHandler(regs*)+0x798>
c0018c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c2b:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c2f:	eb 2e                	jmp    c0018c5f <Vm::faultHandler(regs*)+0x798>
c0018c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018c37:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c3b:	eb 22                	jmp    c0018c5f <Vm::faultHandler(regs*)+0x798>
c0018c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018c43:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c47:	eb 16                	jmp    c0018c5f <Vm::faultHandler(regs*)+0x798>
c0018c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c4e:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c52:	eb 0b                	jmp    c0018c5f <Vm::faultHandler(regs*)+0x798>
c0018c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c57:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018c5a:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c5e:	90                   	nop
c0018c5f:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018c63:	85 c0                	test   eax,eax
c0018c65:	74 7a                	je     c0018ce1 <Vm::faultHandler(regs*)+0x81a>
c0018c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c6a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018c6d:	3d ff ff 00 00       	cmp    eax,0xffff
c0018c72:	76 6d                	jbe    c0018ce1 <Vm::faultHandler(regs*)+0x81a>
c0018c74:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c77:	83 c0 05             	add    eax,0x5
c0018c7a:	8a 00                	mov    al,BYTE PTR [eax]
c0018c7c:	0f b6 c0             	movzx  eax,al
c0018c7f:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018c85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c88:	83 c0 04             	add    eax,0x4
c0018c8b:	8a 00                	mov    al,BYTE PTR [eax]
c0018c8d:	0f b6 f8             	movzx  edi,al
c0018c90:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c93:	83 c0 03             	add    eax,0x3
c0018c96:	8a 00                	mov    al,BYTE PTR [eax]
c0018c98:	0f b6 f0             	movzx  esi,al
c0018c9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c9e:	83 c0 02             	add    eax,0x2
c0018ca1:	8a 00                	mov    al,BYTE PTR [eax]
c0018ca3:	0f b6 d8             	movzx  ebx,al
c0018ca6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ca9:	83 c0 01             	add    eax,0x1
c0018cac:	8a 00                	mov    al,BYTE PTR [eax]
c0018cae:	0f b6 c8             	movzx  ecx,al
c0018cb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cb4:	8a 00                	mov    al,BYTE PTR [eax]
c0018cb6:	0f b6 d0             	movzx  edx,al
c0018cb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0018cbe:	0f b6 c0             	movzx  eax,al
c0018cc1:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018cc7:	57                   	push   edi
c0018cc8:	56                   	push   esi
c0018cc9:	53                   	push   ebx
c0018cca:	51                   	push   ecx
c0018ccb:	52                   	push   edx
c0018ccc:	50                   	push   eax
c0018ccd:	68 e8 ab 02 c0       	push   0xc002abe8
c0018cd2:	e8 a5 e2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018cd7:	83 c4 20             	add    esp,0x20
c0018cda:	b0 00                	mov    al,0x0
c0018cdc:	e9 25 06 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ce4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ce7:	0f b7 d0             	movzx  edx,ax
c0018cea:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0018cee:	83 ec 08             	sub    esp,0x8
c0018cf1:	52                   	push   edx
c0018cf2:	50                   	push   eax
c0018cf3:	e8 c0 f5 ff ff       	call   c00182b8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018cf8:	83 c4 10             	add    esp,0x10
c0018cfb:	0f b6 d0             	movzx  edx,al
c0018cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d01:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018d04:	0f b7 c0             	movzx  eax,ax
c0018d07:	83 ec 08             	sub    esp,0x8
c0018d0a:	52                   	push   edx
c0018d0b:	50                   	push   eax
c0018d0c:	e8 9b ed ff ff       	call   c0017aac <Vm::outbv(unsigned short, unsigned char)>
c0018d11:	83 c4 10             	add    esp,0x10
c0018d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018d1a:	25 00 04 00 00       	and    eax,0x400
c0018d1f:	85 c0                	test   eax,eax
c0018d21:	74 14                	je     c0018d37 <Vm::faultHandler(regs*)+0x870>
c0018d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d26:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018d29:	83 e8 01             	sub    eax,0x1
c0018d2c:	0f b7 d0             	movzx  edx,ax
c0018d2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d32:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018d35:	eb 12                	jmp    c0018d49 <Vm::faultHandler(regs*)+0x882>
c0018d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d3a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018d3d:	83 c0 01             	add    eax,0x1
c0018d40:	0f b7 d0             	movzx  edx,ax
c0018d43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d46:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d4c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d4f:	8d 50 01             	lea    edx,[eax+0x1]
c0018d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d55:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018d58:	b0 01                	mov    al,0x1
c0018d5a:	e9 a7 05 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018d5f:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c0018d65:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018d69:	83 f8 06             	cmp    eax,0x6
c0018d6c:	77 4f                	ja     c0018dbd <Vm::faultHandler(regs*)+0x8f6>
c0018d6e:	8b 04 85 bc af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5044]
c0018d75:	ff e0                	jmp    eax
c0018d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018d7d:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018d81:	eb 3a                	jmp    c0018dbd <Vm::faultHandler(regs*)+0x8f6>
c0018d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d89:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018d8d:	eb 2e                	jmp    c0018dbd <Vm::faultHandler(regs*)+0x8f6>
c0018d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018d95:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018d99:	eb 22                	jmp    c0018dbd <Vm::faultHandler(regs*)+0x8f6>
c0018d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018da1:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018da5:	eb 16                	jmp    c0018dbd <Vm::faultHandler(regs*)+0x8f6>
c0018da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018daa:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dac:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018db0:	eb 0b                	jmp    c0018dbd <Vm::faultHandler(regs*)+0x8f6>
c0018db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db5:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018db8:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018dbc:	90                   	nop
c0018dbd:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018dc1:	85 c0                	test   eax,eax
c0018dc3:	74 7a                	je     c0018e3f <Vm::faultHandler(regs*)+0x978>
c0018dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dc8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018dcb:	3d ff ff 00 00       	cmp    eax,0xffff
c0018dd0:	76 6d                	jbe    c0018e3f <Vm::faultHandler(regs*)+0x978>
c0018dd2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018dd5:	83 c0 05             	add    eax,0x5
c0018dd8:	8a 00                	mov    al,BYTE PTR [eax]
c0018dda:	0f b6 c0             	movzx  eax,al
c0018ddd:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018de3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018de6:	83 c0 04             	add    eax,0x4
c0018de9:	8a 00                	mov    al,BYTE PTR [eax]
c0018deb:	0f b6 f8             	movzx  edi,al
c0018dee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018df1:	83 c0 03             	add    eax,0x3
c0018df4:	8a 00                	mov    al,BYTE PTR [eax]
c0018df6:	0f b6 f0             	movzx  esi,al
c0018df9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018dfc:	83 c0 02             	add    eax,0x2
c0018dff:	8a 00                	mov    al,BYTE PTR [eax]
c0018e01:	0f b6 d8             	movzx  ebx,al
c0018e04:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e07:	83 c0 01             	add    eax,0x1
c0018e0a:	8a 00                	mov    al,BYTE PTR [eax]
c0018e0c:	0f b6 c8             	movzx  ecx,al
c0018e0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e12:	8a 00                	mov    al,BYTE PTR [eax]
c0018e14:	0f b6 d0             	movzx  edx,al
c0018e17:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e1a:	8a 00                	mov    al,BYTE PTR [eax]
c0018e1c:	0f b6 c0             	movzx  eax,al
c0018e1f:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018e25:	57                   	push   edi
c0018e26:	56                   	push   esi
c0018e27:	53                   	push   ebx
c0018e28:	51                   	push   ecx
c0018e29:	52                   	push   edx
c0018e2a:	50                   	push   eax
c0018e2b:	68 e8 ab 02 c0       	push   0xc002abe8
c0018e30:	e8 47 e1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018e35:	83 c4 20             	add    esp,0x20
c0018e38:	b0 00                	mov    al,0x0
c0018e3a:	e9 c7 04 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018e3f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018e43:	85 c0                	test   eax,eax
c0018e45:	74 6e                	je     c0018eb5 <Vm::faultHandler(regs*)+0x9ee>
c0018e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e4a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e4d:	0f b7 d0             	movzx  edx,ax
c0018e50:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018e54:	83 ec 08             	sub    esp,0x8
c0018e57:	52                   	push   edx
c0018e58:	50                   	push   eax
c0018e59:	e8 01 f5 ff ff       	call   c001835f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018e5e:	83 c4 10             	add    esp,0x10
c0018e61:	89 c2                	mov    edx,eax
c0018e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e66:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018e69:	0f b7 c0             	movzx  eax,ax
c0018e6c:	66 89 45 9a          	mov    WORD PTR [ebp-0x66],ax
c0018e70:	89 55 94             	mov    DWORD PTR [ebp-0x6c],edx
c0018e73:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c0018e76:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c0018e7a:	ef                   	out    dx,eax
c0018e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018e81:	25 00 04 00 00       	and    eax,0x400
c0018e86:	85 c0                	test   eax,eax
c0018e88:	74 17                	je     c0018ea1 <Vm::faultHandler(regs*)+0x9da>
c0018e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e8d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e90:	83 e8 04             	sub    eax,0x4
c0018e93:	0f b7 d0             	movzx  edx,ax
c0018e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e99:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018e9c:	e9 80 00 00 00       	jmp    c0018f21 <Vm::faultHandler(regs*)+0xa5a>
c0018ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ea4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ea7:	83 c0 04             	add    eax,0x4
c0018eaa:	0f b7 d0             	movzx  edx,ax
c0018ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eb0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018eb3:	eb 6c                	jmp    c0018f21 <Vm::faultHandler(regs*)+0xa5a>
c0018eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eb8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ebb:	0f b7 d0             	movzx  edx,ax
c0018ebe:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018ec2:	83 ec 08             	sub    esp,0x8
c0018ec5:	52                   	push   edx
c0018ec6:	50                   	push   eax
c0018ec7:	e8 3f f4 ff ff       	call   c001830b <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018ecc:	83 c4 10             	add    esp,0x10
c0018ecf:	0f b7 c0             	movzx  eax,ax
c0018ed2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018ed5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018ed8:	0f b7 d2             	movzx  edx,dx
c0018edb:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0018edf:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c0018ee3:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c0018ee6:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0018eea:	66 ef                	out    dx,ax
c0018eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018ef2:	25 00 04 00 00       	and    eax,0x400
c0018ef7:	85 c0                	test   eax,eax
c0018ef9:	74 14                	je     c0018f0f <Vm::faultHandler(regs*)+0xa48>
c0018efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018efe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f01:	83 e8 02             	sub    eax,0x2
c0018f04:	0f b7 d0             	movzx  edx,ax
c0018f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f0a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018f0d:	eb 12                	jmp    c0018f21 <Vm::faultHandler(regs*)+0xa5a>
c0018f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f12:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f15:	83 c0 02             	add    eax,0x2
c0018f18:	0f b7 d0             	movzx  edx,ax
c0018f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f1e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f27:	8d 50 01             	lea    edx,[eax+0x1]
c0018f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f2d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f30:	b0 01                	mov    al,0x1
c0018f32:	e9 cf 03 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f3a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018f3d:	b0 00                	mov    al,0x0
c0018f3f:	89 c2                	mov    edx,eax
c0018f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f44:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018f47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f4a:	83 c0 01             	add    eax,0x1
c0018f4d:	8a 00                	mov    al,BYTE PTR [eax]
c0018f4f:	0f b6 c0             	movzx  eax,al
c0018f52:	83 ec 0c             	sub    esp,0xc
c0018f55:	50                   	push   eax
c0018f56:	e8 1a eb ff ff       	call   c0017a75 <Vm::inbv(unsigned short)>
c0018f5b:	83 c4 10             	add    esp,0x10
c0018f5e:	88 c1                	mov    cl,al
c0018f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f63:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018f66:	0f b6 c1             	movzx  eax,cl
c0018f69:	09 c2                	or     edx,eax
c0018f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f6e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f77:	8d 50 02             	lea    edx,[eax+0x2]
c0018f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f80:	b0 01                	mov    al,0x1
c0018f82:	e9 7f 03 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0018f87:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018f8b:	85 c0                	test   eax,eax
c0018f8d:	74 24                	je     c0018fb3 <Vm::faultHandler(regs*)+0xaec>
c0018f8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f92:	83 c0 01             	add    eax,0x1
c0018f95:	8a 00                	mov    al,BYTE PTR [eax]
c0018f97:	0f b6 c0             	movzx  eax,al
c0018f9a:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0018f9e:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c0018fa2:	89 c2                	mov    edx,eax
c0018fa4:	ed                   	in     eax,dx
c0018fa5:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c0018fa8:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c0018fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fae:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018fb1:	eb 42                	jmp    c0018ff5 <Vm::faultHandler(regs*)+0xb2e>
c0018fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018fb9:	25 00 00 ff ff       	and    eax,0xffff0000
c0018fbe:	89 c2                	mov    edx,eax
c0018fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fc3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018fc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018fc9:	83 c0 01             	add    eax,0x1
c0018fcc:	8a 00                	mov    al,BYTE PTR [eax]
c0018fce:	0f b6 c0             	movzx  eax,al
c0018fd1:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0018fd5:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0018fd9:	89 c2                	mov    edx,eax
c0018fdb:	66 ed                	in     ax,dx
c0018fdd:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0018fe1:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
c0018fe4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018fe7:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c0018fea:	0f b7 c0             	movzx  eax,ax
c0018fed:	09 c2                	or     edx,eax
c0018fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ff2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ff8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ffb:	8d 50 02             	lea    edx,[eax+0x2]
c0018ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019001:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019004:	b0 01                	mov    al,0x1
c0019006:	e9 fb 02 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c001900b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001900e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019011:	0f b6 d0             	movzx  edx,al
c0019014:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019017:	83 c0 01             	add    eax,0x1
c001901a:	8a 00                	mov    al,BYTE PTR [eax]
c001901c:	0f b6 c0             	movzx  eax,al
c001901f:	83 ec 08             	sub    esp,0x8
c0019022:	52                   	push   edx
c0019023:	50                   	push   eax
c0019024:	e8 83 ea ff ff       	call   c0017aac <Vm::outbv(unsigned short, unsigned char)>
c0019029:	83 c4 10             	add    esp,0x10
c001902c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001902f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019032:	8d 50 02             	lea    edx,[eax+0x2]
c0019035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019038:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001903b:	b0 01                	mov    al,0x1
c001903d:	e9 c4 02 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0019042:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019046:	85 c0                	test   eax,eax
c0019048:	74 28                	je     c0019072 <Vm::faultHandler(regs*)+0xbab>
c001904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001904d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0019050:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019053:	83 c0 01             	add    eax,0x1
c0019056:	8a 00                	mov    al,BYTE PTR [eax]
c0019058:	0f b6 c0             	movzx  eax,al
c001905b:	66 89 45 82          	mov    WORD PTR [ebp-0x7e],ax
c001905f:	89 95 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],edx
c0019065:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c001906b:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c001906f:	ef                   	out    dx,eax
c0019070:	eb 31                	jmp    c00190a3 <Vm::faultHandler(regs*)+0xbdc>
c0019072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019075:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019078:	0f b7 c0             	movzx  eax,ax
c001907b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001907e:	83 c2 01             	add    edx,0x1
c0019081:	8a 12                	mov    dl,BYTE PTR [edx]
c0019083:	0f b6 d2             	movzx  edx,dl
c0019086:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c001908d:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c0019094:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c001909a:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c00190a1:	66 ef                	out    dx,ax
c00190a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00190a9:	8d 50 02             	lea    edx,[eax+0x2]
c00190ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190af:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00190b2:	b0 01                	mov    al,0x1
c00190b4:	e9 4d 02 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c00190b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190bc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00190bf:	b0 00                	mov    al,0x0
c00190c1:	89 c2                	mov    edx,eax
c00190c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190c6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00190c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190cc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00190cf:	0f b7 c0             	movzx  eax,ax
c00190d2:	83 ec 0c             	sub    esp,0xc
c00190d5:	50                   	push   eax
c00190d6:	e8 9a e9 ff ff       	call   c0017a75 <Vm::inbv(unsigned short)>
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	88 c1                	mov    cl,al
c00190e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190e3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00190e6:	0f b6 c1             	movzx  eax,cl
c00190e9:	09 c2                	or     edx,eax
c00190eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190ee:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00190f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00190f7:	8d 50 01             	lea    edx,[eax+0x1]
c00190fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190fd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019100:	b0 01                	mov    al,0x1
c0019102:	e9 ff 01 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0019107:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001910b:	85 c0                	test   eax,eax
c001910d:	74 2e                	je     c001913d <Vm::faultHandler(regs*)+0xc76>
c001910f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019112:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019115:	0f b7 c0             	movzx  eax,ax
c0019118:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c001911f:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0019126:	89 c2                	mov    edx,eax
c0019128:	ed                   	in     eax,dx
c0019129:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c001912f:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0019135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019138:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001913b:	eb 4c                	jmp    c0019189 <Vm::faultHandler(regs*)+0xcc2>
c001913d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019140:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019143:	25 00 00 ff ff       	and    eax,0xffff0000
c0019148:	89 c2                	mov    edx,eax
c001914a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001914d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019153:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019156:	0f b7 c0             	movzx  eax,ax
c0019159:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c0019160:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c0019167:	89 c2                	mov    edx,eax
c0019169:	66 ed                	in     ax,dx
c001916b:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c0019172:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [ebp-0x94]
c0019178:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001917b:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c001917e:	0f b7 c0             	movzx  eax,ax
c0019181:	09 c2                	or     edx,eax
c0019183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019186:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001918c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001918f:	8d 50 01             	lea    edx,[eax+0x1]
c0019192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019195:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019198:	b0 01                	mov    al,0x1
c001919a:	e9 67 01 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c001919f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191a2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00191a5:	0f b6 d0             	movzx  edx,al
c00191a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191ab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00191ae:	0f b7 c0             	movzx  eax,ax
c00191b1:	83 ec 08             	sub    esp,0x8
c00191b4:	52                   	push   edx
c00191b5:	50                   	push   eax
c00191b6:	e8 f1 e8 ff ff       	call   c0017aac <Vm::outbv(unsigned short, unsigned char)>
c00191bb:	83 c4 10             	add    esp,0x10
c00191be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191c4:	8d 50 01             	lea    edx,[eax+0x1]
c00191c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00191cd:	b0 01                	mov    al,0x1
c00191cf:	e9 32 01 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c00191d4:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00191d8:	85 c0                	test   eax,eax
c00191da:	74 2c                	je     c0019208 <Vm::faultHandler(regs*)+0xd41>
c00191dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191df:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00191e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191e5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00191e8:	0f b7 c0             	movzx  eax,ax
c00191eb:	66 89 85 6a ff ff ff 	mov    WORD PTR [ebp-0x96],ax
c00191f2:	89 95 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],edx
c00191f8:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c00191fe:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0019205:	ef                   	out    dx,eax
c0019206:	eb 2f                	jmp    c0019237 <Vm::faultHandler(regs*)+0xd70>
c0019208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001920b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001920e:	0f b7 c0             	movzx  eax,ax
c0019211:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019214:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019217:	0f b7 d2             	movzx  edx,dx
c001921a:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0019221:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0019228:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c001922e:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0019235:	66 ef                	out    dx,ax
c0019237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001923a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001923d:	8d 50 01             	lea    edx,[eax+0x1]
c0019240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019243:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019246:	b0 01                	mov    al,0x1
c0019248:	e9 b9 00 00 00       	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c001924d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019250:	83 c0 05             	add    eax,0x5
c0019253:	8a 00                	mov    al,BYTE PTR [eax]
c0019255:	0f b6 c0             	movzx  eax,al
c0019258:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001925e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019261:	83 c0 04             	add    eax,0x4
c0019264:	8a 00                	mov    al,BYTE PTR [eax]
c0019266:	0f b6 f8             	movzx  edi,al
c0019269:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001926c:	83 c0 03             	add    eax,0x3
c001926f:	8a 00                	mov    al,BYTE PTR [eax]
c0019271:	0f b6 f0             	movzx  esi,al
c0019274:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019277:	83 c0 02             	add    eax,0x2
c001927a:	8a 00                	mov    al,BYTE PTR [eax]
c001927c:	0f b6 d8             	movzx  ebx,al
c001927f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019282:	83 c0 01             	add    eax,0x1
c0019285:	8a 00                	mov    al,BYTE PTR [eax]
c0019287:	0f b6 c8             	movzx  ecx,al
c001928a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001928d:	8a 00                	mov    al,BYTE PTR [eax]
c001928f:	0f b6 d0             	movzx  edx,al
c0019292:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019295:	8a 00                	mov    al,BYTE PTR [eax]
c0019297:	0f b6 c0             	movzx  eax,al
c001929a:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00192a0:	57                   	push   edi
c00192a1:	56                   	push   esi
c00192a2:	53                   	push   ebx
c00192a3:	51                   	push   ecx
c00192a4:	52                   	push   edx
c00192a5:	50                   	push   eax
c00192a6:	68 18 ac 02 c0       	push   0xc002ac18
c00192ab:	e8 cc dc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00192b0:	83 c4 20             	add    esp,0x20
c00192b3:	83 ec 0c             	sub    esp,0xc
c00192b6:	6a 60                	push   0x60
c00192b8:	e8 b8 e7 ff ff       	call   c0017a75 <Vm::inbv(unsigned short)>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00192c3:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00192c7:	83 f8 1c             	cmp    eax,0x1c
c00192ca:	74 09                	je     c00192d5 <Vm::faultHandler(regs*)+0xe0e>
c00192cc:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00192d0:	83 f8 5a             	cmp    eax,0x5a
c00192d3:	75 24                	jne    c00192f9 <Vm::faultHandler(regs*)+0xe32>
c00192d5:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00192d9:	83 f8 1c             	cmp    eax,0x1c
c00192dc:	74 09                	je     c00192e7 <Vm::faultHandler(regs*)+0xe20>
c00192de:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00192e2:	83 f8 5a             	cmp    eax,0x5a
c00192e5:	75 15                	jne    c00192fc <Vm::faultHandler(regs*)+0xe35>
c00192e7:	83 ec 0c             	sub    esp,0xc
c00192ea:	6a 60                	push   0x60
c00192ec:	e8 84 e7 ff ff       	call   c0017a75 <Vm::inbv(unsigned short)>
c00192f1:	83 c4 10             	add    esp,0x10
c00192f4:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00192f7:	eb dc                	jmp    c00192d5 <Vm::faultHandler(regs*)+0xe0e>
c00192f9:	90                   	nop
c00192fa:	eb b7                	jmp    c00192b3 <Vm::faultHandler(regs*)+0xdec>
c00192fc:	90                   	nop
c00192fd:	b0 00                	mov    al,0x0
c00192ff:	eb 05                	jmp    c0019306 <Vm::faultHandler(regs*)+0xe3f>
c0019301:	e9 3d f2 ff ff       	jmp    c0018543 <Vm::faultHandler(regs*)+0x7c>
c0019306:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019309:	5b                   	pop    ebx
c001930a:	5e                   	pop    esi
c001930b:	5f                   	pop    edi
c001930c:	5d                   	pop    ebp
c001930d:	c3                   	ret    

c001930e <IOAPIC::close(int, int, void*)>:
c001930e:	b8 00 00 00 00       	mov    eax,0x0
c0019313:	c3                   	ret    

c0019314 <apicGetBase()>:
c0019314:	55                   	push   ebp
c0019315:	89 e5                	mov    ebp,esp
c0019317:	83 ec 18             	sub    esp,0x18
c001931a:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001931f:	83 e0 08             	and    eax,0x8
c0019322:	0f b6 c0             	movzx  eax,al
c0019325:	85 c0                	test   eax,eax
c0019327:	75 07                	jne    c0019330 <apicGetBase()+0x1c>
c0019329:	b8 00 00 00 00       	mov    eax,0x0
c001932e:	eb 1b                	jmp    c001934b <apicGetBase()+0x37>
c0019330:	83 ec 0c             	sub    esp,0xc
c0019333:	6a 1b                	push   0x1b
c0019335:	e8 72 15 00 00       	call   c001a8ac <x86rdmsr(unsigned int)>
c001933a:	83 c4 10             	add    esp,0x10
c001933d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0019340:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0019343:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019346:	25 00 00 ff ff       	and    eax,0xffff0000
c001934b:	c9                   	leave  
c001934c:	c3                   	ret    
c001934d:	90                   	nop

c001934e <IOAPIC::IOAPIC()>:
c001934e:	83 ec 0c             	sub    esp,0xc
c0019351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019355:	83 ec 08             	sub    esp,0x8
c0019358:	68 d8 af 02 c0       	push   0xc002afd8
c001935d:	50                   	push   eax
c001935e:	e8 9f 10 ff ff       	call   c000a402 <Device::Device(char const*)>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	ba f8 af 02 c0       	mov    edx,0xc002aff8
c001936b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001936f:	89 10                	mov    DWORD PTR [eax],edx
c0019371:	90                   	nop
c0019372:	83 c4 0c             	add    esp,0xc
c0019375:	c3                   	ret    

c0019376 <apicOpen()>:
c0019376:	55                   	push   ebp
c0019377:	89 e5                	mov    ebp,esp
c0019379:	53                   	push   ebx
c001937a:	83 ec 34             	sub    esp,0x34
c001937d:	83 ec 0c             	sub    esp,0xc
c0019380:	68 e0 af 02 c0       	push   0xc002afe0
c0019385:	e8 f2 db fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001938a:	83 c4 10             	add    esp,0x10
c001938d:	a0 00 34 03 c0       	mov    al,ds:0xc0033400
c0019392:	83 f0 01             	xor    eax,0x1
c0019395:	0f b6 c0             	movzx  eax,al
c0019398:	85 c0                	test   eax,eax
c001939a:	0f 84 a3 00 00 00    	je     c0019443 <apicOpen()+0xcd>
c00193a0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00193a4:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c00193a9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00193ad:	0f b6 c0             	movzx  eax,al
c00193b0:	39 c2                	cmp    edx,eax
c00193b2:	0f 83 84 00 00 00    	jae    c001943c <apicOpen()+0xc6>
c00193b8:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00193bf:	83 ec 0c             	sub    esp,0xc
c00193c2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00193c5:	e8 f1 6c ff ff       	call   c00100bb <malloc>
c00193ca:	83 c4 10             	add    esp,0x10
c00193cd:	89 c3                	mov    ebx,eax
c00193cf:	83 ec 0c             	sub    esp,0xc
c00193d2:	53                   	push   ebx
c00193d3:	e8 76 ff ff ff       	call   c001934e <IOAPIC::IOAPIC()>
c00193d8:	83 c4 10             	add    esp,0x10
c00193db:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00193de:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00193e2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00193e5:	89 14 85 e0 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc20],edx
c00193ec:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c00193f1:	83 c0 01             	add    eax,0x1
c00193f4:	a3 c0 33 03 c0       	mov    ds:0xc00333c0,eax
c00193f9:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00193fe:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019404:	83 ec 08             	sub    esp,0x8
c0019407:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001940a:	50                   	push   eax
c001940b:	e8 90 0e ff ff       	call   c000a2a0 <Device::addChild(Device*)>
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019416:	8b 00                	mov    eax,DWORD PTR [eax]
c0019418:	83 c0 08             	add    eax,0x8
c001941b:	8b 00                	mov    eax,DWORD PTR [eax]
c001941d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0019421:	6a 00                	push   0x0
c0019423:	6a 00                	push   0x0
c0019425:	52                   	push   edx
c0019426:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019429:	ff d0                	call   eax
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0019431:	83 c0 01             	add    eax,0x1
c0019434:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0019437:	e9 68 ff ff ff       	jmp    c00193a4 <apicOpen()+0x2e>
c001943c:	c6 05 00 34 03 c0 01 	mov    BYTE PTR ds:0xc0033400,0x1
c0019443:	e8 cc fe ff ff       	call   c0019314 <apicGetBase()>
c0019448:	05 f0 00 00 00       	add    eax,0xf0
c001944d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019450:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019453:	8b 00                	mov    eax,DWORD PTR [eax]
c0019455:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0019458:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001945f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0019466:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019469:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001946c:	89 10                	mov    DWORD PTR [eax],edx
c001946e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0019475:	a1 8c 2d 03 c0       	mov    eax,ds:0xc0032d8c
c001947a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001947d:	7d 7c                	jge    c00194fb <apicOpen()+0x185>
c001947f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019482:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c0019489:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001948c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001948f:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c0019496:	c1 e8 08             	shr    eax,0x8
c0019499:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001949d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00194a0:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c00194a7:	c1 e8 18             	shr    eax,0x18
c00194aa:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00194ad:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00194b1:	3d ff 00 00 00       	cmp    eax,0xff
c00194b6:	75 3a                	jne    c00194f2 <apicOpen()+0x17c>
c00194b8:	e8 57 fe ff ff       	call   c0019314 <apicGetBase()>
c00194bd:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c00194c1:	83 fa 01             	cmp    edx,0x1
c00194c4:	75 07                	jne    c00194cd <apicOpen()+0x157>
c00194c6:	ba 60 03 00 00       	mov    edx,0x360
c00194cb:	eb 05                	jmp    c00194d2 <apicOpen()+0x15c>
c00194cd:	ba 50 03 00 00       	mov    edx,0x350
c00194d2:	01 d0                	add    eax,edx
c00194d4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00194d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00194da:	8b 00                	mov    eax,DWORD PTR [eax]
c00194dc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00194df:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c00194e6:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c00194ea:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00194ed:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00194f0:	89 10                	mov    DWORD PTR [eax],edx
c00194f2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c00194f6:	e9 7a ff ff ff       	jmp    c0019475 <apicOpen()+0xff>
c00194fb:	90                   	nop
c00194fc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00194ff:	c9                   	leave  
c0019500:	c3                   	ret    
c0019501:	90                   	nop

c0019502 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0019502:	55                   	push   ebp
c0019503:	89 e5                	mov    ebp,esp
c0019505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019508:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001950e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019511:	72 1d                	jb     c0019530 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019516:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001951c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001951f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019525:	01 d0                	add    eax,edx
c0019527:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001952a:	73 04                	jae    c0019530 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001952c:	b0 01                	mov    al,0x1
c001952e:	eb 02                	jmp    c0019532 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0019530:	b0 00                	mov    al,0x0
c0019532:	5d                   	pop    ebp
c0019533:	c3                   	ret    

c0019534 <IOAPIC::read(int)>:
c0019534:	55                   	push   ebp
c0019535:	89 e5                	mov    ebp,esp
c0019537:	83 ec 10             	sub    esp,0x10
c001953a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001953d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019543:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019546:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019549:	0f b6 d0             	movzx  edx,al
c001954c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001954f:	89 10                	mov    DWORD PTR [eax],edx
c0019551:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019554:	83 c0 10             	add    eax,0x10
c0019557:	8b 00                	mov    eax,DWORD PTR [eax]
c0019559:	c9                   	leave  
c001955a:	c3                   	ret    
c001955b:	90                   	nop

c001955c <IOAPIC::open(int, int, void*)>:
c001955c:	55                   	push   ebp
c001955d:	89 e5                	mov    ebp,esp
c001955f:	57                   	push   edi
c0019560:	56                   	push   esi
c0019561:	53                   	push   ebx
c0019562:	83 ec 04             	sub    esp,0x4
c0019565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019568:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001956b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019574:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001957a:	8b 14 85 80 2e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd180]
c0019581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019584:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001958a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001958d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019593:	8b 14 85 00 2f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd100]
c001959a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001959d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00195a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00195ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00195b5:	0f b6 f0             	movzx  esi,al
c00195b8:	89 d0                	mov    eax,edx
c00195ba:	ba 00 00 00 00       	mov    edx,0x0
c00195bf:	89 c7                	mov    edi,eax
c00195c1:	83 e7 ff             	and    edi,0xffffffff
c00195c4:	89 f9                	mov    ecx,edi
c00195c6:	0f b6 da             	movzx  ebx,dl
c00195c9:	89 c8                	mov    eax,ecx
c00195cb:	89 da                	mov    edx,ebx
c00195cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00195d0:	8d 5e 08             	lea    ebx,[esi+0x8]
c00195d3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00195d7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00195db:	83 e0 00             	and    eax,0x0
c00195de:	09 d0                	or     eax,edx
c00195e0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00195e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00195ed:	8d 50 01             	lea    edx,[eax+0x1]
c00195f0:	88 d1                	mov    cl,dl
c00195f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00195f5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c00195fb:	0f b6 d0             	movzx  edx,al
c00195fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019601:	83 c2 08             	add    edx,0x8
c0019604:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019608:	0f b6 c9             	movzx  ecx,cl
c001960b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0019611:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0019615:	6a 01                	push   0x1
c0019617:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001961a:	e8 15 ff ff ff       	call   c0019534 <IOAPIC::read(int)>
c001961f:	83 c4 08             	add    esp,0x8
c0019622:	c1 f8 10             	sar    eax,0x10
c0019625:	0f b6 c0             	movzx  eax,al
c0019628:	8d 50 01             	lea    edx,[eax+0x1]
c001962b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001962e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0019634:	b8 00 00 00 00       	mov    eax,0x0
c0019639:	8d 65 f4             	lea    esp,[ebp-0xc]
c001963c:	5b                   	pop    ebx
c001963d:	5e                   	pop    esi
c001963e:	5f                   	pop    edi
c001963f:	5d                   	pop    ebp
c0019640:	c3                   	ret    
c0019641:	90                   	nop

c0019642 <IOAPIC::write(int, int)>:
c0019642:	55                   	push   ebp
c0019643:	89 e5                	mov    ebp,esp
c0019645:	83 ec 10             	sub    esp,0x10
c0019648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001964b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019651:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019654:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019657:	0f b6 d0             	movzx  edx,al
c001965a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001965d:	89 10                	mov    DWORD PTR [eax],edx
c001965f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019662:	8d 50 10             	lea    edx,[eax+0x10]
c0019665:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019668:	89 02                	mov    DWORD PTR [edx],eax
c001966a:	90                   	nop
c001966b:	c9                   	leave  
c001966c:	c3                   	ret    
c001966d:	90                   	nop

c001966e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001966e:	55                   	push   ebp
c001966f:	89 e5                	mov    ebp,esp
c0019671:	53                   	push   ebx
c0019672:	83 ec 2c             	sub    esp,0x2c
c0019675:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019678:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001967b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001967e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0019681:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0019684:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019687:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001968a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001968d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0019690:	88 d8                	mov    al,bl
c0019692:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0019695:	88 c8                	mov    al,cl
c0019697:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001969a:	88 d0                	mov    al,dl
c001969c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001969f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00196a3:	83 c0 08             	add    eax,0x8
c00196a6:	01 c0                	add    eax,eax
c00196a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00196ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00196af:	83 c0 08             	add    eax,0x8
c00196b2:	01 c0                	add    eax,eax
c00196b4:	83 c0 01             	add    eax,0x1
c00196b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00196ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00196bd:	50                   	push   eax
c00196be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00196c1:	e8 6e fe ff ff       	call   c0019534 <IOAPIC::read(int)>
c00196c6:	83 c4 08             	add    esp,0x8
c00196c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00196cc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00196d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00196d6:	c1 e0 18             	shl    eax,0x18
c00196d9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00196dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00196df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00196e2:	52                   	push   edx
c00196e3:	50                   	push   eax
c00196e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00196e7:	e8 56 ff ff ff       	call   c0019642 <IOAPIC::write(int, int)>
c00196ec:	83 c4 0c             	add    esp,0xc
c00196ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00196f2:	50                   	push   eax
c00196f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00196f6:	e8 39 fe ff ff       	call   c0019534 <IOAPIC::read(int)>
c00196fb:	83 c4 08             	add    esp,0x8
c00196fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019701:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019708:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001970f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019716:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001971a:	85 c0                	test   eax,eax
c001971c:	74 09                	je     c0019727 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001971e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0019725:	eb 07                	jmp    c001972e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0019727:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001972e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0019732:	85 c0                	test   eax,eax
c0019734:	74 09                	je     c001973f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0019736:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001973d:	eb 07                	jmp    c0019746 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001973f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0019746:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001974d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0019751:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0019754:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0019757:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001975a:	52                   	push   edx
c001975b:	50                   	push   eax
c001975c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001975f:	e8 de fe ff ff       	call   c0019642 <IOAPIC::write(int, int)>
c0019764:	83 c4 0c             	add    esp,0xc
c0019767:	90                   	nop
c0019768:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001976b:	c9                   	leave  
c001976c:	c3                   	ret    
c001976d:	90                   	nop

c001976e <noCopro(unsigned long)>:
c001976e:	c3                   	ret    

c001976f <HalRestart()>:
c001976f:	e4 64                	in     al,0x64
c0019771:	a8 02                	test   al,0x2
c0019773:	75 fa                	jne    c001976f <HalRestart()>
c0019775:	b0 fe                	mov    al,0xfe
c0019777:	e6 64                	out    0x64,al
c0019779:	c3                   	ret    

c001977a <HalShutdown()>:
c001977a:	c3                   	ret    

c001977b <HalSleep()>:
c001977b:	c3                   	ret    

c001977c <CPU::close(int, int, void*)>:
c001977c:	31 c0                	xor    eax,eax
c001977e:	c3                   	ret    

c001977f <x86ReadCMOS(unsigned char)>:
c001977f:	83 ec 14             	sub    esp,0x14
c0019782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019786:	88 04 24             	mov    BYTE PTR [esp],al
c0019789:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c001978e:	0f b6 c0             	movzx  eax,al
c0019791:	85 c0                	test   eax,eax
c0019793:	74 04                	je     c0019799 <x86ReadCMOS(unsigned char)+0x1a>
c0019795:	b2 00                	mov    dl,0x0
c0019797:	eb 02                	jmp    c001979b <x86ReadCMOS(unsigned char)+0x1c>
c0019799:	b2 80                	mov    dl,0x80
c001979b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001979e:	09 d0                	or     eax,edx
c00197a0:	0f b6 c0             	movzx  eax,al
c00197a3:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00197aa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00197ae:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00197b2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00197b7:	ee                   	out    dx,al
c00197b8:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00197bf:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00197c4:	89 c2                	mov    edx,eax
c00197c6:	ec                   	in     al,dx
c00197c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00197cb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00197cf:	83 c4 14             	add    esp,0x14
c00197d2:	c3                   	ret    

c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>:
c00197d3:	83 ec 18             	sub    esp,0x18
c00197d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197de:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00197e2:	88 04 24             	mov    BYTE PTR [esp],al
c00197e5:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c00197ea:	0f b6 c0             	movzx  eax,al
c00197ed:	85 c0                	test   eax,eax
c00197ef:	74 04                	je     c00197f5 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c00197f1:	b2 00                	mov    dl,0x0
c00197f3:	eb 02                	jmp    c00197f7 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c00197f5:	b2 80                	mov    dl,0x80
c00197f7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00197fb:	09 d0                	or     eax,edx
c00197fd:	0f b6 c0             	movzx  eax,al
c0019800:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019807:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001980b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001980f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019814:	ee                   	out    dx,al
c0019815:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0019819:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019820:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019824:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0019828:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001982d:	ee                   	out    dx,al
c001982e:	90                   	nop
c001982f:	83 c4 18             	add    esp,0x18
c0019832:	c3                   	ret    

c0019833 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019833:	60                   	pusha  
c0019834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019838:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001983c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019840:	9c                   	pushf  
c0019841:	fa                   	cli    
c0019842:	0f 09                	wbinvd 
c0019844:	0f 30                	wrmsr  
c0019846:	9d                   	popf   
c0019847:	89 c2                	mov    edx,eax
c0019849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001984d:	89 10                	mov    DWORD PTR [eax],edx
c001984f:	61                   	popa   
c0019850:	90                   	nop
c0019851:	c3                   	ret    

c0019852 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019852:	60                   	pusha  
c0019853:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019857:	89 c1                	mov    ecx,eax
c0019859:	9c                   	pushf  
c001985a:	fa                   	cli    
c001985b:	0f 09                	wbinvd 
c001985d:	31 c0                	xor    eax,eax
c001985f:	31 d2                	xor    edx,edx
c0019861:	0f 32                	rdmsr  
c0019863:	9d                   	popf   
c0019864:	89 c2                	mov    edx,eax
c0019866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001986a:	89 10                	mov    DWORD PTR [eax],edx
c001986c:	61                   	popa   
c001986d:	90                   	nop
c001986e:	c3                   	ret    

c001986f <AMD_K6_writeback(int, int, int)>:
c001986f:	83 ec 20             	sub    esp,0x20
c0019872:	a1 70 31 03 c0       	mov    eax,ds:0xc0033170
c0019877:	c1 e8 14             	shr    eax,0x14
c001987a:	c1 e8 02             	shr    eax,0x2
c001987d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019881:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019886:	0f 85 9e 00 00 00    	jne    c001992a <AMD_K6_writeback(int, int, int)+0xbb>
c001988c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019890:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019894:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019899:	75 19                	jne    c00198b4 <AMD_K6_writeback(int, int, int)+0x45>
c001989b:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00198a0:	7f 0a                	jg     c00198ac <AMD_K6_writeback(int, int, int)+0x3d>
c00198a2:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00198aa:	eb 08                	jmp    c00198b4 <AMD_K6_writeback(int, int, int)+0x45>
c00198ac:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00198b4:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00198b9:	7c 6e                	jl     c0019929 <AMD_K6_writeback(int, int, int)+0xba>
c00198bb:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00198c0:	7e 09                	jle    c00198cb <AMD_K6_writeback(int, int, int)+0x5c>
c00198c2:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00198c7:	74 36                	je     c00198ff <AMD_K6_writeback(int, int, int)+0x90>
c00198c9:	eb 5e                	jmp    c0019929 <AMD_K6_writeback(int, int, int)+0xba>
c00198cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198cf:	50                   	push   eax
c00198d0:	68 82 00 00 c0       	push   0xc0000082
c00198d5:	e8 78 ff ff ff       	call   c0019852 <AMD_K6_read_msr(unsigned int, REGS*)>
c00198da:	83 c4 08             	add    esp,0x8
c00198dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00198e1:	01 c0                	add    eax,eax
c00198e3:	83 e0 7f             	and    eax,0x7f
c00198e6:	89 c2                	mov    edx,eax
c00198e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198ec:	50                   	push   eax
c00198ed:	6a 00                	push   0x0
c00198ef:	52                   	push   edx
c00198f0:	68 82 00 00 c0       	push   0xc0000082
c00198f5:	e8 39 ff ff ff       	call   c0019833 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00198fa:	83 c4 10             	add    esp,0x10
c00198fd:	eb 2b                	jmp    c001992a <AMD_K6_writeback(int, int, int)+0xbb>
c00198ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019903:	50                   	push   eax
c0019904:	68 82 00 00 c0       	push   0xc0000082
c0019909:	e8 44 ff ff ff       	call   c0019852 <AMD_K6_read_msr(unsigned int, REGS*)>
c001990e:	83 c4 08             	add    esp,0x8
c0019911:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019915:	50                   	push   eax
c0019916:	6a 00                	push   0x0
c0019918:	6a 00                	push   0x0
c001991a:	68 82 00 00 c0       	push   0xc0000082
c001991f:	e8 0f ff ff ff       	call   c0019833 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019924:	83 c4 10             	add    esp,0x10
c0019927:	eb 01                	jmp    c001992a <AMD_K6_writeback(int, int, int)+0xbb>
c0019929:	90                   	nop
c001992a:	90                   	nop
c001992b:	83 c4 20             	add    esp,0x20
c001992e:	c3                   	ret    

c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001992f:	56                   	push   esi
c0019930:	53                   	push   ebx
c0019931:	a1 a0 d8 02 c0       	mov    eax,ds:0xc002d8a0
c0019936:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001993a:	75 32                	jne    c001996e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001993c:	8b 15 20 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033420
c0019942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019946:	89 10                	mov    DWORD PTR [eax],edx
c0019948:	8b 15 1c 34 03 c0    	mov    edx,DWORD PTR ds:0xc003341c
c001994e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019952:	89 10                	mov    DWORD PTR [eax],edx
c0019954:	8b 15 18 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033418
c001995a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001995e:	89 10                	mov    DWORD PTR [eax],edx
c0019960:	8b 15 14 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033414
c0019966:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001996a:	89 10                	mov    DWORD PTR [eax],edx
c001996c:	eb 5c                	jmp    c00199ca <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c001996e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019972:	ba 00 00 00 00       	mov    edx,0x0
c0019977:	89 d1                	mov    ecx,edx
c0019979:	0f a2                	cpuid  
c001997b:	89 c6                	mov    esi,eax
c001997d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019981:	89 30                	mov    DWORD PTR [eax],esi
c0019983:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019987:	89 18                	mov    DWORD PTR [eax],ebx
c0019989:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001998d:	89 08                	mov    DWORD PTR [eax],ecx
c001998f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019993:	89 10                	mov    DWORD PTR [eax],edx
c0019995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019999:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c001999e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00199a4:	a3 20 34 03 c0       	mov    ds:0xc0033420,eax
c00199a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00199af:	a3 1c 34 03 c0       	mov    ds:0xc003341c,eax
c00199b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00199ba:	a3 18 34 03 c0       	mov    ds:0xc0033418,eax
c00199bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00199c5:	a3 14 34 03 c0       	mov    ds:0xc0033414,eax
c00199ca:	5b                   	pop    ebx
c00199cb:	5e                   	pop    esi
c00199cc:	c3                   	ret    

c00199cd <cpuidCheckEDX(unsigned int)>:
c00199cd:	83 ec 10             	sub    esp,0x10
c00199d0:	89 e0                	mov    eax,esp
c00199d2:	50                   	push   eax
c00199d3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d7:	50                   	push   eax
c00199d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00199dc:	50                   	push   eax
c00199dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199e1:	50                   	push   eax
c00199e2:	6a 01                	push   0x1
c00199e4:	e8 46 ff ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199e9:	83 c4 14             	add    esp,0x14
c00199ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00199ef:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00199f3:	0f 95 c0             	setne  al
c00199f6:	83 c4 10             	add    esp,0x10
c00199f9:	c3                   	ret    

c00199fa <cpuidCheckECX(unsigned int)>:
c00199fa:	83 ec 10             	sub    esp,0x10
c00199fd:	89 e0                	mov    eax,esp
c00199ff:	50                   	push   eax
c0019a00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a04:	50                   	push   eax
c0019a05:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a09:	50                   	push   eax
c0019a0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a0e:	50                   	push   eax
c0019a0f:	6a 01                	push   0x1
c0019a11:	e8 19 ff ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a16:	83 c4 14             	add    esp,0x14
c0019a19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a1d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019a21:	0f 95 c0             	setne  al
c0019a24:	83 c4 10             	add    esp,0x10
c0019a27:	c3                   	ret    

c0019a28 <cpuidCheckExtendedEBX(unsigned int)>:
c0019a28:	83 ec 10             	sub    esp,0x10
c0019a2b:	89 e0                	mov    eax,esp
c0019a2d:	50                   	push   eax
c0019a2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a32:	50                   	push   eax
c0019a33:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a37:	50                   	push   eax
c0019a38:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a3c:	50                   	push   eax
c0019a3d:	6a 07                	push   0x7
c0019a3f:	e8 eb fe ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a44:	83 c4 14             	add    esp,0x14
c0019a47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a4b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019a4f:	0f 95 c0             	setne  al
c0019a52:	83 c4 10             	add    esp,0x10
c0019a55:	c3                   	ret    

c0019a56 <cpuidCheckExtendedECX(unsigned int)>:
c0019a56:	83 ec 10             	sub    esp,0x10
c0019a59:	89 e0                	mov    eax,esp
c0019a5b:	50                   	push   eax
c0019a5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a60:	50                   	push   eax
c0019a61:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a65:	50                   	push   eax
c0019a66:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a6a:	50                   	push   eax
c0019a6b:	6a 07                	push   0x7
c0019a6d:	e8 bd fe ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a72:	83 c4 14             	add    esp,0x14
c0019a75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a79:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019a7d:	0f 95 c0             	setne  al
c0019a80:	83 c4 10             	add    esp,0x10
c0019a83:	c3                   	ret    

c0019a84 <HalDetectFeatures()>:
c0019a84:	57                   	push   edi
c0019a85:	56                   	push   esi
c0019a86:	53                   	push   ebx
c0019a87:	81 ec 90 00 00 00    	sub    esp,0x90
c0019a8d:	83 ec 04             	sub    esp,0x4
c0019a90:	6a 08                	push   0x8
c0019a92:	6a 00                	push   0x0
c0019a94:	68 4c 34 03 c0       	push   0xc003344c
c0019a99:	e8 52 6a fe ff       	call   c00004f0 <memset>
c0019a9e:	83 c4 10             	add    esp,0x10
c0019aa1:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019aa6:	83 c8 04             	or     eax,0x4
c0019aa9:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019aae:	83 ec 0c             	sub    esp,0xc
c0019ab1:	68 1c b0 02 c0       	push   0xc002b01c
c0019ab6:	e8 c1 d4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019abb:	83 c4 10             	add    esp,0x10
c0019abe:	e8 36 67 fe ff       	call   c00001f9 <detectCPUID>
c0019ac3:	85 c0                	test   eax,eax
c0019ac5:	0f 95 c0             	setne  al
c0019ac8:	83 e0 01             	and    eax,0x1
c0019acb:	83 e0 01             	and    eax,0x1
c0019ace:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019ad1:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019ad6:	83 e0 fd             	and    eax,0xfffffffd
c0019ad9:	88 c2                	mov    dl,al
c0019adb:	88 c8                	mov    al,cl
c0019add:	09 d0                	or     eax,edx
c0019adf:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019ae4:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019ae9:	83 e0 02             	and    eax,0x2
c0019aec:	0f b6 c0             	movzx  eax,al
c0019aef:	85 c0                	test   eax,eax
c0019af1:	0f 84 84 02 00 00    	je     c0019d7b <HalDetectFeatures()+0x2f7>
c0019af7:	83 ec 0c             	sub    esp,0xc
c0019afa:	6a 20                	push   0x20
c0019afc:	e8 cc fe ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019b01:	83 c4 10             	add    esp,0x10
c0019b04:	83 e0 01             	and    eax,0x1
c0019b07:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019b0e:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019b13:	83 e0 f7             	and    eax,0xfffffff7
c0019b16:	88 c2                	mov    dl,al
c0019b18:	88 c8                	mov    al,cl
c0019b1a:	09 d0                	or     eax,edx
c0019b1c:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019b21:	83 ec 0c             	sub    esp,0xc
c0019b24:	68 00 00 00 04       	push   0x4000000
c0019b29:	e8 9f fe ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019b2e:	83 c4 10             	add    esp,0x10
c0019b31:	89 c1                	mov    ecx,eax
c0019b33:	83 e1 01             	and    ecx,0x1
c0019b36:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019b3b:	83 e0 fe             	and    eax,0xfffffffe
c0019b3e:	88 c2                	mov    dl,al
c0019b40:	88 c8                	mov    al,cl
c0019b42:	09 d0                	or     eax,edx
c0019b44:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019b49:	83 ec 0c             	sub    esp,0xc
c0019b4c:	68 80 00 00 00       	push   0x80
c0019b51:	e8 77 fe ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019b56:	83 c4 10             	add    esp,0x10
c0019b59:	89 c1                	mov    ecx,eax
c0019b5b:	c1 e1 07             	shl    ecx,0x7
c0019b5e:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019b63:	83 e0 7f             	and    eax,0x7f
c0019b66:	88 c2                	mov    dl,al
c0019b68:	88 c8                	mov    al,cl
c0019b6a:	09 d0                	or     eax,edx
c0019b6c:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019b71:	83 ec 0c             	sub    esp,0xc
c0019b74:	68 00 00 80 00       	push   0x800000
c0019b79:	e8 4f fe ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019b7e:	83 c4 10             	add    esp,0x10
c0019b81:	83 e0 01             	and    eax,0x1
c0019b84:	89 c1                	mov    ecx,eax
c0019b86:	c1 e1 05             	shl    ecx,0x5
c0019b89:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019b8e:	83 e0 df             	and    eax,0xffffffdf
c0019b91:	88 c2                	mov    dl,al
c0019b93:	88 c8                	mov    al,cl
c0019b95:	09 d0                	or     eax,edx
c0019b97:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019b9c:	83 ec 0c             	sub    esp,0xc
c0019b9f:	6a 01                	push   0x1
c0019ba1:	e8 2a 3f ff ff       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	0f b6 c0             	movzx  eax,al
c0019bac:	85 c0                	test   eax,eax
c0019bae:	75 17                	jne    c0019bc7 <HalDetectFeatures()+0x143>
c0019bb0:	83 ec 0c             	sub    esp,0xc
c0019bb3:	68 00 04 00 00       	push   0x400
c0019bb8:	e8 13 3f ff ff       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019bbd:	83 c4 10             	add    esp,0x10
c0019bc0:	0f b6 c0             	movzx  eax,al
c0019bc3:	85 c0                	test   eax,eax
c0019bc5:	74 04                	je     c0019bcb <HalDetectFeatures()+0x147>
c0019bc7:	b0 01                	mov    al,0x1
c0019bc9:	eb 02                	jmp    c0019bcd <HalDetectFeatures()+0x149>
c0019bcb:	b0 00                	mov    al,0x0
c0019bcd:	0f b6 c0             	movzx  eax,al
c0019bd0:	85 c0                	test   eax,eax
c0019bd2:	74 0f                	je     c0019be3 <HalDetectFeatures()+0x15f>
c0019bd4:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019bd9:	83 e0 fe             	and    eax,0xfffffffe
c0019bdc:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019be1:	eb 28                	jmp    c0019c0b <HalDetectFeatures()+0x187>
c0019be3:	83 ec 0c             	sub    esp,0xc
c0019be6:	68 00 02 00 00       	push   0x200
c0019beb:	e8 dd fd ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019bf0:	83 c4 10             	add    esp,0x10
c0019bf3:	89 c1                	mov    ecx,eax
c0019bf5:	83 e1 01             	and    ecx,0x1
c0019bf8:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019bfd:	83 e0 fe             	and    eax,0xfffffffe
c0019c00:	88 c2                	mov    dl,al
c0019c02:	88 c8                	mov    al,cl
c0019c04:	09 d0                	or     eax,edx
c0019c06:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019c0b:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019c10:	83 e0 01             	and    eax,0x1
c0019c13:	0f b6 c0             	movzx  eax,al
c0019c16:	85 c0                	test   eax,eax
c0019c18:	74 1c                	je     c0019c36 <HalDetectFeatures()+0x1b2>
c0019c1a:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019c1f:	83 e0 08             	and    eax,0x8
c0019c22:	0f b6 c0             	movzx  eax,al
c0019c25:	85 c0                	test   eax,eax
c0019c27:	75 0d                	jne    c0019c36 <HalDetectFeatures()+0x1b2>
c0019c29:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019c2e:	83 e0 fe             	and    eax,0xfffffffe
c0019c31:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019c36:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019c3e:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019c46:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019c4e:	85 c0                	test   eax,eax
c0019c50:	0f 84 ab 00 00 00    	je     c0019d01 <HalDetectFeatures()+0x27d>
c0019c56:	83 ec 0c             	sub    esp,0xc
c0019c59:	6a 01                	push   0x1
c0019c5b:	e8 9a fd ff ff       	call   c00199fa <cpuidCheckECX(unsigned int)>
c0019c60:	83 c4 10             	add    esp,0x10
c0019c63:	83 e0 01             	and    eax,0x1
c0019c66:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019c69:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019c6e:	83 e0 fd             	and    eax,0xfffffffd
c0019c71:	88 c2                	mov    dl,al
c0019c73:	88 c8                	mov    al,cl
c0019c75:	09 d0                	or     eax,edx
c0019c77:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	68 00 02 00 00       	push   0x200
c0019c84:	e8 71 fd ff ff       	call   c00199fa <cpuidCheckECX(unsigned int)>
c0019c89:	83 c4 10             	add    esp,0x10
c0019c8c:	83 e0 01             	and    eax,0x1
c0019c8f:	89 c1                	mov    ecx,eax
c0019c91:	c1 e1 04             	shl    ecx,0x4
c0019c94:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019c99:	83 e0 ef             	and    eax,0xffffffef
c0019c9c:	88 c2                	mov    dl,al
c0019c9e:	88 c8                	mov    al,cl
c0019ca0:	09 d0                	or     eax,edx
c0019ca2:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019ca7:	83 ec 0c             	sub    esp,0xc
c0019caa:	68 00 00 08 00       	push   0x80000
c0019caf:	e8 46 fd ff ff       	call   c00199fa <cpuidCheckECX(unsigned int)>
c0019cb4:	83 c4 10             	add    esp,0x10
c0019cb7:	83 e0 01             	and    eax,0x1
c0019cba:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019cc1:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019cc6:	83 e0 fb             	and    eax,0xfffffffb
c0019cc9:	88 c2                	mov    dl,al
c0019ccb:	88 c8                	mov    al,cl
c0019ccd:	09 d0                	or     eax,edx
c0019ccf:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019cd4:	83 ec 0c             	sub    esp,0xc
c0019cd7:	68 00 00 10 00       	push   0x100000
c0019cdc:	e8 19 fd ff ff       	call   c00199fa <cpuidCheckECX(unsigned int)>
c0019ce1:	83 c4 10             	add    esp,0x10
c0019ce4:	83 e0 01             	and    eax,0x1
c0019ce7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019cee:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019cf3:	83 e0 f7             	and    eax,0xfffffff7
c0019cf6:	88 c2                	mov    dl,al
c0019cf8:	88 c8                	mov    al,cl
c0019cfa:	09 d0                	or     eax,edx
c0019cfc:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019d01:	83 ec 0c             	sub    esp,0xc
c0019d04:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d08:	50                   	push   eax
c0019d09:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d0d:	50                   	push   eax
c0019d0e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019d12:	50                   	push   eax
c0019d13:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019d17:	50                   	push   eax
c0019d18:	68 00 00 00 80       	push   0x80000000
c0019d1d:	e8 0d fc ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d22:	83 c4 20             	add    esp,0x20
c0019d25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d29:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019d2e:	76 4b                	jbe    c0019d7b <HalDetectFeatures()+0x2f7>
c0019d30:	83 ec 0c             	sub    esp,0xc
c0019d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d37:	50                   	push   eax
c0019d38:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d3c:	50                   	push   eax
c0019d3d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019d41:	50                   	push   eax
c0019d42:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019d46:	50                   	push   eax
c0019d47:	68 01 00 00 80       	push   0x80000001
c0019d4c:	e8 de fb ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d51:	83 c4 20             	add    esp,0x20
c0019d54:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019d59:	83 e0 bf             	and    eax,0xffffffbf
c0019d5c:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019d61:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019d66:	83 e0 fd             	and    eax,0xfffffffd
c0019d69:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019d6e:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019d73:	83 e0 fe             	and    eax,0xfffffffe
c0019d76:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019d7b:	83 ec 0c             	sub    esp,0xc
c0019d7e:	68 00 04 00 00       	push   0x400
c0019d83:	e8 48 3d ff ff       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019d88:	83 c4 10             	add    esp,0x10
c0019d8b:	0f b6 c0             	movzx  eax,al
c0019d8e:	85 c0                	test   eax,eax
c0019d90:	74 0d                	je     c0019d9f <HalDetectFeatures()+0x31b>
c0019d92:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019d97:	83 e0 fb             	and    eax,0xfffffffb
c0019d9a:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019d9f:	c6 05 48 34 03 c0 01 	mov    BYTE PTR ds:0xc0033448,0x1
c0019da6:	83 ec 04             	sub    esp,0x4
c0019da9:	6a 0d                	push   0xd
c0019dab:	6a 00                	push   0x0
c0019dad:	68 30 34 03 c0       	push   0xc0033430
c0019db2:	e8 39 67 fe ff       	call   c00004f0 <memset>
c0019db7:	83 c4 10             	add    esp,0x10
c0019dba:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019dbf:	83 e0 02             	and    eax,0x2
c0019dc2:	0f b6 c0             	movzx  eax,al
c0019dc5:	85 c0                	test   eax,eax
c0019dc7:	0f 84 16 08 00 00    	je     c001a5e3 <HalDetectFeatures()+0xb5f>
c0019dcd:	83 ec 0c             	sub    esp,0xc
c0019dd0:	6a 10                	push   0x10
c0019dd2:	e8 f6 fb ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019dd7:	83 c4 10             	add    esp,0x10
c0019dda:	83 e0 01             	and    eax,0x1
c0019ddd:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019de4:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019de9:	83 e0 f7             	and    eax,0xfffffff7
c0019dec:	88 c2                	mov    dl,al
c0019dee:	88 c8                	mov    al,cl
c0019df0:	09 d0                	or     eax,edx
c0019df2:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019df7:	83 ec 0c             	sub    esp,0xc
c0019dfa:	6a 40                	push   0x40
c0019dfc:	e8 cc fb ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019e01:	83 c4 10             	add    esp,0x10
c0019e04:	83 e0 01             	and    eax,0x1
c0019e07:	89 c1                	mov    ecx,eax
c0019e09:	c1 e1 04             	shl    ecx,0x4
c0019e0c:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019e11:	83 e0 ef             	and    eax,0xffffffef
c0019e14:	88 c2                	mov    dl,al
c0019e16:	88 c8                	mov    al,cl
c0019e18:	09 d0                	or     eax,edx
c0019e1a:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019e1f:	83 ec 0c             	sub    esp,0xc
c0019e22:	6a 08                	push   0x8
c0019e24:	e8 a4 fb ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019e29:	83 c4 10             	add    esp,0x10
c0019e2c:	83 e0 01             	and    eax,0x1
c0019e2f:	89 c1                	mov    ecx,eax
c0019e31:	c1 e1 05             	shl    ecx,0x5
c0019e34:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019e39:	83 e0 df             	and    eax,0xffffffdf
c0019e3c:	88 c2                	mov    dl,al
c0019e3e:	88 c8                	mov    al,cl
c0019e40:	09 d0                	or     eax,edx
c0019e42:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019e47:	83 ec 0c             	sub    esp,0xc
c0019e4a:	68 00 20 00 00       	push   0x2000
c0019e4f:	e8 79 fb ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019e54:	83 c4 10             	add    esp,0x10
c0019e57:	83 e0 01             	and    eax,0x1
c0019e5a:	89 c1                	mov    ecx,eax
c0019e5c:	c1 e1 06             	shl    ecx,0x6
c0019e5f:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019e64:	83 e0 bf             	and    eax,0xffffffbf
c0019e67:	88 c2                	mov    dl,al
c0019e69:	88 c8                	mov    al,cl
c0019e6b:	09 d0                	or     eax,edx
c0019e6d:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019e72:	83 ec 0c             	sub    esp,0xc
c0019e75:	68 00 00 01 00       	push   0x10000
c0019e7a:	e8 4e fb ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019e7f:	83 c4 10             	add    esp,0x10
c0019e82:	89 c1                	mov    ecx,eax
c0019e84:	c1 e1 07             	shl    ecx,0x7
c0019e87:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019e8c:	83 e0 7f             	and    eax,0x7f
c0019e8f:	88 c2                	mov    dl,al
c0019e91:	88 c8                	mov    al,cl
c0019e93:	09 d0                	or     eax,edx
c0019e95:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019e9a:	83 ec 0c             	sub    esp,0xc
c0019e9d:	6a 01                	push   0x1
c0019e9f:	e8 29 fb ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019ea4:	83 c4 10             	add    esp,0x10
c0019ea7:	83 e0 01             	and    eax,0x1
c0019eaa:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019eb1:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c0019eb6:	83 e0 f7             	and    eax,0xfffffff7
c0019eb9:	88 c2                	mov    dl,al
c0019ebb:	88 c8                	mov    al,cl
c0019ebd:	09 d0                	or     eax,edx
c0019ebf:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c0019ec4:	83 ec 0c             	sub    esp,0xc
c0019ec7:	68 00 08 00 00       	push   0x800
c0019ecc:	e8 fc fa ff ff       	call   c00199cd <cpuidCheckEDX(unsigned int)>
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	89 c1                	mov    ecx,eax
c0019ed6:	83 e1 01             	and    ecx,0x1
c0019ed9:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c0019ede:	83 e0 fe             	and    eax,0xfffffffe
c0019ee1:	88 c2                	mov    dl,al
c0019ee3:	88 c8                	mov    al,cl
c0019ee5:	09 d0                	or     eax,edx
c0019ee7:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c0019eec:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019ef1:	83 e0 40             	and    eax,0x40
c0019ef4:	0f b6 c0             	movzx  eax,al
c0019ef7:	85 c0                	test   eax,eax
c0019ef9:	74 0a                	je     c0019f05 <HalDetectFeatures()+0x481>
c0019efb:	c7 05 28 34 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0033428,0x100
c0019f05:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019f0a:	83 e0 80             	and    eax,0xffffff80
c0019f0d:	0f b6 c0             	movzx  eax,al
c0019f10:	85 c0                	test   eax,eax
c0019f12:	74 0a                	je     c0019f1e <HalDetectFeatures()+0x49a>
c0019f14:	c7 05 24 34 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0033424,0x80
c0019f1e:	83 ec 0c             	sub    esp,0xc
c0019f21:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f25:	50                   	push   eax
c0019f26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019f2a:	50                   	push   eax
c0019f2b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f2f:	50                   	push   eax
c0019f30:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f34:	50                   	push   eax
c0019f35:	6a 00                	push   0x0
c0019f37:	e8 f3 f9 ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019f3c:	83 c4 20             	add    esp,0x20
c0019f3f:	c7 44 24 48 30 34 03 c0 	mov    DWORD PTR [esp+0x48],0xc0033430
c0019f47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f4b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019f4f:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019f57:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019f5b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019f5f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019f63:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019f67:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019f6b:	89 c6                	mov    esi,eax
c0019f6d:	89 d7                	mov    edi,edx
c0019f6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f71:	89 c8                	mov    eax,ecx
c0019f73:	89 fa                	mov    edx,edi
c0019f75:	89 f3                	mov    ebx,esi
c0019f77:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019f7b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019f83:	b8 34 34 03 c0       	mov    eax,0xc0033434
c0019f88:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019f8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f90:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019f94:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019f9c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019fa0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019fa4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019fa8:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019fac:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019fb0:	89 c6                	mov    esi,eax
c0019fb2:	89 d7                	mov    edi,edx
c0019fb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fb6:	89 c8                	mov    eax,ecx
c0019fb8:	89 fa                	mov    edx,edi
c0019fba:	89 f3                	mov    ebx,esi
c0019fbc:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019fc0:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019fc4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019fc8:	b8 38 34 03 c0       	mov    eax,0xc0033438
c0019fcd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019fd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fd8:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019fdc:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019fe4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019feb:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019fef:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019ff3:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019ffa:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019ffe:	89 c6                	mov    esi,eax
c001a000:	89 d7                	mov    edi,edx
c001a002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a004:	89 c8                	mov    eax,ecx
c001a006:	89 fa                	mov    edx,edi
c001a008:	89 f3                	mov    ebx,esi
c001a00a:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001a00e:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001a012:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001a016:	83 ec 08             	sub    esp,0x8
c001a019:	68 31 b0 02 c0       	push   0xc002b031
c001a01e:	68 30 34 03 c0       	push   0xc0033430
c001a023:	e8 28 67 fe ff       	call   c0000750 <strcmp>
c001a028:	83 c4 10             	add    esp,0x10
c001a02b:	85 c0                	test   eax,eax
c001a02d:	74 19                	je     c001a048 <HalDetectFeatures()+0x5c4>
c001a02f:	83 ec 08             	sub    esp,0x8
c001a032:	68 3e b0 02 c0       	push   0xc002b03e
c001a037:	68 30 34 03 c0       	push   0xc0033430
c001a03c:	e8 0f 67 fe ff       	call   c0000750 <strcmp>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	85 c0                	test   eax,eax
c001a046:	75 04                	jne    c001a04c <HalDetectFeatures()+0x5c8>
c001a048:	b0 01                	mov    al,0x1
c001a04a:	eb 02                	jmp    c001a04e <HalDetectFeatures()+0x5ca>
c001a04c:	b0 00                	mov    al,0x0
c001a04e:	0f b6 c0             	movzx  eax,al
c001a051:	85 c0                	test   eax,eax
c001a053:	74 0f                	je     c001a064 <HalDetectFeatures()+0x5e0>
c001a055:	c7 05 44 34 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x2
c001a05f:	e9 0d 03 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a064:	83 ec 08             	sub    esp,0x8
c001a067:	68 4b b0 02 c0       	push   0xc002b04b
c001a06c:	68 30 34 03 c0       	push   0xc0033430
c001a071:	e8 da 66 fe ff       	call   c0000750 <strcmp>
c001a076:	83 c4 10             	add    esp,0x10
c001a079:	85 c0                	test   eax,eax
c001a07b:	74 19                	je     c001a096 <HalDetectFeatures()+0x612>
c001a07d:	83 ec 08             	sub    esp,0x8
c001a080:	68 58 b0 02 c0       	push   0xc002b058
c001a085:	68 30 34 03 c0       	push   0xc0033430
c001a08a:	e8 c1 66 fe ff       	call   c0000750 <strcmp>
c001a08f:	83 c4 10             	add    esp,0x10
c001a092:	85 c0                	test   eax,eax
c001a094:	75 04                	jne    c001a09a <HalDetectFeatures()+0x616>
c001a096:	b0 01                	mov    al,0x1
c001a098:	eb 02                	jmp    c001a09c <HalDetectFeatures()+0x618>
c001a09a:	b0 00                	mov    al,0x0
c001a09c:	0f b6 c0             	movzx  eax,al
c001a09f:	85 c0                	test   eax,eax
c001a0a1:	74 0f                	je     c001a0b2 <HalDetectFeatures()+0x62e>
c001a0a3:	c7 05 44 34 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x4
c001a0ad:	e9 bf 02 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a0b2:	83 ec 08             	sub    esp,0x8
c001a0b5:	68 65 b0 02 c0       	push   0xc002b065
c001a0ba:	68 30 34 03 c0       	push   0xc0033430
c001a0bf:	e8 8c 66 fe ff       	call   c0000750 <strcmp>
c001a0c4:	83 c4 10             	add    esp,0x10
c001a0c7:	85 c0                	test   eax,eax
c001a0c9:	74 19                	je     c001a0e4 <HalDetectFeatures()+0x660>
c001a0cb:	83 ec 08             	sub    esp,0x8
c001a0ce:	68 72 b0 02 c0       	push   0xc002b072
c001a0d3:	68 30 34 03 c0       	push   0xc0033430
c001a0d8:	e8 73 66 fe ff       	call   c0000750 <strcmp>
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	85 c0                	test   eax,eax
c001a0e2:	75 04                	jne    c001a0e8 <HalDetectFeatures()+0x664>
c001a0e4:	b0 01                	mov    al,0x1
c001a0e6:	eb 02                	jmp    c001a0ea <HalDetectFeatures()+0x666>
c001a0e8:	b0 00                	mov    al,0x0
c001a0ea:	0f b6 c0             	movzx  eax,al
c001a0ed:	85 c0                	test   eax,eax
c001a0ef:	74 0f                	je     c001a100 <HalDetectFeatures()+0x67c>
c001a0f1:	c7 05 44 34 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x5
c001a0fb:	e9 71 02 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a100:	83 ec 08             	sub    esp,0x8
c001a103:	68 7f b0 02 c0       	push   0xc002b07f
c001a108:	68 30 34 03 c0       	push   0xc0033430
c001a10d:	e8 3e 66 fe ff       	call   c0000750 <strcmp>
c001a112:	83 c4 10             	add    esp,0x10
c001a115:	85 c0                	test   eax,eax
c001a117:	0f 94 c0             	sete   al
c001a11a:	0f b6 c0             	movzx  eax,al
c001a11d:	85 c0                	test   eax,eax
c001a11f:	74 0f                	je     c001a130 <HalDetectFeatures()+0x6ac>
c001a121:	c7 05 44 34 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x1
c001a12b:	e9 41 02 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a130:	83 ec 08             	sub    esp,0x8
c001a133:	68 8c b0 02 c0       	push   0xc002b08c
c001a138:	68 30 34 03 c0       	push   0xc0033430
c001a13d:	e8 0e 66 fe ff       	call   c0000750 <strcmp>
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	85 c0                	test   eax,eax
c001a147:	0f 94 c0             	sete   al
c001a14a:	0f b6 c0             	movzx  eax,al
c001a14d:	85 c0                	test   eax,eax
c001a14f:	74 0f                	je     c001a160 <HalDetectFeatures()+0x6dc>
c001a151:	c7 05 44 34 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x3
c001a15b:	e9 11 02 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a160:	83 ec 08             	sub    esp,0x8
c001a163:	68 4b b0 02 c0       	push   0xc002b04b
c001a168:	68 30 34 03 c0       	push   0xc0033430
c001a16d:	e8 de 65 fe ff       	call   c0000750 <strcmp>
c001a172:	83 c4 10             	add    esp,0x10
c001a175:	85 c0                	test   eax,eax
c001a177:	0f 94 c0             	sete   al
c001a17a:	0f b6 c0             	movzx  eax,al
c001a17d:	85 c0                	test   eax,eax
c001a17f:	74 0f                	je     c001a190 <HalDetectFeatures()+0x70c>
c001a181:	c7 05 44 34 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x6
c001a18b:	e9 e1 01 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a190:	83 ec 08             	sub    esp,0x8
c001a193:	68 99 b0 02 c0       	push   0xc002b099
c001a198:	68 30 34 03 c0       	push   0xc0033430
c001a19d:	e8 ae 65 fe ff       	call   c0000750 <strcmp>
c001a1a2:	83 c4 10             	add    esp,0x10
c001a1a5:	85 c0                	test   eax,eax
c001a1a7:	0f 94 c0             	sete   al
c001a1aa:	0f b6 c0             	movzx  eax,al
c001a1ad:	85 c0                	test   eax,eax
c001a1af:	74 0f                	je     c001a1c0 <HalDetectFeatures()+0x73c>
c001a1b1:	c7 05 44 34 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x7
c001a1bb:	e9 b1 01 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a1c0:	83 ec 08             	sub    esp,0x8
c001a1c3:	68 a6 b0 02 c0       	push   0xc002b0a6
c001a1c8:	68 30 34 03 c0       	push   0xc0033430
c001a1cd:	e8 7e 65 fe ff       	call   c0000750 <strcmp>
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	85 c0                	test   eax,eax
c001a1d7:	0f 94 c0             	sete   al
c001a1da:	0f b6 c0             	movzx  eax,al
c001a1dd:	85 c0                	test   eax,eax
c001a1df:	74 0f                	je     c001a1f0 <HalDetectFeatures()+0x76c>
c001a1e1:	c7 05 44 34 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x8
c001a1eb:	e9 81 01 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a1f0:	83 ec 08             	sub    esp,0x8
c001a1f3:	68 b3 b0 02 c0       	push   0xc002b0b3
c001a1f8:	68 30 34 03 c0       	push   0xc0033430
c001a1fd:	e8 4e 65 fe ff       	call   c0000750 <strcmp>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	85 c0                	test   eax,eax
c001a207:	0f 94 c0             	sete   al
c001a20a:	0f b6 c0             	movzx  eax,al
c001a20d:	85 c0                	test   eax,eax
c001a20f:	74 0f                	je     c001a220 <HalDetectFeatures()+0x79c>
c001a211:	c7 05 44 34 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x9
c001a21b:	e9 51 01 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a220:	83 ec 08             	sub    esp,0x8
c001a223:	68 c0 b0 02 c0       	push   0xc002b0c0
c001a228:	68 30 34 03 c0       	push   0xc0033430
c001a22d:	e8 1e 65 fe ff       	call   c0000750 <strcmp>
c001a232:	83 c4 10             	add    esp,0x10
c001a235:	85 c0                	test   eax,eax
c001a237:	0f 94 c0             	sete   al
c001a23a:	0f b6 c0             	movzx  eax,al
c001a23d:	85 c0                	test   eax,eax
c001a23f:	74 0f                	je     c001a250 <HalDetectFeatures()+0x7cc>
c001a241:	c7 05 44 34 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xa
c001a24b:	e9 21 01 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a250:	83 ec 08             	sub    esp,0x8
c001a253:	68 cd b0 02 c0       	push   0xc002b0cd
c001a258:	68 30 34 03 c0       	push   0xc0033430
c001a25d:	e8 ee 64 fe ff       	call   c0000750 <strcmp>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	85 c0                	test   eax,eax
c001a267:	0f 94 c0             	sete   al
c001a26a:	0f b6 c0             	movzx  eax,al
c001a26d:	85 c0                	test   eax,eax
c001a26f:	74 0f                	je     c001a280 <HalDetectFeatures()+0x7fc>
c001a271:	c7 05 44 34 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xb
c001a27b:	e9 f1 00 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a280:	83 ec 08             	sub    esp,0x8
c001a283:	68 da b0 02 c0       	push   0xc002b0da
c001a288:	68 30 34 03 c0       	push   0xc0033430
c001a28d:	e8 be 64 fe ff       	call   c0000750 <strcmp>
c001a292:	83 c4 10             	add    esp,0x10
c001a295:	85 c0                	test   eax,eax
c001a297:	0f 94 c0             	sete   al
c001a29a:	0f b6 c0             	movzx  eax,al
c001a29d:	85 c0                	test   eax,eax
c001a29f:	74 0f                	je     c001a2b0 <HalDetectFeatures()+0x82c>
c001a2a1:	c7 05 44 34 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xc
c001a2ab:	e9 c1 00 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a2b0:	83 ec 08             	sub    esp,0x8
c001a2b3:	68 e7 b0 02 c0       	push   0xc002b0e7
c001a2b8:	68 30 34 03 c0       	push   0xc0033430
c001a2bd:	e8 8e 64 fe ff       	call   c0000750 <strcmp>
c001a2c2:	83 c4 10             	add    esp,0x10
c001a2c5:	85 c0                	test   eax,eax
c001a2c7:	0f 94 c0             	sete   al
c001a2ca:	0f b6 c0             	movzx  eax,al
c001a2cd:	85 c0                	test   eax,eax
c001a2cf:	74 0f                	je     c001a2e0 <HalDetectFeatures()+0x85c>
c001a2d1:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a2db:	e9 91 00 00 00       	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a2e0:	83 ec 08             	sub    esp,0x8
c001a2e3:	68 f4 b0 02 c0       	push   0xc002b0f4
c001a2e8:	68 30 34 03 c0       	push   0xc0033430
c001a2ed:	e8 5e 64 fe ff       	call   c0000750 <strcmp>
c001a2f2:	83 c4 10             	add    esp,0x10
c001a2f5:	85 c0                	test   eax,eax
c001a2f7:	0f 94 c0             	sete   al
c001a2fa:	0f b6 c0             	movzx  eax,al
c001a2fd:	85 c0                	test   eax,eax
c001a2ff:	74 0c                	je     c001a30d <HalDetectFeatures()+0x889>
c001a301:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a30b:	eb 64                	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a30d:	83 ec 08             	sub    esp,0x8
c001a310:	68 01 b1 02 c0       	push   0xc002b101
c001a315:	68 30 34 03 c0       	push   0xc0033430
c001a31a:	e8 31 64 fe ff       	call   c0000750 <strcmp>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	85 c0                	test   eax,eax
c001a324:	0f 94 c0             	sete   al
c001a327:	0f b6 c0             	movzx  eax,al
c001a32a:	85 c0                	test   eax,eax
c001a32c:	74 0c                	je     c001a33a <HalDetectFeatures()+0x8b6>
c001a32e:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a338:	eb 37                	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a33a:	83 ec 08             	sub    esp,0x8
c001a33d:	68 0e b1 02 c0       	push   0xc002b10e
c001a342:	68 30 34 03 c0       	push   0xc0033430
c001a347:	e8 04 64 fe ff       	call   c0000750 <strcmp>
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	85 c0                	test   eax,eax
c001a351:	0f 94 c0             	sete   al
c001a354:	0f b6 c0             	movzx  eax,al
c001a357:	85 c0                	test   eax,eax
c001a359:	74 0c                	je     c001a367 <HalDetectFeatures()+0x8e3>
c001a35b:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a365:	eb 0a                	jmp    c001a371 <HalDetectFeatures()+0x8ed>
c001a367:	c7 05 44 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x0
c001a371:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a375:	83 f8 06             	cmp    eax,0x6
c001a378:	0f 86 cc 00 00 00    	jbe    c001a44a <HalDetectFeatures()+0x9c6>
c001a37e:	83 ec 0c             	sub    esp,0xc
c001a381:	68 80 00 00 00       	push   0x80
c001a386:	e8 9d f6 ff ff       	call   c0019a28 <cpuidCheckExtendedEBX(unsigned int)>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	89 c1                	mov    ecx,eax
c001a390:	83 e1 01             	and    ecx,0x1
c001a393:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a398:	83 e0 fe             	and    eax,0xfffffffe
c001a39b:	88 c2                	mov    dl,al
c001a39d:	88 c8                	mov    al,cl
c001a39f:	09 d0                	or     eax,edx
c001a3a1:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a3a6:	83 ec 0c             	sub    esp,0xc
c001a3a9:	68 00 00 10 00       	push   0x100000
c001a3ae:	e8 75 f6 ff ff       	call   c0019a28 <cpuidCheckExtendedEBX(unsigned int)>
c001a3b3:	83 c4 10             	add    esp,0x10
c001a3b6:	83 e0 01             	and    eax,0x1
c001a3b9:	89 c1                	mov    ecx,eax
c001a3bb:	c1 e1 06             	shl    ecx,0x6
c001a3be:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a3c3:	83 e0 bf             	and    eax,0xffffffbf
c001a3c6:	88 c2                	mov    dl,al
c001a3c8:	88 c8                	mov    al,cl
c001a3ca:	09 d0                	or     eax,edx
c001a3cc:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a3d1:	83 ec 0c             	sub    esp,0xc
c001a3d4:	68 00 00 04 00       	push   0x40000
c001a3d9:	e8 4a f6 ff ff       	call   c0019a28 <cpuidCheckExtendedEBX(unsigned int)>
c001a3de:	83 c4 10             	add    esp,0x10
c001a3e1:	83 e0 01             	and    eax,0x1
c001a3e4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a3e7:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a3ec:	83 e0 fd             	and    eax,0xfffffffd
c001a3ef:	88 c2                	mov    dl,al
c001a3f1:	88 c8                	mov    al,cl
c001a3f3:	09 d0                	or     eax,edx
c001a3f5:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a3fa:	83 ec 0c             	sub    esp,0xc
c001a3fd:	6a 04                	push   0x4
c001a3ff:	e8 52 f6 ff ff       	call   c0019a56 <cpuidCheckExtendedECX(unsigned int)>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	83 e0 01             	and    eax,0x1
c001a40a:	89 c1                	mov    ecx,eax
c001a40c:	c1 e1 05             	shl    ecx,0x5
c001a40f:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a414:	83 e0 df             	and    eax,0xffffffdf
c001a417:	88 c2                	mov    dl,al
c001a419:	88 c8                	mov    al,cl
c001a41b:	09 d0                	or     eax,edx
c001a41d:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a422:	83 ec 0c             	sub    esp,0xc
c001a425:	6a 20                	push   0x20
c001a427:	e8 2a f6 ff ff       	call   c0019a56 <cpuidCheckExtendedECX(unsigned int)>
c001a42c:	83 c4 10             	add    esp,0x10
c001a42f:	83 e0 01             	and    eax,0x1
c001a432:	89 c1                	mov    ecx,eax
c001a434:	c1 e1 04             	shl    ecx,0x4
c001a437:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a43c:	83 e0 ef             	and    eax,0xffffffef
c001a43f:	88 c2                	mov    dl,al
c001a441:	88 c8                	mov    al,cl
c001a443:	09 d0                	or     eax,edx
c001a445:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a44a:	83 ec 0c             	sub    esp,0xc
c001a44d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a451:	50                   	push   eax
c001a452:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a456:	50                   	push   eax
c001a457:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a45b:	50                   	push   eax
c001a45c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a460:	50                   	push   eax
c001a461:	6a 01                	push   0x1
c001a463:	e8 c7 f4 ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a468:	83 c4 20             	add    esp,0x20
c001a46b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a46f:	83 e0 0f             	and    eax,0xf
c001a472:	a2 40 34 03 c0       	mov    ds:0xc0033440,al
c001a477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a47b:	c1 e8 04             	shr    eax,0x4
c001a47e:	83 e0 0f             	and    eax,0xf
c001a481:	a2 3e 34 03 c0       	mov    ds:0xc003343e,al
c001a486:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a48a:	c1 e8 08             	shr    eax,0x8
c001a48d:	83 e0 0f             	and    eax,0xf
c001a490:	a2 3d 34 03 c0       	mov    ds:0xc003343d,al
c001a495:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a499:	c1 e8 0c             	shr    eax,0xc
c001a49c:	83 e0 03             	and    eax,0x3
c001a49f:	a2 3f 34 03 c0       	mov    ds:0xc003343f,al
c001a4a4:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a4a9:	0f b6 c0             	movzx  eax,al
c001a4ac:	83 f8 06             	cmp    eax,0x6
c001a4af:	74 0d                	je     c001a4be <HalDetectFeatures()+0xa3a>
c001a4b1:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a4b6:	0f b6 c0             	movzx  eax,al
c001a4b9:	83 f8 0f             	cmp    eax,0xf
c001a4bc:	75 18                	jne    c001a4d6 <HalDetectFeatures()+0xa52>
c001a4be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4c2:	c1 e8 10             	shr    eax,0x10
c001a4c5:	c1 e0 04             	shl    eax,0x4
c001a4c8:	88 c2                	mov    dl,al
c001a4ca:	a0 3e 34 03 c0       	mov    al,ds:0xc003343e
c001a4cf:	09 d0                	or     eax,edx
c001a4d1:	a2 3e 34 03 c0       	mov    ds:0xc003343e,al
c001a4d6:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a4db:	0f b6 c0             	movzx  eax,al
c001a4de:	83 f8 0f             	cmp    eax,0xf
c001a4e1:	75 15                	jne    c001a4f8 <HalDetectFeatures()+0xa74>
c001a4e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4e7:	c1 e8 14             	shr    eax,0x14
c001a4ea:	88 c2                	mov    dl,al
c001a4ec:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a4f1:	01 d0                	add    eax,edx
c001a4f3:	a2 3d 34 03 c0       	mov    ds:0xc003343d,al
c001a4f8:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001a500:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001a508:	85 c0                	test   eax,eax
c001a50a:	74 2d                	je     c001a539 <HalDetectFeatures()+0xab5>
c001a50c:	83 ec 0c             	sub    esp,0xc
c001a50f:	68 00 00 00 40       	push   0x40000000
c001a514:	e8 e1 f4 ff ff       	call   c00199fa <cpuidCheckECX(unsigned int)>
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	83 e0 01             	and    eax,0x1
c001a51f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a526:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c001a52b:	83 e0 fb             	and    eax,0xfffffffb
c001a52e:	88 c2                	mov    dl,al
c001a530:	88 c8                	mov    al,cl
c001a532:	09 d0                	or     eax,edx
c001a534:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c001a539:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a53e:	83 c8 04             	or     eax,0x4
c001a541:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a546:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a54b:	83 c8 08             	or     eax,0x8
c001a54e:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a553:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a558:	83 c8 10             	or     eax,0x10
c001a55b:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a560:	83 ec 0c             	sub    esp,0xc
c001a563:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a567:	50                   	push   eax
c001a568:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a56c:	50                   	push   eax
c001a56d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a571:	50                   	push   eax
c001a572:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a576:	50                   	push   eax
c001a577:	68 00 00 00 80       	push   0x80000000
c001a57c:	e8 ae f3 ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a581:	83 c4 20             	add    esp,0x20
c001a584:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a588:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a58d:	0f 86 96 01 00 00    	jbe    c001a729 <HalDetectFeatures()+0xca5>
c001a593:	83 ec 0c             	sub    esp,0xc
c001a596:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a59a:	50                   	push   eax
c001a59b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a59f:	50                   	push   eax
c001a5a0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5a4:	50                   	push   eax
c001a5a5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a5a9:	50                   	push   eax
c001a5aa:	68 01 00 00 80       	push   0x80000001
c001a5af:	e8 7b f3 ff ff       	call   c001992f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a5b4:	83 c4 20             	add    esp,0x20
c001a5b7:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a5bc:	83 e0 7f             	and    eax,0x7f
c001a5bf:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a5c4:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a5c9:	83 e0 fb             	and    eax,0xfffffffb
c001a5cc:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a5d1:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a5d6:	83 e0 fd             	and    eax,0xfffffffd
c001a5d9:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a5de:	e9 46 01 00 00       	jmp    c001a729 <HalDetectFeatures()+0xca5>
c001a5e3:	83 ec 08             	sub    esp,0x8
c001a5e6:	68 7f b0 02 c0       	push   0xc002b07f
c001a5eb:	68 30 34 03 c0       	push   0xc0033430
c001a5f0:	e8 4b 60 fe ff       	call   c0000640 <strcpy>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	c7 05 44 34 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x1
c001a602:	e8 bc 5b fe ff       	call   c00001c3 <is486>
c001a607:	85 c0                	test   eax,eax
c001a609:	0f 95 c0             	setne  al
c001a60c:	0f b6 c0             	movzx  eax,al
c001a60f:	85 c0                	test   eax,eax
c001a611:	0f 84 8d 00 00 00    	je     c001a6a4 <HalDetectFeatures()+0xc20>
c001a617:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a61c:	83 c8 04             	or     eax,0x4
c001a61f:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a624:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a629:	83 c8 08             	or     eax,0x8
c001a62c:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a631:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a636:	83 c8 10             	or     eax,0x10
c001a639:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a63e:	0f 20 c0             	mov    eax,cr0
c001a641:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a645:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a649:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a650:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a657:	83 e0 04             	and    eax,0x4
c001a65a:	74 1e                	je     c001a67a <HalDetectFeatures()+0xbf6>
c001a65c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a663:	83 e0 10             	and    eax,0x10
c001a666:	75 12                	jne    c001a67a <HalDetectFeatures()+0xbf6>
c001a668:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a66d:	83 e0 f7             	and    eax,0xfffffff7
c001a670:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a675:	e9 af 00 00 00       	jmp    c001a729 <HalDetectFeatures()+0xca5>
c001a67a:	e8 1f 5b fe ff       	call   c000019e <hasLegacyFPU>
c001a67f:	83 e0 01             	and    eax,0x1
c001a682:	83 e0 01             	and    eax,0x1
c001a685:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a68c:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a691:	83 e0 f7             	and    eax,0xfffffff7
c001a694:	88 c2                	mov    dl,al
c001a696:	88 c8                	mov    al,cl
c001a698:	09 d0                	or     eax,edx
c001a69a:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a69f:	e9 85 00 00 00       	jmp    c001a729 <HalDetectFeatures()+0xca5>
c001a6a4:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a6a9:	83 e0 fb             	and    eax,0xfffffffb
c001a6ac:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a6b1:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a6b6:	83 e0 f7             	and    eax,0xfffffff7
c001a6b9:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a6be:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a6c3:	83 e0 ef             	and    eax,0xffffffef
c001a6c6:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a6cb:	0f 20 c0             	mov    eax,cr0
c001a6ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6d6:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001a6dd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6e4:	83 e0 04             	and    eax,0x4
c001a6e7:	74 1b                	je     c001a704 <HalDetectFeatures()+0xc80>
c001a6e9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6f0:	83 e0 10             	and    eax,0x10
c001a6f3:	75 0f                	jne    c001a704 <HalDetectFeatures()+0xc80>
c001a6f5:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a6fa:	83 e0 f7             	and    eax,0xfffffff7
c001a6fd:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a702:	eb 25                	jmp    c001a729 <HalDetectFeatures()+0xca5>
c001a704:	e8 95 5a fe ff       	call   c000019e <hasLegacyFPU>
c001a709:	83 e0 01             	and    eax,0x1
c001a70c:	83 e0 01             	and    eax,0x1
c001a70f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a716:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a71b:	83 e0 f7             	and    eax,0xfffffff7
c001a71e:	88 c2                	mov    dl,al
c001a720:	88 c8                	mov    al,cl
c001a722:	09 d0                	or     eax,edx
c001a724:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a729:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a72e:	83 e0 08             	and    eax,0x8
c001a731:	0f b6 c0             	movzx  eax,al
c001a734:	85 c0                	test   eax,eax
c001a736:	75 25                	jne    c001a75d <HalDetectFeatures()+0xcd9>
c001a738:	e8 61 5a fe ff       	call   c000019e <hasLegacyFPU>
c001a73d:	83 e0 01             	and    eax,0x1
c001a740:	83 e0 01             	and    eax,0x1
c001a743:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a74a:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a74f:	83 e0 f7             	and    eax,0xfffffff7
c001a752:	88 c2                	mov    dl,al
c001a754:	88 c8                	mov    al,cl
c001a756:	09 d0                	or     eax,edx
c001a758:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a75d:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a762:	83 e0 08             	and    eax,0x8
c001a765:	0f b6 c0             	movzx  eax,al
c001a768:	85 c0                	test   eax,eax
c001a76a:	74 0d                	je     c001a779 <HalDetectFeatures()+0xcf5>
c001a76c:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a771:	83 c8 10             	or     eax,0x10
c001a774:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a779:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a77e:	83 e0 10             	and    eax,0x10
c001a781:	0f b6 c0             	movzx  eax,al
c001a784:	85 c0                	test   eax,eax
c001a786:	75 23                	jne    c001a7ab <HalDetectFeatures()+0xd27>
c001a788:	e8 69 83 00 00       	call   c0022af6 <x87Detect>
c001a78d:	83 e0 01             	and    eax,0x1
c001a790:	83 e0 01             	and    eax,0x1
c001a793:	89 c1                	mov    ecx,eax
c001a795:	c1 e1 04             	shl    ecx,0x4
c001a798:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a79d:	83 e0 ef             	and    eax,0xffffffef
c001a7a0:	88 c2                	mov    dl,al
c001a7a2:	88 c8                	mov    al,cl
c001a7a4:	09 d0                	or     eax,edx
c001a7a6:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a7ab:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a7b0:	83 e0 01             	and    eax,0x1
c001a7b3:	0f b6 c0             	movzx  eax,al
c001a7b6:	85 c0                	test   eax,eax
c001a7b8:	75 2d                	jne    c001a7e7 <HalDetectFeatures()+0xd63>
c001a7ba:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a7bf:	83 e0 02             	and    eax,0x2
c001a7c2:	0f b6 c0             	movzx  eax,al
c001a7c5:	85 c0                	test   eax,eax
c001a7c7:	75 1e                	jne    c001a7e7 <HalDetectFeatures()+0xd63>
c001a7c9:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a7ce:	83 e0 04             	and    eax,0x4
c001a7d1:	0f b6 c0             	movzx  eax,al
c001a7d4:	85 c0                	test   eax,eax
c001a7d6:	75 0f                	jne    c001a7e7 <HalDetectFeatures()+0xd63>
c001a7d8:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a7dd:	83 e0 08             	and    eax,0x8
c001a7e0:	0f b6 c0             	movzx  eax,al
c001a7e3:	85 c0                	test   eax,eax
c001a7e5:	74 0d                	je     c001a7f4 <HalDetectFeatures()+0xd70>
c001a7e7:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a7ec:	83 c8 80             	or     eax,0xffffff80
c001a7ef:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a7f4:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a7f9:	83 e0 10             	and    eax,0x10
c001a7fc:	0f b6 c0             	movzx  eax,al
c001a7ff:	85 c0                	test   eax,eax
c001a801:	74 2f                	je     c001a832 <HalDetectFeatures()+0xdae>
c001a803:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a808:	83 e0 80             	and    eax,0xffffff80
c001a80b:	0f b6 c0             	movzx  eax,al
c001a80e:	85 c0                	test   eax,eax
c001a810:	75 20                	jne    c001a832 <HalDetectFeatures()+0xdae>
c001a812:	e8 99 82 00 00       	call   c0022ab0 <sseDetect>
c001a817:	83 e0 01             	and    eax,0x1
c001a81a:	89 c1                	mov    ecx,eax
c001a81c:	c1 e1 07             	shl    ecx,0x7
c001a81f:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a824:	83 e0 7f             	and    eax,0x7f
c001a827:	88 c2                	mov    dl,al
c001a829:	88 c8                	mov    al,cl
c001a82b:	09 d0                	or     eax,edx
c001a82d:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a832:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a837:	83 e0 80             	and    eax,0xffffff80
c001a83a:	0f b6 c0             	movzx  eax,al
c001a83d:	85 c0                	test   eax,eax
c001a83f:	74 1c                	je     c001a85d <HalDetectFeatures()+0xdd9>
c001a841:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a846:	83 e0 20             	and    eax,0x20
c001a849:	0f b6 c0             	movzx  eax,al
c001a84c:	85 c0                	test   eax,eax
c001a84e:	75 0d                	jne    c001a85d <HalDetectFeatures()+0xdd9>
c001a850:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a855:	83 e0 df             	and    eax,0xffffffdf
c001a858:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c001a85d:	c6 05 48 34 03 c0 00 	mov    BYTE PTR ds:0xc0033448,0x0
c001a864:	90                   	nop
c001a865:	81 c4 90 00 00 00    	add    esp,0x90
c001a86b:	5b                   	pop    ebx
c001a86c:	5e                   	pop    esi
c001a86d:	5f                   	pop    edi
c001a86e:	c3                   	ret    

c001a86f <HalEnableNMI()>:
c001a86f:	c6 05 2c 34 03 c0 01 	mov    BYTE PTR ds:0xc003342c,0x1
c001a876:	6a 10                	push   0x10
c001a878:	e8 02 ef ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001a87d:	83 c4 04             	add    esp,0x4
c001a880:	90                   	nop
c001a881:	c3                   	ret    

c001a882 <HalDisableNMI()>:
c001a882:	c6 05 2c 34 03 c0 00 	mov    BYTE PTR ds:0xc003342c,0x0
c001a889:	6a 10                	push   0x10
c001a88b:	e8 ef ee ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001a890:	83 c4 04             	add    esp,0x4
c001a893:	90                   	nop
c001a894:	c3                   	ret    

c001a895 <HalGetNMIState()>:
c001a895:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c001a89a:	c3                   	ret    

c001a89b <HalIsAPICEnabled()>:
c001a89b:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a8a0:	83 e0 01             	and    eax,0x1
c001a8a3:	0f b6 c0             	movzx  eax,al
c001a8a6:	85 c0                	test   eax,eax
c001a8a8:	0f 95 c0             	setne  al
c001a8ab:	c3                   	ret    

c001a8ac <x86rdmsr(unsigned int)>:
c001a8ac:	83 ec 1c             	sub    esp,0x1c
c001a8af:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a8b4:	83 e0 08             	and    eax,0x8
c001a8b7:	0f b6 c0             	movzx  eax,al
c001a8ba:	85 c0                	test   eax,eax
c001a8bc:	75 10                	jne    c001a8ce <x86rdmsr(unsigned int)+0x22>
c001a8be:	83 ec 0c             	sub    esp,0xc
c001a8c1:	68 1a b1 02 c0       	push   0xc002b11a
c001a8c6:	e8 45 5c ff ff       	call   c0010510 <KePanic(char const*)>
c001a8cb:	83 c4 10             	add    esp,0x10
c001a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8d2:	89 c1                	mov    ecx,eax
c001a8d4:	0f 32                	rdmsr  
c001a8d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a8de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8e6:	83 c4 1c             	add    esp,0x1c
c001a8e9:	c3                   	ret    

c001a8ea <x86wrmsr(unsigned int, unsigned long long)>:
c001a8ea:	83 ec 1c             	sub    esp,0x1c
c001a8ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a8f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a8f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8fd:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a902:	83 e0 08             	and    eax,0x8
c001a905:	0f b6 c0             	movzx  eax,al
c001a908:	85 c0                	test   eax,eax
c001a90a:	75 10                	jne    c001a91c <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a90c:	83 ec 0c             	sub    esp,0xc
c001a90f:	68 20 b1 02 c0       	push   0xc002b120
c001a914:	e8 f7 5b ff ff       	call   c0010510 <KePanic(char const*)>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a928:	0f 30                	wrmsr  
c001a92a:	90                   	nop
c001a92b:	83 c4 1c             	add    esp,0x1c
c001a92e:	c3                   	ret    

c001a92f <HalHandleGeneralProtectionFault(void*, void*)>:
c001a92f:	83 ec 0c             	sub    esp,0xc
c001a932:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a937:	8b 00                	mov    eax,DWORD PTR [eax]
c001a939:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a93c:	0f b6 c0             	movzx  eax,al
c001a93f:	85 c0                	test   eax,eax
c001a941:	74 11                	je     c001a954 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a943:	83 ec 0c             	sub    esp,0xc
c001a946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a94a:	e8 78 db ff ff       	call   c00184c7 <Vm::faultHandler(regs*)>
c001a94f:	83 c4 10             	add    esp,0x10
c001a952:	eb 02                	jmp    c001a956 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a954:	b0 00                	mov    al,0x0
c001a956:	83 c4 0c             	add    esp,0xc
c001a959:	c3                   	ret    

c001a95a <HalFindRSDP()>:
c001a95a:	83 ec 1c             	sub    esp,0x1c
c001a95d:	a1 7c 31 03 c0       	mov    eax,ds:0xc003317c
c001a962:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a967:	7e 17                	jle    c001a980 <HalFindRSDP()+0x26>
c001a969:	83 ec 0c             	sub    esp,0xc
c001a96c:	68 00 04 00 00       	push   0x400
c001a971:	e8 5a 31 ff ff       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a976:	83 c4 10             	add    esp,0x10
c001a979:	0f b6 c0             	movzx  eax,al
c001a97c:	85 c0                	test   eax,eax
c001a97e:	74 04                	je     c001a984 <HalFindRSDP()+0x2a>
c001a980:	b0 01                	mov    al,0x1
c001a982:	eb 02                	jmp    c001a986 <HalFindRSDP()+0x2c>
c001a984:	b0 00                	mov    al,0x0
c001a986:	0f b6 c0             	movzx  eax,al
c001a989:	85 c0                	test   eax,eax
c001a98b:	74 1d                	je     c001a9aa <HalFindRSDP()+0x50>
c001a98d:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a992:	83 e0 fb             	and    eax,0xfffffffb
c001a995:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	68 26 b1 02 c0       	push   0xc002b126
c001a9a2:	e8 d5 c5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a9a7:	83 c4 10             	add    esp,0x10
c001a9aa:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a9af:	83 e0 04             	and    eax,0x4
c001a9b2:	0f b6 c0             	movzx  eax,al
c001a9b5:	85 c0                	test   eax,eax
c001a9b7:	75 17                	jne    c001a9d0 <HalFindRSDP()+0x76>
c001a9b9:	83 ec 0c             	sub    esp,0xc
c001a9bc:	68 35 b1 02 c0       	push   0xc002b135
c001a9c1:	e8 b6 c5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a9c6:	83 c4 10             	add    esp,0x10
c001a9c9:	b8 00 00 00 00       	mov    eax,0x0
c001a9ce:	eb 63                	jmp    c001aa33 <HalFindRSDP()+0xd9>
c001a9d0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a9d8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a9e0:	77 2f                	ja     c001aa11 <HalFindRSDP()+0xb7>
c001a9e2:	83 ec 04             	sub    esp,0x4
c001a9e5:	6a 08                	push   0x8
c001a9e7:	68 3f b1 02 c0       	push   0xc002b13f
c001a9ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a9f0:	e8 8b 59 fe ff       	call   c0000380 <memcmp>
c001a9f5:	83 c4 10             	add    esp,0x10
c001a9f8:	85 c0                	test   eax,eax
c001a9fa:	0f 94 c0             	sete   al
c001a9fd:	0f b6 c0             	movzx  eax,al
c001aa00:	85 c0                	test   eax,eax
c001aa02:	74 06                	je     c001aa0a <HalFindRSDP()+0xb0>
c001aa04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa08:	eb 29                	jmp    c001aa33 <HalFindRSDP()+0xd9>
c001aa0a:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001aa0f:	eb c7                	jmp    c001a9d8 <HalFindRSDP()+0x7e>
c001aa11:	83 ec 0c             	sub    esp,0xc
c001aa14:	68 48 b1 02 c0       	push   0xc002b148
c001aa19:	e8 5e c5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aa1e:	83 c4 10             	add    esp,0x10
c001aa21:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001aa26:	83 e0 fb             	and    eax,0xfffffffb
c001aa29:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001aa2e:	b8 00 00 00 00       	mov    eax,0x0
c001aa33:	83 c4 1c             	add    esp,0x1c
c001aa36:	c3                   	ret    

c001aa37 <HalHandlePageFault(void*, void*)>:
c001aa37:	83 ec 1c             	sub    esp,0x1c
c001aa3a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001aa3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa44:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001aa4a:	0f 20 d2             	mov    edx,cr2
c001aa4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aa51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa55:	83 ec 08             	sub    esp,0x8
c001aa58:	52                   	push   edx
c001aa59:	50                   	push   eax
c001aa5a:	e8 15 9e ff ff       	call   c0014874 <VAS::tryLoadBackOffDisk(unsigned long)>
c001aa5f:	83 c4 10             	add    esp,0x10
c001aa62:	83 c4 1c             	add    esp,0x1c
c001aa65:	c3                   	ret    

c001aa66 <HalHandleOpcodeFault(void*, void*)>:
c001aa66:	83 ec 1c             	sub    esp,0x1c
c001aa69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa71:	a0 48 34 03 c0       	mov    al,ds:0xc0033448
c001aa76:	0f b6 c0             	movzx  eax,al
c001aa79:	85 c0                	test   eax,eax
c001aa7b:	74 25                	je     c001aaa2 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001aa7d:	83 ec 0c             	sub    esp,0xc
c001aa80:	68 54 b3 02 c0       	push   0xc002b354
c001aa85:	e8 f2 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aa8a:	83 c4 10             	add    esp,0x10
c001aa8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa91:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001aa94:	8d 50 19             	lea    edx,[eax+0x19]
c001aa97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa9b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001aa9e:	b0 01                	mov    al,0x1
c001aaa0:	eb 02                	jmp    c001aaa4 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001aaa2:	b0 00                	mov    al,0x0
c001aaa4:	83 c4 1c             	add    esp,0x1c
c001aaa7:	c3                   	ret    

c001aaa8 <HalDisplayDebugInfo(void*)>:
c001aaa8:	83 ec 2c             	sub    esp,0x2c
c001aaab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aaaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aab3:	0f 20 c0             	mov    eax,cr0
c001aab6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aaba:	0f 20 d0             	mov    eax,cr2
c001aabd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aac1:	0f 20 d8             	mov    eax,cr3
c001aac4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aac8:	0f 20 e0             	mov    eax,cr4
c001aacb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aacf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aad3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001aad6:	83 ec 08             	sub    esp,0x8
c001aad9:	50                   	push   eax
c001aada:	68 62 b1 02 c0       	push   0xc002b162
c001aadf:	e8 98 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aae4:	83 c4 10             	add    esp,0x10
c001aae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaeb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001aaee:	83 ec 08             	sub    esp,0x8
c001aaf1:	50                   	push   eax
c001aaf2:	68 53 b1 02 c0       	push   0xc002b153
c001aaf7:	e8 80 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab03:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001ab06:	83 ec 08             	sub    esp,0x8
c001ab09:	50                   	push   eax
c001ab0a:	68 5e b1 02 c0       	push   0xc002b15e
c001ab0f:	e8 68 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab14:	83 c4 10             	add    esp,0x10
c001ab17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ab1e:	83 ec 08             	sub    esp,0x8
c001ab21:	50                   	push   eax
c001ab22:	68 6d b1 02 c0       	push   0xc002b16d
c001ab27:	e8 50 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab2c:	83 c4 10             	add    esp,0x10
c001ab2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab33:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001ab36:	83 ec 08             	sub    esp,0x8
c001ab39:	50                   	push   eax
c001ab3a:	68 78 b1 02 c0       	push   0xc002b178
c001ab3f:	e8 38 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab44:	83 c4 10             	add    esp,0x10
c001ab47:	83 ec 08             	sub    esp,0x8
c001ab4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab4e:	68 83 b1 02 c0       	push   0xc002b183
c001ab53:	e8 24 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab58:	83 c4 10             	add    esp,0x10
c001ab5b:	83 ec 08             	sub    esp,0x8
c001ab5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab62:	68 8e b1 02 c0       	push   0xc002b18e
c001ab67:	e8 10 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab6c:	83 c4 10             	add    esp,0x10
c001ab6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab73:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001ab76:	c1 e0 05             	shl    eax,0x5
c001ab79:	8d 90 00 d6 02 c0    	lea    edx,[eax-0x3ffd2a00]
c001ab7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab83:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001ab86:	83 ec 04             	sub    esp,0x4
c001ab89:	52                   	push   edx
c001ab8a:	50                   	push   eax
c001ab8b:	68 99 b1 02 c0       	push   0xc002b199
c001ab90:	e8 e7 c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ab9d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aba3:	83 ec 0c             	sub    esp,0xc
c001aba6:	50                   	push   eax
c001aba7:	e8 83 7f ff ff       	call   c0012b2f <setActiveTerminal(VgaText*)>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001abb4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abba:	83 ec 08             	sub    esp,0x8
c001abbd:	68 a8 b1 02 c0       	push   0xc002b1a8
c001abc2:	50                   	push   eax
c001abc3:	e8 b4 82 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001abc8:	83 c4 10             	add    esp,0x10
c001abcb:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001abd0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001abda:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001abdd:	83 ec 08             	sub    esp,0x8
c001abe0:	52                   	push   edx
c001abe1:	50                   	push   eax
c001abe2:	e8 4f 82 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001abe7:	83 c4 10             	add    esp,0x10
c001abea:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001abef:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abf5:	83 ec 08             	sub    esp,0x8
c001abf8:	68 b6 b1 02 c0       	push   0xc002b1b6
c001abfd:	50                   	push   eax
c001abfe:	e8 79 82 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ac03:	83 c4 10             	add    esp,0x10
c001ac06:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ac0b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac11:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001ac16:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac18:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ac1b:	83 c2 0c             	add    edx,0xc
c001ac1e:	83 ec 08             	sub    esp,0x8
c001ac21:	52                   	push   edx
c001ac22:	50                   	push   eax
c001ac23:	e8 54 82 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ac28:	83 c4 10             	add    esp,0x10
c001ac2b:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ac30:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac36:	83 ec 08             	sub    esp,0x8
c001ac39:	68 bf b1 02 c0       	push   0xc002b1bf
c001ac3e:	50                   	push   eax
c001ac3f:	e8 38 82 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ac4c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac56:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001ac59:	83 ec 08             	sub    esp,0x8
c001ac5c:	52                   	push   edx
c001ac5d:	50                   	push   eax
c001ac5e:	e8 d3 81 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ac6b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac71:	83 ec 08             	sub    esp,0x8
c001ac74:	68 c7 b1 02 c0       	push   0xc002b1c7
c001ac79:	50                   	push   eax
c001ac7a:	e8 fd 81 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ac7f:	83 c4 10             	add    esp,0x10
c001ac82:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ac87:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac91:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001ac94:	83 ec 08             	sub    esp,0x8
c001ac97:	52                   	push   edx
c001ac98:	50                   	push   eax
c001ac99:	e8 98 81 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001ac9e:	83 c4 10             	add    esp,0x10
c001aca1:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aca6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001acac:	83 ec 08             	sub    esp,0x8
c001acaf:	68 cf b1 02 c0       	push   0xc002b1cf
c001acb4:	50                   	push   eax
c001acb5:	e8 c2 81 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001acba:	83 c4 10             	add    esp,0x10
c001acbd:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001acc2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001acc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001accc:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001accf:	83 ec 08             	sub    esp,0x8
c001acd2:	52                   	push   edx
c001acd3:	50                   	push   eax
c001acd4:	e8 5d 81 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001acd9:	83 c4 10             	add    esp,0x10
c001acdc:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ace1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ace7:	83 ec 08             	sub    esp,0x8
c001acea:	68 d7 b1 02 c0       	push   0xc002b1d7
c001acef:	50                   	push   eax
c001acf0:	e8 87 81 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001acf5:	83 c4 10             	add    esp,0x10
c001acf8:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001acfd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad07:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001ad0a:	83 ec 08             	sub    esp,0x8
c001ad0d:	52                   	push   edx
c001ad0e:	50                   	push   eax
c001ad0f:	e8 22 81 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001ad14:	83 c4 10             	add    esp,0x10
c001ad17:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ad1c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad22:	83 ec 08             	sub    esp,0x8
c001ad25:	68 df b1 02 c0       	push   0xc002b1df
c001ad2a:	50                   	push   eax
c001ad2b:	e8 4c 81 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ad38:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad42:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001ad45:	83 ec 08             	sub    esp,0x8
c001ad48:	52                   	push   edx
c001ad49:	50                   	push   eax
c001ad4a:	e8 e7 80 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ad57:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad5d:	83 ec 08             	sub    esp,0x8
c001ad60:	68 e7 b1 02 c0       	push   0xc002b1e7
c001ad65:	50                   	push   eax
c001ad66:	e8 11 81 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ad6b:	83 c4 10             	add    esp,0x10
c001ad6e:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ad73:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad7d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ad80:	83 ec 08             	sub    esp,0x8
c001ad83:	52                   	push   edx
c001ad84:	50                   	push   eax
c001ad85:	e8 ac 80 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ad92:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad98:	83 ec 08             	sub    esp,0x8
c001ad9b:	68 ef b1 02 c0       	push   0xc002b1ef
c001ada0:	50                   	push   eax
c001ada1:	e8 d6 80 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ada6:	83 c4 10             	add    esp,0x10
c001ada9:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001adae:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001adb4:	83 ec 08             	sub    esp,0x8
c001adb7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001adbb:	50                   	push   eax
c001adbc:	e8 75 80 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001adc9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001adcf:	83 ec 08             	sub    esp,0x8
c001add2:	68 f8 b1 02 c0       	push   0xc002b1f8
c001add7:	50                   	push   eax
c001add8:	e8 9f 80 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001addd:	83 c4 10             	add    esp,0x10
c001ade0:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ade5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001adeb:	83 ec 08             	sub    esp,0x8
c001adee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adf2:	50                   	push   eax
c001adf3:	e8 3e 80 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001adf8:	83 c4 10             	add    esp,0x10
c001adfb:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ae00:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae06:	83 ec 08             	sub    esp,0x8
c001ae09:	68 00 b2 02 c0       	push   0xc002b200
c001ae0e:	50                   	push   eax
c001ae0f:	e8 68 80 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001ae14:	83 c4 10             	add    esp,0x10
c001ae17:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ae1c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae22:	83 ec 08             	sub    esp,0x8
c001ae25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae29:	50                   	push   eax
c001ae2a:	e8 07 80 ff ff       	call   c0012e36 <VgaText::putx(unsigned int)>
c001ae2f:	83 c4 10             	add    esp,0x10
c001ae32:	fa                   	cli    
c001ae33:	f4                   	hlt    
c001ae34:	eb fe                	jmp    c001ae34 <HalDisplayDebugInfo(void*)+0x38c>

c001ae36 <HalReceivedNMI()>:
c001ae36:	83 ec 1c             	sub    esp,0x1c
c001ae39:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001ae40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae44:	89 c2                	mov    edx,eax
c001ae46:	ec                   	in     al,dx
c001ae47:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001ae4b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001ae4f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ae53:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001ae5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae5e:	89 c2                	mov    edx,eax
c001ae60:	ec                   	in     al,dx
c001ae61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ae65:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001ae69:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ae6d:	83 ec 0c             	sub    esp,0xc
c001ae70:	68 08 b2 02 c0       	push   0xc002b208
c001ae75:	e8 02 c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ae7a:	83 c4 10             	add    esp,0x10
c001ae7d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ae82:	83 e0 10             	and    eax,0x10
c001ae85:	74 10                	je     c001ae97 <HalReceivedNMI()+0x61>
c001ae87:	83 ec 0c             	sub    esp,0xc
c001ae8a:	68 19 b2 02 c0       	push   0xc002b219
c001ae8f:	e8 7c 56 ff ff       	call   c0010510 <KePanic(char const*)>
c001ae94:	83 c4 10             	add    esp,0x10
c001ae97:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ae9c:	83 e0 40             	and    eax,0x40
c001ae9f:	74 10                	je     c001aeb1 <HalReceivedNMI()+0x7b>
c001aea1:	83 ec 0c             	sub    esp,0xc
c001aea4:	68 26 b2 02 c0       	push   0xc002b226
c001aea9:	e8 62 56 ff ff       	call   c0010510 <KePanic(char const*)>
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001aeb5:	0f be c0             	movsx  eax,al
c001aeb8:	85 c0                	test   eax,eax
c001aeba:	79 10                	jns    c001aecc <HalReceivedNMI()+0x96>
c001aebc:	83 ec 0c             	sub    esp,0xc
c001aebf:	68 30 b2 02 c0       	push   0xc002b230
c001aec4:	e8 47 56 ff ff       	call   c0010510 <KePanic(char const*)>
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	90                   	nop
c001aecd:	83 c4 1c             	add    esp,0x1c
c001aed0:	c3                   	ret    

c001aed1 <HalSystemIdle()>:
c001aed1:	56                   	push   esi
c001aed2:	53                   	push   ebx
c001aed3:	83 ec 14             	sub    esp,0x14
c001aed6:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001aedb:	83 e0 10             	and    eax,0x10
c001aede:	0f b6 c0             	movzx  eax,al
c001aee1:	85 c0                	test   eax,eax
c001aee3:	74 43                	je     c001af28 <HalSystemIdle()+0x57>
c001aee5:	83 ec 0c             	sub    esp,0xc
c001aee8:	68 e1 00 00 00       	push   0xe1
c001aeed:	e8 ba f9 ff ff       	call   c001a8ac <x86rdmsr(unsigned int)>
c001aef2:	83 c4 10             	add    esp,0x10
c001aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aefd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af01:	83 e0 02             	and    eax,0x2
c001af04:	89 c3                	mov    ebx,eax
c001af06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af0a:	83 e0 00             	and    eax,0x0
c001af0d:	89 c6                	mov    esi,eax
c001af0f:	83 ec 04             	sub    esp,0x4
c001af12:	56                   	push   esi
c001af13:	53                   	push   ebx
c001af14:	68 e1 00 00 00       	push   0xe1
c001af19:	e8 cc f9 ff ff       	call   c001a8ea <x86wrmsr(unsigned int, unsigned long long)>
c001af1e:	83 c4 10             	add    esp,0x10
c001af21:	e8 6e 52 fe ff       	call   c0000194 <doTPAUSE>
c001af26:	eb 01                	jmp    c001af29 <HalSystemIdle()+0x58>
c001af28:	f4                   	hlt    
c001af29:	90                   	nop
c001af2a:	83 c4 14             	add    esp,0x14
c001af2d:	5b                   	pop    ebx
c001af2e:	5e                   	pop    esi
c001af2f:	c3                   	ret    

c001af30 <i386SaveCoprocessor(void*)>:
c001af30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af34:	83 c0 3f             	add    eax,0x3f
c001af37:	83 e0 c0             	and    eax,0xffffffc0
c001af3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af3e:	ff 25 10 34 03 c0    	jmp    DWORD PTR ds:0xc0033410

c001af44 <i386LoadCoprocessor(void*)>:
c001af44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af48:	83 c0 3f             	add    eax,0x3f
c001af4b:	83 e0 c0             	and    eax,0xffffffc0
c001af4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af52:	ff 25 0c 34 03 c0    	jmp    DWORD PTR ds:0xc003340c

c001af58 <x87EmulHandler(regs*, void*)>:
c001af58:	53                   	push   ebx
c001af59:	83 ec 08             	sub    esp,0x8
c001af5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af61:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001af65:	74 10                	je     c001af77 <x87EmulHandler(regs*, void*)+0x1f>
c001af67:	83 ec 0c             	sub    esp,0xc
c001af6a:	68 3d b2 02 c0       	push   0xc002b23d
c001af6f:	e8 9c 55 ff ff       	call   c0010510 <KePanic(char const*)>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	0f 20 c0             	mov    eax,cr0
c001af7a:	a8 08                	test   al,0x8
c001af7c:	74 59                	je     c001afd7 <x87EmulHandler(regs*, void*)+0x7f>
c001af7e:	0f 06                	clts   
c001af80:	a1 08 34 03 c0       	mov    eax,ds:0xc0033408
c001af85:	85 c0                	test   eax,eax
c001af87:	74 0e                	je     c001af97 <x87EmulHandler(regs*, void*)+0x3f>
c001af89:	83 ec 0c             	sub    esp,0xc
c001af8c:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001af8f:	e8 9c ff ff ff       	call   c001af30 <i386SaveCoprocessor(void*)>
c001af94:	83 c4 10             	add    esp,0x10
c001af97:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001af9d:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001afa1:	75 12                	jne    c001afb5 <x87EmulHandler(regs*, void*)+0x5d>
c001afa3:	83 ec 0c             	sub    esp,0xc
c001afa6:	68 40 02 00 00       	push   0x240
c001afab:	e8 0b 51 ff ff       	call   c00100bb <malloc>
c001afb0:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001afb3:	eb 10                	jmp    c001afc5 <x87EmulHandler(regs*, void*)+0x6d>
c001afb5:	83 ec 0c             	sub    esp,0xc
c001afb8:	a1 08 34 03 c0       	mov    eax,ds:0xc0033408
c001afbd:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001afc0:	e8 7f ff ff ff       	call   c001af44 <i386LoadCoprocessor(void*)>
c001afc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afca:	83 c4 10             	add    esp,0x10
c001afcd:	a3 08 34 03 c0       	mov    ds:0xc0033408,eax
c001afd2:	83 c4 08             	add    esp,0x8
c001afd5:	5b                   	pop    ebx
c001afd6:	c3                   	ret    
c001afd7:	83 ec 0c             	sub    esp,0xc
c001afda:	68 51 b2 02 c0       	push   0xc002b251
c001afdf:	e8 98 bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001afe4:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001afec:	83 c4 18             	add    esp,0x18
c001afef:	5b                   	pop    ebx
c001aff0:	e9 b3 c8 ff ff       	jmp    c00178a8 <KeTerminateCurrentThread(int)>

c001aff5 <HalInitialiseCoprocessor()>:
c001aff5:	83 ec 10             	sub    esp,0x10
c001aff8:	c7 05 08 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033408,0x0
c001b002:	6a 00                	push   0x0
c001b004:	68 58 af 01 c0       	push   0xc001af58
c001b009:	6a 07                	push   0x7
c001b00b:	e8 fb 07 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b010:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001b015:	83 c4 10             	add    esp,0x10
c001b018:	a8 80                	test   al,0x80
c001b01a:	74 29                	je     c001b045 <HalInitialiseCoprocessor()+0x50>
c001b01c:	83 ec 0c             	sub    esp,0xc
c001b01f:	68 67 b2 02 c0       	push   0xc002b267
c001b024:	e8 53 bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b029:	c7 05 10 34 03 c0 c8 2a 02 c0 	mov    DWORD PTR ds:0xc0033410,0xc0022ac8
c001b033:	c7 05 0c 34 03 c0 d0 2a 02 c0 	mov    DWORD PTR ds:0xc003340c,0xc0022ad0
c001b03d:	83 c4 1c             	add    esp,0x1c
c001b040:	e9 93 7a 00 00       	jmp    c0022ad8 <sseInit>
c001b045:	a8 10                	test   al,0x10
c001b047:	74 29                	je     c001b072 <HalInitialiseCoprocessor()+0x7d>
c001b049:	83 ec 0c             	sub    esp,0xc
c001b04c:	68 72 b2 02 c0       	push   0xc002b272
c001b051:	e8 26 bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b056:	c7 05 10 34 03 c0 17 2b 02 c0 	mov    DWORD PTR ds:0xc0033410,0xc0022b17
c001b060:	c7 05 0c 34 03 c0 1e 2b 02 c0 	mov    DWORD PTR ds:0xc003340c,0xc0022b1e
c001b06a:	83 c4 1c             	add    esp,0x1c
c001b06d:	e9 b3 7a 00 00       	jmp    c0022b25 <x87Init>
c001b072:	c7 05 10 34 03 c0 6e 97 01 c0 	mov    DWORD PTR ds:0xc0033410,0xc001976e
c001b07c:	c7 05 0c 34 03 c0 6e 97 01 c0 	mov    DWORD PTR ds:0xc003340c,0xc001976e
c001b086:	0f 20 c0             	mov    eax,cr0
c001b089:	83 c8 04             	or     eax,0x4
c001b08c:	0f 22 c0             	mov    cr0,eax
c001b08f:	83 c4 0c             	add    esp,0xc
c001b092:	c3                   	ret    

c001b093 <HalPanic(char const*)>:
c001b093:	53                   	push   ebx
c001b094:	83 ec 10             	sub    esp,0x10
c001b097:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b09b:	fa                   	cli    
c001b09c:	53                   	push   ebx
c001b09d:	68 7d b2 02 c0       	push   0xc002b27d
c001b0a2:	e8 d5 be fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b0a7:	a1 04 34 03 c0       	mov    eax,ds:0xc0033404
c001b0ac:	83 c4 10             	add    esp,0x10
c001b0af:	85 c0                	test   eax,eax
c001b0b1:	74 09                	je     c001b0bc <HalPanic(char const*)+0x29>
c001b0b3:	83 ec 0c             	sub    esp,0xc
c001b0b6:	53                   	push   ebx
c001b0b7:	ff d0                	call   eax
c001b0b9:	83 c4 10             	add    esp,0x10
c001b0bc:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c001b0c1:	85 c0                	test   eax,eax
c001b0c3:	0f 84 dc 00 00 00    	je     c001b1a5 <HalPanic(char const*)+0x112>
c001b0c9:	52                   	push   edx
c001b0ca:	6a 01                	push   0x1
c001b0cc:	6a 0f                	push   0xf
c001b0ce:	50                   	push   eax
c001b0cf:	e8 9a 78 ff ff       	call   c001296e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b0d4:	59                   	pop    ecx
c001b0d5:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b0db:	e8 9a 7a ff ff       	call   c0012b7a <VgaText::clearScreen()>
c001b0e0:	58                   	pop    eax
c001b0e1:	5a                   	pop    edx
c001b0e2:	68 50 a2 02 c0       	push   0xc002a250
c001b0e7:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b0ed:	e8 b4 78 ff ff       	call   c00129a6 <VgaText::setTitle(char*)>
c001b0f2:	83 c4 0c             	add    esp,0xc
c001b0f5:	6a 01                	push   0x1
c001b0f7:	6a 0f                	push   0xf
c001b0f9:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b0ff:	e8 6a 78 ff ff       	call   c001296e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b104:	59                   	pop    ecx
c001b105:	58                   	pop    eax
c001b106:	68 96 b2 02 c0       	push   0xc002b296
c001b10b:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b111:	e8 66 7d ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001b116:	83 c4 0c             	add    esp,0xc
c001b119:	6a 0f                	push   0xf
c001b11b:	6a 01                	push   0x1
c001b11d:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b123:	e8 46 78 ff ff       	call   c001296e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b128:	58                   	pop    eax
c001b129:	5a                   	pop    edx
c001b12a:	68 9f b2 02 c0       	push   0xc002b29f
c001b12f:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b135:	e8 42 7d ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001b13a:	83 c4 0c             	add    esp,0xc
c001b13d:	6a 01                	push   0x1
c001b13f:	6a 0f                	push   0xf
c001b141:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b147:	e8 22 78 ff ff       	call   c001296e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b14c:	59                   	pop    ecx
c001b14d:	58                   	pop    eax
c001b14e:	68 e6 8d 02 c0       	push   0xc0028de6
c001b153:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b159:	e8 1e 7d ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001b15e:	58                   	pop    eax
c001b15f:	5a                   	pop    edx
c001b160:	68 ac b2 02 c0       	push   0xc002b2ac
c001b165:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b16b:	e8 0c 7d ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001b170:	59                   	pop    ecx
c001b171:	58                   	pop    eax
c001b172:	68 e6 b2 02 c0       	push   0xc002b2e6
c001b177:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b17d:	e8 fa 7c ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001b182:	58                   	pop    eax
c001b183:	5a                   	pop    edx
c001b184:	53                   	push   ebx
c001b185:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b18b:	e8 ec 7c ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001b190:	59                   	pop    ecx
c001b191:	5b                   	pop    ebx
c001b192:	68 e6 8d 02 c0       	push   0xc0028de6
c001b197:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001b19d:	e8 da 7c ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	eb fe                	jmp    c001b1a5 <HalPanic(char const*)+0x112>

c001b1a7 <HalQueryPerformanceCounter()>:
c001b1a7:	31 c0                	xor    eax,eax
c001b1a9:	31 d2                	xor    edx,edx
c001b1ab:	f6 05 4e 34 03 c0 08 	test   BYTE PTR ds:0xc003344e,0x8
c001b1b2:	75 02                	jne    c001b1b6 <HalQueryPerformanceCounter()+0xf>
c001b1b4:	0f 31                	rdtsc  
c001b1b6:	c3                   	ret    

c001b1b7 <HalInitialise()>:
c001b1b7:	53                   	push   ebx
c001b1b8:	83 ec 08             	sub    esp,0x8
c001b1bb:	e8 c4 e8 ff ff       	call   c0019a84 <HalDetectFeatures()>
c001b1c0:	83 ec 0c             	sub    esp,0xc
c001b1c3:	68 6f 97 01 c0       	push   0xc001976f
c001b1c8:	e8 85 5c ff ff       	call   c0010e52 <KeRegisterRestartHandler(void (*)())>
c001b1cd:	c7 04 24 7a 97 01 c0 	mov    DWORD PTR [esp],0xc001977a
c001b1d4:	e8 6f 5c ff ff       	call   c0010e48 <KeRegisterShutdownHandler(void (*)())>
c001b1d9:	c7 04 24 7b 97 01 c0 	mov    DWORD PTR [esp],0xc001977b
c001b1e0:	e8 77 5c ff ff       	call   c0010e5c <KeRegisterSleepHandler(void (*)())>
c001b1e5:	e8 12 1a ff ff       	call   c000cbfc <scanMADT()>
c001b1ea:	83 c4 10             	add    esp,0x10
c001b1ed:	80 3d 40 2e 03 c0 00 	cmp    BYTE PTR ds:0xc0032e40,0x0
c001b1f4:	75 0d                	jne    c001b203 <HalInitialise()+0x4c>
c001b1f6:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001b1fb:	83 e0 fe             	and    eax,0xfffffffe
c001b1fe:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001b203:	e8 e0 08 00 00       	call   c001bae8 <picOpen()>
c001b208:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b20f:	74 0a                	je     c001b21b <HalInitialise()+0x64>
c001b211:	e8 22 08 00 00       	call   c001ba38 <picDisable()>
c001b216:	e8 5b e1 ff ff       	call   c0019376 <apicOpen()>
c001b21b:	bb 0f 00 00 00       	mov    ebx,0xf
c001b220:	50                   	push   eax
c001b221:	6a 00                	push   0x0
c001b223:	68 f8 f0 00 c0       	push   0xc000f0f8
c001b228:	6a 02                	push   0x2
c001b22a:	e8 dc 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b22f:	83 c4 0c             	add    esp,0xc
c001b232:	6a 00                	push   0x0
c001b234:	68 70 f0 00 c0       	push   0xc000f070
c001b239:	6a 06                	push   0x6
c001b23b:	e8 cb 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b240:	83 c4 0c             	add    esp,0xc
c001b243:	6a 00                	push   0x0
c001b245:	68 08 f1 00 c0       	push   0xc000f108
c001b24a:	6a 08                	push   0x8
c001b24c:	e8 ba 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b251:	83 c4 0c             	add    esp,0xc
c001b254:	6a 00                	push   0x0
c001b256:	68 c8 ef 00 c0       	push   0xc000efc8
c001b25b:	6a 0d                	push   0xd
c001b25d:	e8 a9 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b262:	83 c4 0c             	add    esp,0xc
c001b265:	6a 00                	push   0x0
c001b267:	68 1c f0 00 c0       	push   0xc000f01c
c001b26c:	6a 0e                	push   0xe
c001b26e:	e8 98 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b273:	83 c4 0c             	add    esp,0xc
c001b276:	6a 00                	push   0x0
c001b278:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b27d:	6a 00                	push   0x0
c001b27f:	e8 87 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b284:	83 c4 0c             	add    esp,0xc
c001b287:	6a 00                	push   0x0
c001b289:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b28e:	6a 01                	push   0x1
c001b290:	e8 76 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b295:	83 c4 0c             	add    esp,0xc
c001b298:	6a 00                	push   0x0
c001b29a:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b29f:	6a 03                	push   0x3
c001b2a1:	e8 65 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2a6:	83 c4 0c             	add    esp,0xc
c001b2a9:	6a 00                	push   0x0
c001b2ab:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b2b0:	6a 04                	push   0x4
c001b2b2:	e8 54 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2b7:	83 c4 0c             	add    esp,0xc
c001b2ba:	6a 00                	push   0x0
c001b2bc:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b2c1:	6a 05                	push   0x5
c001b2c3:	e8 43 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2c8:	83 c4 0c             	add    esp,0xc
c001b2cb:	6a 00                	push   0x0
c001b2cd:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b2d2:	6a 00                	push   0x0
c001b2d4:	e8 32 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2d9:	83 c4 0c             	add    esp,0xc
c001b2dc:	6a 00                	push   0x0
c001b2de:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b2e3:	6a 01                	push   0x1
c001b2e5:	e8 21 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2ea:	83 c4 0c             	add    esp,0xc
c001b2ed:	6a 00                	push   0x0
c001b2ef:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b2f4:	6a 09                	push   0x9
c001b2f6:	e8 10 05 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2fb:	83 c4 0c             	add    esp,0xc
c001b2fe:	6a 00                	push   0x0
c001b300:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b305:	6a 0a                	push   0xa
c001b307:	e8 ff 04 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b30c:	83 c4 0c             	add    esp,0xc
c001b30f:	6a 00                	push   0x0
c001b311:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b316:	6a 0b                	push   0xb
c001b318:	e8 ee 04 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b31d:	83 c4 10             	add    esp,0x10
c001b320:	50                   	push   eax
c001b321:	6a 00                	push   0x0
c001b323:	68 c4 f0 00 c0       	push   0xc000f0c4
c001b328:	53                   	push   ebx
c001b329:	43                   	inc    ebx
c001b32a:	e8 dc 04 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b32f:	83 c4 10             	add    esp,0x10
c001b332:	83 fb 1e             	cmp    ebx,0x1e
c001b335:	75 e9                	jne    c001b320 <HalInitialise()+0x169>
c001b337:	50                   	push   eax
c001b338:	6a 00                	push   0x0
c001b33a:	68 08 28 01 c0       	push   0xc0012808
c001b33f:	6a 60                	push   0x60
c001b341:	e8 c5 04 00 00       	call   c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b346:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001b34b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b355:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001b35c:	e8 5a 4d ff ff       	call   c00100bb <malloc>
c001b361:	89 04 24             	mov    DWORD PTR [esp],eax
c001b364:	89 c3                	mov    ebx,eax
c001b366:	e8 eb 0e 00 00       	call   c001c256 <RTC::RTC()>
c001b36b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001b375:	5a                   	pop    edx
c001b376:	59                   	pop    ecx
c001b377:	53                   	push   ebx
c001b378:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c001b37e:	e8 1d ef fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c001b383:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b385:	6a 00                	push   0x0
c001b387:	6a 00                	push   0x0
c001b389:	6a 00                	push   0x0
c001b38b:	53                   	push   ebx
c001b38c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b38f:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001b394:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001b39a:	83 c4 28             	add    esp,0x28
c001b39d:	5b                   	pop    ebx
c001b39e:	c3                   	ret    

c001b39f <HalMakeBeep(int)>:
c001b39f:	53                   	push   ebx
c001b3a0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b3a4:	85 db                	test   ebx,ebx
c001b3a6:	75 07                	jne    c001b3af <HalMakeBeep(int)+0x10>
c001b3a8:	e4 61                	in     al,0x61
c001b3aa:	83 e0 fc             	and    eax,0xfffffffc
c001b3ad:	eb 26                	jmp    c001b3d5 <HalMakeBeep(int)+0x36>
c001b3af:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b3b4:	99                   	cdq    
c001b3b5:	f7 fb                	idiv   ebx
c001b3b7:	89 c1                	mov    ecx,eax
c001b3b9:	b0 b6                	mov    al,0xb6
c001b3bb:	e6 43                	out    0x43,al
c001b3bd:	88 c8                	mov    al,cl
c001b3bf:	e6 42                	out    0x42,al
c001b3c1:	89 c8                	mov    eax,ecx
c001b3c3:	c1 e8 08             	shr    eax,0x8
c001b3c6:	e6 42                	out    0x42,al
c001b3c8:	e4 61                	in     al,0x61
c001b3ca:	89 c2                	mov    edx,eax
c001b3cc:	83 ca 03             	or     edx,0x3
c001b3cf:	38 d0                	cmp    al,dl
c001b3d1:	74 04                	je     c001b3d7 <HalMakeBeep(int)+0x38>
c001b3d3:	88 d0                	mov    al,dl
c001b3d5:	e6 61                	out    0x61,al
c001b3d7:	5b                   	pop    ebx
c001b3d8:	c3                   	ret    

c001b3d9 <HalGetRand()>:
c001b3d9:	31 c0                	xor    eax,eax
c001b3db:	c3                   	ret    

c001b3dc <HalEndOfInterrupt(int)>:
c001b3dc:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b3e3:	74 1d                	je     c001b402 <HalEndOfInterrupt(int)+0x26>
c001b3e5:	83 ec 18             	sub    esp,0x18
c001b3e8:	6a 1b                	push   0x1b
c001b3ea:	e8 bd f4 ff ff       	call   c001a8ac <x86rdmsr(unsigned int)>
c001b3ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b3f4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001b3fe:	83 c4 1c             	add    esp,0x1c
c001b401:	c3                   	ret    
c001b402:	e9 65 08 00 00       	jmp    c001bc6c <picEOI(int)>
c001b407:	90                   	nop

c001b408 <CPU::CPU()>:
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b40f:	83 ec 08             	sub    esp,0x8
c001b412:	68 6e b0 02 c0       	push   0xc002b06e
c001b417:	50                   	push   eax
c001b418:	e8 e5 ef fe ff       	call   c000a402 <Device::Device(char const*)>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c001b425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b429:	89 10                	mov    DWORD PTR [eax],edx
c001b42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b42f:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b43d:	05 64 01 00 00       	add    eax,0x164
c001b442:	83 ec 0c             	sub    esp,0xc
c001b445:	50                   	push   eax
c001b446:	e8 0f 3d ff ff       	call   c000f15a <GDT::GDT()>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b452:	05 68 09 00 00       	add    eax,0x968
c001b457:	83 ec 0c             	sub    esp,0xc
c001b45a:	50                   	push   eax
c001b45b:	e8 4c 3f ff ff       	call   c000f3ac <IDT::IDT()>
c001b460:	83 c4 10             	add    esp,0x10
c001b463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b467:	05 68 11 00 00       	add    eax,0x1168
c001b46c:	83 ec 0c             	sub    esp,0xc
c001b46f:	50                   	push   eax
c001b470:	e8 e3 7e ff ff       	call   c0013358 <TSS::TSS()>
c001b475:	83 c4 10             	add    esp,0x10
c001b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b47c:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001b486:	90                   	nop
c001b487:	83 c4 0c             	add    esp,0xc
c001b48a:	c3                   	ret    
c001b48b:	90                   	nop

c001b48c <CPU::setupSMEP()>:
c001b48c:	0f 20 e0             	mov    eax,cr4
c001b48f:	0d 00 00 10 00       	or     eax,0x100000
c001b494:	0f 22 e0             	mov    cr4,eax
c001b497:	c3                   	ret    

c001b498 <CPU::setupUMIP()>:
c001b498:	0f 20 e0             	mov    eax,cr4
c001b49b:	80 cc 08             	or     ah,0x8
c001b49e:	0f 22 e0             	mov    cr4,eax
c001b4a1:	c3                   	ret    

c001b4a2 <CPU::setupTSC()>:
c001b4a2:	0f 20 e0             	mov    eax,cr4
c001b4a5:	83 c8 04             	or     eax,0x4
c001b4a8:	0f 22 e0             	mov    cr4,eax
c001b4ab:	c3                   	ret    

c001b4ac <CPU::setupLargePages()>:
c001b4ac:	0f 20 e0             	mov    eax,cr4
c001b4af:	83 c8 10             	or     eax,0x10
c001b4b2:	0f 22 e0             	mov    cr4,eax
c001b4b5:	c3                   	ret    

c001b4b6 <CPU::setupPAT()>:
c001b4b6:	f6 05 4c 34 03 c0 08 	test   BYTE PTR ds:0xc003344c,0x8
c001b4bd:	74 28                	je     c001b4e7 <CPU::setupPAT()+0x31>
c001b4bf:	53                   	push   ebx
c001b4c0:	83 ec 14             	sub    esp,0x14
c001b4c3:	68 77 02 00 00       	push   0x277
c001b4c8:	e8 df f3 ff ff       	call   c001a8ac <x86rdmsr(unsigned int)>
c001b4cd:	83 c4 0c             	add    esp,0xc
c001b4d0:	83 e2 f8             	and    edx,0xfffffff8
c001b4d3:	83 ca 01             	or     edx,0x1
c001b4d6:	52                   	push   edx
c001b4d7:	50                   	push   eax
c001b4d8:	68 77 02 00 00       	push   0x277
c001b4dd:	e8 08 f4 ff ff       	call   c001a8ea <x86wrmsr(unsigned int, unsigned long long)>
c001b4e2:	83 c4 18             	add    esp,0x18
c001b4e5:	5b                   	pop    ebx
c001b4e6:	c3                   	ret    
c001b4e7:	c3                   	ret    

c001b4e8 <CPU::setupMTRR()>:
c001b4e8:	c3                   	ret    
c001b4e9:	90                   	nop

c001b4ea <CPU::setupGlobalPages()>:
c001b4ea:	0f 20 e0             	mov    eax,cr4
c001b4ed:	0c 80                	or     al,0x80
c001b4ef:	0f 22 e0             	mov    cr4,eax
c001b4f2:	c3                   	ret    
c001b4f3:	90                   	nop

c001b4f4 <CPU::allowUsermodeDataAccess()>:
c001b4f4:	f6 05 4f 34 03 c0 40 	test   BYTE PTR ds:0xc003344f,0x40
c001b4fb:	74 03                	je     c001b500 <CPU::allowUsermodeDataAccess()+0xc>
c001b4fd:	0f 01 cb             	stac   
c001b500:	c3                   	ret    
c001b501:	90                   	nop

c001b502 <CPU::prohibitUsermodeDataAccess()>:
c001b502:	f6 05 4f 34 03 c0 40 	test   BYTE PTR ds:0xc003344f,0x40
c001b509:	74 03                	je     c001b50e <CPU::prohibitUsermodeDataAccess()+0xc>
c001b50b:	0f 01 ca             	clac   
c001b50e:	c3                   	ret    
c001b50f:	90                   	nop

c001b510 <CPU::setupSMAP()>:
c001b510:	0f 20 e0             	mov    eax,cr4
c001b513:	0d 00 00 20 00       	or     eax,0x200000
c001b518:	0f 22 e0             	mov    cr4,eax
c001b51b:	eb e5                	jmp    c001b502 <CPU::prohibitUsermodeDataAccess()>
c001b51d:	90                   	nop

c001b51e <CPU::setupFeatures()>:
c001b51e:	53                   	push   ebx
c001b51f:	83 ec 08             	sub    esp,0x8
c001b522:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b526:	f6 05 4f 34 03 c0 20 	test   BYTE PTR ds:0xc003344f,0x20
c001b52d:	74 18                	je     c001b547 <CPU::setupFeatures()+0x29>
c001b52f:	83 ec 0c             	sub    esp,0xc
c001b532:	68 f1 b2 02 c0       	push   0xc002b2f1
c001b537:	e8 40 ba fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b53c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b53f:	e8 54 ff ff ff       	call   c001b498 <CPU::setupUMIP()>
c001b544:	83 c4 10             	add    esp,0x10
c001b547:	f6 05 4e 34 03 c0 08 	test   BYTE PTR ds:0xc003344e,0x8
c001b54e:	74 18                	je     c001b568 <CPU::setupFeatures()+0x4a>
c001b550:	83 ec 0c             	sub    esp,0xc
c001b553:	68 fb b2 02 c0       	push   0xc002b2fb
c001b558:	e8 1f ba fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b55d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b560:	e8 3d ff ff ff       	call   c001b4a2 <CPU::setupTSC()>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	f6 05 4e 34 03 c0 20 	test   BYTE PTR ds:0xc003344e,0x20
c001b56f:	74 18                	je     c001b589 <CPU::setupFeatures()+0x6b>
c001b571:	83 ec 0c             	sub    esp,0xc
c001b574:	68 04 b3 02 c0       	push   0xc002b304
c001b579:	e8 fe b9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b57e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b581:	e8 26 ff ff ff       	call   c001b4ac <CPU::setupLargePages()>
c001b586:	83 c4 10             	add    esp,0x10
c001b589:	f6 05 4e 34 03 c0 40 	test   BYTE PTR ds:0xc003344e,0x40
c001b590:	74 18                	je     c001b5aa <CPU::setupFeatures()+0x8c>
c001b592:	83 ec 0c             	sub    esp,0xc
c001b595:	68 0d b3 02 c0       	push   0xc002b30d
c001b59a:	e8 dd b9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b59f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5a2:	e8 43 ff ff ff       	call   c001b4ea <CPU::setupGlobalPages()>
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	f6 05 4e 34 03 c0 80 	test   BYTE PTR ds:0xc003344e,0x80
c001b5b1:	74 18                	je     c001b5cb <CPU::setupFeatures()+0xad>
c001b5b3:	83 ec 0c             	sub    esp,0xc
c001b5b6:	68 1f b3 02 c0       	push   0xc002b31f
c001b5bb:	e8 bc b9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b5c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5c3:	e8 ee fe ff ff       	call   c001b4b6 <CPU::setupPAT()>
c001b5c8:	83 c4 10             	add    esp,0x10
c001b5cb:	f6 05 50 34 03 c0 04 	test   BYTE PTR ds:0xc0033450,0x4
c001b5d2:	74 11                	je     c001b5e5 <CPU::setupFeatures()+0xc7>
c001b5d4:	c7 44 24 10 28 b3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b328
c001b5dc:	83 c4 08             	add    esp,0x8
c001b5df:	5b                   	pop    ebx
c001b5e0:	e9 97 b9 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001b5e5:	83 c4 08             	add    esp,0x8
c001b5e8:	5b                   	pop    ebx
c001b5e9:	c3                   	ret    

c001b5ea <CPU::open(int, int, void*)>:
c001b5ea:	55                   	push   ebp
c001b5eb:	57                   	push   edi
c001b5ec:	56                   	push   esi
c001b5ed:	53                   	push   ebx
c001b5ee:	83 ec 18             	sub    esp,0x18
c001b5f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b5f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b5f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b5fd:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b603:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b609:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b60f:	50                   	push   eax
c001b610:	e8 a7 3b ff ff       	call   c000f1bc <GDT::setup()>
c001b615:	83 c4 0c             	add    esp,0xc
c001b618:	6a 00                	push   0x0
c001b61a:	68 ef be ad de       	push   0xdeadbeef
c001b61f:	55                   	push   ebp
c001b620:	e8 77 7d ff ff       	call   c001339c <TSS::setup(unsigned long, unsigned long)>
c001b625:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b628:	e8 4f 7d ff ff       	call   c001337c <TSS::flush()>
c001b62d:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b633:	89 04 24             	mov    DWORD PTR [esp],eax
c001b636:	e8 e7 3d ff ff       	call   c000f422 <IDT::setup()>
c001b63b:	b8 00 04 00 00       	mov    eax,0x400
c001b640:	0f 23 f8             	mov    dr7,eax
c001b643:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b64d:	e8 b2 50 ff ff       	call   c0010704 <Phys::allocatePage()>
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b65b:	85 f6                	test   esi,esi
c001b65d:	89 38                	mov    DWORD PTR [eax],edi
c001b65f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b665:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b668:	74 10                	je     c001b67a <CPU::open(int, int, void*)+0x90>
c001b66a:	50                   	push   eax
c001b66b:	50                   	push   eax
c001b66c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b672:	56                   	push   esi
c001b673:	e8 d0 86 ff ff       	call   c0013d48 <VAS::setCPUSpecific(unsigned long)>
c001b678:	eb 0d                	jmp    c001b687 <CPU::open(int, int, void*)+0x9d>
c001b67a:	83 ec 0c             	sub    esp,0xc
c001b67d:	68 32 b3 02 c0       	push   0xc002b332
c001b682:	e8 89 4e ff ff       	call   c0010510 <KePanic(char const*)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	68 40 b3 02 c0       	push   0xc002b340
c001b692:	e8 86 24 ff ff       	call   c000db1d <KeSetBootMessage(char const*)>
c001b697:	e8 1b fb ff ff       	call   c001b1b7 <HalInitialise()>
c001b69c:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001b6a3:	e8 28 24 ff ff       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b6a8:	0f b6 c0             	movzx  eax,al
c001b6ab:	83 f8 01             	cmp    eax,0x1
c001b6ae:	19 c0                	sbb    eax,eax
c001b6b0:	25 aa 00 00 00       	and    eax,0xaa
c001b6b5:	83 c0 1e             	add    eax,0x1e
c001b6b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6bb:	e8 45 02 ff ff       	call   c000b905 <setupTimer(int)>
c001b6c0:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001b6c6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001b6cd:	e8 fe 23 ff ff       	call   c000dad0 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	84 c0                	test   al,al
c001b6d7:	74 0c                	je     c001b6e5 <CPU::open(int, int, void*)+0xfb>
c001b6d9:	83 ec 0c             	sub    esp,0xc
c001b6dc:	53                   	push   ebx
c001b6dd:	e8 3c fe ff ff       	call   c001b51e <CPU::setupFeatures()>
c001b6e2:	83 c4 10             	add    esp,0x10
c001b6e5:	83 c4 0c             	add    esp,0xc
c001b6e8:	31 c0                	xor    eax,eax
c001b6ea:	5b                   	pop    ebx
c001b6eb:	5e                   	pop    esi
c001b6ec:	5f                   	pop    edi
c001b6ed:	5d                   	pop    ebp
c001b6ee:	c3                   	ret    

c001b6ef <convertLegacyIRQNumber(int)>:
c001b6ef:	83 ec 0c             	sub    esp,0xc
c001b6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6f6:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b6fd:	74 0c                	je     c001b70b <convertLegacyIRQNumber(int)+0x1c>
c001b6ff:	83 f8 0f             	cmp    eax,0xf
c001b702:	7f 0b                	jg     c001b70f <convertLegacyIRQNumber(int)+0x20>
c001b704:	0f b6 80 08 ce 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd31f8]
c001b70b:	83 c4 0c             	add    esp,0xc
c001b70e:	c3                   	ret    
c001b70f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b713:	83 ec 0c             	sub    esp,0xc
c001b716:	68 a4 b3 02 c0       	push   0xc002b3a4
c001b71b:	e8 f0 4d ff ff       	call   c0010510 <KePanic(char const*)>
c001b720:	83 c4 10             	add    esp,0x10
c001b723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b727:	83 c4 0c             	add    esp,0xc
c001b72a:	c3                   	ret    

c001b72b <KeSetupInterrupts()>:
c001b72b:	31 c0                	xor    eax,eax
c001b72d:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b737:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b741:	c7 80 64 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbb9c],0x0
c001b74b:	c7 80 64 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccb9c],0x0
c001b755:	c7 80 68 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbb98],0x0
c001b75f:	c7 80 68 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccb98],0x0
c001b769:	c7 80 6c 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbb94],0x0
c001b773:	c7 80 6c 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccb94],0x0
c001b77d:	83 c0 10             	add    eax,0x10
c001b780:	3d 00 10 00 00       	cmp    eax,0x1000
c001b785:	75 a6                	jne    c001b72d <KeSetupInterrupts()+0x2>
c001b787:	c3                   	ret    

c001b788 <int_handler>:
c001b788:	55                   	push   ebp
c001b789:	57                   	push   edi
c001b78a:	56                   	push   esi
c001b78b:	53                   	push   ebx
c001b78c:	83 ec 0c             	sub    esp,0xc
c001b78f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b793:	eb 02                	jmp    c001b797 <int_handler+0xf>
c001b795:	fa                   	cli    
c001b796:	f4                   	hlt    
c001b797:	e8 6e 4d ff ff       	call   c001050a <KeIsKernelInPanic()>
c001b79c:	84 c0                	test   al,al
c001b79e:	75 f5                	jne    c001b795 <int_handler+0xd>
c001b7a0:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b7a3:	8d 46 e0             	lea    eax,[esi-0x20]
c001b7a6:	83 f8 17             	cmp    eax,0x17
c001b7a9:	76 40                	jbe    c001b7eb <int_handler+0x63>
c001b7ab:	c1 e6 04             	shl    esi,0x4
c001b7ae:	31 db                	xor    ebx,ebx
c001b7b0:	8d ae 60 44 03 c0    	lea    ebp,[esi-0x3ffcbba0]
c001b7b6:	81 c6 60 34 03 c0    	add    esi,0xc0033460
c001b7bc:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b7c0:	85 c0                	test   eax,eax
c001b7c2:	74 13                	je     c001b7d7 <int_handler+0x4f>
c001b7c4:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b7c7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b7cb:	74 2c                	je     c001b7f9 <int_handler+0x71>
c001b7cd:	83 ec 08             	sub    esp,0x8
c001b7d0:	52                   	push   edx
c001b7d1:	57                   	push   edi
c001b7d2:	ff d0                	call   eax
c001b7d4:	83 c4 10             	add    esp,0x10
c001b7d7:	83 c3 01             	add    ebx,0x1
c001b7da:	83 fb 04             	cmp    ebx,0x4
c001b7dd:	75 dd                	jne    c001b7bc <int_handler+0x34>
c001b7df:	83 c4 0c             	add    esp,0xc
c001b7e2:	31 c0                	xor    eax,eax
c001b7e4:	5b                   	pop    ebx
c001b7e5:	31 d2                	xor    edx,edx
c001b7e7:	5e                   	pop    esi
c001b7e8:	5f                   	pop    edi
c001b7e9:	5d                   	pop    ebp
c001b7ea:	c3                   	ret    
c001b7eb:	83 ec 0c             	sub    esp,0xc
c001b7ee:	50                   	push   eax
c001b7ef:	e8 e8 fb ff ff       	call   c001b3dc <HalEndOfInterrupt(int)>
c001b7f4:	83 c4 10             	add    esp,0x10
c001b7f7:	eb b2                	jmp    c001b7ab <int_handler+0x23>
c001b7f9:	83 ec 08             	sub    esp,0x8
c001b7fc:	52                   	push   edx
c001b7fd:	57                   	push   edi
c001b7fe:	ff d0                	call   eax
c001b800:	83 c4 10             	add    esp,0x10
c001b803:	83 c4 0c             	add    esp,0xc
c001b806:	5b                   	pop    ebx
c001b807:	5e                   	pop    esi
c001b808:	5f                   	pop    edi
c001b809:	5d                   	pop    ebp
c001b80a:	c3                   	ret    

c001b80b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001b80b:	56                   	push   esi
c001b80c:	31 c0                	xor    eax,eax
c001b80e:	53                   	push   ebx
c001b80f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b813:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b817:	89 ca                	mov    edx,ecx
c001b819:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b81d:	c1 e2 04             	shl    edx,0x4
c001b820:	83 bc 82 60 44 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffcbba0],0x0
c001b828:	74 17                	je     c001b841 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b82a:	83 c0 01             	add    eax,0x1
c001b82d:	83 f8 04             	cmp    eax,0x4
c001b830:	75 ee                	jne    c001b820 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b832:	c7 44 24 0c 05 b4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b405
c001b83a:	5b                   	pop    ebx
c001b83b:	5e                   	pop    esi
c001b83c:	e9 cf 4c ff ff       	jmp    c0010510 <KePanic(char const*)>
c001b841:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b844:	89 1c 85 60 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbba0],ebx
c001b84b:	89 34 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],esi
c001b852:	5b                   	pop    ebx
c001b853:	5e                   	pop    esi
c001b854:	c3                   	ret    

c001b855 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b855:	57                   	push   edi
c001b856:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b85d:	56                   	push   esi
c001b85e:	53                   	push   ebx
c001b85f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b867:	74 54                	je     c001b8bd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001b869:	89 c7                	mov    edi,eax
c001b86b:	84 c0                	test   al,al
c001b86d:	74 1d                	je     c001b88c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b86f:	83 fe 0f             	cmp    esi,0xf
c001b872:	0f 8f d5 00 00 00    	jg     c001b94d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001b878:	0f b6 b6 08 ce 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd31f8]
c001b87f:	0f b7 bc 36 20 2e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffcd1e0]
c001b887:	d1 ef                	shr    edi,1
c001b889:	83 e7 01             	and    edi,0x1
c001b88c:	83 ec 08             	sub    esp,0x8
c001b88f:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c001b894:	31 db                	xor    ebx,ebx
c001b896:	50                   	push   eax
c001b897:	68 12 b4 02 c0       	push   0xc002b412
c001b89c:	e8 db b6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b8a1:	83 c4 10             	add    esp,0x10
c001b8a4:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c001b8a9:	85 c0                	test   eax,eax
c001b8ab:	7f 55                	jg     c001b902 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b8ad:	83 ec 0c             	sub    esp,0xc
c001b8b0:	68 29 b4 02 c0       	push   0xc002b429
c001b8b5:	e8 56 4c ff ff       	call   c0010510 <KePanic(char const*)>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	8d 7e 20             	lea    edi,[esi+0x20]
c001b8c0:	89 f8                	mov    eax,edi
c001b8c2:	31 d2                	xor    edx,edx
c001b8c4:	c1 e0 04             	shl    eax,0x4
c001b8c7:	8b 8c 90 60 44 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffcbba0]
c001b8ce:	85 c9                	test   ecx,ecx
c001b8d0:	0f 84 8e 00 00 00    	je     c001b964 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001b8d6:	83 c2 01             	add    edx,0x1
c001b8d9:	83 fa 04             	cmp    edx,0x4
c001b8dc:	75 e9                	jne    c001b8c7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b8de:	83 ec 0c             	sub    esp,0xc
c001b8e1:	68 e0 b3 02 c0       	push   0xc002b3e0
c001b8e6:	e8 25 4c ff ff       	call   c0010510 <KePanic(char const*)>
c001b8eb:	83 c4 10             	add    esp,0x10
c001b8ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8f3:	5b                   	pop    ebx
c001b8f4:	5e                   	pop    esi
c001b8f5:	5f                   	pop    edi
c001b8f6:	c3                   	ret    
c001b8f7:	83 c3 01             	add    ebx,0x1
c001b8fa:	39 1d c0 33 03 c0    	cmp    DWORD PTR ds:0xc00333c0,ebx
c001b900:	7e ab                	jle    c001b8ad <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001b902:	83 ec 08             	sub    esp,0x8
c001b905:	8b 04 9d e0 33 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffccc20]
c001b90c:	56                   	push   esi
c001b90d:	50                   	push   eax
c001b90e:	e8 ef db ff ff       	call   c0019502 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b913:	83 c4 10             	add    esp,0x10
c001b916:	84 c0                	test   al,al
c001b918:	74 dd                	je     c001b8f7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001b91a:	83 ec 04             	sub    esp,0x4
c001b91d:	89 f8                	mov    eax,edi
c001b91f:	8b 1c 9d e0 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccc20]
c001b926:	0f b6 f8             	movzx  edi,al
c001b929:	57                   	push   edi
c001b92a:	8d 7e 20             	lea    edi,[esi+0x20]
c001b92d:	6a 00                	push   0x0
c001b92f:	89 f8                	mov    eax,edi
c001b931:	0f b6 c0             	movzx  eax,al
c001b934:	50                   	push   eax
c001b935:	89 f0                	mov    eax,esi
c001b937:	6a 00                	push   0x0
c001b939:	0f b6 c0             	movzx  eax,al
c001b93c:	6a 00                	push   0x0
c001b93e:	50                   	push   eax
c001b93f:	53                   	push   ebx
c001b940:	e8 29 dd ff ff       	call   c001966e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b945:	83 c4 20             	add    esp,0x20
c001b948:	e9 73 ff ff ff       	jmp    c001b8c0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001b94d:	83 ec 0c             	sub    esp,0xc
c001b950:	31 ff                	xor    edi,edi
c001b952:	68 a4 b3 02 c0       	push   0xc002b3a4
c001b957:	e8 b4 4b ff ff       	call   c0010510 <KePanic(char const*)>
c001b95c:	83 c4 10             	add    esp,0x10
c001b95f:	e9 28 ff ff ff       	jmp    c001b88c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b964:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b967:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b96b:	89 14 85 60 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbba0],edx
c001b972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b976:	5b                   	pop    ebx
c001b977:	89 14 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],edx
c001b97e:	89 f0                	mov    eax,esi
c001b980:	5e                   	pop    esi
c001b981:	5f                   	pop    edi
c001b982:	c3                   	ret    

c001b983 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b983:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b987:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b98b:	c1 e0 04             	shl    eax,0x4
c001b98e:	8d 50 10             	lea    edx,[eax+0x10]
c001b991:	39 88 60 44 03 c0    	cmp    DWORD PTR [eax-0x3ffcbba0],ecx
c001b997:	74 08                	je     c001b9a1 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b999:	83 c0 04             	add    eax,0x4
c001b99c:	39 d0                	cmp    eax,edx
c001b99e:	75 f1                	jne    c001b991 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b9a0:	c3                   	ret    
c001b9a1:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b9ab:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b9b5:	eb e2                	jmp    c001b999 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b9b7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b9b7:	53                   	push   ebx
c001b9b8:	83 ec 08             	sub    esp,0x8
c001b9bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9bf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9c4:	74 09                	je     c001b9cf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b9c6:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b9cd:	75 37                	jne    c001ba06 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001b9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d3:	83 c0 20             	add    eax,0x20
c001b9d6:	c1 e0 04             	shl    eax,0x4
c001b9d9:	8d 50 10             	lea    edx,[eax+0x10]
c001b9dc:	39 98 60 44 03 c0    	cmp    DWORD PTR [eax-0x3ffcbba0],ebx
c001b9e2:	74 0c                	je     c001b9f0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001b9e4:	83 c0 04             	add    eax,0x4
c001b9e7:	39 d0                	cmp    eax,edx
c001b9e9:	75 f1                	jne    c001b9dc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001b9eb:	83 c4 08             	add    esp,0x8
c001b9ee:	5b                   	pop    ebx
c001b9ef:	c3                   	ret    
c001b9f0:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b9fa:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001ba04:	eb de                	jmp    c001b9e4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001ba06:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001ba0b:	7f 11                	jg     c001ba1e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001ba0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba11:	0f b6 80 08 ce 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd31f8]
c001ba18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba1c:	eb b1                	jmp    c001b9cf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001ba1e:	83 ec 0c             	sub    esp,0xc
c001ba21:	68 36 b4 02 c0       	push   0xc002b436
c001ba26:	e8 e5 4a ff ff       	call   c0010510 <KePanic(char const*)>
c001ba2b:	83 c4 10             	add    esp,0x10
c001ba2e:	eb 9f                	jmp    c001b9cf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001ba30 <picIoWait()>:
c001ba30:	eb 00                	jmp    c001ba32 <picIoWait()+0x2>
c001ba32:	eb 00                	jmp    c001ba34 <picIoWait()+0x4>
c001ba34:	90                   	nop
c001ba35:	c3                   	ret    
c001ba36:	66 90                	xchg   ax,ax

c001ba38 <picDisable()>:
c001ba38:	83 ec 10             	sub    esp,0x10
c001ba3b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ba42:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ba47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba4b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba50:	ee                   	out    dx,al
c001ba51:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001ba58:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001ba5d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ba61:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001ba66:	ee                   	out    dx,al
c001ba67:	90                   	nop
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	c3                   	ret    

c001ba6c <picGetIRQReg(int)>:
c001ba6c:	83 ec 10             	sub    esp,0x10
c001ba6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba73:	0f b6 c0             	movzx  eax,al
c001ba76:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ba7d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001ba81:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba85:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba8a:	ee                   	out    dx,al
c001ba8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba8f:	0f b6 c0             	movzx  eax,al
c001ba92:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001ba99:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba9d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001baa1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001baa6:	ee                   	out    dx,al
c001baa7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001baae:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001bab3:	89 c2                	mov    edx,eax
c001bab5:	ec                   	in     al,dx
c001bab6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001baba:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001babe:	0f b6 c0             	movzx  eax,al
c001bac1:	c1 e0 08             	shl    eax,0x8
c001bac4:	89 c1                	mov    ecx,eax
c001bac6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001bacd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001bad2:	89 c2                	mov    edx,eax
c001bad4:	ec                   	in     al,dx
c001bad5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bad9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001badd:	0f b6 c0             	movzx  eax,al
c001bae0:	09 c8                	or     eax,ecx
c001bae2:	83 c4 10             	add    esp,0x10
c001bae5:	c3                   	ret    
c001bae6:	66 90                	xchg   ax,ax

c001bae8 <picOpen()>:
c001bae8:	83 ec 50             	sub    esp,0x50
c001baeb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001baf2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001baf7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bafb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001baff:	ee                   	out    dx,al
c001bb00:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001bb07:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bb0c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bb10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb14:	ee                   	out    dx,al
c001bb15:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001bb1d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001bb25:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001bb2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb30:	89 c2                	mov    edx,eax
c001bb32:	ec                   	in     al,dx
c001bb33:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001bb37:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bb3b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001bb3f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001bb46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb4a:	89 c2                	mov    edx,eax
c001bb4c:	ec                   	in     al,dx
c001bb4d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bb51:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bb55:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001bb59:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001bb60:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001bb65:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001bb69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bb6d:	ee                   	out    dx,al
c001bb6e:	e8 bd fe ff ff       	call   c001ba30 <picIoWait()>
c001bb73:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001bb7a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001bb7f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001bb83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb87:	ee                   	out    dx,al
c001bb88:	e8 a3 fe ff ff       	call   c001ba30 <picIoWait()>
c001bb8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bb91:	0f b6 c0             	movzx  eax,al
c001bb94:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001bb9b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001bb9f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001bba3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bba7:	ee                   	out    dx,al
c001bba8:	e8 83 fe ff ff       	call   c001ba30 <picIoWait()>
c001bbad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bbb1:	0f b6 c0             	movzx  eax,al
c001bbb4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001bbbb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bbbf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bbc3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bbc7:	ee                   	out    dx,al
c001bbc8:	e8 63 fe ff ff       	call   c001ba30 <picIoWait()>
c001bbcd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001bbd4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001bbd9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001bbdd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bbe1:	ee                   	out    dx,al
c001bbe2:	e8 49 fe ff ff       	call   c001ba30 <picIoWait()>
c001bbe7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001bbee:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001bbf3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001bbf7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bbfb:	ee                   	out    dx,al
c001bbfc:	e8 2f fe ff ff       	call   c001ba30 <picIoWait()>
c001bc01:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001bc08:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001bc0d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001bc11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bc15:	ee                   	out    dx,al
c001bc16:	e8 15 fe ff ff       	call   c001ba30 <picIoWait()>
c001bc1b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001bc22:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001bc27:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001bc2b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc2f:	ee                   	out    dx,al
c001bc30:	e8 fb fd ff ff       	call   c001ba30 <picIoWait()>
c001bc35:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001bc3a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001bc41:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001bc45:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001bc49:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bc4d:	ee                   	out    dx,al
c001bc4e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001bc53:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001bc5a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc5e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001bc62:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bc66:	ee                   	out    dx,al
c001bc67:	90                   	nop
c001bc68:	83 c4 50             	add    esp,0x50
c001bc6b:	c3                   	ret    

c001bc6c <picEOI(int)>:
c001bc6c:	83 ec 10             	sub    esp,0x10
c001bc6f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001bc74:	75 1e                	jne    c001bc94 <picEOI(int)+0x28>
c001bc76:	6a 0b                	push   0xb
c001bc78:	e8 ef fd ff ff       	call   c001ba6c <picGetIRQReg(int)>
c001bc7d:	83 c4 04             	add    esp,0x4
c001bc80:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001bc85:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001bc8a:	25 80 00 00 00       	and    eax,0x80
c001bc8f:	74 73                	je     c001bd04 <picEOI(int)+0x98>
c001bc91:	8d 76 00             	lea    esi,[esi+0x0]
c001bc94:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001bc99:	75 31                	jne    c001bccc <picEOI(int)+0x60>
c001bc9b:	6a 0b                	push   0xb
c001bc9d:	e8 ca fd ff ff       	call   c001ba6c <picGetIRQReg(int)>
c001bca2:	83 c4 04             	add    esp,0x4
c001bca5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001bcaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcae:	98                   	cwde   
c001bcaf:	85 c0                	test   eax,eax
c001bcb1:	78 19                	js     c001bccc <picEOI(int)+0x60>
c001bcb3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001bcba:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001bcbf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bcc3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bcc8:	ee                   	out    dx,al
c001bcc9:	eb 3d                	jmp    c001bd08 <picEOI(int)+0x9c>
c001bccb:	90                   	nop
c001bccc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001bcd1:	7e 19                	jle    c001bcec <picEOI(int)+0x80>
c001bcd3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001bcda:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001bcdf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bce3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bce8:	ee                   	out    dx,al
c001bce9:	8d 76 00             	lea    esi,[esi+0x0]
c001bcec:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001bcf3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001bcf8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bcfc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bd01:	ee                   	out    dx,al
c001bd02:	eb 04                	jmp    c001bd08 <picEOI(int)+0x9c>
c001bd04:	90                   	nop
c001bd05:	8d 76 00             	lea    esi,[esi+0x0]
c001bd08:	83 c4 10             	add    esp,0x10
c001bd0b:	c3                   	ret    

c001bd0c <RTC::open(int, int, void*)>:
c001bd0c:	31 c0                	xor    eax,eax
c001bd0e:	c3                   	ret    
c001bd0f:	90                   	nop

c001bd10 <RTC::close(int, int, void*)>:
c001bd10:	31 c0                	xor    eax,eax
c001bd12:	c3                   	ret    
c001bd13:	90                   	nop

c001bd14 <RTC::timeInSecondsUTC()>:
c001bd14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd18:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001bd1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bd24:	c3                   	ret    
c001bd25:	90                   	nop

c001bd26 <RTC::timeInDatetimeUTC()>:
c001bd26:	53                   	push   ebx
c001bd27:	83 ec 14             	sub    esp,0x14
c001bd2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bd2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd32:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd34:	50                   	push   eax
c001bd35:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001bd38:	83 c4 0c             	add    esp,0xc
c001bd3b:	52                   	push   edx
c001bd3c:	50                   	push   eax
c001bd3d:	53                   	push   ebx
c001bd3e:	e8 53 e1 fe ff       	call   c0009e96 <KeSecondsToDatetime(unsigned long long)>
c001bd43:	89 d8                	mov    eax,ebx
c001bd45:	83 c4 14             	add    esp,0x14
c001bd48:	5b                   	pop    ebx
c001bd49:	c2 04 00             	ret    0x4

c001bd4c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001bd4c:	56                   	push   esi
c001bd4d:	53                   	push   ebx
c001bd4e:	83 ec 14             	sub    esp,0x14
c001bd51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd57:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001bd5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd5e:	52                   	push   edx
c001bd5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd67:	50                   	push   eax
c001bd68:	e8 29 e1 fe ff       	call   c0009e96 <KeSecondsToDatetime(unsigned long long)>
c001bd6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bd75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bd79:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001bd7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bd81:	89 f0                	mov    eax,esi
c001bd83:	83 c4 20             	add    esp,0x20
c001bd86:	5b                   	pop    ebx
c001bd87:	5e                   	pop    esi
c001bd88:	ff e0                	jmp    eax

c001bd8a <RTC::~RTC()>:
c001bd8a:	83 ec 0c             	sub    esp,0xc
c001bd8d:	ba 60 b4 02 c0       	mov    edx,0xc002b460
c001bd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd96:	89 10                	mov    DWORD PTR [eax],edx
c001bd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	50                   	push   eax
c001bda0:	e8 93 db fe ff       	call   c0009938 <Clock::~Clock()>
c001bda5:	83 c4 10             	add    esp,0x10
c001bda8:	90                   	nop
c001bda9:	83 c4 0c             	add    esp,0xc
c001bdac:	c3                   	ret    
c001bdad:	90                   	nop

c001bdae <RTC::~RTC()>:
c001bdae:	83 ec 0c             	sub    esp,0xc
c001bdb1:	83 ec 0c             	sub    esp,0xc
c001bdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdb8:	e8 cd ff ff ff       	call   c001bd8a <RTC::~RTC()>
c001bdbd:	83 c4 10             	add    esp,0x10
c001bdc0:	83 ec 08             	sub    esp,0x8
c001bdc3:	68 60 01 00 00       	push   0x160
c001bdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdcc:	e8 f7 1d ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c001bdd1:	83 c4 10             	add    esp,0x10
c001bdd4:	83 c4 0c             	add    esp,0xc
c001bdd7:	c3                   	ret    

c001bdd8 <RTC::get_update_in_progress_flag()>:
c001bdd8:	83 ec 18             	sub    esp,0x18
c001bddb:	6a 0a                	push   0xa
c001bddd:	e8 9d d9 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001bde2:	83 c4 1c             	add    esp,0x1c
c001bde5:	0f b6 c0             	movzx  eax,al
c001bde8:	c1 e8 07             	shr    eax,0x7
c001bdeb:	c3                   	ret    

c001bdec <RTC::completeRTCRefresh()>:
c001bdec:	55                   	push   ebp
c001bded:	57                   	push   edi
c001bdee:	56                   	push   esi
c001bdef:	53                   	push   ebx
c001bdf0:	83 ec 3c             	sub    esp,0x3c
c001bdf3:	8b 1d 50 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b50
c001bdf9:	83 ec 0c             	sub    esp,0xc
c001bdfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001be00:	e8 d3 ff ff ff       	call   c001bdd8 <RTC::get_update_in_progress_flag()>
c001be05:	83 c4 10             	add    esp,0x10
c001be08:	84 c0                	test   al,al
c001be0a:	74 0e                	je     c001be1a <RTC::completeRTCRefresh()+0x2e>
c001be0c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001be12:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c001be18:	73 df                	jae    c001bdf9 <RTC::completeRTCRefresh()+0xd>
c001be1a:	83 ec 0c             	sub    esp,0xc
c001be1d:	6a 00                	push   0x0
c001be1f:	e8 5b d9 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001be24:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001be2b:	89 c5                	mov    ebp,eax
c001be2d:	e8 4d d9 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001be32:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001be39:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001be3d:	e8 3d d9 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001be42:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001be49:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001be4d:	e8 2d d9 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001be52:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001be59:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001be5d:	e8 1d d9 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001be62:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001be69:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001be6d:	e8 0d d9 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001be72:	0f b6 c0             	movzx  eax,al
c001be75:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001be79:	83 c4 10             	add    esp,0x10
c001be7c:	8b 1d 50 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b50
c001be82:	83 ec 0c             	sub    esp,0xc
c001be85:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001be89:	e8 4a ff ff ff       	call   c001bdd8 <RTC::get_update_in_progress_flag()>
c001be8e:	83 c4 10             	add    esp,0x10
c001be91:	84 c0                	test   al,al
c001be93:	74 0e                	je     c001bea3 <RTC::completeRTCRefresh()+0xb7>
c001be95:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001be9b:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c001bea1:	73 df                	jae    c001be82 <RTC::completeRTCRefresh()+0x96>
c001bea3:	83 ec 0c             	sub    esp,0xc
c001bea6:	6a 00                	push   0x0
c001bea8:	e8 d2 d8 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001bead:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001beb4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001beb8:	e8 c2 d8 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001bebd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001bec4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bec8:	e8 b2 d8 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001becd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001bed4:	88 c3                	mov    bl,al
c001bed6:	e8 a4 d8 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001bedb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001bee2:	89 c6                	mov    esi,eax
c001bee4:	e8 96 d8 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001bee9:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001bef0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bef4:	e8 86 d8 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001bef9:	89 e9                	mov    ecx,ebp
c001befb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001beff:	0f b6 f8             	movzx  edi,al
c001bf02:	83 c4 10             	add    esp,0x10
c001bf05:	0f b6 eb             	movzx  ebp,bl
c001bf08:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001bf0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf11:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bf16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf1a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001bf1e:	0f 94 c0             	sete   al
c001bf21:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001bf25:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001bf29:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001bf2e:	0f 94 c2             	sete   dl
c001bf31:	21 d0                	and    eax,edx
c001bf33:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001bf37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001bf3b:	0f 94 c2             	sete   dl
c001bf3e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001bf42:	21 c2                	and    edx,eax
c001bf44:	89 f0                	mov    eax,esi
c001bf46:	0f b6 c0             	movzx  eax,al
c001bf49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf4d:	89 f0                	mov    eax,esi
c001bf4f:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001bf53:	0f 94 c0             	sete   al
c001bf56:	21 d0                	and    eax,edx
c001bf58:	31 d2                	xor    edx,edx
c001bf5a:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001bf5e:	0f 94 c2             	sete   dl
c001bf61:	85 c2                	test   edx,eax
c001bf63:	75 27                	jne    c001bf8c <RTC::completeRTCRefresh()+0x1a0>
c001bf65:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bf69:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001bf6d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001bf71:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001bf75:	89 f0                	mov    eax,esi
c001bf77:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001bf7b:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001bf7f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf83:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bf87:	e9 f0 fe ff ff       	jmp    c001be7c <RTC::completeRTCRefresh()+0x90>
c001bf8c:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001bf90:	75 d3                	jne    c001bf65 <RTC::completeRTCRefresh()+0x179>
c001bf92:	83 ec 0c             	sub    esp,0xc
c001bf95:	6a 0b                	push   0xb
c001bf97:	e8 e3 d7 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	a8 04                	test   al,0x4
c001bfa1:	75 7a                	jne    c001c01d <RTC::completeRTCRefresh()+0x231>
c001bfa3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfa7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfab:	83 e1 0f             	and    ecx,0xf
c001bfae:	c1 ea 04             	shr    edx,0x4
c001bfb1:	83 e6 0f             	and    esi,0xf
c001bfb4:	6b d2 0a             	imul   edx,edx,0xa
c001bfb7:	c1 ef 04             	shr    edi,0x4
c001bfba:	01 d1                	add    ecx,edx
c001bfbc:	6b ff 0a             	imul   edi,edi,0xa
c001bfbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001bfc3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bfc7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bfcb:	c1 ea 04             	shr    edx,0x4
c001bfce:	83 e1 0f             	and    ecx,0xf
c001bfd1:	6b d2 0a             	imul   edx,edx,0xa
c001bfd4:	01 d1                	add    ecx,edx
c001bfd6:	89 ea                	mov    edx,ebp
c001bfd8:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001bfdc:	c1 ea 04             	shr    edx,0x4
c001bfdf:	89 d9                	mov    ecx,ebx
c001bfe1:	83 e2 07             	and    edx,0x7
c001bfe4:	83 e1 0f             	and    ecx,0xf
c001bfe7:	6b d2 0a             	imul   edx,edx,0xa
c001bfea:	83 e3 80             	and    ebx,0xffffff80
c001bfed:	01 d1                	add    ecx,edx
c001bfef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bff3:	09 cb                	or     ebx,ecx
c001bff5:	c1 ea 04             	shr    edx,0x4
c001bff8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bffc:	6b d2 0a             	imul   edx,edx,0xa
c001bfff:	83 e1 0f             	and    ecx,0xf
c001c002:	01 d6                	add    esi,edx
c001c004:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c008:	c1 ea 04             	shr    edx,0x4
c001c00b:	6b d2 0a             	imul   edx,edx,0xa
c001c00e:	01 d1                	add    ecx,edx
c001c010:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c014:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001c018:	83 e2 0f             	and    edx,0xf
c001c01b:	01 d7                	add    edi,edx
c001c01d:	a8 02                	test   al,0x2
c001c01f:	75 15                	jne    c001c036 <RTC::completeRTCRefresh()+0x24a>
c001c021:	f6 c3 80             	test   bl,0x80
c001c024:	74 10                	je     c001c036 <RTC::completeRTCRefresh()+0x24a>
c001c026:	83 e3 7f             	and    ebx,0x7f
c001c029:	b9 18 00 00 00       	mov    ecx,0x18
c001c02e:	8d 43 0c             	lea    eax,[ebx+0xc]
c001c031:	99                   	cdq    
c001c032:	f7 f9                	idiv   ecx
c001c034:	88 d3                	mov    bl,dl
c001c036:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001c03c:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001c042:	77 06                	ja     c001c04a <RTC::completeRTCRefresh()+0x25e>
c001c044:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001c04a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c04f:	31 c9                	xor    ecx,ecx
c001c051:	c1 e0 10             	shl    eax,0x10
c001c054:	89 cf                	mov    edi,ecx
c001c056:	c1 e5 10             	shl    ebp,0x10
c001c059:	31 d2                	xor    edx,edx
c001c05b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001c061:	09 c7                	or     edi,eax
c001c063:	89 f0                	mov    eax,esi
c001c065:	89 f9                	mov    ecx,edi
c001c067:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c06b:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001c06f:	88 c2                	mov    dl,al
c001c071:	88 d9                	mov    cl,bl
c001c073:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001c077:	0f b7 c2             	movzx  eax,dx
c001c07a:	09 e8                	or     eax,ebp
c001c07c:	89 c2                	mov    edx,eax
c001c07e:	50                   	push   eax
c001c07f:	50                   	push   eax
c001c080:	51                   	push   ecx
c001c081:	52                   	push   edx
c001c082:	e8 01 da fe ff       	call   c0009a88 <KeDatetimeToSeconds(datetime_t)>
c001c087:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001c08b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001c091:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001c097:	83 c4 4c             	add    esp,0x4c
c001c09a:	5b                   	pop    ebx
c001c09b:	5e                   	pop    esi
c001c09c:	5f                   	pop    edi
c001c09d:	5d                   	pop    ebp
c001c09e:	c3                   	ret    
c001c09f:	90                   	nop

c001c0a0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001c0a0:	55                   	push   ebp
c001c0a1:	57                   	push   edi
c001c0a2:	56                   	push   esi
c001c0a3:	53                   	push   ebx
c001c0a4:	83 ec 34             	sub    esp,0x34
c001c0a7:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c0ab:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c0af:	6a 00                	push   0x0
c001c0b1:	89 fb                	mov    ebx,edi
c001c0b3:	6a 00                	push   0x0
c001c0b5:	e8 19 d7 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c0ba:	5d                   	pop    ebp
c001c0bb:	58                   	pop    eax
c001c0bc:	6a 00                	push   0x0
c001c0be:	6a 02                	push   0x2
c001c0c0:	e8 0e d7 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c0c5:	31 d2                	xor    edx,edx
c001c0c7:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001c0ce:	89 f9                	mov    ecx,edi
c001c0d0:	89 f8                	mov    eax,edi
c001c0d2:	c1 e9 10             	shr    ecx,0x10
c001c0d5:	0f b6 c4             	movzx  eax,ah
c001c0d8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001c0dc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001c0e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0e4:	b9 64 00 00 00       	mov    ecx,0x64
c001c0e9:	89 f0                	mov    eax,esi
c001c0eb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c0ef:	89 f0                	mov    eax,esi
c001c0f1:	0f b6 c4             	movzx  eax,ah
c001c0f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0f8:	89 f0                	mov    eax,esi
c001c0fa:	c1 e8 10             	shr    eax,0x10
c001c0fd:	f7 f1                	div    ecx
c001c0ff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c103:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c107:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c10b:	e8 6f d6 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001c110:	83 c4 10             	add    esp,0x10
c001c113:	89 c5                	mov    ebp,eax
c001c115:	a8 04                	test   al,0x4
c001c117:	75 6e                	jne    c001c187 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001c119:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c11d:	31 d2                	xor    edx,edx
c001c11f:	0f b6 c1             	movzx  eax,cl
c001c122:	b9 0a 00 00 00       	mov    ecx,0xa
c001c127:	f7 f1                	div    ecx
c001c129:	c1 e0 04             	shl    eax,0x4
c001c12c:	09 d0                	or     eax,edx
c001c12e:	31 d2                	xor    edx,edx
c001c130:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c134:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c139:	f7 f1                	div    ecx
c001c13b:	c1 e0 04             	shl    eax,0x4
c001c13e:	09 d0                	or     eax,edx
c001c140:	31 d2                	xor    edx,edx
c001c142:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c146:	0f b6 c3             	movzx  eax,bl
c001c149:	f7 f1                	div    ecx
c001c14b:	c1 e0 04             	shl    eax,0x4
c001c14e:	09 d0                	or     eax,edx
c001c150:	31 d2                	xor    edx,edx
c001c152:	89 c3                	mov    ebx,eax
c001c154:	89 f0                	mov    eax,esi
c001c156:	0f b6 c0             	movzx  eax,al
c001c159:	f7 f1                	div    ecx
c001c15b:	c1 e0 04             	shl    eax,0x4
c001c15e:	09 d0                	or     eax,edx
c001c160:	31 d2                	xor    edx,edx
c001c162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c166:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c16b:	f7 f1                	div    ecx
c001c16d:	c1 e0 04             	shl    eax,0x4
c001c170:	09 d0                	or     eax,edx
c001c172:	31 d2                	xor    edx,edx
c001c174:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c178:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c17c:	f7 f1                	div    ecx
c001c17e:	c1 e0 04             	shl    eax,0x4
c001c181:	09 d0                	or     eax,edx
c001c183:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c187:	83 e5 02             	and    ebp,0x2
c001c18a:	75 1e                	jne    c001c1aa <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c18c:	0f b6 c3             	movzx  eax,bl
c001c18f:	83 f8 0b             	cmp    eax,0xb
c001c192:	76 10                	jbe    c001c1a4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001c194:	8d 53 f4             	lea    edx,[ebx-0xc]
c001c197:	88 d3                	mov    bl,dl
c001c199:	84 d2                	test   dl,dl
c001c19b:	75 02                	jne    c001c19f <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001c19d:	b3 0c                	mov    bl,0xc
c001c19f:	83 cb 80             	or     ebx,0xffffff80
c001c1a2:	eb 06                	jmp    c001c1aa <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c1a4:	85 c0                	test   eax,eax
c001c1a6:	75 02                	jne    c001c1aa <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c1a8:	b3 0c                	mov    bl,0xc
c001c1aa:	0f b6 db             	movzx  ebx,bl
c001c1ad:	50                   	push   eax
c001c1ae:	50                   	push   eax
c001c1af:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c1b4:	52                   	push   edx
c001c1b5:	6a 00                	push   0x0
c001c1b7:	e8 17 d6 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c1bc:	5a                   	pop    edx
c001c1bd:	59                   	pop    ecx
c001c1be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1c3:	50                   	push   eax
c001c1c4:	6a 02                	push   0x2
c001c1c6:	e8 08 d6 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c1cb:	5e                   	pop    esi
c001c1cc:	5f                   	pop    edi
c001c1cd:	53                   	push   ebx
c001c1ce:	6a 04                	push   0x4
c001c1d0:	e8 fe d5 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c1d5:	5d                   	pop    ebp
c001c1d6:	58                   	pop    eax
c001c1d7:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001c1dc:	52                   	push   edx
c001c1dd:	6a 07                	push   0x7
c001c1df:	e8 ef d5 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c1e4:	58                   	pop    eax
c001c1e5:	5a                   	pop    edx
c001c1e6:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c1eb:	50                   	push   eax
c001c1ec:	6a 08                	push   0x8
c001c1ee:	e8 e0 d5 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c1f3:	59                   	pop    ecx
c001c1f4:	5b                   	pop    ebx
c001c1f5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c1fa:	55                   	push   ebp
c001c1fb:	6a 09                	push   0x9
c001c1fd:	e8 d1 d5 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c202:	5e                   	pop    esi
c001c203:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c207:	e8 e0 fb ff ff       	call   c001bdec <RTC::completeRTCRefresh()>
c001c20c:	83 c4 3c             	add    esp,0x3c
c001c20f:	b0 01                	mov    al,0x1
c001c211:	5b                   	pop    ebx
c001c212:	5e                   	pop    esi
c001c213:	5f                   	pop    edi
c001c214:	5d                   	pop    ebp
c001c215:	c3                   	ret    

c001c216 <rtcIRQHandler(regs*, void*)>:
c001c216:	53                   	push   ebx
c001c217:	83 ec 14             	sub    esp,0x14
c001c21a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c21e:	6a 0c                	push   0xc
c001c220:	e8 5a d5 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001c225:	83 c4 10             	add    esp,0x10
c001c228:	a8 80                	test   al,0x80
c001c22a:	74 24                	je     c001c250 <rtcIRQHandler(regs*, void*)+0x3a>
c001c22c:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001c233:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001c23a:	66 ff 05 60 54 03 c0 	inc    WORD PTR ds:0xc0035460
c001c241:	75 0d                	jne    c001c250 <rtcIRQHandler(regs*, void*)+0x3a>
c001c243:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c247:	83 c4 08             	add    esp,0x8
c001c24a:	5b                   	pop    ebx
c001c24b:	e9 9c fb ff ff       	jmp    c001bdec <RTC::completeRTCRefresh()>
c001c250:	83 c4 08             	add    esp,0x8
c001c253:	5b                   	pop    ebx
c001c254:	c3                   	ret    
c001c255:	90                   	nop

c001c256 <RTC::RTC()>:
c001c256:	83 ec 1c             	sub    esp,0x1c
c001c259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c25d:	83 ec 08             	sub    esp,0x8
c001c260:	68 43 b4 02 c0       	push   0xc002b443
c001c265:	50                   	push   eax
c001c266:	e8 97 d6 fe ff       	call   c0009902 <Clock::Clock(char const*)>
c001c26b:	83 c4 10             	add    esp,0x10
c001c26e:	ba 60 b4 02 c0       	mov    edx,0xc002b460
c001c273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c277:	89 10                	mov    DWORD PTR [eax],edx
c001c279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c27d:	83 ec 0c             	sub    esp,0xc
c001c280:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c284:	6a 01                	push   0x1
c001c286:	68 16 c2 01 c0       	push   0xc001c216
c001c28b:	6a 08                	push   0x8
c001c28d:	50                   	push   eax
c001c28e:	e8 b9 df fe ff       	call   c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c293:	83 c4 20             	add    esp,0x20
c001c296:	89 c2                	mov    edx,eax
c001c298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c29c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c2a2:	fa                   	cli    
c001c2a3:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001c2a8:	83 c0 01             	add    eax,0x1
c001c2ab:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001c2b0:	83 ec 0c             	sub    esp,0xc
c001c2b3:	6a 0b                	push   0xb
c001c2b5:	e8 c5 d4 ff ff       	call   c001977f <x86ReadCMOS(unsigned char)>
c001c2ba:	83 c4 10             	add    esp,0x10
c001c2bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c2c1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c2c5:	83 c8 10             	or     eax,0x10
c001c2c8:	0f b6 c0             	movzx  eax,al
c001c2cb:	83 ec 08             	sub    esp,0x8
c001c2ce:	50                   	push   eax
c001c2cf:	6a 0b                	push   0xb
c001c2d1:	e8 fd d4 ff ff       	call   c00197d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001c2d6:	83 c4 10             	add    esp,0x10
c001c2d9:	83 ec 0c             	sub    esp,0xc
c001c2dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2e0:	e8 07 fb ff ff       	call   c001bdec <RTC::completeRTCRefresh()>
c001c2e5:	83 c4 10             	add    esp,0x10
c001c2e8:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001c2f0:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001c2f5:	85 c0                	test   eax,eax
c001c2f7:	75 01                	jne    c001c2fa <RTC::RTC()+0xa4>
c001c2f9:	fb                   	sti    
c001c2fa:	90                   	nop
c001c2fb:	83 c4 1c             	add    esp,0x1c
c001c2fe:	c3                   	ret    
c001c2ff:	90                   	nop

c001c300 <HalConsoleScroll(int, int)>:
c001c300:	83 ec 10             	sub    esp,0x10
c001c303:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001c30b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001c313:	90                   	nop
c001c314:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c319:	0f 8f e1 00 00 00    	jg     c001c400 <HalConsoleScroll(int, int)+0x100>
c001c31f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c327:	90                   	nop
c001c328:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001c330:	0f 8f be 00 00 00    	jg     c001c3f4 <HalConsoleScroll(int, int)+0xf4>
c001c336:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c33a:	89 d0                	mov    eax,edx
c001c33c:	c1 e0 02             	shl    eax,0x2
c001c33f:	01 d0                	add    eax,edx
c001c341:	c1 e0 05             	shl    eax,0x5
c001c344:	89 c2                	mov    edx,eax
c001c346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c34a:	01 d0                	add    eax,edx
c001c34c:	89 c2                	mov    edx,eax
c001c34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c352:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c355:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c359:	89 d0                	mov    eax,edx
c001c35b:	c1 e0 02             	shl    eax,0x2
c001c35e:	01 d0                	add    eax,edx
c001c360:	c1 e0 05             	shl    eax,0x5
c001c363:	89 c2                	mov    edx,eax
c001c365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c369:	01 d0                	add    eax,edx
c001c36b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001c371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c375:	01 c2                	add    edx,eax
c001c377:	8a 01                	mov    al,BYTE PTR [ecx]
c001c379:	88 02                	mov    BYTE PTR [edx],al
c001c37b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c380:	75 66                	jne    c001c3e8 <HalConsoleScroll(int, int)+0xe8>
c001c382:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c386:	83 e0 01             	and    eax,0x1
c001c389:	74 39                	je     c001c3c4 <HalConsoleScroll(int, int)+0xc4>
c001c38b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c38f:	83 e0 0f             	and    eax,0xf
c001c392:	88 c2                	mov    dl,al
c001c394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c398:	c1 e0 04             	shl    eax,0x4
c001c39b:	09 d0                	or     eax,edx
c001c39d:	88 c1                	mov    cl,al
c001c39f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c3a3:	89 d0                	mov    eax,edx
c001c3a5:	c1 e0 02             	shl    eax,0x2
c001c3a8:	01 d0                	add    eax,edx
c001c3aa:	c1 e0 05             	shl    eax,0x5
c001c3ad:	89 c2                	mov    edx,eax
c001c3af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3b3:	01 d0                	add    eax,edx
c001c3b5:	89 c2                	mov    edx,eax
c001c3b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3bb:	01 d0                	add    eax,edx
c001c3bd:	88 ca                	mov    dl,cl
c001c3bf:	88 10                	mov    BYTE PTR [eax],dl
c001c3c1:	eb 25                	jmp    c001c3e8 <HalConsoleScroll(int, int)+0xe8>
c001c3c3:	90                   	nop
c001c3c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c3c8:	89 d0                	mov    eax,edx
c001c3ca:	c1 e0 02             	shl    eax,0x2
c001c3cd:	01 d0                	add    eax,edx
c001c3cf:	c1 e0 05             	shl    eax,0x5
c001c3d2:	89 c2                	mov    edx,eax
c001c3d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3d8:	01 d0                	add    eax,edx
c001c3da:	89 c2                	mov    edx,eax
c001c3dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3e0:	01 d0                	add    eax,edx
c001c3e2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001c3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3e8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001c3ed:	e9 36 ff ff ff       	jmp    c001c328 <HalConsoleScroll(int, int)+0x28>
c001c3f2:	66 90                	xchg   ax,ax
c001c3f4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c3f9:	e9 16 ff ff ff       	jmp    c001c314 <HalConsoleScroll(int, int)+0x14>
c001c3fe:	66 90                	xchg   ax,ax
c001c400:	90                   	nop
c001c401:	83 c4 10             	add    esp,0x10
c001c404:	c3                   	ret    
c001c405:	8d 76 00             	lea    esi,[esi+0x0]

c001c408 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001c408:	83 ec 14             	sub    esp,0x14
c001c40b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c40f:	88 04 24             	mov    BYTE PTR [esp],al
c001c412:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c415:	0f b6 c0             	movzx  eax,al
c001c418:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c41c:	89 d1                	mov    ecx,edx
c001c41e:	83 e1 0f             	and    ecx,0xf
c001c421:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c425:	c1 e2 04             	shl    edx,0x4
c001c428:	0f b6 d2             	movzx  edx,dl
c001c42b:	09 ca                	or     edx,ecx
c001c42d:	c1 e2 08             	shl    edx,0x8
c001c430:	09 d0                	or     eax,edx
c001c432:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c437:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001c43f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c443:	89 d0                	mov    eax,edx
c001c445:	c1 e0 02             	shl    eax,0x2
c001c448:	01 d0                	add    eax,edx
c001c44a:	c1 e0 04             	shl    eax,0x4
c001c44d:	89 c2                	mov    edx,eax
c001c44f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c453:	01 d0                	add    eax,edx
c001c455:	01 c0                	add    eax,eax
c001c457:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001c45b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c45f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001c464:	66 89 02             	mov    WORD PTR [edx],ax
c001c467:	90                   	nop
c001c468:	83 c4 14             	add    esp,0x14
c001c46b:	c3                   	ret    

c001c46c <HalConsoleCursorUpdate(int, int)>:
c001c46c:	83 ec 20             	sub    esp,0x20
c001c46f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c473:	89 c2                	mov    edx,eax
c001c475:	c1 e2 02             	shl    edx,0x2
c001c478:	01 d0                	add    eax,edx
c001c47a:	c1 e0 04             	shl    eax,0x4
c001c47d:	89 c2                	mov    edx,eax
c001c47f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c483:	01 d0                	add    eax,edx
c001c485:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001c48a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001c491:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001c496:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c49a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c49e:	ee                   	out    dx,al
c001c49f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c4a4:	0f b6 c0             	movzx  eax,al
c001c4a7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001c4ae:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c4b2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c4b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4ba:	ee                   	out    dx,al
c001c4bb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001c4c2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001c4c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001c4cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4cf:	ee                   	out    dx,al
c001c4d0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001c4d5:	c1 e8 08             	shr    eax,0x8
c001c4d8:	0f b6 c0             	movzx  eax,al
c001c4db:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001c4e2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c4e6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001c4ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4ee:	ee                   	out    dx,al
c001c4ef:	90                   	nop
c001c4f0:	83 c4 20             	add    esp,0x20
c001c4f3:	c3                   	ret    

c001c4f4 <ACPIDriver::initialise()>:
c001c4f4:	90                   	nop
c001c4f5:	c3                   	ret    
c001c4f6:	66 90                	xchg   ax,ax

c001c4f8 <ACPIDriver::detect()>:
c001c4f8:	90                   	nop
c001c4f9:	c3                   	ret    
c001c4fa:	66 90                	xchg   ax,ax

c001c4fc <ACPIDriver::deinitialise()>:
c001c4fc:	90                   	nop
c001c4fd:	c3                   	ret    
c001c4fe:	66 90                	xchg   ax,ax

c001c500 <ACPIDriver::setPowerState(DevicePowerState)>:
c001c500:	90                   	nop
c001c501:	c3                   	ret    
c001c502:	66 90                	xchg   ax,ax

c001c504 <ACPIDriver::getHumanReadableName()>:
c001c504:	b8 2e 98 02 c0       	mov    eax,0xc002982e
c001c509:	c3                   	ret    
c001c50a:	66 90                	xchg   ax,ax

c001c50c <ISADriver::initialise()>:
c001c50c:	90                   	nop
c001c50d:	c3                   	ret    
c001c50e:	66 90                	xchg   ax,ax

c001c510 <ISADriver::detect()>:
c001c510:	90                   	nop
c001c511:	c3                   	ret    
c001c512:	66 90                	xchg   ax,ax

c001c514 <ISADriver::deinitialise()>:
c001c514:	90                   	nop
c001c515:	c3                   	ret    
c001c516:	66 90                	xchg   ax,ax

c001c518 <ISADriver::setPowerState(DevicePowerState)>:
c001c518:	90                   	nop
c001c519:	c3                   	ret    
c001c51a:	66 90                	xchg   ax,ax

c001c51c <ISADriver::getHumanReadableName()>:
c001c51c:	b8 b0 b4 02 c0       	mov    eax,0xc002b4b0
c001c521:	c3                   	ret    
c001c522:	66 90                	xchg   ax,ax

c001c524 <PCIDriver::detect()>:
c001c524:	90                   	nop
c001c525:	c3                   	ret    
c001c526:	66 90                	xchg   ax,ax

c001c528 <PCIDriver::deinitialise()>:
c001c528:	90                   	nop
c001c529:	c3                   	ret    
c001c52a:	66 90                	xchg   ax,ax

c001c52c <PCIDriver::setPowerState(DevicePowerState)>:
c001c52c:	90                   	nop
c001c52d:	c3                   	ret    
c001c52e:	66 90                	xchg   ax,ax

c001c530 <PCIDriver::getHumanReadableName()>:
c001c530:	b8 d0 b4 02 c0       	mov    eax,0xc002b4d0
c001c535:	c3                   	ret    
c001c536:	66 90                	xchg   ax,ax

c001c538 <PCIDriver::enumerateDevices()>:
c001c538:	90                   	nop
c001c539:	c3                   	ret    
c001c53a:	66 90                	xchg   ax,ax

c001c53c <PCIDriver::initialise()>:
c001c53c:	83 ec 0c             	sub    esp,0xc
c001c53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c543:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c546:	6a 04                	push   0x4
c001c548:	6a 08                	push   0x8
c001c54a:	68 f8 0c 00 00       	push   0xcf8
c001c54f:	50                   	push   eax
c001c550:	e8 89 b4 fe ff       	call   c00079de <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	83 ec 0c             	sub    esp,0xc
c001c55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c55f:	e8 d4 ff ff ff       	call   c001c538 <PCIDriver::enumerateDevices()>
c001c564:	83 c4 10             	add    esp,0x10
c001c567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c56d:	83 c0 08             	add    eax,0x8
c001c570:	8b 00                	mov    eax,DWORD PTR [eax]
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c579:	ff d0                	call   eax
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	90                   	nop
c001c57f:	83 c4 0c             	add    esp,0xc
c001c582:	c3                   	ret    
c001c583:	90                   	nop

c001c584 <PCIDriver::readBAR8(unsigned int, int)>:
c001c584:	83 ec 10             	sub    esp,0x10
c001c587:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c58b:	83 e0 01             	and    eax,0x1
c001c58e:	74 2c                	je     c001c5bc <PCIDriver::readBAR8(unsigned int, int)+0x38>
c001c590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c594:	83 e0 fc             	and    eax,0xfffffffc
c001c597:	89 c2                	mov    edx,eax
c001c599:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c59d:	01 d0                	add    eax,edx
c001c59f:	0f b7 c0             	movzx  eax,ax
c001c5a2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c5a7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001c5ac:	89 c2                	mov    edx,eax
c001c5ae:	ec                   	in     al,dx
c001c5af:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c5b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c5b7:	eb 1f                	jmp    c001c5d8 <PCIDriver::readBAR8(unsigned int, int)+0x54>
c001c5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5c0:	83 e0 f0             	and    eax,0xfffffff0
c001c5c3:	89 c2                	mov    edx,eax
c001c5c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5c9:	01 d0                	add    eax,edx
c001c5cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5d3:	8a 00                	mov    al,BYTE PTR [eax]
c001c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d8:	83 c4 10             	add    esp,0x10
c001c5db:	c3                   	ret    

c001c5dc <PCIDriver::readBAR16(unsigned int, int)>:
c001c5dc:	83 ec 10             	sub    esp,0x10
c001c5df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5e3:	83 e0 01             	and    eax,0x1
c001c5e6:	74 2c                	je     c001c614 <PCIDriver::readBAR16(unsigned int, int)+0x38>
c001c5e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5ec:	83 e0 fc             	and    eax,0xfffffffc
c001c5ef:	89 c2                	mov    edx,eax
c001c5f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5f5:	01 d0                	add    eax,edx
c001c5f7:	0f b7 c0             	movzx  eax,ax
c001c5fa:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c5ff:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001c604:	89 c2                	mov    edx,eax
c001c606:	66 ed                	in     ax,dx
c001c608:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001c60d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c611:	eb 1d                	jmp    c001c630 <PCIDriver::readBAR16(unsigned int, int)+0x54>
c001c613:	90                   	nop
c001c614:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c618:	83 e0 f0             	and    eax,0xfffffff0
c001c61b:	89 c2                	mov    edx,eax
c001c61d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c621:	01 d0                	add    eax,edx
c001c623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c62b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001c62e:	66 90                	xchg   ax,ax
c001c630:	83 c4 10             	add    esp,0x10
c001c633:	c3                   	ret    

c001c634 <PCIDriver::readBAR32(unsigned int, int)>:
c001c634:	83 ec 10             	sub    esp,0x10
c001c637:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c63b:	83 e0 01             	and    eax,0x1
c001c63e:	74 2c                	je     c001c66c <PCIDriver::readBAR32(unsigned int, int)+0x38>
c001c640:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c644:	83 e0 fc             	and    eax,0xfffffffc
c001c647:	89 c2                	mov    edx,eax
c001c649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c64d:	01 d0                	add    eax,edx
c001c64f:	0f b7 c0             	movzx  eax,ax
c001c652:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c657:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001c65c:	89 c2                	mov    edx,eax
c001c65e:	ed                   	in     eax,dx
c001c65f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c667:	eb 1f                	jmp    c001c688 <PCIDriver::readBAR32(unsigned int, int)+0x54>
c001c669:	8d 76 00             	lea    esi,[esi+0x0]
c001c66c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c670:	83 e0 f0             	and    eax,0xfffffff0
c001c673:	89 c2                	mov    edx,eax
c001c675:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c679:	01 d0                	add    eax,edx
c001c67b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c67f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c683:	8b 00                	mov    eax,DWORD PTR [eax]
c001c685:	8d 76 00             	lea    esi,[esi+0x0]
c001c688:	83 c4 10             	add    esp,0x10
c001c68b:	c3                   	ret    

c001c68c <PCIDriver::writeBAR8(unsigned int, unsigned char, int)>:
c001c68c:	83 ec 14             	sub    esp,0x14
c001c68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c693:	88 04 24             	mov    BYTE PTR [esp],al
c001c696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c69a:	83 e0 01             	and    eax,0x1
c001c69d:	74 2d                	je     c001c6cc <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x40>
c001c69f:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001c6a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6a7:	83 e0 fc             	and    eax,0xfffffffc
c001c6aa:	89 c1                	mov    ecx,eax
c001c6ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6b0:	01 c8                	add    eax,ecx
c001c6b2:	0f b7 c0             	movzx  eax,ax
c001c6b5:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c6ba:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001c6be:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001c6c2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001c6c7:	ee                   	out    dx,al
c001c6c8:	eb 1e                	jmp    c001c6e8 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x5c>
c001c6ca:	66 90                	xchg   ax,ax
c001c6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6d0:	83 e0 f0             	and    eax,0xfffffff0
c001c6d3:	89 c2                	mov    edx,eax
c001c6d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6d9:	01 d0                	add    eax,edx
c001c6db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001c6e6:	88 10                	mov    BYTE PTR [eax],dl
c001c6e8:	90                   	nop
c001c6e9:	83 c4 14             	add    esp,0x14
c001c6ec:	c3                   	ret    
c001c6ed:	90                   	nop
c001c6ee:	66 90                	xchg   ax,ax

c001c6f0 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)>:
c001c6f0:	83 ec 14             	sub    esp,0x14
c001c6f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6f7:	66 89 04 24          	mov    WORD PTR [esp],ax
c001c6fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6ff:	83 e0 01             	and    eax,0x1
c001c702:	74 30                	je     c001c734 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x44>
c001c704:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001c708:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c70c:	83 e2 fc             	and    edx,0xfffffffc
c001c70f:	89 d1                	mov    ecx,edx
c001c711:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c715:	01 ca                	add    edx,ecx
c001c717:	0f b7 d2             	movzx  edx,dx
c001c71a:	66 89 54 24 0e       	mov    WORD PTR [esp+0xe],dx
c001c71f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001c724:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c728:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001c72d:	66 ef                	out    dx,ax
c001c72f:	eb 23                	jmp    c001c754 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x64>
c001c731:	8d 76 00             	lea    esi,[esi+0x0]
c001c734:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c738:	83 e0 f0             	and    eax,0xfffffff0
c001c73b:	89 c2                	mov    edx,eax
c001c73d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c741:	01 d0                	add    eax,edx
c001c743:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c747:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c74b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c74e:	66 89 02             	mov    WORD PTR [edx],ax
c001c751:	8d 76 00             	lea    esi,[esi+0x0]
c001c754:	90                   	nop
c001c755:	83 c4 14             	add    esp,0x14
c001c758:	c3                   	ret    
c001c759:	90                   	nop
c001c75a:	66 90                	xchg   ax,ax

c001c75c <PCIDriver::writeBAR32(unsigned int, unsigned int, int)>:
c001c75c:	83 ec 10             	sub    esp,0x10
c001c75f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c763:	83 e0 01             	and    eax,0x1
c001c766:	74 2c                	je     c001c794 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x38>
c001c768:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c76c:	83 e0 fc             	and    eax,0xfffffffc
c001c76f:	89 c2                	mov    edx,eax
c001c771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c775:	01 d0                	add    eax,edx
c001c777:	0f b7 c0             	movzx  eax,ax
c001c77a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c783:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c790:	ef                   	out    dx,eax
c001c791:	eb 21                	jmp    c001c7b4 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x58>
c001c793:	90                   	nop
c001c794:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c798:	83 e0 f0             	and    eax,0xfffffff0
c001c79b:	89 c2                	mov    edx,eax
c001c79d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7a1:	01 d0                	add    eax,edx
c001c7a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7af:	89 10                	mov    DWORD PTR [eax],edx
c001c7b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7b4:	90                   	nop
c001c7b5:	83 c4 10             	add    esp,0x10
c001c7b8:	c3                   	ret    
c001c7b9:	90                   	nop
c001c7ba:	66 90                	xchg   ax,ax

c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c7bc:	53                   	push   ebx
c001c7bd:	83 ec 30             	sub    esp,0x30
c001c7c0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c7c4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c7c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c7cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c7d0:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001c7d4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c7d8:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001c7dc:	88 04 24             	mov    BYTE PTR [esp],al
c001c7df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c7e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c7e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c7ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c7f1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c7f6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c7fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c7fe:	c1 e0 10             	shl    eax,0x10
c001c801:	89 c2                	mov    edx,eax
c001c803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c807:	c1 e0 0b             	shl    eax,0xb
c001c80a:	09 c2                	or     edx,eax
c001c80c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c810:	c1 e0 08             	shl    eax,0x8
c001c813:	09 c2                	or     edx,eax
c001c815:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c819:	25 fc 00 00 00       	and    eax,0xfc
c001c81e:	09 d0                	or     eax,edx
c001c820:	0d 00 00 00 80       	or     eax,0x80000000
c001c825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c829:	66 c7 44 24 16 f8 0c 	mov    WORD PTR [esp+0x16],0xcf8
c001c830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c834:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001c841:	ef                   	out    dx,eax
c001c842:	66 c7 44 24 1e fc 0c 	mov    WORD PTR [esp+0x1e],0xcfc
c001c849:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c84e:	89 c2                	mov    edx,eax
c001c850:	ed                   	in     eax,dx
c001c851:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c855:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c859:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c85d:	83 e0 02             	and    eax,0x2
c001c860:	c1 e0 03             	shl    eax,0x3
c001c863:	88 c1                	mov    cl,al
c001c865:	d3 ea                	shr    edx,cl
c001c867:	89 d0                	mov    eax,edx
c001c869:	83 c4 30             	add    esp,0x30
c001c86c:	5b                   	pop    ebx
c001c86d:	c3                   	ret    
c001c86e:	66 90                	xchg   ax,ax

c001c870 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c870:	57                   	push   edi
c001c871:	56                   	push   esi
c001c872:	53                   	push   ebx
c001c873:	83 ec 54             	sub    esp,0x54
c001c876:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
c001c87a:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
c001c87e:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001c882:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c001c886:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c001c88a:	89 f0                	mov    eax,esi
c001c88c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001c890:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001c894:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c898:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001c89c:	89 f8                	mov    eax,edi
c001c89e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001c8a2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c8a7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c8ab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8b0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c8b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c8bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c8c1:	c1 e0 10             	shl    eax,0x10
c001c8c4:	89 c2                	mov    edx,eax
c001c8c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c8ca:	c1 e0 0b             	shl    eax,0xb
c001c8cd:	09 c2                	or     edx,eax
c001c8cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c8d3:	c1 e0 08             	shl    eax,0x8
c001c8d6:	09 c2                	or     edx,eax
c001c8d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c8dd:	25 fc 00 00 00       	and    eax,0xfc
c001c8e2:	09 d0                	or     eax,edx
c001c8e4:	0d 00 00 00 80       	or     eax,0x80000000
c001c8e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001c8ed:	66 c7 44 24 36 f8 0c 	mov    WORD PTR [esp+0x36],0xcf8
c001c8f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c8f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c8fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c900:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001c905:	ef                   	out    dx,eax
c001c906:	66 c7 44 24 3e fc 0c 	mov    WORD PTR [esp+0x3e],0xcfc
c001c90d:	66 8b 44 24 3e       	mov    ax,WORD PTR [esp+0x3e]
c001c912:	89 c2                	mov    edx,eax
c001c914:	ed                   	in     eax,dx
c001c915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c919:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c91d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001c921:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c926:	83 e0 02             	and    eax,0x2
c001c929:	74 15                	je     c001c940 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd0>
c001c92b:	81 64 24 50 ff ff 00 00 	and    DWORD PTR [esp+0x50],0xffff
c001c933:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001c937:	c1 e0 10             	shl    eax,0x10
c001c93a:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001c93e:	eb 10                	jmp    c001c950 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe0>
c001c940:	81 64 24 50 00 00 ff ff 	and    DWORD PTR [esp+0x50],0xffff0000
c001c948:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001c94c:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001c950:	66 c7 44 24 26 f8 0c 	mov    WORD PTR [esp+0x26],0xcf8
c001c957:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c95b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c963:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c001c968:	ef                   	out    dx,eax
c001c969:	66 c7 44 24 2e fc 0c 	mov    WORD PTR [esp+0x2e],0xcfc
c001c970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c974:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c978:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c97c:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001c981:	ef                   	out    dx,eax
c001c982:	90                   	nop
c001c983:	83 c4 54             	add    esp,0x54
c001c986:	5b                   	pop    ebx
c001c987:	5e                   	pop    esi
c001c988:	5f                   	pop    edi
c001c989:	c3                   	ret    
c001c98a:	66 90                	xchg   ax,ax

c001c98c <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c98c:	83 ec 0c             	sub    esp,0xc
c001c98f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c993:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c997:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c99b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c99f:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001c9a3:	88 04 24             	mov    BYTE PTR [esp],al
c001c9a6:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c9aa:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c9af:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9b4:	6a 00                	push   0x0
c001c9b6:	51                   	push   ecx
c001c9b7:	52                   	push   edx
c001c9b8:	50                   	push   eax
c001c9b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9bd:	e8 fa fd ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c9c2:	83 c4 14             	add    esp,0x14
c001c9c5:	83 c4 0c             	add    esp,0xc
c001c9c8:	c3                   	ret    
c001c9c9:	90                   	nop
c001c9ca:	66 90                	xchg   ax,ax

c001c9cc <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c9d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9db:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c9df:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001c9e3:	88 04 24             	mov    BYTE PTR [esp],al
c001c9e6:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c9ea:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c9ef:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9f4:	6a 0e                	push   0xe
c001c9f6:	51                   	push   ecx
c001c9f7:	52                   	push   edx
c001c9f8:	50                   	push   eax
c001c9f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9fd:	e8 ba fd ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca02:	83 c4 14             	add    esp,0x14
c001ca05:	0f b6 c0             	movzx  eax,al
c001ca08:	83 c4 0c             	add    esp,0xc
c001ca0b:	c3                   	ret    

c001ca0c <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ca0c:	83 ec 1c             	sub    esp,0x1c
c001ca0f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ca13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ca1b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001ca1f:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001ca23:	88 04 24             	mov    BYTE PTR [esp],al
c001ca26:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001ca2a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001ca2f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca34:	6a 0a                	push   0xa
c001ca36:	51                   	push   ecx
c001ca37:	52                   	push   edx
c001ca38:	50                   	push   eax
c001ca39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ca3d:	e8 7a fd ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca42:	83 c4 14             	add    esp,0x14
c001ca45:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ca49:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001ca4d:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001ca52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca57:	6a 0a                	push   0xa
c001ca59:	51                   	push   ecx
c001ca5a:	52                   	push   edx
c001ca5b:	50                   	push   eax
c001ca5c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ca60:	e8 57 fd ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca65:	83 c4 14             	add    esp,0x14
c001ca68:	0f b7 c0             	movzx  eax,ax
c001ca6b:	c1 f8 08             	sar    eax,0x8
c001ca6e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ca72:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca77:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c001ca7c:	c1 e2 08             	shl    edx,0x8
c001ca7f:	09 d0                	or     eax,edx
c001ca81:	83 c4 1c             	add    esp,0x1c
c001ca84:	c3                   	ret    
c001ca85:	90                   	nop
c001ca86:	66 90                	xchg   ax,ax

c001ca88 <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ca88:	83 ec 0c             	sub    esp,0xc
c001ca8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca97:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001ca9b:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001ca9f:	88 04 24             	mov    BYTE PTR [esp],al
c001caa2:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001caa6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001caab:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cab0:	6a 08                	push   0x8
c001cab2:	51                   	push   ecx
c001cab3:	52                   	push   edx
c001cab4:	50                   	push   eax
c001cab5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cab9:	e8 fe fc ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cabe:	83 c4 14             	add    esp,0x14
c001cac1:	0f b7 c0             	movzx  eax,ax
c001cac4:	c1 f8 08             	sar    eax,0x8
c001cac7:	83 c4 0c             	add    esp,0xc
c001caca:	c3                   	ret    
c001cacb:	90                   	nop

c001cacc <PCIDriver::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cacc:	83 ec 0c             	sub    esp,0xc
c001cacf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cad3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cad7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cadb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001cadf:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001cae3:	88 04 24             	mov    BYTE PTR [esp],al
c001cae6:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001caea:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001caef:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001caf4:	6a 08                	push   0x8
c001caf6:	51                   	push   ecx
c001caf7:	52                   	push   edx
c001caf8:	50                   	push   eax
c001caf9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cafd:	e8 ba fc ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb02:	83 c4 14             	add    esp,0x14
c001cb05:	83 c4 0c             	add    esp,0xc
c001cb08:	c3                   	ret    
c001cb09:	90                   	nop
c001cb0a:	66 90                	xchg   ax,ax

c001cb0c <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cb0c:	83 ec 0c             	sub    esp,0xc
c001cb0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cb13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cb17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb1b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001cb1f:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001cb23:	88 04 24             	mov    BYTE PTR [esp],al
c001cb26:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001cb2a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001cb2f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb34:	6a 3c                	push   0x3c
c001cb36:	51                   	push   ecx
c001cb37:	52                   	push   edx
c001cb38:	50                   	push   eax
c001cb39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb3d:	e8 7a fc ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb42:	83 c4 14             	add    esp,0x14
c001cb45:	83 c4 0c             	add    esp,0xc
c001cb48:	c3                   	ret    
c001cb49:	90                   	nop
c001cb4a:	66 90                	xchg   ax,ax

c001cb4c <PCIDriver::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cb4c:	83 ec 0c             	sub    esp,0xc
c001cb4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cb53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cb57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb5b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001cb5f:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001cb63:	88 04 24             	mov    BYTE PTR [esp],al
c001cb66:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001cb6a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001cb6f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb74:	6a 18                	push   0x18
c001cb76:	51                   	push   ecx
c001cb77:	52                   	push   edx
c001cb78:	50                   	push   eax
c001cb79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb7d:	e8 3a fc ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb82:	83 c4 14             	add    esp,0x14
c001cb85:	0f b7 c0             	movzx  eax,ax
c001cb88:	c1 f8 08             	sar    eax,0x8
c001cb8b:	83 c4 0c             	add    esp,0xc
c001cb8e:	c3                   	ret    
c001cb8f:	90                   	nop

c001cb90 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cb90:	56                   	push   esi
c001cb91:	53                   	push   ebx
c001cb92:	83 ec 10             	sub    esp,0x10
c001cb95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb99:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cba1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cba5:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001cba9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001cbad:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001cbb1:	88 04 24             	mov    BYTE PTR [esp],al
c001cbb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cbb8:	c1 e0 02             	shl    eax,0x2
c001cbbb:	83 c0 12             	add    eax,0x12
c001cbbe:	0f b6 d8             	movzx  ebx,al
c001cbc1:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001cbc5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001cbca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbcf:	53                   	push   ebx
c001cbd0:	51                   	push   ecx
c001cbd1:	52                   	push   edx
c001cbd2:	50                   	push   eax
c001cbd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbd7:	e8 e0 fb ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbdc:	83 c4 14             	add    esp,0x14
c001cbdf:	0f b7 c0             	movzx  eax,ax
c001cbe2:	c1 e0 10             	shl    eax,0x10
c001cbe5:	89 c6                	mov    esi,eax
c001cbe7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cbeb:	83 c0 04             	add    eax,0x4
c001cbee:	c1 e0 02             	shl    eax,0x2
c001cbf1:	0f b6 d8             	movzx  ebx,al
c001cbf4:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001cbf8:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001cbfd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc02:	53                   	push   ebx
c001cc03:	51                   	push   ecx
c001cc04:	52                   	push   edx
c001cc05:	50                   	push   eax
c001cc06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc0a:	e8 ad fb ff ff       	call   c001c7bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc0f:	83 c4 14             	add    esp,0x14
c001cc12:	0f b7 c0             	movzx  eax,ax
c001cc15:	09 f0                	or     eax,esi
c001cc17:	83 c4 10             	add    esp,0x10
c001cc1a:	5b                   	pop    ebx
c001cc1b:	5e                   	pop    esi
c001cc1c:	c3                   	ret    
c001cc1d:	66 90                	xchg   ax,ax
c001cc1f:	90                   	nop

c001cc20 <FAT::getName()>:
c001cc20:	b8 f4 b4 02 c0       	mov    eax,0xc002b4f4
c001cc25:	c3                   	ret    
c001cc26:	66 90                	xchg   ax,ax

c001cc28 <FAT::tell(void*, unsigned long long*)>:
c001cc28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001cc2d:	75 09                	jne    c001cc38 <FAT::tell(void*, unsigned long long*)+0x10>
c001cc2f:	b8 04 00 00 00       	mov    eax,0x4
c001cc34:	c3                   	ret    
c001cc35:	8d 76 00             	lea    esi,[esi+0x0]
c001cc38:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cc3d:	75 09                	jne    c001cc48 <FAT::tell(void*, unsigned long long*)+0x20>
c001cc3f:	b8 04 00 00 00       	mov    eax,0x4
c001cc44:	c3                   	ret    
c001cc45:	8d 76 00             	lea    esi,[esi+0x0]
c001cc48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc4c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cc4f:	ba 00 00 00 00       	mov    edx,0x0
c001cc54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc58:	89 01                	mov    DWORD PTR [ecx],eax
c001cc5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cc5d:	b8 00 00 00 00       	mov    eax,0x0
c001cc62:	c3                   	ret    
c001cc63:	90                   	nop

c001cc64 <FAT::stat(void*, unsigned long long*)>:
c001cc64:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001cc69:	75 09                	jne    c001cc74 <FAT::stat(void*, unsigned long long*)+0x10>
c001cc6b:	b8 04 00 00 00       	mov    eax,0x4
c001cc70:	c3                   	ret    
c001cc71:	8d 76 00             	lea    esi,[esi+0x0]
c001cc74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cc79:	75 09                	jne    c001cc84 <FAT::stat(void*, unsigned long long*)+0x20>
c001cc7b:	b8 04 00 00 00       	mov    eax,0x4
c001cc80:	c3                   	ret    
c001cc81:	8d 76 00             	lea    esi,[esi+0x0]
c001cc84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cc8b:	ba 00 00 00 00       	mov    edx,0x0
c001cc90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc94:	89 01                	mov    DWORD PTR [ecx],eax
c001cc96:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cc99:	b8 00 00 00 00       	mov    eax,0x0
c001cc9e:	c3                   	ret    
c001cc9f:	90                   	nop

c001cca0 <FAT::~FAT()>:
c001cca0:	83 ec 0c             	sub    esp,0xc
c001cca3:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c001cca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccac:	89 10                	mov    DWORD PTR [eax],edx
c001ccae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	50                   	push   eax
c001ccb6:	e8 7d b9 fe ff       	call   c0008638 <Filesystem::~Filesystem()>
c001ccbb:	83 c4 10             	add    esp,0x10
c001ccbe:	90                   	nop
c001ccbf:	83 c4 0c             	add    esp,0xc
c001ccc2:	c3                   	ret    
c001ccc3:	90                   	nop

c001ccc4 <FAT::~FAT()>:
c001ccc4:	83 ec 0c             	sub    esp,0xc
c001ccc7:	83 ec 0c             	sub    esp,0xc
c001ccca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccce:	e8 cd ff ff ff       	call   c001cca0 <FAT::~FAT()>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	83 ec 08             	sub    esp,0x8
c001ccd9:	6a 08                	push   0x8
c001ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccdf:	e8 e4 0e ff ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c001cce4:	83 c4 10             	add    esp,0x10
c001cce7:	83 c4 0c             	add    esp,0xc
c001ccea:	c3                   	ret    
c001cceb:	90                   	nop

c001ccec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ccec:	83 ec 1c             	sub    esp,0x1c
c001ccef:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ccf6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ccfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccff:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cd06:	83 f8 ff             	cmp    eax,0xffffffff
c001cd09:	75 35                	jne    c001cd40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001cd0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001cd0f:	88 c2                	mov    dl,al
c001cd11:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cd16:	01 d0                	add    eax,edx
c001cd18:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001cd1c:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001cd22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd26:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001cd2d:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cd32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd36:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001cd3d:	eb 19                	jmp    c001cd58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001cd3f:	90                   	nop
c001cd40:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001cd44:	88 c2                	mov    dl,al
c001cd46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd4a:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cd51:	01 d0                	add    eax,edx
c001cd53:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001cd57:	90                   	nop
c001cd58:	83 ec 04             	sub    esp,0x4
c001cd5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cd5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cd63:	8d 44 24 15          	lea    eax,[esp+0x15]
c001cd67:	50                   	push   eax
c001cd68:	e8 4b 84 fe ff       	call   c00051b8 <f_getlabel>
c001cd6d:	83 c4 10             	add    esp,0x10
c001cd70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd79:	75 09                	jne    c001cd84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001cd7b:	b8 00 00 00 00       	mov    eax,0x0
c001cd80:	eb 0a                	jmp    c001cd8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001cd82:	66 90                	xchg   ax,ax
c001cd84:	b8 01 00 00 00       	mov    eax,0x1
c001cd89:	8d 76 00             	lea    esi,[esi+0x0]
c001cd8c:	83 c4 1c             	add    esp,0x1c
c001cd8f:	c3                   	ret    

c001cd90 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001cd90:	57                   	push   edi
c001cd91:	83 ec 58             	sub    esp,0x58
c001cd94:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001cd9c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001cda0:	b8 00 00 00 00       	mov    eax,0x0
c001cda5:	b9 0f 00 00 00       	mov    ecx,0xf
c001cdaa:	fc                   	cld    
c001cdab:	89 d7                	mov    edi,edx
c001cdad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cdaf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cdb3:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cdba:	83 f8 ff             	cmp    eax,0xffffffff
c001cdbd:	75 35                	jne    c001cdf4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001cdbf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cdc3:	88 c2                	mov    dl,al
c001cdc5:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cdca:	01 d0                	add    eax,edx
c001cdcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cdd0:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001cdd6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cdda:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001cde1:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cde6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001cdea:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001cdf1:	eb 19                	jmp    c001ce0c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001cdf3:	90                   	nop
c001cdf4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cdf8:	88 c2                	mov    dl,al
c001cdfa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cdfe:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001ce05:	01 d0                	add    eax,edx
c001ce07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ce0b:	90                   	nop
c001ce0c:	83 ec 08             	sub    esp,0x8
c001ce0f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ce13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce17:	50                   	push   eax
c001ce18:	e8 23 3a fe ff       	call   c0000840 <strcat>
c001ce1d:	83 c4 10             	add    esp,0x10
c001ce20:	83 ec 0c             	sub    esp,0xc
c001ce23:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce27:	50                   	push   eax
c001ce28:	e8 dc 84 fe ff       	call   c0005309 <f_setlabel>
c001ce2d:	83 c4 10             	add    esp,0x10
c001ce30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ce34:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ce39:	75 09                	jne    c001ce44 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001ce3b:	b8 00 00 00 00       	mov    eax,0x0
c001ce40:	eb 0a                	jmp    c001ce4c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ce42:	66 90                	xchg   ax,ax
c001ce44:	b8 01 00 00 00       	mov    eax,0x1
c001ce49:	8d 76 00             	lea    esi,[esi+0x0]
c001ce4c:	83 c4 58             	add    esp,0x58
c001ce4f:	5f                   	pop    edi
c001ce50:	c3                   	ret    
c001ce51:	90                   	nop
c001ce52:	66 90                	xchg   ax,ax

c001ce54 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ce54:	83 ec 2c             	sub    esp,0x2c
c001ce57:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ce5f:	83 ec 08             	sub    esp,0x8
c001ce62:	68 18 b5 02 c0       	push   0xc002b518
c001ce67:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ce6b:	e8 e0 38 fe ff       	call   c0000750 <strcmp>
c001ce70:	83 c4 10             	add    esp,0x10
c001ce73:	85 c0                	test   eax,eax
c001ce75:	0f 94 c0             	sete   al
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	85 c0                	test   eax,eax
c001ce7d:	74 0d                	je     c001ce8c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ce7f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ce87:	e9 c0 00 00 00       	jmp    c001cf4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ce8c:	83 ec 08             	sub    esp,0x8
c001ce8f:	68 0a b5 02 c0       	push   0xc002b50a
c001ce94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ce98:	e8 b3 38 fe ff       	call   c0000750 <strcmp>
c001ce9d:	83 c4 10             	add    esp,0x10
c001cea0:	85 c0                	test   eax,eax
c001cea2:	0f 94 c0             	sete   al
c001cea5:	0f b6 c0             	movzx  eax,al
c001cea8:	85 c0                	test   eax,eax
c001ceaa:	74 10                	je     c001cebc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001ceac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ceb4:	e9 93 00 00 00       	jmp    c001cf4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ceb9:	8d 76 00             	lea    esi,[esi+0x0]
c001cebc:	83 ec 08             	sub    esp,0x8
c001cebf:	68 10 b5 02 c0       	push   0xc002b510
c001cec4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cec8:	e8 83 38 fe ff       	call   c0000750 <strcmp>
c001cecd:	83 c4 10             	add    esp,0x10
c001ced0:	85 c0                	test   eax,eax
c001ced2:	0f 94 c0             	sete   al
c001ced5:	0f b6 c0             	movzx  eax,al
c001ced8:	85 c0                	test   eax,eax
c001ceda:	74 0c                	je     c001cee8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001cedc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001cee4:	eb 66                	jmp    c001cf4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001cee6:	66 90                	xchg   ax,ax
c001cee8:	83 ec 08             	sub    esp,0x8
c001ceeb:	68 5c 83 02 c0       	push   0xc002835c
c001cef0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cef4:	e8 57 38 fe ff       	call   c0000750 <strcmp>
c001cef9:	83 c4 10             	add    esp,0x10
c001cefc:	85 c0                	test   eax,eax
c001cefe:	0f 94 c0             	sete   al
c001cf01:	0f b6 c0             	movzx  eax,al
c001cf04:	85 c0                	test   eax,eax
c001cf06:	74 0c                	je     c001cf14 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001cf08:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001cf10:	eb 3a                	jmp    c001cf4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001cf12:	66 90                	xchg   ax,ax
c001cf14:	83 ec 08             	sub    esp,0x8
c001cf17:	68 16 b5 02 c0       	push   0xc002b516
c001cf1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cf20:	e8 2b 38 fe ff       	call   c0000750 <strcmp>
c001cf25:	83 c4 10             	add    esp,0x10
c001cf28:	85 c0                	test   eax,eax
c001cf2a:	0f 94 c0             	sete   al
c001cf2d:	0f b6 c0             	movzx  eax,al
c001cf30:	85 c0                	test   eax,eax
c001cf32:	74 0c                	je     c001cf40 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001cf34:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001cf3c:	eb 0e                	jmp    c001cf4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001cf3e:	66 90                	xchg   ax,ax
c001cf40:	b8 08 00 00 00       	mov    eax,0x8
c001cf45:	e9 ea 00 00 00       	jmp    c001d034 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001cf4a:	66 90                	xchg   ax,ax
c001cf4c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001cf53:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001cf58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf5c:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cf63:	83 f8 ff             	cmp    eax,0xffffffff
c001cf66:	75 34                	jne    c001cf9c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001cf68:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001cf6c:	88 c2                	mov    dl,al
c001cf6e:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cf73:	01 d0                	add    eax,edx
c001cf75:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001cf79:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001cf7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf83:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001cf8a:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cf8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cf93:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001cf9a:	eb 18                	jmp    c001cfb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001cf9c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001cfa0:	88 c2                	mov    dl,al
c001cfa2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cfa6:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cfad:	01 d0                	add    eax,edx
c001cfaf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001cfb3:	90                   	nop
c001cfb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfb8:	88 04 24             	mov    BYTE PTR [esp],al
c001cfbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cfbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cfcb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001cfd0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cfd8:	83 ec 0c             	sub    esp,0xc
c001cfdb:	68 00 20 00 00       	push   0x2000
c001cfe0:	e8 d6 30 ff ff       	call   c00100bb <malloc>
c001cfe5:	83 c4 10             	add    esp,0x10
c001cfe8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfec:	68 00 20 00 00       	push   0x2000
c001cff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cff5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cff9:	50                   	push   eax
c001cffa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001cffe:	50                   	push   eax
c001cfff:	e8 02 86 fe ff       	call   c0005606 <f_mkfs>
c001d004:	83 c4 10             	add    esp,0x10
c001d007:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d00b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d010:	75 0a                	jne    c001d01c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001d012:	b8 00 00 00 00       	mov    eax,0x0
c001d017:	eb 1b                	jmp    c001d034 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001d019:	8d 76 00             	lea    esi,[esi+0x0]
c001d01c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001d021:	75 09                	jne    c001d02c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001d023:	b8 09 00 00 00       	mov    eax,0x9
c001d028:	eb 0a                	jmp    c001d034 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001d02a:	66 90                	xchg   ax,ax
c001d02c:	b8 01 00 00 00       	mov    eax,0x1
c001d031:	8d 76 00             	lea    esi,[esi+0x0]
c001d034:	83 c4 2c             	add    esp,0x2c
c001d037:	c3                   	ret    

c001d038 <FAT::tryMount(LogicalDisk*, int)>:
c001d038:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001d03e:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001d043:	83 f8 14             	cmp    eax,0x14
c001d046:	75 18                	jne    c001d060 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001d048:	83 ec 0c             	sub    esp,0xc
c001d04b:	68 1c b5 02 c0       	push   0xc002b51c
c001d050:	e8 bb 34 ff ff       	call   c0010510 <KePanic(char const*)>
c001d055:	83 c4 10             	add    esp,0x10
c001d058:	b0 00                	mov    al,0x0
c001d05a:	e9 ed 01 00 00       	jmp    c001d24c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001d05f:	90                   	nop
c001d060:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001d067:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d06d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d073:	3d 00 02 00 00       	cmp    eax,0x200
c001d078:	74 0a                	je     c001d084 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001d07a:	b0 00                	mov    al,0x0
c001d07c:	e9 cb 01 00 00       	jmp    c001d24c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001d081:	8d 76 00             	lea    esi,[esi+0x0]
c001d084:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001d08c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001d093:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001d09a:	83 f8 ff             	cmp    eax,0xffffffff
c001d09d:	74 09                	je     c001d0a8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001d09f:	b0 01                	mov    al,0x1
c001d0a1:	e9 a6 01 00 00       	jmp    c001d24c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001d0a6:	66 90                	xchg   ax,ax
c001d0a8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001d0b2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001d0ba:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001d0c1:	88 c2                	mov    dl,al
c001d0c3:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001d0c8:	01 d0                	add    eax,edx
c001d0ca:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001d0d1:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001d0d7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001d0de:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001d0e5:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001d0ea:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001d0f1:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001d0f8:	83 ec 0c             	sub    esp,0xc
c001d0fb:	68 34 02 00 00       	push   0x234
c001d100:	e8 b6 2f ff ff       	call   c00100bb <malloc>
c001d105:	83 c4 10             	add    esp,0x10
c001d108:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001d10f:	83 ec 04             	sub    esp,0x4
c001d112:	6a 00                	push   0x0
c001d114:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001d11b:	50                   	push   eax
c001d11c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001d123:	e8 b9 6c fe ff       	call   c0003de1 <f_mount>
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001d132:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001d13a:	74 1c                	je     c001d158 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001d146:	e8 90 2f ff ff       	call   c00100db <rfree>
c001d14b:	83 c4 10             	add    esp,0x10
c001d14e:	b0 00                	mov    al,0x0
c001d150:	e9 f7 00 00 00       	jmp    c001d24c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001d155:	8d 76 00             	lea    esi,[esi+0x0]
c001d158:	83 ec 04             	sub    esp,0x4
c001d15b:	68 00 01 00 00       	push   0x100
c001d160:	6a 00                	push   0x0
c001d162:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001d169:	50                   	push   eax
c001d16a:	e8 81 33 fe ff       	call   c00004f0 <memset>
c001d16f:	83 c4 10             	add    esp,0x10
c001d172:	83 ec 08             	sub    esp,0x8
c001d175:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001d17c:	50                   	push   eax
c001d17d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001d184:	50                   	push   eax
c001d185:	e8 b6 36 fe ff       	call   c0000840 <strcat>
c001d18a:	83 c4 10             	add    esp,0x10
c001d18d:	83 ec 08             	sub    esp,0x8
c001d190:	68 2a b5 02 c0       	push   0xc002b52a
c001d195:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001d19c:	50                   	push   eax
c001d19d:	e8 9e 36 fe ff       	call   c0000840 <strcat>
c001d1a2:	83 c4 10             	add    esp,0x10
c001d1a5:	83 ec 04             	sub    esp,0x4
c001d1a8:	6a 01                	push   0x1
c001d1aa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001d1b1:	50                   	push   eax
c001d1b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d1b6:	50                   	push   eax
c001d1b7:	e8 87 6c fe ff       	call   c0003e43 <f_open>
c001d1bc:	83 c4 10             	add    esp,0x10
c001d1bf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001d1c6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001d1cd:	85 c0                	test   eax,eax
c001d1cf:	74 0b                	je     c001d1dc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001d1d1:	78 31                	js     c001d204 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001d1d3:	83 e8 04             	sub    eax,0x4
c001d1d6:	83 f8 01             	cmp    eax,0x1
c001d1d9:	77 29                	ja     c001d204 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001d1db:	90                   	nop
c001d1dc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d1eb:	50                   	push   eax
c001d1ec:	e8 21 74 fe ff       	call   c0004612 <f_close>
c001d1f1:	83 c4 10             	add    esp,0x10
c001d1f4:	90                   	nop
c001d1f5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001d1fd:	85 c0                	test   eax,eax
c001d1ff:	74 43                	je     c001d244 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001d201:	eb 31                	jmp    c001d234 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001d203:	90                   	nop
c001d204:	83 ec 0c             	sub    esp,0xc
c001d207:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001d20e:	e8 c8 2e ff ff       	call   c00100db <rfree>
c001d213:	83 c4 10             	add    esp,0x10
c001d216:	83 ec 04             	sub    esp,0x4
c001d219:	6a 00                	push   0x0
c001d21b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001d222:	50                   	push   eax
c001d223:	6a 00                	push   0x0
c001d225:	e8 b7 6b fe ff       	call   c0003de1 <f_mount>
c001d22a:	83 c4 10             	add    esp,0x10
c001d22d:	b0 00                	mov    al,0x0
c001d22f:	eb 1b                	jmp    c001d24c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001d231:	8d 76 00             	lea    esi,[esi+0x0]
c001d234:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001d239:	83 c0 01             	add    eax,0x1
c001d23c:	a3 80 54 03 c0       	mov    ds:0xc0035480,eax
c001d241:	8d 76 00             	lea    esi,[esi+0x0]
c001d244:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001d24b:	90                   	nop
c001d24c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001d252:	c3                   	ret    
c001d253:	90                   	nop

c001d254 <FAT::allocateSwapfile(char const*, int)>:
c001d254:	55                   	push   ebp
c001d255:	57                   	push   edi
c001d256:	56                   	push   esi
c001d257:	53                   	push   ebx
c001d258:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001d25e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001d269:	83 ec 0c             	sub    esp,0xc
c001d26c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001d273:	e8 43 2e ff ff       	call   c00100bb <malloc>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	89 c7                	mov    edi,eax
c001d27d:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001d282:	83 ec 04             	sub    esp,0x4
c001d285:	50                   	push   eax
c001d286:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001d28d:	57                   	push   edi
c001d28e:	e8 43 b7 fe ff       	call   c00089d6 <File::File(char const*, Process*)>
c001d293:	83 c4 10             	add    esp,0x10
c001d296:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001d29d:	83 ec 04             	sub    esp,0x4
c001d2a0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001d2a4:	50                   	push   eax
c001d2a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d2a9:	50                   	push   eax
c001d2aa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d2b1:	e8 40 ba fe ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c001d2b6:	83 c4 10             	add    esp,0x10
c001d2b9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001d2c0:	c1 e0 14             	shl    eax,0x14
c001d2c3:	89 c7                	mov    edi,eax
c001d2c5:	89 c5                	mov    ebp,eax
c001d2c7:	c1 fd 1f             	sar    ebp,0x1f
c001d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d2d2:	89 f9                	mov    ecx,edi
c001d2d4:	31 c1                	xor    ecx,eax
c001d2d6:	89 cb                	mov    ebx,ecx
c001d2d8:	89 e9                	mov    ecx,ebp
c001d2da:	31 d1                	xor    ecx,edx
c001d2dc:	89 ce                	mov    esi,ecx
c001d2de:	89 f0                	mov    eax,esi
c001d2e0:	09 d8                	or     eax,ebx
c001d2e2:	0f 84 9c 00 00 00    	je     c001d384 <FAT::allocateSwapfile(char const*, int)+0x130>
c001d2e8:	83 ec 0c             	sub    esp,0xc
c001d2eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d2f2:	e8 cb b8 fe ff       	call   c0008bc2 <File::unlink()>
c001d2f7:	83 c4 10             	add    esp,0x10
c001d2fa:	83 ec 08             	sub    esp,0x8
c001d2fd:	6a 12                	push   0x12
c001d2ff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d306:	e8 e9 b6 fe ff       	call   c00089f4 <File::open(FileOpenMode)>
c001d30b:	83 c4 10             	add    esp,0x10
c001d30e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d315:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001d31b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001d322:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001d329:	c1 e0 14             	shl    eax,0x14
c001d32c:	83 ec 04             	sub    esp,0x4
c001d32f:	6a 01                	push   0x1
c001d331:	50                   	push   eax
c001d332:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001d339:	e8 5b 81 fe ff       	call   c0005499 <f_expand>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d348:	8b 00                	mov    eax,DWORD PTR [eax]
c001d34a:	83 c0 10             	add    eax,0x10
c001d34d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d34f:	83 ec 0c             	sub    esp,0xc
c001d352:	8d 54 24 24          	lea    edx,[esp+0x24]
c001d356:	52                   	push   edx
c001d357:	8d 54 24 30          	lea    edx,[esp+0x30]
c001d35b:	52                   	push   edx
c001d35c:	6a 00                	push   0x0
c001d35e:	68 00 04 00 00       	push   0x400
c001d363:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001d36a:	ff d0                	call   eax
c001d36c:	83 c4 20             	add    esp,0x20
c001d36f:	83 ec 0c             	sub    esp,0xc
c001d372:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d379:	e8 d4 b6 fe ff       	call   c0008a52 <File::close()>
c001d37e:	83 c4 10             	add    esp,0x10
c001d381:	8d 76 00             	lea    esi,[esi+0x0]
c001d384:	83 ec 08             	sub    esp,0x8
c001d387:	6a 01                	push   0x1
c001d389:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d390:	e8 5f b6 fe ff       	call   c00089f4 <File::open(FileOpenMode)>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d39f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3a1:	83 c0 0c             	add    eax,0xc
c001d3a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3a6:	83 ec 0c             	sub    esp,0xc
c001d3a9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001d3ad:	52                   	push   edx
c001d3ae:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001d3b2:	52                   	push   edx
c001d3b3:	6a 00                	push   0x0
c001d3b5:	6a 04                	push   0x4
c001d3b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001d3be:	ff d0                	call   eax
c001d3c0:	83 c4 20             	add    esp,0x20
c001d3c3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d3ca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001d3d0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001d3d7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001d3de:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001d3e1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001d3e8:	83 ec 0c             	sub    esp,0xc
c001d3eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d3f2:	e8 5b b6 fe ff       	call   c0008a52 <File::close()>
c001d3f7:	83 c4 10             	add    esp,0x10
c001d3fa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001d401:	ba 00 00 00 00       	mov    edx,0x0
c001d406:	81 c4 3c 04 00 00    	add    esp,0x43c
c001d40c:	5b                   	pop    ebx
c001d40d:	5e                   	pop    esi
c001d40e:	5f                   	pop    edi
c001d40f:	5d                   	pop    ebp
c001d410:	c3                   	ret    
c001d411:	90                   	nop
c001d412:	66 90                	xchg   ax,ax

c001d414 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001d414:	57                   	push   edi
c001d415:	56                   	push   esi
c001d416:	53                   	push   ebx
c001d417:	81 ec 50 02 00 00    	sub    esp,0x250
c001d41d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001d425:	74 0d                	je     c001d434 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001d427:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001d42f:	75 0f                	jne    c001d440 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001d431:	8d 76 00             	lea    esi,[esi+0x0]
c001d434:	b8 04 00 00 00       	mov    eax,0x4
c001d439:	e9 3a 01 00 00       	jmp    c001d578 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001d43e:	66 90                	xchg   ax,ax
c001d440:	83 ec 08             	sub    esp,0x8
c001d443:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001d44a:	50                   	push   eax
c001d44b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001d452:	e8 88 74 fe ff       	call   c00048df <f_readdir>
c001d457:	83 c4 10             	add    esp,0x10
c001d45a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001d461:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001d468:	83 ec 0c             	sub    esp,0xc
c001d46b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001d472:	83 c0 16             	add    eax,0x16
c001d475:	50                   	push   eax
c001d476:	e8 f5 30 fe ff       	call   c0000570 <strlen>
c001d47b:	83 c4 10             	add    esp,0x10
c001d47e:	ba 00 00 00 00       	mov    edx,0x0
c001d483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d487:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d48b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001d492:	0f b6 c0             	movzx  eax,al
c001d495:	83 e0 10             	and    eax,0x10
c001d498:	74 0a                	je     c001d4a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001d49a:	b8 02 00 00 00       	mov    eax,0x2
c001d49f:	eb 0b                	jmp    c001d4ac <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001d4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d4a4:	b8 01 00 00 00       	mov    eax,0x1
c001d4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d4b0:	83 ec 08             	sub    esp,0x8
c001d4b3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001d4ba:	83 c0 16             	add    eax,0x16
c001d4bd:	50                   	push   eax
c001d4be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d4c2:	83 c0 10             	add    eax,0x10
c001d4c5:	50                   	push   eax
c001d4c6:	e8 75 31 fe ff       	call   c0000640 <strcpy>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001d4d5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001d4dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d4e0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001d4e7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001d4ee:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001d4f5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001d4fc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001d503:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001d50a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001d511:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001d518:	89 c6                	mov    esi,eax
c001d51a:	89 d7                	mov    edi,edx
c001d51c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d51e:	89 c8                	mov    eax,ecx
c001d520:	89 fa                	mov    edx,edi
c001d522:	89 f3                	mov    ebx,esi
c001d524:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001d52b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001d532:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001d539:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001d540:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001d546:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001d54d:	0f be c0             	movsx  eax,al
c001d550:	85 c0                	test   eax,eax
c001d552:	75 08                	jne    c001d55c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001d554:	b8 07 00 00 00       	mov    eax,0x7
c001d559:	eb 1d                	jmp    c001d578 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001d55b:	90                   	nop
c001d55c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001d563:	85 c0                	test   eax,eax
c001d565:	75 09                	jne    c001d570 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001d567:	b8 00 00 00 00       	mov    eax,0x0
c001d56c:	eb 0a                	jmp    c001d578 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001d56e:	66 90                	xchg   ax,ax
c001d570:	b8 01 00 00 00       	mov    eax,0x1
c001d575:	8d 76 00             	lea    esi,[esi+0x0]
c001d578:	81 c4 50 02 00 00    	add    esp,0x250
c001d57e:	5b                   	pop    ebx
c001d57f:	5e                   	pop    esi
c001d580:	5f                   	pop    edi
c001d581:	c3                   	ret    
c001d582:	66 90                	xchg   ax,ax

c001d584 <FAT::read(void*, unsigned long, void*, int*)>:
c001d584:	83 ec 1c             	sub    esp,0x1c
c001d587:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d58c:	74 0a                	je     c001d598 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001d58e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001d593:	75 0b                	jne    c001d5a0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001d595:	8d 76 00             	lea    esi,[esi+0x0]
c001d598:	b8 04 00 00 00       	mov    eax,0x4
c001d59d:	eb 41                	jmp    c001d5e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001d59f:	90                   	nop
c001d5a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d5a4:	50                   	push   eax
c001d5a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d5ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d5b1:	e8 50 6b fe ff       	call   c0004106 <f_read>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d5c1:	89 c2                	mov    edx,eax
c001d5c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5c7:	89 10                	mov    DWORD PTR [eax],edx
c001d5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5cd:	85 c0                	test   eax,eax
c001d5cf:	75 07                	jne    c001d5d8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001d5d1:	b8 00 00 00 00       	mov    eax,0x0
c001d5d6:	eb 08                	jmp    c001d5e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001d5d8:	b8 01 00 00 00       	mov    eax,0x1
c001d5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001d5e0:	83 c4 1c             	add    esp,0x1c
c001d5e3:	c3                   	ret    

c001d5e4 <FAT::write(void*, unsigned long, void*, int*)>:
c001d5e4:	83 ec 1c             	sub    esp,0x1c
c001d5e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d5ec:	74 0a                	je     c001d5f8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001d5ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001d5f3:	75 0b                	jne    c001d600 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001d5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5f8:	b8 04 00 00 00       	mov    eax,0x4
c001d5fd:	eb 41                	jmp    c001d640 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001d5ff:	90                   	nop
c001d600:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d604:	50                   	push   eax
c001d605:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d609:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d60d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d611:	e8 ef 6c fe ff       	call   c0004305 <f_write>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d61d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d621:	89 c2                	mov    edx,eax
c001d623:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d627:	89 10                	mov    DWORD PTR [eax],edx
c001d629:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d62d:	85 c0                	test   eax,eax
c001d62f:	75 07                	jne    c001d638 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001d631:	b8 00 00 00 00       	mov    eax,0x0
c001d636:	eb 08                	jmp    c001d640 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001d638:	b8 01 00 00 00       	mov    eax,0x1
c001d63d:	8d 76 00             	lea    esi,[esi+0x0]
c001d640:	83 c4 1c             	add    esp,0x1c
c001d643:	c3                   	ret    

c001d644 <FAT::close(void*)>:
c001d644:	83 ec 1c             	sub    esp,0x1c
c001d647:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d64c:	75 0a                	jne    c001d658 <FAT::close(void*)+0x14>
c001d64e:	b8 04 00 00 00       	mov    eax,0x4
c001d653:	eb 3f                	jmp    c001d694 <FAT::close(void*)+0x50>
c001d655:	8d 76 00             	lea    esi,[esi+0x0]
c001d658:	83 ec 0c             	sub    esp,0xc
c001d65b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d65f:	e8 ae 6f fe ff       	call   c0004612 <f_close>
c001d664:	83 c4 10             	add    esp,0x10
c001d667:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d66b:	83 ec 0c             	sub    esp,0xc
c001d66e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d672:	e8 54 2a ff ff       	call   c00100cb <free>
c001d677:	83 c4 10             	add    esp,0x10
c001d67a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d67e:	85 c0                	test   eax,eax
c001d680:	75 0a                	jne    c001d68c <FAT::close(void*)+0x48>
c001d682:	b8 00 00 00 00       	mov    eax,0x0
c001d687:	eb 0b                	jmp    c001d694 <FAT::close(void*)+0x50>
c001d689:	8d 76 00             	lea    esi,[esi+0x0]
c001d68c:	b8 01 00 00 00       	mov    eax,0x1
c001d691:	8d 76 00             	lea    esi,[esi+0x0]
c001d694:	83 c4 1c             	add    esp,0x1c
c001d697:	c3                   	ret    

c001d698 <FAT::closeDir(void*)>:
c001d698:	83 ec 1c             	sub    esp,0x1c
c001d69b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d6a0:	75 0a                	jne    c001d6ac <FAT::closeDir(void*)+0x14>
c001d6a2:	b8 04 00 00 00       	mov    eax,0x4
c001d6a7:	eb 3f                	jmp    c001d6e8 <FAT::closeDir(void*)+0x50>
c001d6a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d6ac:	83 ec 0c             	sub    esp,0xc
c001d6af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d6b3:	e8 05 72 fe ff       	call   c00048bd <f_closedir>
c001d6b8:	83 c4 10             	add    esp,0x10
c001d6bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6bf:	83 ec 0c             	sub    esp,0xc
c001d6c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d6c6:	e8 00 2a ff ff       	call   c00100cb <free>
c001d6cb:	83 c4 10             	add    esp,0x10
c001d6ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6d2:	85 c0                	test   eax,eax
c001d6d4:	75 0a                	jne    c001d6e0 <FAT::closeDir(void*)+0x48>
c001d6d6:	b8 00 00 00 00       	mov    eax,0x0
c001d6db:	eb 0b                	jmp    c001d6e8 <FAT::closeDir(void*)+0x50>
c001d6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001d6e0:	b8 01 00 00 00       	mov    eax,0x1
c001d6e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d6e8:	83 c4 1c             	add    esp,0x1c
c001d6eb:	c3                   	ret    

c001d6ec <FAT::truncate(void*, unsigned long long)>:
c001d6ec:	83 ec 2c             	sub    esp,0x2c
c001d6ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d6f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001d704:	75 0a                	jne    c001d710 <FAT::truncate(void*, unsigned long long)+0x24>
c001d706:	b8 04 00 00 00       	mov    eax,0x4
c001d70b:	eb 47                	jmp    c001d754 <FAT::truncate(void*, unsigned long long)+0x68>
c001d70d:	8d 76 00             	lea    esi,[esi+0x0]
c001d710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d714:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d717:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d71b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001d723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d727:	83 ec 08             	sub    esp,0x8
c001d72a:	50                   	push   eax
c001d72b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d72f:	e8 0d 6f fe ff       	call   c0004641 <f_lseek>
c001d734:	83 c4 10             	add    esp,0x10
c001d737:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d73b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d73f:	85 c0                	test   eax,eax
c001d741:	75 09                	jne    c001d74c <FAT::truncate(void*, unsigned long long)+0x60>
c001d743:	b8 00 00 00 00       	mov    eax,0x0
c001d748:	eb 0a                	jmp    c001d754 <FAT::truncate(void*, unsigned long long)+0x68>
c001d74a:	66 90                	xchg   ax,ax
c001d74c:	b8 01 00 00 00       	mov    eax,0x1
c001d751:	8d 76 00             	lea    esi,[esi+0x0]
c001d754:	83 c4 2c             	add    esp,0x2c
c001d757:	c3                   	ret    

c001d758 <FAT::seek(void*, unsigned long long)>:
c001d758:	83 ec 2c             	sub    esp,0x2c
c001d75b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d75f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d763:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d76b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001d770:	75 0a                	jne    c001d77c <FAT::seek(void*, unsigned long long)+0x24>
c001d772:	b8 04 00 00 00       	mov    eax,0x4
c001d777:	eb 33                	jmp    c001d7ac <FAT::seek(void*, unsigned long long)+0x54>
c001d779:	8d 76 00             	lea    esi,[esi+0x0]
c001d77c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d780:	83 ec 08             	sub    esp,0x8
c001d783:	50                   	push   eax
c001d784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d788:	e8 b4 6e fe ff       	call   c0004641 <f_lseek>
c001d78d:	83 c4 10             	add    esp,0x10
c001d790:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d798:	85 c0                	test   eax,eax
c001d79a:	75 08                	jne    c001d7a4 <FAT::seek(void*, unsigned long long)+0x4c>
c001d79c:	b8 00 00 00 00       	mov    eax,0x0
c001d7a1:	eb 09                	jmp    c001d7ac <FAT::seek(void*, unsigned long long)+0x54>
c001d7a3:	90                   	nop
c001d7a4:	b8 01 00 00 00       	mov    eax,0x1
c001d7a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d7ac:	83 c4 2c             	add    esp,0x2c
c001d7af:	c3                   	ret    

c001d7b0 <fatWrapperReadDisk>:
c001d7b0:	53                   	push   ebx
c001d7b1:	83 ec 18             	sub    esp,0x18
c001d7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d7bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d7c1:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001d7c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d7cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7d0:	ba 00 00 00 00       	mov    edx,0x0
c001d7d5:	83 ec 0c             	sub    esp,0xc
c001d7d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d7dc:	53                   	push   ebx
c001d7dd:	52                   	push   edx
c001d7de:	50                   	push   eax
c001d7df:	51                   	push   ecx
c001d7e0:	e8 d9 da fe ff       	call   c000b2be <LogicalDisk::read(unsigned long long, int, void*)>
c001d7e5:	83 c4 20             	add    esp,0x20
c001d7e8:	83 c4 18             	add    esp,0x18
c001d7eb:	5b                   	pop    ebx
c001d7ec:	c3                   	ret    
c001d7ed:	8d 76 00             	lea    esi,[esi+0x0]

c001d7f0 <fatWrapperWriteDisk>:
c001d7f0:	53                   	push   ebx
c001d7f1:	83 ec 18             	sub    esp,0x18
c001d7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d7fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d801:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001d808:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d80c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d810:	ba 00 00 00 00       	mov    edx,0x0
c001d815:	83 ec 0c             	sub    esp,0xc
c001d818:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d81c:	53                   	push   ebx
c001d81d:	52                   	push   edx
c001d81e:	50                   	push   eax
c001d81f:	51                   	push   ecx
c001d820:	e8 05 db fe ff       	call   c000b32a <LogicalDisk::write(unsigned long long, int, void*)>
c001d825:	83 c4 20             	add    esp,0x20
c001d828:	83 c4 18             	add    esp,0x18
c001d82b:	5b                   	pop    ebx
c001d82c:	c3                   	ret    
c001d82d:	8d 76 00             	lea    esi,[esi+0x0]

c001d830 <fatWrapperIoctl>:
c001d830:	53                   	push   ebx
c001d831:	83 ec 28             	sub    esp,0x28
c001d834:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d838:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d83c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001d840:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d844:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d849:	83 f8 02             	cmp    eax,0x2
c001d84c:	75 32                	jne    c001d880 <fatWrapperIoctl+0x50>
c001d84e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d852:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d856:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d85b:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c001d862:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d868:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d86e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d872:	66 89 02             	mov    WORD PTR [edx],ax
c001d875:	b8 00 00 00 00       	mov    eax,0x0
c001d87a:	e9 c5 00 00 00       	jmp    c001d944 <fatWrapperIoctl+0x114>
c001d87f:	90                   	nop
c001d880:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d885:	83 f8 01             	cmp    eax,0x1
c001d888:	75 6a                	jne    c001d8f4 <fatWrapperIoctl+0xc4>
c001d88a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d88e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d892:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d897:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c001d89e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d8a4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001d8aa:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001d8b0:	89 c8                	mov    eax,ecx
c001d8b2:	89 da                	mov    edx,ebx
c001d8b4:	0f a4 c2 0a          	shld   edx,eax,0xa
c001d8b8:	c1 e0 0a             	shl    eax,0xa
c001d8bb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001d8c0:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c001d8c7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001d8cd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001d8d3:	89 cb                	mov    ebx,ecx
c001d8d5:	c1 fb 1f             	sar    ebx,0x1f
c001d8d8:	53                   	push   ebx
c001d8d9:	51                   	push   ecx
c001d8da:	52                   	push   edx
c001d8db:	50                   	push   eax
c001d8dc:	e8 53 55 00 00       	call   c0022e34 <__udivdi3>
c001d8e1:	83 c4 10             	add    esp,0x10
c001d8e4:	89 c2                	mov    edx,eax
c001d8e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8ea:	89 10                	mov    DWORD PTR [eax],edx
c001d8ec:	b8 00 00 00 00       	mov    eax,0x0
c001d8f1:	eb 51                	jmp    c001d944 <fatWrapperIoctl+0x114>
c001d8f3:	90                   	nop
c001d8f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d8f9:	85 c0                	test   eax,eax
c001d8fb:	75 07                	jne    c001d904 <fatWrapperIoctl+0xd4>
c001d8fd:	b8 00 00 00 00       	mov    eax,0x0
c001d902:	eb 40                	jmp    c001d944 <fatWrapperIoctl+0x114>
c001d904:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d909:	83 f8 03             	cmp    eax,0x3
c001d90c:	75 1a                	jne    c001d928 <fatWrapperIoctl+0xf8>
c001d90e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d912:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d916:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d91a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d920:	b8 00 00 00 00       	mov    eax,0x0
c001d925:	eb 1d                	jmp    c001d944 <fatWrapperIoctl+0x114>
c001d927:	90                   	nop
c001d928:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d92d:	83 f8 04             	cmp    eax,0x4
c001d930:	75 0a                	jne    c001d93c <fatWrapperIoctl+0x10c>
c001d932:	b8 00 00 00 00       	mov    eax,0x0
c001d937:	eb 0b                	jmp    c001d944 <fatWrapperIoctl+0x114>
c001d939:	8d 76 00             	lea    esi,[esi+0x0]
c001d93c:	b8 04 00 00 00       	mov    eax,0x4
c001d941:	8d 76 00             	lea    esi,[esi+0x0]
c001d944:	83 c4 28             	add    esp,0x28
c001d947:	5b                   	pop    ebx
c001d948:	c3                   	ret    
c001d949:	90                   	nop
c001d94a:	66 90                	xchg   ax,ax

c001d94c <FAT::FAT()>:
c001d94c:	83 ec 1c             	sub    esp,0x1c
c001d94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d953:	83 ec 0c             	sub    esp,0xc
c001d956:	50                   	push   eax
c001d957:	e8 b8 ac fe ff       	call   c0008614 <Filesystem::Filesystem()>
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c001d964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d968:	89 10                	mov    DWORD PTR [eax],edx
c001d96a:	c7 05 80 54 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035480,0x0
c001d974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d97c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001d981:	7f 19                	jg     c001d99c <FAT::FAT()+0x50>
c001d983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d987:	c7 04 85 a0 54 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcab60],0xffffffff
c001d992:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d997:	eb e3                	jmp    c001d97c <FAT::FAT()+0x30>
c001d999:	8d 76 00             	lea    esi,[esi+0x0]
c001d99c:	90                   	nop
c001d99d:	83 c4 1c             	add    esp,0x1c
c001d9a0:	c3                   	ret    
c001d9a1:	90                   	nop
c001d9a2:	66 90                	xchg   ax,ax

c001d9a4 <FAT::fixFilepath(char*)>:
c001d9a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9a8:	8a 00                	mov    al,BYTE PTR [eax]
c001d9aa:	0f be c0             	movsx  eax,al
c001d9ad:	83 f8 40             	cmp    eax,0x40
c001d9b0:	7e 2e                	jle    c001d9e0 <FAT::fixFilepath(char*)+0x3c>
c001d9b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9b6:	8a 00                	mov    al,BYTE PTR [eax]
c001d9b8:	83 e8 41             	sub    eax,0x41
c001d9bb:	88 c2                	mov    dl,al
c001d9bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9c1:	88 10                	mov    BYTE PTR [eax],dl
c001d9c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9c7:	8a 00                	mov    al,BYTE PTR [eax]
c001d9c9:	0f be c0             	movsx  eax,al
c001d9cc:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001d9d3:	83 c0 30             	add    eax,0x30
c001d9d6:	88 c2                	mov    dl,al
c001d9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9dc:	88 10                	mov    BYTE PTR [eax],dl
c001d9de:	66 90                	xchg   ax,ax
c001d9e0:	90                   	nop
c001d9e1:	c3                   	ret    
c001d9e2:	66 90                	xchg   ax,ax

c001d9e4 <FAT::open(char const*, void**, FileOpenMode)>:
c001d9e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d9ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d9f2:	74 0c                	je     c001da00 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001d9f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001d9fc:	75 0e                	jne    c001da0c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001d9fe:	66 90                	xchg   ax,ax
c001da00:	b8 04 00 00 00       	mov    eax,0x4
c001da05:	e9 46 01 00 00       	jmp    c001db50 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001da0a:	66 90                	xchg   ax,ax
c001da0c:	83 ec 08             	sub    esp,0x8
c001da0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001da16:	8d 44 24 14          	lea    eax,[esp+0x14]
c001da1a:	50                   	push   eax
c001da1b:	e8 20 2c fe ff       	call   c0000640 <strcpy>
c001da20:	83 c4 10             	add    esp,0x10
c001da23:	83 ec 08             	sub    esp,0x8
c001da26:	8d 44 24 10          	lea    eax,[esp+0x10]
c001da2a:	50                   	push   eax
c001da2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001da32:	e8 6d ff ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001da37:	83 c4 10             	add    esp,0x10
c001da3a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001da42:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001da49:	83 e0 01             	and    eax,0x1
c001da4c:	74 12                	je     c001da60 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001da4e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001da55:	83 c8 01             	or     eax,0x1
c001da58:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001da5f:	90                   	nop
c001da60:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001da67:	83 e0 04             	and    eax,0x4
c001da6a:	74 24                	je     c001da90 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001da6c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001da73:	83 c8 30             	or     eax,0x30
c001da76:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001da7d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001da84:	83 c8 02             	or     eax,0x2
c001da87:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001da8e:	66 90                	xchg   ax,ax
c001da90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001da97:	83 e0 02             	and    eax,0x2
c001da9a:	74 14                	je     c001dab0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001da9c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001daa3:	83 c8 02             	or     eax,0x2
c001daa6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001daad:	8d 76 00             	lea    esi,[esi+0x0]
c001dab0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001dab7:	83 e0 08             	and    eax,0x8
c001daba:	74 14                	je     c001dad0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001dabc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001dac3:	83 c8 04             	or     eax,0x4
c001dac6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001dacd:	8d 76 00             	lea    esi,[esi+0x0]
c001dad0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001dad7:	83 e0 10             	and    eax,0x10
c001dada:	74 14                	je     c001daf0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001dadc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001dae3:	83 c8 08             	or     eax,0x8
c001dae6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001daed:	8d 76 00             	lea    esi,[esi+0x0]
c001daf0:	83 ec 0c             	sub    esp,0xc
c001daf3:	68 28 02 00 00       	push   0x228
c001daf8:	e8 be 25 ff ff       	call   c00100bb <malloc>
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	89 c2                	mov    edx,eax
c001db02:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001db09:	89 10                	mov    DWORD PTR [eax],edx
c001db0b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001db13:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001db1a:	8b 00                	mov    eax,DWORD PTR [eax]
c001db1c:	83 ec 04             	sub    esp,0x4
c001db1f:	52                   	push   edx
c001db20:	8d 54 24 10          	lea    edx,[esp+0x10]
c001db24:	52                   	push   edx
c001db25:	50                   	push   eax
c001db26:	e8 18 63 fe ff       	call   c0003e43 <f_open>
c001db2b:	83 c4 10             	add    esp,0x10
c001db2e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001db35:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001db3d:	74 09                	je     c001db48 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001db3f:	b8 01 00 00 00       	mov    eax,0x1
c001db44:	eb 0a                	jmp    c001db50 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001db46:	66 90                	xchg   ax,ax
c001db48:	b8 00 00 00 00       	mov    eax,0x0
c001db4d:	8d 76 00             	lea    esi,[esi+0x0]
c001db50:	81 c4 1c 01 00 00    	add    esp,0x11c
c001db56:	c3                   	ret    
c001db57:	90                   	nop

c001db58 <FAT::openDir(char const*, void**)>:
c001db58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001db5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001db66:	74 0c                	je     c001db74 <FAT::openDir(char const*, void**)+0x1c>
c001db68:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001db70:	75 0e                	jne    c001db80 <FAT::openDir(char const*, void**)+0x28>
c001db72:	66 90                	xchg   ax,ax
c001db74:	b8 04 00 00 00       	mov    eax,0x4
c001db79:	e9 82 00 00 00       	jmp    c001dc00 <FAT::openDir(char const*, void**)+0xa8>
c001db7e:	66 90                	xchg   ax,ax
c001db80:	83 ec 08             	sub    esp,0x8
c001db83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001db8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001db8e:	50                   	push   eax
c001db8f:	e8 ac 2a fe ff       	call   c0000640 <strcpy>
c001db94:	83 c4 10             	add    esp,0x10
c001db97:	83 ec 08             	sub    esp,0x8
c001db9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001db9e:	50                   	push   eax
c001db9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001dba6:	e8 f9 fd ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001dbab:	83 c4 10             	add    esp,0x10
c001dbae:	83 ec 0c             	sub    esp,0xc
c001dbb1:	6a 30                	push   0x30
c001dbb3:	e8 03 25 ff ff       	call   c00100bb <malloc>
c001dbb8:	83 c4 10             	add    esp,0x10
c001dbbb:	89 c2                	mov    edx,eax
c001dbbd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001dbc4:	89 10                	mov    DWORD PTR [eax],edx
c001dbc6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001dbcd:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbcf:	83 ec 08             	sub    esp,0x8
c001dbd2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001dbd6:	52                   	push   edx
c001dbd7:	50                   	push   eax
c001dbd8:	e8 15 6c fe ff       	call   c00047f2 <f_opendir>
c001dbdd:	83 c4 10             	add    esp,0x10
c001dbe0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001dbe7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001dbef:	74 07                	je     c001dbf8 <FAT::openDir(char const*, void**)+0xa0>
c001dbf1:	b8 01 00 00 00       	mov    eax,0x1
c001dbf6:	eb 08                	jmp    c001dc00 <FAT::openDir(char const*, void**)+0xa8>
c001dbf8:	b8 00 00 00 00       	mov    eax,0x0
c001dbfd:	8d 76 00             	lea    esi,[esi+0x0]
c001dc00:	81 c4 1c 01 00 00    	add    esp,0x11c
c001dc06:	c3                   	ret    
c001dc07:	90                   	nop

c001dc08 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001dc08:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001dc0e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001dc16:	75 0c                	jne    c001dc24 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001dc18:	b8 04 00 00 00       	mov    eax,0x4
c001dc1d:	e9 d6 00 00 00       	jmp    c001dcf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001dc22:	66 90                	xchg   ax,ax
c001dc24:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001dc2c:	75 0a                	jne    c001dc38 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001dc2e:	b8 04 00 00 00       	mov    eax,0x4
c001dc33:	e9 c0 00 00 00       	jmp    c001dcf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001dc38:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001dc40:	75 0a                	jne    c001dc4c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001dc42:	b8 04 00 00 00       	mov    eax,0x4
c001dc47:	e9 ac 00 00 00       	jmp    c001dcf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001dc4c:	83 ec 08             	sub    esp,0x8
c001dc4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001dc56:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001dc5d:	50                   	push   eax
c001dc5e:	e8 dd 29 fe ff       	call   c0000640 <strcpy>
c001dc63:	83 c4 10             	add    esp,0x10
c001dc66:	83 ec 08             	sub    esp,0x8
c001dc69:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001dc70:	50                   	push   eax
c001dc71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001dc78:	e8 27 fd ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001dc7d:	83 c4 10             	add    esp,0x10
c001dc80:	83 ec 08             	sub    esp,0x8
c001dc83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001dc87:	50                   	push   eax
c001dc88:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001dc8f:	50                   	push   eax
c001dc90:	e8 dc 6c fe ff       	call   c0004971 <f_stat>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001dc9f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001dca6:	85 c0                	test   eax,eax
c001dca8:	74 0a                	je     c001dcb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001dcaa:	83 f8 04             	cmp    eax,0x4
c001dcad:	74 39                	je     c001dce8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001dcaf:	eb 3f                	jmp    c001dcf0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001dcb1:	8d 76 00             	lea    esi,[esi+0x0]
c001dcb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dcb8:	0f b6 c0             	movzx  eax,al
c001dcbb:	83 e0 10             	and    eax,0x10
c001dcbe:	0f 95 c2             	setne  dl
c001dcc1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001dcc8:	88 10                	mov    BYTE PTR [eax],dl
c001dcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcce:	ba 00 00 00 00       	mov    edx,0x0
c001dcd3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001dcda:	89 01                	mov    DWORD PTR [ecx],eax
c001dcdc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dcdf:	b8 00 00 00 00       	mov    eax,0x0
c001dce4:	eb 12                	jmp    c001dcf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001dce6:	66 90                	xchg   ax,ax
c001dce8:	b8 02 00 00 00       	mov    eax,0x2
c001dced:	eb 09                	jmp    c001dcf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001dcef:	90                   	nop
c001dcf0:	b8 01 00 00 00       	mov    eax,0x1
c001dcf5:	8d 76 00             	lea    esi,[esi+0x0]
c001dcf8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001dcfe:	c3                   	ret    
c001dcff:	90                   	nop

c001dd00 <FAT::unlink(char const*)>:
c001dd00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001dd06:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001dd0e:	75 08                	jne    c001dd18 <FAT::unlink(char const*)+0x18>
c001dd10:	b8 04 00 00 00       	mov    eax,0x4
c001dd15:	eb 61                	jmp    c001dd78 <FAT::unlink(char const*)+0x78>
c001dd17:	90                   	nop
c001dd18:	83 ec 08             	sub    esp,0x8
c001dd1b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001dd22:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dd26:	50                   	push   eax
c001dd27:	e8 14 29 fe ff       	call   c0000640 <strcpy>
c001dd2c:	83 c4 10             	add    esp,0x10
c001dd2f:	83 ec 08             	sub    esp,0x8
c001dd32:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dd36:	50                   	push   eax
c001dd37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001dd3e:	e8 61 fc ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001dd43:	83 c4 10             	add    esp,0x10
c001dd46:	83 ec 0c             	sub    esp,0xc
c001dd49:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dd4d:	50                   	push   eax
c001dd4e:	e8 90 6e fe ff       	call   c0004be3 <f_unlink>
c001dd53:	83 c4 10             	add    esp,0x10
c001dd56:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001dd5d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001dd64:	85 c0                	test   eax,eax
c001dd66:	75 08                	jne    c001dd70 <FAT::unlink(char const*)+0x70>
c001dd68:	b8 00 00 00 00       	mov    eax,0x0
c001dd6d:	eb 09                	jmp    c001dd78 <FAT::unlink(char const*)+0x78>
c001dd6f:	90                   	nop
c001dd70:	b8 01 00 00 00       	mov    eax,0x1
c001dd75:	8d 76 00             	lea    esi,[esi+0x0]
c001dd78:	81 c4 1c 01 00 00    	add    esp,0x11c
c001dd7e:	c3                   	ret    
c001dd7f:	90                   	nop

c001dd80 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001dd80:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001dd86:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001dd8d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001dd94:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001dd98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001dd9c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001dda4:	75 0a                	jne    c001ddb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001dda6:	b8 04 00 00 00       	mov    eax,0x4
c001ddab:	e9 7c 01 00 00       	jmp    c001df2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001ddb0:	83 ec 08             	sub    esp,0x8
c001ddb3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ddba:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ddbe:	50                   	push   eax
c001ddbf:	e8 7c 28 fe ff       	call   c0000640 <strcpy>
c001ddc4:	83 c4 10             	add    esp,0x10
c001ddc7:	83 ec 08             	sub    esp,0x8
c001ddca:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ddce:	50                   	push   eax
c001ddcf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ddd6:	e8 c9 fb ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001dddb:	83 c4 10             	add    esp,0x10
c001ddde:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001dde6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ddee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ddf3:	83 e0 01             	and    eax,0x1
c001ddf6:	74 14                	je     c001de0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001ddf8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ddff:	83 c8 01             	or     eax,0x1
c001de02:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001de09:	8d 76 00             	lea    esi,[esi+0x0]
c001de0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001de11:	83 e0 02             	and    eax,0x2
c001de14:	74 12                	je     c001de28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001de16:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001de1d:	83 c8 20             	or     eax,0x20
c001de20:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001de27:	90                   	nop
c001de28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001de2d:	83 e0 04             	and    eax,0x4
c001de30:	74 12                	je     c001de44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001de32:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001de39:	83 c8 04             	or     eax,0x4
c001de3c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001de43:	90                   	nop
c001de44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001de49:	83 e0 08             	and    eax,0x8
c001de4c:	74 12                	je     c001de60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001de4e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001de55:	83 c8 02             	or     eax,0x2
c001de58:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001de5f:	90                   	nop
c001de60:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de65:	83 e0 01             	and    eax,0x1
c001de68:	74 12                	je     c001de7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001de6a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001de71:	83 c8 01             	or     eax,0x1
c001de74:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001de7b:	90                   	nop
c001de7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de81:	83 e0 02             	and    eax,0x2
c001de84:	74 12                	je     c001de98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001de86:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001de8d:	83 c8 20             	or     eax,0x20
c001de90:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001de97:	90                   	nop
c001de98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de9d:	83 e0 04             	and    eax,0x4
c001dea0:	74 12                	je     c001deb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001dea2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001dea9:	83 c8 04             	or     eax,0x4
c001deac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001deb3:	90                   	nop
c001deb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001deb9:	83 e0 08             	and    eax,0x8
c001debc:	74 12                	je     c001ded0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001debe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001dec5:	83 c8 02             	or     eax,0x2
c001dec8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001decf:	90                   	nop
c001ded0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001ded7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001dede:	09 d0                	or     eax,edx
c001dee0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001dee7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001deef:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001def7:	83 ec 04             	sub    esp,0x4
c001defa:	52                   	push   edx
c001defb:	50                   	push   eax
c001defc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001df00:	50                   	push   eax
c001df01:	e8 52 71 fe ff       	call   c0005058 <f_chmod>
c001df06:	83 c4 10             	add    esp,0x10
c001df09:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001df10:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001df17:	85 c0                	test   eax,eax
c001df19:	75 09                	jne    c001df24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001df1b:	b8 00 00 00 00       	mov    eax,0x0
c001df20:	eb 0a                	jmp    c001df2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001df22:	66 90                	xchg   ax,ax
c001df24:	b8 01 00 00 00       	mov    eax,0x1
c001df29:	8d 76 00             	lea    esi,[esi+0x0]
c001df2c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001df32:	c3                   	ret    
c001df33:	90                   	nop

c001df34 <FAT::rename(char const*, char const*)>:
c001df34:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001df3a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001df42:	74 0c                	je     c001df50 <FAT::rename(char const*, char const*)+0x1c>
c001df44:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001df4c:	75 0e                	jne    c001df5c <FAT::rename(char const*, char const*)+0x28>
c001df4e:	66 90                	xchg   ax,ax
c001df50:	b8 04 00 00 00       	mov    eax,0x4
c001df55:	e9 9e 00 00 00       	jmp    c001dff8 <FAT::rename(char const*, char const*)+0xc4>
c001df5a:	66 90                	xchg   ax,ax
c001df5c:	83 ec 08             	sub    esp,0x8
c001df5f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001df66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001df6d:	50                   	push   eax
c001df6e:	e8 cd 26 fe ff       	call   c0000640 <strcpy>
c001df73:	83 c4 10             	add    esp,0x10
c001df76:	83 ec 08             	sub    esp,0x8
c001df79:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001df80:	50                   	push   eax
c001df81:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001df88:	e8 17 fa ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	83 ec 08             	sub    esp,0x8
c001df93:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001df9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001df9e:	50                   	push   eax
c001df9f:	e8 9c 26 fe ff       	call   c0000640 <strcpy>
c001dfa4:	83 c4 10             	add    esp,0x10
c001dfa7:	83 ec 08             	sub    esp,0x8
c001dfaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dfae:	50                   	push   eax
c001dfaf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001dfb6:	e8 e9 f9 ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001dfbb:	83 c4 10             	add    esp,0x10
c001dfbe:	83 ec 08             	sub    esp,0x8
c001dfc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dfc5:	50                   	push   eax
c001dfc6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001dfcd:	50                   	push   eax
c001dfce:	e8 cd 6e fe ff       	call   c0004ea0 <f_rename>
c001dfd3:	83 c4 10             	add    esp,0x10
c001dfd6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001dfdd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001dfe4:	85 c0                	test   eax,eax
c001dfe6:	75 08                	jne    c001dff0 <FAT::rename(char const*, char const*)+0xbc>
c001dfe8:	b8 00 00 00 00       	mov    eax,0x0
c001dfed:	eb 09                	jmp    c001dff8 <FAT::rename(char const*, char const*)+0xc4>
c001dfef:	90                   	nop
c001dff0:	b8 01 00 00 00       	mov    eax,0x1
c001dff5:	8d 76 00             	lea    esi,[esi+0x0]
c001dff8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001dffe:	c3                   	ret    
c001dfff:	90                   	nop

c001e000 <FAT::mkdir(char const*)>:
c001e000:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e006:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e00e:	75 08                	jne    c001e018 <FAT::mkdir(char const*)+0x18>
c001e010:	b8 04 00 00 00       	mov    eax,0x4
c001e015:	eb 61                	jmp    c001e078 <FAT::mkdir(char const*)+0x78>
c001e017:	90                   	nop
c001e018:	83 ec 08             	sub    esp,0x8
c001e01b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e022:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e026:	50                   	push   eax
c001e027:	e8 14 26 fe ff       	call   c0000640 <strcpy>
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	83 ec 08             	sub    esp,0x8
c001e032:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e036:	50                   	push   eax
c001e037:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e03e:	e8 61 f9 ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001e043:	83 c4 10             	add    esp,0x10
c001e046:	83 ec 0c             	sub    esp,0xc
c001e049:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e04d:	50                   	push   eax
c001e04e:	e8 b2 6c fe ff       	call   c0004d05 <f_mkdir>
c001e053:	83 c4 10             	add    esp,0x10
c001e056:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e05d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001e064:	85 c0                	test   eax,eax
c001e066:	75 08                	jne    c001e070 <FAT::mkdir(char const*)+0x70>
c001e068:	b8 00 00 00 00       	mov    eax,0x0
c001e06d:	eb 09                	jmp    c001e078 <FAT::mkdir(char const*)+0x78>
c001e06f:	90                   	nop
c001e070:	b8 01 00 00 00       	mov    eax,0x1
c001e075:	8d 76 00             	lea    esi,[esi+0x0]
c001e078:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e07e:	c3                   	ret    
c001e07f:	90                   	nop

c001e080 <FAT::exists(char const*)>:
c001e080:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e086:	83 ec 08             	sub    esp,0x8
c001e089:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e090:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e094:	50                   	push   eax
c001e095:	e8 a6 25 fe ff       	call   c0000640 <strcpy>
c001e09a:	83 c4 10             	add    esp,0x10
c001e09d:	83 ec 08             	sub    esp,0x8
c001e0a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e0a4:	50                   	push   eax
c001e0a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e0ac:	e8 f3 f8 ff ff       	call   c001d9a4 <FAT::fixFilepath(char*)>
c001e0b1:	83 c4 10             	add    esp,0x10
c001e0b4:	83 ec 08             	sub    esp,0x8
c001e0b7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001e0be:	50                   	push   eax
c001e0bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e0c3:	50                   	push   eax
c001e0c4:	e8 a8 68 fe ff       	call   c0004971 <f_stat>
c001e0c9:	83 c4 10             	add    esp,0x10
c001e0cc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001e0d3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001e0da:	85 c0                	test   eax,eax
c001e0dc:	75 06                	jne    c001e0e4 <FAT::exists(char const*)+0x64>
c001e0de:	b0 01                	mov    al,0x1
c001e0e0:	eb 06                	jmp    c001e0e8 <FAT::exists(char const*)+0x68>
c001e0e2:	66 90                	xchg   ax,ax
c001e0e4:	b0 00                	mov    al,0x0
c001e0e6:	66 90                	xchg   ax,ax
c001e0e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001e0ee:	c3                   	ret    
c001e0ef:	90                   	nop

c001e0f0 <isoReadDiscSectorHelper>:
c001e0f0:	83 ec 2c             	sub    esp,0x2c
c001e0f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e0fb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001e100:	83 e8 41             	sub    eax,0x41
c001e103:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001e10a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e10e:	ba 00 00 00 00       	mov    edx,0x0
c001e113:	83 ec 0c             	sub    esp,0xc
c001e116:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e11a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e11e:	52                   	push   edx
c001e11f:	50                   	push   eax
c001e120:	51                   	push   ecx
c001e121:	e8 98 d1 fe ff       	call   c000b2be <LogicalDisk::read(unsigned long long, int, void*)>
c001e126:	83 c4 20             	add    esp,0x20
c001e129:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e12d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001e132:	74 0c                	je     c001e140 <isoReadDiscSectorHelper+0x50>
c001e134:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e138:	c1 e0 0b             	shl    eax,0xb
c001e13b:	eb 0b                	jmp    c001e148 <isoReadDiscSectorHelper+0x58>
c001e13d:	8d 76 00             	lea    esi,[esi+0x0]
c001e140:	b8 00 00 00 00       	mov    eax,0x0
c001e145:	8d 76 00             	lea    esi,[esi+0x0]
c001e148:	83 c4 2c             	add    esp,0x2c
c001e14b:	c3                   	ret    

c001e14c <iso_kprintf>:
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	83 ec 08             	sub    esp,0x8
c001e152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e156:	68 a4 b1 02 c0       	push   0xc002b1a4
c001e15b:	e8 1c 8e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e160:	83 c4 10             	add    esp,0x10
c001e163:	90                   	nop
c001e164:	83 c4 0c             	add    esp,0xc
c001e167:	c3                   	ret    

c001e168 <iso_kprintfd>:
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	83 ec 08             	sub    esp,0x8
c001e16e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e172:	68 62 a7 02 c0       	push   0xc002a762
c001e177:	e8 00 8e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e17c:	83 c4 10             	add    esp,0x10
c001e17f:	90                   	nop
c001e180:	83 c4 0c             	add    esp,0xc
c001e183:	c3                   	ret    

c001e184 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001e184:	b8 08 00 00 00       	mov    eax,0x8
c001e189:	c3                   	ret    

c001e18a <ISO9660::truncate(void*, unsigned long long)>:
c001e18a:	b8 01 00 00 00       	mov    eax,0x1
c001e18f:	c3                   	ret    

c001e190 <ISO9660::getName()>:
c001e190:	b8 a4 b5 02 c0       	mov    eax,0xc002b5a4
c001e195:	c3                   	ret    

c001e196 <ISO9660::closeDir(void*)>:
c001e196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e19a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e19c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001e19f:	90                   	nop

c001e1a0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001e1a0:	b8 01 00 00 00       	mov    eax,0x1
c001e1a5:	c3                   	ret    

c001e1a6 <ISO9660::unlink(char const*)>:
c001e1a6:	b8 01 00 00 00       	mov    eax,0x1
c001e1ab:	c3                   	ret    

c001e1ac <ISO9660::write(void*, unsigned long, void*, int*)>:
c001e1ac:	b8 03 00 00 00       	mov    eax,0x3
c001e1b1:	c3                   	ret    

c001e1b2 <ISO9660::rename(char const*, char const*)>:
c001e1b2:	b8 01 00 00 00       	mov    eax,0x1
c001e1b7:	c3                   	ret    

c001e1b8 <ISO9660::mkdir(char const*)>:
c001e1b8:	b8 01 00 00 00       	mov    eax,0x1
c001e1bd:	c3                   	ret    

c001e1be <ISO9660::~ISO9660()>:
c001e1be:	83 ec 0c             	sub    esp,0xc
c001e1c1:	ba e4 b6 02 c0       	mov    edx,0xc002b6e4
c001e1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ca:	89 10                	mov    DWORD PTR [eax],edx
c001e1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d0:	83 ec 0c             	sub    esp,0xc
c001e1d3:	50                   	push   eax
c001e1d4:	e8 5f a4 fe ff       	call   c0008638 <Filesystem::~Filesystem()>
c001e1d9:	83 c4 10             	add    esp,0x10
c001e1dc:	90                   	nop
c001e1dd:	83 c4 0c             	add    esp,0xc
c001e1e0:	c3                   	ret    
c001e1e1:	90                   	nop

c001e1e2 <ISO9660::~ISO9660()>:
c001e1e2:	83 ec 0c             	sub    esp,0xc
c001e1e5:	83 ec 0c             	sub    esp,0xc
c001e1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1ec:	e8 cd ff ff ff       	call   c001e1be <ISO9660::~ISO9660()>
c001e1f1:	83 c4 10             	add    esp,0x10
c001e1f4:	83 ec 08             	sub    esp,0x8
c001e1f7:	6a 08                	push   0x8
c001e1f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1fd:	e8 c6 f9 fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c001e202:	83 c4 10             	add    esp,0x10
c001e205:	83 c4 0c             	add    esp,0xc
c001e208:	c3                   	ret    
c001e209:	90                   	nop

c001e20a <ISO9660::exists(char const*)>:
c001e20a:	83 ec 18             	sub    esp,0x18
c001e20d:	68 bf b5 02 c0       	push   0xc002b5bf
c001e212:	e8 f9 22 ff ff       	call   c0010510 <KePanic(char const*)>
c001e217:	31 c0                	xor    eax,eax
c001e219:	83 c4 1c             	add    esp,0x1c
c001e21c:	c3                   	ret    
c001e21d:	90                   	nop

c001e21e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001e21e:	56                   	push   esi
c001e21f:	53                   	push   ebx
c001e220:	53                   	push   ebx
c001e221:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e225:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e229:	85 db                	test   ebx,ebx
c001e22b:	0f 84 ca 00 00 00    	je     c001e2fb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001e231:	85 f6                	test   esi,esi
c001e233:	0f 84 c2 00 00 00    	je     c001e2fb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001e239:	b8 03 00 00 00       	mov    eax,0x3
c001e23e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001e243:	0f 85 b7 00 00 00    	jne    c001e300 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001e249:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001e24b:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e252:	38 0d 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,cl
c001e258:	74 1b                	je     c001e275 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001e25a:	85 c0                	test   eax,eax
c001e25c:	74 10                	je     c001e26e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001e25e:	83 ec 0c             	sub    esp,0xc
c001e261:	68 dd b5 02 c0       	push   0xc002b5dd
c001e266:	e8 a5 22 ff ff       	call   c0010510 <KePanic(char const*)>
c001e26b:	83 c4 10             	add    esp,0x10
c001e26e:	8a 03                	mov    al,BYTE PTR [ebx]
c001e270:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001e275:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e278:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e27f:	85 c0                	test   eax,eax
c001e281:	74 09                	je     c001e28c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001e283:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001e28a:	74 48                	je     c001e2d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001e28c:	83 ec 0c             	sub    esp,0xc
c001e28f:	68 ed b5 02 c0       	push   0xc002b5ed
c001e294:	e8 e3 8c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e299:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e29c:	83 c4 10             	add    esp,0x10
c001e29f:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e2a6:	85 c0                	test   eax,eax
c001e2a8:	74 17                	je     c001e2c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001e2aa:	83 ec 0c             	sub    esp,0xc
c001e2ad:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001e2b4:	68 0d b6 02 c0       	push   0xc002b60d
c001e2b9:	e8 be 8c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e2be:	83 c4 10             	add    esp,0x10
c001e2c1:	83 ec 0c             	sub    esp,0xc
c001e2c4:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e2cb:	50                   	push   eax
c001e2cc:	e8 5d 89 fe ff       	call   c0006c2e <init_percd>
c001e2d1:	83 c4 10             	add    esp,0x10
c001e2d4:	83 c3 03             	add    ebx,0x3
c001e2d7:	51                   	push   ecx
c001e2d8:	51                   	push   ecx
c001e2d9:	6a 00                	push   0x0
c001e2db:	53                   	push   ebx
c001e2dc:	e8 14 84 fe ff       	call   c00066f5 <iso_open>
c001e2e1:	83 c4 10             	add    esp,0x10
c001e2e4:	89 c2                	mov    edx,eax
c001e2e6:	b8 01 00 00 00       	mov    eax,0x1
c001e2eb:	83 fa ff             	cmp    edx,0xffffffff
c001e2ee:	74 10                	je     c001e300 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001e2f0:	83 c2 32             	add    edx,0x32
c001e2f3:	31 c0                	xor    eax,eax
c001e2f5:	01 d2                	add    edx,edx
c001e2f7:	89 16                	mov    DWORD PTR [esi],edx
c001e2f9:	eb 05                	jmp    c001e300 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001e2fb:	b8 04 00 00 00       	mov    eax,0x4
c001e300:	5a                   	pop    edx
c001e301:	5b                   	pop    ebx
c001e302:	5e                   	pop    esi
c001e303:	c3                   	ret    

c001e304 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001e304:	53                   	push   ebx
c001e305:	83 ec 08             	sub    esp,0x8
c001e308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e30c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e310:	85 c0                	test   eax,eax
c001e312:	74 2d                	je     c001e341 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001e314:	85 db                	test   ebx,ebx
c001e316:	74 29                	je     c001e341 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001e318:	b9 02 00 00 00       	mov    ecx,0x2
c001e31d:	52                   	push   edx
c001e31e:	99                   	cdq    
c001e31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e323:	f7 f9                	idiv   ecx
c001e325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e329:	83 e8 32             	sub    eax,0x32
c001e32c:	50                   	push   eax
c001e32d:	e8 6b 84 fe ff       	call   c000679d <iso_read>
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	89 03                	mov    DWORD PTR [ebx],eax
c001e337:	09 d0                	or     eax,edx
c001e339:	0f 94 c0             	sete   al
c001e33c:	0f b6 c0             	movzx  eax,al
c001e33f:	eb 05                	jmp    c001e346 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001e341:	b8 04 00 00 00       	mov    eax,0x4
c001e346:	83 c4 08             	add    esp,0x8
c001e349:	5b                   	pop    ebx
c001e34a:	c3                   	ret    
c001e34b:	90                   	nop

c001e34c <ISO9660::seek(void*, unsigned long long)>:
c001e34c:	57                   	push   edi
c001e34d:	56                   	push   esi
c001e34e:	b8 04 00 00 00       	mov    eax,0x4
c001e353:	51                   	push   ecx
c001e354:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e358:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e35c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e360:	85 d2                	test   edx,edx
c001e362:	74 26                	je     c001e38a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001e364:	6a 00                	push   0x0
c001e366:	b9 02 00 00 00       	mov    ecx,0x2
c001e36b:	57                   	push   edi
c001e36c:	89 d0                	mov    eax,edx
c001e36e:	56                   	push   esi
c001e36f:	99                   	cdq    
c001e370:	f7 f9                	idiv   ecx
c001e372:	83 e8 32             	sub    eax,0x32
c001e375:	50                   	push   eax
c001e376:	e8 38 85 fe ff       	call   c00068b3 <iso_seek>
c001e37b:	83 c4 10             	add    esp,0x10
c001e37e:	31 f0                	xor    eax,esi
c001e380:	31 fa                	xor    edx,edi
c001e382:	09 d0                	or     eax,edx
c001e384:	0f 95 c0             	setne  al
c001e387:	0f b6 c0             	movzx  eax,al
c001e38a:	5a                   	pop    edx
c001e38b:	5e                   	pop    esi
c001e38c:	5f                   	pop    edi
c001e38d:	c3                   	ret    

c001e38e <ISO9660::tell(void*, unsigned long long*)>:
c001e38e:	53                   	push   ebx
c001e38f:	83 ec 08             	sub    esp,0x8
c001e392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e396:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e39a:	85 c0                	test   eax,eax
c001e39c:	74 24                	je     c001e3c2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001e39e:	85 db                	test   ebx,ebx
c001e3a0:	74 20                	je     c001e3c2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001e3a2:	83 ec 0c             	sub    esp,0xc
c001e3a5:	b9 02 00 00 00       	mov    ecx,0x2
c001e3aa:	99                   	cdq    
c001e3ab:	f7 f9                	idiv   ecx
c001e3ad:	83 e8 32             	sub    eax,0x32
c001e3b0:	50                   	push   eax
c001e3b1:	e8 81 85 fe ff       	call   c0006937 <iso_tell>
c001e3b6:	83 c4 10             	add    esp,0x10
c001e3b9:	89 03                	mov    DWORD PTR [ebx],eax
c001e3bb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001e3be:	31 c0                	xor    eax,eax
c001e3c0:	eb 05                	jmp    c001e3c7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001e3c2:	b8 04 00 00 00       	mov    eax,0x4
c001e3c7:	83 c4 08             	add    esp,0x8
c001e3ca:	5b                   	pop    ebx
c001e3cb:	c3                   	ret    

c001e3cc <ISO9660::stat(void*, unsigned long long*)>:
c001e3cc:	53                   	push   ebx
c001e3cd:	83 ec 14             	sub    esp,0x14
c001e3d0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e3d4:	68 31 b6 02 c0       	push   0xc002b631
c001e3d9:	e8 9e 8b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e3de:	83 c4 10             	add    esp,0x10
c001e3e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e3e6:	74 2c                	je     c001e414 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001e3e8:	85 db                	test   ebx,ebx
c001e3ea:	74 28                	je     c001e414 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	b9 02 00 00 00       	mov    ecx,0x2
c001e3f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3f8:	99                   	cdq    
c001e3f9:	f7 f9                	idiv   ecx
c001e3fb:	83 e8 32             	sub    eax,0x32
c001e3fe:	50                   	push   eax
c001e3ff:	e8 64 85 fe ff       	call   c0006968 <iso_total>
c001e404:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e40b:	89 03                	mov    DWORD PTR [ebx],eax
c001e40d:	83 c4 10             	add    esp,0x10
c001e410:	31 c0                	xor    eax,eax
c001e412:	eb 05                	jmp    c001e419 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001e414:	b8 04 00 00 00       	mov    eax,0x4
c001e419:	83 c4 08             	add    esp,0x8
c001e41c:	5b                   	pop    ebx
c001e41d:	c3                   	ret    

c001e41e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001e41e:	55                   	push   ebp
c001e41f:	57                   	push   edi
c001e420:	56                   	push   esi
c001e421:	53                   	push   ebx
c001e422:	83 ec 18             	sub    esp,0x18
c001e425:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e429:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001e42d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e431:	68 39 b6 02 c0       	push   0xc002b639
c001e436:	e8 41 8b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e43b:	83 c4 10             	add    esp,0x10
c001e43e:	85 ff                	test   edi,edi
c001e440:	0f 94 c0             	sete   al
c001e443:	85 f6                	test   esi,esi
c001e445:	0f 94 c2             	sete   dl
c001e448:	09 d0                	or     eax,edx
c001e44a:	a8 01                	test   al,0x1
c001e44c:	0f 85 dd 00 00 00    	jne    c001e52f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001e452:	85 db                	test   ebx,ebx
c001e454:	0f 84 d5 00 00 00    	je     c001e52f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001e45a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e45d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001e463:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001e46a:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e471:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001e473:	38 0d 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,cl
c001e479:	74 1b                	je     c001e496 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001e47b:	85 c0                	test   eax,eax
c001e47d:	74 10                	je     c001e48f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001e47f:	83 ec 0c             	sub    esp,0xc
c001e482:	68 dd b5 02 c0       	push   0xc002b5dd
c001e487:	e8 84 20 ff ff       	call   c0010510 <KePanic(char const*)>
c001e48c:	83 c4 10             	add    esp,0x10
c001e48f:	8a 03                	mov    al,BYTE PTR [ebx]
c001e491:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001e496:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e499:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e4a0:	85 c0                	test   eax,eax
c001e4a2:	74 09                	je     c001e4ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001e4a4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001e4ab:	74 51                	je     c001e4fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001e4ad:	83 ec 0c             	sub    esp,0xc
c001e4b0:	68 41 b6 02 c0       	push   0xc002b641
c001e4b5:	e8 c2 8a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e4ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	83 3c 85 dc 29 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffcd624],0x0
c001e4c8:	74 21                	je     c001e4eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001e4ca:	83 ec 0c             	sub    esp,0xc
c001e4cd:	68 61 b6 02 c0       	push   0xc002b661
c001e4d2:	e8 a5 8a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e4d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e4da:	83 c4 10             	add    esp,0x10
c001e4dd:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e4e4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001e4eb:	83 ec 0c             	sub    esp,0xc
c001e4ee:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e4f5:	50                   	push   eax
c001e4f6:	e8 33 87 fe ff       	call   c0006c2e <init_percd>
c001e4fb:	83 c4 10             	add    esp,0x10
c001e4fe:	83 c3 03             	add    ebx,0x3
c001e501:	52                   	push   edx
c001e502:	52                   	push   edx
c001e503:	6a 00                	push   0x0
c001e505:	53                   	push   ebx
c001e506:	e8 ea 81 fe ff       	call   c00066f5 <iso_open>
c001e50b:	83 c4 10             	add    esp,0x10
c001e50e:	89 c5                	mov    ebp,eax
c001e510:	83 f8 ff             	cmp    eax,0xffffffff
c001e513:	75 21                	jne    c001e536 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001e515:	50                   	push   eax
c001e516:	50                   	push   eax
c001e517:	6a 01                	push   0x1
c001e519:	53                   	push   ebx
c001e51a:	e8 d6 81 fe ff       	call   c00066f5 <iso_open>
c001e51f:	83 c4 10             	add    esp,0x10
c001e522:	ba 02 00 00 00       	mov    edx,0x2
c001e527:	40                   	inc    eax
c001e528:	74 2b                	je     c001e555 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001e52a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001e52d:	eb 24                	jmp    c001e553 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001e52f:	ba 04 00 00 00       	mov    edx,0x4
c001e534:	eb 1f                	jmp    c001e555 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001e536:	83 ec 0c             	sub    esp,0xc
c001e539:	50                   	push   eax
c001e53a:	e8 29 84 fe ff       	call   c0006968 <iso_total>
c001e53f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001e546:	89 07                	mov    DWORD PTR [edi],eax
c001e548:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001e54b:	e8 2f 82 fe ff       	call   c000677f <iso_close>
c001e550:	83 c4 10             	add    esp,0x10
c001e553:	31 d2                	xor    edx,edx
c001e555:	83 c4 0c             	add    esp,0xc
c001e558:	89 d0                	mov    eax,edx
c001e55a:	5b                   	pop    ebx
c001e55b:	5e                   	pop    esi
c001e55c:	5f                   	pop    edi
c001e55d:	5d                   	pop    ebp
c001e55e:	c3                   	ret    
c001e55f:	90                   	nop

c001e560 <ISO9660::close(void*)>:
c001e560:	83 ec 0c             	sub    esp,0xc
c001e563:	b8 04 00 00 00       	mov    eax,0x4
c001e568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e56c:	85 d2                	test   edx,edx
c001e56e:	74 1b                	je     c001e58b <ISO9660::close(void*)+0x2b>
c001e570:	83 ec 0c             	sub    esp,0xc
c001e573:	b9 02 00 00 00       	mov    ecx,0x2
c001e578:	89 d0                	mov    eax,edx
c001e57a:	99                   	cdq    
c001e57b:	f7 f9                	idiv   ecx
c001e57d:	83 e8 32             	sub    eax,0x32
c001e580:	50                   	push   eax
c001e581:	e8 f9 81 fe ff       	call   c000677f <iso_close>
c001e586:	83 c4 10             	add    esp,0x10
c001e589:	31 c0                	xor    eax,eax
c001e58b:	83 c4 0c             	add    esp,0xc
c001e58e:	c3                   	ret    
c001e58f:	90                   	nop

c001e590 <ISO9660::openDir(char const*, void**)>:
c001e590:	56                   	push   esi
c001e591:	53                   	push   ebx
c001e592:	50                   	push   eax
c001e593:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e597:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e59b:	85 db                	test   ebx,ebx
c001e59d:	0f 84 bd 00 00 00    	je     c001e660 <ISO9660::openDir(char const*, void**)+0xd0>
c001e5a3:	85 f6                	test   esi,esi
c001e5a5:	0f 84 b5 00 00 00    	je     c001e660 <ISO9660::openDir(char const*, void**)+0xd0>
c001e5ab:	8a 13                	mov    dl,BYTE PTR [ebx]
c001e5ad:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e5b4:	38 15 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,dl
c001e5ba:	74 1b                	je     c001e5d7 <ISO9660::openDir(char const*, void**)+0x47>
c001e5bc:	85 c0                	test   eax,eax
c001e5be:	74 10                	je     c001e5d0 <ISO9660::openDir(char const*, void**)+0x40>
c001e5c0:	83 ec 0c             	sub    esp,0xc
c001e5c3:	68 dd b5 02 c0       	push   0xc002b5dd
c001e5c8:	e8 43 1f ff ff       	call   c0010510 <KePanic(char const*)>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	8a 03                	mov    al,BYTE PTR [ebx]
c001e5d2:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001e5d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e5da:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e5e1:	85 c0                	test   eax,eax
c001e5e3:	74 10                	je     c001e5f5 <ISO9660::openDir(char const*, void**)+0x65>
c001e5e5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001e5ec:	74 1a                	je     c001e608 <ISO9660::openDir(char const*, void**)+0x78>
c001e5ee:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001e5f5:	83 ec 0c             	sub    esp,0xc
c001e5f8:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e5ff:	50                   	push   eax
c001e600:	e8 29 86 fe ff       	call   c0006c2e <init_percd>
c001e605:	83 c4 10             	add    esp,0x10
c001e608:	83 c3 03             	add    ebx,0x3
c001e60b:	50                   	push   eax
c001e60c:	50                   	push   eax
c001e60d:	6a 01                	push   0x1
c001e60f:	53                   	push   ebx
c001e610:	e8 e0 80 fe ff       	call   c00066f5 <iso_open>
c001e615:	83 c4 10             	add    esp,0x10
c001e618:	89 c3                	mov    ebx,eax
c001e61a:	83 f8 ff             	cmp    eax,0xffffffff
c001e61d:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001e622:	75 1c                	jne    c001e640 <ISO9660::openDir(char const*, void**)+0xb0>
c001e624:	53                   	push   ebx
c001e625:	53                   	push   ebx
c001e626:	68 85 b6 02 c0       	push   0xc002b685
c001e62b:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e631:	e8 46 48 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001e636:	83 c4 10             	add    esp,0x10
c001e639:	b8 01 00 00 00       	mov    eax,0x1
c001e63e:	eb 25                	jmp    c001e665 <ISO9660::openDir(char const*, void**)+0xd5>
c001e640:	01 db                	add    ebx,ebx
c001e642:	51                   	push   ecx
c001e643:	83 c3 65             	add    ebx,0x65
c001e646:	51                   	push   ecx
c001e647:	68 98 b6 02 c0       	push   0xc002b698
c001e64c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e652:	e8 25 48 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001e657:	89 1e                	mov    DWORD PTR [esi],ebx
c001e659:	83 c4 10             	add    esp,0x10
c001e65c:	31 c0                	xor    eax,eax
c001e65e:	eb 05                	jmp    c001e665 <ISO9660::openDir(char const*, void**)+0xd5>
c001e660:	b8 04 00 00 00       	mov    eax,0x4
c001e665:	5a                   	pop    edx
c001e666:	5b                   	pop    ebx
c001e667:	5e                   	pop    esi
c001e668:	c3                   	ret    
c001e669:	90                   	nop

c001e66a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001e66a:	55                   	push   ebp
c001e66b:	57                   	push   edi
c001e66c:	56                   	push   esi
c001e66d:	53                   	push   ebx
c001e66e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e674:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001e67b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001e682:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001e68a:	0f 84 e7 00 00 00    	je     c001e777 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001e690:	85 db                	test   ebx,ebx
c001e692:	0f 84 df 00 00 00    	je     c001e777 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001e698:	83 ec 0c             	sub    esp,0xc
c001e69b:	68 ab b6 02 c0       	push   0xc002b6ab
c001e6a0:	e8 d7 88 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e6a5:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001e6ac:	b9 02 00 00 00       	mov    ecx,0x2
c001e6b1:	99                   	cdq    
c001e6b2:	f7 f9                	idiv   ecx
c001e6b4:	83 e8 32             	sub    eax,0x32
c001e6b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6ba:	e8 fb 82 fe ff       	call   c00069ba <iso_readdir>
c001e6bf:	83 c4 10             	add    esp,0x10
c001e6c2:	89 c6                	mov    esi,eax
c001e6c4:	85 c0                	test   eax,eax
c001e6c6:	75 37                	jne    c001e6ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001e6c8:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001e6cd:	56                   	push   esi
c001e6ce:	56                   	push   esi
c001e6cf:	68 b6 b6 02 c0       	push   0xc002b6b6
c001e6d4:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e6da:	e8 9d 47 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001e6df:	83 c4 0c             	add    esp,0xc
c001e6e2:	68 10 01 00 00       	push   0x110
c001e6e7:	6a 00                	push   0x0
c001e6e9:	57                   	push   edi
c001e6ea:	e8 01 1e fe ff       	call   c00004f0 <memset>
c001e6ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001e6f5:	83 c4 10             	add    esp,0x10
c001e6f8:	b8 01 00 00 00       	mov    eax,0x1
c001e6fd:	eb 7d                	jmp    c001e77c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001e6ff:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e705:	8d 68 08             	lea    ebp,[eax+0x8]
c001e708:	83 ec 0c             	sub    esp,0xc
c001e70b:	55                   	push   ebp
c001e70c:	e8 5f 1e fe ff       	call   c0000570 <strlen>
c001e711:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e719:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e71d:	83 c4 10             	add    esp,0x10
c001e720:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001e724:	75 0a                	jne    c001e730 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001e726:	b8 02 00 00 00       	mov    eax,0x2
c001e72b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001e72e:	74 05                	je     c001e735 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001e730:	b8 01 00 00 00       	mov    eax,0x1
c001e735:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e739:	50                   	push   eax
c001e73a:	50                   	push   eax
c001e73b:	55                   	push   ebp
c001e73c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e740:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001e744:	50                   	push   eax
c001e745:	e8 f6 1e fe ff       	call   c0000640 <strcpy>
c001e74a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001e751:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e753:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001e759:	5a                   	pop    edx
c001e75a:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001e75f:	59                   	pop    ecx
c001e760:	68 c9 b6 02 c0       	push   0xc002b6c9
c001e765:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e76b:	e8 0c 47 ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c001e770:	83 c4 10             	add    esp,0x10
c001e773:	31 c0                	xor    eax,eax
c001e775:	eb 05                	jmp    c001e77c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001e777:	b8 04 00 00 00       	mov    eax,0x4
c001e77c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e782:	5b                   	pop    ebx
c001e783:	5e                   	pop    esi
c001e784:	5f                   	pop    edi
c001e785:	5d                   	pop    ebp
c001e786:	c3                   	ret    

c001e787 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001e787:	57                   	push   edi
c001e788:	56                   	push   esi
c001e789:	53                   	push   ebx
c001e78a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e78e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e792:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e796:	39 35 84 55 03 c0    	cmp    DWORD PTR ds:0xc0035584,esi
c001e79c:	0f be cb             	movsx  ecx,bl
c001e79f:	75 0b                	jne    c001e7ac <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001e7a1:	0f be 05 a4 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a4
c001e7a8:	39 c8                	cmp    eax,ecx
c001e7aa:	74 47                	je     c001e7f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001e7ac:	83 ec 0c             	sub    esp,0xc
c001e7af:	31 d2                	xor    edx,edx
c001e7b1:	68 a0 55 03 c0       	push   0xc00355a0
c001e7b6:	6a 01                	push   0x1
c001e7b8:	52                   	push   edx
c001e7b9:	56                   	push   esi
c001e7ba:	ff 34 8d dc 29 03 c0 	push   DWORD PTR [ecx*4-0x3ffcd624]
c001e7c1:	e8 f8 ca fe ff       	call   c000b2be <LogicalDisk::read(unsigned long long, int, void*)>
c001e7c6:	83 c4 20             	add    esp,0x20
c001e7c9:	85 c0                	test   eax,eax
c001e7cb:	75 0e                	jne    c001e7db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001e7cd:	89 35 84 55 03 c0    	mov    DWORD PTR ds:0xc0035584,esi
c001e7d3:	88 1d a4 d8 02 c0    	mov    BYTE PTR ds:0xc002d8a4,bl
c001e7d9:	eb 18                	jmp    c001e7f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001e7db:	50                   	push   eax
c001e7dc:	68 00 08 00 00       	push   0x800
c001e7e1:	6a 00                	push   0x0
c001e7e3:	57                   	push   edi
c001e7e4:	e8 07 1d fe ff       	call   c00004f0 <memset>
c001e7e9:	83 c4 10             	add    esp,0x10
c001e7ec:	b8 01 00 00 00       	mov    eax,0x1
c001e7f1:	eb 0e                	jmp    c001e801 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001e7f3:	be a0 55 03 c0       	mov    esi,0xc00355a0
c001e7f8:	b9 00 08 00 00       	mov    ecx,0x800
c001e7fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e7ff:	31 c0                	xor    eax,eax
c001e801:	5b                   	pop    ebx
c001e802:	5e                   	pop    esi
c001e803:	5f                   	pop    edi
c001e804:	c3                   	ret    
c001e805:	90                   	nop

c001e806 <ISO9660::tryMount(LogicalDisk*, int)>:
c001e806:	53                   	push   ebx
c001e807:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001e80d:	c7 05 84 55 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0035584,0xdeadbeef
c001e817:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001e81e:	8d 58 41             	lea    ebx,[eax+0x41]
c001e821:	0f be db             	movsx  ebx,bl
c001e824:	53                   	push   ebx
c001e825:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e829:	50                   	push   eax
c001e82a:	6a 10                	push   0x10
c001e82c:	e8 56 ff ff ff       	call   c001e787 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e831:	83 c4 10             	add    esp,0x10
c001e834:	31 d2                	xor    edx,edx
c001e836:	85 c0                	test   eax,eax
c001e838:	75 33                	jne    c001e86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e83a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001e83f:	75 2c                	jne    c001e86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e841:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001e846:	75 25                	jne    c001e86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e848:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001e84d:	75 1e                	jne    c001e86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e84f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001e854:	75 17                	jne    c001e86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e856:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001e85b:	75 10                	jne    c001e86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e85d:	83 ec 0c             	sub    esp,0xc
c001e860:	53                   	push   ebx
c001e861:	e8 c8 83 fe ff       	call   c0006c2e <init_percd>
c001e866:	83 c4 10             	add    esp,0x10
c001e869:	40                   	inc    eax
c001e86a:	0f 95 c2             	setne  dl
c001e86d:	88 d0                	mov    al,dl
c001e86f:	81 c4 08 08 00 00    	add    esp,0x808
c001e875:	5b                   	pop    ebx
c001e876:	c3                   	ret    
c001e877:	90                   	nop

c001e878 <ISO9660::ISO9660()>:
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e87f:	83 ec 0c             	sub    esp,0xc
c001e882:	50                   	push   eax
c001e883:	e8 8c 9d fe ff       	call   c0008614 <Filesystem::Filesystem()>
c001e888:	83 c4 10             	add    esp,0x10
c001e88b:	ba e4 b6 02 c0       	mov    edx,0xc002b6e4
c001e890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e894:	89 10                	mov    DWORD PTR [eax],edx
c001e896:	e8 a5 84 fe ff       	call   c0006d40 <fs_iso9660_init>
c001e89b:	90                   	nop
c001e89c:	83 c4 0c             	add    esp,0xc
c001e89f:	c3                   	ret    

c001e8a0 <SoundCard::beginPlayback()>:
c001e8a0:	c7 44 24 04 48 b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b748
c001e8a8:	e9 63 1c ff ff       	jmp    c0010510 <KePanic(char const*)>
c001e8ad:	90                   	nop

c001e8ae <SoundCard::stopPlayback()>:
c001e8ae:	c7 44 24 04 48 b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b748
c001e8b6:	e9 55 1c ff ff       	jmp    c0010510 <KePanic(char const*)>
c001e8bb:	90                   	nop

c001e8bc <SoundCard::SoundCard(char const*)>:
c001e8bc:	83 ec 1c             	sub    esp,0x1c
c001e8bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8c3:	83 ec 08             	sub    esp,0x8
c001e8c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e8ca:	50                   	push   eax
c001e8cb:	e8 32 bb fe ff       	call   c000a402 <Device::Device(char const*)>
c001e8d0:	83 c4 10             	add    esp,0x10
c001e8d3:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c001e8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8dc:	89 10                	mov    DWORD PTR [eax],edx
c001e8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8e2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001e8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8ed:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001e8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8fb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001e905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e909:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001e913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e917:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001e921:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e929:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001e92e:	7f 1a                	jg     c001e94a <SoundCard::SoundCard(char const*)+0x8e>
c001e930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e934:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e938:	83 c2 54             	add    edx,0x54
c001e93b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001e943:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e948:	eb df                	jmp    c001e929 <SoundCard::SoundCard(char const*)+0x6d>
c001e94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e94e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001e955:	90                   	nop
c001e956:	83 c4 1c             	add    esp,0x1c
c001e959:	c3                   	ret    

c001e95a <SoundCard::~SoundCard()>:
c001e95a:	83 ec 0c             	sub    esp,0xc
c001e95d:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c001e962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e966:	89 10                	mov    DWORD PTR [eax],edx
c001e968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96c:	83 ec 0c             	sub    esp,0xc
c001e96f:	50                   	push   eax
c001e970:	e8 2d b8 fe ff       	call   c000a1a2 <Device::~Device()>
c001e975:	83 c4 10             	add    esp,0x10
c001e978:	90                   	nop
c001e979:	83 c4 0c             	add    esp,0xc
c001e97c:	c3                   	ret    
c001e97d:	90                   	nop

c001e97e <SoundCard::~SoundCard()>:
c001e97e:	83 ec 0c             	sub    esp,0xc
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e988:	e8 cd ff ff ff       	call   c001e95a <SoundCard::~SoundCard()>
c001e98d:	83 c4 10             	add    esp,0x10
c001e990:	83 ec 08             	sub    esp,0x8
c001e993:	68 e8 01 00 00       	push   0x1e8
c001e998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e99c:	e8 27 f2 fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c001e9a1:	83 c4 10             	add    esp,0x10
c001e9a4:	83 c4 0c             	add    esp,0xc
c001e9a7:	c3                   	ret    

c001e9a8 <SoundCard::configureRates(int, int, int)>:
c001e9a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9ac:	31 c0                	xor    eax,eax
c001e9ae:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001e9b5:	75 20                	jne    c001e9d7 <SoundCard::configureRates(int, int, int)+0x2f>
c001e9b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9bb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001e9c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9c5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001e9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001e9d5:	b0 01                	mov    al,0x1
c001e9d7:	c3                   	ret    

c001e9d8 <SoundCard::getSamples16(int, short*)>:
c001e9d8:	55                   	push   ebp
c001e9d9:	57                   	push   edi
c001e9da:	31 ff                	xor    edi,edi
c001e9dc:	56                   	push   esi
c001e9dd:	53                   	push   ebx
c001e9de:	31 db                	xor    ebx,ebx
c001e9e0:	83 ec 10             	sub    esp,0x10
c001e9e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001e9e7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001e9eb:	8d 04 36             	lea    eax,[esi+esi*1]
c001e9ee:	50                   	push   eax
c001e9ef:	6a 00                	push   0x0
c001e9f1:	55                   	push   ebp
c001e9f2:	e8 f9 1a fe ff       	call   c00004f0 <memset>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9fe:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ea05:	85 c0                	test   eax,eax
c001ea07:	74 1b                	je     c001ea24 <SoundCard::getSamples16(int, short*)+0x4c>
c001ea09:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ea0d:	75 15                	jne    c001ea24 <SoundCard::getSamples16(int, short*)+0x4c>
c001ea0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ea13:	55                   	push   ebp
c001ea14:	56                   	push   esi
c001ea15:	50                   	push   eax
c001ea16:	e8 8d 03 00 00       	call   c001eda8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ea1b:	83 c4 10             	add    esp,0x10
c001ea1e:	39 c7                	cmp    edi,eax
c001ea20:	7d 02                	jge    c001ea24 <SoundCard::getSamples16(int, short*)+0x4c>
c001ea22:	89 c7                	mov    edi,eax
c001ea24:	43                   	inc    ebx
c001ea25:	83 fb 20             	cmp    ebx,0x20
c001ea28:	75 d0                	jne    c001e9fa <SoundCard::getSamples16(int, short*)+0x22>
c001ea2a:	83 c4 0c             	add    esp,0xc
c001ea2d:	89 f8                	mov    eax,edi
c001ea2f:	5b                   	pop    ebx
c001ea30:	5e                   	pop    esi
c001ea31:	5f                   	pop    edi
c001ea32:	5d                   	pop    ebp
c001ea33:	c3                   	ret    

c001ea34 <SoundCard::getSamples32(int, int*)>:
c001ea34:	55                   	push   ebp
c001ea35:	57                   	push   edi
c001ea36:	31 ff                	xor    edi,edi
c001ea38:	56                   	push   esi
c001ea39:	31 f6                	xor    esi,esi
c001ea3b:	53                   	push   ebx
c001ea3c:	83 ec 10             	sub    esp,0x10
c001ea3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea43:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ea47:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ea4b:	c1 e0 02             	shl    eax,0x2
c001ea4e:	50                   	push   eax
c001ea4f:	6a 00                	push   0x0
c001ea51:	55                   	push   ebp
c001ea52:	e8 99 1a fe ff       	call   c00004f0 <memset>
c001ea57:	83 c4 10             	add    esp,0x10
c001ea5a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ea61:	85 c0                	test   eax,eax
c001ea63:	74 1b                	je     c001ea80 <SoundCard::getSamples32(int, int*)+0x4c>
c001ea65:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ea69:	75 15                	jne    c001ea80 <SoundCard::getSamples32(int, int*)+0x4c>
c001ea6b:	53                   	push   ebx
c001ea6c:	55                   	push   ebp
c001ea6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea71:	50                   	push   eax
c001ea72:	e8 fd 03 00 00       	call   c001ee74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ea77:	83 c4 10             	add    esp,0x10
c001ea7a:	39 c6                	cmp    esi,eax
c001ea7c:	7d 02                	jge    c001ea80 <SoundCard::getSamples32(int, int*)+0x4c>
c001ea7e:	89 c6                	mov    esi,eax
c001ea80:	47                   	inc    edi
c001ea81:	83 ff 20             	cmp    edi,0x20
c001ea84:	75 d4                	jne    c001ea5a <SoundCard::getSamples32(int, int*)+0x26>
c001ea86:	85 f6                	test   esi,esi
c001ea88:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ea8f:	75 0f                	jne    c001eaa0 <SoundCard::getSamples32(int, int*)+0x6c>
c001ea91:	85 c0                	test   eax,eax
c001ea93:	74 1b                	je     c001eab0 <SoundCard::getSamples32(int, int*)+0x7c>
c001ea95:	83 ec 0c             	sub    esp,0xc
c001ea98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ea9a:	53                   	push   ebx
c001ea9b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ea9e:	eb 0d                	jmp    c001eaad <SoundCard::getSamples32(int, int*)+0x79>
c001eaa0:	85 c0                	test   eax,eax
c001eaa2:	75 0c                	jne    c001eab0 <SoundCard::getSamples32(int, int*)+0x7c>
c001eaa4:	83 ec 0c             	sub    esp,0xc
c001eaa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eaa9:	53                   	push   ebx
c001eaaa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001eaad:	83 c4 10             	add    esp,0x10
c001eab0:	83 c4 0c             	add    esp,0xc
c001eab3:	89 f0                	mov    eax,esi
c001eab5:	5b                   	pop    ebx
c001eab6:	5e                   	pop    esi
c001eab7:	5f                   	pop    edi
c001eab8:	5d                   	pop    ebp
c001eab9:	c3                   	ret    

c001eaba <SoundCard::addChannel(SoundPort*)>:
c001eaba:	83 ec 0c             	sub    esp,0xc
c001eabd:	31 c0                	xor    eax,eax
c001eabf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eac3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001eacb:	74 1b                	je     c001eae8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001eacd:	40                   	inc    eax
c001eace:	83 f8 20             	cmp    eax,0x20
c001ead1:	75 f0                	jne    c001eac3 <SoundCard::addChannel(SoundPort*)+0x9>
c001ead3:	83 ec 0c             	sub    esp,0xc
c001ead6:	68 6d b7 02 c0       	push   0xc002b76d
c001eadb:	e8 30 1a ff ff       	call   c0010510 <KePanic(char const*)>
c001eae0:	83 c4 10             	add    esp,0x10
c001eae3:	83 c8 ff             	or     eax,0xffffffff
c001eae6:	eb 0b                	jmp    c001eaf3 <SoundCard::addChannel(SoundPort*)+0x39>
c001eae8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eaec:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001eaf3:	83 c4 0c             	add    esp,0xc
c001eaf6:	c3                   	ret    
c001eaf7:	90                   	nop

c001eaf8 <SoundCard::removeChannel(int)>:
c001eaf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eafc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb00:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001eb0b:	c3                   	ret    

c001eb0c <SoundPort::SoundPort(int, int, int, int)>:
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb13:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001eb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001eb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb2a:	89 10                	mov    DWORD PTR [eax],edx
c001eb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eb34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb42:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001eb47:	75 13                	jne    c001eb5c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001eb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb4f:	05 a0 0f 00 00       	add    eax,0xfa0
c001eb54:	01 c0                	add    eax,eax
c001eb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001eb5a:	66 90                	xchg   ax,ax
c001eb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001eb64:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001eb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001eb79:	c1 e0 02             	shl    eax,0x2
c001eb7c:	83 ec 0c             	sub    esp,0xc
c001eb7f:	50                   	push   eax
c001eb80:	e8 36 15 ff ff       	call   c00100bb <malloc>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	89 c2                	mov    edx,eax
c001eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001eb91:	90                   	nop
c001eb92:	83 c4 0c             	add    esp,0xc
c001eb95:	c3                   	ret    
c001eb96:	66 90                	xchg   ax,ax

c001eb98 <SoundPort::~SoundPort()>:
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001eba2:	85 c0                	test   eax,eax
c001eba4:	74 1e                	je     c001ebc4 <SoundPort::~SoundPort()+0x2c>
c001eba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ebad:	83 ec 0c             	sub    esp,0xc
c001ebb0:	50                   	push   eax
c001ebb1:	e8 15 15 ff ff       	call   c00100cb <free>
c001ebb6:	83 c4 10             	add    esp,0x10
c001ebb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ebc4:	90                   	nop
c001ebc5:	83 c4 0c             	add    esp,0xc
c001ebc8:	c3                   	ret    
c001ebc9:	90                   	nop
c001ebca:	66 90                	xchg   ax,ax

c001ebcc <SoundPort::unpause()>:
c001ebcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ebd4:	c3                   	ret    
c001ebd5:	90                   	nop
c001ebd6:	66 90                	xchg   ax,ax

c001ebd8 <SoundPort::pause()>:
c001ebd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebdc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ebe0:	c3                   	ret    
c001ebe1:	90                   	nop
c001ebe2:	66 90                	xchg   ax,ax

c001ebe4 <SoundPort::getBufferUsed()>:
c001ebe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ebeb:	c3                   	ret    

c001ebec <SoundPort::getBufferSize()>:
c001ebec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ebf3:	c3                   	ret    

c001ebf4 <SoundPort::buffer8(signed char*, int)>:
c001ebf4:	55                   	push   ebp
c001ebf5:	57                   	push   edi
c001ebf6:	56                   	push   esi
c001ebf7:	53                   	push   ebx
c001ebf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ebfc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ec00:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ec03:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ec06:	74 70                	je     c001ec78 <SoundPort::buffer8(signed char*, int)+0x84>
c001ec08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ec0c:	85 c9                	test   ecx,ecx
c001ec0e:	7e 68                	jle    c001ec78 <SoundPort::buffer8(signed char*, int)+0x84>
c001ec10:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001ec14:	8d 48 01             	lea    ecx,[eax+0x1]
c001ec17:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ec1a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ec1d:	89 f1                	mov    ecx,esi
c001ec1f:	c1 e1 18             	shl    ecx,0x18
c001ec22:	29 f1                	sub    ecx,esi
c001ec24:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ec27:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ec2a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ec2d:	74 51                	je     c001ec80 <SoundPort::buffer8(signed char*, int)+0x8c>
c001ec2f:	31 ff                	xor    edi,edi
c001ec31:	eb 25                	jmp    c001ec58 <SoundPort::buffer8(signed char*, int)+0x64>
c001ec33:	90                   	nop
c001ec34:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001ec39:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ec3c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ec3f:	89 f3                	mov    ebx,esi
c001ec41:	c1 e3 18             	shl    ebx,0x18
c001ec44:	29 f3                	sub    ebx,esi
c001ec46:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001ec49:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ec4c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ec4f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ec52:	74 1c                	je     c001ec70 <SoundPort::buffer8(signed char*, int)+0x7c>
c001ec54:	89 c7                	mov    edi,eax
c001ec56:	66 90                	xchg   ax,ax
c001ec58:	8d 47 01             	lea    eax,[edi+0x1]
c001ec5b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ec5f:	75 d3                	jne    c001ec34 <SoundPort::buffer8(signed char*, int)+0x40>
c001ec61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec65:	8d 76 00             	lea    esi,[esi+0x0]
c001ec68:	5b                   	pop    ebx
c001ec69:	5e                   	pop    esi
c001ec6a:	5f                   	pop    edi
c001ec6b:	5d                   	pop    ebp
c001ec6c:	c3                   	ret    
c001ec6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ec70:	5b                   	pop    ebx
c001ec71:	8d 47 02             	lea    eax,[edi+0x2]
c001ec74:	5e                   	pop    esi
c001ec75:	5f                   	pop    edi
c001ec76:	5d                   	pop    ebp
c001ec77:	c3                   	ret    
c001ec78:	5b                   	pop    ebx
c001ec79:	31 c0                	xor    eax,eax
c001ec7b:	5e                   	pop    esi
c001ec7c:	5f                   	pop    edi
c001ec7d:	5d                   	pop    ebp
c001ec7e:	c3                   	ret    
c001ec7f:	90                   	nop
c001ec80:	b8 01 00 00 00       	mov    eax,0x1
c001ec85:	eb e1                	jmp    c001ec68 <SoundPort::buffer8(signed char*, int)+0x74>
c001ec87:	90                   	nop

c001ec88 <SoundPort::buffer16(short*, int)>:
c001ec88:	55                   	push   ebp
c001ec89:	57                   	push   edi
c001ec8a:	56                   	push   esi
c001ec8b:	53                   	push   ebx
c001ec8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec90:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ec94:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ec97:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ec9a:	74 70                	je     c001ed0c <SoundPort::buffer16(short*, int)+0x84>
c001ec9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eca0:	85 c9                	test   ecx,ecx
c001eca2:	7e 68                	jle    c001ed0c <SoundPort::buffer16(short*, int)+0x84>
c001eca4:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001eca8:	8d 48 01             	lea    ecx,[eax+0x1]
c001ecab:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ecae:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ecb1:	89 f1                	mov    ecx,esi
c001ecb3:	c1 e1 10             	shl    ecx,0x10
c001ecb6:	29 f1                	sub    ecx,esi
c001ecb8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ecbb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ecbe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ecc1:	74 51                	je     c001ed14 <SoundPort::buffer16(short*, int)+0x8c>
c001ecc3:	31 ff                	xor    edi,edi
c001ecc5:	eb 25                	jmp    c001ecec <SoundPort::buffer16(short*, int)+0x64>
c001ecc7:	90                   	nop
c001ecc8:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001eccd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ecd0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ecd3:	89 f3                	mov    ebx,esi
c001ecd5:	c1 e3 10             	shl    ebx,0x10
c001ecd8:	29 f3                	sub    ebx,esi
c001ecda:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001ecdd:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ece0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ece3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ece6:	74 1c                	je     c001ed04 <SoundPort::buffer16(short*, int)+0x7c>
c001ece8:	89 c7                	mov    edi,eax
c001ecea:	66 90                	xchg   ax,ax
c001ecec:	8d 47 01             	lea    eax,[edi+0x1]
c001ecef:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ecf3:	75 d3                	jne    c001ecc8 <SoundPort::buffer16(short*, int)+0x40>
c001ecf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecf9:	8d 76 00             	lea    esi,[esi+0x0]
c001ecfc:	5b                   	pop    ebx
c001ecfd:	5e                   	pop    esi
c001ecfe:	5f                   	pop    edi
c001ecff:	5d                   	pop    ebp
c001ed00:	c3                   	ret    
c001ed01:	8d 76 00             	lea    esi,[esi+0x0]
c001ed04:	5b                   	pop    ebx
c001ed05:	8d 47 02             	lea    eax,[edi+0x2]
c001ed08:	5e                   	pop    esi
c001ed09:	5f                   	pop    edi
c001ed0a:	5d                   	pop    ebp
c001ed0b:	c3                   	ret    
c001ed0c:	5b                   	pop    ebx
c001ed0d:	31 c0                	xor    eax,eax
c001ed0f:	5e                   	pop    esi
c001ed10:	5f                   	pop    edi
c001ed11:	5d                   	pop    ebp
c001ed12:	c3                   	ret    
c001ed13:	90                   	nop
c001ed14:	b8 01 00 00 00       	mov    eax,0x1
c001ed19:	eb e1                	jmp    c001ecfc <SoundPort::buffer16(short*, int)+0x74>
c001ed1b:	90                   	nop

c001ed1c <SoundPort::buffer32(int*, int)>:
c001ed1c:	55                   	push   ebp
c001ed1d:	57                   	push   edi
c001ed1e:	56                   	push   esi
c001ed1f:	53                   	push   ebx
c001ed20:	83 ec 04             	sub    esp,0x4
c001ed23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed2b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ed2e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ed32:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed35:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ed38:	74 5a                	je     c001ed94 <SoundPort::buffer32(int*, int)+0x78>
c001ed3a:	85 c0                	test   eax,eax
c001ed3c:	7e 56                	jle    c001ed94 <SoundPort::buffer32(int*, int)+0x78>
c001ed3e:	8d 71 01             	lea    esi,[ecx+0x1]
c001ed41:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ed44:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ed47:	8b 37                	mov    esi,DWORD PTR [edi]
c001ed49:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ed4c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ed4f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ed52:	74 4c                	je     c001eda0 <SoundPort::buffer32(int*, int)+0x84>
c001ed54:	31 f6                	xor    esi,esi
c001ed56:	eb 1c                	jmp    c001ed74 <SoundPort::buffer32(int*, int)+0x58>
c001ed58:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ed5b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ed5e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ed61:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ed64:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ed68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ed6b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ed6e:	74 18                	je     c001ed88 <SoundPort::buffer32(int*, int)+0x6c>
c001ed70:	89 de                	mov    esi,ebx
c001ed72:	66 90                	xchg   ax,ax
c001ed74:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ed77:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ed7a:	75 dc                	jne    c001ed58 <SoundPort::buffer32(int*, int)+0x3c>
c001ed7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ed7f:	90                   	nop
c001ed80:	83 c4 04             	add    esp,0x4
c001ed83:	5b                   	pop    ebx
c001ed84:	5e                   	pop    esi
c001ed85:	5f                   	pop    edi
c001ed86:	5d                   	pop    ebp
c001ed87:	c3                   	ret    
c001ed88:	83 c4 04             	add    esp,0x4
c001ed8b:	8d 46 02             	lea    eax,[esi+0x2]
c001ed8e:	5b                   	pop    ebx
c001ed8f:	5e                   	pop    esi
c001ed90:	5f                   	pop    edi
c001ed91:	5d                   	pop    ebp
c001ed92:	c3                   	ret    
c001ed93:	90                   	nop
c001ed94:	83 c4 04             	add    esp,0x4
c001ed97:	31 c0                	xor    eax,eax
c001ed99:	5b                   	pop    ebx
c001ed9a:	5e                   	pop    esi
c001ed9b:	5f                   	pop    edi
c001ed9c:	5d                   	pop    ebp
c001ed9d:	c3                   	ret    
c001ed9e:	66 90                	xchg   ax,ax
c001eda0:	b8 01 00 00 00       	mov    eax,0x1
c001eda5:	eb d9                	jmp    c001ed80 <SoundPort::buffer32(int*, int)+0x64>
c001eda7:	90                   	nop

c001eda8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001eda8:	57                   	push   edi
c001eda9:	56                   	push   esi
c001edaa:	53                   	push   ebx
c001edab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edaf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001edb3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001edb9:	39 03                	cmp    DWORD PTR [ebx],eax
c001edbb:	74 13                	je     c001edd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001edbd:	83 ec 0c             	sub    esp,0xc
c001edc0:	68 c0 b7 02 c0       	push   0xc002b7c0
c001edc5:	e8 46 17 ff ff       	call   c0010510 <KePanic(char const*)>
c001edca:	83 c4 10             	add    esp,0x10
c001edcd:	8d 76 00             	lea    esi,[esi+0x0]
c001edd0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001edd6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001edd9:	74 11                	je     c001edec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001eddb:	83 ec 0c             	sub    esp,0xc
c001edde:	68 ff b7 02 c0       	push   0xc002b7ff
c001ede3:	e8 28 17 ff ff       	call   c0010510 <KePanic(char const*)>
c001ede8:	83 c4 10             	add    esp,0x10
c001edeb:	90                   	nop
c001edec:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001edf2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001edf5:	74 11                	je     c001ee08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001edf7:	83 ec 0c             	sub    esp,0xc
c001edfa:	68 ff b7 02 c0       	push   0xc002b7ff
c001edff:	e8 0c 17 ff ff       	call   c0010510 <KePanic(char const*)>
c001ee04:	83 c4 10             	add    esp,0x10
c001ee07:	90                   	nop
c001ee08:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ee0b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001ee0f:	7e 07                	jle    c001ee18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ee11:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ee15:	8d 76 00             	lea    esi,[esi+0x0]
c001ee18:	85 f6                	test   esi,esi
c001ee1a:	7e 2c                	jle    c001ee48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001ee1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee20:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ee23:	31 c9                	xor    ecx,ecx
c001ee25:	01 d7                	add    edi,edx
c001ee27:	90                   	nop
c001ee28:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ee2b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ee2e:	85 c0                	test   eax,eax
c001ee30:	79 06                	jns    c001ee38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ee32:	05 ff 7f 00 00       	add    eax,0x7fff
c001ee37:	90                   	nop
c001ee38:	c1 f8 0f             	sar    eax,0xf
c001ee3b:	83 c1 04             	add    ecx,0x4
c001ee3e:	66 01 02             	add    WORD PTR [edx],ax
c001ee41:	83 c2 02             	add    edx,0x2
c001ee44:	39 d7                	cmp    edi,edx
c001ee46:	75 e0                	jne    c001ee28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ee48:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ee4b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ee4e:	83 ec 04             	sub    esp,0x4
c001ee51:	29 f0                	sub    eax,esi
c001ee53:	c1 e0 02             	shl    eax,0x2
c001ee56:	50                   	push   eax
c001ee57:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ee5a:	50                   	push   eax
c001ee5b:	52                   	push   edx
c001ee5c:	e8 6f 15 fe ff       	call   c00003d0 <memmove>
c001ee61:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ee64:	83 c4 10             	add    esp,0x10
c001ee67:	29 f0                	sub    eax,esi
c001ee69:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ee6c:	89 f0                	mov    eax,esi
c001ee6e:	5b                   	pop    ebx
c001ee6f:	5e                   	pop    esi
c001ee70:	5f                   	pop    edi
c001ee71:	c3                   	ret    
c001ee72:	66 90                	xchg   ax,ax

c001ee74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ee74:	57                   	push   edi
c001ee75:	56                   	push   esi
c001ee76:	53                   	push   ebx
c001ee77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ee7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ee83:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ee89:	39 06                	cmp    DWORD PTR [esi],eax
c001ee8b:	74 13                	je     c001eea0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ee8d:	83 ec 0c             	sub    esp,0xc
c001ee90:	68 e0 b7 02 c0       	push   0xc002b7e0
c001ee95:	e8 76 16 ff ff       	call   c0010510 <KePanic(char const*)>
c001ee9a:	83 c4 10             	add    esp,0x10
c001ee9d:	8d 76 00             	lea    esi,[esi+0x0]
c001eea0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001eea6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001eea9:	74 11                	je     c001eebc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001eeab:	83 ec 0c             	sub    esp,0xc
c001eeae:	68 1b b8 02 c0       	push   0xc002b81b
c001eeb3:	e8 58 16 ff ff       	call   c0010510 <KePanic(char const*)>
c001eeb8:	83 c4 10             	add    esp,0x10
c001eebb:	90                   	nop
c001eebc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001eec2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001eec5:	74 11                	je     c001eed8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001eec7:	83 ec 0c             	sub    esp,0xc
c001eeca:	68 1b b8 02 c0       	push   0xc002b81b
c001eecf:	e8 3c 16 ff ff       	call   c0010510 <KePanic(char const*)>
c001eed4:	83 c4 10             	add    esp,0x10
c001eed7:	90                   	nop
c001eed8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001eedb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001eedf:	7e 07                	jle    c001eee8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001eee1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001eee5:	8d 76 00             	lea    esi,[esi+0x0]
c001eee8:	85 ff                	test   edi,edi
c001eeea:	7e 1c                	jle    c001ef08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001eeec:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001eef3:	31 c0                	xor    eax,eax
c001eef5:	8d 76 00             	lea    esi,[esi+0x0]
c001eef8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001eefb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001eefe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ef01:	83 c0 04             	add    eax,0x4
c001ef04:	39 c1                	cmp    ecx,eax
c001ef06:	75 f0                	jne    c001eef8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ef08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ef0b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ef0e:	83 ec 04             	sub    esp,0x4
c001ef11:	29 f8                	sub    eax,edi
c001ef13:	c1 e0 02             	shl    eax,0x2
c001ef16:	50                   	push   eax
c001ef17:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ef1a:	50                   	push   eax
c001ef1b:	52                   	push   edx
c001ef1c:	e8 af 14 fe ff       	call   c00003d0 <memmove>
c001ef21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	29 f8                	sub    eax,edi
c001ef29:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ef2c:	89 f8                	mov    eax,edi
c001ef2e:	5b                   	pop    ebx
c001ef2f:	5e                   	pop    esi
c001ef30:	5f                   	pop    edi
c001ef31:	c3                   	ret    

c001ef32 <PCI::open(int, int, void*)>:
c001ef32:	83 ec 18             	sub    esp,0x18
c001ef35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ef39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ef3d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef43:	8b 10                	mov    edx,DWORD PTR [eax]
c001ef45:	50                   	push   eax
c001ef46:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ef49:	31 c0                	xor    eax,eax
c001ef4b:	83 c4 1c             	add    esp,0x1c
c001ef4e:	c3                   	ret    
c001ef4f:	90                   	nop

c001ef50 <PCI::close(int, int, void*)>:
c001ef50:	31 c0                	xor    eax,eax
c001ef52:	c3                   	ret    
c001ef53:	90                   	nop

c001ef54 <PCI::PCI()>:
c001ef54:	83 ec 0c             	sub    esp,0xc
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	83 ec 08             	sub    esp,0x8
c001ef5e:	68 d0 b4 02 c0       	push   0xc002b4d0
c001ef63:	50                   	push   eax
c001ef64:	e8 47 a2 fe ff       	call   c00091b0 <Bus::Bus(char const*)>
c001ef69:	83 c4 10             	add    esp,0x10
c001ef6c:	ba 3c b9 02 c0       	mov    edx,0xc002b93c
c001ef71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef75:	89 10                	mov    DWORD PTR [eax],edx
c001ef77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ef85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef89:	a3 a0 5d 03 c0       	mov    ds:0xc0035da0,eax
c001ef8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef98:	0f b6 d0             	movzx  edx,al
c001ef9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001efa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efb0:	0f b6 d0             	movzx  edx,al
c001efb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001efbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efc6:	8d 50 01             	lea    edx,[eax+0x1]
c001efc9:	88 d1                	mov    cl,dl
c001efcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efcf:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001efd5:	0f b6 d0             	movzx  edx,al
c001efd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001efe0:	83 c9 c0             	or     ecx,0xffffffc0
c001efe3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efe7:	90                   	nop
c001efe8:	83 c4 0c             	add    esp,0xc
c001efeb:	c3                   	ret    

c001efec <PCI::readBAR8(unsigned int, int)>:
c001efec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eff4:	f6 c2 01             	test   dl,0x1
c001eff7:	74 07                	je     c001f000 <PCI::readBAR8(unsigned int, int)+0x14>
c001eff9:	83 e2 fc             	and    edx,0xfffffffc
c001effc:	01 c2                	add    edx,eax
c001effe:	ec                   	in     al,dx
c001efff:	c3                   	ret    
c001f000:	83 e2 f0             	and    edx,0xfffffff0
c001f003:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001f006:	c3                   	ret    
c001f007:	90                   	nop

c001f008 <PCI::readBAR16(unsigned int, int)>:
c001f008:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f00c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f010:	f6 c2 01             	test   dl,0x1
c001f013:	74 08                	je     c001f01d <PCI::readBAR16(unsigned int, int)+0x15>
c001f015:	83 e2 fc             	and    edx,0xfffffffc
c001f018:	01 c2                	add    edx,eax
c001f01a:	66 ed                	in     ax,dx
c001f01c:	c3                   	ret    
c001f01d:	83 e2 f0             	and    edx,0xfffffff0
c001f020:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001f024:	c3                   	ret    
c001f025:	90                   	nop

c001f026 <PCI::readBAR32(unsigned int, int)>:
c001f026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f02a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f02e:	f6 c2 01             	test   dl,0x1
c001f031:	74 07                	je     c001f03a <PCI::readBAR32(unsigned int, int)+0x14>
c001f033:	83 e2 fc             	and    edx,0xfffffffc
c001f036:	01 c2                	add    edx,eax
c001f038:	ed                   	in     eax,dx
c001f039:	c3                   	ret    
c001f03a:	83 e2 f0             	and    edx,0xfffffff0
c001f03d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001f040:	c3                   	ret    
c001f041:	90                   	nop

c001f042 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001f042:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f04a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f04e:	f6 c2 01             	test   dl,0x1
c001f051:	74 07                	je     c001f05a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001f053:	83 e2 fc             	and    edx,0xfffffffc
c001f056:	01 ca                	add    edx,ecx
c001f058:	ee                   	out    dx,al
c001f059:	c3                   	ret    
c001f05a:	83 e2 f0             	and    edx,0xfffffff0
c001f05d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001f060:	c3                   	ret    
c001f061:	90                   	nop

c001f062 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001f062:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f06a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f06e:	f6 c2 01             	test   dl,0x1
c001f071:	74 08                	je     c001f07b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001f073:	83 e2 fc             	and    edx,0xfffffffc
c001f076:	01 ca                	add    edx,ecx
c001f078:	66 ef                	out    dx,ax
c001f07a:	c3                   	ret    
c001f07b:	83 e2 f0             	and    edx,0xfffffff0
c001f07e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001f082:	c3                   	ret    
c001f083:	90                   	nop

c001f084 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001f084:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f08c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f090:	f6 c2 01             	test   dl,0x1
c001f093:	74 07                	je     c001f09c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001f095:	83 e2 fc             	and    edx,0xfffffffc
c001f098:	01 ca                	add    edx,ecx
c001f09a:	ef                   	out    dx,eax
c001f09b:	c3                   	ret    
c001f09c:	83 e2 f0             	and    edx,0xfffffff0
c001f09f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001f0a2:	c3                   	ret    
c001f0a3:	90                   	nop

c001f0a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001f0a4:	55                   	push   ebp
c001f0a5:	57                   	push   edi
c001f0a6:	56                   	push   esi
c001f0a7:	53                   	push   ebx
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001f0b0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001f0b4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f0b8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f0bc:	83 fe 07             	cmp    esi,0x7
c001f0bf:	76 10                	jbe    c001f0d1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001f0c1:	83 ec 0c             	sub    esp,0xc
c001f0c4:	68 37 b8 02 c0       	push   0xc002b837
c001f0c9:	e8 42 14 ff ff       	call   c0010510 <KePanic(char const*)>
c001f0ce:	83 c4 10             	add    esp,0x10
c001f0d1:	0f b6 db             	movzx  ebx,bl
c001f0d4:	83 fb 0f             	cmp    ebx,0xf
c001f0d7:	76 10                	jbe    c001f0e9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001f0d9:	83 ec 0c             	sub    esp,0xc
c001f0dc:	68 67 b8 02 c0       	push   0xc002b867
c001f0e1:	e8 2a 14 ff ff       	call   c0010510 <KePanic(char const*)>
c001f0e6:	83 c4 10             	add    esp,0x10
c001f0e9:	8d 04 36             	lea    eax,[esi+esi*1]
c001f0ec:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f0f1:	83 c8 f0             	or     eax,0xfffffff0
c001f0f4:	ee                   	out    dx,al
c001f0f5:	ba fa 0c 00 00       	mov    edx,0xcfa
c001f0fa:	89 e8                	mov    eax,ebp
c001f0fc:	ee                   	out    dx,al
c001f0fd:	83 c4 0c             	add    esp,0xc
c001f100:	89 d8                	mov    eax,ebx
c001f102:	89 f9                	mov    ecx,edi
c001f104:	c1 e0 08             	shl    eax,0x8
c001f107:	0f b6 d9             	movzx  ebx,cl
c001f10a:	83 e3 fc             	and    ebx,0xfffffffc
c001f10d:	09 d8                	or     eax,ebx
c001f10f:	5b                   	pop    ebx
c001f110:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001f115:	5e                   	pop    esi
c001f116:	5f                   	pop    edi
c001f117:	5d                   	pop    ebp
c001f118:	c3                   	ret    
c001f119:	90                   	nop

c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001f11a:	57                   	push   edi
c001f11b:	56                   	push   esi
c001f11c:	53                   	push   ebx
c001f11d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f121:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f125:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001f12b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f12f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f133:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f137:	83 ff 01             	cmp    edi,0x1
c001f13a:	75 3f                	jne    c001f17b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001f13c:	89 de                	mov    esi,ebx
c001f13e:	0f b6 c0             	movzx  eax,al
c001f141:	81 e6 fc 00 00 00    	and    esi,0xfc
c001f147:	c1 e0 10             	shl    eax,0x10
c001f14a:	0f b6 c9             	movzx  ecx,cl
c001f14d:	09 f0                	or     eax,esi
c001f14f:	c1 e1 08             	shl    ecx,0x8
c001f152:	0f b6 d2             	movzx  edx,dl
c001f155:	09 c8                	or     eax,ecx
c001f157:	c1 e2 0b             	shl    edx,0xb
c001f15a:	09 d0                	or     eax,edx
c001f15c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f161:	0d 00 00 00 80       	or     eax,0x80000000
c001f166:	ef                   	out    dx,eax
c001f167:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f16c:	ed                   	in     eax,dx
c001f16d:	83 e3 02             	and    ebx,0x2
c001f170:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001f177:	d3 e8                	shr    eax,cl
c001f179:	eb 44                	jmp    c001f1bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001f17b:	83 ff 02             	cmp    edi,0x2
c001f17e:	75 2d                	jne    c001f1ad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001f180:	83 ec 0c             	sub    esp,0xc
c001f183:	0f b6 c9             	movzx  ecx,cl
c001f186:	0f b6 d2             	movzx  edx,dl
c001f189:	0f b6 fb             	movzx  edi,bl
c001f18c:	0f b6 c0             	movzx  eax,al
c001f18f:	57                   	push   edi
c001f190:	51                   	push   ecx
c001f191:	52                   	push   edx
c001f192:	50                   	push   eax
c001f193:	56                   	push   esi
c001f194:	e8 0b ff ff ff       	call   c001f0a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f199:	89 c2                	mov    edx,eax
c001f19b:	ed                   	in     eax,dx
c001f19c:	83 e3 02             	and    ebx,0x2
c001f19f:	83 c4 20             	add    esp,0x20
c001f1a2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001f1a9:	d3 e8                	shr    eax,cl
c001f1ab:	eb 12                	jmp    c001f1bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001f1ad:	83 ec 0c             	sub    esp,0xc
c001f1b0:	68 97 b8 02 c0       	push   0xc002b897
c001f1b5:	e8 56 13 ff ff       	call   c0010510 <KePanic(char const*)>
c001f1ba:	83 c4 10             	add    esp,0x10
c001f1bd:	31 c0                	xor    eax,eax
c001f1bf:	5b                   	pop    ebx
c001f1c0:	5e                   	pop    esi
c001f1c1:	5f                   	pop    edi
c001f1c2:	c3                   	ret    
c001f1c3:	90                   	nop

c001f1c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001f1c4:	83 ec 18             	sub    esp,0x18
c001f1c7:	6a 00                	push   0x0
c001f1c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f1ce:	50                   	push   eax
c001f1cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f1d4:	50                   	push   eax
c001f1d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f1da:	50                   	push   eax
c001f1db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f1df:	e8 36 ff ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f1e4:	83 c4 2c             	add    esp,0x2c
c001f1e7:	c3                   	ret    

c001f1e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001f1e8:	83 ec 18             	sub    esp,0x18
c001f1eb:	6a 0e                	push   0xe
c001f1ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f1f2:	50                   	push   eax
c001f1f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f1f8:	50                   	push   eax
c001f1f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f1fe:	50                   	push   eax
c001f1ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f203:	e8 12 ff ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f208:	83 c4 2c             	add    esp,0x2c
c001f20b:	0f b6 c0             	movzx  eax,al
c001f20e:	c3                   	ret    
c001f20f:	90                   	nop

c001f210 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001f210:	55                   	push   ebp
c001f211:	57                   	push   edi
c001f212:	56                   	push   esi
c001f213:	53                   	push   ebx
c001f214:	83 ec 18             	sub    esp,0x18
c001f217:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001f21c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001f221:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001f226:	6a 0a                	push   0xa
c001f228:	56                   	push   esi
c001f229:	55                   	push   ebp
c001f22a:	57                   	push   edi
c001f22b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f22f:	e8 e6 fe ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f234:	83 c4 14             	add    esp,0x14
c001f237:	89 c3                	mov    ebx,eax
c001f239:	6a 0a                	push   0xa
c001f23b:	0f b6 db             	movzx  ebx,bl
c001f23e:	56                   	push   esi
c001f23f:	55                   	push   ebp
c001f240:	57                   	push   edi
c001f241:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f245:	e8 d0 fe ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f24a:	83 c4 2c             	add    esp,0x2c
c001f24d:	25 00 ff 00 00       	and    eax,0xff00
c001f252:	09 d8                	or     eax,ebx
c001f254:	5b                   	pop    ebx
c001f255:	5e                   	pop    esi
c001f256:	5f                   	pop    edi
c001f257:	5d                   	pop    ebp
c001f258:	c3                   	ret    
c001f259:	90                   	nop

c001f25a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001f25a:	83 ec 18             	sub    esp,0x18
c001f25d:	6a 08                	push   0x8
c001f25f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f264:	50                   	push   eax
c001f265:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f26a:	50                   	push   eax
c001f26b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f270:	50                   	push   eax
c001f271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f275:	e8 a0 fe ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f27a:	83 c4 2c             	add    esp,0x2c
c001f27d:	0f b6 c4             	movzx  eax,ah
c001f280:	c3                   	ret    
c001f281:	90                   	nop

c001f282 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001f282:	83 ec 18             	sub    esp,0x18
c001f285:	6a 08                	push   0x8
c001f287:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f28c:	50                   	push   eax
c001f28d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f292:	50                   	push   eax
c001f293:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f298:	50                   	push   eax
c001f299:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f29d:	e8 78 fe ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f2a2:	83 c4 2c             	add    esp,0x2c
c001f2a5:	c3                   	ret    

c001f2a6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001f2a6:	83 ec 18             	sub    esp,0x18
c001f2a9:	6a 3c                	push   0x3c
c001f2ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f2b0:	50                   	push   eax
c001f2b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f2b6:	50                   	push   eax
c001f2b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f2bc:	50                   	push   eax
c001f2bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f2c1:	e8 54 fe ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f2c6:	83 c4 2c             	add    esp,0x2c
c001f2c9:	c3                   	ret    

c001f2ca <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001f2ca:	83 ec 18             	sub    esp,0x18
c001f2cd:	6a 18                	push   0x18
c001f2cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f2d4:	50                   	push   eax
c001f2d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f2da:	50                   	push   eax
c001f2db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f2e0:	50                   	push   eax
c001f2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f2e5:	e8 30 fe ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f2ea:	83 c4 2c             	add    esp,0x2c
c001f2ed:	0f b6 c4             	movzx  eax,ah
c001f2f0:	c3                   	ret    
c001f2f1:	90                   	nop

c001f2f2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001f2f2:	55                   	push   ebp
c001f2f3:	57                   	push   edi
c001f2f4:	56                   	push   esi
c001f2f5:	53                   	push   ebx
c001f2f6:	83 ec 28             	sub    esp,0x28
c001f2f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f2fd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001f302:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001f307:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001f30c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001f313:	8d 43 12             	lea    eax,[ebx+0x12]
c001f316:	83 c3 10             	add    ebx,0x10
c001f319:	0f b6 c0             	movzx  eax,al
c001f31c:	0f b6 db             	movzx  ebx,bl
c001f31f:	50                   	push   eax
c001f320:	51                   	push   ecx
c001f321:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001f325:	57                   	push   edi
c001f326:	55                   	push   ebp
c001f327:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f32b:	e8 ea fd ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f330:	83 c4 14             	add    esp,0x14
c001f333:	89 c6                	mov    esi,eax
c001f335:	53                   	push   ebx
c001f336:	c1 e6 10             	shl    esi,0x10
c001f339:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f33d:	51                   	push   ecx
c001f33e:	57                   	push   edi
c001f33f:	55                   	push   ebp
c001f340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f344:	e8 d1 fd ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f349:	83 c4 3c             	add    esp,0x3c
c001f34c:	0f b7 c0             	movzx  eax,ax
c001f34f:	5b                   	pop    ebx
c001f350:	09 f0                	or     eax,esi
c001f352:	5e                   	pop    esi
c001f353:	5f                   	pop    edi
c001f354:	5d                   	pop    ebp
c001f355:	c3                   	ret    

c001f356 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001f356:	55                   	push   ebp
c001f357:	57                   	push   edi
c001f358:	56                   	push   esi
c001f359:	53                   	push   ebx
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f361:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001f365:	89 f5                	mov    ebp,esi
c001f367:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001f36d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f371:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f375:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f379:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f37d:	83 f9 01             	cmp    ecx,0x1
c001f380:	75 5d                	jne    c001f3df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001f382:	0f b6 c8             	movzx  ecx,al
c001f385:	0f b6 d2             	movzx  edx,dl
c001f388:	c1 e1 10             	shl    ecx,0x10
c001f38b:	c1 e2 0b             	shl    edx,0xb
c001f38e:	89 f0                	mov    eax,esi
c001f390:	25 fc 00 00 00       	and    eax,0xfc
c001f395:	09 c1                	or     ecx,eax
c001f397:	89 e8                	mov    eax,ebp
c001f399:	0f b6 c0             	movzx  eax,al
c001f39c:	c1 e0 08             	shl    eax,0x8
c001f39f:	09 c1                	or     ecx,eax
c001f3a1:	09 d1                	or     ecx,edx
c001f3a3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f3a8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001f3ae:	89 c8                	mov    eax,ecx
c001f3b0:	ef                   	out    dx,eax
c001f3b1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f3b6:	ed                   	in     eax,dx
c001f3b7:	0f b7 db             	movzx  ebx,bx
c001f3ba:	83 e6 02             	and    esi,0x2
c001f3bd:	74 0a                	je     c001f3c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001f3bf:	0f b7 d0             	movzx  edx,ax
c001f3c2:	c1 e3 10             	shl    ebx,0x10
c001f3c5:	09 d3                	or     ebx,edx
c001f3c7:	eb 05                	jmp    c001f3ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001f3c9:	66 31 c0             	xor    ax,ax
c001f3cc:	09 c3                	or     ebx,eax
c001f3ce:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f3d3:	89 c8                	mov    eax,ecx
c001f3d5:	ef                   	out    dx,eax
c001f3d6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f3db:	89 d8                	mov    eax,ebx
c001f3dd:	eb 41                	jmp    c001f420 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001f3df:	83 f9 02             	cmp    ecx,0x2
c001f3e2:	75 45                	jne    c001f429 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001f3e4:	83 ec 0c             	sub    esp,0xc
c001f3e7:	0f b6 d2             	movzx  edx,dl
c001f3ea:	89 f1                	mov    ecx,esi
c001f3ec:	0f b6 c0             	movzx  eax,al
c001f3ef:	0f b6 f1             	movzx  esi,cl
c001f3f2:	89 e9                	mov    ecx,ebp
c001f3f4:	56                   	push   esi
c001f3f5:	0f b6 c9             	movzx  ecx,cl
c001f3f8:	51                   	push   ecx
c001f3f9:	52                   	push   edx
c001f3fa:	50                   	push   eax
c001f3fb:	57                   	push   edi
c001f3fc:	e8 a3 fc ff ff       	call   c001f0a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f401:	89 c2                	mov    edx,eax
c001f403:	ed                   	in     eax,dx
c001f404:	83 c4 20             	add    esp,0x20
c001f407:	0f b7 db             	movzx  ebx,bx
c001f40a:	f6 c2 02             	test   dl,0x2
c001f40d:	74 0c                	je     c001f41b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001f40f:	0f b7 c8             	movzx  ecx,ax
c001f412:	89 d8                	mov    eax,ebx
c001f414:	c1 e0 10             	shl    eax,0x10
c001f417:	09 c8                	or     eax,ecx
c001f419:	eb 05                	jmp    c001f420 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001f41b:	66 31 c0             	xor    ax,ax
c001f41e:	09 d8                	or     eax,ebx
c001f420:	ef                   	out    dx,eax
c001f421:	83 c4 0c             	add    esp,0xc
c001f424:	5b                   	pop    ebx
c001f425:	5e                   	pop    esi
c001f426:	5f                   	pop    edi
c001f427:	5d                   	pop    ebp
c001f428:	c3                   	ret    
c001f429:	c7 44 24 20 97 b8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b897
c001f431:	83 c4 0c             	add    esp,0xc
c001f434:	5b                   	pop    ebx
c001f435:	5e                   	pop    esi
c001f436:	5f                   	pop    edi
c001f437:	5d                   	pop    ebp
c001f438:	e9 d3 10 ff ff       	jmp    c0010510 <KePanic(char const*)>
c001f43d:	90                   	nop

c001f43e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001f43e:	55                   	push   ebp
c001f43f:	57                   	push   edi
c001f440:	56                   	push   esi
c001f441:	53                   	push   ebx
c001f442:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001f448:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001f44f:	80 3d ac 5d 03 c0 00 	cmp    BYTE PTR ds:0xc0035dac,0x0
c001f456:	0f 85 bd 00 00 00    	jne    c001f519 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001f45c:	83 ec 0c             	sub    esp,0xc
c001f45f:	68 14 01 00 00       	push   0x114
c001f464:	e8 52 0c ff ff       	call   c00100bb <malloc>
c001f469:	83 c4 0c             	add    esp,0xc
c001f46c:	89 c3                	mov    ebx,eax
c001f46e:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c001f474:	68 9d b8 02 c0       	push   0xc002b89d
c001f479:	50                   	push   eax
c001f47a:	e8 57 95 fe ff       	call   c00089d6 <File::File(char const*, Process*)>
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	85 db                	test   ebx,ebx
c001f484:	0f 84 67 02 00 00    	je     c001f6f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001f48a:	56                   	push   esi
c001f48b:	56                   	push   esi
c001f48c:	6a 01                	push   0x1
c001f48e:	53                   	push   ebx
c001f48f:	e8 60 95 fe ff       	call   c00089f4 <File::open(FileOpenMode)>
c001f494:	83 c4 10             	add    esp,0x10
c001f497:	85 c0                	test   eax,eax
c001f499:	0f 85 52 02 00 00    	jne    c001f6f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001f49f:	52                   	push   edx
c001f4a0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001f4a4:	50                   	push   eax
c001f4a5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f4a9:	50                   	push   eax
c001f4aa:	53                   	push   ebx
c001f4ab:	e8 46 98 fe ff       	call   c0008cf6 <File::stat(unsigned long long*, bool*)>
c001f4b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f4b4:	40                   	inc    eax
c001f4b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4b8:	e8 fe 0b ff ff       	call   c00100bb <malloc>
c001f4bd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001f4c1:	a3 a8 5d 03 c0       	mov    ds:0xc0035da8,eax
c001f4c6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001f4ca:	59                   	pop    ecx
c001f4cb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f4cd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001f4d1:	51                   	push   ecx
c001f4d2:	50                   	push   eax
c001f4d3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001f4d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001f4db:	53                   	push   ebx
c001f4dc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f4df:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001f4e3:	83 c4 20             	add    esp,0x20
c001f4e6:	89 c8                	mov    eax,ecx
c001f4e8:	99                   	cdq    
c001f4e9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001f4ed:	0f 85 fe 01 00 00    	jne    c001f6f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001f4f3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001f4f7:	0f 85 f4 01 00 00    	jne    c001f6f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001f4fd:	83 ec 0c             	sub    esp,0xc
c001f500:	53                   	push   ebx
c001f501:	e8 4c 95 fe ff       	call   c0008a52 <File::close()>
c001f506:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f50a:	c6 05 ac 5d 03 c0 01 	mov    BYTE PTR ds:0xc0035dac,0x1
c001f511:	a3 a4 5d 03 c0       	mov    ds:0xc0035da4,eax
c001f516:	83 c4 10             	add    esp,0x10
c001f519:	a1 a4 5d 03 c0       	mov    eax,ds:0xc0035da4
c001f51e:	8b 1d a8 5d 03 c0    	mov    ebx,DWORD PTR ds:0xc0035da8
c001f524:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f528:	31 f6                	xor    esi,esi
c001f52a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001f532:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001f539:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001f53e:	31 c9                	xor    ecx,ecx
c001f540:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001f548:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001f54d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001f555:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001f559:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001f561:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001f565:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001f569:	0f 8e 82 01 00 00    	jle    c001f6f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001f56f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001f572:	d4 40                	aam    0x40
c001f574:	d5 39                	aad    0x39
c001f576:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f57a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001f57e:	d4 40                	aam    0x40
c001f580:	d5 39                	aad    0x39
c001f582:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f586:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001f58a:	d4 40                	aam    0x40
c001f58c:	d5 39                	aad    0x39
c001f58e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001f592:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001f596:	d4 40                	aam    0x40
c001f598:	d5 39                	aad    0x39
c001f59a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001f59e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001f5a2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001f5a6:	3c 56                	cmp    al,0x56
c001f5a8:	74 43                	je     c001f5ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001f5aa:	d4 40                	aam    0x40
c001f5ac:	d5 39                	aad    0x39
c001f5ae:	8d 48 d0             	lea    ecx,[eax-0x30]
c001f5b1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001f5b5:	0f b6 c9             	movzx  ecx,cl
c001f5b8:	c1 e1 04             	shl    ecx,0x4
c001f5bb:	d4 40                	aam    0x40
c001f5bd:	d5 39                	aad    0x39
c001f5bf:	83 e8 30             	sub    eax,0x30
c001f5c2:	0f b6 c0             	movzx  eax,al
c001f5c5:	09 c1                	or     ecx,eax
c001f5c7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001f5cb:	c1 e1 04             	shl    ecx,0x4
c001f5ce:	d4 40                	aam    0x40
c001f5d0:	d5 39                	aad    0x39
c001f5d2:	83 e8 30             	sub    eax,0x30
c001f5d5:	0f b6 c0             	movzx  eax,al
c001f5d8:	09 c1                	or     ecx,eax
c001f5da:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001f5de:	c1 e1 04             	shl    ecx,0x4
c001f5e1:	d4 40                	aam    0x40
c001f5e3:	d5 39                	aad    0x39
c001f5e5:	83 e8 30             	sub    eax,0x30
c001f5e8:	0f b6 c0             	movzx  eax,al
c001f5eb:	09 c1                	or     ecx,eax
c001f5ed:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001f5f1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001f5f5:	3c 58                	cmp    al,0x58
c001f5f7:	74 47                	je     c001f640 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001f5f9:	d4 40                	aam    0x40
c001f5fb:	d5 39                	aad    0x39
c001f5fd:	8d 50 d0             	lea    edx,[eax-0x30]
c001f600:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001f604:	0f b6 d2             	movzx  edx,dl
c001f607:	c1 e2 04             	shl    edx,0x4
c001f60a:	d4 40                	aam    0x40
c001f60c:	d5 39                	aad    0x39
c001f60e:	83 e8 30             	sub    eax,0x30
c001f611:	0f b6 c0             	movzx  eax,al
c001f614:	09 c2                	or     edx,eax
c001f616:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001f61a:	c1 e2 04             	shl    edx,0x4
c001f61d:	d4 40                	aam    0x40
c001f61f:	d5 39                	aad    0x39
c001f621:	83 e8 30             	sub    eax,0x30
c001f624:	0f b6 c0             	movzx  eax,al
c001f627:	09 c2                	or     edx,eax
c001f629:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001f62d:	c1 e2 04             	shl    edx,0x4
c001f630:	d4 40                	aam    0x40
c001f632:	d5 39                	aad    0x39
c001f634:	83 e8 30             	sub    eax,0x30
c001f637:	0f b6 c0             	movzx  eax,al
c001f63a:	09 c2                	or     edx,eax
c001f63c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f640:	83 c6 10             	add    esi,0x10
c001f643:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001f647:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001f64b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001f64f:	83 fa 0a             	cmp    edx,0xa
c001f652:	74 0b                	je     c001f65f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001f654:	47                   	inc    edi
c001f655:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001f659:	75 19                	jne    c001f674 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001f65b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001f65f:	31 c0                	xor    eax,eax
c001f661:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001f666:	0f 94 c0             	sete   al
c001f669:	01 c6                	add    esi,eax
c001f66b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001f670:	75 0b                	jne    c001f67d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001f672:	eb 14                	jmp    c001f688 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001f674:	46                   	inc    esi
c001f675:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001f678:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001f67b:	eb ca                	jmp    c001f647 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001f67d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001f682:	0f 85 dd fe ff ff    	jne    c001f565 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001f688:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001f68d:	74 10                	je     c001f69f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001f68f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001f694:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001f699:	0f 85 c6 fe ff ff    	jne    c001f565 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001f69f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f6a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f6a7:	83 e8 30             	sub    eax,0x30
c001f6aa:	83 ef 30             	sub    edi,0x30
c001f6ad:	c1 e0 04             	shl    eax,0x4
c001f6b0:	09 f8                	or     eax,edi
c001f6b2:	0f b6 c0             	movzx  eax,al
c001f6b5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001f6b9:	0f 85 a6 fe ff ff    	jne    c001f565 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001f6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f6c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001f6c7:	83 e8 30             	sub    eax,0x30
c001f6ca:	83 ef 30             	sub    edi,0x30
c001f6cd:	c1 e0 04             	shl    eax,0x4
c001f6d0:	09 f8                	or     eax,edi
c001f6d2:	0f b6 c0             	movzx  eax,al
c001f6d5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001f6d9:	0f 85 86 fe ff ff    	jne    c001f565 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001f6df:	50                   	push   eax
c001f6e0:	50                   	push   eax
c001f6e1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f6e5:	50                   	push   eax
c001f6e6:	55                   	push   ebp
c001f6e7:	e8 54 0f fe ff       	call   c0000640 <strcpy>
c001f6ec:	83 c4 10             	add    esp,0x10
c001f6ef:	eb 06                	jmp    c001f6f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001f6f1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001f6f5:	31 ed                	xor    ebp,ebp
c001f6f7:	81 c4 4c 01 00 00    	add    esp,0x14c
c001f6fd:	89 e8                	mov    eax,ebp
c001f6ff:	5b                   	pop    ebx
c001f700:	5e                   	pop    esi
c001f701:	5f                   	pop    edi
c001f702:	5d                   	pop    ebp
c001f703:	c3                   	ret    

c001f704 <PCI::checkBus(unsigned char)>:
c001f704:	56                   	push   esi
c001f705:	53                   	push   ebx
c001f706:	31 db                	xor    ebx,ebx
c001f708:	51                   	push   ecx
c001f709:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f70e:	52                   	push   edx
c001f70f:	53                   	push   ebx
c001f710:	43                   	inc    ebx
c001f711:	56                   	push   esi
c001f712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f716:	e8 6f 03 00 00       	call   c001fa8a <PCI::checkDevice(unsigned char, unsigned char)>
c001f71b:	83 c4 10             	add    esp,0x10
c001f71e:	83 fb 20             	cmp    ebx,0x20
c001f721:	75 eb                	jne    c001f70e <PCI::checkBus(unsigned char)+0xa>
c001f723:	58                   	pop    eax
c001f724:	5b                   	pop    ebx
c001f725:	5e                   	pop    esi
c001f726:	c3                   	ret    
c001f727:	90                   	nop

c001f728 <PCI::foundDevice(PCIDeviceInfo)>:
c001f728:	55                   	push   ebp
c001f729:	57                   	push   edi
c001f72a:	56                   	push   esi
c001f72b:	53                   	push   ebx
c001f72c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001f732:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001f73a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001f741:	3d ff ff 00 00       	cmp    eax,0xffff
c001f746:	0f 84 b7 01 00 00    	je     c001f903 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001f74c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001f754:	66 81 fb 06 04       	cmp    bx,0x406
c001f759:	75 32                	jne    c001f78d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001f75b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001f763:	50                   	push   eax
c001f764:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001f76c:	50                   	push   eax
c001f76d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001f775:	50                   	push   eax
c001f776:	55                   	push   ebp
c001f777:	e8 4e fb ff ff       	call   c001f2ca <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001f77c:	59                   	pop    ecx
c001f77d:	0f b6 c0             	movzx  eax,al
c001f780:	5b                   	pop    ebx
c001f781:	50                   	push   eax
c001f782:	55                   	push   ebp
c001f783:	e8 7c ff ff ff       	call   c001f704 <PCI::checkBus(unsigned char)>
c001f788:	e9 16 01 00 00       	jmp    c001f8a3 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001f78d:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001f794:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001f79a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001f79e:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001f7a5:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001f7ad:	85 c0                	test   eax,eax
c001f7af:	74 36                	je     c001f7e7 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001f7b1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f7b4:	85 d2                	test   edx,edx
c001f7b6:	74 2b                	je     c001f7e3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001f7b8:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001f7be:	31 f9                	xor    ecx,edi
c001f7c0:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001f7c6:	75 1b                	jne    c001f7e3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001f7c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7cc:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001f7d2:	75 0f                	jne    c001f7e3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001f7d4:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001f7db:	39 f2                	cmp    edx,esi
c001f7dd:	0f 84 20 01 00 00    	je     c001f903 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001f7e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e5:	eb c6                	jmp    c001f7ad <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001f7e7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f7eb:	be d0 b8 02 c0       	mov    esi,0xc002b8d0
c001f7f0:	b9 07 00 00 00       	mov    ecx,0x7
c001f7f5:	fc                   	cld    
c001f7f6:	31 d2                	xor    edx,edx
c001f7f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f7fa:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001f801:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001f805:	b9 12 00 00 00       	mov    ecx,0x12
c001f80a:	83 ec 0c             	sub    esp,0xc
c001f80d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f80f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001f817:	b9 0a 00 00 00       	mov    ecx,0xa
c001f81c:	f7 f1                	div    ecx
c001f81e:	83 c0 30             	add    eax,0x30
c001f821:	83 c2 30             	add    edx,0x30
c001f824:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001f828:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001f82c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001f834:	31 d2                	xor    edx,edx
c001f836:	f7 f1                	div    ecx
c001f838:	83 c0 30             	add    eax,0x30
c001f83b:	83 c2 30             	add    edx,0x30
c001f83e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001f842:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001f846:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f84a:	50                   	push   eax
c001f84b:	e8 cd e2 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c001f850:	83 c4 10             	add    esp,0x10
c001f853:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001f859:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001f860:	75 46                	jne    c001f8a8 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001f862:	83 ec 0c             	sub    esp,0xc
c001f865:	68 64 01 00 00       	push   0x164
c001f86a:	e8 4c 08 ff ff       	call   c00100bb <malloc>
c001f86f:	89 c3                	mov    ebx,eax
c001f871:	89 04 24             	mov    DWORD PTR [esp],eax
c001f874:	e8 3b 11 00 00       	call   c00209b4 <SATABus::SATABus()>
c001f879:	58                   	pop    eax
c001f87a:	5a                   	pop    edx
c001f87b:	53                   	push   ebx
c001f87c:	55                   	push   ebp
c001f87d:	e8 1e aa fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c001f882:	83 ec 1c             	sub    esp,0x1c
c001f885:	b9 09 00 00 00       	mov    ecx,0x9
c001f88a:	89 e7                	mov    edi,esp
c001f88c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f88e:	53                   	push   ebx
c001f88f:	e8 52 a9 fe ff       	call   c000a1e6 <Device::preOpenPCI(PCIDeviceInfo)>
c001f894:	83 c4 30             	add    esp,0x30
c001f897:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f899:	6a 00                	push   0x0
c001f89b:	6a 00                	push   0x0
c001f89d:	6a 00                	push   0x0
c001f89f:	53                   	push   ebx
c001f8a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f8a3:	83 c4 10             	add    esp,0x10
c001f8a6:	eb 5b                	jmp    c001f903 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001f8a8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001f8ae:	75 19                	jne    c001f8c9 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001f8b0:	83 ec 0c             	sub    esp,0xc
c001f8b3:	68 70 02 00 00       	push   0x270
c001f8b8:	e8 fe 07 ff ff       	call   c00100bb <malloc>
c001f8bd:	89 c3                	mov    ebx,eax
c001f8bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8c2:	e8 93 02 00 00       	call   c001fb5a <IDE::IDE()>
c001f8c7:	eb b0                	jmp    c001f879 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001f8c9:	83 ec 0c             	sub    esp,0xc
c001f8cc:	68 58 01 00 00       	push   0x158
c001f8d1:	e8 e5 07 ff ff       	call   c00100bb <malloc>
c001f8d6:	89 c3                	mov    ebx,eax
c001f8d8:	58                   	pop    eax
c001f8d9:	5a                   	pop    edx
c001f8da:	68 b6 b8 02 c0       	push   0xc002b8b6
c001f8df:	53                   	push   ebx
c001f8e0:	e8 6f ac fe ff       	call   c000a554 <DriverlessDevice::DriverlessDevice(char const*)>
c001f8e5:	59                   	pop    ecx
c001f8e6:	5f                   	pop    edi
c001f8e7:	53                   	push   ebx
c001f8e8:	55                   	push   ebp
c001f8e9:	e8 b2 a9 fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c001f8ee:	83 ec 1c             	sub    esp,0x1c
c001f8f1:	b9 09 00 00 00       	mov    ecx,0x9
c001f8f6:	89 e7                	mov    edi,esp
c001f8f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f8fa:	53                   	push   ebx
c001f8fb:	e8 e6 a8 fe ff       	call   c000a1e6 <Device::preOpenPCI(PCIDeviceInfo)>
c001f900:	83 c4 30             	add    esp,0x30
c001f903:	81 c4 8c 00 00 00    	add    esp,0x8c
c001f909:	5b                   	pop    ebx
c001f90a:	5e                   	pop    esi
c001f90b:	5f                   	pop    edi
c001f90c:	5d                   	pop    ebp
c001f90d:	c3                   	ret    

c001f90e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001f90e:	55                   	push   ebp
c001f90f:	57                   	push   edi
c001f910:	56                   	push   esi
c001f911:	53                   	push   ebx
c001f912:	83 ec 68             	sub    esp,0x68
c001f915:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001f919:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001f920:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f924:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001f92b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001f930:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001f934:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001f93b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001f940:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001f944:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001f949:	6a 0c                	push   0xc
c001f94b:	57                   	push   edi
c001f94c:	53                   	push   ebx
c001f94d:	56                   	push   esi
c001f94e:	55                   	push   ebp
c001f94f:	e8 c6 f7 ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f954:	83 c4 20             	add    esp,0x20
c001f957:	57                   	push   edi
c001f958:	53                   	push   ebx
c001f959:	56                   	push   esi
c001f95a:	55                   	push   ebp
c001f95b:	e8 b0 f8 ff ff       	call   c001f210 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001f960:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001f965:	57                   	push   edi
c001f966:	53                   	push   ebx
c001f967:	56                   	push   esi
c001f968:	55                   	push   ebp
c001f969:	e8 38 f9 ff ff       	call   c001f2a6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001f96e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001f972:	83 c4 14             	add    esp,0x14
c001f975:	6a 3c                	push   0x3c
c001f977:	57                   	push   edi
c001f978:	53                   	push   ebx
c001f979:	56                   	push   esi
c001f97a:	55                   	push   ebp
c001f97b:	e8 9a f7 ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f980:	0f b6 c4             	movzx  eax,ah
c001f983:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001f987:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001f98b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001f98f:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001f994:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001f99a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001f9a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001f9a4:	83 c4 20             	add    esp,0x20
c001f9a7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001f9ac:	74 30                	je     c001f9de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001f9ae:	31 c0                	xor    eax,eax
c001f9b0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f9b4:	7e 28                	jle    c001f9de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001f9b6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001f9be:	39 cb                	cmp    ebx,ecx
c001f9c0:	75 19                	jne    c001f9db <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001f9c2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001f9ca:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f9ce:	75 0b                	jne    c001f9db <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001f9d0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001f9d7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001f9db:	40                   	inc    eax
c001f9dc:	eb d2                	jmp    c001f9b0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001f9de:	31 d2                	xor    edx,edx
c001f9e0:	83 ec 0c             	sub    esp,0xc
c001f9e3:	57                   	push   edi
c001f9e4:	53                   	push   ebx
c001f9e5:	56                   	push   esi
c001f9e6:	52                   	push   edx
c001f9e7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f9eb:	55                   	push   ebp
c001f9ec:	e8 01 f9 ff ff       	call   c001f2f2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f9f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f9f5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001f9f9:	42                   	inc    edx
c001f9fa:	83 c4 20             	add    esp,0x20
c001f9fd:	83 fa 06             	cmp    edx,0x6
c001fa00:	75 de                	jne    c001f9e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001fa02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa0a:	c1 e2 08             	shl    edx,0x8
c001fa0d:	83 ec 0c             	sub    esp,0xc
c001fa10:	0f b6 c4             	movzx  eax,ah
c001fa13:	09 d0                	or     eax,edx
c001fa15:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001fa1a:	6a 02                	push   0x2
c001fa1c:	57                   	push   edi
c001fa1d:	53                   	push   ebx
c001fa1e:	56                   	push   esi
c001fa1f:	55                   	push   ebp
c001fa20:	e8 f5 f6 ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001fa25:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001fa2a:	83 c4 20             	add    esp,0x20
c001fa2d:	57                   	push   edi
c001fa2e:	53                   	push   ebx
c001fa2f:	56                   	push   esi
c001fa30:	55                   	push   ebp
c001fa31:	e8 24 f8 ff ff       	call   c001f25a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001fa36:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001fa3a:	57                   	push   edi
c001fa3b:	53                   	push   ebx
c001fa3c:	56                   	push   esi
c001fa3d:	55                   	push   ebp
c001fa3e:	e8 81 f7 ff ff       	call   c001f1c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001fa43:	b9 09 00 00 00       	mov    ecx,0x9
c001fa48:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001fa4d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001fa51:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001fa55:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001fa59:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001fa5d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001fa61:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001fa65:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa69:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001fa6d:	83 ec 0c             	sub    esp,0xc
c001fa70:	fc                   	cld    
c001fa71:	89 e7                	mov    edi,esp
c001fa73:	8d 74 24 58          	lea    esi,[esp+0x58]
c001fa77:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001fa79:	55                   	push   ebp
c001fa7a:	e8 a9 fc ff ff       	call   c001f728 <PCI::foundDevice(PCIDeviceInfo)>
c001fa7f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001fa85:	5b                   	pop    ebx
c001fa86:	5e                   	pop    esi
c001fa87:	5f                   	pop    edi
c001fa88:	5d                   	pop    ebp
c001fa89:	c3                   	ret    

c001fa8a <PCI::checkDevice(unsigned char, unsigned char)>:
c001fa8a:	55                   	push   ebp
c001fa8b:	57                   	push   edi
c001fa8c:	56                   	push   esi
c001fa8d:	53                   	push   ebx
c001fa8e:	83 ec 0c             	sub    esp,0xc
c001fa91:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001fa95:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001fa9a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001fa9f:	6a 00                	push   0x0
c001faa1:	56                   	push   esi
c001faa2:	57                   	push   edi
c001faa3:	55                   	push   ebp
c001faa4:	e8 1b f7 ff ff       	call   c001f1c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001faa9:	6a 00                	push   0x0
c001faab:	56                   	push   esi
c001faac:	57                   	push   edi
c001faad:	55                   	push   ebp
c001faae:	e8 5b fe ff ff       	call   c001f90e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001fab3:	83 c4 20             	add    esp,0x20
c001fab6:	6a 00                	push   0x0
c001fab8:	56                   	push   esi
c001fab9:	57                   	push   edi
c001faba:	55                   	push   ebp
c001fabb:	e8 28 f7 ff ff       	call   c001f1e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	a8 80                	test   al,0x80
c001fac5:	74 2d                	je     c001faf4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001fac7:	bb 01 00 00 00       	mov    ebx,0x1
c001facc:	53                   	push   ebx
c001facd:	56                   	push   esi
c001face:	57                   	push   edi
c001facf:	55                   	push   ebp
c001fad0:	e8 ef f6 ff ff       	call   c001f1c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	0f b7 c0             	movzx  eax,ax
c001fadb:	3d ff ff 00 00       	cmp    eax,0xffff
c001fae0:	74 0c                	je     c001faee <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001fae2:	53                   	push   ebx
c001fae3:	56                   	push   esi
c001fae4:	57                   	push   edi
c001fae5:	55                   	push   ebp
c001fae6:	e8 23 fe ff ff       	call   c001f90e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001faeb:	83 c4 10             	add    esp,0x10
c001faee:	43                   	inc    ebx
c001faef:	83 fb 08             	cmp    ebx,0x8
c001faf2:	75 d8                	jne    c001facc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001faf4:	83 c4 0c             	add    esp,0xc
c001faf7:	5b                   	pop    ebx
c001faf8:	5e                   	pop    esi
c001faf9:	5f                   	pop    edi
c001fafa:	5d                   	pop    ebp
c001fafb:	c3                   	ret    

c001fafc <PCI::detect()>:
c001fafc:	56                   	push   esi
c001fafd:	53                   	push   ebx
c001fafe:	53                   	push   ebx
c001faff:	31 db                	xor    ebx,ebx
c001fb01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb05:	6a 00                	push   0x0
c001fb07:	6a 00                	push   0x0
c001fb09:	6a 00                	push   0x0
c001fb0b:	56                   	push   esi
c001fb0c:	e8 d7 f6 ff ff       	call   c001f1e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001fb11:	83 c4 10             	add    esp,0x10
c001fb14:	a8 80                	test   al,0x80
c001fb16:	75 21                	jne    c001fb39 <PCI::detect()+0x3d>
c001fb18:	51                   	push   ecx
c001fb19:	51                   	push   ecx
c001fb1a:	6a 00                	push   0x0
c001fb1c:	56                   	push   esi
c001fb1d:	e8 e2 fb ff ff       	call   c001f704 <PCI::checkBus(unsigned char)>
c001fb22:	83 c4 10             	add    esp,0x10
c001fb25:	eb 2a                	jmp    c001fb51 <PCI::detect()+0x55>
c001fb27:	52                   	push   edx
c001fb28:	52                   	push   edx
c001fb29:	53                   	push   ebx
c001fb2a:	43                   	inc    ebx
c001fb2b:	56                   	push   esi
c001fb2c:	e8 d3 fb ff ff       	call   c001f704 <PCI::checkBus(unsigned char)>
c001fb31:	83 c4 10             	add    esp,0x10
c001fb34:	83 fb 08             	cmp    ebx,0x8
c001fb37:	74 18                	je     c001fb51 <PCI::detect()+0x55>
c001fb39:	53                   	push   ebx
c001fb3a:	6a 00                	push   0x0
c001fb3c:	6a 00                	push   0x0
c001fb3e:	56                   	push   esi
c001fb3f:	e8 80 f6 ff ff       	call   c001f1c4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001fb44:	83 c4 10             	add    esp,0x10
c001fb47:	0f b7 c0             	movzx  eax,ax
c001fb4a:	3d ff ff 00 00       	cmp    eax,0xffff
c001fb4f:	74 d6                	je     c001fb27 <PCI::detect()+0x2b>
c001fb51:	58                   	pop    eax
c001fb52:	5b                   	pop    ebx
c001fb53:	5e                   	pop    esi
c001fb54:	c3                   	ret    
c001fb55:	90                   	nop

c001fb56 <IDE::close(int, int, void*)>:
c001fb56:	83 c8 ff             	or     eax,0xffffffff
c001fb59:	c3                   	ret    

c001fb5a <IDE::IDE()>:
c001fb5a:	83 ec 0c             	sub    esp,0xc
c001fb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb61:	83 ec 08             	sub    esp,0x8
c001fb64:	68 60 b9 02 c0       	push   0xc002b960
c001fb69:	50                   	push   eax
c001fb6a:	e8 89 aa fe ff       	call   c000a5f8 <HardDiskController::HardDiskController(char const*)>
c001fb6f:	83 c4 10             	add    esp,0x10
c001fb72:	ba 8c ba 02 c0       	mov    edx,0xc002ba8c
c001fb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7b:	89 10                	mov    DWORD PTR [eax],edx
c001fb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb81:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001fb88:	90                   	nop
c001fb89:	83 c4 0c             	add    esp,0xc
c001fb8c:	c3                   	ret    
c001fb8d:	90                   	nop

c001fb8e <IDE::prepareInterrupt(unsigned char)>:
c001fb8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fb93:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb97:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001fb9f:	c3                   	ret    

c001fba0 <selectDrive(unsigned char, unsigned char)>:
c001fba0:	c3                   	ret    
c001fba1:	90                   	nop

c001fba2 <IDE::getBase(unsigned char)>:
c001fba2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001fba7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbab:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001fbb3:	c3                   	ret    

c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001fbb4:	55                   	push   ebp
c001fbb5:	57                   	push   edi
c001fbb6:	56                   	push   esi
c001fbb7:	53                   	push   ebx
c001fbb8:	83 ec 1c             	sub    esp,0x1c
c001fbbb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fbbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fbc3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001fbc6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001fbca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fbce:	80 f9 03             	cmp    cl,0x3
c001fbd1:	77 4f                	ja     c001fc22 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001fbd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd7:	0f b6 fa             	movzx  edi,dl
c001fbda:	0f b6 db             	movzx  ebx,bl
c001fbdd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001fbe0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001fbe5:	80 ca 80             	or     dl,0x80
c001fbe8:	52                   	push   edx
c001fbe9:	6a 0c                	push   0xc
c001fbeb:	57                   	push   edi
c001fbec:	56                   	push   esi
c001fbed:	e8 c2 ff ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbf2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001fbf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbfb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001fbff:	ee                   	out    dx,al
c001fc00:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001fc05:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001fc09:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001fc0d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fc11:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001fc19:	83 c4 2c             	add    esp,0x2c
c001fc1c:	5b                   	pop    ebx
c001fc1d:	5e                   	pop    esi
c001fc1e:	5f                   	pop    edi
c001fc1f:	5d                   	pop    ebp
c001fc20:	eb 92                	jmp    c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc22:	0f b6 cb             	movzx  ecx,bl
c001fc25:	83 f9 07             	cmp    ecx,0x7
c001fc28:	77 12                	ja     c001fc3c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001fc2a:	0f b6 d2             	movzx  edx,dl
c001fc2d:	0f b6 db             	movzx  ebx,bl
c001fc30:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001fc38:	01 da                	add    edx,ebx
c001fc3a:	eb 2f                	jmp    c001fc6b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001fc3c:	83 f9 0d             	cmp    ecx,0xd
c001fc3f:	77 13                	ja     c001fc54 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001fc41:	0f b6 d2             	movzx  edx,dl
c001fc44:	0f b6 db             	movzx  ebx,bl
c001fc47:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001fc4e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001fc52:	eb 17                	jmp    c001fc6b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001fc54:	83 f9 15             	cmp    ecx,0x15
c001fc57:	77 13                	ja     c001fc6c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001fc59:	0f b6 d2             	movzx  edx,dl
c001fc5c:	0f b6 db             	movzx  ebx,bl
c001fc5f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001fc67:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001fc6b:	ee                   	out    dx,al
c001fc6c:	83 c4 1c             	add    esp,0x1c
c001fc6f:	5b                   	pop    ebx
c001fc70:	5e                   	pop    esi
c001fc71:	5f                   	pop    edi
c001fc72:	5d                   	pop    ebp
c001fc73:	c3                   	ret    

c001fc74 <IDE::read(unsigned char, unsigned char)>:
c001fc74:	55                   	push   ebp
c001fc75:	57                   	push   edi
c001fc76:	56                   	push   esi
c001fc77:	53                   	push   ebx
c001fc78:	83 ec 1c             	sub    esp,0x1c
c001fc7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fc7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fc83:	8d 43 f8             	lea    eax,[ebx-0x8]
c001fc86:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001fc8a:	3c 03                	cmp    al,0x3
c001fc8c:	77 40                	ja     c001fcce <IDE::read(unsigned char, unsigned char)+0x5a>
c001fc8e:	0f b6 f9             	movzx  edi,cl
c001fc91:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001fc94:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001fc99:	0c 80                	or     al,0x80
c001fc9b:	50                   	push   eax
c001fc9c:	6a 0c                	push   0xc
c001fc9e:	57                   	push   edi
c001fc9f:	56                   	push   esi
c001fca0:	e8 0f ff ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fca5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001fcaa:	0f b6 d3             	movzx  edx,bl
c001fcad:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001fcb1:	ec                   	in     al,dx
c001fcb2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001fcb6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001fcbb:	52                   	push   edx
c001fcbc:	6a 0c                	push   0xc
c001fcbe:	57                   	push   edi
c001fcbf:	56                   	push   esi
c001fcc0:	e8 ef fe ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcc5:	83 c4 20             	add    esp,0x20
c001fcc8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fccc:	eb 4c                	jmp    c001fd1a <IDE::read(unsigned char, unsigned char)+0xa6>
c001fcce:	0f b6 d3             	movzx  edx,bl
c001fcd1:	83 fa 07             	cmp    edx,0x7
c001fcd4:	77 12                	ja     c001fce8 <IDE::read(unsigned char, unsigned char)+0x74>
c001fcd6:	0f b6 c9             	movzx  ecx,cl
c001fcd9:	0f b6 d3             	movzx  edx,bl
c001fcdc:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001fce4:	01 c2                	add    edx,eax
c001fce6:	eb 31                	jmp    c001fd19 <IDE::read(unsigned char, unsigned char)+0xa5>
c001fce8:	83 fa 0d             	cmp    edx,0xd
c001fceb:	77 13                	ja     c001fd00 <IDE::read(unsigned char, unsigned char)+0x8c>
c001fced:	0f b6 c9             	movzx  ecx,cl
c001fcf0:	0f b6 d3             	movzx  edx,bl
c001fcf3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001fcfa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001fcfe:	eb 19                	jmp    c001fd19 <IDE::read(unsigned char, unsigned char)+0xa5>
c001fd00:	31 c0                	xor    eax,eax
c001fd02:	83 fa 15             	cmp    edx,0x15
c001fd05:	77 13                	ja     c001fd1a <IDE::read(unsigned char, unsigned char)+0xa6>
c001fd07:	0f b6 c9             	movzx  ecx,cl
c001fd0a:	0f b6 d3             	movzx  edx,bl
c001fd0d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001fd15:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001fd19:	ec                   	in     al,dx
c001fd1a:	83 c4 1c             	add    esp,0x1c
c001fd1d:	5b                   	pop    ebx
c001fd1e:	5e                   	pop    esi
c001fd1f:	5f                   	pop    edi
c001fd20:	5d                   	pop    ebp
c001fd21:	c3                   	ret    

c001fd22 <IDE::waitInterrupt(unsigned char)>:
c001fd22:	55                   	push   ebp
c001fd23:	57                   	push   edi
c001fd24:	56                   	push   esi
c001fd25:	53                   	push   ebx
c001fd26:	31 db                	xor    ebx,ebx
c001fd28:	83 ec 0c             	sub    esp,0xc
c001fd2b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001fd2f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001fd34:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001fd3c:	89 e8                	mov    eax,ebp
c001fd3e:	84 c0                	test   al,al
c001fd40:	75 31                	jne    c001fd73 <IDE::waitInterrupt(unsigned char)+0x51>
c001fd42:	52                   	push   edx
c001fd43:	6a 0c                	push   0xc
c001fd45:	56                   	push   esi
c001fd46:	57                   	push   edi
c001fd47:	e8 28 ff ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c001fd4c:	83 c4 10             	add    esp,0x10
c001fd4f:	a8 01                	test   al,0x1
c001fd51:	75 28                	jne    c001fd7b <IDE::waitInterrupt(unsigned char)+0x59>
c001fd53:	f6 c3 04             	test   bl,0x4
c001fd56:	75 13                	jne    c001fd6b <IDE::waitInterrupt(unsigned char)+0x49>
c001fd58:	83 fb 32             	cmp    ebx,0x32
c001fd5b:	7e 0e                	jle    c001fd6b <IDE::waitInterrupt(unsigned char)+0x49>
c001fd5d:	50                   	push   eax
c001fd5e:	50                   	push   eax
c001fd5f:	6a 00                	push   0x0
c001fd61:	6a 64                	push   0x64
c001fd63:	e8 34 75 ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c001fd68:	83 c4 10             	add    esp,0x10
c001fd6b:	83 fb 3c             	cmp    ebx,0x3c
c001fd6e:	74 0b                	je     c001fd7b <IDE::waitInterrupt(unsigned char)+0x59>
c001fd70:	43                   	inc    ebx
c001fd71:	eb c1                	jmp    c001fd34 <IDE::waitInterrupt(unsigned char)+0x12>
c001fd73:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001fd7b:	83 c4 0c             	add    esp,0xc
c001fd7e:	89 e8                	mov    eax,ebp
c001fd80:	5b                   	pop    ebx
c001fd81:	5e                   	pop    esi
c001fd82:	5f                   	pop    edi
c001fd83:	5d                   	pop    ebp
c001fd84:	c3                   	ret    

c001fd85 <ideChannel0IRQHandler(regs*, void*)>:
c001fd85:	83 ec 10             	sub    esp,0x10
c001fd88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fd8c:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001fd93:	6a 07                	push   0x7
c001fd95:	6a 00                	push   0x0
c001fd97:	50                   	push   eax
c001fd98:	e8 d7 fe ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c001fd9d:	83 c4 1c             	add    esp,0x1c
c001fda0:	c3                   	ret    

c001fda1 <ideChannel1IRQHandler(regs*, void*)>:
c001fda1:	83 ec 10             	sub    esp,0x10
c001fda4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fda8:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001fdaf:	6a 07                	push   0x7
c001fdb1:	6a 01                	push   0x1
c001fdb3:	50                   	push   eax
c001fdb4:	e8 bb fe ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c001fdb9:	83 c4 1c             	add    esp,0x1c
c001fdbc:	c3                   	ret    
c001fdbd:	90                   	nop

c001fdbe <IDE::enableIRQs(unsigned char, bool)>:
c001fdbe:	57                   	push   edi
c001fdbf:	b8 02 00 00 00       	mov    eax,0x2
c001fdc4:	56                   	push   esi
c001fdc5:	53                   	push   ebx
c001fdc6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fdce:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001fdd3:	74 02                	je     c001fdd7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001fdd5:	31 c0                	xor    eax,eax
c001fdd7:	0f b6 db             	movzx  ebx,bl
c001fdda:	bf 04 00 00 00       	mov    edi,0x4
c001fddf:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001fde6:	50                   	push   eax
c001fde7:	6a 0c                	push   0xc
c001fde9:	53                   	push   ebx
c001fdea:	56                   	push   esi
c001fdeb:	e8 c4 fd ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdf0:	83 c4 10             	add    esp,0x10
c001fdf3:	50                   	push   eax
c001fdf4:	6a 0c                	push   0xc
c001fdf6:	53                   	push   ebx
c001fdf7:	56                   	push   esi
c001fdf8:	e8 77 fe ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c001fdfd:	83 c4 10             	add    esp,0x10
c001fe00:	4f                   	dec    edi
c001fe01:	75 f0                	jne    c001fdf3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001fe03:	5b                   	pop    ebx
c001fe04:	5e                   	pop    esi
c001fe05:	5f                   	pop    edi
c001fe06:	c3                   	ret    
c001fe07:	90                   	nop

c001fe08 <IDE::open(int, int, void*)>:
c001fe08:	57                   	push   edi
c001fe09:	56                   	push   esi
c001fe0a:	53                   	push   ebx
c001fe0b:	83 ec 10             	sub    esp,0x10
c001fe0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fe12:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001fe1b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001fe24:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001fe2b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001fe32:	0f 85 84 02 00 00    	jne    c00200bc <IDE::open(int, int, void*)+0x2b4>
c001fe38:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001fe3e:	a8 70                	test   al,0x70
c001fe40:	75 44                	jne    c001fe86 <IDE::open(int, int, void*)+0x7e>
c001fe42:	ba 20 84 00 00       	mov    edx,0x8420
c001fe47:	0f a3 c2             	bt     edx,eax
c001fe4a:	73 3a                	jae    c001fe86 <IDE::open(int, int, void*)+0x7e>
c001fe4c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001fe52:	83 ec 0c             	sub    esp,0xc
c001fe55:	83 e0 fc             	and    eax,0xfffffffc
c001fe58:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001fe5f:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001fe65:	83 e0 fc             	and    eax,0xfffffffc
c001fe68:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001fe6f:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001fe75:	83 e0 fc             	and    eax,0xfffffffc
c001fe78:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001fe7f:	68 ca 8f 02 c0       	push   0xc0028fca
c001fe84:	eb 60                	jmp    c001fee6 <IDE::open(int, int, void*)+0xde>
c001fe86:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001fe90:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001fe9a:	be 64 00 00 00       	mov    esi,0x64
c001fe9f:	57                   	push   edi
c001fea0:	57                   	push   edi
c001fea1:	68 78 b9 02 c0       	push   0xc002b978
c001fea6:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001feaa:	57                   	push   edi
c001feab:	e8 90 07 fe ff       	call   c0000640 <strcpy>
c001feb0:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001feb7:	31 d2                	xor    edx,edx
c001feb9:	89 c8                	mov    eax,ecx
c001febb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001febe:	f7 f6                	div    esi
c001fec0:	be 0a 00 00 00       	mov    esi,0xa
c001fec5:	83 c0 30             	add    eax,0x30
c001fec8:	31 d2                	xor    edx,edx
c001feca:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fece:	89 c8                	mov    eax,ecx
c001fed0:	f7 f6                	div    esi
c001fed2:	89 d1                	mov    ecx,edx
c001fed4:	31 d2                	xor    edx,edx
c001fed6:	83 c1 30             	add    ecx,0x30
c001fed9:	f7 f6                	div    esi
c001fedb:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001fedf:	83 c2 30             	add    edx,0x30
c001fee2:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001fee6:	e8 32 dc fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c001feeb:	bf f8 0c 00 00       	mov    edi,0xcf8
c001fef0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001fef7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001fefe:	c1 e1 10             	shl    ecx,0x10
c001ff01:	c1 e0 0b             	shl    eax,0xb
c001ff04:	83 c4 10             	add    esp,0x10
c001ff07:	09 c1                	or     ecx,eax
c001ff09:	89 fa                	mov    edx,edi
c001ff0b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ff12:	c1 e0 08             	shl    eax,0x8
c001ff15:	09 c1                	or     ecx,eax
c001ff17:	89 c8                	mov    eax,ecx
c001ff19:	0d 08 00 00 80       	or     eax,0x80000008
c001ff1e:	ef                   	out    dx,eax
c001ff1f:	be fc 0c 00 00       	mov    esi,0xcfc
c001ff24:	89 f2                	mov    edx,esi
c001ff26:	ed                   	in     eax,dx
c001ff27:	c1 e8 10             	shr    eax,0x10
c001ff2a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ff2f:	0f 84 e5 00 00 00    	je     c002001a <IDE::open(int, int, void*)+0x212>
c001ff35:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ff3b:	89 fa                	mov    edx,edi
c001ff3d:	89 c8                	mov    eax,ecx
c001ff3f:	ef                   	out    dx,eax
c001ff40:	b0 fe                	mov    al,0xfe
c001ff42:	89 f2                	mov    edx,esi
c001ff44:	ee                   	out    dx,al
c001ff45:	89 c8                	mov    eax,ecx
c001ff47:	89 fa                	mov    edx,edi
c001ff49:	ef                   	out    dx,eax
c001ff4a:	89 f2                	mov    edx,esi
c001ff4c:	ed                   	in     eax,dx
c001ff4d:	3c fe                	cmp    al,0xfe
c001ff4f:	0f 85 85 00 00 00    	jne    c001ffda <IDE::open(int, int, void*)+0x1d2>
c001ff55:	83 ec 0c             	sub    esp,0xc
c001ff58:	68 00 90 02 c0       	push   0xc0029000
c001ff5d:	e8 bb db fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c001ff62:	c7 04 24 7e b9 02 c0 	mov    DWORD PTR [esp],0xc002b97e
c001ff69:	e8 0e 70 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ff6e:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ff78:	c7 04 24 e8 92 02 c0 	mov    DWORD PTR [esp],0xc00292e8
c001ff7f:	e8 99 db fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c001ff84:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ff8b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ff92:	c1 e1 10             	shl    ecx,0x10
c001ff95:	c1 e0 08             	shl    eax,0x8
c001ff98:	89 fa                	mov    edx,edi
c001ff9a:	09 c1                	or     ecx,eax
c001ff9c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ffa3:	c1 e0 0b             	shl    eax,0xb
c001ffa6:	09 c1                	or     ecx,eax
c001ffa8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ffae:	89 c8                	mov    eax,ecx
c001ffb0:	ef                   	out    dx,eax
c001ffb1:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ffb7:	89 f2                	mov    edx,esi
c001ffb9:	ee                   	out    dx,al
c001ffba:	89 c8                	mov    eax,ecx
c001ffbc:	89 fa                	mov    edx,edi
c001ffbe:	ef                   	out    dx,eax
c001ffbf:	89 f2                	mov    edx,esi
c001ffc1:	ed                   	in     eax,dx
c001ffc2:	0f b6 c0             	movzx  eax,al
c001ffc5:	83 c4 10             	add    esp,0x10
c001ffc8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ffce:	74 5a                	je     c002002a <IDE::open(int, int, void*)+0x222>
c001ffd0:	83 ec 0c             	sub    esp,0xc
c001ffd3:	68 93 b9 02 c0       	push   0xc002b993
c001ffd8:	eb 48                	jmp    c0020022 <IDE::open(int, int, void*)+0x21a>
c001ffda:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ffe3:	75 2b                	jne    c0020010 <IDE::open(int, int, void*)+0x208>
c001ffe5:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ffec:	3d 80 00 00 00       	cmp    eax,0x80
c001fff1:	74 07                	je     c001fffa <IDE::open(int, int, void*)+0x1f2>
c001fff3:	3d 8a 00 00 00       	cmp    eax,0x8a
c001fff8:	75 16                	jne    c0020010 <IDE::open(int, int, void*)+0x208>
c001fffa:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020001:	83 ec 0c             	sub    esp,0xc
c0020004:	68 3e 89 02 c0       	push   0xc002893e
c0020009:	e8 0f db fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c002000e:	eb 17                	jmp    c0020027 <IDE::open(int, int, void*)+0x21f>
c0020010:	83 ec 0c             	sub    esp,0xc
c0020013:	68 9b b9 02 c0       	push   0xc002b99b
c0020018:	eb 08                	jmp    c0020022 <IDE::open(int, int, void*)+0x21a>
c002001a:	83 ec 0c             	sub    esp,0xc
c002001d:	68 cc b9 02 c0       	push   0xc002b9cc
c0020022:	e8 e9 04 ff ff       	call   c0010510 <KePanic(char const*)>
c0020027:	83 c4 10             	add    esp,0x10
c002002a:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c0020031:	0f 84 bf 00 00 00    	je     c00200f6 <IDE::open(int, int, void*)+0x2ee>
c0020037:	83 ec 0c             	sub    esp,0xc
c002003a:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020040:	83 e0 fc             	and    eax,0xfffffffc
c0020043:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002004a:	83 c0 08             	add    eax,0x8
c002004d:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020054:	68 f6 b9 02 c0       	push   0xc002b9f6
c0020059:	e8 1e 6f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002005e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0020065:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002006c:	50                   	push   eax
c002006d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020074:	50                   	push   eax
c0020075:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002007c:	50                   	push   eax
c002007d:	ff 35 a0 5d 03 c0    	push   DWORD PTR ds:0xc0035da0
c0020083:	e8 92 f0 ff ff       	call   c001f11a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020088:	83 c4 18             	add    esp,0x18
c002008b:	83 c8 07             	or     eax,0x7
c002008e:	0f b7 c0             	movzx  eax,ax
c0020091:	50                   	push   eax
c0020092:	6a 04                	push   0x4
c0020094:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002009b:	50                   	push   eax
c002009c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00200a3:	50                   	push   eax
c00200a4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00200ab:	50                   	push   eax
c00200ac:	ff 35 a0 5d 03 c0    	push   DWORD PTR ds:0xc0035da0
c00200b2:	e8 9f f2 ff ff       	call   c001f356 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c00200b7:	83 c4 20             	add    esp,0x20
c00200ba:	eb 3a                	jmp    c00200f6 <IDE::open(int, int, void*)+0x2ee>
c00200bc:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00200c2:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00200c9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00200d0:	05 06 02 00 00       	add    eax,0x206
c00200d5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00200dc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00200e3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00200ea:	05 06 02 00 00       	add    eax,0x206
c00200ef:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00200f6:	83 ec 0c             	sub    esp,0xc
c00200f9:	68 a0 98 02 c0       	push   0xc00298a0
c00200fe:	e8 1a da fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020103:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020109:	83 c4 10             	add    esp,0x10
c002010c:	89 c2                	mov    edx,eax
c002010e:	83 e2 0f             	and    edx,0xf
c0020111:	83 fa 08             	cmp    edx,0x8
c0020114:	75 0a                	jne    c0020120 <IDE::open(int, int, void*)+0x318>
c0020116:	83 e8 02             	sub    eax,0x2
c0020119:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020120:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020126:	89 c2                	mov    edx,eax
c0020128:	83 e2 0f             	and    edx,0xf
c002012b:	83 fa 08             	cmp    edx,0x8
c002012e:	75 0a                	jne    c002013a <IDE::open(int, int, void*)+0x332>
c0020130:	83 e8 02             	sub    eax,0x2
c0020133:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002013a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020141:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020148:	89 d0                	mov    eax,edx
c002014a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002014d:	8d 7a 01             	lea    edi,[edx+0x1]
c0020150:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020154:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020158:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002015c:	83 e1 3f             	and    ecx,0x3f
c002015f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0020163:	89 f9                	mov    ecx,edi
c0020165:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002016c:	0f b6 c9             	movzx  ecx,cl
c002016f:	8d 78 02             	lea    edi,[eax+0x2]
c0020172:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020175:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020179:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002017d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c0020181:	83 e2 3f             	and    edx,0x3f
c0020184:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0020188:	89 f9                	mov    ecx,edi
c002018a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020190:	0f b6 d1             	movzx  edx,cl
c0020193:	8d 78 03             	lea    edi,[eax+0x3]
c0020196:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020199:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002019d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00201a1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c00201a5:	83 e1 3f             	and    ecx,0x3f
c00201a8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c00201ac:	89 fa                	mov    edx,edi
c00201ae:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00201b4:	0f b6 ca             	movzx  ecx,dl
c00201b7:	8d 78 04             	lea    edi,[eax+0x4]
c00201ba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00201bd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00201c1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00201c5:	89 fa                	mov    edx,edi
c00201c7:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00201cd:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c00201d1:	83 e2 3f             	and    edx,0x3f
c00201d4:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c00201d8:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00201df:	66 85 f6             	test   si,si
c00201e2:	74 24                	je     c0020208 <IDE::open(int, int, void*)+0x400>
c00201e4:	89 f9                	mov    ecx,edi
c00201e6:	83 c0 05             	add    eax,0x5
c00201e9:	0f b6 d1             	movzx  edx,cl
c00201ec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00201ef:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00201f3:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00201f7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00201fd:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c0020201:	83 e0 3f             	and    eax,0x3f
c0020204:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	68 16 8e 02 c0       	push   0xc0028e16
c0020210:	e8 08 d9 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020215:	58                   	pop    eax
c0020216:	5a                   	pop    edx
c0020217:	6a 00                	push   0x0
c0020219:	53                   	push   ebx
c002021a:	e8 6f f9 ff ff       	call   c001fb8e <IDE::prepareInterrupt(unsigned char)>
c002021f:	59                   	pop    ecx
c0020220:	5e                   	pop    esi
c0020221:	6a 01                	push   0x1
c0020223:	53                   	push   ebx
c0020224:	e8 65 f9 ff ff       	call   c001fb8e <IDE::prepareInterrupt(unsigned char)>
c0020229:	c7 04 24 24 b2 02 c0 	mov    DWORD PTR [esp],0xc002b224
c0020230:	e8 e8 d8 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020235:	83 c4 0c             	add    esp,0xc
c0020238:	6a 00                	push   0x0
c002023a:	6a 00                	push   0x0
c002023c:	53                   	push   ebx
c002023d:	e8 7c fb ff ff       	call   c001fdbe <IDE::enableIRQs(unsigned char, bool)>
c0020242:	83 c4 0c             	add    esp,0xc
c0020245:	6a 00                	push   0x0
c0020247:	6a 01                	push   0x1
c0020249:	53                   	push   ebx
c002024a:	e8 6f fb ff ff       	call   c001fdbe <IDE::enableIRQs(unsigned char, bool)>
c002024f:	c7 04 24 0e ba 02 c0 	mov    DWORD PTR [esp],0xc002ba0e
c0020256:	e8 c2 d8 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c002025b:	83 c4 10             	add    esp,0x10
c002025e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020265:	74 3c                	je     c00202a3 <IDE::open(int, int, void*)+0x49b>
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	53                   	push   ebx
c002026b:	6a 01                	push   0x1
c002026d:	68 85 fd 01 c0       	push   0xc001fd85
c0020272:	6a 0e                	push   0xe
c0020274:	53                   	push   ebx
c0020275:	e8 d2 9f fe ff       	call   c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002027a:	83 c4 14             	add    esp,0x14
c002027d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020283:	53                   	push   ebx
c0020284:	6a 01                	push   0x1
c0020286:	68 a1 fd 01 c0       	push   0xc001fda1
c002028b:	6a 0f                	push   0xf
c002028d:	53                   	push   ebx
c002028e:	e8 b9 9f fe ff       	call   c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020293:	83 c4 14             	add    esp,0x14
c0020296:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002029c:	68 ee 94 02 c0       	push   0xc00294ee
c00202a1:	eb 40                	jmp    c00202e3 <IDE::open(int, int, void*)+0x4db>
c00202a3:	83 ec 0c             	sub    esp,0xc
c00202a6:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00202b0:	53                   	push   ebx
c00202b1:	6a 00                	push   0x0
c00202b3:	68 85 fd 01 c0       	push   0xc001fd85
c00202b8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00202be:	53                   	push   ebx
c00202bf:	e8 88 9f fe ff       	call   c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00202c4:	83 c4 14             	add    esp,0x14
c00202c7:	53                   	push   ebx
c00202c8:	6a 00                	push   0x0
c00202ca:	68 a1 fd 01 c0       	push   0xc001fda1
c00202cf:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00202d5:	53                   	push   ebx
c00202d6:	e8 71 9f fe ff       	call   c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00202db:	83 c4 14             	add    esp,0x14
c00202de:	68 26 a2 02 c0       	push   0xc002a226
c00202e3:	e8 35 d8 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00202e8:	83 c4 10             	add    esp,0x10
c00202eb:	83 ec 0c             	sub    esp,0xc
c00202ee:	68 10 ba 02 c0       	push   0xc002ba10
c00202f3:	e8 25 d8 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00202f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00202fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202fd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020300:	c7 04 24 99 a6 02 c0 	mov    DWORD PTR [esp],0xc002a699
c0020307:	e8 11 d8 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c002030c:	83 c4 0c             	add    esp,0xc
c002030f:	6a 07                	push   0x7
c0020311:	6a 00                	push   0x0
c0020313:	53                   	push   ebx
c0020314:	e8 5b f9 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020319:	83 c4 0c             	add    esp,0xc
c002031c:	6a 07                	push   0x7
c002031e:	6a 01                	push   0x1
c0020320:	53                   	push   ebx
c0020321:	e8 4e f9 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020326:	c7 04 24 30 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f30
c002032d:	e8 eb d7 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020332:	83 c4 0c             	add    esp,0xc
c0020335:	6a 01                	push   0x1
c0020337:	6a 00                	push   0x0
c0020339:	53                   	push   ebx
c002033a:	e8 7f fa ff ff       	call   c001fdbe <IDE::enableIRQs(unsigned char, bool)>
c002033f:	83 c4 0c             	add    esp,0xc
c0020342:	6a 01                	push   0x1
c0020344:	6a 01                	push   0x1
c0020346:	53                   	push   ebx
c0020347:	e8 72 fa ff ff       	call   c001fdbe <IDE::enableIRQs(unsigned char, bool)>
c002034c:	c7 04 24 13 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba13
c0020353:	e8 c5 d7 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020358:	83 c4 20             	add    esp,0x20
c002035b:	31 c0                	xor    eax,eax
c002035d:	5b                   	pop    ebx
c002035e:	5e                   	pop    esi
c002035f:	5f                   	pop    edi
c0020360:	c3                   	ret    
c0020361:	90                   	nop

c0020362 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020362:	55                   	push   ebp
c0020363:	57                   	push   edi
c0020364:	56                   	push   esi
c0020365:	53                   	push   ebx
c0020366:	83 ec 1c             	sub    esp,0x1c
c0020369:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002036d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020371:	8d 42 f8             	lea    eax,[edx-0x8]
c0020374:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020378:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002037c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020380:	3c 03                	cmp    al,0x3
c0020382:	77 5a                	ja     c00203de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c0020384:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020388:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002038c:	0f b6 db             	movzx  ebx,bl
c002038f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020392:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020397:	0c 80                	or     al,0x80
c0020399:	50                   	push   eax
c002039a:	6a 0c                	push   0xc
c002039c:	53                   	push   ebx
c002039d:	56                   	push   esi
c002039e:	e8 11 f8 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203a3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c00203a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00203ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00203b0:	0f b6 d2             	movzx  edx,dl
c00203b3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c00203b7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00203b9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00203be:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00203c2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00203ca:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00203d2:	83 c4 2c             	add    esp,0x2c
c00203d5:	5b                   	pop    ebx
c00203d6:	5e                   	pop    esi
c00203d7:	5f                   	pop    edi
c00203d8:	5d                   	pop    ebp
c00203d9:	e9 d6 f7 ff ff       	jmp    c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203de:	0f b6 c2             	movzx  eax,dl
c00203e1:	83 f8 07             	cmp    eax,0x7
c00203e4:	77 12                	ja     c00203f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c00203e6:	0f b6 c2             	movzx  eax,dl
c00203e9:	0f b6 db             	movzx  ebx,bl
c00203ec:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c00203f4:	01 c2                	add    edx,eax
c00203f6:	eb 2f                	jmp    c0020427 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c00203f8:	83 f8 0d             	cmp    eax,0xd
c00203fb:	77 13                	ja     c0020410 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c00203fd:	0f b6 db             	movzx  ebx,bl
c0020400:	0f b6 d2             	movzx  edx,dl
c0020403:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002040a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002040e:	eb 17                	jmp    c0020427 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c0020410:	83 f8 15             	cmp    eax,0x15
c0020413:	77 14                	ja     c0020429 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c0020415:	0f b6 db             	movzx  ebx,bl
c0020418:	0f b6 d2             	movzx  edx,dl
c002041b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c0020423:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020427:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020429:	83 c4 1c             	add    esp,0x1c
c002042c:	5b                   	pop    ebx
c002042d:	5e                   	pop    esi
c002042e:	5f                   	pop    edi
c002042f:	5d                   	pop    ebp
c0020430:	c3                   	ret    
c0020431:	90                   	nop

c0020432 <IDE::detect()>:
c0020432:	55                   	push   ebp
c0020433:	57                   	push   edi
c0020434:	56                   	push   esi
c0020435:	53                   	push   ebx
c0020436:	81 ec 28 02 00 00    	sub    esp,0x228
c002043c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c0020443:	68 15 ba 02 c0       	push   0xc002ba15
c0020448:	e8 d0 d6 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c002044d:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c0020453:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0020457:	83 c4 10             	add    esp,0x10
c002045a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c002045f:	0f 85 2f 04 00 00    	jne    c0020894 <IDE::detect()+0x462>
c0020465:	83 ec 0c             	sub    esp,0xc
c0020468:	31 f6                	xor    esi,esi
c002046a:	68 18 ba 02 c0       	push   0xc002ba18
c002046f:	31 ff                	xor    edi,edi
c0020471:	e8 a7 d6 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020476:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002047d:	83 c4 10             	add    esp,0x10
c0020480:	83 ec 0c             	sub    esp,0xc
c0020483:	68 1b ba 02 c0       	push   0xc002ba1b
c0020488:	e8 90 d6 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c002048d:	83 c4 10             	add    esp,0x10
c0020490:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020497:	83 ec 0c             	sub    esp,0xc
c002049a:	31 ed                	xor    ebp,ebp
c002049c:	68 1e ba 02 c0       	push   0xc002ba1e
c00204a1:	e8 77 d6 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00204a6:	89 f8                	mov    eax,edi
c00204a8:	c1 e0 06             	shl    eax,0x6
c00204ab:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00204b3:	c7 04 24 21 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba21
c00204ba:	e8 5e d6 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00204bf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00204c3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00204c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204cb:	c1 e0 04             	shl    eax,0x4
c00204ce:	83 c8 a0             	or     eax,0xffffffa0
c00204d1:	0f b6 c0             	movzx  eax,al
c00204d4:	50                   	push   eax
c00204d5:	6a 06                	push   0x6
c00204d7:	56                   	push   esi
c00204d8:	53                   	push   ebx
c00204d9:	e8 d6 f6 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204de:	83 c4 1c             	add    esp,0x1c
c00204e1:	6a 0c                	push   0xc
c00204e3:	56                   	push   esi
c00204e4:	53                   	push   ebx
c00204e5:	e8 8a f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c00204ea:	83 c4 0c             	add    esp,0xc
c00204ed:	6a 0c                	push   0xc
c00204ef:	56                   	push   esi
c00204f0:	53                   	push   ebx
c00204f1:	e8 7e f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c00204f6:	83 c4 0c             	add    esp,0xc
c00204f9:	6a 0c                	push   0xc
c00204fb:	56                   	push   esi
c00204fc:	53                   	push   ebx
c00204fd:	e8 72 f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020502:	83 c4 0c             	add    esp,0xc
c0020505:	6a 0c                	push   0xc
c0020507:	56                   	push   esi
c0020508:	53                   	push   ebx
c0020509:	e8 66 f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c002050e:	c7 04 24 24 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba24
c0020515:	e8 03 d6 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c002051a:	68 ec 00 00 00       	push   0xec
c002051f:	6a 07                	push   0x7
c0020521:	56                   	push   esi
c0020522:	53                   	push   ebx
c0020523:	e8 8c f6 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020528:	83 c4 1c             	add    esp,0x1c
c002052b:	6a 0c                	push   0xc
c002052d:	56                   	push   esi
c002052e:	53                   	push   ebx
c002052f:	e8 40 f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020534:	83 c4 0c             	add    esp,0xc
c0020537:	6a 0c                	push   0xc
c0020539:	56                   	push   esi
c002053a:	53                   	push   ebx
c002053b:	e8 34 f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020540:	83 c4 0c             	add    esp,0xc
c0020543:	6a 0c                	push   0xc
c0020545:	56                   	push   esi
c0020546:	53                   	push   ebx
c0020547:	e8 28 f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c002054c:	83 c4 0c             	add    esp,0xc
c002054f:	6a 0c                	push   0xc
c0020551:	56                   	push   esi
c0020552:	53                   	push   ebx
c0020553:	e8 1c f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020558:	c7 04 24 27 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba27
c002055f:	e8 b9 d5 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020564:	83 c4 0c             	add    esp,0xc
c0020567:	6a 0c                	push   0xc
c0020569:	56                   	push   esi
c002056a:	53                   	push   ebx
c002056b:	e8 04 f7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020570:	83 c4 10             	add    esp,0x10
c0020573:	84 c0                	test   al,al
c0020575:	75 1f                	jne    c0020596 <IDE::detect()+0x164>
c0020577:	83 ec 0c             	sub    esp,0xc
c002057a:	68 2a ba 02 c0       	push   0xc002ba2a
c002057f:	e8 99 d5 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020584:	e9 e9 02 00 00       	jmp    c0020872 <IDE::detect()+0x440>
c0020589:	a8 80                	test   al,0x80
c002058b:	74 21                	je     c00205ae <IDE::detect()+0x17c>
c002058d:	45                   	inc    ebp
c002058e:	81 fd 17 01 00 00    	cmp    ebp,0x117
c0020594:	7f 1e                	jg     c00205b4 <IDE::detect()+0x182>
c0020596:	50                   	push   eax
c0020597:	6a 0c                	push   0xc
c0020599:	56                   	push   esi
c002059a:	53                   	push   ebx
c002059b:	e8 d4 f6 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c00205a0:	83 c4 10             	add    esp,0x10
c00205a3:	a8 01                	test   al,0x1
c00205a5:	74 e2                	je     c0020589 <IDE::detect()+0x157>
c00205a7:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00205ac:	eb 23                	jmp    c00205d1 <IDE::detect()+0x19f>
c00205ae:	a8 08                	test   al,0x8
c00205b0:	74 db                	je     c002058d <IDE::detect()+0x15b>
c00205b2:	eb 18                	jmp    c00205cc <IDE::detect()+0x19a>
c00205b4:	50                   	push   eax
c00205b5:	50                   	push   eax
c00205b6:	6a 00                	push   0x0
c00205b8:	6a 32                	push   0x32
c00205ba:	e8 dd 6c ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c00205bf:	83 c4 10             	add    esp,0x10
c00205c2:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c00205c8:	75 cc                	jne    c0020596 <IDE::detect()+0x164>
c00205ca:	eb db                	jmp    c00205a7 <IDE::detect()+0x175>
c00205cc:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c00205d1:	83 ec 0c             	sub    esp,0xc
c00205d4:	68 2d ba 02 c0       	push   0xc002ba2d
c00205d9:	e8 3f d5 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00205de:	83 c4 10             	add    esp,0x10
c00205e1:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c00205e6:	74 5f                	je     c0020647 <IDE::detect()+0x215>
c00205e8:	51                   	push   ecx
c00205e9:	6a 04                	push   0x4
c00205eb:	56                   	push   esi
c00205ec:	53                   	push   ebx
c00205ed:	e8 82 f6 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c00205f2:	83 c4 0c             	add    esp,0xc
c00205f5:	89 c5                	mov    ebp,eax
c00205f7:	6a 05                	push   0x5
c00205f9:	56                   	push   esi
c00205fa:	53                   	push   ebx
c00205fb:	e8 74 f6 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020600:	83 c4 10             	add    esp,0x10
c0020603:	89 e9                	mov    ecx,ebp
c0020605:	0f b6 c0             	movzx  eax,al
c0020608:	0f b6 e9             	movzx  ebp,cl
c002060b:	83 fd 14             	cmp    ebp,0x14
c002060e:	75 07                	jne    c0020617 <IDE::detect()+0x1e5>
c0020610:	3d eb 00 00 00       	cmp    eax,0xeb
c0020615:	eb 0e                	jmp    c0020625 <IDE::detect()+0x1f3>
c0020617:	3d 96 00 00 00       	cmp    eax,0x96
c002061c:	0f 85 53 02 00 00    	jne    c0020875 <IDE::detect()+0x443>
c0020622:	83 fd 69             	cmp    ebp,0x69
c0020625:	0f 85 4a 02 00 00    	jne    c0020875 <IDE::detect()+0x443>
c002062b:	68 a1 00 00 00       	push   0xa1
c0020630:	6a 07                	push   0x7
c0020632:	56                   	push   esi
c0020633:	53                   	push   ebx
c0020634:	e8 7b f5 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020639:	58                   	pop    eax
c002063a:	5a                   	pop    edx
c002063b:	6a 00                	push   0x0
c002063d:	6a 0a                	push   0xa
c002063f:	e8 58 6c ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c0020644:	83 c4 10             	add    esp,0x10
c0020647:	83 ec 0c             	sub    esp,0xc
c002064a:	89 fd                	mov    ebp,edi
c002064c:	68 30 ba 02 c0       	push   0xc002ba30
c0020651:	c1 e5 06             	shl    ebp,0x6
c0020654:	e8 c4 d4 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020659:	01 dd                	add    ebp,ebx
c002065b:	8d 54 24 20          	lea    edx,[esp+0x20]
c002065f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0020666:	52                   	push   edx
c0020667:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002066b:	6a 00                	push   0x0
c002066d:	56                   	push   esi
c002066e:	53                   	push   ebx
c002066f:	e8 ee fc ff ff       	call   c0020362 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0020674:	83 c4 14             	add    esp,0x14
c0020677:	68 34 ba 02 c0       	push   0xc002ba34
c002067c:	e8 9c d4 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020681:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0020686:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c002068d:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c0020694:	89 f0                	mov    eax,esi
c0020696:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c002069c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00206a0:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c00206a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206aa:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c00206b1:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c00206b9:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c00206c0:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c00206c8:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c00206ce:	c7 04 24 38 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba38
c00206d5:	e8 43 d4 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00206da:	83 c4 10             	add    esp,0x10
c00206dd:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c00206e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00206e8:	74 09                	je     c00206f3 <IDE::detect()+0x2c1>
c00206ea:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c00206f1:	eb 07                	jmp    c00206fa <IDE::detect()+0x2c8>
c00206f3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00206fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00206fe:	89 f8                	mov    eax,edi
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	c1 e0 06             	shl    eax,0x6
c0020706:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0020709:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c002070f:	68 3c ba 02 c0       	push   0xc002ba3c
c0020714:	e8 04 d4 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020719:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002071d:	89 e8                	mov    eax,ebp
c002071f:	83 c4 10             	add    esp,0x10
c0020722:	8d 6a 28             	lea    ebp,[edx+0x28]
c0020725:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c0020728:	83 c0 02             	add    eax,0x2
c002072b:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c0020731:	83 c2 02             	add    edx,0x2
c0020734:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c0020737:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c002073d:	39 d5                	cmp    ebp,edx
c002073f:	75 e4                	jne    c0020725 <IDE::detect()+0x2f3>
c0020741:	89 f8                	mov    eax,edi
c0020743:	c1 e0 06             	shl    eax,0x6
c0020746:	01 d8                	add    eax,ebx
c0020748:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002074f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0020756:	c1 ea 09             	shr    edx,0x9
c0020759:	83 e2 01             	and    edx,0x1
c002075c:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c0020763:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0020769:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c002076d:	74 0c                	je     c002077b <IDE::detect()+0x349>
c002076f:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c0020778:	0f 95 c2             	setne  dl
c002077b:	83 ec 0c             	sub    esp,0xc
c002077e:	89 fd                	mov    ebp,edi
c0020780:	c1 e5 06             	shl    ebp,0x6
c0020783:	01 dd                	add    ebp,ebx
c0020785:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c002078b:	68 40 ba 02 c0       	push   0xc002ba40
c0020790:	e8 88 d3 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020795:	83 c4 10             	add    esp,0x10
c0020798:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c002079d:	75 66                	jne    c0020805 <IDE::detect()+0x3d3>
c002079f:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c00207a6:	0f 84 b8 00 00 00    	je     c0020864 <IDE::detect()+0x432>
c00207ac:	83 ec 0c             	sub    esp,0xc
c00207af:	68 44 ba 02 c0       	push   0xc002ba44
c00207b4:	e8 64 d3 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00207b9:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c00207c0:	e8 f6 f8 fe ff       	call   c00100bb <malloc>
c00207c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00207c8:	89 c5                	mov    ebp,eax
c00207ca:	e8 43 05 00 00       	call   c0020d12 <ATA::ATA()>
c00207cf:	c7 04 24 48 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba48
c00207d6:	e8 42 d3 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00207db:	59                   	pop    ecx
c00207dc:	58                   	pop    eax
c00207dd:	55                   	push   ebp
c00207de:	53                   	push   ebx
c00207df:	e8 bc 9a fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c00207e4:	c7 04 24 4d ba 02 c0 	mov    DWORD PTR [esp],0xc002ba4d
c00207eb:	e8 2d d3 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c00207f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00207f3:	53                   	push   ebx
c00207f4:	57                   	push   edi
c00207f5:	6a 00                	push   0x0
c00207f7:	55                   	push   ebp
c00207f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00207fb:	83 c4 14             	add    esp,0x14
c00207fe:	68 52 ba 02 c0       	push   0xc002ba52
c0020803:	eb 57                	jmp    c002085c <IDE::detect()+0x42a>
c0020805:	83 ec 0c             	sub    esp,0xc
c0020808:	68 57 ba 02 c0       	push   0xc002ba57
c002080d:	e8 0b d3 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020812:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0020819:	e8 9d f8 fe ff       	call   c00100bb <malloc>
c002081e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020821:	89 c5                	mov    ebp,eax
c0020823:	e8 98 0c 00 00       	call   c00214c0 <ATAPI::ATAPI()>
c0020828:	c7 04 24 5d ba 02 c0 	mov    DWORD PTR [esp],0xc002ba5d
c002082f:	e8 e9 d2 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020834:	58                   	pop    eax
c0020835:	5a                   	pop    edx
c0020836:	55                   	push   ebp
c0020837:	53                   	push   ebx
c0020838:	e8 63 9a fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c002083d:	c7 04 24 64 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba64
c0020844:	e8 d4 d2 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020849:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002084c:	53                   	push   ebx
c002084d:	57                   	push   edi
c002084e:	6a 00                	push   0x0
c0020850:	55                   	push   ebp
c0020851:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020854:	83 c4 14             	add    esp,0x14
c0020857:	68 6b ba 02 c0       	push   0xc002ba6b
c002085c:	e8 bc d2 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020861:	83 c4 10             	add    esp,0x10
c0020864:	83 ec 0c             	sub    esp,0xc
c0020867:	47                   	inc    edi
c0020868:	68 72 ba 02 c0       	push   0xc002ba72
c002086d:	e8 ab d2 fe ff       	call   c000db1d <KeSetBootMessage(char const*)>
c0020872:	83 c4 10             	add    esp,0x10
c0020875:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c0020879:	74 0c                	je     c0020887 <IDE::detect()+0x455>
c002087b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0020882:	e9 10 fc ff ff       	jmp    c0020497 <IDE::detect()+0x65>
c0020887:	4e                   	dec    esi
c0020888:	74 0a                	je     c0020894 <IDE::detect()+0x462>
c002088a:	be 01 00 00 00       	mov    esi,0x1
c002088f:	e9 ec fb ff ff       	jmp    c0020480 <IDE::detect()+0x4e>
c0020894:	81 c4 1c 02 00 00    	add    esp,0x21c
c002089a:	5b                   	pop    ebx
c002089b:	5e                   	pop    esi
c002089c:	5f                   	pop    edi
c002089d:	5d                   	pop    ebp
c002089e:	c3                   	ret    
c002089f:	90                   	nop

c00208a0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00208a0:	55                   	push   ebp
c00208a1:	57                   	push   edi
c00208a2:	56                   	push   esi
c00208a3:	53                   	push   ebx
c00208a4:	83 ec 1c             	sub    esp,0x1c
c00208a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00208ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00208af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00208b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00208bb:	88 c3                	mov    bl,al
c00208bd:	25 ff 00 00 00       	and    eax,0xff
c00208c2:	0f 84 88 00 00 00    	je     c0020950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c00208c8:	83 ec 0c             	sub    esp,0xc
c00208cb:	89 c7                	mov    edi,eax
c00208cd:	68 76 ba 02 c0       	push   0xc002ba76
c00208d2:	e8 a5 66 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00208d7:	83 c4 10             	add    esp,0x10
c00208da:	83 ff 01             	cmp    edi,0x1
c00208dd:	74 6b                	je     c002094a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c00208df:	83 ff 02             	cmp    edi,0x2
c00208e2:	75 58                	jne    c002093c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c00208e4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00208e9:	01 ff                	add    edi,edi
c00208eb:	50                   	push   eax
c00208ec:	09 fe                	or     esi,edi
c00208ee:	6a 01                	push   0x1
c00208f0:	89 f0                	mov    eax,esi
c00208f2:	0f b6 f0             	movzx  esi,al
c00208f5:	c1 e6 06             	shl    esi,0x6
c00208f8:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c0020900:	50                   	push   eax
c0020901:	55                   	push   ebp
c0020902:	e8 6d f3 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020907:	83 c4 10             	add    esp,0x10
c002090a:	a8 01                	test   al,0x1
c002090c:	74 02                	je     c0020910 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002090e:	b3 07                	mov    bl,0x7
c0020910:	a8 02                	test   al,0x2
c0020912:	74 02                	je     c0020916 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c0020914:	b3 03                	mov    bl,0x3
c0020916:	a8 04                	test   al,0x4
c0020918:	74 02                	je     c002091c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002091a:	b3 14                	mov    bl,0x14
c002091c:	a8 08                	test   al,0x8
c002091e:	74 02                	je     c0020922 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c0020920:	b3 03                	mov    bl,0x3
c0020922:	a8 10                	test   al,0x10
c0020924:	74 02                	je     c0020928 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c0020926:	b3 15                	mov    bl,0x15
c0020928:	a8 20                	test   al,0x20
c002092a:	74 02                	je     c002092e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002092c:	b3 03                	mov    bl,0x3
c002092e:	a8 40                	test   al,0x40
c0020930:	74 02                	je     c0020934 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0020932:	b3 16                	mov    bl,0x16
c0020934:	a8 80                	test   al,0x80
c0020936:	74 18                	je     c0020950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0020938:	b3 0d                	mov    bl,0xd
c002093a:	eb 14                	jmp    c0020950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002093c:	83 ff 03             	cmp    edi,0x3
c002093f:	74 0d                	je     c002094e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c0020941:	83 ff 04             	cmp    edi,0x4
c0020944:	75 0a                	jne    c0020950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0020946:	b3 08                	mov    bl,0x8
c0020948:	eb 06                	jmp    c0020950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002094a:	b3 13                	mov    bl,0x13
c002094c:	eb 02                	jmp    c0020950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002094e:	b3 17                	mov    bl,0x17
c0020950:	83 c4 1c             	add    esp,0x1c
c0020953:	88 d8                	mov    al,bl
c0020955:	5b                   	pop    ebx
c0020956:	5e                   	pop    esi
c0020957:	5f                   	pop    edi
c0020958:	5d                   	pop    ebp
c0020959:	c3                   	ret    

c002095a <IDE::polling(unsigned char, unsigned int)>:
c002095a:	57                   	push   edi
c002095b:	56                   	push   esi
c002095c:	53                   	push   ebx
c002095d:	bb 04 00 00 00       	mov    ebx,0x4
c0020962:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0020966:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002096b:	52                   	push   edx
c002096c:	6a 0c                	push   0xc
c002096e:	56                   	push   esi
c002096f:	57                   	push   edi
c0020970:	e8 ff f2 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020975:	83 c4 10             	add    esp,0x10
c0020978:	4b                   	dec    ebx
c0020979:	75 f0                	jne    c002096b <IDE::polling(unsigned char, unsigned int)+0x11>
c002097b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020980:	50                   	push   eax
c0020981:	6a 0c                	push   0xc
c0020983:	56                   	push   esi
c0020984:	57                   	push   edi
c0020985:	e8 ea f2 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c002098a:	83 c4 10             	add    esp,0x10
c002098d:	a8 01                	test   al,0x1
c002098f:	75 17                	jne    c00209a8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0020991:	a8 20                	test   al,0x20
c0020993:	75 0f                	jne    c00209a4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0020995:	4b                   	dec    ebx
c0020996:	74 10                	je     c00209a8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0020998:	a8 80                	test   al,0x80
c002099a:	75 e4                	jne    c0020980 <IDE::polling(unsigned char, unsigned int)+0x26>
c002099c:	a8 08                	test   al,0x8
c002099e:	74 e0                	je     c0020980 <IDE::polling(unsigned char, unsigned int)+0x26>
c00209a0:	31 c0                	xor    eax,eax
c00209a2:	eb 06                	jmp    c00209aa <IDE::polling(unsigned char, unsigned int)+0x50>
c00209a4:	b0 01                	mov    al,0x1
c00209a6:	eb 02                	jmp    c00209aa <IDE::polling(unsigned char, unsigned int)+0x50>
c00209a8:	b0 02                	mov    al,0x2
c00209aa:	5b                   	pop    ebx
c00209ab:	5e                   	pop    esi
c00209ac:	5f                   	pop    edi
c00209ad:	c3                   	ret    

c00209ae <SATABus::close(int, int, void*)>:
c00209ae:	31 c0                	xor    eax,eax
c00209b0:	c3                   	ret    
c00209b1:	90                   	nop

c00209b2 <SATABus::detect()>:
c00209b2:	c3                   	ret    
c00209b3:	90                   	nop

c00209b4 <SATABus::SATABus()>:
c00209b4:	83 ec 0c             	sub    esp,0xc
c00209b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209bb:	83 ec 08             	sub    esp,0x8
c00209be:	68 b0 ba 02 c0       	push   0xc002bab0
c00209c3:	50                   	push   eax
c00209c4:	e8 2f 9c fe ff       	call   c000a5f8 <HardDiskController::HardDiskController(char const*)>
c00209c9:	83 c4 10             	add    esp,0x10
c00209cc:	ba dc ba 02 c0       	mov    edx,0xc002badc
c00209d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d5:	89 10                	mov    DWORD PTR [eax],edx
c00209d7:	83 ec 0c             	sub    esp,0xc
c00209da:	6a 50                	push   0x50
c00209dc:	e8 0a fe fe ff       	call   c00107eb <Phys::allocateContiguousPages(int)>
c00209e1:	83 c4 10             	add    esp,0x10
c00209e4:	89 c2                	mov    edx,eax
c00209e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00209f0:	83 ec 0c             	sub    esp,0xc
c00209f3:	6a 50                	push   0x50
c00209f5:	e8 ad 30 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c00209fa:	83 c4 10             	add    esp,0x10
c00209fd:	89 c2                	mov    edx,eax
c00209ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a09:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c0020a0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020a12:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0020a18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020a1c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020a22:	83 ec 0c             	sub    esp,0xc
c0020a25:	6a 03                	push   0x3
c0020a27:	6a 50                	push   0x50
c0020a29:	51                   	push   ecx
c0020a2a:	52                   	push   edx
c0020a2b:	50                   	push   eax
c0020a2c:	e8 43 39 ff ff       	call   c0014374 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0020a31:	83 c4 20             	add    esp,0x20
c0020a34:	90                   	nop
c0020a35:	83 c4 0c             	add    esp,0xc
c0020a38:	c3                   	ret    
c0020a39:	90                   	nop

c0020a3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0020a3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a3e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0020a41:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020a44:	09 c2                	or     edx,eax
c0020a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020a50:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020a52:	31 c0                	xor    eax,eax
c0020a54:	c1 e9 08             	shr    ecx,0x8
c0020a57:	83 e1 0f             	and    ecx,0xf
c0020a5a:	39 c8                	cmp    eax,ecx
c0020a5c:	74 0a                	je     c0020a68 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0020a5e:	f6 c2 01             	test   dl,0x1
c0020a61:	74 08                	je     c0020a6b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0020a63:	d1 ea                	shr    edx,1
c0020a65:	40                   	inc    eax
c0020a66:	eb f2                	jmp    c0020a5a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0020a68:	83 c8 ff             	or     eax,0xffffffff
c0020a6b:	c3                   	ret    

c0020a6c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0020a6c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020a70:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0020a73:	89 c2                	mov    edx,eax
c0020a75:	c1 ea 08             	shr    edx,0x8
c0020a78:	83 e2 0f             	and    edx,0xf
c0020a7b:	4a                   	dec    edx
c0020a7c:	75 32                	jne    c0020ab0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0020a7e:	83 e0 0f             	and    eax,0xf
c0020a81:	83 f8 03             	cmp    eax,0x3
c0020a84:	75 2a                	jne    c0020ab0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0020a86:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0020a89:	b8 02 00 00 00       	mov    eax,0x2
c0020a8e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0020a94:	74 1c                	je     c0020ab2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0020a96:	b8 04 00 00 00       	mov    eax,0x4
c0020a9b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0020aa1:	74 0f                	je     c0020ab2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0020aa3:	31 c0                	xor    eax,eax
c0020aa5:	83 fa 03             	cmp    edx,0x3
c0020aa8:	0f 94 c0             	sete   al
c0020aab:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0020aaf:	c3                   	ret    
c0020ab0:	31 c0                	xor    eax,eax
c0020ab2:	c3                   	ret    
c0020ab3:	90                   	nop

c0020ab4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0020ab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ab8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020abb:	0f ba e2 0f          	bt     edx,0xf
c0020abf:	72 f7                	jb     c0020ab8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0020ac1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020ac4:	83 ca 10             	or     edx,0x10
c0020ac7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020aca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020acd:	83 ca 01             	or     edx,0x1
c0020ad0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020ad3:	c3                   	ret    

c0020ad4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0020ad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ad8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020adb:	83 e2 fe             	and    edx,0xfffffffe
c0020ade:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020ae1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020ae4:	83 e2 ef             	and    edx,0xffffffef
c0020ae7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020aea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020aed:	0f ba e2 0e          	bt     edx,0xe
c0020af1:	72 f7                	jb     c0020aea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0020af3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020af6:	0f ba e2 0f          	bt     edx,0xf
c0020afa:	72 ee                	jb     c0020aea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0020afc:	c3                   	ret    
c0020afd:	90                   	nop

c0020afe <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0020afe:	55                   	push   ebp
c0020aff:	57                   	push   edi
c0020b00:	56                   	push   esi
c0020b01:	53                   	push   ebx
c0020b02:	83 ec 1c             	sub    esp,0x1c
c0020b05:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020b09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020b0d:	53                   	push   ebx
c0020b0e:	56                   	push   esi
c0020b0f:	e8 c0 ff ff ff       	call   c0020ad4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020b14:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0020b18:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0020b1e:	83 ec 0c             	sub    esp,0xc
c0020b21:	c1 e5 0a             	shl    ebp,0xa
c0020b24:	01 e8                	add    eax,ebp
c0020b26:	89 03                	mov    DWORD PTR [ebx],eax
c0020b28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020b2a:	68 00 04 00 00       	push   0x400
c0020b2f:	6a 00                	push   0x0
c0020b31:	50                   	push   eax
c0020b32:	e8 b9 f9 fd ff       	call   c00004f0 <memset>
c0020b37:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0020b3d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020b41:	01 e8                	add    eax,ebp
c0020b43:	83 c4 1c             	add    esp,0x1c
c0020b46:	89 03                	mov    DWORD PTR [ebx],eax
c0020b48:	c1 e2 08             	shl    edx,0x8
c0020b4b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020b52:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0020b58:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0020b5e:	01 f8                	add    eax,edi
c0020b60:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020b63:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0020b66:	68 00 01 00 00       	push   0x100
c0020b6b:	6a 00                	push   0x0
c0020b6d:	50                   	push   eax
c0020b6e:	e8 7d f9 fd ff       	call   c00004f0 <memset>
c0020b73:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0020b79:	01 fa                	add    edx,edi
c0020b7b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0020b7f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0020b82:	c1 e7 0d             	shl    edi,0xd
c0020b85:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020b8c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0020b92:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0020b98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020b9c:	31 ff                	xor    edi,edi
c0020b9e:	83 c4 10             	add    esp,0x10
c0020ba1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0020ba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bab:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0020bb1:	83 c5 20             	add    ebp,0x20
c0020bb4:	01 f8                	add    eax,edi
c0020bb6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020bb9:	52                   	push   edx
c0020bba:	68 00 01 00 00       	push   0x100
c0020bbf:	6a 00                	push   0x0
c0020bc1:	50                   	push   eax
c0020bc2:	e8 29 f9 fd ff       	call   c00004f0 <memset>
c0020bc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020bcb:	83 c4 10             	add    esp,0x10
c0020bce:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0020bd4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0020bdb:	01 f8                	add    eax,edi
c0020bdd:	81 c7 00 01 00 00    	add    edi,0x100
c0020be3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020be6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0020bec:	75 b3                	jne    c0020ba1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0020bee:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0020bf5:	50                   	push   eax
c0020bf6:	50                   	push   eax
c0020bf7:	53                   	push   ebx
c0020bf8:	56                   	push   esi
c0020bf9:	e8 b6 fe ff ff       	call   c0020ab4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020bfe:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0020c05:	83 c4 2c             	add    esp,0x2c
c0020c08:	5b                   	pop    ebx
c0020c09:	5e                   	pop    esi
c0020c0a:	5f                   	pop    edi
c0020c0b:	5d                   	pop    ebp
c0020c0c:	c3                   	ret    
c0020c0d:	90                   	nop

c0020c0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0020c0e:	55                   	push   ebp
c0020c0f:	57                   	push   edi
c0020c10:	56                   	push   esi
c0020c11:	53                   	push   ebx
c0020c12:	31 db                	xor    ebx,ebx
c0020c14:	83 ec 0c             	sub    esp,0xc
c0020c17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020c1b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020c1f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0020c22:	f7 c7 01 00 00 00    	test   edi,0x1
c0020c28:	74 7a                	je     c0020ca4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0020c2a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020c2e:	89 d8                	mov    eax,ebx
c0020c30:	c1 e0 07             	shl    eax,0x7
c0020c33:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0020c3a:	55                   	push   ebp
c0020c3b:	56                   	push   esi
c0020c3c:	e8 2b fe ff ff       	call   c0020a6c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0020c41:	5a                   	pop    edx
c0020c42:	83 f8 01             	cmp    eax,0x1
c0020c45:	59                   	pop    ecx
c0020c46:	75 21                	jne    c0020c69 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0020c48:	50                   	push   eax
c0020c49:	53                   	push   ebx
c0020c4a:	55                   	push   ebp
c0020c4b:	56                   	push   esi
c0020c4c:	e8 ad fe ff ff       	call   c0020afe <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020c51:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0020c58:	e8 5e f4 fe ff       	call   c00100bb <malloc>
c0020c5d:	89 c5                	mov    ebp,eax
c0020c5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c62:	e8 25 0f 00 00       	call   c0021b8c <SATA::SATA()>
c0020c67:	eb 24                	jmp    c0020c8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0020c69:	83 f8 04             	cmp    eax,0x4
c0020c6c:	75 36                	jne    c0020ca4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0020c6e:	51                   	push   ecx
c0020c6f:	53                   	push   ebx
c0020c70:	55                   	push   ebp
c0020c71:	56                   	push   esi
c0020c72:	e8 87 fe ff ff       	call   c0020afe <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020c77:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0020c7e:	e8 38 f4 fe ff       	call   c00100bb <malloc>
c0020c83:	89 c5                	mov    ebp,eax
c0020c85:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c88:	e8 97 12 00 00       	call   c0021f24 <SATAPI::SATAPI()>
c0020c8d:	58                   	pop    eax
c0020c8e:	5a                   	pop    edx
c0020c8f:	55                   	push   ebp
c0020c90:	56                   	push   esi
c0020c91:	e8 0a 96 fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c0020c96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020c99:	56                   	push   esi
c0020c9a:	6a 00                	push   0x0
c0020c9c:	53                   	push   ebx
c0020c9d:	55                   	push   ebp
c0020c9e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0020ca1:	83 c4 20             	add    esp,0x20
c0020ca4:	d1 ef                	shr    edi,1
c0020ca6:	43                   	inc    ebx
c0020ca7:	83 fb 20             	cmp    ebx,0x20
c0020caa:	0f 85 72 ff ff ff    	jne    c0020c22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0020cb0:	83 c4 0c             	add    esp,0xc
c0020cb3:	5b                   	pop    ebx
c0020cb4:	5e                   	pop    esi
c0020cb5:	5f                   	pop    edi
c0020cb6:	5d                   	pop    ebp
c0020cb7:	c3                   	ret    

c0020cb8 <SATABus::open(int, int, void*)>:
c0020cb8:	53                   	push   ebx
c0020cb9:	83 ec 08             	sub    esp,0x8
c0020cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020cc0:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c0020cc6:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020ccc:	e8 c3 60 ff ff       	call   c0016d94 <KeDisablePreemption()>
c0020cd1:	52                   	push   edx
c0020cd2:	52                   	push   edx
c0020cd3:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c0020cd9:	53                   	push   ebx
c0020cda:	e8 2f ff ff ff       	call   c0020c0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0020cdf:	e8 d8 60 ff ff       	call   c0016dbc <KeRestorePreemption()>
c0020ce4:	31 c0                	xor    eax,eax
c0020ce6:	83 c4 18             	add    esp,0x18
c0020ce9:	5b                   	pop    ebx
c0020cea:	c3                   	ret    
c0020ceb:	90                   	nop

c0020cec <ATA::close(int, int, void*)>:
c0020cec:	83 ec 0c             	sub    esp,0xc
c0020cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cf3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020cf9:	85 c0                	test   eax,eax
c0020cfb:	74 0c                	je     c0020d09 <ATA::close(int, int, void*)+0x1d>
c0020cfd:	83 ec 0c             	sub    esp,0xc
c0020d00:	8b 10                	mov    edx,DWORD PTR [eax]
c0020d02:	50                   	push   eax
c0020d03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020d06:	83 c4 10             	add    esp,0x10
c0020d09:	31 c0                	xor    eax,eax
c0020d0b:	83 c4 0c             	add    esp,0xc
c0020d0e:	c3                   	ret    
c0020d0f:	90                   	nop

c0020d10 <ATA::powerSaving(PowerSavingLevel)>:
c0020d10:	c3                   	ret    
c0020d11:	90                   	nop

c0020d12 <ATA::ATA()>:
c0020d12:	83 ec 0c             	sub    esp,0xc
c0020d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d19:	83 ec 04             	sub    esp,0x4
c0020d1c:	68 00 02 00 00       	push   0x200
c0020d21:	68 5d bc 02 c0       	push   0xc002bc5d
c0020d26:	50                   	push   eax
c0020d27:	e8 56 99 fe ff       	call   c000a682 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020d2c:	83 c4 10             	add    esp,0x10
c0020d2f:	ba c4 bb 02 c0       	mov    edx,0xc002bbc4
c0020d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d38:	89 10                	mov    DWORD PTR [eax],edx
c0020d3a:	90                   	nop
c0020d3b:	83 c4 0c             	add    esp,0xc
c0020d3e:	c3                   	ret    
c0020d3f:	90                   	nop

c0020d40 <ATA::flush(bool)>:
c0020d40:	53                   	push   ebx
c0020d41:	83 ec 08             	sub    esp,0x8
c0020d44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020d48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d4d:	83 f8 01             	cmp    eax,0x1
c0020d50:	19 c0                	sbb    eax,eax
c0020d52:	83 e0 fd             	and    eax,0xfffffffd
c0020d55:	05 ea 00 00 00       	add    eax,0xea
c0020d5a:	50                   	push   eax
c0020d5b:	6a 07                	push   0x7
c0020d5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020d64:	50                   	push   eax
c0020d65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020d6b:	e8 44 ee ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020d70:	83 c4 0c             	add    esp,0xc
c0020d73:	6a 00                	push   0x0
c0020d75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020d7c:	50                   	push   eax
c0020d7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020d83:	e8 d2 fb ff ff       	call   c002095a <IDE::polling(unsigned char, unsigned int)>
c0020d88:	83 c4 18             	add    esp,0x18
c0020d8b:	5b                   	pop    ebx
c0020d8c:	c3                   	ret    
c0020d8d:	90                   	nop

c0020d8e <ATA::readyForCommand()>:
c0020d8e:	56                   	push   esi
c0020d8f:	53                   	push   ebx
c0020d90:	31 db                	xor    ebx,ebx
c0020d92:	50                   	push   eax
c0020d93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020d97:	50                   	push   eax
c0020d98:	6a 0c                	push   0xc
c0020d9a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020da1:	50                   	push   eax
c0020da2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020da8:	e8 c7 ee ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0020dad:	83 c4 10             	add    esp,0x10
c0020db0:	a8 88                	test   al,0x88
c0020db2:	74 20                	je     c0020dd4 <ATA::readyForCommand()+0x46>
c0020db4:	43                   	inc    ebx
c0020db5:	83 fb 63             	cmp    ebx,0x63
c0020db8:	7e dd                	jle    c0020d97 <ATA::readyForCommand()+0x9>
c0020dba:	51                   	push   ecx
c0020dbb:	51                   	push   ecx
c0020dbc:	6a 00                	push   0x0
c0020dbe:	6a 0a                	push   0xa
c0020dc0:	e8 d7 64 ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c0020dc5:	83 c4 10             	add    esp,0x10
c0020dc8:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0020dce:	75 c7                	jne    c0020d97 <ATA::readyForCommand()+0x9>
c0020dd0:	31 c0                	xor    eax,eax
c0020dd2:	eb 02                	jmp    c0020dd6 <ATA::readyForCommand()+0x48>
c0020dd4:	b0 01                	mov    al,0x1
c0020dd6:	5a                   	pop    edx
c0020dd7:	5b                   	pop    ebx
c0020dd8:	5e                   	pop    esi
c0020dd9:	c3                   	ret    

c0020dda <ATA::access(unsigned long long, int, void*, bool)>:
c0020dda:	55                   	push   ebp
c0020ddb:	57                   	push   edi
c0020ddc:	56                   	push   esi
c0020ddd:	53                   	push   ebx
c0020dde:	83 ec 2c             	sub    esp,0x2c
c0020de1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020de5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020de9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020ded:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020df1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0020df5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020df9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020dfd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020e03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e07:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020e0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020e11:	c1 e0 06             	shl    eax,0x6
c0020e14:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0020e1c:	74 5d                	je     c0020e7b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0020e1e:	89 fa                	mov    edx,edi
c0020e20:	89 f0                	mov    eax,esi
c0020e22:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0020e26:	c1 ea 1c             	shr    edx,0x1c
c0020e29:	89 d1                	mov    ecx,edx
c0020e2b:	09 c1                	or     ecx,eax
c0020e2d:	74 25                	je     c0020e54 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0020e2f:	31 ed                	xor    ebp,ebp
c0020e31:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0020e38:	89 fa                	mov    edx,edi
c0020e3a:	89 f0                	mov    eax,esi
c0020e3c:	0f ad d0             	shrd   eax,edx,cl
c0020e3f:	d3 ea                	shr    edx,cl
c0020e41:	f6 c1 20             	test   cl,0x20
c0020e44:	74 02                	je     c0020e48 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0020e46:	89 d0                	mov    eax,edx
c0020e48:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0020e4c:	45                   	inc    ebp
c0020e4d:	83 fd 06             	cmp    ebp,0x6
c0020e50:	75 df                	jne    c0020e31 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0020e52:	eb 76                	jmp    c0020eca <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0020e54:	89 f0                	mov    eax,esi
c0020e56:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0020e5b:	89 fa                	mov    edx,edi
c0020e5d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0020e64:	0f ac d0 10          	shrd   eax,edx,0x10
c0020e68:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020e6d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0020e71:	c1 ee 18             	shr    esi,0x18
c0020e74:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0020e79:	eb 56                	jmp    c0020ed1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0020e7b:	6a 00                	push   0x0
c0020e7d:	6a 3f                	push   0x3f
c0020e7f:	57                   	push   edi
c0020e80:	56                   	push   esi
c0020e81:	e8 ae 20 00 00       	call   c0022f34 <__umoddi3>
c0020e86:	83 c4 10             	add    esp,0x10
c0020e89:	40                   	inc    eax
c0020e8a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0020e8e:	6a 00                	push   0x0
c0020e90:	68 f0 03 00 00       	push   0x3f0
c0020e95:	57                   	push   edi
c0020e96:	56                   	push   esi
c0020e97:	e8 98 1f 00 00       	call   c0022e34 <__udivdi3>
c0020e9c:	83 c4 10             	add    esp,0x10
c0020e9f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0020ea4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0020eab:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020eb0:	6a 00                	push   0x0
c0020eb2:	6a 3f                	push   0x3f
c0020eb4:	57                   	push   edi
c0020eb5:	56                   	push   esi
c0020eb6:	e8 79 1f 00 00       	call   c0022e34 <__udivdi3>
c0020ebb:	83 c4 10             	add    esp,0x10
c0020ebe:	83 e0 0f             	and    eax,0xf
c0020ec1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0020ec6:	89 c6                	mov    esi,eax
c0020ec8:	eb 07                	jmp    c0020ed1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0020eca:	31 f6                	xor    esi,esi
c0020ecc:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0020ed1:	55                   	push   ebp
c0020ed2:	6a 00                	push   0x0
c0020ed4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020edb:	50                   	push   eax
c0020edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020ee0:	e8 d9 ee ff ff       	call   c001fdbe <IDE::enableIRQs(unsigned char, bool)>
c0020ee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020ee8:	e8 a1 fe ff ff       	call   c0020d8e <ATA::readyForCommand()>
c0020eed:	83 c4 10             	add    esp,0x10
c0020ef0:	84 c0                	test   al,al
c0020ef2:	75 0a                	jne    c0020efe <ATA::access(unsigned long long, int, void*, bool)+0x124>
c0020ef4:	be 01 00 00 00       	mov    esi,0x1
c0020ef9:	e9 c2 02 00 00       	jmp    c00211c0 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c0020efe:	fa                   	cli    
c0020eff:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0020f05:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020f0b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c0020f10:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020f16:	75 0a                	jne    c0020f22 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c0020f18:	c1 e0 04             	shl    eax,0x4
c0020f1b:	09 c6                	or     esi,eax
c0020f1d:	83 ce a0             	or     esi,0xffffffa0
c0020f20:	eb 08                	jmp    c0020f2a <ATA::access(unsigned long long, int, void*, bool)+0x150>
c0020f22:	c1 e0 04             	shl    eax,0x4
c0020f25:	09 c6                	or     esi,eax
c0020f27:	83 ce e0             	or     esi,0xffffffe0
c0020f2a:	89 f0                	mov    eax,esi
c0020f2c:	0f b6 d2             	movzx  edx,dl
c0020f2f:	0f b6 f0             	movzx  esi,al
c0020f32:	56                   	push   esi
c0020f33:	6a 06                	push   0x6
c0020f35:	52                   	push   edx
c0020f36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f3c:	e8 73 ec ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f41:	83 c4 10             	add    esp,0x10
c0020f44:	6a 00                	push   0x0
c0020f46:	6a 01                	push   0x1
c0020f48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f4f:	50                   	push   eax
c0020f50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f56:	e8 59 ec ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f5b:	83 c4 10             	add    esp,0x10
c0020f5e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0020f63:	83 f8 02             	cmp    eax,0x2
c0020f66:	75 6e                	jne    c0020fd6 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c0020f68:	6a 00                	push   0x0
c0020f6a:	6a 08                	push   0x8
c0020f6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f73:	50                   	push   eax
c0020f74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f7a:	e8 35 ec ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f7f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0020f84:	50                   	push   eax
c0020f85:	6a 09                	push   0x9
c0020f87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f8e:	50                   	push   eax
c0020f8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f95:	e8 1a ec ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f9a:	83 c4 20             	add    esp,0x20
c0020f9d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0020fa2:	50                   	push   eax
c0020fa3:	6a 0a                	push   0xa
c0020fa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020fac:	50                   	push   eax
c0020fad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020fb3:	e8 fc eb ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020fb8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0020fbd:	50                   	push   eax
c0020fbe:	6a 0b                	push   0xb
c0020fc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020fc7:	50                   	push   eax
c0020fc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020fce:	e8 e1 eb ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020fd3:	83 c4 20             	add    esp,0x20
c0020fd6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0020fdb:	50                   	push   eax
c0020fdc:	6a 02                	push   0x2
c0020fde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020fe5:	50                   	push   eax
c0020fe6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020fec:	e8 c3 eb ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020ff1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0020ff6:	50                   	push   eax
c0020ff7:	6a 03                	push   0x3
c0020ff9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021000:	50                   	push   eax
c0021001:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021007:	e8 a8 eb ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002100c:	83 c4 20             	add    esp,0x20
c002100f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0021014:	50                   	push   eax
c0021015:	6a 04                	push   0x4
c0021017:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002101e:	50                   	push   eax
c002101f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021025:	e8 8a eb ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002102a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002102f:	50                   	push   eax
c0021030:	6a 05                	push   0x5
c0021032:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021039:	50                   	push   eax
c002103a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021040:	e8 6f eb ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021045:	83 c4 20             	add    esp,0x20
c0021048:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002104d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0021052:	74 13                	je     c0021067 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c0021054:	83 f8 02             	cmp    eax,0x2
c0021057:	74 20                	je     c0021079 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c0021059:	48                   	dec    eax
c002105a:	0f 85 94 fe ff ff    	jne    c0020ef4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c0021060:	b8 30 00 00 00       	mov    eax,0x30
c0021065:	eb 1e                	jmp    c0021085 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0021067:	83 f8 02             	cmp    eax,0x2
c002106a:	74 14                	je     c0021080 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002106c:	48                   	dec    eax
c002106d:	b8 20 00 00 00       	mov    eax,0x20
c0021072:	74 11                	je     c0021085 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0021074:	e9 7b fe ff ff       	jmp    c0020ef4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c0021079:	b8 34 00 00 00       	mov    eax,0x34
c002107e:	eb 05                	jmp    c0021085 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0021080:	b8 24 00 00 00       	mov    eax,0x24
c0021085:	50                   	push   eax
c0021086:	6a 07                	push   0x7
c0021088:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002108f:	50                   	push   eax
c0021090:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021096:	e8 19 eb ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002109b:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00210a2:	83 c4 10             	add    esp,0x10
c00210a5:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c00210ac:	75 01                	jne    c00210af <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c00210ae:	fb                   	sti    
c00210af:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00210b3:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c00210b8:	85 f6                	test   esi,esi
c00210ba:	0f 84 dd 00 00 00    	je     c002119d <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c00210c0:	57                   	push   edi
c00210c1:	6a 01                	push   0x1
c00210c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00210ca:	50                   	push   eax
c00210cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00210d1:	e8 84 f8 ff ff       	call   c002095a <IDE::polling(unsigned char, unsigned int)>
c00210d6:	83 c4 10             	add    esp,0x10
c00210d9:	0f b6 c0             	movzx  eax,al
c00210dc:	85 c0                	test   eax,eax
c00210de:	74 23                	je     c0021103 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c00210e0:	50                   	push   eax
c00210e1:	89 c6                	mov    esi,eax
c00210e3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00210ea:	50                   	push   eax
c00210eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00210f2:	50                   	push   eax
c00210f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00210f9:	e8 a2 f7 ff ff       	call   c00208a0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00210fe:	e9 ba 00 00 00       	jmp    c00211bd <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c0021103:	85 ed                	test   ebp,ebp
c0021105:	74 49                	je     c0021150 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c0021107:	fa                   	cli    
c0021108:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c002110e:	31 c9                	xor    ecx,ecx
c0021110:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021114:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021118:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002111c:	51                   	push   ecx
c002111d:	51                   	push   ecx
c002111e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021125:	50                   	push   eax
c0021126:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002112c:	e8 71 ea ff ff       	call   c001fba2 <IDE::getBase(unsigned char)>
c0021131:	89 c2                	mov    edx,eax
c0021133:	89 f8                	mov    eax,edi
c0021135:	66 ef                	out    dx,ax
c0021137:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002113b:	83 c4 10             	add    esp,0x10
c002113e:	41                   	inc    ecx
c002113f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0021145:	75 c9                	jne    c0021110 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c0021147:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c002114e:	eb 35                	jmp    c0021185 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c0021150:	fa                   	cli    
c0021151:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0021157:	52                   	push   edx
c0021158:	52                   	push   edx
c0021159:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021160:	50                   	push   eax
c0021161:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021167:	e8 36 ea ff ff       	call   c001fba2 <IDE::getBase(unsigned char)>
c002116c:	b9 00 01 00 00       	mov    ecx,0x100
c0021171:	89 c2                	mov    edx,eax
c0021173:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021177:	fc                   	cld    
c0021178:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002117b:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021182:	83 c4 10             	add    esp,0x10
c0021185:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c002118c:	75 01                	jne    c002118f <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c002118e:	fb                   	sti    
c002118f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0021197:	4e                   	dec    esi
c0021198:	e9 1b ff ff ff       	jmp    c00210b8 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c002119d:	31 f6                	xor    esi,esi
c002119f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00211a4:	74 1a                	je     c00211c0 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c00211a6:	50                   	push   eax
c00211a7:	50                   	push   eax
c00211a8:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00211ad:	83 f8 02             	cmp    eax,0x2
c00211b0:	0f 94 c0             	sete   al
c00211b3:	0f b6 c0             	movzx  eax,al
c00211b6:	50                   	push   eax
c00211b7:	53                   	push   ebx
c00211b8:	e8 83 fb ff ff       	call   c0020d40 <ATA::flush(bool)>
c00211bd:	83 c4 10             	add    esp,0x10
c00211c0:	83 c4 2c             	add    esp,0x2c
c00211c3:	89 f0                	mov    eax,esi
c00211c5:	5b                   	pop    ebx
c00211c6:	5e                   	pop    esi
c00211c7:	5f                   	pop    edi
c00211c8:	5d                   	pop    ebp
c00211c9:	c3                   	ret    

c00211ca <ATA::read(unsigned long long, int, void*)>:
c00211ca:	57                   	push   edi
c00211cb:	b8 04 00 00 00       	mov    eax,0x4
c00211d0:	56                   	push   esi
c00211d1:	53                   	push   ebx
c00211d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00211d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00211da:	8d 7a ff             	lea    edi,[edx-0x1]
c00211dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00211e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00211e5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00211eb:	77 25                	ja     c0021212 <ATA::read(unsigned long long, int, void*)+0x48>
c00211ed:	b8 06 00 00 00       	mov    eax,0x6
c00211f2:	85 f6                	test   esi,esi
c00211f4:	74 1c                	je     c0021212 <ATA::read(unsigned long long, int, void*)+0x48>
c00211f6:	50                   	push   eax
c00211f7:	50                   	push   eax
c00211f8:	6a 00                	push   0x0
c00211fa:	56                   	push   esi
c00211fb:	52                   	push   edx
c00211fc:	53                   	push   ebx
c00211fd:	51                   	push   ecx
c00211fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021202:	e8 d3 fb ff ff       	call   c0020dda <ATA::access(unsigned long long, int, void*, bool)>
c0021207:	83 c4 20             	add    esp,0x20
c002120a:	85 c0                	test   eax,eax
c002120c:	0f 95 c0             	setne  al
c002120f:	0f b6 c0             	movzx  eax,al
c0021212:	5b                   	pop    ebx
c0021213:	5e                   	pop    esi
c0021214:	5f                   	pop    edi
c0021215:	c3                   	ret    

c0021216 <ATA::write(unsigned long long, int, void*)>:
c0021216:	57                   	push   edi
c0021217:	b8 04 00 00 00       	mov    eax,0x4
c002121c:	56                   	push   esi
c002121d:	53                   	push   ebx
c002121e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021222:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021226:	8d 7a ff             	lea    edi,[edx-0x1]
c0021229:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002122d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021231:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0021237:	77 25                	ja     c002125e <ATA::write(unsigned long long, int, void*)+0x48>
c0021239:	b8 06 00 00 00       	mov    eax,0x6
c002123e:	85 f6                	test   esi,esi
c0021240:	74 1c                	je     c002125e <ATA::write(unsigned long long, int, void*)+0x48>
c0021242:	50                   	push   eax
c0021243:	50                   	push   eax
c0021244:	6a 01                	push   0x1
c0021246:	56                   	push   esi
c0021247:	52                   	push   edx
c0021248:	53                   	push   ebx
c0021249:	51                   	push   ecx
c002124a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002124e:	e8 87 fb ff ff       	call   c0020dda <ATA::access(unsigned long long, int, void*, bool)>
c0021253:	83 c4 20             	add    esp,0x20
c0021256:	85 c0                	test   eax,eax
c0021258:	0f 95 c0             	setne  al
c002125b:	0f b6 c0             	movzx  eax,al
c002125e:	5b                   	pop    ebx
c002125f:	5e                   	pop    esi
c0021260:	5f                   	pop    edi
c0021261:	c3                   	ret    

c0021262 <ATA::detectCHS()>:
c0021262:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021266:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002126c:	c1 e0 06             	shl    eax,0x6
c002126f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021275:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002127f:	c7 44 24 04 00 bb 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bb00
c0021287:	e9 84 f2 fe ff       	jmp    c0010510 <KePanic(char const*)>

c002128c <ATA::open(int, int, void*)>:
c002128c:	53                   	push   ebx
c002128d:	83 ec 08             	sub    esp,0x8
c0021290:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021294:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002129c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00212a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00212a8:	c1 e0 06             	shl    eax,0x6
c00212ab:	01 d0                	add    eax,edx
c00212ad:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00212b4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00212ba:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00212c1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00212cb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00212d1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00212d8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00212df:	75 0c                	jne    c00212ed <ATA::open(int, int, void*)+0x61>
c00212e1:	83 ec 0c             	sub    esp,0xc
c00212e4:	53                   	push   ebx
c00212e5:	e8 78 ff ff ff       	call   c0021262 <ATA::detectCHS()>
c00212ea:	83 c4 10             	add    esp,0x10
c00212ed:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00212f3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00212f9:	c1 e0 06             	shl    eax,0x6
c00212fc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021303:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002130d:	d1 e8                	shr    eax,1
c002130f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021315:	6a 04                	push   0x4
c0021317:	6a 0c                	push   0xc
c0021319:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021320:	50                   	push   eax
c0021321:	52                   	push   edx
c0021322:	e8 8d e8 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021327:	90                   	nop
c0021328:	90                   	nop
c0021329:	6a 00                	push   0x0
c002132b:	6a 0c                	push   0xc
c002132d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021334:	50                   	push   eax
c0021335:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002133b:	e8 74 e8 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021340:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021346:	83 c4 20             	add    esp,0x20
c0021349:	c1 e0 06             	shl    eax,0x6
c002134c:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c0021352:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0021359:	0f 84 00 01 00 00    	je     c002145f <ATA::open(int, int, void*)+0x1d3>
c002135f:	83 ec 0c             	sub    esp,0xc
c0021362:	6a 08                	push   0x8
c0021364:	e8 82 f4 fe ff       	call   c00107eb <Phys::allocateContiguousPages(int)>
c0021369:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002136f:	c7 04 24 12 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb12
c0021376:	e8 01 5c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002137b:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0021382:	e8 20 27 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0021387:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002138d:	6a 03                	push   0x3
c002138f:	50                   	push   eax
c0021390:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021396:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c002139c:	e8 e9 2d ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c00213a1:	83 c4 20             	add    esp,0x20
c00213a4:	e8 5b f3 fe ff       	call   c0010704 <Phys::allocatePage()>
c00213a9:	83 ec 0c             	sub    esp,0xc
c00213ac:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c00213b2:	6a 01                	push   0x1
c00213b4:	e8 ee 26 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c00213b9:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c00213bf:	6a 03                	push   0x3
c00213c1:	50                   	push   eax
c00213c2:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c00213c8:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00213ce:	e8 b7 2d ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c00213d3:	83 c4 14             	add    esp,0x14
c00213d6:	68 4b bb 02 c0       	push   0xc002bb4b
c00213db:	e8 9c 5b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00213e0:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c00213e7:	50                   	push   eax
c00213e8:	6a 12                	push   0x12
c00213ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00213f1:	50                   	push   eax
c00213f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00213f8:	e8 b7 e7 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00213fd:	83 c4 20             	add    esp,0x20
c0021400:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c0021406:	0f b6 c4             	movzx  eax,ah
c0021409:	50                   	push   eax
c002140a:	6a 13                	push   0x13
c002140c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021413:	50                   	push   eax
c0021414:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002141a:	e8 95 e7 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002141f:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0021426:	50                   	push   eax
c0021427:	6a 14                	push   0x14
c0021429:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021430:	50                   	push   eax
c0021431:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021437:	e8 78 e7 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002143c:	83 c4 20             	add    esp,0x20
c002143f:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0021446:	50                   	push   eax
c0021447:	6a 15                	push   0x15
c0021449:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021450:	50                   	push   eax
c0021451:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021457:	e8 58 e7 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002145c:	83 c4 10             	add    esp,0x10
c002145f:	83 ec 0c             	sub    esp,0xc
c0021462:	53                   	push   ebx
c0021463:	e8 82 92 fe ff       	call   c000a6ea <PhysicalDisk::startCache()>
c0021468:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002146b:	e8 e6 a0 fe ff       	call   c000b556 <createPartitionsForDisk(PhysicalDisk*)>
c0021470:	31 c0                	xor    eax,eax
c0021472:	83 c4 18             	add    esp,0x18
c0021475:	5b                   	pop    ebx
c0021476:	c3                   	ret    

c0021477 <combineCharAndColour(char, unsigned char)>:
c0021477:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002147c:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0021482:	c1 e0 08             	shl    eax,0x8
c0021485:	09 d0                	or     eax,edx
c0021487:	c3                   	ret    

c0021488 <combineColours(unsigned char, unsigned char)>:
c0021488:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002148d:	c1 e0 04             	shl    eax,0x4
c0021490:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0021494:	c3                   	ret    
c0021495:	90                   	nop

c0021496 <ATAPI::write(unsigned long long, int, void*)>:
c0021496:	b8 03 00 00 00       	mov    eax,0x3
c002149b:	c3                   	ret    

c002149c <ATAPI::close(int, int, void*)>:
c002149c:	83 ec 0c             	sub    esp,0xc
c002149f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00214a9:	85 c0                	test   eax,eax
c00214ab:	74 0c                	je     c00214b9 <ATAPI::close(int, int, void*)+0x1d>
c00214ad:	83 ec 0c             	sub    esp,0xc
c00214b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00214b2:	50                   	push   eax
c00214b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00214b6:	83 c4 10             	add    esp,0x10
c00214b9:	31 c0                	xor    eax,eax
c00214bb:	83 c4 0c             	add    esp,0xc
c00214be:	c3                   	ret    
c00214bf:	90                   	nop

c00214c0 <ATAPI::ATAPI()>:
c00214c0:	83 ec 0c             	sub    esp,0xc
c00214c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c7:	83 ec 04             	sub    esp,0x4
c00214ca:	68 00 08 00 00       	push   0x800
c00214cf:	68 fd bc 02 c0       	push   0xc002bcfd
c00214d4:	50                   	push   eax
c00214d5:	e8 a8 91 fe ff       	call   c000a682 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00214da:	83 c4 10             	add    esp,0x10
c00214dd:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c00214e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e6:	89 10                	mov    DWORD PTR [eax],edx
c00214e8:	90                   	nop
c00214e9:	83 c4 0c             	add    esp,0xc
c00214ec:	c3                   	ret    
c00214ed:	90                   	nop

c00214ee <ATAPI::readyForCommand()>:
c00214ee:	56                   	push   esi
c00214ef:	53                   	push   ebx
c00214f0:	31 db                	xor    ebx,ebx
c00214f2:	50                   	push   eax
c00214f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00214f7:	50                   	push   eax
c00214f8:	6a 0c                	push   0xc
c00214fa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021501:	50                   	push   eax
c0021502:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021508:	e8 67 e7 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c002150d:	83 c4 10             	add    esp,0x10
c0021510:	a8 88                	test   al,0x88
c0021512:	74 26                	je     c002153a <ATAPI::readyForCommand()+0x4c>
c0021514:	43                   	inc    ebx
c0021515:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002151b:	7e da                	jle    c00214f7 <ATAPI::readyForCommand()+0x9>
c002151d:	51                   	push   ecx
c002151e:	51                   	push   ecx
c002151f:	6a 00                	push   0x0
c0021521:	68 5e 01 00 00       	push   0x15e
c0021526:	e8 71 5d ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c002152b:	83 c4 10             	add    esp,0x10
c002152e:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0021534:	75 c1                	jne    c00214f7 <ATAPI::readyForCommand()+0x9>
c0021536:	31 c0                	xor    eax,eax
c0021538:	eb 02                	jmp    c002153c <ATAPI::readyForCommand()+0x4e>
c002153a:	b0 01                	mov    al,0x1
c002153c:	5a                   	pop    edx
c002153d:	5b                   	pop    ebx
c002153e:	5e                   	pop    esi
c002153f:	c3                   	ret    

c0021540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021540:	55                   	push   ebp
c0021541:	57                   	push   edi
c0021542:	56                   	push   esi
c0021543:	53                   	push   ebx
c0021544:	83 ec 20             	sub    esp,0x20
c0021547:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002154b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002154f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021553:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021557:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002155b:	6a 01                	push   0x1
c002155d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021564:	50                   	push   eax
c0021565:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002156b:	e8 4e e8 ff ff       	call   c001fdbe <IDE::enableIRQs(unsigned char, bool)>
c0021570:	5e                   	pop    esi
c0021571:	58                   	pop    eax
c0021572:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021579:	50                   	push   eax
c002157a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021580:	e8 09 e6 ff ff       	call   c001fb8e <IDE::prepareInterrupt(unsigned char)>
c0021585:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021588:	e8 61 ff ff ff       	call   c00214ee <ATAPI::readyForCommand()>
c002158d:	83 c4 10             	add    esp,0x10
c0021590:	84 c0                	test   al,al
c0021592:	75 0a                	jne    c002159e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021594:	bb 01 00 00 00       	mov    ebx,0x1
c0021599:	e9 60 02 00 00       	jmp    c00217fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002159e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c00215a4:	c1 e0 04             	shl    eax,0x4
c00215a7:	0f b6 c0             	movzx  eax,al
c00215aa:	50                   	push   eax
c00215ab:	6a 06                	push   0x6
c00215ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00215b4:	50                   	push   eax
c00215b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00215bb:	e8 f4 e5 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00215c0:	6a 00                	push   0x0
c00215c2:	6a 01                	push   0x1
c00215c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00215cb:	50                   	push   eax
c00215cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00215d2:	e8 dd e5 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00215d7:	83 c4 20             	add    esp,0x20
c00215da:	0f b6 c3             	movzx  eax,bl
c00215dd:	0f b6 df             	movzx  ebx,bh
c00215e0:	50                   	push   eax
c00215e1:	6a 04                	push   0x4
c00215e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00215ea:	50                   	push   eax
c00215eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00215f1:	e8 be e5 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00215f6:	53                   	push   ebx
c00215f7:	6a 05                	push   0x5
c00215f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021600:	50                   	push   eax
c0021601:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021607:	e8 a8 e5 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002160c:	83 c4 20             	add    esp,0x20
c002160f:	68 a0 00 00 00       	push   0xa0
c0021614:	6a 07                	push   0x7
c0021616:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002161d:	50                   	push   eax
c002161e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021624:	e8 8b e5 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021629:	83 c4 0c             	add    esp,0xc
c002162c:	6a 01                	push   0x1
c002162e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021635:	50                   	push   eax
c0021636:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002163c:	e8 19 f3 ff ff       	call   c002095a <IDE::polling(unsigned char, unsigned int)>
c0021641:	83 c4 10             	add    esp,0x10
c0021644:	0f b6 d8             	movzx  ebx,al
c0021647:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002164d:	85 db                	test   ebx,ebx
c002164f:	74 20                	je     c0021671 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021651:	53                   	push   ebx
c0021652:	0f b6 c0             	movzx  eax,al
c0021655:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002165c:	52                   	push   edx
c002165d:	50                   	push   eax
c002165e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021664:	e8 37 f2 ff ff       	call   c00208a0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021669:	83 c4 10             	add    esp,0x10
c002166c:	e9 8d 01 00 00       	jmp    c00217fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0021671:	0f b6 c0             	movzx  eax,al
c0021674:	53                   	push   ebx
c0021675:	53                   	push   ebx
c0021676:	50                   	push   eax
c0021677:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002167d:	e8 20 e5 ff ff       	call   c001fba2 <IDE::getBase(unsigned char)>
c0021682:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021686:	b9 06 00 00 00       	mov    ecx,0x6
c002168b:	89 c2                	mov    edx,eax
c002168d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021690:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021694:	83 c4 10             	add    esp,0x10
c0021697:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002169c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216a0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00216a6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00216ad:	85 db                	test   ebx,ebx
c00216af:	0f 84 ec 00 00 00    	je     c00217a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c00216b5:	51                   	push   ecx
c00216b6:	51                   	push   ecx
c00216b7:	52                   	push   edx
c00216b8:	50                   	push   eax
c00216b9:	e8 64 e6 ff ff       	call   c001fd22 <IDE::waitInterrupt(unsigned char)>
c00216be:	83 c4 10             	add    esp,0x10
c00216c1:	84 c0                	test   al,al
c00216c3:	0f 84 cb fe ff ff    	je     c0021594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00216c9:	56                   	push   esi
c00216ca:	56                   	push   esi
c00216cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00216d2:	50                   	push   eax
c00216d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00216d9:	e8 b0 e4 ff ff       	call   c001fb8e <IDE::prepareInterrupt(unsigned char)>
c00216de:	83 c4 0c             	add    esp,0xc
c00216e1:	6a 04                	push   0x4
c00216e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00216ea:	50                   	push   eax
c00216eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00216f1:	e8 7e e5 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c00216f6:	83 c4 0c             	add    esp,0xc
c00216f9:	89 c6                	mov    esi,eax
c00216fb:	6a 05                	push   0x5
c00216fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021704:	50                   	push   eax
c0021705:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002170b:	e8 64 e5 ff ff       	call   c001fc74 <IDE::read(unsigned char, unsigned char)>
c0021710:	89 f1                	mov    ecx,esi
c0021712:	0f b6 c0             	movzx  eax,al
c0021715:	0f b6 f1             	movzx  esi,cl
c0021718:	c1 e0 08             	shl    eax,0x8
c002171b:	09 c6                	or     esi,eax
c002171d:	d1 fe                	sar    esi,1
c002171f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021723:	83 c4 10             	add    esp,0x10
c0021726:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002172b:	74 41                	je     c002176e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002172d:	31 c9                	xor    ecx,ecx
c002172f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021735:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002173c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021740:	75 0a                	jne    c002174c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0021742:	01 c9                	add    ecx,ecx
c0021744:	01 cd                	add    ebp,ecx
c0021746:	4b                   	dec    ebx
c0021747:	e9 54 ff ff ff       	jmp    c00216a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002174c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021751:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021755:	51                   	push   ecx
c0021756:	51                   	push   ecx
c0021757:	52                   	push   edx
c0021758:	50                   	push   eax
c0021759:	e8 44 e4 ff ff       	call   c001fba2 <IDE::getBase(unsigned char)>
c002175e:	89 c2                	mov    edx,eax
c0021760:	89 f0                	mov    eax,esi
c0021762:	66 ef                	out    dx,ax
c0021764:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021768:	83 c4 10             	add    esp,0x10
c002176b:	41                   	inc    ecx
c002176c:	eb c1                	jmp    c002172f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002176e:	31 f6                	xor    esi,esi
c0021770:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021776:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002177d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021781:	75 06                	jne    c0021789 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0021783:	01 f6                	add    esi,esi
c0021785:	01 f5                	add    ebp,esi
c0021787:	eb bd                	jmp    c0021746 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0021789:	51                   	push   ecx
c002178a:	51                   	push   ecx
c002178b:	52                   	push   edx
c002178c:	50                   	push   eax
c002178d:	e8 10 e4 ff ff       	call   c001fba2 <IDE::getBase(unsigned char)>
c0021792:	89 c2                	mov    edx,eax
c0021794:	66 ed                	in     ax,dx
c0021796:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002179b:	83 c4 10             	add    esp,0x10
c002179e:	46                   	inc    esi
c002179f:	eb cf                	jmp    c0021770 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c00217a1:	51                   	push   ecx
c00217a2:	51                   	push   ecx
c00217a3:	52                   	push   edx
c00217a4:	50                   	push   eax
c00217a5:	e8 78 e5 ff ff       	call   c001fd22 <IDE::waitInterrupt(unsigned char)>
c00217aa:	83 c4 10             	add    esp,0x10
c00217ad:	84 c0                	test   al,al
c00217af:	0f 84 df fd ff ff    	je     c0021594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00217b5:	bb a0 86 01 00       	mov    ebx,0x186a0
c00217ba:	52                   	push   edx
c00217bb:	52                   	push   edx
c00217bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00217c3:	50                   	push   eax
c00217c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00217ca:	e8 bf e3 ff ff       	call   c001fb8e <IDE::prepareInterrupt(unsigned char)>
c00217cf:	83 c4 10             	add    esp,0x10
c00217d2:	50                   	push   eax
c00217d3:	50                   	push   eax
c00217d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00217db:	50                   	push   eax
c00217dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00217e2:	e8 bb e3 ff ff       	call   c001fba2 <IDE::getBase(unsigned char)>
c00217e7:	8d 50 07             	lea    edx,[eax+0x7]
c00217ea:	ec                   	in     al,dx
c00217eb:	83 c4 10             	add    esp,0x10
c00217ee:	a8 88                	test   al,0x88
c00217f0:	74 0a                	je     c00217fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c00217f2:	4b                   	dec    ebx
c00217f3:	75 dd                	jne    c00217d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c00217f5:	bb 02 00 00 00       	mov    ebx,0x2
c00217fa:	eb 02                	jmp    c00217fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00217fc:	31 db                	xor    ebx,ebx
c00217fe:	83 c4 1c             	add    esp,0x1c
c0021801:	89 d8                	mov    eax,ebx
c0021803:	5b                   	pop    ebx
c0021804:	5e                   	pop    esi
c0021805:	5f                   	pop    edi
c0021806:	5d                   	pop    ebp
c0021807:	c3                   	ret    

c0021808 <ATAPI::diskRemoved()>:
c0021808:	53                   	push   ebx
c0021809:	83 ec 14             	sub    esp,0x14
c002180c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021810:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021817:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002181d:	e8 22 9a fe ff       	call   c000b244 <LogicalDisk::unmount()>
c0021822:	58                   	pop    eax
c0021823:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021829:	e8 0e a4 fe ff       	call   c000bc3c <VCache::writeWriteBuffer()>
c002182e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0021834:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021838:	83 c4 18             	add    esp,0x18
c002183b:	5b                   	pop    ebx
c002183c:	e9 eb a3 fe ff       	jmp    c000bc2c <VCache::invalidateReadBuffer()>
c0021841:	90                   	nop

c0021842 <ATAPI::eject()>:
c0021842:	57                   	push   edi
c0021843:	b9 03 00 00 00       	mov    ecx,0x3
c0021848:	53                   	push   ebx
c0021849:	83 ec 14             	sub    esp,0x14
c002184c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021850:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021854:	fc                   	cld    
c0021855:	31 c0                	xor    eax,eax
c0021857:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021859:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002185e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021863:	50                   	push   eax
c0021864:	50                   	push   eax
c0021865:	6a 00                	push   0x0
c0021867:	6a 00                	push   0x0
c0021869:	6a 00                	push   0x0
c002186b:	6a 02                	push   0x2
c002186d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021871:	50                   	push   eax
c0021872:	53                   	push   ebx
c0021873:	e8 c8 fc ff ff       	call   c0021540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021878:	83 c4 14             	add    esp,0x14
c002187b:	53                   	push   ebx
c002187c:	e8 87 ff ff ff       	call   c0021808 <ATAPI::diskRemoved()>
c0021881:	83 c4 24             	add    esp,0x24
c0021884:	31 c0                	xor    eax,eax
c0021886:	5b                   	pop    ebx
c0021887:	5f                   	pop    edi
c0021888:	c3                   	ret    
c0021889:	90                   	nop

c002188a <ATAPI::diskInserted()>:
c002188a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002188e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0021895:	c3                   	ret    

c0021896 <ATAPI::detectMedia()>:
c0021896:	56                   	push   esi
c0021897:	53                   	push   ebx
c0021898:	83 ec 28             	sub    esp,0x28
c002189b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002189f:	6a 0c                	push   0xc
c00218a1:	6a 00                	push   0x0
c00218a3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00218a7:	56                   	push   esi
c00218a8:	e8 43 ec fd ff       	call   c00004f0 <memset>
c00218ad:	58                   	pop    eax
c00218ae:	5a                   	pop    edx
c00218af:	6a 00                	push   0x0
c00218b1:	6a 00                	push   0x0
c00218b3:	6a 00                	push   0x0
c00218b5:	6a 00                	push   0x0
c00218b7:	56                   	push   esi
c00218b8:	53                   	push   ebx
c00218b9:	e8 82 fc ff ff       	call   c0021540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00218be:	83 c4 1c             	add    esp,0x1c
c00218c1:	6a 0c                	push   0xc
c00218c3:	6a 00                	push   0x0
c00218c5:	56                   	push   esi
c00218c6:	e8 25 ec fd ff       	call   c00004f0 <memset>
c00218cb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00218d0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00218d5:	59                   	pop    ecx
c00218d6:	58                   	pop    eax
c00218d7:	6a 01                	push   0x1
c00218d9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00218dd:	50                   	push   eax
c00218de:	6a 00                	push   0x0
c00218e0:	6a 12                	push   0x12
c00218e2:	56                   	push   esi
c00218e3:	53                   	push   ebx
c00218e4:	e8 57 fc ff ff       	call   c0021540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00218e9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00218ed:	83 c4 20             	add    esp,0x20
c00218f0:	83 e0 7f             	and    eax,0x7f
c00218f3:	83 f8 70             	cmp    eax,0x70
c00218f6:	74 15                	je     c002190d <ATAPI::detectMedia()+0x77>
c00218f8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00218ff:	75 0c                	jne    c002190d <ATAPI::detectMedia()+0x77>
c0021901:	83 ec 0c             	sub    esp,0xc
c0021904:	53                   	push   ebx
c0021905:	e8 80 ff ff ff       	call   c002188a <ATAPI::diskInserted()>
c002190a:	83 c4 10             	add    esp,0x10
c002190d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021911:	83 e0 0f             	and    eax,0xf
c0021914:	83 f8 02             	cmp    eax,0x2
c0021917:	75 1b                	jne    c0021934 <ATAPI::detectMedia()+0x9e>
c0021919:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002191e:	75 2d                	jne    c002194d <ATAPI::detectMedia()+0xb7>
c0021920:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021927:	74 24                	je     c002194d <ATAPI::detectMedia()+0xb7>
c0021929:	83 ec 0c             	sub    esp,0xc
c002192c:	53                   	push   ebx
c002192d:	e8 d6 fe ff ff       	call   c0021808 <ATAPI::diskRemoved()>
c0021932:	eb 16                	jmp    c002194a <ATAPI::detectMedia()+0xb4>
c0021934:	85 c0                	test   eax,eax
c0021936:	75 15                	jne    c002194d <ATAPI::detectMedia()+0xb7>
c0021938:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002193f:	75 0c                	jne    c002194d <ATAPI::detectMedia()+0xb7>
c0021941:	83 ec 0c             	sub    esp,0xc
c0021944:	53                   	push   ebx
c0021945:	e8 40 ff ff ff       	call   c002188a <ATAPI::diskInserted()>
c002194a:	83 c4 10             	add    esp,0x10
c002194d:	83 c4 24             	add    esp,0x24
c0021950:	5b                   	pop    ebx
c0021951:	5e                   	pop    esi
c0021952:	c3                   	ret    
c0021953:	90                   	nop

c0021954 <ATAPI::open(int, int, void*)>:
c0021954:	56                   	push   esi
c0021955:	53                   	push   ebx
c0021956:	50                   	push   eax
c0021957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002195b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002195f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021963:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021969:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002196f:	c1 e0 06             	shl    eax,0x6
c0021972:	01 d0                	add    eax,edx
c0021974:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002197b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021981:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021988:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021992:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021998:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002199f:	6a 04                	push   0x4
c00219a1:	6a 0c                	push   0xc
c00219a3:	51                   	push   ecx
c00219a4:	52                   	push   edx
c00219a5:	e8 0a e2 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219aa:	90                   	nop
c00219ab:	90                   	nop
c00219ac:	6a 00                	push   0x0
c00219ae:	6a 0c                	push   0xc
c00219b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219b7:	50                   	push   eax
c00219b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00219be:	e8 f1 e1 ff ff       	call   c001fbb4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219c3:	83 c4 14             	add    esp,0x14
c00219c6:	68 78 01 00 00       	push   0x178
c00219cb:	e8 eb e6 fe ff       	call   c00100bb <malloc>
c00219d0:	83 c4 0c             	add    esp,0xc
c00219d3:	89 c6                	mov    esi,eax
c00219d5:	6a 00                	push   0x0
c00219d7:	68 ff ff ff 7f       	push   0x7fffffff
c00219dc:	6a 00                	push   0x0
c00219de:	6a 00                	push   0x0
c00219e0:	53                   	push   ebx
c00219e1:	68 af bd 02 c0       	push   0xc002bdaf
c00219e6:	50                   	push   eax
c00219e7:	e8 96 96 fe ff       	call   c000b082 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00219ec:	83 c4 14             	add    esp,0x14
c00219ef:	56                   	push   esi
c00219f0:	e8 4d 97 fe ff       	call   c000b142 <LogicalDisk::assignDriveLetter()>
c00219f5:	5a                   	pop    edx
c00219f6:	0f be c0             	movsx  eax,al
c00219f9:	59                   	pop    ecx
c00219fa:	50                   	push   eax
c00219fb:	68 f4 bb 02 c0       	push   0xc002bbf4
c0021a00:	e8 77 55 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021a05:	58                   	pop    eax
c0021a06:	5a                   	pop    edx
c0021a07:	56                   	push   esi
c0021a08:	53                   	push   ebx
c0021a09:	e8 92 88 fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c0021a0e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0021a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a17:	e8 ce 8c fe ff       	call   c000a6ea <PhysicalDisk::startCache()>
c0021a1c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021a23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a26:	e8 6b fe ff ff       	call   c0021896 <ATAPI::detectMedia()>
c0021a2b:	83 c4 14             	add    esp,0x14
c0021a2e:	31 c0                	xor    eax,eax
c0021a30:	5b                   	pop    ebx
c0021a31:	5e                   	pop    esi
c0021a32:	c3                   	ret    
c0021a33:	90                   	nop

c0021a34 <ATAPI::read(unsigned long long, int, void*)>:
c0021a34:	55                   	push   ebp
c0021a35:	57                   	push   edi
c0021a36:	56                   	push   esi
c0021a37:	53                   	push   ebx
c0021a38:	83 ec 1c             	sub    esp,0x1c
c0021a3b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021a3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021a43:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021a47:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021a4e:	74 3c                	je     c0021a8c <ATAPI::read(unsigned long long, int, void*)+0x58>
c0021a50:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021a54:	b9 03 00 00 00       	mov    ecx,0x3
c0021a59:	fc                   	cld    
c0021a5a:	31 c0                	xor    eax,eax
c0021a5c:	0f ce                	bswap  esi
c0021a5e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a60:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021a65:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0021a69:	89 e8                	mov    eax,ebp
c0021a6b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021a6f:	50                   	push   eax
c0021a70:	50                   	push   eax
c0021a71:	55                   	push   ebp
c0021a72:	c1 e5 0b             	shl    ebp,0xb
c0021a75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021a79:	6a 00                	push   0x0
c0021a7b:	55                   	push   ebp
c0021a7c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a80:	50                   	push   eax
c0021a81:	53                   	push   ebx
c0021a82:	e8 b9 fa ff ff       	call   c0021540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021a87:	83 c4 20             	add    esp,0x20
c0021a8a:	eb 1a                	jmp    c0021aa6 <ATAPI::read(unsigned long long, int, void*)+0x72>
c0021a8c:	83 ec 0c             	sub    esp,0xc
c0021a8f:	53                   	push   ebx
c0021a90:	e8 01 fe ff ff       	call   c0021896 <ATAPI::detectMedia()>
c0021a95:	83 c4 10             	add    esp,0x10
c0021a98:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021a9f:	75 af                	jne    c0021a50 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021aa1:	b8 02 00 00 00       	mov    eax,0x2
c0021aa6:	83 c4 1c             	add    esp,0x1c
c0021aa9:	5b                   	pop    ebx
c0021aaa:	5e                   	pop    esi
c0021aab:	5f                   	pop    edi
c0021aac:	5d                   	pop    ebp
c0021aad:	c3                   	ret    

c0021aae <SATA::close(int, int, void*)>:
c0021aae:	83 ec 0c             	sub    esp,0xc
c0021ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021abb:	85 c0                	test   eax,eax
c0021abd:	74 0c                	je     c0021acb <SATA::close(int, int, void*)+0x1d>
c0021abf:	83 ec 0c             	sub    esp,0xc
c0021ac2:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ac4:	50                   	push   eax
c0021ac5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021ac8:	83 c4 10             	add    esp,0x10
c0021acb:	31 c0                	xor    eax,eax
c0021acd:	83 c4 0c             	add    esp,0xc
c0021ad0:	c3                   	ret    
c0021ad1:	90                   	nop

c0021ad2 <SATA::powerSaving(PowerSavingLevel)>:
c0021ad2:	c3                   	ret    
c0021ad3:	90                   	nop

c0021ad4 <SATA::open(int, int, void*)>:
c0021ad4:	56                   	push   esi
c0021ad5:	53                   	push   ebx
c0021ad6:	83 ec 10             	sub    esp,0x10
c0021ad9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021add:	68 3c bc 02 c0       	push   0xc002bc3c
c0021ae2:	e8 95 54 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021ae7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021aeb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021af5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021afb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021b05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021b09:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021b13:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021b19:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0021b20:	e8 df eb fe ff       	call   c0010704 <Phys::allocatePage()>
c0021b25:	89 c6                	mov    esi,eax
c0021b27:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021b2d:	81 c6 00 10 00 00    	add    esi,0x1000
c0021b33:	e8 cc eb fe ff       	call   c0010704 <Phys::allocatePage()>
c0021b38:	83 c4 10             	add    esp,0x10
c0021b3b:	39 c6                	cmp    esi,eax
c0021b3d:	74 10                	je     c0021b4f <SATA::open(int, int, void*)+0x7b>
c0021b3f:	83 ec 0c             	sub    esp,0xc
c0021b42:	68 48 bc 02 c0       	push   0xc002bc48
c0021b47:	e8 c4 e9 fe ff       	call   c0010510 <KePanic(char const*)>
c0021b4c:	83 c4 10             	add    esp,0x10
c0021b4f:	83 ec 0c             	sub    esp,0xc
c0021b52:	6a 02                	push   0x2
c0021b54:	e8 4e 1f ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0021b59:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021b5f:	6a 03                	push   0x3
c0021b61:	50                   	push   eax
c0021b62:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0021b68:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c0021b6e:	e8 17 26 ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0021b73:	83 c4 14             	add    esp,0x14
c0021b76:	53                   	push   ebx
c0021b77:	e8 6e 8b fe ff       	call   c000a6ea <PhysicalDisk::startCache()>
c0021b7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021b7f:	e8 d2 99 fe ff       	call   c000b556 <createPartitionsForDisk(PhysicalDisk*)>
c0021b84:	83 c4 14             	add    esp,0x14
c0021b87:	31 c0                	xor    eax,eax
c0021b89:	5b                   	pop    ebx
c0021b8a:	5e                   	pop    esi
c0021b8b:	c3                   	ret    

c0021b8c <SATA::SATA()>:
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b93:	83 ec 04             	sub    esp,0x4
c0021b96:	68 00 02 00 00       	push   0x200
c0021b9b:	68 5c bc 02 c0       	push   0xc002bc5c
c0021ba0:	50                   	push   eax
c0021ba1:	e8 dc 8a fe ff       	call   c000a682 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021ba6:	83 c4 10             	add    esp,0x10
c0021ba9:	ba cc bc 02 c0       	mov    edx,0xc002bccc
c0021bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb2:	89 10                	mov    DWORD PTR [eax],edx
c0021bb4:	90                   	nop
c0021bb5:	83 c4 0c             	add    esp,0xc
c0021bb8:	c3                   	ret    
c0021bb9:	90                   	nop

c0021bba <SATA::access(unsigned long long, int, void*, bool)>:
c0021bba:	55                   	push   ebp
c0021bbb:	57                   	push   edi
c0021bbc:	56                   	push   esi
c0021bbd:	53                   	push   ebx
c0021bbe:	83 ec 2c             	sub    esp,0x2c
c0021bc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021bc5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021bcd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021bd1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021bd9:	fa                   	cli    
c0021bda:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0021be0:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0021be5:	7e 10                	jle    c0021bf7 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0021be7:	83 ec 0c             	sub    esp,0xc
c0021bea:	68 6c bc 02 c0       	push   0xc002bc6c
c0021bef:	e8 1c e9 fe ff       	call   c0010510 <KePanic(char const*)>
c0021bf4:	83 c4 10             	add    esp,0x10
c0021bf7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021bfd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0021c03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c0d:	89 d0                	mov    eax,edx
c0021c0f:	c1 e0 07             	shl    eax,0x7
c0021c12:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021c16:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021c20:	51                   	push   ecx
c0021c21:	8d 42 02             	lea    eax,[edx+0x2]
c0021c24:	51                   	push   ecx
c0021c25:	c1 e0 07             	shl    eax,0x7
c0021c28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021c2c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021c30:	50                   	push   eax
c0021c31:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0021c37:	e8 fe ed ff ff       	call   c0020a3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021c3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021c40:	83 c4 10             	add    esp,0x10
c0021c43:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021c48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c4c:	0f 84 a4 01 00 00    	je     c0021df6 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0021c52:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0021c56:	c1 e0 09             	shl    eax,0x9
c0021c59:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0021c5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021c62:	74 0e                	je     c0021c72 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0021c64:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0021c6a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0021c6e:	89 c1                	mov    ecx,eax
c0021c70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c72:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0021c78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021c7c:	8d 42 02             	lea    eax,[edx+0x2]
c0021c7f:	c1 e0 07             	shl    eax,0x7
c0021c82:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c88:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021c8e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021c94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c98:	c1 e1 05             	shl    ecx,0x5
c0021c9b:	01 c8                	add    eax,ecx
c0021c9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021ca1:	83 e1 01             	and    ecx,0x1
c0021ca4:	89 ce                	mov    esi,ecx
c0021ca6:	8a 08                	mov    cl,BYTE PTR [eax]
c0021ca8:	c1 e6 06             	shl    esi,0x6
c0021cab:	83 e1 bf             	and    ecx,0xffffffbf
c0021cae:	09 f1                	or     ecx,esi
c0021cb0:	88 08                	mov    BYTE PTR [eax],cl
c0021cb2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021cb4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0021cba:	81 c9 05 00 01 00    	or     ecx,0x10005
c0021cc0:	89 08                	mov    DWORD PTR [eax],ecx
c0021cc2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0021cc8:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0021cce:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0021cd4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0021cd7:	50                   	push   eax
c0021cd8:	68 90 00 00 00       	push   0x90
c0021cdd:	6a 00                	push   0x0
c0021cdf:	56                   	push   esi
c0021ce0:	e8 0b e8 fd ff       	call   c00004f0 <memset>
c0021ce5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021ceb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0021cf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021cf5:	83 c4 10             	add    esp,0x10
c0021cf8:	48                   	dec    eax
c0021cf9:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021cfe:	89 c1                	mov    ecx,eax
c0021d00:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0021d06:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021d0b:	09 c8                	or     eax,ecx
c0021d0d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0021d13:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0021d19:	83 c8 80             	or     eax,0xffffff80
c0021d1c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0021d22:	66 8b 06             	mov    ax,WORD PTR [esi]
c0021d25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d29:	25 00 7f 00 00       	and    eax,0x7f00
c0021d2e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021d33:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0021d38:	66 89 06             	mov    WORD PTR [esi],ax
c0021d3b:	b0 35                	mov    al,0x35
c0021d3d:	75 02                	jne    c0021d41 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0021d3f:	b0 25                	mov    al,0x25
c0021d41:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0021d44:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0021d48:	89 e8                	mov    eax,ebp
c0021d4a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0021d4e:	c1 e8 10             	shr    eax,0x10
c0021d51:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0021d54:	89 e8                	mov    eax,ebp
c0021d56:	c1 e8 18             	shr    eax,0x18
c0021d59:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0021d5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021d60:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0021d63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021d67:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0021d6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0021d6e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0021d72:	89 d6                	mov    esi,edx
c0021d74:	31 c0                	xor    eax,eax
c0021d76:	c1 e6 07             	shl    esi,0x7
c0021d79:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0021d7d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0021d83:	80 e1 88             	and    cl,0x88
c0021d86:	74 0a                	je     c0021d92 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0021d88:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021d8d:	74 0a                	je     c0021d99 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0021d8f:	40                   	inc    eax
c0021d90:	eb eb                	jmp    c0021d7d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0021d92:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021d97:	75 0a                	jne    c0021da3 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0021d99:	83 ec 0c             	sub    esp,0xc
c0021d9c:	68 a5 bc 02 c0       	push   0xc002bca5
c0021da1:	eb 36                	jmp    c0021dd9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0021da3:	b8 01 00 00 00       	mov    eax,0x1
c0021da8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021dac:	c1 e2 07             	shl    edx,0x7
c0021daf:	d3 e0                	shl    eax,cl
c0021db1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0021db5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0021dbb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0021dc1:	85 c8                	test   eax,ecx
c0021dc3:	74 25                	je     c0021dea <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0021dc5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0021dcb:	0f ba e1 1e          	bt     ecx,0x1e
c0021dcf:	73 ea                	jae    c0021dbb <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0021dd1:	83 ec 0c             	sub    esp,0xc
c0021dd4:	68 b3 bc 02 c0       	push   0xc002bcb3
c0021dd9:	e8 9e 51 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021dde:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021de5:	83 c4 10             	add    esp,0x10
c0021de8:	eb 13                	jmp    c0021dfd <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0021dea:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0021df0:	0f ba e0 1e          	bt     eax,0x1e
c0021df4:	73 18                	jae    c0021e0e <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0021df6:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021dfd:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0021e04:	75 01                	jne    c0021e07 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0021e06:	fb                   	sti    
c0021e07:	b8 01 00 00 00       	mov    eax,0x1
c0021e0c:	eb 2c                	jmp    c0021e3a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0021e0e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0021e13:	75 10                	jne    c0021e25 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0021e15:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0021e1b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0021e1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021e23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e25:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021e2c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0021e31:	85 c0                	test   eax,eax
c0021e33:	75 03                	jne    c0021e38 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0021e35:	fb                   	sti    
c0021e36:	eb 02                	jmp    c0021e3a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0021e38:	31 c0                	xor    eax,eax
c0021e3a:	83 c4 2c             	add    esp,0x2c
c0021e3d:	5b                   	pop    ebx
c0021e3e:	5e                   	pop    esi
c0021e3f:	5f                   	pop    edi
c0021e40:	5d                   	pop    ebp
c0021e41:	c3                   	ret    

c0021e42 <SATA::read(unsigned long long, int, void*)>:
c0021e42:	57                   	push   edi
c0021e43:	b8 04 00 00 00       	mov    eax,0x4
c0021e48:	56                   	push   esi
c0021e49:	53                   	push   ebx
c0021e4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021e52:	8d 7a ff             	lea    edi,[edx-0x1]
c0021e55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021e59:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021e5d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0021e63:	77 25                	ja     c0021e8a <SATA::read(unsigned long long, int, void*)+0x48>
c0021e65:	b8 06 00 00 00       	mov    eax,0x6
c0021e6a:	85 f6                	test   esi,esi
c0021e6c:	74 1c                	je     c0021e8a <SATA::read(unsigned long long, int, void*)+0x48>
c0021e6e:	50                   	push   eax
c0021e6f:	50                   	push   eax
c0021e70:	6a 00                	push   0x0
c0021e72:	56                   	push   esi
c0021e73:	52                   	push   edx
c0021e74:	53                   	push   ebx
c0021e75:	51                   	push   ecx
c0021e76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021e7a:	e8 3b fd ff ff       	call   c0021bba <SATA::access(unsigned long long, int, void*, bool)>
c0021e7f:	83 c4 20             	add    esp,0x20
c0021e82:	85 c0                	test   eax,eax
c0021e84:	0f 95 c0             	setne  al
c0021e87:	0f b6 c0             	movzx  eax,al
c0021e8a:	5b                   	pop    ebx
c0021e8b:	5e                   	pop    esi
c0021e8c:	5f                   	pop    edi
c0021e8d:	c3                   	ret    

c0021e8e <SATA::write(unsigned long long, int, void*)>:
c0021e8e:	55                   	push   ebp
c0021e8f:	b8 04 00 00 00       	mov    eax,0x4
c0021e94:	57                   	push   edi
c0021e95:	56                   	push   esi
c0021e96:	53                   	push   ebx
c0021e97:	83 ec 0c             	sub    esp,0xc
c0021e9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021e9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021ea2:	8d 73 ff             	lea    esi,[ebx-0x1]
c0021ea5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0021ea9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021ead:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0021eb3:	77 3d                	ja     c0021ef2 <SATA::write(unsigned long long, int, void*)+0x64>
c0021eb5:	b8 06 00 00 00       	mov    eax,0x6
c0021eba:	85 ed                	test   ebp,ebp
c0021ebc:	74 34                	je     c0021ef2 <SATA::write(unsigned long long, int, void*)+0x64>
c0021ebe:	c1 e3 09             	shl    ebx,0x9
c0021ec1:	01 eb                	add    ebx,ebp
c0021ec3:	89 d6                	mov    esi,edx
c0021ec5:	89 cf                	mov    edi,ecx
c0021ec7:	83 c6 01             	add    esi,0x1
c0021eca:	83 d7 00             	adc    edi,0x0
c0021ecd:	50                   	push   eax
c0021ece:	50                   	push   eax
c0021ecf:	6a 01                	push   0x1
c0021ed1:	55                   	push   ebp
c0021ed2:	81 c5 00 02 00 00    	add    ebp,0x200
c0021ed8:	6a 01                	push   0x1
c0021eda:	51                   	push   ecx
c0021edb:	52                   	push   edx
c0021edc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ee0:	e8 d5 fc ff ff       	call   c0021bba <SATA::access(unsigned long long, int, void*, bool)>
c0021ee5:	83 c4 20             	add    esp,0x20
c0021ee8:	89 f2                	mov    edx,esi
c0021eea:	89 f9                	mov    ecx,edi
c0021eec:	39 dd                	cmp    ebp,ebx
c0021eee:	75 d3                	jne    c0021ec3 <SATA::write(unsigned long long, int, void*)+0x35>
c0021ef0:	31 c0                	xor    eax,eax
c0021ef2:	83 c4 0c             	add    esp,0xc
c0021ef5:	5b                   	pop    ebx
c0021ef6:	5e                   	pop    esi
c0021ef7:	5f                   	pop    edi
c0021ef8:	5d                   	pop    ebp
c0021ef9:	c3                   	ret    

c0021efa <SATAPI::write(unsigned long long, int, void*)>:
c0021efa:	b8 03 00 00 00       	mov    eax,0x3
c0021eff:	c3                   	ret    

c0021f00 <SATAPI::close(int, int, void*)>:
c0021f00:	83 ec 0c             	sub    esp,0xc
c0021f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021f0d:	85 c0                	test   eax,eax
c0021f0f:	74 0c                	je     c0021f1d <SATAPI::close(int, int, void*)+0x1d>
c0021f11:	83 ec 0c             	sub    esp,0xc
c0021f14:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f16:	50                   	push   eax
c0021f17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021f1a:	83 c4 10             	add    esp,0x10
c0021f1d:	31 c0                	xor    eax,eax
c0021f1f:	83 c4 0c             	add    esp,0xc
c0021f22:	c3                   	ret    
c0021f23:	90                   	nop

c0021f24 <SATAPI::SATAPI()>:
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2b:	83 ec 04             	sub    esp,0x4
c0021f2e:	68 00 08 00 00       	push   0x800
c0021f33:	68 fc bc 02 c0       	push   0xc002bcfc
c0021f38:	50                   	push   eax
c0021f39:	e8 44 87 fe ff       	call   c000a682 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021f3e:	83 c4 10             	add    esp,0x10
c0021f41:	ba f0 bd 02 c0       	mov    edx,0xc002bdf0
c0021f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4a:	89 10                	mov    DWORD PTR [eax],edx
c0021f4c:	90                   	nop
c0021f4d:	83 c4 0c             	add    esp,0xc
c0021f50:	c3                   	ret    
c0021f51:	90                   	nop

c0021f52 <SATAPI::diskRemoved()>:
c0021f52:	c3                   	ret    
c0021f53:	90                   	nop

c0021f54 <SATAPI::diskInserted()>:
c0021f54:	83 ec 18             	sub    esp,0x18
c0021f57:	68 08 bd 02 c0       	push   0xc002bd08
c0021f5c:	e8 1b 50 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f65:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0021f6c:	83 c4 1c             	add    esp,0x1c
c0021f6f:	c3                   	ret    

c0021f70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021f70:	55                   	push   ebp
c0021f71:	57                   	push   edi
c0021f72:	56                   	push   esi
c0021f73:	53                   	push   ebx
c0021f74:	83 ec 34             	sub    esp,0x34
c0021f77:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0021f7b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021f7f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0021f83:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021f87:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0021f8b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0021f91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021f97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021f9b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0021fa1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021fa5:	83 c0 02             	add    eax,0x2
c0021fa8:	c1 e0 07             	shl    eax,0x7
c0021fab:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fb7:	c1 e0 07             	shl    eax,0x7
c0021fba:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021fbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021fc2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021fcc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021fd0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021fd6:	e8 5f ea ff ff       	call   c0020a3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021fdb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021fdf:	83 c4 10             	add    esp,0x10
c0021fe2:	b8 01 00 00 00       	mov    eax,0x1
c0021fe7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021fec:	0f 84 57 02 00 00    	je     c0022249 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0021ff2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ffc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ffe:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0022004:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002200a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002200e:	c1 e1 05             	shl    ecx,0x5
c0022011:	01 c8                	add    eax,ecx
c0022013:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022015:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002201b:	81 c9 25 00 01 00    	or     ecx,0x10025
c0022021:	89 08                	mov    DWORD PTR [eax],ecx
c0022023:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0022029:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002202f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0022035:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0022038:	8d 7b 40             	lea    edi,[ebx+0x40]
c002203b:	50                   	push   eax
c002203c:	68 90 00 00 00       	push   0x90
c0022041:	6a 00                	push   0x0
c0022043:	53                   	push   ebx
c0022044:	e8 a7 e4 fd ff       	call   c00004f0 <memset>
c0022049:	b9 0c 00 00 00       	mov    ecx,0xc
c002204e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0022052:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022054:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002205a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002205e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0022064:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0022068:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002206c:	48                   	dec    eax
c002206d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0022072:	89 c1                	mov    ecx,eax
c0022074:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002207a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002207f:	09 c8                	or     eax,ecx
c0022081:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0022087:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002208d:	83 c8 80             	or     eax,0xffffff80
c0022090:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0022096:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0022099:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002209d:	25 00 7f 00 00       	and    eax,0x7f00
c00220a2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00220a6:	0d 27 80 ff ff       	or     eax,0xffff8027
c00220ab:	66 89 03             	mov    WORD PTR [ebx],ax
c00220ae:	89 d0                	mov    eax,edx
c00220b0:	c1 ea 18             	shr    edx,0x18
c00220b3:	c1 e8 10             	shr    eax,0x10
c00220b6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00220b9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00220bc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00220c0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00220c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00220c7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00220ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00220ce:	83 c4 10             	add    esp,0x10
c00220d1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00220d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220d9:	31 c0                	xor    eax,eax
c00220db:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00220e1:	80 e1 88             	and    cl,0x88
c00220e4:	74 0a                	je     c00220f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c00220e6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00220eb:	74 0a                	je     c00220f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c00220ed:	40                   	inc    eax
c00220ee:	eb eb                	jmp    c00220db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00220f0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00220f5:	75 43                	jne    c002213a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00220f7:	83 ec 0c             	sub    esp,0xc
c00220fa:	68 20 bd 02 c0       	push   0xc002bd20
c00220ff:	e8 78 4e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0022104:	58                   	pop    eax
c0022105:	5a                   	pop    edx
c0022106:	68 35 bd 02 c0       	push   0xc002bd35
c002210b:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c0022111:	e8 66 0d ff ff       	call   c0012e7c <VgaText::puts(char const*)>
c0022116:	59                   	pop    ecx
c0022117:	5b                   	pop    ebx
c0022118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002211c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0022122:	e8 ad e9 ff ff       	call   c0020ad4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022127:	5e                   	pop    esi
c0022128:	5f                   	pop    edi
c0022129:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002212d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0022133:	e8 7c e9 ff ff       	call   c0020ab4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0022138:	eb 48                	jmp    c0022182 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002213a:	be 01 00 00 00       	mov    esi,0x1
c002213f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0022143:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022147:	d3 e6                	shl    esi,cl
c0022149:	c1 e7 07             	shl    edi,0x7
c002214c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0022152:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0022157:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002215b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0022161:	85 c6                	test   esi,eax
c0022163:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0022169:	0f 84 a7 00 00 00    	je     c0022216 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c002216f:	0f ba e0 1e          	bt     eax,0x1e
c0022173:	73 1a                	jae    c002218f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0022175:	83 ec 0c             	sub    esp,0xc
c0022178:	68 47 bd 02 c0       	push   0xc002bd47
c002217d:	e8 fa 4d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0022182:	83 c4 10             	add    esp,0x10
c0022185:	b8 01 00 00 00       	mov    eax,0x1
c002218a:	e9 ba 00 00 00       	jmp    c0022249 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c002218f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0022195:	83 f8 0d             	cmp    eax,0xd
c0022198:	77 0b                	ja     c00221a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c002219a:	50                   	push   eax
c002219b:	50                   	push   eax
c002219c:	6a 00                	push   0x0
c002219e:	68 c8 00 00 00       	push   0xc8
c00221a3:	eb 2a                	jmp    c00221cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00221a5:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c00221ab:	83 f8 0d             	cmp    eax,0xd
c00221ae:	77 0b                	ja     c00221bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c00221b0:	51                   	push   ecx
c00221b1:	51                   	push   ecx
c00221b2:	6a 00                	push   0x0
c00221b4:	68 58 02 00 00       	push   0x258
c00221b9:	eb 14                	jmp    c00221cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00221bb:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c00221c1:	83 f8 06             	cmp    eax,0x6
c00221c4:	77 11                	ja     c00221d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00221c6:	52                   	push   edx
c00221c7:	52                   	push   edx
c00221c8:	6a 00                	push   0x0
c00221ca:	68 dc 05 00 00       	push   0x5dc
c00221cf:	e8 c8 50 ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c00221d4:	83 c4 10             	add    esp,0x10
c00221d7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00221db:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c00221de:	75 06                	jne    c00221e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c00221e0:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c00221e4:	74 16                	je     c00221fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00221e6:	83 fb 06             	cmp    ebx,0x6
c00221e9:	77 11                	ja     c00221fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00221eb:	50                   	push   eax
c00221ec:	50                   	push   eax
c00221ed:	6a 00                	push   0x0
c00221ef:	68 c4 09 00 00       	push   0x9c4
c00221f4:	e8 a3 50 ff ff       	call   c001729c <milliTenthSleep(unsigned long long)>
c00221f9:	83 c4 10             	add    esp,0x10
c00221fc:	43                   	inc    ebx
c00221fd:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0022203:	0f 85 52 ff ff ff    	jne    c002215b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0022209:	83 ec 0c             	sub    esp,0xc
c002220c:	68 5a bd 02 c0       	push   0xc002bd5a
c0022211:	e9 67 ff ff ff       	jmp    c002217d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0022216:	0f ba e0 1e          	bt     eax,0x1e
c002221a:	73 0d                	jae    c0022229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c002221c:	83 ec 0c             	sub    esp,0xc
c002221f:	68 6e bd 02 c0       	push   0xc002bd6e
c0022224:	e9 54 ff ff ff       	jmp    c002217d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0022229:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002222e:	74 17                	je     c0022247 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0022230:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0022235:	74 10                	je     c0022247 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0022237:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002223d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022241:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0022245:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022247:	31 c0                	xor    eax,eax
c0022249:	83 c4 2c             	add    esp,0x2c
c002224c:	5b                   	pop    ebx
c002224d:	5e                   	pop    esi
c002224e:	5f                   	pop    edi
c002224f:	5d                   	pop    ebp
c0022250:	c3                   	ret    
c0022251:	90                   	nop

c0022252 <SATAPI::eject()>:
c0022252:	57                   	push   edi
c0022253:	b9 03 00 00 00       	mov    ecx,0x3
c0022258:	83 ec 18             	sub    esp,0x18
c002225b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002225f:	fc                   	cld    
c0022260:	31 c0                	xor    eax,eax
c0022262:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022264:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022269:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002226e:	50                   	push   eax
c002226f:	6a 00                	push   0x0
c0022271:	6a 00                	push   0x0
c0022273:	6a 00                	push   0x0
c0022275:	6a 00                	push   0x0
c0022277:	6a 02                	push   0x2
c0022279:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002227d:	50                   	push   eax
c002227e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022282:	e8 e9 fc ff ff       	call   c0021f70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0022287:	31 c0                	xor    eax,eax
c0022289:	83 c4 38             	add    esp,0x38
c002228c:	5f                   	pop    edi
c002228d:	c3                   	ret    

c002228e <SATAPI::detectMedia()>:
c002228e:	53                   	push   ebx
c002228f:	83 ec 14             	sub    esp,0x14
c0022292:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022296:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002229c:	e8 9b 99 fe ff       	call   c000bc3c <VCache::writeWriteBuffer()>
c00222a1:	59                   	pop    ecx
c00222a2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00222a8:	e8 7f 99 fe ff       	call   c000bc2c <VCache::invalidateReadBuffer()>
c00222ad:	c7 04 24 83 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd83
c00222b4:	e8 c3 4c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00222b9:	83 c4 10             	add    esp,0x10
c00222bc:	31 c0                	xor    eax,eax
c00222be:	8b 14 85 e0 2a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd520]
c00222c5:	85 d2                	test   edx,edx
c00222c7:	74 0f                	je     c00222d8 <SATAPI::detectMedia()+0x4a>
c00222c9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00222cf:	75 07                	jne    c00222d8 <SATAPI::detectMedia()+0x4a>
c00222d1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00222d8:	40                   	inc    eax
c00222d9:	83 f8 1a             	cmp    eax,0x1a
c00222dc:	75 e0                	jne    c00222be <SATAPI::detectMedia()+0x30>
c00222de:	83 c4 08             	add    esp,0x8
c00222e1:	5b                   	pop    ebx
c00222e2:	c3                   	ret    
c00222e3:	90                   	nop

c00222e4 <SATAPI::open(int, int, void*)>:
c00222e4:	56                   	push   esi
c00222e5:	53                   	push   ebx
c00222e6:	51                   	push   ecx
c00222e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00222eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00222ef:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00222f9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00222ff:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022309:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002230d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022317:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002231d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0022324:	e8 db e3 fe ff       	call   c0010704 <Phys::allocatePage()>
c0022329:	89 c6                	mov    esi,eax
c002232b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0022331:	81 c6 00 10 00 00    	add    esi,0x1000
c0022337:	e8 c8 e3 fe ff       	call   c0010704 <Phys::allocatePage()>
c002233c:	39 c6                	cmp    esi,eax
c002233e:	74 10                	je     c0022350 <SATAPI::open(int, int, void*)+0x6c>
c0022340:	83 ec 0c             	sub    esp,0xc
c0022343:	68 98 bd 02 c0       	push   0xc002bd98
c0022348:	e8 c3 e1 fe ff       	call   c0010510 <KePanic(char const*)>
c002234d:	83 c4 10             	add    esp,0x10
c0022350:	83 ec 0c             	sub    esp,0xc
c0022353:	6a 02                	push   0x2
c0022355:	e8 4d 17 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c002235a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0022360:	6a 03                	push   0x3
c0022362:	50                   	push   eax
c0022363:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0022369:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c002236f:	e8 16 1e ff ff       	call   c001418a <VAS::mapPage(unsigned long, unsigned long, int)>
c0022374:	83 c4 14             	add    esp,0x14
c0022377:	68 78 01 00 00       	push   0x178
c002237c:	e8 3a dd fe ff       	call   c00100bb <malloc>
c0022381:	83 c4 0c             	add    esp,0xc
c0022384:	89 c6                	mov    esi,eax
c0022386:	6a 00                	push   0x0
c0022388:	68 ff ff ff 7f       	push   0x7fffffff
c002238d:	6a 00                	push   0x0
c002238f:	6a 00                	push   0x0
c0022391:	53                   	push   ebx
c0022392:	68 ae bd 02 c0       	push   0xc002bdae
c0022397:	50                   	push   eax
c0022398:	e8 e5 8c fe ff       	call   c000b082 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002239d:	83 c4 14             	add    esp,0x14
c00223a0:	56                   	push   esi
c00223a1:	e8 9c 8d fe ff       	call   c000b142 <LogicalDisk::assignDriveLetter()>
c00223a6:	5a                   	pop    edx
c00223a7:	0f be c0             	movsx  eax,al
c00223aa:	59                   	pop    ecx
c00223ab:	50                   	push   eax
c00223ac:	68 f4 bb 02 c0       	push   0xc002bbf4
c00223b1:	e8 c6 4b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00223b6:	58                   	pop    eax
c00223b7:	5a                   	pop    edx
c00223b8:	56                   	push   esi
c00223b9:	53                   	push   ebx
c00223ba:	e8 e1 7e fe ff       	call   c000a2a0 <Device::addChild(Device*)>
c00223bf:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00223c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00223c8:	e8 1d 83 fe ff       	call   c000a6ea <PhysicalDisk::startCache()>
c00223cd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00223d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00223d7:	e8 b2 fe ff ff       	call   c002228e <SATAPI::detectMedia()>
c00223dc:	83 c4 14             	add    esp,0x14
c00223df:	31 c0                	xor    eax,eax
c00223e1:	5b                   	pop    ebx
c00223e2:	5e                   	pop    esi
c00223e3:	c3                   	ret    

c00223e4 <SATAPI::read(unsigned long long, int, void*)>:
c00223e4:	57                   	push   edi
c00223e5:	56                   	push   esi
c00223e6:	53                   	push   ebx
c00223e7:	83 ec 30             	sub    esp,0x30
c00223ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00223ee:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00223f2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00223f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00223fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022402:	83 fe 04             	cmp    esi,0x4
c0022405:	7e 10                	jle    c0022417 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0022407:	83 ec 0c             	sub    esp,0xc
c002240a:	68 bc bd 02 c0       	push   0xc002bdbc
c002240f:	e8 fc e0 fe ff       	call   c0010510 <KePanic(char const*)>
c0022414:	83 c4 10             	add    esp,0x10
c0022417:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002241d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022423:	51                   	push   ecx
c0022424:	50                   	push   eax
c0022425:	83 c0 02             	add    eax,0x2
c0022428:	c1 e0 07             	shl    eax,0x7
c002242b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0022431:	50                   	push   eax
c0022432:	52                   	push   edx
c0022433:	e8 c6 e6 ff ff       	call   c0020afe <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022438:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002243c:	b9 03 00 00 00       	mov    ecx,0x3
c0022441:	fc                   	cld    
c0022442:	31 c0                	xor    eax,eax
c0022444:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022446:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002244b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0022450:	83 c4 0c             	add    esp,0xc
c0022453:	6a 00                	push   0x0
c0022455:	6a 00                	push   0x0
c0022457:	6a 00                	push   0x0
c0022459:	6a 00                	push   0x0
c002245b:	6a 02                	push   0x2
c002245d:	8d 44 24 30          	lea    eax,[esp+0x30]
c0022461:	50                   	push   eax
c0022462:	53                   	push   ebx
c0022463:	e8 08 fb ff ff       	call   c0021f70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0022468:	83 c4 20             	add    esp,0x20
c002246b:	85 c0                	test   eax,eax
c002246d:	75 44                	jne    c00224b3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002246f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0022473:	b9 03 00 00 00       	mov    ecx,0x3
c0022478:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002247a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002247e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0022483:	0f c8                	bswap  eax
c0022485:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0022489:	89 f0                	mov    eax,esi
c002248b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002248f:	50                   	push   eax
c0022490:	56                   	push   esi
c0022491:	c1 e6 0b             	shl    esi,0xb
c0022494:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0022498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002249c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00224a0:	56                   	push   esi
c00224a1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00224a5:	50                   	push   eax
c00224a6:	53                   	push   ebx
c00224a7:	e8 c4 fa ff ff       	call   c0021f70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00224ac:	83 c4 20             	add    esp,0x20
c00224af:	85 c0                	test   eax,eax
c00224b1:	74 14                	je     c00224c7 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c00224b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224b7:	83 ec 0c             	sub    esp,0xc
c00224ba:	53                   	push   ebx
c00224bb:	e8 ce fd ff ff       	call   c002228e <SATAPI::detectMedia()>
c00224c0:	83 c4 10             	add    esp,0x10
c00224c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224c7:	83 c4 30             	add    esp,0x30
c00224ca:	5b                   	pop    ebx
c00224cb:	5e                   	pop    esi
c00224cc:	5f                   	pop    edi
c00224cd:	c3                   	ret    
c00224ce:	66 90                	xchg   ax,ax

c00224d0 <APICTimer::close(int, int, void*)>:
c00224d0:	b8 00 00 00 00       	mov    eax,0x0
c00224d5:	c3                   	ret    
c00224d6:	66 90                	xchg   ax,ax

c00224d8 <apicTimerHandler(regs*, void*)>:
c00224d8:	83 ec 0c             	sub    esp,0xc
c00224db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00224df:	8b 08                	mov    ecx,DWORD PTR [eax]
c00224e1:	b8 10 27 00 00       	mov    eax,0x2710
c00224e6:	ba 00 00 00 00       	mov    edx,0x0
c00224eb:	f7 f1                	div    ecx
c00224ed:	83 ec 0c             	sub    esp,0xc
c00224f0:	50                   	push   eax
c00224f1:	e8 4a 94 fe ff       	call   c000b940 <timerHandler(unsigned int)>
c00224f6:	83 c4 10             	add    esp,0x10
c00224f9:	90                   	nop
c00224fa:	83 c4 0c             	add    esp,0xc
c00224fd:	c3                   	ret    
c00224fe:	66 90                	xchg   ax,ax

c0022500 <APICTimer::open(int, int, void*)>:
c0022500:	83 ec 0c             	sub    esp,0xc
c0022503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022507:	8b 00                	mov    eax,DWORD PTR [eax]
c0022509:	83 c0 24             	add    eax,0x24
c002250c:	8b 00                	mov    eax,DWORD PTR [eax]
c002250e:	83 ec 08             	sub    esp,0x8
c0022511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022519:	ff d0                	call   eax
c002251b:	83 c4 10             	add    esp,0x10
c002251e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022522:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022526:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002252c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022530:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022534:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002253a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002253e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022544:	83 ec 0c             	sub    esp,0xc
c0022547:	51                   	push   ecx
c0022548:	6a 01                	push   0x1
c002254a:	68 d8 24 02 c0       	push   0xc00224d8
c002254f:	52                   	push   edx
c0022550:	50                   	push   eax
c0022551:	e8 f6 7c fe ff       	call   c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022556:	83 c4 20             	add    esp,0x20
c0022559:	89 c2                	mov    edx,eax
c002255b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002255f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022565:	b8 00 00 00 00       	mov    eax,0x0
c002256a:	83 c4 0c             	add    esp,0xc
c002256d:	c3                   	ret    
c002256e:	66 90                	xchg   ax,ax

c0022570 <APICTimer::write(int)>:
c0022570:	83 ec 0c             	sub    esp,0xc
c0022573:	83 ec 0c             	sub    esp,0xc
c0022576:	68 20 be 02 c0       	push   0xc002be20
c002257b:	e8 90 df fe ff       	call   c0010510 <KePanic(char const*)>
c0022580:	83 c4 10             	add    esp,0x10
c0022583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022587:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002258b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022591:	90                   	nop
c0022592:	83 c4 0c             	add    esp,0xc
c0022595:	c3                   	ret    
c0022596:	66 90                	xchg   ax,ax

c0022598 <APICTimer::APICTimer()>:
c0022598:	83 ec 0c             	sub    esp,0xc
c002259b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002259f:	83 ec 08             	sub    esp,0x8
c00225a2:	68 30 be 02 c0       	push   0xc002be30
c00225a7:	50                   	push   eax
c00225a8:	e8 c7 92 fe ff       	call   c000b874 <Timer::Timer(char const*)>
c00225ad:	83 c4 10             	add    esp,0x10
c00225b0:	ba 44 be 02 c0       	mov    edx,0xc002be44
c00225b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b9:	89 10                	mov    DWORD PTR [eax],edx
c00225bb:	90                   	nop
c00225bc:	83 c4 0c             	add    esp,0xc
c00225bf:	c3                   	ret    

c00225c0 <PIT::write(int)>:
c00225c0:	83 ec 10             	sub    esp,0x10
c00225c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00225cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00225d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00225d5:	a3 b8 5d 03 c0       	mov    ds:0xc0035db8,eax
c00225da:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00225df:	89 c2                	mov    edx,eax
c00225e1:	c1 fa 1f             	sar    edx,0x1f
c00225e4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00225e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00225ec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00225f3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00225f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00225fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022601:	ee                   	out    dx,al
c0022602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022606:	0f b6 c0             	movzx  eax,al
c0022609:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022610:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022614:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022618:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002261d:	ee                   	out    dx,al
c002261e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022622:	c1 f8 08             	sar    eax,0x8
c0022625:	0f b6 c0             	movzx  eax,al
c0022628:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002262f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022633:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022637:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002263c:	ee                   	out    dx,al
c002263d:	90                   	nop
c002263e:	83 c4 10             	add    esp,0x10
c0022641:	c3                   	ret    
c0022642:	66 90                	xchg   ax,ax

c0022644 <pitHandler(regs*, void*)>:
c0022644:	83 ec 0c             	sub    esp,0xc
c0022647:	8b 0d b8 5d 03 c0    	mov    ecx,DWORD PTR ds:0xc0035db8
c002264d:	b8 10 27 00 00       	mov    eax,0x2710
c0022652:	89 c2                	mov    edx,eax
c0022654:	c1 fa 1f             	sar    edx,0x1f
c0022657:	f7 f9                	idiv   ecx
c0022659:	83 ec 0c             	sub    esp,0xc
c002265c:	50                   	push   eax
c002265d:	e8 de 92 fe ff       	call   c000b940 <timerHandler(unsigned int)>
c0022662:	83 c4 10             	add    esp,0x10
c0022665:	90                   	nop
c0022666:	83 c4 0c             	add    esp,0xc
c0022669:	c3                   	ret    
c002266a:	66 90                	xchg   ax,ax

c002266c <PIT::open(int, int, void*)>:
c002266c:	83 ec 0c             	sub    esp,0xc
c002266f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022673:	8b 00                	mov    eax,DWORD PTR [eax]
c0022675:	83 c0 24             	add    eax,0x24
c0022678:	8b 00                	mov    eax,DWORD PTR [eax]
c002267a:	83 ec 08             	sub    esp,0x8
c002267d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022685:	ff d0                	call   eax
c0022687:	83 c4 10             	add    esp,0x10
c002268a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002268e:	83 ec 0c             	sub    esp,0xc
c0022691:	6a 00                	push   0x0
c0022693:	6a 01                	push   0x1
c0022695:	68 44 26 02 c0       	push   0xc0022644
c002269a:	6a 00                	push   0x0
c002269c:	50                   	push   eax
c002269d:	e8 aa 7b fe ff       	call   c000a24c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00226a2:	83 c4 20             	add    esp,0x20
c00226a5:	89 c2                	mov    edx,eax
c00226a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00226b1:	b8 00 00 00 00       	mov    eax,0x0
c00226b6:	83 c4 0c             	add    esp,0xc
c00226b9:	c3                   	ret    
c00226ba:	66 90                	xchg   ax,ax

c00226bc <PIT::close(int, int, void*)>:
c00226bc:	83 ec 0c             	sub    esp,0xc
c00226bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226c3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00226cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d1:	6a 01                	push   0x1
c00226d3:	68 44 26 02 c0       	push   0xc0022644
c00226d8:	6a 00                	push   0x0
c00226da:	50                   	push   eax
c00226db:	e8 a2 7b fe ff       	call   c000a282 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00226e0:	83 c4 10             	add    esp,0x10
c00226e3:	b8 00 00 00 00       	mov    eax,0x0
c00226e8:	83 c4 0c             	add    esp,0xc
c00226eb:	c3                   	ret    

c00226ec <PIT::PIT()>:
c00226ec:	83 ec 0c             	sub    esp,0xc
c00226ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f3:	83 ec 08             	sub    esp,0x8
c00226f6:	68 6c be 02 c0       	push   0xc002be6c
c00226fb:	50                   	push   eax
c00226fc:	e8 73 91 fe ff       	call   c000b874 <Timer::Timer(char const*)>
c0022701:	83 c4 10             	add    esp,0x10
c0022704:	ba 94 be 02 c0       	mov    edx,0xc002be94
c0022709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002270d:	89 10                	mov    DWORD PTR [eax],edx
c002270f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022713:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022719:	0f b6 d0             	movzx  edx,al
c002271c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022720:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002272b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022731:	0f b6 d0             	movzx  edx,al
c0022734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022738:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002273d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022741:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022747:	8d 50 01             	lea    edx,[eax+0x1]
c002274a:	88 d1                	mov    cl,dl
c002274c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022750:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0022756:	0f b6 d0             	movzx  edx,al
c0022759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002275d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022761:	83 e1 3f             	and    ecx,0x3f
c0022764:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022768:	90                   	nop
c0022769:	83 c4 0c             	add    esp,0xc
c002276c:	c3                   	ret    
c002276d:	66 90                	xchg   ax,ax
c002276f:	90                   	nop

c0022770 <avxDetect>:
c0022770:	b8 01 00 00 00       	mov    eax,0x1
c0022775:	0f a2                	cpuid  
c0022777:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002277d:	74 15                	je     c0022794 <avxDetect.noAVX>
c002277f:	b8 01 00 00 00       	mov    eax,0x1
c0022784:	0f a2                	cpuid  
c0022786:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002278c:	74 06                	je     c0022794 <avxDetect.noAVX>
c002278e:	b8 01 00 00 00       	mov    eax,0x1
c0022793:	c3                   	ret    

c0022794 <avxDetect.noAVX>:
c0022794:	b8 00 00 00 00       	mov    eax,0x0
c0022799:	c3                   	ret    

c002279a <avxSave>:
c002279a:	53                   	push   ebx
c002279b:	52                   	push   edx
c002279c:	31 c0                	xor    eax,eax
c002279e:	48                   	dec    eax
c002279f:	89 c2                	mov    edx,eax
c00227a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00227a5:	0f ae 23             	xsave  [ebx]
c00227a8:	5a                   	pop    edx
c00227a9:	5b                   	pop    ebx
c00227aa:	c3                   	ret    

c00227ab <avxLoad>:
c00227ab:	53                   	push   ebx
c00227ac:	52                   	push   edx
c00227ad:	31 c0                	xor    eax,eax
c00227af:	48                   	dec    eax
c00227b0:	89 c2                	mov    edx,eax
c00227b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00227b6:	0f ae 2b             	xrstor [ebx]
c00227b9:	5a                   	pop    edx
c00227ba:	5b                   	pop    ebx
c00227bb:	c3                   	ret    

c00227bc <avxInit>:
c00227bc:	e8 17 03 00 00       	call   c0022ad8 <sseInit>
c00227c1:	50                   	push   eax
c00227c2:	51                   	push   ecx
c00227c3:	0f 20 e0             	mov    eax,cr4
c00227c6:	0d 00 00 04 00       	or     eax,0x40000
c00227cb:	0f 22 e0             	mov    cr4,eax
c00227ce:	31 c9                	xor    ecx,ecx
c00227d0:	0f 01 d0             	xgetbv 
c00227d3:	0d 07 00 00 00       	or     eax,0x7
c00227d8:	0f 01 d1             	xsetbv 
c00227db:	59                   	pop    ecx
c00227dc:	58                   	pop    eax
c00227dd:	c3                   	ret    

c00227de <avxClose>:
c00227de:	c3                   	ret    
c00227df:	90                   	nop

c00227e0 <isr0>:
c00227e0:	fa                   	cli    
c00227e1:	68 00 00 00 00       	push   0x0
c00227e6:	68 00 00 00 00       	push   0x0
c00227eb:	e9 56 01 00 00       	jmp    c0022946 <int_common_stub>

c00227f0 <isr1>:
c00227f0:	fa                   	cli    
c00227f1:	6a 00                	push   0x0
c00227f3:	6a 01                	push   0x1
c00227f5:	e9 4c 01 00 00       	jmp    c0022946 <int_common_stub>

c00227fa <isr2>:
c00227fa:	fa                   	cli    
c00227fb:	6a 00                	push   0x0
c00227fd:	6a 02                	push   0x2
c00227ff:	e9 42 01 00 00       	jmp    c0022946 <int_common_stub>

c0022804 <isr3>:
c0022804:	fa                   	cli    
c0022805:	6a 00                	push   0x0
c0022807:	6a 03                	push   0x3
c0022809:	e9 38 01 00 00       	jmp    c0022946 <int_common_stub>

c002280e <isr4>:
c002280e:	fa                   	cli    
c002280f:	6a 00                	push   0x0
c0022811:	6a 04                	push   0x4
c0022813:	e9 2e 01 00 00       	jmp    c0022946 <int_common_stub>

c0022818 <isr5>:
c0022818:	fa                   	cli    
c0022819:	6a 00                	push   0x0
c002281b:	6a 05                	push   0x5
c002281d:	e9 24 01 00 00       	jmp    c0022946 <int_common_stub>

c0022822 <isr6>:
c0022822:	fa                   	cli    
c0022823:	6a 00                	push   0x0
c0022825:	6a 06                	push   0x6
c0022827:	e9 1a 01 00 00       	jmp    c0022946 <int_common_stub>

c002282c <isr7>:
c002282c:	fa                   	cli    
c002282d:	6a 00                	push   0x0
c002282f:	6a 07                	push   0x7
c0022831:	e9 10 01 00 00       	jmp    c0022946 <int_common_stub>

c0022836 <isr8>:
c0022836:	fa                   	cli    
c0022837:	6a 08                	push   0x8
c0022839:	e9 08 01 00 00       	jmp    c0022946 <int_common_stub>

c002283e <isr9>:
c002283e:	fa                   	cli    
c002283f:	6a 00                	push   0x0
c0022841:	6a 09                	push   0x9
c0022843:	e9 fe 00 00 00       	jmp    c0022946 <int_common_stub>

c0022848 <isr10>:
c0022848:	fa                   	cli    
c0022849:	6a 0a                	push   0xa
c002284b:	e9 f6 00 00 00       	jmp    c0022946 <int_common_stub>

c0022850 <isr11>:
c0022850:	fa                   	cli    
c0022851:	6a 0b                	push   0xb
c0022853:	e9 ee 00 00 00       	jmp    c0022946 <int_common_stub>

c0022858 <isr12>:
c0022858:	fa                   	cli    
c0022859:	6a 0c                	push   0xc
c002285b:	e9 e6 00 00 00       	jmp    c0022946 <int_common_stub>

c0022860 <isr13>:
c0022860:	fa                   	cli    
c0022861:	6a 0d                	push   0xd
c0022863:	53                   	push   ebx
c0022864:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022868:	81 fb 0b 2a 02 c0    	cmp    ebx,0xc0022a0b
c002286e:	5b                   	pop    ebx
c002286f:	0f 84 98 01 00 00    	je     c0022a0d <finishSignal2>
c0022875:	e9 cc 00 00 00       	jmp    c0022946 <int_common_stub>

c002287a <isr14>:
c002287a:	fa                   	cli    
c002287b:	6a 0e                	push   0xe
c002287d:	e9 c4 00 00 00       	jmp    c0022946 <int_common_stub>

c0022882 <isr15>:
c0022882:	fa                   	cli    
c0022883:	6a 00                	push   0x0
c0022885:	6a 0f                	push   0xf
c0022887:	e9 ba 00 00 00       	jmp    c0022946 <int_common_stub>

c002288c <isr16>:
c002288c:	fa                   	cli    
c002288d:	6a 00                	push   0x0
c002288f:	6a 10                	push   0x10
c0022891:	e9 b0 00 00 00       	jmp    c0022946 <int_common_stub>

c0022896 <isr17>:
c0022896:	fa                   	cli    
c0022897:	6a 00                	push   0x0
c0022899:	6a 11                	push   0x11
c002289b:	e9 a6 00 00 00       	jmp    c0022946 <int_common_stub>

c00228a0 <isr18>:
c00228a0:	fa                   	cli    
c00228a1:	6a 00                	push   0x0
c00228a3:	6a 12                	push   0x12
c00228a5:	e9 9c 00 00 00       	jmp    c0022946 <int_common_stub>

c00228aa <irq3>:
c00228aa:	fa                   	cli    
c00228ab:	6a 00                	push   0x0
c00228ad:	6a 23                	push   0x23
c00228af:	e9 92 00 00 00       	jmp    c0022946 <int_common_stub>

c00228b4 <irq4>:
c00228b4:	fa                   	cli    
c00228b5:	6a 00                	push   0x0
c00228b7:	6a 24                	push   0x24
c00228b9:	e9 88 00 00 00       	jmp    c0022946 <int_common_stub>

c00228be <irq5>:
c00228be:	fa                   	cli    
c00228bf:	6a 00                	push   0x0
c00228c1:	6a 25                	push   0x25
c00228c3:	e9 7e 00 00 00       	jmp    c0022946 <int_common_stub>

c00228c8 <irq6>:
c00228c8:	fa                   	cli    
c00228c9:	6a 00                	push   0x0
c00228cb:	6a 26                	push   0x26
c00228cd:	e9 74 00 00 00       	jmp    c0022946 <int_common_stub>

c00228d2 <irq7>:
c00228d2:	fa                   	cli    
c00228d3:	6a 00                	push   0x0
c00228d5:	6a 27                	push   0x27
c00228d7:	e9 6a 00 00 00       	jmp    c0022946 <int_common_stub>

c00228dc <irq8>:
c00228dc:	fa                   	cli    
c00228dd:	6a 00                	push   0x0
c00228df:	6a 28                	push   0x28
c00228e1:	e9 60 00 00 00       	jmp    c0022946 <int_common_stub>

c00228e6 <irq9>:
c00228e6:	fa                   	cli    
c00228e7:	6a 00                	push   0x0
c00228e9:	6a 29                	push   0x29
c00228eb:	e9 56 00 00 00       	jmp    c0022946 <int_common_stub>

c00228f0 <irq10>:
c00228f0:	fa                   	cli    
c00228f1:	6a 00                	push   0x0
c00228f3:	6a 2a                	push   0x2a
c00228f5:	e9 4c 00 00 00       	jmp    c0022946 <int_common_stub>

c00228fa <irq11>:
c00228fa:	fa                   	cli    
c00228fb:	6a 00                	push   0x0
c00228fd:	6a 2b                	push   0x2b
c00228ff:	e9 42 00 00 00       	jmp    c0022946 <int_common_stub>

c0022904 <irq12>:
c0022904:	fa                   	cli    
c0022905:	6a 00                	push   0x0
c0022907:	6a 2c                	push   0x2c
c0022909:	e9 38 00 00 00       	jmp    c0022946 <int_common_stub>

c002290e <irq13>:
c002290e:	fa                   	cli    
c002290f:	6a 00                	push   0x0
c0022911:	6a 2d                	push   0x2d
c0022913:	e9 2e 00 00 00       	jmp    c0022946 <int_common_stub>

c0022918 <irq14>:
c0022918:	fa                   	cli    
c0022919:	6a 00                	push   0x0
c002291b:	6a 2e                	push   0x2e
c002291d:	e9 24 00 00 00       	jmp    c0022946 <int_common_stub>

c0022922 <irq15>:
c0022922:	fa                   	cli    
c0022923:	6a 00                	push   0x0
c0022925:	6a 2f                	push   0x2f
c0022927:	e9 1a 00 00 00       	jmp    c0022946 <int_common_stub>

c002292c <irq1>:
c002292c:	fa                   	cli    
c002292d:	6a 00                	push   0x0
c002292f:	6a 21                	push   0x21
c0022931:	eb 13                	jmp    c0022946 <int_common_stub>

c0022933 <irq2>:
c0022933:	fa                   	cli    
c0022934:	6a 00                	push   0x0
c0022936:	6a 22                	push   0x22
c0022938:	eb 0c                	jmp    c0022946 <int_common_stub>

c002293a <isr96>:
c002293a:	6a 00                	push   0x0
c002293c:	6a 60                	push   0x60
c002293e:	fb                   	sti    
c002293f:	eb 05                	jmp    c0022946 <int_common_stub>

c0022941 <irq0>:
c0022941:	fa                   	cli    
c0022942:	6a 00                	push   0x0
c0022944:	6a 20                	push   0x20

c0022946 <int_common_stub>:
c0022946:	60                   	pusha  
c0022947:	1e                   	push   ds
c0022948:	06                   	push   es
c0022949:	0f a0                	push   fs
c002294b:	0f a8                	push   gs
c002294d:	66 b8 10 00          	mov    ax,0x10
c0022951:	66 8e d8             	mov    ds,ax
c0022954:	66 8e c0             	mov    es,ax
c0022957:	66 8e e0             	mov    fs,ax
c002295a:	66 8e e8             	mov    gs,ax
c002295d:	54                   	push   esp
c002295e:	fc                   	cld    
c002295f:	e8 24 8e ff ff       	call   c001b788 <int_handler>
c0022964:	81 c4 04 00 00 00    	add    esp,0x4
c002296a:	e8 6c ef fe ff       	call   c00118db <KiCheckSignalZ>
c002296f:	85 c0                	test   eax,eax
c0022971:	75 0e                	jne    c0022981 <doSignals>
c0022973:	0f a9                	pop    gs
c0022975:	0f a1                	pop    fs
c0022977:	07                   	pop    es
c0022978:	1f                   	pop    ds
c0022979:	61                   	popa   
c002297a:	81 c4 08 00 00 00    	add    esp,0x8
c0022980:	cf                   	iret   

c0022981 <doSignals>:
c0022981:	0f a9                	pop    gs
c0022983:	0f a1                	pop    fs
c0022985:	07                   	pop    es
c0022986:	1f                   	pop    ds
c0022987:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002298c:	61                   	popa   
c002298d:	53                   	push   ebx
c002298e:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0022994:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0022997:	5b                   	pop    ebx
c0022998:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002299d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00229a0:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00229a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00229a6:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00229a9:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00229ac:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00229af:	81 c4 08 00 00 00    	add    esp,0x8
c00229b5:	5e                   	pop    esi
c00229b6:	5b                   	pop    ebx
c00229b7:	59                   	pop    ecx
c00229b8:	5a                   	pop    edx
c00229b9:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00229bc:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00229bf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00229c2:	52                   	push   edx
c00229c3:	51                   	push   ecx
c00229c4:	53                   	push   ebx
c00229c5:	56                   	push   esi
c00229c6:	81 ec 08 00 00 00    	sub    esp,0x8
c00229cc:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00229cf:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00229d2:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00229d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00229d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00229db:	60                   	pusha  
c00229dc:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00229e2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00229e5:	89 e3                	mov    ebx,esp
c00229e7:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00229ea:	52                   	push   edx
c00229eb:	68 0b 2a 02 c0       	push   0xc0022a0b
c00229f0:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00229f3:	89 dc                	mov    esp,ebx
c00229f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00229f8:	68 23 00 00 00       	push   0x23
c00229fd:	51                   	push   ecx
c00229fe:	68 02 02 00 00       	push   0x202
c0022a03:	68 1b 00 00 00       	push   0x1b
c0022a08:	ff 36                	push   DWORD PTR [esi]
c0022a0a:	cf                   	iret   

c0022a0b <finishSignal>:
c0022a0b:	cd 0f                	int    0xf

c0022a0d <finishSignal2>:
c0022a0d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0022a13:	e8 4f ef fe ff       	call   c0011967 <KiFinishSignalZ>
c0022a18:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0022a1e:	68 23 00 00 00       	push   0x23
c0022a23:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0022a26:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0022a29:	68 1b 00 00 00       	push   0x1b
c0022a2e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0022a31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a34:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0022a37:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0022a3a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022a3d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0022a40:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0022a43:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0022a46:	cf                   	iret   
c0022a47:	90                   	nop

c0022a48 <irq16>:
c0022a48:	fa                   	cli    
c0022a49:	6a 00                	push   0x0
c0022a4b:	6a 30                	push   0x30
c0022a4d:	e9 f4 fe ff ff       	jmp    c0022946 <int_common_stub>

c0022a52 <irq17>:
c0022a52:	fa                   	cli    
c0022a53:	6a 00                	push   0x0
c0022a55:	6a 31                	push   0x31
c0022a57:	e9 ea fe ff ff       	jmp    c0022946 <int_common_stub>

c0022a5c <irq18>:
c0022a5c:	fa                   	cli    
c0022a5d:	6a 00                	push   0x0
c0022a5f:	6a 32                	push   0x32
c0022a61:	e9 e0 fe ff ff       	jmp    c0022946 <int_common_stub>

c0022a66 <irq19>:
c0022a66:	fa                   	cli    
c0022a67:	6a 00                	push   0x0
c0022a69:	6a 33                	push   0x33
c0022a6b:	e9 d6 fe ff ff       	jmp    c0022946 <int_common_stub>

c0022a70 <irq20>:
c0022a70:	fa                   	cli    
c0022a71:	6a 00                	push   0x0
c0022a73:	6a 34                	push   0x34
c0022a75:	e9 cc fe ff ff       	jmp    c0022946 <int_common_stub>

c0022a7a <irq21>:
c0022a7a:	fa                   	cli    
c0022a7b:	6a 00                	push   0x0
c0022a7d:	6a 35                	push   0x35
c0022a7f:	e9 c2 fe ff ff       	jmp    c0022946 <int_common_stub>

c0022a84 <irq22>:
c0022a84:	fa                   	cli    
c0022a85:	6a 00                	push   0x0
c0022a87:	6a 36                	push   0x36
c0022a89:	e9 b8 fe ff ff       	jmp    c0022946 <int_common_stub>

c0022a8e <irq23>:
c0022a8e:	fa                   	cli    
c0022a8f:	6a 00                	push   0x0
c0022a91:	6a 37                	push   0x37
c0022a93:	e9 ae fe ff ff       	jmp    c0022946 <int_common_stub>
c0022a98:	66 90                	xchg   ax,ax
c0022a9a:	66 90                	xchg   ax,ax
c0022a9c:	66 90                	xchg   ax,ax
c0022a9e:	66 90                	xchg   ax,ax

c0022aa0 <i386GetRDRAND>:
c0022aa0:	b9 64 00 00 00       	mov    ecx,0x64

c0022aa5 <retry>:
c0022aa5:	0f c7 f0             	rdrand eax
c0022aa8:	72 05                	jb     c0022aaf <retry.done>
c0022aaa:	e2 f9                	loop   c0022aa5 <retry>

c0022aac <retry.fail>:
c0022aac:	31 c0                	xor    eax,eax
c0022aae:	c3                   	ret    

c0022aaf <retry.done>:
c0022aaf:	c3                   	ret    

c0022ab0 <sseDetect>:
c0022ab0:	b8 01 00 00 00       	mov    eax,0x1
c0022ab5:	0f a2                	cpuid  
c0022ab7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022abd:	74 06                	je     c0022ac5 <sseDetect.noSSE>
c0022abf:	b8 01 00 00 00       	mov    eax,0x1
c0022ac4:	c3                   	ret    

c0022ac5 <sseDetect.noSSE>:
c0022ac5:	31 c0                	xor    eax,eax
c0022ac7:	c3                   	ret    

c0022ac8 <sseSave>:
c0022ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022acc:	0f ae 00             	fxsave [eax]
c0022acf:	c3                   	ret    

c0022ad0 <sseLoad>:
c0022ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad4:	0f ae 08             	fxrstor [eax]
c0022ad7:	c3                   	ret    

c0022ad8 <sseInit>:
c0022ad8:	e8 48 00 00 00       	call   c0022b25 <x87Init>
c0022add:	0f 20 e0             	mov    eax,cr4
c0022ae0:	66 0d 00 06          	or     ax,0x600
c0022ae4:	0f 22 e0             	mov    cr4,eax
c0022ae7:	c3                   	ret    

c0022ae8 <sseClose>:
c0022ae8:	c3                   	ret    
c0022ae9:	66 90                	xchg   ax,ax
c0022aeb:	66 90                	xchg   ax,ax
c0022aed:	66 90                	xchg   ax,ax
c0022aef:	90                   	nop

c0022af0 <value_37F>:
c0022af0:	7f 03                	jg     c0022af5 <value_37A+0x1>

c0022af2 <value_37E>:
c0022af2:	7e 03                	jle    c0022af7 <x87Detect+0x1>

c0022af4 <value_37A>:
c0022af4:	7a 03                	jp     c0022af9 <x87Detect+0x3>

c0022af6 <x87Detect>:
c0022af6:	53                   	push   ebx
c0022af7:	51                   	push   ecx
c0022af8:	52                   	push   edx
c0022af9:	b8 01 00 00 00       	mov    eax,0x1
c0022afe:	0f a2                	cpuid  
c0022b00:	f7 c2 01 00 00 00    	test   edx,0x1
c0022b06:	74 06                	je     c0022b0e <x87Detect.nox87>
c0022b08:	b8 01 00 00 00       	mov    eax,0x1
c0022b0d:	c3                   	ret    

c0022b0e <x87Detect.nox87>:
c0022b0e:	b8 00 00 00 00       	mov    eax,0x0
c0022b13:	5a                   	pop    edx
c0022b14:	59                   	pop    ecx
c0022b15:	5b                   	pop    ebx
c0022b16:	c3                   	ret    

c0022b17 <x87Save>:
c0022b17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b1b:	dd 30                	fnsave [eax]
c0022b1d:	c3                   	ret    

c0022b1e <x87Load>:
c0022b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b22:	dd 20                	frstor [eax]
c0022b24:	c3                   	ret    

c0022b25 <x87Init>:
c0022b25:	0f 20 c0             	mov    eax,cr0
c0022b28:	66 25 fb ff          	and    ax,0xfffb
c0022b2c:	66 0d 22 00          	or     ax,0x22
c0022b30:	0f 22 c0             	mov    cr0,eax
c0022b33:	db e3                	fninit 
c0022b35:	0f 06                	clts   
c0022b37:	d9 2d f4 2a 02 c0    	fldcw  WORD PTR ds:0xc0022af4
c0022b3d:	c3                   	ret    

c0022b3e <x87Close>:
c0022b3e:	c3                   	ret    
c0022b3f:	90                   	nop

c0022b40 <__do_global_ctors_aux>:
c0022b40:	a1 28 82 02 c0       	mov    eax,ds:0xc0028228
c0022b45:	83 f8 ff             	cmp    eax,0xffffffff
c0022b48:	74 1a                	je     c0022b64 <__do_global_ctors_aux+0x24>
c0022b4a:	55                   	push   ebp
c0022b4b:	89 e5                	mov    ebp,esp
c0022b4d:	53                   	push   ebx
c0022b4e:	52                   	push   edx
c0022b4f:	bb 28 82 02 c0       	mov    ebx,0xc0028228
c0022b54:	ff d0                	call   eax
c0022b56:	83 eb 04             	sub    ebx,0x4
c0022b59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022b5b:	83 f8 ff             	cmp    eax,0xffffffff
c0022b5e:	75 f4                	jne    c0022b54 <__do_global_ctors_aux+0x14>
c0022b60:	58                   	pop    eax
c0022b61:	5b                   	pop    ebx
c0022b62:	5d                   	pop    ebp
c0022b63:	c3                   	ret    
c0022b64:	c3                   	ret    
c0022b65:	66 90                	xchg   ax,ax
c0022b67:	90                   	nop

c0022b68 <__divdi3>:
c0022b68:	55                   	push   ebp
c0022b69:	57                   	push   edi
c0022b6a:	56                   	push   esi
c0022b6b:	53                   	push   ebx
c0022b6c:	83 ec 1c             	sub    esp,0x1c
c0022b6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022b73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022b77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022b7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022b7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022b82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b86:	85 db                	test   ebx,ebx
c0022b88:	0f 88 8e 00 00 00    	js     c0022c1c <__divdi3+0xb4>
c0022b8e:	89 dd                	mov    ebp,ebx
c0022b90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b98:	89 d3                	mov    ebx,edx
c0022b9a:	85 d2                	test   edx,edx
c0022b9c:	79 0d                	jns    c0022bab <__divdi3+0x43>
c0022b9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022ba2:	f7 d8                	neg    eax
c0022ba4:	83 d2 00             	adc    edx,0x0
c0022ba7:	f7 da                	neg    edx
c0022ba9:	89 d3                	mov    ebx,edx
c0022bab:	89 c7                	mov    edi,eax
c0022bad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022bb0:	85 db                	test   ebx,ebx
c0022bb2:	75 48                	jne    c0022bfc <__divdi3+0x94>
c0022bb4:	39 ef                	cmp    edi,ebp
c0022bb6:	76 24                	jbe    c0022bdc <__divdi3+0x74>
c0022bb8:	89 ea                	mov    edx,ebp
c0022bba:	f7 f7                	div    edi
c0022bbc:	89 c1                	mov    ecx,eax
c0022bbe:	31 f6                	xor    esi,esi
c0022bc0:	89 c8                	mov    eax,ecx
c0022bc2:	89 f2                	mov    edx,esi
c0022bc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022bc8:	85 c9                	test   ecx,ecx
c0022bca:	74 07                	je     c0022bd3 <__divdi3+0x6b>
c0022bcc:	f7 d8                	neg    eax
c0022bce:	83 d2 00             	adc    edx,0x0
c0022bd1:	f7 da                	neg    edx
c0022bd3:	83 c4 1c             	add    esp,0x1c
c0022bd6:	5b                   	pop    ebx
c0022bd7:	5e                   	pop    esi
c0022bd8:	5f                   	pop    edi
c0022bd9:	5d                   	pop    ebp
c0022bda:	c3                   	ret    
c0022bdb:	90                   	nop
c0022bdc:	85 ff                	test   edi,edi
c0022bde:	75 0b                	jne    c0022beb <__divdi3+0x83>
c0022be0:	b8 01 00 00 00       	mov    eax,0x1
c0022be5:	31 d2                	xor    edx,edx
c0022be7:	f7 f3                	div    ebx
c0022be9:	89 c7                	mov    edi,eax
c0022beb:	31 d2                	xor    edx,edx
c0022bed:	89 e8                	mov    eax,ebp
c0022bef:	f7 f7                	div    edi
c0022bf1:	89 c6                	mov    esi,eax
c0022bf3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022bf6:	f7 f7                	div    edi
c0022bf8:	89 c1                	mov    ecx,eax
c0022bfa:	eb c4                	jmp    c0022bc0 <__divdi3+0x58>
c0022bfc:	39 eb                	cmp    ebx,ebp
c0022bfe:	77 3c                	ja     c0022c3c <__divdi3+0xd4>
c0022c00:	0f bd f3             	bsr    esi,ebx
c0022c03:	83 f6 1f             	xor    esi,0x1f
c0022c06:	75 40                	jne    c0022c48 <__divdi3+0xe0>
c0022c08:	39 eb                	cmp    ebx,ebp
c0022c0a:	72 09                	jb     c0022c15 <__divdi3+0xad>
c0022c0c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022c0f:	0f 87 97 00 00 00    	ja     c0022cac <__divdi3+0x144>
c0022c15:	b9 01 00 00 00       	mov    ecx,0x1
c0022c1a:	eb a4                	jmp    c0022bc0 <__divdi3+0x58>
c0022c1c:	f7 d9                	neg    ecx
c0022c1e:	83 d3 00             	adc    ebx,0x0
c0022c21:	f7 db                	neg    ebx
c0022c23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022c26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022c2a:	89 dd                	mov    ebp,ebx
c0022c2c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022c34:	e9 5f ff ff ff       	jmp    c0022b98 <__divdi3+0x30>
c0022c39:	8d 76 00             	lea    esi,[esi+0x0]
c0022c3c:	31 f6                	xor    esi,esi
c0022c3e:	31 c9                	xor    ecx,ecx
c0022c40:	e9 7b ff ff ff       	jmp    c0022bc0 <__divdi3+0x58>
c0022c45:	8d 76 00             	lea    esi,[esi+0x0]
c0022c48:	b8 20 00 00 00       	mov    eax,0x20
c0022c4d:	29 f0                	sub    eax,esi
c0022c4f:	89 f1                	mov    ecx,esi
c0022c51:	d3 e3                	shl    ebx,cl
c0022c53:	89 fa                	mov    edx,edi
c0022c55:	88 c1                	mov    cl,al
c0022c57:	d3 ea                	shr    edx,cl
c0022c59:	09 da                	or     edx,ebx
c0022c5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c5f:	89 f1                	mov    ecx,esi
c0022c61:	d3 e7                	shl    edi,cl
c0022c63:	89 eb                	mov    ebx,ebp
c0022c65:	88 c1                	mov    cl,al
c0022c67:	d3 eb                	shr    ebx,cl
c0022c69:	89 f1                	mov    ecx,esi
c0022c6b:	d3 e5                	shl    ebp,cl
c0022c6d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022c70:	88 c1                	mov    cl,al
c0022c72:	d3 ea                	shr    edx,cl
c0022c74:	09 d5                	or     ebp,edx
c0022c76:	89 e8                	mov    eax,ebp
c0022c78:	89 da                	mov    edx,ebx
c0022c7a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022c7e:	89 d3                	mov    ebx,edx
c0022c80:	89 c5                	mov    ebp,eax
c0022c82:	f7 e7                	mul    edi
c0022c84:	39 d3                	cmp    ebx,edx
c0022c86:	72 18                	jb     c0022ca0 <__divdi3+0x138>
c0022c88:	74 0a                	je     c0022c94 <__divdi3+0x12c>
c0022c8a:	89 e9                	mov    ecx,ebp
c0022c8c:	31 f6                	xor    esi,esi
c0022c8e:	e9 2d ff ff ff       	jmp    c0022bc0 <__divdi3+0x58>
c0022c93:	90                   	nop
c0022c94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022c97:	89 f1                	mov    ecx,esi
c0022c99:	d3 e7                	shl    edi,cl
c0022c9b:	39 c7                	cmp    edi,eax
c0022c9d:	73 eb                	jae    c0022c8a <__divdi3+0x122>
c0022c9f:	90                   	nop
c0022ca0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022ca3:	31 f6                	xor    esi,esi
c0022ca5:	e9 16 ff ff ff       	jmp    c0022bc0 <__divdi3+0x58>
c0022caa:	66 90                	xchg   ax,ax
c0022cac:	31 c9                	xor    ecx,ecx
c0022cae:	e9 0d ff ff ff       	jmp    c0022bc0 <__divdi3+0x58>
c0022cb3:	90                   	nop

c0022cb4 <__moddi3>:
c0022cb4:	55                   	push   ebp
c0022cb5:	57                   	push   edi
c0022cb6:	56                   	push   esi
c0022cb7:	53                   	push   ebx
c0022cb8:	83 ec 2c             	sub    esp,0x2c
c0022cbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022cbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022cc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022cc7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022ccb:	85 db                	test   ebx,ebx
c0022ccd:	0f 88 85 00 00 00    	js     c0022d58 <__moddi3+0xa4>
c0022cd3:	89 de                	mov    esi,ebx
c0022cd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022cdd:	89 d7                	mov    edi,edx
c0022cdf:	85 d2                	test   edx,edx
c0022ce1:	79 09                	jns    c0022cec <__moddi3+0x38>
c0022ce3:	f7 d8                	neg    eax
c0022ce5:	83 d2 00             	adc    edx,0x0
c0022ce8:	f7 da                	neg    edx
c0022cea:	89 d7                	mov    edi,edx
c0022cec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cf0:	89 cd                	mov    ebp,ecx
c0022cf2:	85 ff                	test   edi,edi
c0022cf4:	75 52                	jne    c0022d48 <__moddi3+0x94>
c0022cf6:	89 c3                	mov    ebx,eax
c0022cf8:	39 f0                	cmp    eax,esi
c0022cfa:	76 24                	jbe    c0022d20 <__moddi3+0x6c>
c0022cfc:	89 c8                	mov    eax,ecx
c0022cfe:	89 f2                	mov    edx,esi
c0022d00:	f7 f3                	div    ebx
c0022d02:	89 d6                	mov    esi,edx
c0022d04:	89 f0                	mov    eax,esi
c0022d06:	31 d2                	xor    edx,edx
c0022d08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d0c:	85 c9                	test   ecx,ecx
c0022d0e:	74 07                	je     c0022d17 <__moddi3+0x63>
c0022d10:	f7 d8                	neg    eax
c0022d12:	83 d2 00             	adc    edx,0x0
c0022d15:	f7 da                	neg    edx
c0022d17:	83 c4 2c             	add    esp,0x2c
c0022d1a:	5b                   	pop    ebx
c0022d1b:	5e                   	pop    esi
c0022d1c:	5f                   	pop    edi
c0022d1d:	5d                   	pop    ebp
c0022d1e:	c3                   	ret    
c0022d1f:	90                   	nop
c0022d20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022d24:	85 db                	test   ebx,ebx
c0022d26:	75 0d                	jne    c0022d35 <__moddi3+0x81>
c0022d28:	b8 01 00 00 00       	mov    eax,0x1
c0022d2d:	31 d2                	xor    edx,edx
c0022d2f:	f7 f7                	div    edi
c0022d31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d35:	89 f0                	mov    eax,esi
c0022d37:	31 d2                	xor    edx,edx
c0022d39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d3d:	f7 f7                	div    edi
c0022d3f:	89 e8                	mov    eax,ebp
c0022d41:	f7 f7                	div    edi
c0022d43:	89 d6                	mov    esi,edx
c0022d45:	eb bd                	jmp    c0022d04 <__moddi3+0x50>
c0022d47:	90                   	nop
c0022d48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022d4c:	39 f7                	cmp    edi,esi
c0022d4e:	76 20                	jbe    c0022d70 <__moddi3+0xbc>
c0022d50:	89 c8                	mov    eax,ecx
c0022d52:	89 f2                	mov    edx,esi
c0022d54:	eb b2                	jmp    c0022d08 <__moddi3+0x54>
c0022d56:	66 90                	xchg   ax,ax
c0022d58:	f7 d9                	neg    ecx
c0022d5a:	83 d3 00             	adc    ebx,0x0
c0022d5d:	f7 db                	neg    ebx
c0022d5f:	89 de                	mov    esi,ebx
c0022d61:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022d69:	e9 6f ff ff ff       	jmp    c0022cdd <__moddi3+0x29>
c0022d6e:	66 90                	xchg   ax,ax
c0022d70:	0f bd c7             	bsr    eax,edi
c0022d73:	83 f0 1f             	xor    eax,0x1f
c0022d76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d7a:	75 24                	jne    c0022da0 <__moddi3+0xec>
c0022d7c:	39 f7                	cmp    edi,esi
c0022d7e:	72 06                	jb     c0022d86 <__moddi3+0xd2>
c0022d80:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022d84:	77 0c                	ja     c0022d92 <__moddi3+0xde>
c0022d86:	89 e9                	mov    ecx,ebp
c0022d88:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022d8c:	19 fe                	sbb    esi,edi
c0022d8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022d92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d96:	89 f2                	mov    edx,esi
c0022d98:	e9 6b ff ff ff       	jmp    c0022d08 <__moddi3+0x54>
c0022d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0022da0:	b8 20 00 00 00       	mov    eax,0x20
c0022da5:	89 c2                	mov    edx,eax
c0022da7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022dab:	29 da                	sub    edx,ebx
c0022dad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022db1:	88 d9                	mov    cl,bl
c0022db3:	d3 e7                	shl    edi,cl
c0022db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022db9:	88 d1                	mov    cl,dl
c0022dbb:	d3 e8                	shr    eax,cl
c0022dbd:	09 c7                	or     edi,eax
c0022dbf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022dc3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022dc7:	89 d8                	mov    eax,ebx
c0022dc9:	88 d9                	mov    cl,bl
c0022dcb:	d3 e7                	shl    edi,cl
c0022dcd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022dd1:	89 f3                	mov    ebx,esi
c0022dd3:	88 d1                	mov    cl,dl
c0022dd5:	d3 eb                	shr    ebx,cl
c0022dd7:	89 c7                	mov    edi,eax
c0022dd9:	88 c1                	mov    cl,al
c0022ddb:	d3 e6                	shl    esi,cl
c0022ddd:	89 e8                	mov    eax,ebp
c0022ddf:	88 d1                	mov    cl,dl
c0022de1:	d3 e8                	shr    eax,cl
c0022de3:	09 f0                	or     eax,esi
c0022de5:	89 f9                	mov    ecx,edi
c0022de7:	d3 e5                	shl    ebp,cl
c0022de9:	89 da                	mov    edx,ebx
c0022deb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022def:	89 d3                	mov    ebx,edx
c0022df1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022df5:	89 c6                	mov    esi,eax
c0022df7:	89 d1                	mov    ecx,edx
c0022df9:	39 d3                	cmp    ebx,edx
c0022dfb:	72 27                	jb     c0022e24 <__moddi3+0x170>
c0022dfd:	74 21                	je     c0022e20 <__moddi3+0x16c>
c0022dff:	29 f5                	sub    ebp,esi
c0022e01:	19 cb                	sbb    ebx,ecx
c0022e03:	89 de                	mov    esi,ebx
c0022e05:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022e09:	d3 e6                	shl    esi,cl
c0022e0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022e0f:	89 f9                	mov    ecx,edi
c0022e11:	d3 ed                	shr    ebp,cl
c0022e13:	09 ee                	or     esi,ebp
c0022e15:	89 f0                	mov    eax,esi
c0022e17:	d3 eb                	shr    ebx,cl
c0022e19:	89 da                	mov    edx,ebx
c0022e1b:	e9 e8 fe ff ff       	jmp    c0022d08 <__moddi3+0x54>
c0022e20:	39 c5                	cmp    ebp,eax
c0022e22:	73 db                	jae    c0022dff <__moddi3+0x14b>
c0022e24:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022e28:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022e2c:	89 d1                	mov    ecx,edx
c0022e2e:	89 c6                	mov    esi,eax
c0022e30:	eb cd                	jmp    c0022dff <__moddi3+0x14b>
c0022e32:	66 90                	xchg   ax,ax

c0022e34 <__udivdi3>:
c0022e34:	55                   	push   ebp
c0022e35:	57                   	push   edi
c0022e36:	56                   	push   esi
c0022e37:	53                   	push   ebx
c0022e38:	83 ec 1c             	sub    esp,0x1c
c0022e3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022e3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022e43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022e47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022e4b:	85 d2                	test   edx,edx
c0022e4d:	75 41                	jne    c0022e90 <__udivdi3+0x5c>
c0022e4f:	39 f7                	cmp    edi,esi
c0022e51:	76 15                	jbe    c0022e68 <__udivdi3+0x34>
c0022e53:	89 e8                	mov    eax,ebp
c0022e55:	89 f2                	mov    edx,esi
c0022e57:	f7 f7                	div    edi
c0022e59:	31 db                	xor    ebx,ebx
c0022e5b:	89 da                	mov    edx,ebx
c0022e5d:	83 c4 1c             	add    esp,0x1c
c0022e60:	5b                   	pop    ebx
c0022e61:	5e                   	pop    esi
c0022e62:	5f                   	pop    edi
c0022e63:	5d                   	pop    ebp
c0022e64:	c3                   	ret    
c0022e65:	8d 76 00             	lea    esi,[esi+0x0]
c0022e68:	89 f9                	mov    ecx,edi
c0022e6a:	85 ff                	test   edi,edi
c0022e6c:	75 0b                	jne    c0022e79 <__udivdi3+0x45>
c0022e6e:	b8 01 00 00 00       	mov    eax,0x1
c0022e73:	31 d2                	xor    edx,edx
c0022e75:	f7 f7                	div    edi
c0022e77:	89 c1                	mov    ecx,eax
c0022e79:	31 d2                	xor    edx,edx
c0022e7b:	89 f0                	mov    eax,esi
c0022e7d:	f7 f1                	div    ecx
c0022e7f:	89 c3                	mov    ebx,eax
c0022e81:	89 e8                	mov    eax,ebp
c0022e83:	f7 f1                	div    ecx
c0022e85:	89 da                	mov    edx,ebx
c0022e87:	83 c4 1c             	add    esp,0x1c
c0022e8a:	5b                   	pop    ebx
c0022e8b:	5e                   	pop    esi
c0022e8c:	5f                   	pop    edi
c0022e8d:	5d                   	pop    ebp
c0022e8e:	c3                   	ret    
c0022e8f:	90                   	nop
c0022e90:	39 f2                	cmp    edx,esi
c0022e92:	77 1c                	ja     c0022eb0 <__udivdi3+0x7c>
c0022e94:	0f bd da             	bsr    ebx,edx
c0022e97:	83 f3 1f             	xor    ebx,0x1f
c0022e9a:	75 24                	jne    c0022ec0 <__udivdi3+0x8c>
c0022e9c:	39 f2                	cmp    edx,esi
c0022e9e:	72 08                	jb     c0022ea8 <__udivdi3+0x74>
c0022ea0:	39 ef                	cmp    edi,ebp
c0022ea2:	0f 87 84 00 00 00    	ja     c0022f2c <__udivdi3+0xf8>
c0022ea8:	b8 01 00 00 00       	mov    eax,0x1
c0022ead:	eb ac                	jmp    c0022e5b <__udivdi3+0x27>
c0022eaf:	90                   	nop
c0022eb0:	31 db                	xor    ebx,ebx
c0022eb2:	31 c0                	xor    eax,eax
c0022eb4:	89 da                	mov    edx,ebx
c0022eb6:	83 c4 1c             	add    esp,0x1c
c0022eb9:	5b                   	pop    ebx
c0022eba:	5e                   	pop    esi
c0022ebb:	5f                   	pop    edi
c0022ebc:	5d                   	pop    ebp
c0022ebd:	c3                   	ret    
c0022ebe:	66 90                	xchg   ax,ax
c0022ec0:	b8 20 00 00 00       	mov    eax,0x20
c0022ec5:	29 d8                	sub    eax,ebx
c0022ec7:	88 d9                	mov    cl,bl
c0022ec9:	d3 e2                	shl    edx,cl
c0022ecb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022ecf:	89 fa                	mov    edx,edi
c0022ed1:	88 c1                	mov    cl,al
c0022ed3:	d3 ea                	shr    edx,cl
c0022ed5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ed9:	09 d1                	or     ecx,edx
c0022edb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022edf:	88 d9                	mov    cl,bl
c0022ee1:	d3 e7                	shl    edi,cl
c0022ee3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022ee7:	89 f7                	mov    edi,esi
c0022ee9:	88 c1                	mov    cl,al
c0022eeb:	d3 ef                	shr    edi,cl
c0022eed:	88 d9                	mov    cl,bl
c0022eef:	d3 e6                	shl    esi,cl
c0022ef1:	89 ea                	mov    edx,ebp
c0022ef3:	88 c1                	mov    cl,al
c0022ef5:	d3 ea                	shr    edx,cl
c0022ef7:	09 d6                	or     esi,edx
c0022ef9:	89 f0                	mov    eax,esi
c0022efb:	89 fa                	mov    edx,edi
c0022efd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022f01:	89 d7                	mov    edi,edx
c0022f03:	89 c6                	mov    esi,eax
c0022f05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022f09:	39 d7                	cmp    edi,edx
c0022f0b:	72 13                	jb     c0022f20 <__udivdi3+0xec>
c0022f0d:	74 09                	je     c0022f18 <__udivdi3+0xe4>
c0022f0f:	89 f0                	mov    eax,esi
c0022f11:	31 db                	xor    ebx,ebx
c0022f13:	e9 43 ff ff ff       	jmp    c0022e5b <__udivdi3+0x27>
c0022f18:	88 d9                	mov    cl,bl
c0022f1a:	d3 e5                	shl    ebp,cl
c0022f1c:	39 c5                	cmp    ebp,eax
c0022f1e:	73 ef                	jae    c0022f0f <__udivdi3+0xdb>
c0022f20:	8d 46 ff             	lea    eax,[esi-0x1]
c0022f23:	31 db                	xor    ebx,ebx
c0022f25:	e9 31 ff ff ff       	jmp    c0022e5b <__udivdi3+0x27>
c0022f2a:	66 90                	xchg   ax,ax
c0022f2c:	31 c0                	xor    eax,eax
c0022f2e:	e9 28 ff ff ff       	jmp    c0022e5b <__udivdi3+0x27>
c0022f33:	90                   	nop

c0022f34 <__umoddi3>:
c0022f34:	55                   	push   ebp
c0022f35:	57                   	push   edi
c0022f36:	56                   	push   esi
c0022f37:	53                   	push   ebx
c0022f38:	83 ec 1c             	sub    esp,0x1c
c0022f3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022f43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022f47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f4b:	89 da                	mov    edx,ebx
c0022f4d:	85 c0                	test   eax,eax
c0022f4f:	75 37                	jne    c0022f88 <__umoddi3+0x54>
c0022f51:	39 df                	cmp    edi,ebx
c0022f53:	76 13                	jbe    c0022f68 <__umoddi3+0x34>
c0022f55:	89 f0                	mov    eax,esi
c0022f57:	f7 f7                	div    edi
c0022f59:	89 d0                	mov    eax,edx
c0022f5b:	31 d2                	xor    edx,edx
c0022f5d:	83 c4 1c             	add    esp,0x1c
c0022f60:	5b                   	pop    ebx
c0022f61:	5e                   	pop    esi
c0022f62:	5f                   	pop    edi
c0022f63:	5d                   	pop    ebp
c0022f64:	c3                   	ret    
c0022f65:	8d 76 00             	lea    esi,[esi+0x0]
c0022f68:	89 fd                	mov    ebp,edi
c0022f6a:	85 ff                	test   edi,edi
c0022f6c:	75 0b                	jne    c0022f79 <__umoddi3+0x45>
c0022f6e:	b8 01 00 00 00       	mov    eax,0x1
c0022f73:	31 d2                	xor    edx,edx
c0022f75:	f7 f7                	div    edi
c0022f77:	89 c5                	mov    ebp,eax
c0022f79:	89 d8                	mov    eax,ebx
c0022f7b:	31 d2                	xor    edx,edx
c0022f7d:	f7 f5                	div    ebp
c0022f7f:	89 f0                	mov    eax,esi
c0022f81:	f7 f5                	div    ebp
c0022f83:	89 d0                	mov    eax,edx
c0022f85:	eb d4                	jmp    c0022f5b <__umoddi3+0x27>
c0022f87:	90                   	nop
c0022f88:	89 f1                	mov    ecx,esi
c0022f8a:	39 d8                	cmp    eax,ebx
c0022f8c:	76 0a                	jbe    c0022f98 <__umoddi3+0x64>
c0022f8e:	89 f0                	mov    eax,esi
c0022f90:	83 c4 1c             	add    esp,0x1c
c0022f93:	5b                   	pop    ebx
c0022f94:	5e                   	pop    esi
c0022f95:	5f                   	pop    edi
c0022f96:	5d                   	pop    ebp
c0022f97:	c3                   	ret    
c0022f98:	0f bd e8             	bsr    ebp,eax
c0022f9b:	83 f5 1f             	xor    ebp,0x1f
c0022f9e:	75 1c                	jne    c0022fbc <__umoddi3+0x88>
c0022fa0:	39 d8                	cmp    eax,ebx
c0022fa2:	72 04                	jb     c0022fa8 <__umoddi3+0x74>
c0022fa4:	39 f7                	cmp    edi,esi
c0022fa6:	77 08                	ja     c0022fb0 <__umoddi3+0x7c>
c0022fa8:	89 da                	mov    edx,ebx
c0022faa:	29 fe                	sub    esi,edi
c0022fac:	19 c2                	sbb    edx,eax
c0022fae:	89 f1                	mov    ecx,esi
c0022fb0:	89 c8                	mov    eax,ecx
c0022fb2:	83 c4 1c             	add    esp,0x1c
c0022fb5:	5b                   	pop    ebx
c0022fb6:	5e                   	pop    esi
c0022fb7:	5f                   	pop    edi
c0022fb8:	5d                   	pop    ebp
c0022fb9:	c3                   	ret    
c0022fba:	66 90                	xchg   ax,ax
c0022fbc:	ba 20 00 00 00       	mov    edx,0x20
c0022fc1:	29 ea                	sub    edx,ebp
c0022fc3:	89 e9                	mov    ecx,ebp
c0022fc5:	d3 e0                	shl    eax,cl
c0022fc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fcb:	89 f8                	mov    eax,edi
c0022fcd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022fd1:	88 d1                	mov    cl,dl
c0022fd3:	d3 e8                	shr    eax,cl
c0022fd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022fd9:	09 c1                	or     ecx,eax
c0022fdb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022fdf:	89 e9                	mov    ecx,ebp
c0022fe1:	d3 e7                	shl    edi,cl
c0022fe3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022fe7:	89 d8                	mov    eax,ebx
c0022fe9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fed:	88 d1                	mov    cl,dl
c0022fef:	d3 e8                	shr    eax,cl
c0022ff1:	89 c7                	mov    edi,eax
c0022ff3:	89 e9                	mov    ecx,ebp
c0022ff5:	d3 e3                	shl    ebx,cl
c0022ff7:	89 f0                	mov    eax,esi
c0022ff9:	88 d1                	mov    cl,dl
c0022ffb:	d3 e8                	shr    eax,cl
c0022ffd:	09 d8                	or     eax,ebx
c0022fff:	89 e9                	mov    ecx,ebp
c0023001:	d3 e6                	shl    esi,cl
c0023003:	89 f3                	mov    ebx,esi
c0023005:	89 fa                	mov    edx,edi
c0023007:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002300b:	89 d1                	mov    ecx,edx
c002300d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023011:	89 c6                	mov    esi,eax
c0023013:	89 d7                	mov    edi,edx
c0023015:	39 d1                	cmp    ecx,edx
c0023017:	72 27                	jb     c0023040 <__umoddi3+0x10c>
c0023019:	74 21                	je     c002303c <__umoddi3+0x108>
c002301b:	89 ca                	mov    edx,ecx
c002301d:	29 f3                	sub    ebx,esi
c002301f:	19 fa                	sbb    edx,edi
c0023021:	89 d0                	mov    eax,edx
c0023023:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023027:	d3 e0                	shl    eax,cl
c0023029:	89 e9                	mov    ecx,ebp
c002302b:	d3 eb                	shr    ebx,cl
c002302d:	09 d8                	or     eax,ebx
c002302f:	d3 ea                	shr    edx,cl
c0023031:	83 c4 1c             	add    esp,0x1c
c0023034:	5b                   	pop    ebx
c0023035:	5e                   	pop    esi
c0023036:	5f                   	pop    edi
c0023037:	5d                   	pop    ebp
c0023038:	c3                   	ret    
c0023039:	8d 76 00             	lea    esi,[esi+0x0]
c002303c:	39 c3                	cmp    ebx,eax
c002303e:	73 db                	jae    c002301b <__umoddi3+0xe7>
c0023040:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023044:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023048:	89 d7                	mov    edi,edx
c002304a:	89 c6                	mov    esi,eax
c002304c:	eb cd                	jmp    c002301b <__umoddi3+0xe7>
c002304e:	66 90                	xchg   ax,ax

c0023050 <acos>:
c0023050:	83 ec 4c             	sub    esp,0x4c
c0023053:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0023057:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002305b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002305f:	89 d0                	mov    eax,edx
c0023061:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023066:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c002306b:	7e 23                	jle    c0023090 <acos+0x40>
c002306d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023071:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0023076:	09 c8                	or     eax,ecx
c0023078:	0f 85 32 01 00 00    	jne    c00231b0 <acos+0x160>
c002307e:	85 d2                	test   edx,edx
c0023080:	0f 8e 4a 01 00 00    	jle    c00231d0 <acos+0x180>
c0023086:	d9 ee                	fldz   
c0023088:	83 c4 4c             	add    esp,0x4c
c002308b:	c3                   	ret    
c002308c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023090:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c0023095:	7f 29                	jg     c00230c0 <acos+0x70>
c0023097:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c002309c:	0f 8f 4e 01 00 00    	jg     c00231f0 <acos+0x1a0>
c00230a2:	dd 05 a8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8a8
c00230a8:	dc 05 c8 be 02 c0    	fadd   QWORD PTR ds:0xc002bec8
c00230ae:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00230b2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00230b6:	83 c4 4c             	add    esp,0x4c
c00230b9:	c3                   	ret    
c00230ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00230c0:	85 d2                	test   edx,edx
c00230c2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00230c6:	0f 88 d4 01 00 00    	js     c00232a0 <acos+0x250>
c00230cc:	d9 e8                	fld1   
c00230ce:	de e1                	fsubrp st(1),st
c00230d0:	d8 0d 24 bf 02 c0    	fmul   DWORD PTR ds:0xc002bf24
c00230d6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00230da:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00230de:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00230e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00230e5:	e8 36 27 00 00       	call   c0025820 <sqrt>
c00230ea:	31 c0                	xor    eax,eax
c00230ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00230f0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00230f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00230f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00230fc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023100:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023104:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023108:	d9 c1                	fld    st(1)
c002310a:	dc 0d d0 be 02 c0    	fmul   QWORD PTR ds:0xc002bed0
c0023110:	dc 05 d8 be 02 c0    	fadd   QWORD PTR ds:0xc002bed8
c0023116:	d8 ca                	fmul   st,st(2)
c0023118:	dc 25 e0 be 02 c0    	fsub   QWORD PTR ds:0xc002bee0
c002311e:	d8 ca                	fmul   st,st(2)
c0023120:	dc 05 e8 be 02 c0    	fadd   QWORD PTR ds:0xc002bee8
c0023126:	d8 ca                	fmul   st,st(2)
c0023128:	dc 25 f0 be 02 c0    	fsub   QWORD PTR ds:0xc002bef0
c002312e:	d8 ca                	fmul   st,st(2)
c0023130:	dc 05 f8 be 02 c0    	fadd   QWORD PTR ds:0xc002bef8
c0023136:	d8 ca                	fmul   st,st(2)
c0023138:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002313c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023140:	d9 c2                	fld    st(2)
c0023142:	dc 0d 00 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf00
c0023148:	dc 25 08 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf08
c002314e:	d8 cb                	fmul   st,st(3)
c0023150:	dc 05 10 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf10
c0023156:	d8 cb                	fmul   st,st(3)
c0023158:	dc 25 18 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf18
c002315e:	d8 cb                	fmul   st,st(3)
c0023160:	d9 e8                	fld1   
c0023162:	de c1                	faddp  st(1),st
c0023164:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023168:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002316c:	de f9                	fdivp  st(1),st
c002316e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023172:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023176:	d8 c9                	fmul   st,st(1)
c0023178:	d9 c3                	fld    st(3)
c002317a:	d8 cc                	fmul   st,st(4)
c002317c:	de eb                	fsubp  st(3),st
c002317e:	d9 c9                	fxch   st(1)
c0023180:	d8 c3                	fadd   st,st(3)
c0023182:	de fa                	fdivp  st(2),st
c0023184:	d9 c9                	fxch   st(1)
c0023186:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002318a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002318e:	de c1                	faddp  st(1),st
c0023190:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023194:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023198:	de c1                	faddp  st(1),st
c002319a:	d8 c0                	fadd   st,st(0)
c002319c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00231a0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00231a4:	83 c4 4c             	add    esp,0x4c
c00231a7:	c3                   	ret    
c00231a8:	90                   	nop
c00231a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00231b0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00231b4:	d8 e0                	fsub   st,st(0)
c00231b6:	d8 f0                	fdiv   st,st(0)
c00231b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00231bc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00231c0:	83 c4 4c             	add    esp,0x4c
c00231c3:	c3                   	ret    
c00231c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00231ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00231d0:	dd 05 a8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8a8
c00231d6:	d8 c0                	fadd   st,st(0)
c00231d8:	dc 05 c0 be 02 c0    	fadd   QWORD PTR ds:0xc002bec0
c00231de:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00231e2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00231e6:	83 c4 4c             	add    esp,0x4c
c00231e9:	c3                   	ret    
c00231ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00231f0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00231f4:	d9 c0                	fld    st(0)
c00231f6:	d8 c9                	fmul   st,st(1)
c00231f8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00231fc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023200:	dd 05 a8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8a8
c0023206:	d9 c1                	fld    st(1)
c0023208:	dc 0d d0 be 02 c0    	fmul   QWORD PTR ds:0xc002bed0
c002320e:	dc 05 d8 be 02 c0    	fadd   QWORD PTR ds:0xc002bed8
c0023214:	d8 ca                	fmul   st,st(2)
c0023216:	dc 25 e0 be 02 c0    	fsub   QWORD PTR ds:0xc002bee0
c002321c:	d8 ca                	fmul   st,st(2)
c002321e:	dc 05 e8 be 02 c0    	fadd   QWORD PTR ds:0xc002bee8
c0023224:	d8 ca                	fmul   st,st(2)
c0023226:	dc 25 f0 be 02 c0    	fsub   QWORD PTR ds:0xc002bef0
c002322c:	d8 ca                	fmul   st,st(2)
c002322e:	dc 05 f8 be 02 c0    	fadd   QWORD PTR ds:0xc002bef8
c0023234:	d8 ca                	fmul   st,st(2)
c0023236:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002323a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002323e:	d9 c2                	fld    st(2)
c0023240:	dc 0d 00 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf00
c0023246:	dc 25 08 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf08
c002324c:	d8 cb                	fmul   st,st(3)
c002324e:	dc 05 10 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf10
c0023254:	d8 cb                	fmul   st,st(3)
c0023256:	dc 25 18 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf18
c002325c:	de cb                	fmulp  st(3),st
c002325e:	d9 ca                	fxch   st(2)
c0023260:	d8 05 20 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf20
c0023266:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002326a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002326e:	de fa                	fdivp  st(2),st
c0023270:	d9 c9                	fxch   st(1)
c0023272:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023276:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002327a:	d8 ca                	fmul   st,st(2)
c002327c:	de e9                	fsubp  st(1),st
c002327e:	de e9                	fsubp  st(1),st
c0023280:	dc 2d c8 be 02 c0    	fsubr  QWORD PTR ds:0xc002bec8
c0023286:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002328a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002328e:	83 c4 4c             	add    esp,0x4c
c0023291:	c3                   	ret    
c0023292:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023299:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00232a0:	d9 e8                	fld1   
c00232a2:	de c1                	faddp  st(1),st
c00232a4:	d8 0d 24 bf 02 c0    	fmul   DWORD PTR ds:0xc002bf24
c00232aa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00232ae:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00232b2:	d9 c0                	fld    st(0)
c00232b4:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00232b8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00232bb:	e8 60 25 00 00       	call   c0025820 <sqrt>
c00232c0:	dd 05 a8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8a8
c00232c6:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00232ca:	d9 c0                	fld    st(0)
c00232cc:	dc 0d d0 be 02 c0    	fmul   QWORD PTR ds:0xc002bed0
c00232d2:	dc 05 d8 be 02 c0    	fadd   QWORD PTR ds:0xc002bed8
c00232d8:	d8 c9                	fmul   st,st(1)
c00232da:	dc 25 e0 be 02 c0    	fsub   QWORD PTR ds:0xc002bee0
c00232e0:	d8 c9                	fmul   st,st(1)
c00232e2:	dc 05 e8 be 02 c0    	fadd   QWORD PTR ds:0xc002bee8
c00232e8:	d8 c9                	fmul   st,st(1)
c00232ea:	dc 25 f0 be 02 c0    	fsub   QWORD PTR ds:0xc002bef0
c00232f0:	d8 c9                	fmul   st,st(1)
c00232f2:	dc 05 f8 be 02 c0    	fadd   QWORD PTR ds:0xc002bef8
c00232f8:	d8 c9                	fmul   st,st(1)
c00232fa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00232fe:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023302:	d9 c1                	fld    st(1)
c0023304:	dc 0d 00 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf00
c002330a:	dc 25 08 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf08
c0023310:	d8 ca                	fmul   st,st(2)
c0023312:	dc 05 10 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf10
c0023318:	d8 ca                	fmul   st,st(2)
c002331a:	dc 25 18 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf18
c0023320:	de ca                	fmulp  st(2),st
c0023322:	d9 e8                	fld1   
c0023324:	de c2                	faddp  st(2),st
c0023326:	d9 c9                	fxch   st(1)
c0023328:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002332c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023330:	de f9                	fdivp  st(1),st
c0023332:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023336:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002333a:	d8 ca                	fmul   st,st(2)
c002333c:	de e1                	fsubrp st(1),st
c002333e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023342:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023346:	de c1                	faddp  st(1),st
c0023348:	d8 c0                	fadd   st,st(0)
c002334a:	dc 2d c0 be 02 c0    	fsubr  QWORD PTR ds:0xc002bec0
c0023350:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023354:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023358:	83 c4 4c             	add    esp,0x4c
c002335b:	c3                   	ret    
c002335c:	66 90                	xchg   ax,ax
c002335e:	66 90                	xchg   ax,ax

c0023360 <asin>:
c0023360:	56                   	push   esi
c0023361:	53                   	push   ebx
c0023362:	83 ec 44             	sub    esp,0x44
c0023365:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0023369:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002336d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023371:	89 f3                	mov    ebx,esi
c0023373:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023379:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002337f:	7e 4f                	jle    c00233d0 <asin+0x70>
c0023381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023385:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c002338b:	09 c3                	or     ebx,eax
c002338d:	74 21                	je     c00233b0 <asin+0x50>
c002338f:	d8 e0                	fsub   st,st(0)
c0023391:	d8 f0                	fdiv   st,st(0)
c0023393:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023397:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002339b:	eb 05                	jmp    c00233a2 <asin+0x42>
c002339d:	8d 76 00             	lea    esi,[esi+0x0]
c00233a0:	dd d9                	fstp   st(1)
c00233a2:	83 c4 44             	add    esp,0x44
c00233a5:	5b                   	pop    ebx
c00233a6:	5e                   	pop    esi
c00233a7:	c3                   	ret    
c00233a8:	90                   	nop
c00233a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00233b0:	d9 c0                	fld    st(0)
c00233b2:	dc 0d c8 be 02 c0    	fmul   QWORD PTR ds:0xc002bec8
c00233b8:	d9 c9                	fxch   st(1)
c00233ba:	dc 0d 28 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf28
c00233c0:	de c1                	faddp  st(1),st
c00233c2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00233c6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00233ca:	83 c4 44             	add    esp,0x44
c00233cd:	5b                   	pop    ebx
c00233ce:	5e                   	pop    esi
c00233cf:	c3                   	ret    
c00233d0:	dd d8                	fstp   st(0)
c00233d2:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c00233d8:	0f 8f b2 00 00 00    	jg     c0023490 <asin+0x130>
c00233de:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c00233e4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00233e8:	7f 16                	jg     c0023400 <asin+0xa0>
c00233ea:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00233ee:	d9 e8                	fld1   
c00233f0:	d9 c2                	fld    st(2)
c00233f2:	dc 05 30 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf30
c00233f8:	df f1                	fcomip st,st(1)
c00233fa:	dd d8                	fstp   st(0)
c00233fc:	77 a2                	ja     c00233a0 <asin+0x40>
c00233fe:	dd d8                	fstp   st(0)
c0023400:	d9 c0                	fld    st(0)
c0023402:	d8 c9                	fmul   st,st(1)
c0023404:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023408:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002340c:	d9 c0                	fld    st(0)
c002340e:	dc 0d d0 be 02 c0    	fmul   QWORD PTR ds:0xc002bed0
c0023414:	dc 05 d8 be 02 c0    	fadd   QWORD PTR ds:0xc002bed8
c002341a:	d8 c9                	fmul   st,st(1)
c002341c:	dc 25 e0 be 02 c0    	fsub   QWORD PTR ds:0xc002bee0
c0023422:	d8 c9                	fmul   st,st(1)
c0023424:	dc 05 e8 be 02 c0    	fadd   QWORD PTR ds:0xc002bee8
c002342a:	d8 c9                	fmul   st,st(1)
c002342c:	dc 25 f0 be 02 c0    	fsub   QWORD PTR ds:0xc002bef0
c0023432:	d8 c9                	fmul   st,st(1)
c0023434:	dc 05 f8 be 02 c0    	fadd   QWORD PTR ds:0xc002bef8
c002343a:	d8 c9                	fmul   st,st(1)
c002343c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023440:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023444:	d9 c1                	fld    st(1)
c0023446:	dc 0d 00 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf00
c002344c:	dc 25 08 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf08
c0023452:	d8 ca                	fmul   st,st(2)
c0023454:	dc 05 10 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf10
c002345a:	d8 ca                	fmul   st,st(2)
c002345c:	dc 25 18 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf18
c0023462:	de ca                	fmulp  st(2),st
c0023464:	d9 c9                	fxch   st(1)
c0023466:	d8 05 20 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf20
c002346c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023470:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023474:	de f9                	fdivp  st(1),st
c0023476:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002347a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002347e:	d8 c9                	fmul   st,st(1)
c0023480:	de c1                	faddp  st(1),st
c0023482:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023486:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002348a:	83 c4 44             	add    esp,0x44
c002348d:	5b                   	pop    ebx
c002348e:	5e                   	pop    esi
c002348f:	c3                   	ret    
c0023490:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023494:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023497:	e8 34 1d 00 00       	call   c00251d0 <fabs>
c002349c:	d9 e8                	fld1   
c002349e:	dc e1                	fsubr  st(1),st
c00234a0:	d9 c9                	fxch   st(1)
c00234a2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00234a6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00234aa:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c00234b0:	de c9                	fmulp  st(1),st
c00234b2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00234b6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00234ba:	d9 c0                	fld    st(0)
c00234bc:	d9 c0                	fld    st(0)
c00234be:	dc 0d d0 be 02 c0    	fmul   QWORD PTR ds:0xc002bed0
c00234c4:	dc 05 d8 be 02 c0    	fadd   QWORD PTR ds:0xc002bed8
c00234ca:	d8 c9                	fmul   st,st(1)
c00234cc:	dc 25 e0 be 02 c0    	fsub   QWORD PTR ds:0xc002bee0
c00234d2:	d8 c9                	fmul   st,st(1)
c00234d4:	dc 05 e8 be 02 c0    	fadd   QWORD PTR ds:0xc002bee8
c00234da:	d8 c9                	fmul   st,st(1)
c00234dc:	dc 25 f0 be 02 c0    	fsub   QWORD PTR ds:0xc002bef0
c00234e2:	d8 c9                	fmul   st,st(1)
c00234e4:	dc 05 f8 be 02 c0    	fadd   QWORD PTR ds:0xc002bef8
c00234ea:	d8 c9                	fmul   st,st(1)
c00234ec:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00234f0:	d9 c0                	fld    st(0)
c00234f2:	dc 0d 00 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf00
c00234f8:	dc 25 08 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf08
c00234fe:	d8 c9                	fmul   st,st(1)
c0023500:	dc 05 10 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf10
c0023506:	d8 c9                	fmul   st,st(1)
c0023508:	dc 25 18 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf18
c002350e:	d8 c9                	fmul   st,st(1)
c0023510:	d9 c9                	fxch   st(1)
c0023512:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023516:	de c2                	faddp  st(2),st
c0023518:	d9 c9                	fxch   st(1)
c002351a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c002351e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023521:	e8 fa 22 00 00       	call   c0025820 <sqrt>
c0023526:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c002352c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0023530:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023534:	7e 4a                	jle    c0023580 <asin+0x220>
c0023536:	dd d8                	fstp   st(0)
c0023538:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002353c:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0023540:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023544:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023548:	d8 c9                	fmul   st,st(1)
c002354a:	de c1                	faddp  st(1),st
c002354c:	d8 c0                	fadd   st,st(0)
c002354e:	dc 25 28 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf28
c0023554:	dc 2d c8 be 02 c0    	fsubr  QWORD PTR ds:0xc002bec8
c002355a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002355e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023562:	85 f6                	test   esi,esi
c0023564:	0f 8f 38 fe ff ff    	jg     c00233a2 <asin+0x42>
c002356a:	d9 e0                	fchs   
c002356c:	e9 31 fe ff ff       	jmp    c00233a2 <asin+0x42>
c0023571:	eb 0d                	jmp    c0023580 <asin+0x220>
c0023573:	90                   	nop
c0023574:	90                   	nop
c0023575:	90                   	nop
c0023576:	90                   	nop
c0023577:	90                   	nop
c0023578:	90                   	nop
c0023579:	90                   	nop
c002357a:	90                   	nop
c002357b:	90                   	nop
c002357c:	90                   	nop
c002357d:	90                   	nop
c002357e:	90                   	nop
c002357f:	90                   	nop
c0023580:	dd d9                	fstp   st(1)
c0023582:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023586:	31 c0                	xor    eax,eax
c0023588:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002358c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023590:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023594:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023598:	d9 c0                	fld    st(0)
c002359a:	d8 c1                	fadd   st,st(1)
c002359c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00235a0:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c00235a4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00235a8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00235ac:	de c9                	fmulp  st(1),st
c00235ae:	d9 c2                	fld    st(2)
c00235b0:	d8 cb                	fmul   st,st(3)
c00235b2:	de ec                	fsubp  st(4),st
c00235b4:	d9 c9                	fxch   st(1)
c00235b6:	d8 c2                	fadd   st,st(2)
c00235b8:	de fb                	fdivp  st(3),st
c00235ba:	d9 ca                	fxch   st(2)
c00235bc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00235c0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00235c4:	d8 c0                	fadd   st,st(0)
c00235c6:	dc 2d 28 bf 02 c0    	fsubr  QWORD PTR ds:0xc002bf28
c00235cc:	de ea                	fsubp  st(2),st
c00235ce:	d9 c9                	fxch   st(1)
c00235d0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00235d4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00235d8:	d9 c9                	fxch   st(1)
c00235da:	d8 c0                	fadd   st,st(0)
c00235dc:	dd 05 38 bf 02 c0    	fld    QWORD PTR ds:0xc002bf38
c00235e2:	dc e1                	fsubr  st(1),st
c00235e4:	d9 c9                	fxch   st(1)
c00235e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00235ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00235ee:	de ea                	fsubp  st(2),st
c00235f0:	de e1                	fsubrp st(1),st
c00235f2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00235f6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00235fa:	e9 63 ff ff ff       	jmp    c0023562 <asin+0x202>
c00235ff:	90                   	nop

c0023600 <atan2>:
c0023600:	83 ec 4c             	sub    esp,0x4c
c0023603:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0023607:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002360b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002360f:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0023613:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023617:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c002361b:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c002361f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002362b:	89 c1                	mov    ecx,eax
c002362d:	f7 d9                	neg    ecx
c002362f:	89 d3                	mov    ebx,edx
c0023631:	09 c1                	or     ecx,eax
c0023633:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023639:	c1 e9 1f             	shr    ecx,0x1f
c002363c:	09 d9                	or     ecx,ebx
c002363e:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0023644:	77 7a                	ja     c00236c0 <atan2+0xc0>
c0023646:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002364a:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c002364e:	89 f1                	mov    ecx,esi
c0023650:	f7 d9                	neg    ecx
c0023652:	89 ef                	mov    edi,ebp
c0023654:	09 f1                	or     ecx,esi
c0023656:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c002365c:	c1 e9 1f             	shr    ecx,0x1f
c002365f:	09 f9                	or     ecx,edi
c0023661:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0023667:	77 57                	ja     c00236c0 <atan2+0xc0>
c0023669:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c002366f:	75 08                	jne    c0023679 <atan2+0x79>
c0023671:	85 c0                	test   eax,eax
c0023673:	0f 84 f7 00 00 00    	je     c0023770 <atan2+0x170>
c0023679:	89 d1                	mov    ecx,edx
c002367b:	c1 f9 1e             	sar    ecx,0x1e
c002367e:	83 e1 02             	and    ecx,0x2
c0023681:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023685:	89 e9                	mov    ecx,ebp
c0023687:	c1 e9 1f             	shr    ecx,0x1f
c002368a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c002368e:	09 fe                	or     esi,edi
c0023690:	75 5e                	jne    c00236f0 <atan2+0xf0>
c0023692:	83 f9 02             	cmp    ecx,0x2
c0023695:	0f 84 65 01 00 00    	je     c0023800 <atan2+0x200>
c002369b:	83 f9 03             	cmp    ecx,0x3
c002369e:	0f 85 1c 01 00 00    	jne    c00237c0 <atan2+0x1c0>
c00236a4:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c00236aa:	dd 05 40 bf 02 c0    	fld    QWORD PTR ds:0xc002bf40
c00236b0:	de e1                	fsubrp st(1),st
c00236b2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00236b6:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00236ba:	eb 14                	jmp    c00236d0 <atan2+0xd0>
c00236bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00236c0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00236c4:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00236c8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00236cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00236d0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00236d4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00236d8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00236dc:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00236e0:	83 c4 4c             	add    esp,0x4c
c00236e3:	c3                   	ret    
c00236e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00236ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00236f0:	09 d8                	or     eax,ebx
c00236f2:	0f 84 98 00 00 00    	je     c0023790 <atan2+0x190>
c00236f8:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00236fe:	0f 84 1c 01 00 00    	je     c0023820 <atan2+0x220>
c0023704:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c002370a:	0f 84 80 00 00 00    	je     c0023790 <atan2+0x190>
c0023710:	29 df                	sub    edi,ebx
c0023712:	c1 ff 14             	sar    edi,0x14
c0023715:	83 ff 3c             	cmp    edi,0x3c
c0023718:	0f 8f b2 00 00 00    	jg     c00237d0 <atan2+0x1d0>
c002371e:	c1 ea 1f             	shr    edx,0x1f
c0023721:	84 d2                	test   dl,dl
c0023723:	0f 84 97 01 00 00    	je     c00238c0 <atan2+0x2c0>
c0023729:	83 ff c4             	cmp    edi,0xffffffc4
c002372c:	0f 8d 8e 01 00 00    	jge    c00238c0 <atan2+0x2c0>
c0023732:	d9 ee                	fldz   
c0023734:	83 f9 01             	cmp    ecx,0x1
c0023737:	0f 84 02 01 00 00    	je     c002383f <atan2+0x23f>
c002373d:	83 f9 02             	cmp    ecx,0x2
c0023740:	0f 84 2a 01 00 00    	je     c0023870 <atan2+0x270>
c0023746:	85 c9                	test   ecx,ecx
c0023748:	74 86                	je     c00236d0 <atan2+0xd0>
c002374a:	dd 05 b0 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b0
c0023750:	de e9                	fsubp  st(1),st
c0023752:	dc 25 c0 be 02 c0    	fsub   QWORD PTR ds:0xc002bec0
c0023758:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002375c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023760:	e9 6b ff ff ff       	jmp    c00236d0 <atan2+0xd0>
c0023765:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023769:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023770:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023774:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0023778:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002377c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0023780:	83 c4 4c             	add    esp,0x4c
c0023783:	e9 a8 11 00 00       	jmp    c0024930 <atan>
c0023788:	90                   	nop
c0023789:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023790:	85 ed                	test   ebp,ebp
c0023792:	0f 88 b8 00 00 00    	js     c0023850 <atan2+0x250>
c0023798:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c002379e:	dc 05 c8 be 02 c0    	fadd   QWORD PTR ds:0xc002bec8
c00237a4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00237a8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00237ac:	e9 1f ff ff ff       	jmp    c00236d0 <atan2+0xd0>
c00237b1:	eb 0d                	jmp    c00237c0 <atan2+0x1c0>
c00237b3:	90                   	nop
c00237b4:	90                   	nop
c00237b5:	90                   	nop
c00237b6:	90                   	nop
c00237b7:	90                   	nop
c00237b8:	90                   	nop
c00237b9:	90                   	nop
c00237ba:	90                   	nop
c00237bb:	90                   	nop
c00237bc:	90                   	nop
c00237bd:	90                   	nop
c00237be:	90                   	nop
c00237bf:	90                   	nop
c00237c0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00237c4:	e9 07 ff ff ff       	jmp    c00236d0 <atan2+0xd0>
c00237c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00237d0:	dd 05 b0 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b0
c00237d6:	83 e1 01             	and    ecx,0x1
c00237d9:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c00237df:	de c9                	fmulp  st(1),st
c00237e1:	dc 05 c8 be 02 c0    	fadd   QWORD PTR ds:0xc002bec8
c00237e7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00237eb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00237ef:	e9 40 ff ff ff       	jmp    c0023734 <atan2+0x134>
c00237f4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00237fa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023800:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c0023806:	dc 05 c0 be 02 c0    	fadd   QWORD PTR ds:0xc002bec0
c002380c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023810:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023814:	e9 b7 fe ff ff       	jmp    c00236d0 <atan2+0xd0>
c0023819:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023820:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0023826:	74 68                	je     c0023890 <atan2+0x290>
c0023828:	83 f9 02             	cmp    ecx,0x2
c002382b:	74 d3                	je     c0023800 <atan2+0x200>
c002382d:	83 f9 03             	cmp    ecx,0x3
c0023830:	0f 84 6e fe ff ff    	je     c00236a4 <atan2+0xa4>
c0023836:	d9 ee                	fldz   
c0023838:	49                   	dec    ecx
c0023839:	0f 85 91 fe ff ff    	jne    c00236d0 <atan2+0xd0>
c002383f:	d9 e0                	fchs   
c0023841:	e9 8a fe ff ff       	jmp    c00236d0 <atan2+0xd0>
c0023846:	8d 76 00             	lea    esi,[esi+0x0]
c0023849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023850:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c0023856:	dd 05 48 bf 02 c0    	fld    QWORD PTR ds:0xc002bf48
c002385c:	de e1                	fsubrp st(1),st
c002385e:	e9 41 ff ff ff       	jmp    c00237a4 <atan2+0x1a4>
c0023863:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023870:	dd 05 b0 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b0
c0023876:	de e9                	fsubp  st(1),st
c0023878:	dc 2d c0 be 02 c0    	fsubr  QWORD PTR ds:0xc002bec0
c002387e:	e9 21 ff ff ff       	jmp    c00237a4 <atan2+0x1a4>
c0023883:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023889:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023890:	83 f9 02             	cmp    ecx,0x2
c0023893:	0f 84 82 00 00 00    	je     c002391b <atan2+0x31b>
c0023899:	83 f9 03             	cmp    ecx,0x3
c002389c:	74 62                	je     c0023900 <atan2+0x300>
c002389e:	49                   	dec    ecx
c002389f:	90                   	nop
c00238a0:	74 43                	je     c00238e5 <atan2+0x2e5>
c00238a2:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c00238a8:	dc 05 38 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf38
c00238ae:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00238b2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00238b6:	e9 15 fe ff ff       	jmp    c00236d0 <atan2+0xd0>
c00238bb:	90                   	nop
c00238bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00238c0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00238c4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00238c8:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c00238cc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00238cf:	e8 fc 18 00 00       	call   c00251d0 <fabs>
c00238d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00238d7:	e8 54 10 00 00       	call   c0024930 <atan>
c00238dc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00238e0:	e9 4f fe ff ff       	jmp    c0023734 <atan2+0x134>
c00238e5:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c00238eb:	dd 05 50 bf 02 c0    	fld    QWORD PTR ds:0xc002bf50
c00238f1:	de e1                	fsubrp st(1),st
c00238f3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00238f7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00238fb:	e9 d0 fd ff ff       	jmp    c00236d0 <atan2+0xd0>
c0023900:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c0023906:	dd 05 60 bf 02 c0    	fld    QWORD PTR ds:0xc002bf60
c002390c:	de e1                	fsubrp st(1),st
c002390e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023912:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023916:	e9 b5 fd ff ff       	jmp    c00236d0 <atan2+0xd0>
c002391b:	dd 05 b8 d8 02 c0    	fld    QWORD PTR ds:0xc002d8b8
c0023921:	dc 05 58 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf58
c0023927:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002392b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002392f:	e9 9c fd ff ff       	jmp    c00236d0 <atan2+0xd0>
c0023934:	66 90                	xchg   ax,ax
c0023936:	66 90                	xchg   ax,ax
c0023938:	66 90                	xchg   ax,ax
c002393a:	66 90                	xchg   ax,ax
c002393c:	66 90                	xchg   ax,ax
c002393e:	66 90                	xchg   ax,ax

c0023940 <cosh>:
c0023940:	53                   	push   ebx
c0023941:	83 ec 28             	sub    esp,0x28
c0023944:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023948:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002394c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0023950:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023956:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002395c:	0f 8f 9e 00 00 00    	jg     c0023a00 <cosh+0xc0>
c0023962:	dd d8                	fstp   st(0)
c0023964:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c002396a:	7e 44                	jle    c00239b0 <cosh+0x70>
c002396c:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0023972:	0f 8e a8 00 00 00    	jle    c0023a20 <cosh+0xe0>
c0023978:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c002397e:	0f 8e dc 00 00 00    	jle    c0023a60 <cosh+0x120>
c0023984:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c002398a:	0f 8e 00 01 00 00    	jle    c0023a90 <cosh+0x150>
c0023990:	d9 05 68 bf 02 c0    	fld    DWORD PTR ds:0xc002bf68
c0023996:	eb 0c                	jmp    c00239a4 <cosh+0x64>
c0023998:	90                   	nop
c0023999:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00239a0:	dd d9                	fstp   st(1)
c00239a2:	dd d9                	fstp   st(1)
c00239a4:	83 c4 28             	add    esp,0x28
c00239a7:	5b                   	pop    ebx
c00239a8:	c3                   	ret    
c00239a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00239b0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00239b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00239b7:	e8 14 18 00 00       	call   c00251d0 <fabs>
c00239bc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00239bf:	e8 7c 13 00 00       	call   c0024d40 <expm1>
c00239c4:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c00239ca:	d9 e8                	fld1   
c00239cc:	d9 c1                	fld    st(1)
c00239ce:	d8 c1                	fadd   st,st(1)
c00239d0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00239d4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00239d8:	7e c6                	jle    c00239a0 <cosh+0x60>
c00239da:	d9 ca                	fxch   st(2)
c00239dc:	d8 c8                	fmul   st,st(0)
c00239de:	d9 ca                	fxch   st(2)
c00239e0:	d8 c0                	fadd   st,st(0)
c00239e2:	de fa                	fdivp  st(2),st
c00239e4:	de c1                	faddp  st(1),st
c00239e6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00239ea:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00239ee:	83 c4 28             	add    esp,0x28
c00239f1:	5b                   	pop    ebx
c00239f2:	c3                   	ret    
c00239f3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00239f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023a00:	d9 c0                	fld    st(0)
c0023a02:	de c9                	fmulp  st(1),st
c0023a04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a0c:	83 c4 28             	add    esp,0x28
c0023a0f:	5b                   	pop    ebx
c0023a10:	c3                   	ret    
c0023a11:	eb 0d                	jmp    c0023a20 <cosh+0xe0>
c0023a13:	90                   	nop
c0023a14:	90                   	nop
c0023a15:	90                   	nop
c0023a16:	90                   	nop
c0023a17:	90                   	nop
c0023a18:	90                   	nop
c0023a19:	90                   	nop
c0023a1a:	90                   	nop
c0023a1b:	90                   	nop
c0023a1c:	90                   	nop
c0023a1d:	90                   	nop
c0023a1e:	90                   	nop
c0023a1f:	90                   	nop
c0023a20:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023a24:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023a27:	e8 a4 17 00 00       	call   c00251d0 <fabs>
c0023a2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023a2f:	e8 54 1d 00 00       	call   c0025788 <exp>
c0023a34:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c0023a3a:	d9 c1                	fld    st(1)
c0023a3c:	d8 c9                	fmul   st,st(1)
c0023a3e:	d9 c9                	fxch   st(1)
c0023a40:	de f2                	fdivrp st(2),st
c0023a42:	de c1                	faddp  st(1),st
c0023a44:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a48:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a4c:	e9 53 ff ff ff       	jmp    c00239a4 <cosh+0x64>
c0023a51:	eb 0d                	jmp    c0023a60 <cosh+0x120>
c0023a53:	90                   	nop
c0023a54:	90                   	nop
c0023a55:	90                   	nop
c0023a56:	90                   	nop
c0023a57:	90                   	nop
c0023a58:	90                   	nop
c0023a59:	90                   	nop
c0023a5a:	90                   	nop
c0023a5b:	90                   	nop
c0023a5c:	90                   	nop
c0023a5d:	90                   	nop
c0023a5e:	90                   	nop
c0023a5f:	90                   	nop
c0023a60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023a64:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023a67:	e8 64 17 00 00       	call   c00251d0 <fabs>
c0023a6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023a6f:	e8 14 1d 00 00       	call   c0025788 <exp>
c0023a74:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c0023a7a:	de c9                	fmulp  st(1),st
c0023a7c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a80:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a84:	e9 1b ff ff ff       	jmp    c00239a4 <cosh+0x64>
c0023a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023a90:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023a94:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023a97:	e8 34 17 00 00       	call   c00251d0 <fabs>
c0023a9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023aa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023aa5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023aa8:	e8 d3 0c 00 00       	call   c0024780 <__ldexp_exp>
c0023aad:	e9 f2 fe ff ff       	jmp    c00239a4 <cosh+0x64>
c0023ab2:	66 90                	xchg   ax,ax
c0023ab4:	66 90                	xchg   ax,ax
c0023ab6:	66 90                	xchg   ax,ax
c0023ab8:	66 90                	xchg   ax,ax
c0023aba:	66 90                	xchg   ax,ax
c0023abc:	66 90                	xchg   ax,ax
c0023abe:	66 90                	xchg   ax,ax

c0023ac0 <pow>:
c0023ac0:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0023ac6:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c0023acd:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0023ad4:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c0023adb:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0023ae2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ae6:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c0023aed:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0023af4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023af8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b00:	89 f3                	mov    ebx,esi
c0023b02:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023b08:	89 d9                	mov    ecx,ebx
c0023b0a:	09 c1                	or     ecx,eax
c0023b0c:	0f 84 9e 00 00 00    	je     c0023bb0 <pow+0xf0>
c0023b12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0023b16:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0023b1a:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0023b20:	75 3e                	jne    c0023b60 <pow+0xa0>
c0023b22:	85 ed                	test   ebp,ebp
c0023b24:	75 3a                	jne    c0023b60 <pow+0xa0>
c0023b26:	d9 e8                	fld1   
c0023b28:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023b2c:	eb 02                	jmp    c0023b30 <pow+0x70>
c0023b2e:	dd d8                	fstp   st(0)
c0023b30:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023b34:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0023b3b:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0023b42:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0023b49:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0023b50:	81 c4 9c 00 00 00    	add    esp,0x9c
c0023b56:	c3                   	ret    
c0023b57:	89 f6                	mov    esi,esi
c0023b59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023b60:	89 fa                	mov    edx,edi
c0023b62:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023b68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0023b6c:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0023b72:	7f 1c                	jg     c0023b90 <pow+0xd0>
c0023b74:	0f 94 c1             	sete   cl
c0023b77:	85 ed                	test   ebp,ebp
c0023b79:	0f 95 c2             	setne  dl
c0023b7c:	84 ca                	test   dl,cl
c0023b7e:	75 10                	jne    c0023b90 <pow+0xd0>
c0023b80:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0023b86:	7f 08                	jg     c0023b90 <pow+0xd0>
c0023b88:	75 36                	jne    c0023bc0 <pow+0x100>
c0023b8a:	85 c0                	test   eax,eax
c0023b8c:	74 32                	je     c0023bc0 <pow+0x100>
c0023b8e:	66 90                	xchg   ax,ax
c0023b90:	d9 ee                	fldz   
c0023b92:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023b96:	d8 c1                	fadd   st,st(1)
c0023b98:	d9 c9                	fxch   st(1)
c0023b9a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0023b9e:	de c1                	faddp  st(1),st
c0023ba0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ba4:	eb 8a                	jmp    c0023b30 <pow+0x70>
c0023ba6:	8d 76 00             	lea    esi,[esi+0x0]
c0023ba9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023bb0:	d9 e8                	fld1   
c0023bb2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023bb6:	e9 75 ff ff ff       	jmp    c0023b30 <pow+0x70>
c0023bbb:	90                   	nop
c0023bbc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023bc0:	31 c9                	xor    ecx,ecx
c0023bc2:	85 ff                	test   edi,edi
c0023bc4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023bc8:	0f 88 22 01 00 00    	js     c0023cf0 <pow+0x230>
c0023bce:	85 c0                	test   eax,eax
c0023bd0:	75 5e                	jne    c0023c30 <pow+0x170>
c0023bd2:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0023bd8:	0f 84 72 01 00 00    	je     c0023d50 <pow+0x290>
c0023bde:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0023be4:	0f 84 b6 01 00 00    	je     c0023da0 <pow+0x2e0>
c0023bea:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0023bf0:	0f 84 38 07 00 00    	je     c002432e <pow+0x86e>
c0023bf6:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c0023bfc:	0f 84 33 08 00 00    	je     c0024435 <pow+0x975>
c0023c02:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0023c08:	0f 84 4f 08 00 00    	je     c002445d <pow+0x99d>
c0023c0e:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0023c14:	75 1a                	jne    c0023c30 <pow+0x170>
c0023c16:	89 f8                	mov    eax,edi
c0023c18:	f7 d0                	not    eax
c0023c1a:	c1 e8 1f             	shr    eax,0x1f
c0023c1d:	84 c0                	test   al,al
c0023c1f:	0f 85 f1 08 00 00    	jne    c0024516 <pow+0xa56>
c0023c25:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023c29:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023c30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023c34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c37:	e8 94 15 00 00       	call   c00251d0 <fabs>
c0023c3c:	85 ed                	test   ebp,ebp
c0023c3e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023c42:	75 1e                	jne    c0023c62 <pow+0x1a2>
c0023c44:	89 f8                	mov    eax,edi
c0023c46:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023c4b:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0023c50:	0f 84 33 06 00 00    	je     c0024289 <pow+0x7c9>
c0023c56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023c5a:	85 c0                	test   eax,eax
c0023c5c:	0f 84 27 06 00 00    	je     c0024289 <pow+0x7c9>
c0023c62:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0023c66:	89 f8                	mov    eax,edi
c0023c68:	c1 e8 1f             	shr    eax,0x1f
c0023c6b:	48                   	dec    eax
c0023c6c:	09 c1                	or     ecx,eax
c0023c6e:	0f 84 49 01 00 00    	je     c0023dbd <pow+0x2fd>
c0023c74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0023c78:	d9 ee                	fldz   
c0023c7a:	49                   	dec    ecx
c0023c7b:	09 c1                	or     ecx,eax
c0023c7d:	0f 85 4b 01 00 00    	jne    c0023dce <pow+0x30e>
c0023c83:	d9 e0                	fchs   
c0023c85:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0023c89:	d9 05 6c bf 02 c0    	fld    DWORD PTR ds:0xc002bf6c
c0023c8f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0023c93:	db 2d c0 bf 02 c0    	fld    TBYTE PTR ds:0xc002bfc0
c0023c99:	db 2d d0 bf 02 c0    	fld    TBYTE PTR ds:0xc002bfd0
c0023c9f:	d9 e8                	fld1   
c0023ca1:	d9 e0                	fchs   
c0023ca3:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023ca7:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c0023cad:	0f 8e 40 01 00 00    	jle    c0023df3 <pow+0x333>
c0023cb3:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0023cb9:	0f 8e 93 06 00 00    	jle    c0024352 <pow+0x892>
c0023cbf:	dd d8                	fstp   st(0)
c0023cc1:	dd d8                	fstp   st(0)
c0023cc3:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c0023ccb:	0f 8f c9 07 00 00    	jg     c002449a <pow+0x9da>
c0023cd1:	85 f6                	test   esi,esi
c0023cd3:	0f 88 94 08 00 00    	js     c002456d <pow+0xaad>
c0023cd9:	d9 ee                	fldz   
c0023cdb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023cdf:	e9 4c fe ff ff       	jmp    c0023b30 <pow+0x70>
c0023ce4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023cea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023cf0:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0023cf6:	0f 8f 94 00 00 00    	jg     c0023d90 <pow+0x2d0>
c0023cfc:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0023d02:	0f 8e c6 fe ff ff    	jle    c0023bce <pow+0x10e>
c0023d08:	89 d9                	mov    ecx,ebx
c0023d0a:	c1 f9 14             	sar    ecx,0x14
c0023d0d:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0023d13:	83 f9 14             	cmp    ecx,0x14
c0023d16:	0f 8e e5 06 00 00    	jle    c0024401 <pow+0x941>
c0023d1c:	ba 34 00 00 00       	mov    edx,0x34
c0023d21:	29 ca                	sub    edx,ecx
c0023d23:	89 d1                	mov    ecx,edx
c0023d25:	89 c2                	mov    edx,eax
c0023d27:	d3 ea                	shr    edx,cl
c0023d29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023d2d:	d3 e2                	shl    edx,cl
c0023d2f:	39 c2                	cmp    edx,eax
c0023d31:	0f 85 97 fe ff ff    	jne    c0023bce <pow+0x10e>
c0023d37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023d3b:	b9 02 00 00 00       	mov    ecx,0x2
c0023d40:	83 e2 01             	and    edx,0x1
c0023d43:	29 d1                	sub    ecx,edx
c0023d45:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023d49:	e9 80 fe ff ff       	jmp    c0023bce <pow+0x10e>
c0023d4e:	66 90                	xchg   ax,ax
c0023d50:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023d54:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c0023d5a:	09 e8                	or     eax,ebp
c0023d5c:	0f 84 61 05 00 00    	je     c00242c3 <pow+0x803>
c0023d62:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0023d68:	0f 8e 60 05 00 00    	jle    c00242ce <pow+0x80e>
c0023d6e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023d72:	85 f6                	test   esi,esi
c0023d74:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023d78:	0f 89 b2 fd ff ff    	jns    c0023b30 <pow+0x70>
c0023d7e:	e9 56 ff ff ff       	jmp    c0023cd9 <pow+0x219>
c0023d83:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023d89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023d90:	ba 02 00 00 00       	mov    edx,0x2
c0023d95:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0023d99:	e9 30 fe ff ff       	jmp    c0023bce <pow+0x10e>
c0023d9e:	66 90                	xchg   ax,ax
c0023da0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023da4:	85 f6                	test   esi,esi
c0023da6:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0023daa:	0f 89 7e fd ff ff    	jns    c0023b2e <pow+0x6e>
c0023db0:	d9 e8                	fld1   
c0023db2:	de f1                	fdivrp st(1),st
c0023db4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023db8:	e9 73 fd ff ff       	jmp    c0023b30 <pow+0x70>
c0023dbd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023dc1:	d8 e0                	fsub   st,st(0)
c0023dc3:	d8 f0                	fdiv   st,st(0)
c0023dc5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023dc9:	e9 62 fd ff ff       	jmp    c0023b30 <pow+0x70>
c0023dce:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0023dd2:	d9 05 68 bf 02 c0    	fld    DWORD PTR ds:0xc002bf68
c0023dd8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0023ddc:	db 2d a0 bf 02 c0    	fld    TBYTE PTR ds:0xc002bfa0
c0023de2:	db 2d b0 bf 02 c0    	fld    TBYTE PTR ds:0xc002bfb0
c0023de8:	d9 e8                	fld1   
c0023dea:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023dee:	e9 b4 fe ff ff       	jmp    c0023ca7 <pow+0x1e7>
c0023df3:	dd d8                	fstp   st(0)
c0023df5:	dd d8                	fstp   st(0)
c0023df7:	31 c0                	xor    eax,eax
c0023df9:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c0023dff:	75 1b                	jne    c0023e1c <pow+0x35c>
c0023e01:	d9 05 80 bf 02 c0    	fld    DWORD PTR ds:0xc002bf80
c0023e07:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0023e0b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023e13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023e17:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c0023e1c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023e20:	89 f9                	mov    ecx,edi
c0023e22:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0023e28:	c1 f9 14             	sar    ecx,0x14
c0023e2b:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0023e32:	89 f8                	mov    eax,edi
c0023e34:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0023e39:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c0023e3f:	0f 8e f8 04 00 00    	jle    c002433d <pow+0x87d>
c0023e45:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c0023e4b:	0f 8e 25 06 00 00    	jle    c0024476 <pow+0x9b6>
c0023e51:	d9 ee                	fldz   
c0023e53:	41                   	inc    ecx
c0023e54:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0023e58:	2d 00 00 10 00       	sub    eax,0x100000
c0023e5d:	31 d2                	xor    edx,edx
c0023e5f:	d9 ee                	fldz   
c0023e61:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0023e65:	d9 e8                	fld1   
c0023e67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e6f:	d1 f8                	sar    eax,1
c0023e71:	31 f6                	xor    esi,esi
c0023e73:	0d 00 00 00 20       	or     eax,0x20000000
c0023e78:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e7c:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0023e83:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0023e87:	31 ff                	xor    edi,edi
c0023e89:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e8d:	d9 c0                	fld    st(0)
c0023e8f:	d8 e2                	fsub   st,st(2)
c0023e91:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e95:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023e99:	d9 c1                	fld    st(1)
c0023e9b:	d8 c3                	fadd   st,st(3)
c0023e9d:	d8 3d 20 bf 02 c0    	fdivr  DWORD PTR ds:0xc002bf20
c0023ea3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023ea7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023eab:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023eaf:	d9 c0                	fld    st(0)
c0023eb1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023eb5:	de ca                	fmulp  st(2),st
c0023eb7:	d9 c9                	fxch   st(1)
c0023eb9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ebd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0023ec1:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0023ec5:	31 ed                	xor    ebp,ebp
c0023ec7:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023ecb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0023ecf:	31 c0                	xor    eax,eax
c0023ed1:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0023ed5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023ed9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023edd:	d9 c0                	fld    st(0)
c0023edf:	d8 c9                	fmul   st,st(1)
c0023ee1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023ee5:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023ee9:	d9 c2                	fld    st(2)
c0023eeb:	d8 cc                	fmul   st,st(4)
c0023eed:	de ed                	fsubp  st(5),st
c0023eef:	d9 ca                	fxch   st(2)
c0023ef1:	de e6                	fsubrp st(6),st
c0023ef3:	d9 cc                	fxch   st(4)
c0023ef5:	de e5                	fsubrp st(5),st
c0023ef7:	d9 cc                	fxch   st(4)
c0023ef9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023efd:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023f01:	d8 c9                	fmul   st,st(1)
c0023f03:	de ea                	fsubp  st(2),st
c0023f05:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023f09:	de ca                	fmulp  st(2),st
c0023f0b:	d9 c9                	fxch   st(1)
c0023f0d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023f11:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023f15:	d9 c3                	fld    st(3)
c0023f17:	dc 0d 08 c0 02 c0    	fmul   QWORD PTR ds:0xc002c008
c0023f1d:	dc 05 10 c0 02 c0    	fadd   QWORD PTR ds:0xc002c010
c0023f23:	d8 cc                	fmul   st,st(4)
c0023f25:	dc 05 18 c0 02 c0    	fadd   QWORD PTR ds:0xc002c018
c0023f2b:	d8 cc                	fmul   st,st(4)
c0023f2d:	dc 05 20 c0 02 c0    	fadd   QWORD PTR ds:0xc002c020
c0023f33:	d8 cc                	fmul   st,st(4)
c0023f35:	dc 05 28 c0 02 c0    	fadd   QWORD PTR ds:0xc002c028
c0023f3b:	d8 cc                	fmul   st,st(4)
c0023f3d:	dc 05 30 c0 02 c0    	fadd   QWORD PTR ds:0xc002c030
c0023f43:	d9 cc                	fxch   st(4)
c0023f45:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0023f49:	d8 c8                	fmul   st,st(0)
c0023f4b:	de cc                	fmulp  st(4),st
c0023f4d:	d9 cb                	fxch   st(3)
c0023f4f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023f53:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023f57:	d9 c1                	fld    st(1)
c0023f59:	d8 c3                	fadd   st,st(3)
c0023f5b:	d8 cc                	fmul   st,st(4)
c0023f5d:	de c1                	faddp  st(1),st
c0023f5f:	d9 c1                	fld    st(1)
c0023f61:	d8 ca                	fmul   st,st(2)
c0023f63:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023f67:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023f6b:	d9 c9                	fxch   st(1)
c0023f6d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023f71:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023f75:	d9 05 84 bf 02 c0    	fld    DWORD PTR ds:0xc002bf84
c0023f7b:	d9 c2                	fld    st(2)
c0023f7d:	d8 c1                	fadd   st,st(1)
c0023f7f:	d8 c2                	fadd   st,st(2)
c0023f81:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023f85:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023f89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023f8d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023f95:	31 c0                	xor    eax,eax
c0023f97:	dc cc                	fmul   st(4),st
c0023f99:	d9 cc                	fxch   st(4)
c0023f9b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023f9f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023fa3:	d9 c9                	fxch   st(1)
c0023fa5:	d8 ec                	fsubr  st,st(4)
c0023fa7:	de e3                	fsubrp st(3),st
c0023fa9:	d9 c9                	fxch   st(1)
c0023fab:	de e2                	fsubrp st(2),st
c0023fad:	d9 c9                	fxch   st(1)
c0023faf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023fb3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023fb7:	de cb                	fmulp  st(3),st
c0023fb9:	d9 cb                	fxch   st(3)
c0023fbb:	de c9                	fmulp  st(1),st
c0023fbd:	de c1                	faddp  st(1),st
c0023fbf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023fc3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023fc7:	d9 c1                	fld    st(1)
c0023fc9:	d8 c1                	fadd   st,st(1)
c0023fcb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023fcf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023fd3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023fd7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023fdb:	d9 c0                	fld    st(0)
c0023fdd:	d8 0d 88 bf 02 c0    	fmul   DWORD PTR ds:0xc002bf88
c0023fe3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023fe7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023feb:	d9 cb                	fxch   st(3)
c0023fed:	d8 e9                	fsubr  st,st(1)
c0023fef:	de ea                	fsubp  st(2),st
c0023ff1:	d9 c9                	fxch   st(1)
c0023ff3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023ff7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023ffb:	dc 0d 38 c0 02 c0    	fmul   QWORD PTR ds:0xc002c038
c0024001:	d9 c9                	fxch   st(1)
c0024003:	dc 0d 40 c0 02 c0    	fmul   QWORD PTR ds:0xc002c040
c0024009:	de c1                	faddp  st(1),st
c002400b:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c002400f:	de c1                	faddp  st(1),st
c0024011:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024015:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0024019:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002401d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0024021:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024025:	d9 c2                	fld    st(2)
c0024027:	d8 c2                	fadd   st,st(2)
c0024029:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c002402d:	dc c1                	fadd   st(1),st
c002402f:	d9 c9                	fxch   st(1)
c0024031:	d8 c2                	fadd   st,st(2)
c0024033:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024037:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c002403b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002403f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024043:	dc e2                	fsubr  st(2),st
c0024045:	d9 ca                	fxch   st(2)
c0024047:	de e1                	fsubrp st(1),st
c0024049:	de e3                	fsubrp st(3),st
c002404b:	d9 ca                	fxch   st(2)
c002404d:	de e9                	fsubp  st(1),st
c002404f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024053:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024057:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002405b:	31 db                	xor    ebx,ebx
c002405d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0024061:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024065:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024069:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002406d:	d9 c0                	fld    st(0)
c002406f:	d8 e2                	fsub   st,st(2)
c0024071:	d8 cc                	fmul   st,st(4)
c0024073:	d9 c9                	fxch   st(1)
c0024075:	de cb                	fmulp  st(3),st
c0024077:	de c2                	faddp  st(2),st
c0024079:	d9 c9                	fxch   st(1)
c002407b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002407f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024083:	d9 ca                	fxch   st(2)
c0024085:	de c9                	fmulp  st(1),st
c0024087:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002408b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002408f:	d9 c1                	fld    st(1)
c0024091:	d8 c1                	fadd   st,st(1)
c0024093:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024097:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c002409b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002409f:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c00240a5:	89 d3                	mov    ebx,edx
c00240a7:	0f 8e 38 02 00 00    	jle    c00242e5 <pow+0x825>
c00240ad:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c00240b3:	09 c1                	or     ecx,eax
c00240b5:	0f 85 f6 03 00 00    	jne    c00244b1 <pow+0x9f1>
c00240bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00240bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00240c3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00240c7:	d8 e1                	fsub   st,st(1)
c00240c9:	d9 c2                	fld    st(2)
c00240cb:	dc 05 48 c0 02 c0    	fadd   QWORD PTR ds:0xc002c048
c00240d1:	df f1                	fcomip st,st(1)
c00240d3:	dd d8                	fstp   st(0)
c00240d5:	0f 87 2a 04 00 00    	ja     c0024505 <pow+0xa45>
c00240db:	89 d9                	mov    ecx,ebx
c00240dd:	c1 f9 14             	sar    ecx,0x14
c00240e0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00240e6:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c00240ec:	b8 00 00 10 00       	mov    eax,0x100000
c00240f1:	d3 f8                	sar    eax,cl
c00240f3:	31 c9                	xor    ecx,ecx
c00240f5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00240f9:	01 d8                	add    eax,ebx
c00240fb:	be ff ff 0f 00       	mov    esi,0xfffff
c0024100:	89 c2                	mov    edx,eax
c0024102:	c1 fa 14             	sar    edx,0x14
c0024105:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002410b:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024111:	88 d1                	mov    cl,dl
c0024113:	d3 fe                	sar    esi,cl
c0024115:	b9 14 00 00 00       	mov    ecx,0x14
c002411a:	f7 d6                	not    esi
c002411c:	29 d1                	sub    ecx,edx
c002411e:	21 c6                	and    esi,eax
c0024120:	25 ff ff 0f 00       	and    eax,0xfffff
c0024125:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024129:	0d 00 00 10 00       	or     eax,0x100000
c002412e:	d3 f8                	sar    eax,cl
c0024130:	85 db                	test   ebx,ebx
c0024132:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024136:	89 c1                	mov    ecx,eax
c0024138:	79 02                	jns    c002413c <pow+0x67c>
c002413a:	f7 d9                	neg    ecx
c002413c:	de e9                	fsubp  st(1),st
c002413e:	89 ce                	mov    esi,ecx
c0024140:	c1 e6 14             	shl    esi,0x14
c0024143:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024147:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002414b:	d9 c1                	fld    st(1)
c002414d:	d8 c1                	fadd   st,st(1)
c002414f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024153:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0024157:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002415b:	31 c0                	xor    eax,eax
c002415d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024161:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024165:	d9 c0                	fld    st(0)
c0024167:	d8 0d 8c bf 02 c0    	fmul   DWORD PTR ds:0xc002bf8c
c002416d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024171:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024175:	d9 ca                	fxch   st(2)
c0024177:	d8 e9                	fsubr  st,st(1)
c0024179:	de eb                	fsubp  st(3),st
c002417b:	d9 ca                	fxch   st(2)
c002417d:	dc 0d 50 c0 02 c0    	fmul   QWORD PTR ds:0xc002c050
c0024183:	d9 ca                	fxch   st(2)
c0024185:	dc 0d 58 c0 02 c0    	fmul   QWORD PTR ds:0xc002c058
c002418b:	de c2                	faddp  st(2),st
c002418d:	d9 c9                	fxch   st(1)
c002418f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024193:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024197:	d9 c1                	fld    st(1)
c0024199:	d8 c1                	fadd   st,st(1)
c002419b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002419f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00241a3:	d9 c0                	fld    st(0)
c00241a5:	d8 c9                	fmul   st,st(1)
c00241a7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00241ab:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00241af:	d9 c0                	fld    st(0)
c00241b1:	dc 0d 60 c0 02 c0    	fmul   QWORD PTR ds:0xc002c060
c00241b7:	dc 25 68 c0 02 c0    	fsub   QWORD PTR ds:0xc002c068
c00241bd:	d8 c9                	fmul   st,st(1)
c00241bf:	dc 05 70 c0 02 c0    	fadd   QWORD PTR ds:0xc002c070
c00241c5:	d8 c9                	fmul   st,st(1)
c00241c7:	dc 25 78 c0 02 c0    	fsub   QWORD PTR ds:0xc002c078
c00241cd:	d8 c9                	fmul   st,st(1)
c00241cf:	dc 05 80 c0 02 c0    	fadd   QWORD PTR ds:0xc002c080
c00241d5:	de c9                	fmulp  st(1),st
c00241d7:	d8 e9                	fsubr  st,st(1)
c00241d9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00241dd:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00241e1:	d9 cb                	fxch   st(3)
c00241e3:	d8 e9                	fsubr  st,st(1)
c00241e5:	de ea                	fsubp  st(2),st
c00241e7:	d9 c9                	fxch   st(1)
c00241e9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00241ed:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00241f1:	d9 c1                	fld    st(1)
c00241f3:	d8 cb                	fmul   st,st(3)
c00241f5:	d9 cb                	fxch   st(3)
c00241f7:	d8 25 90 bf 02 c0    	fsub   DWORD PTR ds:0xc002bf90
c00241fd:	de fb                	fdivp  st(3),st
c00241ff:	d9 c1                	fld    st(1)
c0024201:	d8 c9                	fmul   st,st(1)
c0024203:	de c1                	faddp  st(1),st
c0024205:	de ea                	fsubp  st(2),st
c0024207:	d9 c9                	fxch   st(1)
c0024209:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002420d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024211:	de e1                	fsubrp st(1),st
c0024213:	d8 2d 20 bf 02 c0    	fsubr  DWORD PTR ds:0xc002bf20
c0024219:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002421d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0024221:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0024225:	89 d3                	mov    ebx,edx
c0024227:	01 f3                	add    ebx,esi
c0024229:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c002422f:	0f 8e a7 02 00 00    	jle    c00244dc <pow+0xa1c>
c0024235:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024239:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002423d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024241:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0024245:	de c9                	fmulp  st(1),st
c0024247:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002424b:	e9 e0 f8 ff ff       	jmp    c0023b30 <pow+0x70>
c0024250:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024254:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024257:	e8 74 0f 00 00       	call   c00251d0 <fabs>
c002425c:	85 ed                	test   ebp,ebp
c002425e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024262:	0f 85 55 fb ff ff    	jne    c0023dbd <pow+0x2fd>
c0024268:	89 f8                	mov    eax,edi
c002426a:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002426f:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0024274:	74 0b                	je     c0024281 <pow+0x7c1>
c0024276:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002427b:	0f 85 3c fb ff ff    	jne    c0023dbd <pow+0x2fd>
c0024281:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0024289:	85 f6                	test   esi,esi
c002428b:	79 0a                	jns    c0024297 <pow+0x7d7>
c002428d:	d9 e8                	fld1   
c002428f:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0024293:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024297:	85 ff                	test   edi,edi
c0024299:	0f 89 91 f8 ff ff    	jns    c0023b30 <pow+0x70>
c002429f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00242a3:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c00242a8:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c00242ac:	0f 85 10 02 00 00    	jne    c00244c2 <pow+0xa02>
c00242b2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00242b6:	d8 e0                	fsub   st,st(0)
c00242b8:	d8 f0                	fdiv   st,st(0)
c00242ba:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00242be:	e9 6d f8 ff ff       	jmp    c0023b30 <pow+0x70>
c00242c3:	d9 e8                	fld1   
c00242c5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00242c9:	e9 62 f8 ff ff       	jmp    c0023b30 <pow+0x70>
c00242ce:	85 f6                	test   esi,esi
c00242d0:	0f 89 03 fa ff ff    	jns    c0023cd9 <pow+0x219>
c00242d6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00242da:	d9 e0                	fchs   
c00242dc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00242e0:	e9 4b f8 ff ff       	jmp    c0023b30 <pow+0x70>
c00242e5:	89 d1                	mov    ecx,edx
c00242e7:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c00242ed:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c00242f3:	0f 8e 4f 01 00 00    	jle    c0024448 <pow+0x988>
c00242f9:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c00242ff:	09 c1                	or     ecx,eax
c0024301:	0f 85 55 02 00 00    	jne    c002455c <pow+0xa9c>
c0024307:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002430b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002430f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024313:	d8 e1                	fsub   st,st(1)
c0024315:	df f2                	fcomip st,st(2)
c0024317:	0f 82 be fd ff ff    	jb     c00240db <pow+0x61b>
c002431d:	dd d8                	fstp   st(0)
c002431f:	dd d8                	fstp   st(0)
c0024321:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024325:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024329:	e9 02 f8 ff ff       	jmp    c0023b30 <pow+0x70>
c002432e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024332:	d8 c8                	fmul   st,st(0)
c0024334:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024338:	e9 f3 f7 ff ff       	jmp    c0023b30 <pow+0x70>
c002433d:	d9 ee                	fldz   
c002433f:	31 d2                	xor    edx,edx
c0024341:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0024345:	d9 ee                	fldz   
c0024347:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002434b:	d9 e8                	fld1   
c002434d:	e9 15 fb ff ff       	jmp    c0023e67 <pow+0x3a7>
c0024352:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c002435a:	0f 8e 91 01 00 00    	jle    c00244f1 <pow+0xa31>
c0024360:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c0024368:	0f 8f da 01 00 00    	jg     c0024548 <pow+0xa88>
c002436e:	dd d8                	fstp   st(0)
c0024370:	dd d8                	fstp   st(0)
c0024372:	d9 e8                	fld1   
c0024374:	31 c0                	xor    eax,eax
c0024376:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c002437a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002437e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024382:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024386:	d9 c0                	fld    st(0)
c0024388:	d8 0d 78 bf 02 c0    	fmul   DWORD PTR ds:0xc002bf78
c002438e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024392:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024396:	d9 c1                	fld    st(1)
c0024398:	dc 0d f8 bf 02 c0    	fmul   QWORD PTR ds:0xc002bff8
c002439e:	d9 c2                	fld    st(2)
c00243a0:	d8 0d 7c bf 02 c0    	fmul   DWORD PTR ds:0xc002bf7c
c00243a6:	db 2d e0 bf 02 c0    	fld    TBYTE PTR ds:0xc002bfe0
c00243ac:	de e1                	fsubrp st(1),st
c00243ae:	d8 cb                	fmul   st,st(3)
c00243b0:	d8 2d 24 bf 02 c0    	fsubr  DWORD PTR ds:0xc002bf24
c00243b6:	d9 cb                	fxch   st(3)
c00243b8:	d8 c8                	fmul   st,st(0)
c00243ba:	de cb                	fmulp  st(3),st
c00243bc:	d9 ca                	fxch   st(2)
c00243be:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00243c2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00243c6:	dc 0d 00 c0 02 c0    	fmul   QWORD PTR ds:0xc002c000
c00243cc:	de ea                	fsubp  st(2),st
c00243ce:	d9 c9                	fxch   st(1)
c00243d0:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00243d4:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00243d8:	d9 c1                	fld    st(1)
c00243da:	d8 c1                	fadd   st,st(1)
c00243dc:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00243e0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00243e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00243e8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243ec:	dc e2                	fsubr  st(2),st
c00243ee:	d9 c9                	fxch   st(1)
c00243f0:	de e2                	fsubrp st(2),st
c00243f2:	d9 c9                	fxch   st(1)
c00243f4:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00243f8:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00243fc:	e9 56 fc ff ff       	jmp    c0024057 <pow+0x597>
c0024401:	85 c0                	test   eax,eax
c0024403:	0f 85 47 fe ff ff    	jne    c0024250 <pow+0x790>
c0024409:	b8 14 00 00 00       	mov    eax,0x14
c002440e:	29 c8                	sub    eax,ecx
c0024410:	89 c1                	mov    ecx,eax
c0024412:	89 d8                	mov    eax,ebx
c0024414:	d3 f8                	sar    eax,cl
c0024416:	89 c2                	mov    edx,eax
c0024418:	d3 e2                	shl    edx,cl
c002441a:	39 da                	cmp    edx,ebx
c002441c:	0f 85 bc f7 ff ff    	jne    c0023bde <pow+0x11e>
c0024422:	83 e0 01             	and    eax,0x1
c0024425:	b9 02 00 00 00       	mov    ecx,0x2
c002442a:	29 c1                	sub    ecx,eax
c002442c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0024430:	e9 a9 f7 ff ff       	jmp    c0023bde <pow+0x11e>
c0024435:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024439:	d9 c0                	fld    st(0)
c002443b:	d8 c9                	fmul   st,st(1)
c002443d:	de c9                	fmulp  st(1),st
c002443f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024443:	e9 e8 f6 ff ff       	jmp    c0023b30 <pow+0x70>
c0024448:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c002444e:	0f 8f 28 01 00 00    	jg     c002457c <pow+0xabc>
c0024454:	31 f6                	xor    esi,esi
c0024456:	31 c9                	xor    ecx,ecx
c0024458:	e9 fa fc ff ff       	jmp    c0024157 <pow+0x697>
c002445d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024461:	d8 c8                	fmul   st,st(0)
c0024463:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024467:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002446b:	d8 c8                	fmul   st,st(0)
c002446d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024471:	e9 ba f6 ff ff       	jmp    c0023b30 <pow+0x70>
c0024476:	d9 05 70 bf 02 c0    	fld    DWORD PTR ds:0xc002bf70
c002447c:	ba 00 00 04 00       	mov    edx,0x40000
c0024481:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0024485:	dd 05 f0 bf 02 c0    	fld    QWORD PTR ds:0xc002bff0
c002448b:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002448f:	d9 05 74 bf 02 c0    	fld    DWORD PTR ds:0xc002bf74
c0024495:	e9 cd f9 ff ff       	jmp    c0023e67 <pow+0x3a7>
c002449a:	85 f6                	test   esi,esi
c002449c:	0f 8e 37 f8 ff ff    	jle    c0023cd9 <pow+0x219>
c00244a2:	d9 05 68 bf 02 c0    	fld    DWORD PTR ds:0xc002bf68
c00244a8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00244ac:	e9 7f f6 ff ff       	jmp    c0023b30 <pow+0x70>
c00244b1:	dd d8                	fstp   st(0)
c00244b3:	dd d8                	fstp   st(0)
c00244b5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00244b9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00244bd:	e9 6e f6 ff ff       	jmp    c0023b30 <pow+0x70>
c00244c2:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00244c7:	0f 85 63 f6 ff ff    	jne    c0023b30 <pow+0x70>
c00244cd:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00244d1:	d9 e0                	fchs   
c00244d3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00244d7:	e9 54 f6 ff ff       	jmp    c0023b30 <pow+0x70>
c00244dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00244e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00244e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00244e7:	e8 c0 13 00 00       	call   c00258ac <ldexp>
c00244ec:	e9 50 fd ff ff       	jmp    c0024241 <pow+0x781>
c00244f1:	85 f6                	test   esi,esi
c00244f3:	0f 99 c0             	setns  al
c00244f6:	84 c0                	test   al,al
c00244f8:	db c9                	fcmovne st,st(1)
c00244fa:	dd d9                	fstp   st(1)
c00244fc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024500:	e9 2b f6 ff ff       	jmp    c0023b30 <pow+0x70>
c0024505:	dd d8                	fstp   st(0)
c0024507:	dd d8                	fstp   st(0)
c0024509:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002450d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024511:	e9 1a f6 ff ff       	jmp    c0023b30 <pow+0x70>
c0024516:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002451d:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0024524:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c002452b:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0024532:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024536:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c002453d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0024543:	e9 d8 12 00 00       	jmp    c0025820 <sqrt>
c0024548:	85 f6                	test   esi,esi
c002454a:	0f 9e c0             	setle  al
c002454d:	84 c0                	test   al,al
c002454f:	db c9                	fcmovne st,st(1)
c0024551:	dd d9                	fstp   st(1)
c0024553:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024557:	e9 d4 f5 ff ff       	jmp    c0023b30 <pow+0x70>
c002455c:	dd d8                	fstp   st(0)
c002455e:	dd d8                	fstp   st(0)
c0024560:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024564:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024568:	e9 c3 f5 ff ff       	jmp    c0023b30 <pow+0x70>
c002456d:	d9 05 68 bf 02 c0    	fld    DWORD PTR ds:0xc002bf68
c0024573:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024577:	e9 b4 f5 ff ff       	jmp    c0023b30 <pow+0x70>
c002457c:	c1 f9 14             	sar    ecx,0x14
c002457f:	e9 62 fb ff ff       	jmp    c00240e6 <pow+0x626>
c0024584:	66 90                	xchg   ax,ax
c0024586:	66 90                	xchg   ax,ax
c0024588:	66 90                	xchg   ax,ax
c002458a:	66 90                	xchg   ax,ax
c002458c:	66 90                	xchg   ax,ax
c002458e:	66 90                	xchg   ax,ax

c0024590 <sinh>:
c0024590:	53                   	push   ebx
c0024591:	83 ec 38             	sub    esp,0x38
c0024594:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024598:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002459c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00245a0:	89 c3                	mov    ebx,eax
c00245a2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00245a8:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c00245ae:	0f 8f ec 00 00 00    	jg     c00246a0 <sinh+0x110>
c00245b4:	dd d8                	fstp   st(0)
c00245b6:	d9 e8                	fld1   
c00245b8:	85 c0                	test   eax,eax
c00245ba:	0f 88 90 00 00 00    	js     c0024650 <sinh+0xc0>
c00245c0:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00245c6:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c00245cc:	0f 8f 8e 00 00 00    	jg     c0024660 <sinh+0xd0>
c00245d2:	dd d9                	fstp   st(1)
c00245d4:	eb 0c                	jmp    c00245e2 <sinh+0x52>
c00245d6:	8d 76 00             	lea    esi,[esi+0x0]
c00245d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00245e0:	dd d9                	fstp   st(1)
c00245e2:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c00245e8:	0f 8f d2 00 00 00    	jg     c00246c0 <sinh+0x130>
c00245ee:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00245f2:	d9 e8                	fld1   
c00245f4:	d9 c1                	fld    st(1)
c00245f6:	dc 05 90 c0 02 c0    	fadd   QWORD PTR ds:0xc002c090
c00245fc:	df f1                	fcomip st,st(1)
c00245fe:	dd d8                	fstp   st(0)
c0024600:	77 3e                	ja     c0024640 <sinh+0xb0>
c0024602:	dd d8                	fstp   st(0)
c0024604:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024608:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002460c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002460f:	e8 bc 0b 00 00       	call   c00251d0 <fabs>
c0024614:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024617:	e8 24 07 00 00       	call   c0024d40 <expm1>
c002461c:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0024620:	d9 c1                	fld    st(1)
c0024622:	d8 c2                	fadd   st,st(2)
c0024624:	d9 c2                	fld    st(2)
c0024626:	d8 cb                	fmul   st,st(3)
c0024628:	d9 cb                	fxch   st(3)
c002462a:	d8 05 20 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf20
c0024630:	de fb                	fdivp  st(3),st
c0024632:	de e2                	fsubrp st(2),st
c0024634:	de c9                	fmulp  st(1),st
c0024636:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002463a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002463e:	eb 02                	jmp    c0024642 <sinh+0xb2>
c0024640:	dd d9                	fstp   st(1)
c0024642:	83 c4 38             	add    esp,0x38
c0024645:	5b                   	pop    ebx
c0024646:	c3                   	ret    
c0024647:	89 f6                	mov    esi,esi
c0024649:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024650:	d9 e0                	fchs   
c0024652:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0024658:	d9 05 88 c0 02 c0    	fld    DWORD PTR ds:0xc002c088
c002465e:	7e 80                	jle    c00245e0 <sinh+0x50>
c0024660:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0024666:	0f 8e a4 00 00 00    	jle    c0024710 <sinh+0x180>
c002466c:	dd d8                	fstp   st(0)
c002466e:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0024674:	0f 8e c6 00 00 00    	jle    c0024740 <sinh+0x1b0>
c002467a:	dd d8                	fstp   st(0)
c002467c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024680:	dc 0d 90 c0 02 c0    	fmul   QWORD PTR ds:0xc002c090
c0024686:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002468a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002468e:	83 c4 38             	add    esp,0x38
c0024691:	5b                   	pop    ebx
c0024692:	c3                   	ret    
c0024693:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024699:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00246a0:	d9 c0                	fld    st(0)
c00246a2:	de c1                	faddp  st(1),st
c00246a4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00246a8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00246ac:	83 c4 38             	add    esp,0x38
c00246af:	5b                   	pop    ebx
c00246b0:	c3                   	ret    
c00246b1:	eb 0d                	jmp    c00246c0 <sinh+0x130>
c00246b3:	90                   	nop
c00246b4:	90                   	nop
c00246b5:	90                   	nop
c00246b6:	90                   	nop
c00246b7:	90                   	nop
c00246b8:	90                   	nop
c00246b9:	90                   	nop
c00246ba:	90                   	nop
c00246bb:	90                   	nop
c00246bc:	90                   	nop
c00246bd:	90                   	nop
c00246be:	90                   	nop
c00246bf:	90                   	nop
c00246c0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00246c4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00246c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00246cb:	e8 00 0b 00 00       	call   c00251d0 <fabs>
c00246d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c00246d3:	e8 68 06 00 00       	call   c0024d40 <expm1>
c00246d8:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00246de:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00246e2:	0f 8e 38 ff ff ff    	jle    c0024620 <sinh+0x90>
c00246e8:	d9 c1                	fld    st(1)
c00246ea:	d8 05 20 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf20
c00246f0:	d8 fa                	fdivr  st,st(2)
c00246f2:	de c2                	faddp  st(2),st
c00246f4:	de c9                	fmulp  st(1),st
c00246f6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00246fa:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00246fe:	83 c4 38             	add    esp,0x38
c0024701:	5b                   	pop    ebx
c0024702:	c3                   	ret    
c0024703:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024710:	dd d9                	fstp   st(1)
c0024712:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024716:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002471a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002471d:	e8 ae 0a 00 00       	call   c00251d0 <fabs>
c0024722:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024725:	e8 5e 10 00 00       	call   c0025788 <exp>
c002472a:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002472e:	de c9                	fmulp  st(1),st
c0024730:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024734:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024738:	e9 05 ff ff ff       	jmp    c0024642 <sinh+0xb2>
c002473d:	8d 76 00             	lea    esi,[esi+0x0]
c0024740:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024744:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024748:	dd 1c 24             	fstp   QWORD PTR [esp]
c002474b:	e8 80 0a 00 00       	call   c00251d0 <fabs>
c0024750:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024759:	dd 1c 24             	fstp   QWORD PTR [esp]
c002475c:	e8 1f 00 00 00       	call   c0024780 <__ldexp_exp>
c0024761:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0024765:	de c9                	fmulp  st(1),st
c0024767:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002476b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002476f:	e9 ce fe ff ff       	jmp    c0024642 <sinh+0xb2>
c0024774:	66 90                	xchg   ax,ax
c0024776:	66 90                	xchg   ax,ax
c0024778:	66 90                	xchg   ax,ax
c002477a:	66 90                	xchg   ax,ax
c002477c:	66 90                	xchg   ax,ax
c002477e:	66 90                	xchg   ax,ax

c0024780 <__ldexp_exp>:
c0024780:	53                   	push   ebx
c0024781:	83 ec 28             	sub    esp,0x28
c0024784:	dd 05 98 c0 02 c0    	fld    QWORD PTR ds:0xc002c098
c002478a:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c002478e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024791:	e8 f2 0f 00 00       	call   c0025788 <exp>
c0024796:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002479a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002479e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00247a2:	89 da                	mov    edx,ebx
c00247a4:	89 d8                	mov    eax,ebx
c00247a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00247aa:	c1 e8 14             	shr    eax,0x14
c00247ad:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00247b3:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c00247b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00247bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00247c1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00247c5:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c00247cc:	c1 e0 14             	shl    eax,0x14
c00247cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00247d3:	31 c0                	xor    eax,eax
c00247d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00247d9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00247dd:	de c9                	fmulp  st(1),st
c00247df:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00247e3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00247e7:	83 c4 28             	add    esp,0x28
c00247ea:	5b                   	pop    ebx
c00247eb:	c3                   	ret    
c00247ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c00247f0 <__ldexp_cexp>:
c00247f0:	57                   	push   edi
c00247f1:	56                   	push   esi
c00247f2:	53                   	push   ebx
c00247f3:	83 ec 60             	sub    esp,0x60
c00247f6:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c00247fa:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c00247fe:	dd 14 24             	fst    QWORD PTR [esp]
c0024801:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0024805:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024809:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c002480d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024811:	e8 6a 0f 00 00       	call   c0025780 <creal>
c0024816:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002481a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002481e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024821:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024825:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024829:	e8 42 0f 00 00       	call   c0025770 <cimag>
c002482e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024832:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024836:	dc 25 98 c0 02 c0    	fsub   QWORD PTR ds:0xc002c098
c002483c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002483f:	e8 44 0f 00 00       	call   c0025788 <exp>
c0024844:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024848:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002484c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024850:	89 fa                	mov    edx,edi
c0024852:	89 f8                	mov    eax,edi
c0024854:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0024858:	c1 e8 14             	shr    eax,0x14
c002485b:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0024861:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0024867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002486b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0024872:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024876:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002487a:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c0024881:	89 d1                	mov    ecx,edx
c0024883:	c1 e9 1f             	shr    ecx,0x1f
c0024886:	01 d1                	add    ecx,edx
c0024888:	d1 f9                	sar    ecx,1
c002488a:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0024890:	29 ca                	sub    edx,ecx
c0024892:	c1 e0 14             	shl    eax,0x14
c0024895:	81 c2 ff 03 00 00    	add    edx,0x3ff
c002489b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002489f:	c1 e2 14             	shl    edx,0x14
c00248a2:	31 c0                	xor    eax,eax
c00248a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00248a8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00248ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00248b0:	31 d2                	xor    edx,edx
c00248b2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00248b6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00248ba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00248be:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00248c2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00248c6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00248c9:	e8 12 03 00 00       	call   c0024be0 <cos>
c00248ce:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00248d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248d6:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c00248da:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00248de:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c00248e2:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00248e6:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c00248ea:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00248ee:	dd 1c 24             	fstp   QWORD PTR [esp]
c00248f1:	e8 fa 0b 00 00       	call   c00254f0 <sin>
c00248f6:	89 d8                	mov    eax,ebx
c00248f8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00248fc:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0024900:	dc c9                	fmul   st(1),st
c0024902:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0024906:	dc ca                	fmul   st(2),st
c0024908:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c002490c:	dc cb                	fmul   st(3),st
c002490e:	d9 cb                	fxch   st(3)
c0024910:	dd 1b                	fstp   QWORD PTR [ebx]
c0024912:	d9 cb                	fxch   st(3)
c0024914:	de c9                	fmulp  st(1),st
c0024916:	de ca                	fmulp  st(2),st
c0024918:	de c9                	fmulp  st(1),st
c002491a:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002491d:	83 c4 60             	add    esp,0x60
c0024920:	5b                   	pop    ebx
c0024921:	5e                   	pop    esi
c0024922:	5f                   	pop    edi
c0024923:	c2 04 00             	ret    0x4
c0024926:	66 90                	xchg   ax,ax
c0024928:	66 90                	xchg   ax,ax
c002492a:	66 90                	xchg   ax,ax
c002492c:	66 90                	xchg   ax,ax
c002492e:	66 90                	xchg   ax,ax

c0024930 <atan>:
c0024930:	56                   	push   esi
c0024931:	53                   	push   ebx
c0024932:	83 ec 24             	sub    esp,0x24
c0024935:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024939:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002493d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024941:	89 f3                	mov    ebx,esi
c0024943:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024949:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c002494f:	7e 5f                	jle    c00249b0 <atan+0x80>
c0024951:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0024957:	7f 0a                	jg     c0024963 <atan+0x33>
c0024959:	75 25                	jne    c0024980 <atan+0x50>
c002495b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002495f:	85 c0                	test   eax,eax
c0024961:	74 1d                	je     c0024980 <atan+0x50>
c0024963:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024967:	d8 c0                	fadd   st,st(0)
c0024969:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002496d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024971:	83 c4 24             	add    esp,0x24
c0024974:	5b                   	pop    ebx
c0024975:	5e                   	pop    esi
c0024976:	c3                   	ret    
c0024977:	89 f6                	mov    esi,esi
c0024979:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024980:	85 f6                	test   esi,esi
c0024982:	dd 05 b8 c0 02 c0    	fld    QWORD PTR ds:0xc002c0b8
c0024988:	0f 8e 22 01 00 00    	jle    c0024ab0 <atan+0x180>
c002498e:	dc 05 c8 be 02 c0    	fadd   QWORD PTR ds:0xc002bec8
c0024994:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024998:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002499c:	83 c4 24             	add    esp,0x24
c002499f:	5b                   	pop    ebx
c00249a0:	5e                   	pop    esi
c00249a1:	c3                   	ret    
c00249a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00249a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00249b0:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c00249b6:	0f 8f 34 01 00 00    	jg     c0024af0 <atan+0x1c0>
c00249bc:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c00249c2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00249c6:	0f 8e c4 00 00 00    	jle    c0024a90 <atan+0x160>
c00249cc:	eb 04                	jmp    c00249d2 <atan+0xa2>
c00249ce:	66 90                	xchg   ax,ax
c00249d0:	dd d8                	fstp   st(0)
c00249d2:	d9 ee                	fldz   
c00249d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00249d9:	d9 ee                	fldz   
c00249db:	d9 c2                	fld    st(2)
c00249dd:	40                   	inc    eax
c00249de:	d8 cb                	fmul   st,st(3)
c00249e0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00249e4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00249e8:	d9 c0                	fld    st(0)
c00249ea:	d8 c9                	fmul   st,st(1)
c00249ec:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00249f0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00249f4:	d9 c0                	fld    st(0)
c00249f6:	dc 0d e8 c0 02 c0    	fmul   QWORD PTR ds:0xc002c0e8
c00249fc:	dc 05 f0 c0 02 c0    	fadd   QWORD PTR ds:0xc002c0f0
c0024a02:	d8 c9                	fmul   st,st(1)
c0024a04:	dc 05 f8 c0 02 c0    	fadd   QWORD PTR ds:0xc002c0f8
c0024a0a:	d8 c9                	fmul   st,st(1)
c0024a0c:	dc 05 00 c1 02 c0    	fadd   QWORD PTR ds:0xc002c100
c0024a12:	d8 c9                	fmul   st,st(1)
c0024a14:	dc 05 08 c1 02 c0    	fadd   QWORD PTR ds:0xc002c108
c0024a1a:	d8 c9                	fmul   st,st(1)
c0024a1c:	dc 05 10 c1 02 c0    	fadd   QWORD PTR ds:0xc002c110
c0024a22:	de ca                	fmulp  st(2),st
c0024a24:	d9 c9                	fxch   st(1)
c0024a26:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a2a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a2e:	d9 c1                	fld    st(1)
c0024a30:	dc 0d 18 c1 02 c0    	fmul   QWORD PTR ds:0xc002c118
c0024a36:	dc 25 20 c1 02 c0    	fsub   QWORD PTR ds:0xc002c120
c0024a3c:	d8 ca                	fmul   st,st(2)
c0024a3e:	dc 25 28 c1 02 c0    	fsub   QWORD PTR ds:0xc002c128
c0024a44:	d8 ca                	fmul   st,st(2)
c0024a46:	dc 25 30 c1 02 c0    	fsub   QWORD PTR ds:0xc002c130
c0024a4c:	d8 ca                	fmul   st,st(2)
c0024a4e:	dc 25 38 c1 02 c0    	fsub   QWORD PTR ds:0xc002c138
c0024a54:	de ca                	fmulp  st(2),st
c0024a56:	d9 c9                	fxch   st(1)
c0024a58:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a5c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a60:	de c1                	faddp  st(1),st
c0024a62:	d8 cb                	fmul   st,st(3)
c0024a64:	74 6a                	je     c0024ad0 <atan+0x1a0>
c0024a66:	85 f6                	test   esi,esi
c0024a68:	de e2                	fsubrp st(2),st
c0024a6a:	d9 c9                	fxch   st(1)
c0024a6c:	de e2                	fsubrp st(2),st
c0024a6e:	de e1                	fsubrp st(1),st
c0024a70:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a78:	0f 89 f3 fe ff ff    	jns    c0024971 <atan+0x41>
c0024a7e:	d9 e0                	fchs   
c0024a80:	83 c4 24             	add    esp,0x24
c0024a83:	5b                   	pop    ebx
c0024a84:	5e                   	pop    esi
c0024a85:	c3                   	ret    
c0024a86:	8d 76 00             	lea    esi,[esi+0x0]
c0024a89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024a90:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024a94:	d9 e8                	fld1   
c0024a96:	d9 c2                	fld    st(2)
c0024a98:	dc 05 30 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf30
c0024a9e:	df f1                	fcomip st,st(1)
c0024aa0:	dd d8                	fstp   st(0)
c0024aa2:	0f 86 28 ff ff ff    	jbe    c00249d0 <atan+0xa0>
c0024aa8:	dd d9                	fstp   st(1)
c0024aaa:	e9 c2 fe ff ff       	jmp    c0024971 <atan+0x41>
c0024aaf:	90                   	nop
c0024ab0:	dd 05 48 bf 02 c0    	fld    QWORD PTR ds:0xc002bf48
c0024ab6:	de e1                	fsubrp st(1),st
c0024ab8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024abc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ac0:	e9 ac fe ff ff       	jmp    c0024971 <atan+0x41>
c0024ac5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024ac9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024ad0:	dd da                	fstp   st(2)
c0024ad2:	dd d8                	fstp   st(0)
c0024ad4:	de e9                	fsubp  st(1),st
c0024ad6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ada:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ade:	83 c4 24             	add    esp,0x24
c0024ae1:	5b                   	pop    ebx
c0024ae2:	5e                   	pop    esi
c0024ae3:	c3                   	ret    
c0024ae4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024aea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024af0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024af4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024af7:	e8 d4 06 00 00       	call   c00251d0 <fabs>
c0024afc:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0024b02:	7f 3c                	jg     c0024b40 <atan+0x210>
c0024b04:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c0024b0a:	0f 8f a0 00 00 00    	jg     c0024bb0 <atan+0x280>
c0024b10:	d9 c0                	fld    st(0)
c0024b12:	31 c0                	xor    eax,eax
c0024b14:	d8 c1                	fadd   st,st(1)
c0024b16:	d8 25 20 bf 02 c0    	fsub   DWORD PTR ds:0xc002bf20
c0024b1c:	d9 c9                	fxch   st(1)
c0024b1e:	d8 05 90 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf90
c0024b24:	de f9                	fdivp  st(1),st
c0024b26:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024b2a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024b2e:	dd 05 d8 c0 02 c0    	fld    QWORD PTR ds:0xc002c0d8
c0024b34:	dd 05 e0 c0 02 c0    	fld    QWORD PTR ds:0xc002c0e0
c0024b3a:	e9 9c fe ff ff       	jmp    c00249db <atan+0xab>
c0024b3f:	90                   	nop
c0024b40:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c0024b46:	7f 38                	jg     c0024b80 <atan+0x250>
c0024b48:	d9 05 74 bf 02 c0    	fld    DWORD PTR ds:0xc002bf74
c0024b4e:	b8 02 00 00 00       	mov    eax,0x2
c0024b53:	d9 c1                	fld    st(1)
c0024b55:	d8 e1                	fsub   st,st(1)
c0024b57:	d9 ca                	fxch   st(2)
c0024b59:	de c9                	fmulp  st(1),st
c0024b5b:	d8 05 20 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf20
c0024b61:	de f9                	fdivp  st(1),st
c0024b63:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024b67:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024b6b:	dd 05 c8 c0 02 c0    	fld    QWORD PTR ds:0xc002c0c8
c0024b71:	dd 05 d0 c0 02 c0    	fld    QWORD PTR ds:0xc002c0d0
c0024b77:	e9 5f fe ff ff       	jmp    c00249db <atan+0xab>
c0024b7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024b80:	d8 3d 40 c1 02 c0    	fdivr  DWORD PTR ds:0xc002c140
c0024b86:	b8 03 00 00 00       	mov    eax,0x3
c0024b8b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024b8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024b93:	dd 05 28 bf 02 c0    	fld    QWORD PTR ds:0xc002bf28
c0024b99:	dd 05 c8 be 02 c0    	fld    QWORD PTR ds:0xc002bec8
c0024b9f:	e9 37 fe ff ff       	jmp    c00249db <atan+0xab>
c0024ba4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024baa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024bb0:	d9 e8                	fld1   
c0024bb2:	b8 01 00 00 00       	mov    eax,0x1
c0024bb7:	d9 c1                	fld    st(1)
c0024bb9:	d8 e1                	fsub   st,st(1)
c0024bbb:	d9 ca                	fxch   st(2)
c0024bbd:	de c1                	faddp  st(1),st
c0024bbf:	de f9                	fdivp  st(1),st
c0024bc1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024bc5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024bc9:	dd 05 c0 c0 02 c0    	fld    QWORD PTR ds:0xc002c0c0
c0024bcf:	dd 05 38 bf 02 c0    	fld    QWORD PTR ds:0xc002bf38
c0024bd5:	e9 01 fe ff ff       	jmp    c00249db <atan+0xab>
c0024bda:	66 90                	xchg   ax,ax
c0024bdc:	66 90                	xchg   ax,ax
c0024bde:	66 90                	xchg   ax,ax

c0024be0 <cos>:
c0024be0:	83 ec 5c             	sub    esp,0x5c
c0024be3:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0024be7:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0024beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0024bef:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024bf4:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0024bf9:	7f 55                	jg     c0024c50 <cos+0x70>
c0024bfb:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0024c00:	7f 2e                	jg     c0024c30 <cos+0x50>
c0024c02:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024c06:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024c0b:	66 0d 00 0c          	or     ax,0xc00
c0024c0f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024c14:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024c18:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c0024c1c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c24:	85 c0                	test   eax,eax
c0024c26:	0f 84 94 00 00 00    	je     c0024cc0 <cos+0xe0>
c0024c2c:	eb 04                	jmp    c0024c32 <cos+0x52>
c0024c2e:	66 90                	xchg   ax,ax
c0024c30:	dd d8                	fstp   st(0)
c0024c32:	d9 ee                	fldz   
c0024c34:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024c38:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024c3c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024c3f:	e8 ac 11 00 00       	call   c0025df0 <__kernel_cos>
c0024c44:	83 c4 5c             	add    esp,0x5c
c0024c47:	c3                   	ret    
c0024c48:	90                   	nop
c0024c49:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024c50:	dd d8                	fstp   st(0)
c0024c52:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024c57:	7e 17                	jle    c0024c70 <cos+0x90>
c0024c59:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024c5d:	d8 e0                	fsub   st,st(0)
c0024c5f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c63:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c67:	83 c4 5c             	add    esp,0x5c
c0024c6a:	c3                   	ret    
c0024c6b:	90                   	nop
c0024c6c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024c70:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024c74:	8d 44 24 40          	lea    eax,[esp+0x40]
c0024c78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024c7f:	e8 3c 0c 00 00       	call   c00258c0 <__ieee754_rem_pio2>
c0024c84:	83 e0 03             	and    eax,0x3
c0024c87:	83 f8 01             	cmp    eax,0x1
c0024c8a:	0f 84 80 00 00 00    	je     c0024d10 <cos+0x130>
c0024c90:	83 f8 02             	cmp    eax,0x2
c0024c93:	74 5b                	je     c0024cf0 <cos+0x110>
c0024c95:	85 c0                	test   eax,eax
c0024c97:	74 37                	je     c0024cd0 <cos+0xf0>
c0024c99:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024c9d:	b8 01 00 00 00       	mov    eax,0x1
c0024ca2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ca6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024caa:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024cae:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024cb1:	e8 ba 1b 00 00       	call   c0026870 <__kernel_sin>
c0024cb6:	eb 8c                	jmp    c0024c44 <cos+0x64>
c0024cb8:	90                   	nop
c0024cb9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024cc0:	d9 e8                	fld1   
c0024cc2:	83 c4 5c             	add    esp,0x5c
c0024cc5:	c3                   	ret    
c0024cc6:	8d 76 00             	lea    esi,[esi+0x0]
c0024cc9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024cd0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024cd4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024cd8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024cdc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024cdf:	e8 0c 11 00 00       	call   c0025df0 <__kernel_cos>
c0024ce4:	e9 5b ff ff ff       	jmp    c0024c44 <cos+0x64>
c0024ce9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024cf0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024cf4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024cf8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024cfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024cff:	e8 ec 10 00 00       	call   c0025df0 <__kernel_cos>
c0024d04:	d9 e0                	fchs   
c0024d06:	e9 39 ff ff ff       	jmp    c0024c44 <cos+0x64>
c0024d0b:	90                   	nop
c0024d0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024d10:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024d14:	ba 01 00 00 00       	mov    edx,0x1
c0024d19:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024d1d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024d21:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024d25:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024d28:	e8 43 1b 00 00       	call   c0026870 <__kernel_sin>
c0024d2d:	d9 e0                	fchs   
c0024d2f:	e9 10 ff ff ff       	jmp    c0024c44 <cos+0x64>
c0024d34:	66 90                	xchg   ax,ax
c0024d36:	66 90                	xchg   ax,ax
c0024d38:	66 90                	xchg   ax,ax
c0024d3a:	66 90                	xchg   ax,ax
c0024d3c:	66 90                	xchg   ax,ax
c0024d3e:	66 90                	xchg   ax,ax

c0024d40 <expm1>:
c0024d40:	d9 05 50 c1 02 c0    	fld    DWORD PTR ds:0xc002c150
c0024d46:	83 ec 24             	sub    esp,0x24
c0024d49:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024d4d:	dd 14 24             	fst    QWORD PTR [esp]
c0024d50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d54:	89 d0                	mov    eax,edx
c0024d56:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024d5b:	3d 79 68 43 40       	cmp    eax,0x40436879
c0024d60:	0f 86 ea 00 00 00    	jbe    c0024e50 <expm1+0x110>
c0024d66:	dd d9                	fstp   st(1)
c0024d68:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c0024d6d:	76 51                	jbe    c0024dc0 <expm1+0x80>
c0024d6f:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024d74:	76 2a                	jbe    c0024da0 <expm1+0x60>
c0024d76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024d79:	89 d1                	mov    ecx,edx
c0024d7b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0024d81:	09 c1                	or     ecx,eax
c0024d83:	0f 84 b7 03 00 00    	je     c0025140 <expm1+0x400>
c0024d89:	d9 c0                	fld    st(0)
c0024d8b:	de c1                	faddp  st(1),st
c0024d8d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024d91:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024d95:	e9 0a 02 00 00       	jmp    c0024fa4 <expm1+0x264>
c0024d9a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024da0:	dd d8                	fstp   st(0)
c0024da2:	dd 05 68 c1 02 c0    	fld    QWORD PTR ds:0xc002c168
c0024da8:	dd 04 24             	fld    QWORD PTR [esp]
c0024dab:	df f1                	fcomip st,st(1)
c0024dad:	dd d8                	fstp   st(0)
c0024daf:	0f 87 cb 03 00 00    	ja     c0025180 <expm1+0x440>
c0024db5:	eb 0b                	jmp    c0024dc2 <expm1+0x82>
c0024db7:	89 f6                	mov    esi,esi
c0024db9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024dc0:	dd d8                	fstp   st(0)
c0024dc2:	85 d2                	test   edx,edx
c0024dc4:	dd 04 24             	fld    QWORD PTR [esp]
c0024dc7:	0f 88 e3 01 00 00    	js     c0024fb0 <expm1+0x270>
c0024dcd:	d9 c0                	fld    st(0)
c0024dcf:	dc 0d 00 c0 02 c0    	fmul   QWORD PTR ds:0xc002c000
c0024dd5:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c0024ddb:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0024ddf:	de c1                	faddp  st(1),st
c0024de1:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0024de6:	66 0d 00 0c          	or     ax,0xc00
c0024dea:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0024def:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0024df3:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0024df7:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0024dfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024dff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024e02:	db 04 24             	fild   DWORD PTR [esp]
c0024e05:	d9 c0                	fld    st(0)
c0024e07:	dc 0d 78 c1 02 c0    	fmul   QWORD PTR ds:0xc002c178
c0024e0d:	de ea                	fsubp  st(2),st
c0024e0f:	d9 c9                	fxch   st(1)
c0024e11:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e15:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e19:	d9 c9                	fxch   st(1)
c0024e1b:	dc 0d 60 c1 02 c0    	fmul   QWORD PTR ds:0xc002c160
c0024e21:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e25:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e29:	d9 c1                	fld    st(1)
c0024e2b:	d8 e1                	fsub   st,st(1)
c0024e2d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e30:	dd 04 24             	fld    QWORD PTR [esp]
c0024e33:	dc ea                	fsub   st(2),st
c0024e35:	d9 ca                	fxch   st(2)
c0024e37:	de e1                	fsubrp st(1),st
c0024e39:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e3d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e41:	eb 2c                	jmp    c0024e6f <expm1+0x12f>
c0024e43:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024e49:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024e50:	dd d8                	fstp   st(0)
c0024e52:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c0024e57:	dd 04 24             	fld    QWORD PTR [esp]
c0024e5a:	0f 87 c0 01 00 00    	ja     c0025020 <expm1+0x2e0>
c0024e60:	31 c9                	xor    ecx,ecx
c0024e62:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0024e67:	0f 86 f3 01 00 00    	jbe    c0025060 <expm1+0x320>
c0024e6d:	d9 c9                	fxch   st(1)
c0024e6f:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c0024e75:	85 c9                	test   ecx,ecx
c0024e77:	d9 c2                	fld    st(2)
c0024e79:	d8 c9                	fmul   st,st(1)
c0024e7b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e7f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e83:	d9 c0                	fld    st(0)
c0024e85:	d8 cc                	fmul   st,st(4)
c0024e87:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e8b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e8f:	d9 c0                	fld    st(0)
c0024e91:	dc 0d 80 c1 02 c0    	fmul   QWORD PTR ds:0xc002c180
c0024e97:	dc 05 88 c1 02 c0    	fadd   QWORD PTR ds:0xc002c188
c0024e9d:	d8 c9                	fmul   st,st(1)
c0024e9f:	dc 25 90 c1 02 c0    	fsub   QWORD PTR ds:0xc002c190
c0024ea5:	d8 c9                	fmul   st,st(1)
c0024ea7:	dc 05 98 c1 02 c0    	fadd   QWORD PTR ds:0xc002c198
c0024ead:	d8 c9                	fmul   st,st(1)
c0024eaf:	dc 25 a0 c1 02 c0    	fsub   QWORD PTR ds:0xc002c1a0
c0024eb5:	d8 c9                	fmul   st,st(1)
c0024eb7:	d9 e8                	fld1   
c0024eb9:	dc c1                	fadd   st(1),st
c0024ebb:	d9 c9                	fxch   st(1)
c0024ebd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ec1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ec5:	dc cb                	fmul   st(3),st
c0024ec7:	d9 cb                	fxch   st(3)
c0024ec9:	d8 2d 84 bf 02 c0    	fsubr  DWORD PTR ds:0xc002bf84
c0024ecf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ed3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ed7:	dc eb                	fsub   st(3),st
c0024ed9:	d8 ce                	fmul   st,st(6)
c0024edb:	d8 2d 44 c1 02 c0    	fsubr  DWORD PTR ds:0xc002c144
c0024ee1:	de fb                	fdivp  st(3),st
c0024ee3:	d9 ca                	fxch   st(2)
c0024ee5:	d8 c9                	fmul   st,st(1)
c0024ee7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024eeb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024eef:	0f 84 9b 00 00 00    	je     c0024f90 <expm1+0x250>
c0024ef5:	89 c8                	mov    eax,ecx
c0024ef7:	c1 e0 14             	shl    eax,0x14
c0024efa:	05 00 00 f0 3f       	add    eax,0x3ff00000
c0024eff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f03:	31 c0                	xor    eax,eax
c0024f05:	83 f9 ff             	cmp    ecx,0xffffffff
c0024f08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f0c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024f10:	d9 c9                	fxch   st(1)
c0024f12:	d8 e5                	fsub   st,st(5)
c0024f14:	d8 ce                	fmul   st,st(6)
c0024f16:	de e5                	fsubrp st(5),st
c0024f18:	d9 cc                	fxch   st(4)
c0024f1a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f22:	de e1                	fsubrp st(1),st
c0024f24:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f28:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f2c:	0f 84 9e 01 00 00    	je     c00250d0 <expm1+0x390>
c0024f32:	83 f9 01             	cmp    ecx,0x1
c0024f35:	0f 84 55 01 00 00    	je     c0025090 <expm1+0x350>
c0024f3b:	dd da                	fstp   st(2)
c0024f3d:	d9 c9                	fxch   st(1)
c0024f3f:	8d 41 01             	lea    eax,[ecx+0x1]
c0024f42:	83 f8 39             	cmp    eax,0x39
c0024f45:	0f 87 95 00 00 00    	ja     c0024fe0 <expm1+0x2a0>
c0024f4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024f52:	83 f9 13             	cmp    ecx,0x13
c0024f55:	0f 8f b5 01 00 00    	jg     c0025110 <expm1+0x3d0>
c0024f5b:	dd d9                	fstp   st(1)
c0024f5d:	b8 00 00 20 00       	mov    eax,0x200000
c0024f62:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0024f67:	d3 f8                	sar    eax,cl
c0024f69:	29 c2                	sub    edx,eax
c0024f6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024f6f:	dd 04 24             	fld    QWORD PTR [esp]
c0024f72:	d9 cb                	fxch   st(3)
c0024f74:	de e9                	fsubp  st(1),st
c0024f76:	de ea                	fsubp  st(2),st
c0024f78:	d9 c9                	fxch   st(1)
c0024f7a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f7e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f82:	de c9                	fmulp  st(1),st
c0024f84:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f88:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f8c:	83 c4 24             	add    esp,0x24
c0024f8f:	c3                   	ret    
c0024f90:	dd db                	fstp   st(3)
c0024f92:	dd db                	fstp   st(3)
c0024f94:	dd d8                	fstp   st(0)
c0024f96:	d8 ca                	fmul   st,st(2)
c0024f98:	de e1                	fsubrp st(1),st
c0024f9a:	de e9                	fsubp  st(1),st
c0024f9c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024fa0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024fa4:	83 c4 24             	add    esp,0x24
c0024fa7:	c3                   	ret    
c0024fa8:	90                   	nop
c0024fa9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024fb0:	d9 ee                	fldz   
c0024fb2:	d9 c1                	fld    st(1)
c0024fb4:	dc 05 70 c1 02 c0    	fadd   QWORD PTR ds:0xc002c170
c0024fba:	d9 c9                	fxch   st(1)
c0024fbc:	df f1                	fcomip st,st(1)
c0024fbe:	dd d8                	fstp   st(0)
c0024fc0:	0f 87 8a 01 00 00    	ja     c0025150 <expm1+0x410>
c0024fc6:	d9 c0                	fld    st(0)
c0024fc8:	dc 0d 00 c0 02 c0    	fmul   QWORD PTR ds:0xc002c000
c0024fce:	d9 05 88 c0 02 c0    	fld    DWORD PTR ds:0xc002c088
c0024fd4:	e9 02 fe ff ff       	jmp    c0024ddb <expm1+0x9b>
c0024fd9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024fe0:	de e3                	fsubrp st(3),st
c0024fe2:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0024fe8:	de e2                	fsubrp st(2),st
c0024fea:	d9 c9                	fxch   st(1)
c0024fec:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ff0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ff4:	0f 84 96 01 00 00    	je     c0025190 <expm1+0x450>
c0024ffa:	de c9                	fmulp  st(1),st
c0024ffc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025000:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025004:	d9 e8                	fld1   
c0025006:	de e9                	fsubp  st(1),st
c0025008:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002500c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025010:	eb 92                	jmp    c0024fa4 <expm1+0x264>
c0025012:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025019:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025020:	dd d9                	fstp   st(1)
c0025022:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0025027:	0f 87 7a 01 00 00    	ja     c00251a7 <expm1+0x467>
c002502d:	85 d2                	test   edx,edx
c002502f:	0f 88 bb 00 00 00    	js     c00250f0 <expm1+0x3b0>
c0025035:	dc 25 78 c1 02 c0    	fsub   QWORD PTR ds:0xc002c178
c002503b:	b9 01 00 00 00       	mov    ecx,0x1
c0025040:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025044:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025048:	dd 05 60 c1 02 c0    	fld    QWORD PTR ds:0xc002c160
c002504e:	e9 d6 fd ff ff       	jmp    c0024e29 <expm1+0xe9>
c0025053:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025059:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025060:	dd d9                	fstp   st(1)
c0025062:	d9 c0                	fld    st(0)
c0025064:	dc 05 30 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf30
c002506a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c002506e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025072:	de e1                	fsubrp st(1),st
c0025074:	de e9                	fsubp  st(1),st
c0025076:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002507a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002507e:	83 c4 24             	add    esp,0x24
c0025081:	c3                   	ret    
c0025082:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025089:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025090:	dd db                	fstp   st(3)
c0025092:	d9 c9                	fxch   st(1)
c0025094:	d9 ca                	fxch   st(2)
c0025096:	dd 04 24             	fld    QWORD PTR [esp]
c0025099:	d9 05 48 c1 02 c0    	fld    DWORD PTR ds:0xc002c148
c002509f:	df f1                	fcomip st,st(1)
c00250a1:	dd d8                	fstp   st(0)
c00250a3:	0f 86 b7 00 00 00    	jbe    c0025160 <expm1+0x420>
c00250a9:	dd d9                	fstp   st(1)
c00250ab:	d9 ca                	fxch   st(2)
c00250ad:	de c1                	faddp  st(1),st
c00250af:	de e9                	fsubp  st(1),st
c00250b1:	d8 0d 4c c1 02 c0    	fmul   DWORD PTR ds:0xc002c14c
c00250b7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00250bb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00250bf:	e9 e0 fe ff ff       	jmp    c0024fa4 <expm1+0x264>
c00250c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00250ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00250d0:	dd db                	fstp   st(3)
c00250d2:	dd d8                	fstp   st(0)
c00250d4:	d9 c9                	fxch   st(1)
c00250d6:	de ea                	fsubp  st(2),st
c00250d8:	dc c9                	fmul   st(1),st
c00250da:	de e9                	fsubp  st(1),st
c00250dc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00250e0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00250e4:	e9 bb fe ff ff       	jmp    c0024fa4 <expm1+0x264>
c00250e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00250f0:	dc 05 78 c1 02 c0    	fadd   QWORD PTR ds:0xc002c178
c00250f6:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c00250fb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00250ff:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025103:	dd 05 58 c1 02 c0    	fld    QWORD PTR ds:0xc002c158
c0025109:	e9 1b fd ff ff       	jmp    c0024e29 <expm1+0xe9>
c002510e:	66 90                	xchg   ax,ax
c0025110:	b8 ff 03 00 00       	mov    eax,0x3ff
c0025115:	29 c8                	sub    eax,ecx
c0025117:	c1 e0 14             	shl    eax,0x14
c002511a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002511e:	dd 04 24             	fld    QWORD PTR [esp]
c0025121:	de c1                	faddp  st(1),st
c0025123:	de eb                	fsubp  st(3),st
c0025125:	d9 ca                	fxch   st(2)
c0025127:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002512b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002512f:	de c2                	faddp  st(2),st
c0025131:	d9 c9                	fxch   st(1)
c0025133:	e9 42 fe ff ff       	jmp    c0024f7a <expm1+0x23a>
c0025138:	90                   	nop
c0025139:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025140:	dd d8                	fstp   st(0)
c0025142:	85 d2                	test   edx,edx
c0025144:	78 0c                	js     c0025152 <expm1+0x412>
c0025146:	dd 04 24             	fld    QWORD PTR [esp]
c0025149:	e9 56 fe ff ff       	jmp    c0024fa4 <expm1+0x264>
c002514e:	66 90                	xchg   ax,ax
c0025150:	dd d8                	fstp   st(0)
c0025152:	d9 e8                	fld1   
c0025154:	d9 e0                	fchs   
c0025156:	e9 49 fe ff ff       	jmp    c0024fa4 <expm1+0x264>
c002515b:	90                   	nop
c002515c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025160:	dd da                	fstp   st(2)
c0025162:	d9 c9                	fxch   st(1)
c0025164:	de ea                	fsubp  st(2),st
c0025166:	d9 c9                	fxch   st(1)
c0025168:	d8 c0                	fadd   st,st(0)
c002516a:	de c1                	faddp  st(1),st
c002516c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025170:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025174:	e9 2b fe ff ff       	jmp    c0024fa4 <expm1+0x264>
c0025179:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025180:	d9 05 68 bf 02 c0    	fld    DWORD PTR ds:0xc002bf68
c0025186:	e9 19 fe ff ff       	jmp    c0024fa4 <expm1+0x264>
c002518b:	90                   	nop
c002518c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025190:	dd d9                	fstp   st(1)
c0025192:	d8 c0                	fadd   st,st(0)
c0025194:	dc 0d a8 c1 02 c0    	fmul   QWORD PTR ds:0xc002c1a8
c002519a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002519e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00251a2:	e9 5d fe ff ff       	jmp    c0025004 <expm1+0x2c4>
c00251a7:	d9 c0                	fld    st(0)
c00251a9:	85 d2                	test   edx,edx
c00251ab:	dc 0d 00 c0 02 c0    	fmul   QWORD PTR ds:0xc002c000
c00251b1:	0f 88 17 fe ff ff    	js     c0024fce <expm1+0x28e>
c00251b7:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c00251bd:	e9 19 fc ff ff       	jmp    c0024ddb <expm1+0x9b>
c00251c2:	66 90                	xchg   ax,ax
c00251c4:	66 90                	xchg   ax,ax
c00251c6:	66 90                	xchg   ax,ax
c00251c8:	66 90                	xchg   ax,ax
c00251ca:	66 90                	xchg   ax,ax
c00251cc:	66 90                	xchg   ax,ax
c00251ce:	66 90                	xchg   ax,ax

c00251d0 <fabs>:
c00251d0:	83 ec 0c             	sub    esp,0xc
c00251d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00251da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00251e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00251e7:	dd 04 24             	fld    QWORD PTR [esp]
c00251ea:	83 c4 0c             	add    esp,0xc
c00251ed:	c3                   	ret    
c00251ee:	66 90                	xchg   ax,ax

c00251f0 <frexp>:
c00251f0:	53                   	push   ebx
c00251f1:	83 ec 10             	sub    esp,0x10
c00251f4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00251f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00251fc:	dd 14 24             	fst    QWORD PTR [esp]
c00251ff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025203:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0025209:	89 d0                	mov    eax,edx
c002520b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025210:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0025215:	7f 59                	jg     c0025270 <frexp+0x80>
c0025217:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c002521a:	09 c3                	or     ebx,eax
c002521c:	74 62                	je     c0025280 <frexp+0x90>
c002521e:	31 db                	xor    ebx,ebx
c0025220:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c0025226:	75 28                	jne    c0025250 <frexp+0x60>
c0025228:	d9 05 b0 c1 02 c0    	fld    DWORD PTR ds:0xc002c1b0
c002522e:	bb ca ff ff ff       	mov    ebx,0xffffffca
c0025233:	de c9                	fmulp  st(1),st
c0025235:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025238:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002523c:	89 d0                	mov    eax,edx
c002523e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025243:	eb 0d                	jmp    c0025252 <frexp+0x62>
c0025245:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025249:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025250:	dd d8                	fstp   st(0)
c0025252:	c1 f8 14             	sar    eax,0x14
c0025255:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c002525b:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c0025262:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c0025268:	89 01                	mov    DWORD PTR [ecx],eax
c002526a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002526e:	eb 12                	jmp    c0025282 <frexp+0x92>
c0025270:	dd d8                	fstp   st(0)
c0025272:	eb 0e                	jmp    c0025282 <frexp+0x92>
c0025274:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002527a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025280:	dd d8                	fstp   st(0)
c0025282:	dd 04 24             	fld    QWORD PTR [esp]
c0025285:	83 c4 10             	add    esp,0x10
c0025288:	5b                   	pop    ebx
c0025289:	c3                   	ret    
c002528a:	66 90                	xchg   ax,ax
c002528c:	66 90                	xchg   ax,ax
c002528e:	66 90                	xchg   ax,ax

c0025290 <modf>:
c0025290:	53                   	push   ebx
c0025291:	83 ec 18             	sub    esp,0x18
c0025294:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025298:	dd 14 24             	fst    QWORD PTR [esp]
c002529b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002529f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00252a2:	89 d0                	mov    eax,edx
c00252a4:	c1 f8 14             	sar    eax,0x14
c00252a7:	25 ff 07 00 00       	and    eax,0x7ff
c00252ac:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c00252b2:	83 f9 13             	cmp    ecx,0x13
c00252b5:	7f 49                	jg     c0025300 <modf+0x70>
c00252b7:	85 c9                	test   ecx,ecx
c00252b9:	0f 88 f1 00 00 00    	js     c00253b0 <modf+0x120>
c00252bf:	dd d8                	fstp   st(0)
c00252c1:	b8 ff ff 0f 00       	mov    eax,0xfffff
c00252c6:	d3 f8                	sar    eax,cl
c00252c8:	89 d1                	mov    ecx,edx
c00252ca:	21 c1                	and    ecx,eax
c00252cc:	09 d9                	or     ecx,ebx
c00252ce:	0f 84 ac 00 00 00    	je     c0025380 <modf+0xf0>
c00252d4:	f7 d0                	not    eax
c00252d6:	21 d0                	and    eax,edx
c00252d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252dc:	31 c0                	xor    eax,eax
c00252de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00252e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00252e6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00252ea:	dd 10                	fst    QWORD PTR [eax]
c00252ec:	dd 04 24             	fld    QWORD PTR [esp]
c00252ef:	de e1                	fsubrp st(1),st
c00252f1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00252f5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00252f9:	83 c4 18             	add    esp,0x18
c00252fc:	5b                   	pop    ebx
c00252fd:	c3                   	ret    
c00252fe:	66 90                	xchg   ax,ax
c0025300:	dd d8                	fstp   st(0)
c0025302:	83 f9 33             	cmp    ecx,0x33
c0025305:	7e 39                	jle    c0025340 <modf+0xb0>
c0025307:	81 f9 00 04 00 00    	cmp    ecx,0x400
c002530d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025311:	0f 84 e9 00 00 00    	je     c0025400 <modf+0x170>
c0025317:	dd 04 24             	fld    QWORD PTR [esp]
c002531a:	81 e2 00 00 00 80    	and    edx,0x80000000
c0025320:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025327:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002532b:	dd 18                	fstp   QWORD PTR [eax]
c002532d:	dd 04 24             	fld    QWORD PTR [esp]
c0025330:	83 c4 18             	add    esp,0x18
c0025333:	5b                   	pop    ebx
c0025334:	c3                   	ret    
c0025335:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025339:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025340:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c0025346:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002534b:	d3 e8                	shr    eax,cl
c002534d:	85 d8                	test   eax,ebx
c002534f:	75 7f                	jne    c00253d0 <modf+0x140>
c0025351:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025355:	81 e2 00 00 00 80    	and    edx,0x80000000
c002535b:	dd 04 24             	fld    QWORD PTR [esp]
c002535e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025365:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025369:	dd 18                	fstp   QWORD PTR [eax]
c002536b:	dd 04 24             	fld    QWORD PTR [esp]
c002536e:	83 c4 18             	add    esp,0x18
c0025371:	5b                   	pop    ebx
c0025372:	c3                   	ret    
c0025373:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025379:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025380:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025384:	81 e2 00 00 00 80    	and    edx,0x80000000
c002538a:	dd 04 24             	fld    QWORD PTR [esp]
c002538d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025394:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025398:	dd 18                	fstp   QWORD PTR [eax]
c002539a:	dd 04 24             	fld    QWORD PTR [esp]
c002539d:	83 c4 18             	add    esp,0x18
c00253a0:	5b                   	pop    ebx
c00253a1:	c3                   	ret    
c00253a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00253a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00253b0:	81 e2 00 00 00 80    	and    edx,0x80000000
c00253b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00253ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00253be:	31 d2                	xor    edx,edx
c00253c0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00253c4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00253c8:	dd 18                	fstp   QWORD PTR [eax]
c00253ca:	83 c4 18             	add    esp,0x18
c00253cd:	5b                   	pop    ebx
c00253ce:	c3                   	ret    
c00253cf:	90                   	nop
c00253d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00253d4:	f7 d0                	not    eax
c00253d6:	21 d8                	and    eax,ebx
c00253d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00253dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00253e0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00253e4:	dd 10                	fst    QWORD PTR [eax]
c00253e6:	dd 04 24             	fld    QWORD PTR [esp]
c00253e9:	de e1                	fsubrp st(1),st
c00253eb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00253ef:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00253f3:	83 c4 18             	add    esp,0x18
c00253f6:	5b                   	pop    ebx
c00253f7:	c3                   	ret    
c00253f8:	90                   	nop
c00253f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025400:	dd 04 24             	fld    QWORD PTR [esp]
c0025403:	dd 10                	fst    QWORD PTR [eax]
c0025405:	d9 ee                	fldz   
c0025407:	de f1                	fdivrp st(1),st
c0025409:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002540d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025411:	e9 e3 fe ff ff       	jmp    c00252f9 <modf+0x69>
c0025416:	66 90                	xchg   ax,ax
c0025418:	66 90                	xchg   ax,ax
c002541a:	66 90                	xchg   ax,ax
c002541c:	66 90                	xchg   ax,ax
c002541e:	66 90                	xchg   ax,ax

c0025420 <round>:
c0025420:	83 ec 2c             	sub    esp,0x2c
c0025423:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025427:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002542b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002542f:	89 c2                	mov    edx,eax
c0025431:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025437:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c002543d:	0f 84 9d 00 00 00    	je     c00254e0 <round+0xc0>
c0025443:	dd d8                	fstp   st(0)
c0025445:	85 c0                	test   eax,eax
c0025447:	78 47                	js     c0025490 <round+0x70>
c0025449:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002544d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025450:	e8 ff 03 00 00       	call   c0025854 <floor>
c0025455:	d9 c0                	fld    st(0)
c0025457:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002545b:	d8 e9                	fsubr  st,st(1)
c002545d:	d9 05 88 c0 02 c0    	fld    DWORD PTR ds:0xc002c088
c0025463:	df f1                	fcomip st,st(1)
c0025465:	dd d8                	fstp   st(0)
c0025467:	72 17                	jb     c0025480 <round+0x60>
c0025469:	dd d9                	fstp   st(1)
c002546b:	d8 05 20 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf20
c0025471:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025475:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025479:	eb 07                	jmp    c0025482 <round+0x62>
c002547b:	90                   	nop
c002547c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025480:	dd d8                	fstp   st(0)
c0025482:	83 c4 2c             	add    esp,0x2c
c0025485:	c3                   	ret    
c0025486:	8d 76 00             	lea    esi,[esi+0x0]
c0025489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025490:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025494:	d9 e0                	fchs   
c0025496:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025499:	e8 b6 03 00 00       	call   c0025854 <floor>
c002549e:	d9 c0                	fld    st(0)
c00254a0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00254a4:	d8 c1                	fadd   st,st(1)
c00254a6:	d9 05 88 c0 02 c0    	fld    DWORD PTR ds:0xc002c088
c00254ac:	df f1                	fcomip st,st(1)
c00254ae:	dd d8                	fstp   st(0)
c00254b0:	72 1e                	jb     c00254d0 <round+0xb0>
c00254b2:	dd d9                	fstp   st(1)
c00254b4:	d8 05 20 bf 02 c0    	fadd   DWORD PTR ds:0xc002bf20
c00254ba:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00254be:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00254c2:	eb 0e                	jmp    c00254d2 <round+0xb2>
c00254c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00254ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00254d0:	dd d8                	fstp   st(0)
c00254d2:	d9 e0                	fchs   
c00254d4:	83 c4 2c             	add    esp,0x2c
c00254d7:	c3                   	ret    
c00254d8:	90                   	nop
c00254d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00254e0:	d9 c0                	fld    st(0)
c00254e2:	de c1                	faddp  st(1),st
c00254e4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00254e8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00254ec:	83 c4 2c             	add    esp,0x2c
c00254ef:	c3                   	ret    

c00254f0 <sin>:
c00254f0:	83 ec 5c             	sub    esp,0x5c
c00254f3:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00254f7:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00254fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00254ff:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025504:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0025509:	7f 65                	jg     c0025570 <sin+0x80>
c002550b:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c0025510:	7f 2e                	jg     c0025540 <sin+0x50>
c0025512:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0025516:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002551b:	66 0d 00 0c          	or     ax,0xc00
c002551f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0025524:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0025528:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c002552c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0025530:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025534:	85 c0                	test   eax,eax
c0025536:	75 18                	jne    c0025550 <sin+0x60>
c0025538:	83 c4 5c             	add    esp,0x5c
c002553b:	c3                   	ret    
c002553c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025540:	dd d8                	fstp   st(0)
c0025542:	eb 0e                	jmp    c0025552 <sin+0x62>
c0025544:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002554a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025550:	dd d8                	fstp   st(0)
c0025552:	d9 ee                	fldz   
c0025554:	31 c9                	xor    ecx,ecx
c0025556:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002555a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002555e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025562:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025565:	e8 06 13 00 00       	call   c0026870 <__kernel_sin>
c002556a:	83 c4 5c             	add    esp,0x5c
c002556d:	c3                   	ret    
c002556e:	66 90                	xchg   ax,ax
c0025570:	dd d8                	fstp   st(0)
c0025572:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0025577:	7e 17                	jle    c0025590 <sin+0xa0>
c0025579:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002557d:	d8 e0                	fsub   st,st(0)
c002557f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025583:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025587:	83 c4 5c             	add    esp,0x5c
c002558a:	c3                   	ret    
c002558b:	90                   	nop
c002558c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025590:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025594:	8d 44 24 40          	lea    eax,[esp+0x40]
c0025598:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002559c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002559f:	e8 1c 03 00 00       	call   c00258c0 <__ieee754_rem_pio2>
c00255a4:	83 e0 03             	and    eax,0x3
c00255a7:	83 f8 01             	cmp    eax,0x1
c00255aa:	0f 84 90 00 00 00    	je     c0025640 <sin+0x150>
c00255b0:	83 f8 02             	cmp    eax,0x2
c00255b3:	74 2b                	je     c00255e0 <sin+0xf0>
c00255b5:	85 c0                	test   eax,eax
c00255b7:	74 57                	je     c0025610 <sin+0x120>
c00255b9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255bd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00255c1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00255c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00255c8:	e8 23 08 00 00       	call   c0025df0 <__kernel_cos>
c00255cd:	d9 e0                	fchs   
c00255cf:	e9 64 ff ff ff       	jmp    c0025538 <sin+0x48>
c00255d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00255da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00255e0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255e4:	b8 01 00 00 00       	mov    eax,0x1
c00255e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00255ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00255f1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00255f5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00255f8:	e8 73 12 00 00       	call   c0026870 <__kernel_sin>
c00255fd:	d9 e0                	fchs   
c00255ff:	e9 34 ff ff ff       	jmp    c0025538 <sin+0x48>
c0025604:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002560a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025610:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025614:	ba 01 00 00 00       	mov    edx,0x1
c0025619:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002561d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0025621:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0025625:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025628:	e8 43 12 00 00       	call   c0026870 <__kernel_sin>
c002562d:	e9 06 ff ff ff       	jmp    c0025538 <sin+0x48>
c0025632:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025639:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025640:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025644:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0025648:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002564c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002564f:	e8 9c 07 00 00       	call   c0025df0 <__kernel_cos>
c0025654:	e9 df fe ff ff       	jmp    c0025538 <sin+0x48>
c0025659:	66 90                	xchg   ax,ax
c002565b:	66 90                	xchg   ax,ax
c002565d:	66 90                	xchg   ax,ax
c002565f:	90                   	nop

c0025660 <tanh>:
c0025660:	53                   	push   ebx
c0025661:	83 ec 28             	sub    esp,0x28
c0025664:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025668:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002566c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025670:	89 d8                	mov    eax,ebx
c0025672:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025677:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c002567c:	7e 32                	jle    c00256b0 <tanh+0x50>
c002567e:	d9 e8                	fld1   
c0025680:	85 db                	test   ebx,ebx
c0025682:	dc f1                	fdivr  st(1),st
c0025684:	78 1a                	js     c00256a0 <tanh+0x40>
c0025686:	de c1                	faddp  st(1),st
c0025688:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002568c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025690:	83 c4 28             	add    esp,0x28
c0025693:	5b                   	pop    ebx
c0025694:	c3                   	ret    
c0025695:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025699:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00256a0:	de e9                	fsubp  st(1),st
c00256a2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00256a6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00256aa:	83 c4 28             	add    esp,0x28
c00256ad:	5b                   	pop    ebx
c00256ae:	c3                   	ret    
c00256af:	90                   	nop
c00256b0:	dd d8                	fstp   st(0)
c00256b2:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c00256b7:	7f 57                	jg     c0025710 <tanh+0xb0>
c00256b9:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c00256be:	7f 70                	jg     c0025730 <tanh+0xd0>
c00256c0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00256c4:	d9 e8                	fld1   
c00256c6:	d9 c1                	fld    st(1)
c00256c8:	dc 05 30 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf30
c00256ce:	df f1                	fcomip st,st(1)
c00256d0:	dd d8                	fstp   st(0)
c00256d2:	77 bc                	ja     c0025690 <tanh+0x30>
c00256d4:	dd d8                	fstp   st(0)
c00256d6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00256da:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256dd:	e8 ee fa ff ff       	call   c00251d0 <fabs>
c00256e2:	d9 05 4c c1 02 c0    	fld    DWORD PTR ds:0xc002c14c
c00256e8:	de c9                	fmulp  st(1),st
c00256ea:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256ed:	e8 4e f6 ff ff       	call   c0024d40 <expm1>
c00256f2:	d9 c0                	fld    st(0)
c00256f4:	d9 e0                	fchs   
c00256f6:	d9 05 90 bf 02 c0    	fld    DWORD PTR ds:0xc002bf90
c00256fc:	de c2                	faddp  st(2),st
c00256fe:	de f1                	fdivrp st(1),st
c0025700:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025704:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025708:	eb 08                	jmp    c0025712 <tanh+0xb2>
c002570a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025710:	d9 e8                	fld1   
c0025712:	85 db                	test   ebx,ebx
c0025714:	0f 89 76 ff ff ff    	jns    c0025690 <tanh+0x30>
c002571a:	d9 e0                	fchs   
c002571c:	83 c4 28             	add    esp,0x28
c002571f:	5b                   	pop    ebx
c0025720:	c3                   	ret    
c0025721:	eb 0d                	jmp    c0025730 <tanh+0xd0>
c0025723:	90                   	nop
c0025724:	90                   	nop
c0025725:	90                   	nop
c0025726:	90                   	nop
c0025727:	90                   	nop
c0025728:	90                   	nop
c0025729:	90                   	nop
c002572a:	90                   	nop
c002572b:	90                   	nop
c002572c:	90                   	nop
c002572d:	90                   	nop
c002572e:	90                   	nop
c002572f:	90                   	nop
c0025730:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0025735:	7e 9f                	jle    c00256d6 <tanh+0x76>
c0025737:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002573b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002573e:	e8 8d fa ff ff       	call   c00251d0 <fabs>
c0025743:	d8 c0                	fadd   st,st(0)
c0025745:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025748:	e8 f3 f5 ff ff       	call   c0024d40 <expm1>
c002574d:	d9 05 90 bf 02 c0    	fld    DWORD PTR ds:0xc002bf90
c0025753:	dc c1                	fadd   st(1),st
c0025755:	de f1                	fdivrp st(1),st
c0025757:	d8 2d 20 bf 02 c0    	fsubr  DWORD PTR ds:0xc002bf20
c002575d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025761:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025765:	eb ab                	jmp    c0025712 <tanh+0xb2>
c0025767:	66 90                	xchg   ax,ax
c0025769:	66 90                	xchg   ax,ax
c002576b:	66 90                	xchg   ax,ax
c002576d:	66 90                	xchg   ax,ax
c002576f:	90                   	nop

c0025770 <cimag>:
c0025770:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0025774:	c3                   	ret    
c0025775:	66 90                	xchg   ax,ax
c0025777:	66 90                	xchg   ax,ax
c0025779:	66 90                	xchg   ax,ax
c002577b:	66 90                	xchg   ax,ax
c002577d:	66 90                	xchg   ax,ax
c002577f:	90                   	nop

c0025780 <creal>:
c0025780:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025784:	c3                   	ret    
c0025785:	66 90                	xchg   ax,ax
c0025787:	90                   	nop

c0025788 <exp>:
c0025788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002578c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025791:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0025796:	73 42                	jae    c00257da <x_Inf_or_NaN>
c0025798:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002579c:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c00257a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257a5:	25 00 03 00 00       	and    eax,0x300
c00257aa:	3d 00 03 00 00       	cmp    eax,0x300
c00257af:	74 0c                	je     c00257bd <exp+0x35>
c00257b1:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c00257b9:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c00257bd:	d9 ea                	fldl2e 
c00257bf:	de c9                	fmulp  st(1),st
c00257c1:	dd d1                	fst    st(1)
c00257c3:	d9 fc                	frndint 
c00257c5:	dd d2                	fst    st(2)
c00257c7:	de e9                	fsubp  st(1),st
c00257c9:	d9 f0                	f2xm1  
c00257cb:	d9 e8                	fld1   
c00257cd:	de c1                	faddp  st(1),st
c00257cf:	d9 fd                	fscale 
c00257d1:	dd d9                	fstp   st(1)
c00257d3:	74 04                	je     c00257d9 <exp+0x51>
c00257d5:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c00257d9:	c3                   	ret    

c00257da <x_Inf_or_NaN>:
c00257da:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c00257e2:	75 0a                	jne    c00257ee <x_not_minus_Inf>
c00257e4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00257e9:	75 03                	jne    c00257ee <x_not_minus_Inf>
c00257eb:	d9 ee                	fldz   
c00257ed:	c3                   	ret    

c00257ee <x_not_minus_Inf>:
c00257ee:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00257f2:	c3                   	ret    
c00257f3:	90                   	nop

c00257f4 <fmod>:
c00257f4:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c00257f8:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00257fc:	d9 f8                	fprem  
c00257fe:	9b df e0             	fstsw  ax
c0025801:	9e                   	sahf   
c0025802:	7a f8                	jp     c00257fc <fmod+0x8>
c0025804:	dd d9                	fstp   st(1)
c0025806:	c3                   	ret    
c0025807:	90                   	nop

c0025808 <log>:
c0025808:	d9 ed                	fldln2 
c002580a:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002580e:	d9 f1                	fyl2x  
c0025810:	c3                   	ret    
c0025811:	66 90                	xchg   ax,ax
c0025813:	90                   	nop

c0025814 <log10>:
c0025814:	d9 ec                	fldlg2 
c0025816:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002581a:	d9 f1                	fyl2x  
c002581c:	c3                   	ret    
c002581d:	66 90                	xchg   ax,ax
c002581f:	90                   	nop

c0025820 <sqrt>:
c0025820:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025824:	d9 fa                	fsqrt  
c0025826:	c3                   	ret    
c0025827:	90                   	nop

c0025828 <ceil>:
c0025828:	55                   	push   ebp
c0025829:	89 e5                	mov    ebp,esp
c002582b:	83 ec 08             	sub    esp,0x8
c002582e:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0025832:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0025836:	66 81 ca 00 08       	or     dx,0x800
c002583b:	66 81 e2 ff fb       	and    dx,0xfbff
c0025840:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0025844:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0025847:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c002584a:	d9 fc                	frndint 
c002584c:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002584f:	c9                   	leave  
c0025850:	c3                   	ret    
c0025851:	66 90                	xchg   ax,ax
c0025853:	90                   	nop

c0025854 <floor>:
c0025854:	55                   	push   ebp
c0025855:	89 e5                	mov    ebp,esp
c0025857:	83 ec 08             	sub    esp,0x8
c002585a:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c002585e:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0025862:	66 81 ca 00 04       	or     dx,0x400
c0025867:	66 81 e2 ff f7       	and    dx,0xf7ff
c002586c:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0025870:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0025873:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0025876:	d9 fc                	frndint 
c0025878:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002587b:	c9                   	leave  
c002587c:	c3                   	ret    
c002587d:	66 90                	xchg   ax,ax
c002587f:	90                   	nop

c0025880 <tan>:
c0025880:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025884:	d9 f2                	fptan  
c0025886:	df e0                	fnstsw ax
c0025888:	66 25 00 04          	and    ax,0x400
c002588c:	75 03                	jne    c0025891 <tan+0x11>
c002588e:	dd d8                	fstp   st(0)
c0025890:	c3                   	ret    
c0025891:	d9 eb                	fldpi  
c0025893:	d8 c0                	fadd   st,st(0)
c0025895:	d9 c9                	fxch   st(1)
c0025897:	d9 f5                	fprem1 
c0025899:	9b df e0             	fstsw  ax
c002589c:	66 25 00 04          	and    ax,0x400
c00258a0:	75 f5                	jne    c0025897 <tan+0x17>
c00258a2:	dd d9                	fstp   st(1)
c00258a4:	d9 f2                	fptan  
c00258a6:	dd d8                	fstp   st(0)
c00258a8:	c3                   	ret    
c00258a9:	66 90                	xchg   ax,ax
c00258ab:	90                   	nop

c00258ac <ldexp>:
c00258ac:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c00258b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00258b4:	d9 fd                	fscale 
c00258b6:	dd d9                	fstp   st(1)
c00258b8:	c3                   	ret    
c00258b9:	66 90                	xchg   ax,ax
c00258bb:	66 90                	xchg   ax,ax
c00258bd:	66 90                	xchg   ax,ax
c00258bf:	90                   	nop

c00258c0 <__ieee754_rem_pio2>:
c00258c0:	56                   	push   esi
c00258c1:	53                   	push   ebx
c00258c2:	83 ec 74             	sub    esp,0x74
c00258c5:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c00258cc:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c00258d3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00258d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00258db:	89 f2                	mov    edx,esi
c00258dd:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00258e3:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c00258e9:	7f 65                	jg     c0025950 <__ieee754_rem_pio2+0x90>
c00258eb:	89 f0                	mov    eax,esi
c00258ed:	25 ff ff 0f 00       	and    eax,0xfffff
c00258f2:	3d fb 21 09 00       	cmp    eax,0x921fb
c00258f7:	0f 84 57 02 00 00    	je     c0025b54 <__ieee754_rem_pio2+0x294>
c00258fd:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0025903:	0f 8f b7 01 00 00    	jg     c0025ac0 <__ieee754_rem_pio2+0x200>
c0025909:	85 f6                	test   esi,esi
c002590b:	0f 8e 3a 04 00 00    	jle    c0025d4b <__ieee754_rem_pio2+0x48b>
c0025911:	dc 25 b8 c1 02 c0    	fsub   QWORD PTR ds:0xc002c1b8
c0025917:	b8 01 00 00 00       	mov    eax,0x1
c002591c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025920:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025924:	dd 05 c0 c1 02 c0    	fld    QWORD PTR ds:0xc002c1c0
c002592a:	d9 c1                	fld    st(1)
c002592c:	d8 e1                	fsub   st,st(1)
c002592e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025932:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025936:	dd 13                	fst    QWORD PTR [ebx]
c0025938:	de ea                	fsubp  st(2),st
c002593a:	de e9                	fsubp  st(1),st
c002593c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002593f:	83 c4 74             	add    esp,0x74
c0025942:	5b                   	pop    ebx
c0025943:	5e                   	pop    esi
c0025944:	c3                   	ret    
c0025945:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025950:	dd d8                	fstp   st(0)
c0025952:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0025958:	7f 66                	jg     c00259c0 <__ieee754_rem_pio2+0x100>
c002595a:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c0025960:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025964:	0f 8f 96 01 00 00    	jg     c0025b00 <__ieee754_rem_pio2+0x240>
c002596a:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0025970:	0f 84 de 01 00 00    	je     c0025b54 <__ieee754_rem_pio2+0x294>
c0025976:	85 f6                	test   esi,esi
c0025978:	0f 8e 00 04 00 00    	jle    c0025d7e <__ieee754_rem_pio2+0x4be>
c002597e:	dc 25 d8 c1 02 c0    	fsub   QWORD PTR ds:0xc002c1d8
c0025984:	b8 03 00 00 00       	mov    eax,0x3
c0025989:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002598d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025991:	db 2d 20 c2 02 c0    	fld    TBYTE PTR ds:0xc002c220
c0025997:	d9 c1                	fld    st(1)
c0025999:	d8 e1                	fsub   st,st(1)
c002599b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002599f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00259a3:	dd 13                	fst    QWORD PTR [ebx]
c00259a5:	de ea                	fsubp  st(2),st
c00259a7:	de e9                	fsubp  st(1),st
c00259a9:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00259ac:	83 c4 74             	add    esp,0x74
c00259af:	5b                   	pop    ebx
c00259b0:	5e                   	pop    esi
c00259b1:	c3                   	ret    
c00259b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00259b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00259c0:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c00259c6:	0f 8e 84 01 00 00    	jle    c0025b50 <__ieee754_rem_pio2+0x290>
c00259cc:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c00259d2:	0f 8f d8 02 00 00    	jg     c0025cb0 <__ieee754_rem_pio2+0x3f0>
c00259d8:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00259dc:	89 d1                	mov    ecx,edx
c00259de:	c1 f9 14             	sar    ecx,0x14
c00259e1:	81 e9 16 04 00 00    	sub    ecx,0x416
c00259e7:	89 c8                	mov    eax,ecx
c00259e9:	c1 e0 14             	shl    eax,0x14
c00259ec:	29 c2                	sub    edx,eax
c00259ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00259f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00259fa:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00259ff:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025a03:	66 0d 00 0c          	or     ax,0xc00
c0025a07:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0025a0c:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0025a10:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0025a14:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0025a18:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0025a1c:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0025a20:	de e9                	fsubp  st(1),st
c0025a22:	d9 05 34 c2 02 c0    	fld    DWORD PTR ds:0xc002c234
c0025a28:	dc c9                	fmul   st(1),st
c0025a2a:	d9 c9                	fxch   st(1)
c0025a2c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025a30:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025a34:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0025a38:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0025a3c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0025a40:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0025a44:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c0025a48:	de e9                	fsubp  st(1),st
c0025a4a:	de c9                	fmulp  st(1),st
c0025a4c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025a50:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025a54:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c0025a58:	d9 ee                	fldz   
c0025a5a:	d9 c9                	fxch   st(1)
c0025a5c:	df e9                	fucomip st,st(1)
c0025a5e:	dd d8                	fstp   st(0)
c0025a60:	0f 8a 8a 02 00 00    	jp     c0025cf0 <__ieee754_rem_pio2+0x430>
c0025a66:	0f 85 84 02 00 00    	jne    c0025cf0 <__ieee754_rem_pio2+0x430>
c0025a6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025a70:	31 c0                	xor    eax,eax
c0025a72:	85 d2                	test   edx,edx
c0025a74:	0f 95 c0             	setne  al
c0025a77:	40                   	inc    eax
c0025a78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025a7c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0025a80:	ba 01 00 00 00       	mov    edx,0x1
c0025a85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025a89:	8d 44 24 58          	lea    eax,[esp+0x58]
c0025a8d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025a91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025a95:	89 04 24             	mov    DWORD PTR [esp],eax
c0025a98:	e8 f3 03 00 00       	call   c0025e90 <__kernel_rem_pio2>
c0025a9d:	85 f6                	test   esi,esi
c0025a9f:	0f 88 5b 02 00 00    	js     c0025d00 <__ieee754_rem_pio2+0x440>
c0025aa5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025aa9:	dd 1b                	fstp   QWORD PTR [ebx]
c0025aab:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025aaf:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025ab2:	e9 88 fe ff ff       	jmp    c002593f <__ieee754_rem_pio2+0x7f>
c0025ab7:	89 f6                	mov    esi,esi
c0025ab9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025ac0:	85 f6                	test   esi,esi
c0025ac2:	0f 8e 50 02 00 00    	jle    c0025d18 <__ieee754_rem_pio2+0x458>
c0025ac8:	dc 25 c8 c1 02 c0    	fsub   QWORD PTR ds:0xc002c1c8
c0025ace:	b8 02 00 00 00       	mov    eax,0x2
c0025ad3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025ad7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025adb:	dd 05 d0 c1 02 c0    	fld    QWORD PTR ds:0xc002c1d0
c0025ae1:	d9 c1                	fld    st(1)
c0025ae3:	d8 e1                	fsub   st,st(1)
c0025ae5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025ae9:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025aed:	dd 13                	fst    QWORD PTR [ebx]
c0025aef:	de ea                	fsubp  st(2),st
c0025af1:	de e9                	fsubp  st(1),st
c0025af3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025af6:	83 c4 74             	add    esp,0x74
c0025af9:	5b                   	pop    ebx
c0025afa:	5e                   	pop    esi
c0025afb:	c3                   	ret    
c0025afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025b00:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0025b06:	74 4c                	je     c0025b54 <__ieee754_rem_pio2+0x294>
c0025b08:	85 f6                	test   esi,esi
c0025b0a:	0f 8e a1 02 00 00    	jle    c0025db1 <__ieee754_rem_pio2+0x4f1>
c0025b10:	dc 25 e0 c1 02 c0    	fsub   QWORD PTR ds:0xc002c1e0
c0025b16:	b8 04 00 00 00       	mov    eax,0x4
c0025b1b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025b1f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025b23:	dd 05 e8 c1 02 c0    	fld    QWORD PTR ds:0xc002c1e8
c0025b29:	d9 c1                	fld    st(1)
c0025b2b:	d8 e1                	fsub   st,st(1)
c0025b2d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025b31:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025b35:	dd 13                	fst    QWORD PTR [ebx]
c0025b37:	de ea                	fsubp  st(2),st
c0025b39:	de e9                	fsubp  st(1),st
c0025b3b:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025b3e:	83 c4 74             	add    esp,0x74
c0025b41:	5b                   	pop    ebx
c0025b42:	5e                   	pop    esi
c0025b43:	c3                   	ret    
c0025b44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025b4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025b50:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025b54:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0025b58:	d9 c0                	fld    st(0)
c0025b5a:	dc 0d f0 c1 02 c0    	fmul   QWORD PTR ds:0xc002c1f0
c0025b60:	c1 fa 14             	sar    edx,0x14
c0025b63:	89 d6                	mov    esi,edx
c0025b65:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0025b6a:	d9 05 30 c2 02 c0    	fld    DWORD PTR ds:0xc002c230
c0025b70:	dc c1                	fadd   st(1),st
c0025b72:	d9 c9                	fxch   st(1)
c0025b74:	66 0d 00 0c          	or     ax,0xc00
c0025b78:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0025b7d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025b81:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025b85:	de e1                	fsubrp st(1),st
c0025b87:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025b8b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025b8f:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0025b93:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0025b97:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0025b9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025b9f:	d9 c0                	fld    st(0)
c0025ba1:	dc 0d b8 c1 02 c0    	fmul   QWORD PTR ds:0xc002c1b8
c0025ba7:	de ea                	fsubp  st(2),st
c0025ba9:	d9 c9                	fxch   st(1)
c0025bab:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025baf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025bb3:	d9 c1                	fld    st(1)
c0025bb5:	dc 0d c0 c1 02 c0    	fmul   QWORD PTR ds:0xc002c1c0
c0025bbb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025bbf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025bc3:	d9 c1                	fld    st(1)
c0025bc5:	d8 e1                	fsub   st,st(1)
c0025bc7:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025bcb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025bcf:	c1 e9 14             	shr    ecx,0x14
c0025bd2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025bd8:	29 ce                	sub    esi,ecx
c0025bda:	83 fe 10             	cmp    esi,0x10
c0025bdd:	7f 21                	jg     c0025c00 <__ieee754_rem_pio2+0x340>
c0025bdf:	dd da                	fstp   st(2)
c0025be1:	d9 c9                	fxch   st(1)
c0025be3:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025be7:	dd 1b                	fstp   QWORD PTR [ebx]
c0025be9:	d9 c9                	fxch   st(1)
c0025beb:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c0025bef:	de e1                	fsubrp st(1),st
c0025bf1:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025bf4:	83 c4 74             	add    esp,0x74
c0025bf7:	5b                   	pop    ebx
c0025bf8:	5e                   	pop    esi
c0025bf9:	c3                   	ret    
c0025bfa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025c00:	dd d8                	fstp   st(0)
c0025c02:	d9 c1                	fld    st(1)
c0025c04:	dc 0d f8 c1 02 c0    	fmul   QWORD PTR ds:0xc002c1f8
c0025c0a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c0e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c12:	d9 c1                	fld    st(1)
c0025c14:	d8 e1                	fsub   st,st(1)
c0025c16:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c1a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c1e:	d9 c0                	fld    st(0)
c0025c20:	dc eb                	fsub   st(3),st
c0025c22:	d9 cb                	fxch   st(3)
c0025c24:	de e2                	fsubrp st(2),st
c0025c26:	d9 c3                	fld    st(3)
c0025c28:	dc 0d 00 c2 02 c0    	fmul   QWORD PTR ds:0xc002c200
c0025c2e:	de e2                	fsubrp st(2),st
c0025c30:	d9 c9                	fxch   st(1)
c0025c32:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c36:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c3a:	d9 c2                	fld    st(2)
c0025c3c:	d8 e1                	fsub   st,st(1)
c0025c3e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025c42:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025c46:	c1 e9 14             	shr    ecx,0x14
c0025c49:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025c4f:	29 ca                	sub    edx,ecx
c0025c51:	83 fa 31             	cmp    edx,0x31
c0025c54:	7e 7a                	jle    c0025cd0 <__ieee754_rem_pio2+0x410>
c0025c56:	dd d8                	fstp   st(0)
c0025c58:	dd d8                	fstp   st(0)
c0025c5a:	d9 c1                	fld    st(1)
c0025c5c:	dc 0d 08 c2 02 c0    	fmul   QWORD PTR ds:0xc002c208
c0025c62:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c66:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c6a:	d9 c1                	fld    st(1)
c0025c6c:	d8 e1                	fsub   st,st(1)
c0025c6e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c72:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c76:	d9 cb                	fxch   st(3)
c0025c78:	dc 0d 10 c2 02 c0    	fmul   QWORD PTR ds:0xc002c210
c0025c7e:	d9 ca                	fxch   st(2)
c0025c80:	d8 e3                	fsub   st,st(3)
c0025c82:	de e1                	fsubrp st(1),st
c0025c84:	de e9                	fsubp  st(1),st
c0025c86:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c8a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c8e:	d9 c1                	fld    st(1)
c0025c90:	d8 e1                	fsub   st,st(1)
c0025c92:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025c96:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025c9a:	dd 1b                	fstp   QWORD PTR [ebx]
c0025c9c:	d9 c9                	fxch   st(1)
c0025c9e:	e9 48 ff ff ff       	jmp    c0025beb <__ieee754_rem_pio2+0x32b>
c0025ca3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025ca9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025cb0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025cb4:	31 c0                	xor    eax,eax
c0025cb6:	d8 e0                	fsub   st,st(0)
c0025cb8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025cbc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025cc0:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0025cc3:	dd 1b                	fstp   QWORD PTR [ebx]
c0025cc5:	e9 75 fc ff ff       	jmp    c002593f <__ieee754_rem_pio2+0x7f>
c0025cca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025cd0:	dd da                	fstp   st(2)
c0025cd2:	dd da                	fstp   st(2)
c0025cd4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025cd8:	dd 1b                	fstp   QWORD PTR [ebx]
c0025cda:	d9 c9                	fxch   st(1)
c0025cdc:	e9 0a ff ff ff       	jmp    c0025beb <__ieee754_rem_pio2+0x32b>
c0025ce1:	eb 0d                	jmp    c0025cf0 <__ieee754_rem_pio2+0x430>
c0025ce3:	90                   	nop
c0025ce4:	90                   	nop
c0025ce5:	90                   	nop
c0025ce6:	90                   	nop
c0025ce7:	90                   	nop
c0025ce8:	90                   	nop
c0025ce9:	90                   	nop
c0025cea:	90                   	nop
c0025ceb:	90                   	nop
c0025cec:	90                   	nop
c0025ced:	90                   	nop
c0025cee:	90                   	nop
c0025cef:	90                   	nop
c0025cf0:	b8 03 00 00 00       	mov    eax,0x3
c0025cf5:	e9 7e fd ff ff       	jmp    c0025a78 <__ieee754_rem_pio2+0x1b8>
c0025cfa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025d00:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025d04:	f7 d8                	neg    eax
c0025d06:	d9 e0                	fchs   
c0025d08:	dd 1b                	fstp   QWORD PTR [ebx]
c0025d0a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025d0e:	d9 e0                	fchs   
c0025d10:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025d13:	e9 27 fc ff ff       	jmp    c002593f <__ieee754_rem_pio2+0x7f>
c0025d18:	dc 05 c8 c1 02 c0    	fadd   QWORD PTR ds:0xc002c1c8
c0025d1e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025d23:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025d27:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025d2b:	dd 05 d0 c1 02 c0    	fld    QWORD PTR ds:0xc002c1d0
c0025d31:	d9 c1                	fld    st(1)
c0025d33:	d8 c1                	fadd   st,st(1)
c0025d35:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025d39:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025d3d:	dd 13                	fst    QWORD PTR [ebx]
c0025d3f:	de ea                	fsubp  st(2),st
c0025d41:	de c1                	faddp  st(1),st
c0025d43:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025d46:	e9 f4 fb ff ff       	jmp    c002593f <__ieee754_rem_pio2+0x7f>
c0025d4b:	dc 05 b8 c1 02 c0    	fadd   QWORD PTR ds:0xc002c1b8
c0025d51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025d56:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025d5a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025d5e:	dd 05 c0 c1 02 c0    	fld    QWORD PTR ds:0xc002c1c0
c0025d64:	d9 c1                	fld    st(1)
c0025d66:	d8 c1                	fadd   st,st(1)
c0025d68:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025d6c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025d70:	dd 13                	fst    QWORD PTR [ebx]
c0025d72:	de ea                	fsubp  st(2),st
c0025d74:	de c1                	faddp  st(1),st
c0025d76:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025d79:	e9 c1 fb ff ff       	jmp    c002593f <__ieee754_rem_pio2+0x7f>
c0025d7e:	dc 05 d8 c1 02 c0    	fadd   QWORD PTR ds:0xc002c1d8
c0025d84:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0025d89:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025d8d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025d91:	db 2d 20 c2 02 c0    	fld    TBYTE PTR ds:0xc002c220
c0025d97:	d9 c1                	fld    st(1)
c0025d99:	d8 c1                	fadd   st,st(1)
c0025d9b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025d9f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025da3:	dd 13                	fst    QWORD PTR [ebx]
c0025da5:	de ea                	fsubp  st(2),st
c0025da7:	de c1                	faddp  st(1),st
c0025da9:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025dac:	e9 8e fb ff ff       	jmp    c002593f <__ieee754_rem_pio2+0x7f>
c0025db1:	dc 05 e0 c1 02 c0    	fadd   QWORD PTR ds:0xc002c1e0
c0025db7:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c0025dbc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025dc0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025dc4:	dd 05 e8 c1 02 c0    	fld    QWORD PTR ds:0xc002c1e8
c0025dca:	d9 c1                	fld    st(1)
c0025dcc:	d8 c1                	fadd   st,st(1)
c0025dce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025dd2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025dd6:	dd 13                	fst    QWORD PTR [ebx]
c0025dd8:	de ea                	fsubp  st(2),st
c0025dda:	de c1                	faddp  st(1),st
c0025ddc:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025ddf:	e9 5b fb ff ff       	jmp    c002593f <__ieee754_rem_pio2+0x7f>
c0025de4:	66 90                	xchg   ax,ax
c0025de6:	66 90                	xchg   ax,ax
c0025de8:	66 90                	xchg   ax,ax
c0025dea:	66 90                	xchg   ax,ax
c0025dec:	66 90                	xchg   ax,ax
c0025dee:	66 90                	xchg   ax,ax

c0025df0 <__kernel_cos>:
c0025df0:	83 ec 0c             	sub    esp,0xc
c0025df3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025df7:	d9 c0                	fld    st(0)
c0025df9:	d8 c9                	fmul   st,st(1)
c0025dfb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025dfe:	dd 04 24             	fld    QWORD PTR [esp]
c0025e01:	d9 c0                	fld    st(0)
c0025e03:	d8 c9                	fmul   st,st(1)
c0025e05:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e08:	dd 04 24             	fld    QWORD PTR [esp]
c0025e0b:	d9 c1                	fld    st(1)
c0025e0d:	d8 0d 24 bf 02 c0    	fmul   DWORD PTR ds:0xc002bf24
c0025e13:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e16:	dd 04 24             	fld    QWORD PTR [esp]
c0025e19:	d9 e8                	fld1   
c0025e1b:	d9 c0                	fld    st(0)
c0025e1d:	d8 e2                	fsub   st,st(2)
c0025e1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e22:	dd 04 24             	fld    QWORD PTR [esp]
c0025e25:	d9 c4                	fld    st(4)
c0025e27:	dc 0d 38 c2 02 c0    	fmul   QWORD PTR ds:0xc002c238
c0025e2d:	dc 05 40 c2 02 c0    	fadd   QWORD PTR ds:0xc002c240
c0025e33:	d8 cd                	fmul   st,st(5)
c0025e35:	dc 25 48 c2 02 c0    	fsub   QWORD PTR ds:0xc002c248
c0025e3b:	d9 cc                	fxch   st(4)
c0025e3d:	d8 c8                	fmul   st,st(0)
c0025e3f:	de cc                	fmulp  st(4),st
c0025e41:	d9 c4                	fld    st(4)
c0025e43:	dc 0d 50 c2 02 c0    	fmul   QWORD PTR ds:0xc002c250
c0025e49:	dc 25 58 c2 02 c0    	fsub   QWORD PTR ds:0xc002c258
c0025e4f:	d8 cd                	fmul   st,st(5)
c0025e51:	dc 05 60 c2 02 c0    	fadd   QWORD PTR ds:0xc002c260
c0025e57:	d8 cd                	fmul   st,st(5)
c0025e59:	de c4                	faddp  st(4),st
c0025e5b:	d9 cb                	fxch   st(3)
c0025e5d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e60:	dd 04 24             	fld    QWORD PTR [esp]
c0025e63:	de cc                	fmulp  st(4),st
c0025e65:	d9 cc                	fxch   st(4)
c0025e67:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c0025e6b:	de eb                	fsubp  st(3),st
c0025e6d:	d9 cb                	fxch   st(3)
c0025e6f:	d8 e1                	fsub   st,st(1)
c0025e71:	de e3                	fsubrp st(3),st
c0025e73:	d9 c9                	fxch   st(1)
c0025e75:	de c2                	faddp  st(2),st
c0025e77:	de c1                	faddp  st(1),st
c0025e79:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e7c:	dd 04 24             	fld    QWORD PTR [esp]
c0025e7f:	83 c4 0c             	add    esp,0xc
c0025e82:	c3                   	ret    
c0025e83:	66 90                	xchg   ax,ax
c0025e85:	66 90                	xchg   ax,ax
c0025e87:	66 90                	xchg   ax,ax
c0025e89:	66 90                	xchg   ax,ax
c0025e8b:	66 90                	xchg   ax,ax
c0025e8d:	66 90                	xchg   ax,ax
c0025e8f:	90                   	nop

c0025e90 <__kernel_rem_pio2>:
c0025e90:	55                   	push   ebp
c0025e91:	57                   	push   edi
c0025e92:	56                   	push   esi
c0025e93:	53                   	push   ebx
c0025e94:	81 ec 8c 02 00 00    	sub    esp,0x28c
c0025e9a:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025ea1:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0025ea8:	8b 04 85 48 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd32b8]
c0025eaf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0025eb3:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025eba:	48                   	dec    eax
c0025ebb:	83 fb ec             	cmp    ebx,0xffffffec
c0025ebe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ec2:	0f 8c 44 08 00 00    	jl     c002670c <__kernel_rem_pio2+0x87c>
c0025ec8:	8d 4b fd             	lea    ecx,[ebx-0x3]
c0025ecb:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0025ed0:	89 c8                	mov    eax,ecx
c0025ed2:	f7 ea                	imul   edx
c0025ed4:	c1 f9 1f             	sar    ecx,0x1f
c0025ed7:	c1 fa 02             	sar    edx,0x2
c0025eda:	29 ca                	sub    edx,ecx
c0025edc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025ee0:	8d 42 01             	lea    eax,[edx+0x1]
c0025ee3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0025eea:	29 d0                	sub    eax,edx
c0025eec:	c1 e0 03             	shl    eax,0x3
c0025eef:	01 d8                	add    eax,ebx
c0025ef1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025ef5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025ef9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0025efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f01:	29 c2                	sub    edx,eax
c0025f03:	01 c6                	add    esi,eax
c0025f05:	78 58                	js     c0025f5f <__kernel_rem_pio2+0xcf>
c0025f07:	85 d2                	test   edx,edx
c0025f09:	0f 89 f4 04 00 00    	jns    c0026403 <__kernel_rem_pio2+0x573>
c0025f0f:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0025f13:	b8 00 00 00 00       	mov    eax,0x0
c0025f18:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c0025f1f:	85 db                	test   ebx,ebx
c0025f21:	0f 4f d8             	cmovg  ebx,eax
c0025f24:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025f2a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025f30:	d9 ee                	fldz   
c0025f32:	42                   	inc    edx
c0025f33:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0025f36:	40                   	inc    eax
c0025f37:	39 da                	cmp    edx,ebx
c0025f39:	7c f5                	jl     c0025f30 <__kernel_rem_pio2+0xa0>
c0025f3b:	39 c6                	cmp    esi,eax
c0025f3d:	7c 20                	jl     c0025f5f <__kernel_rem_pio2+0xcf>
c0025f3f:	29 c2                	sub    edx,eax
c0025f41:	c1 e2 02             	shl    edx,0x2
c0025f44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025f4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025f50:	db 84 82 80 c2 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd3d80]
c0025f57:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0025f5a:	40                   	inc    eax
c0025f5b:	39 c6                	cmp    esi,eax
c0025f5d:	7d f1                	jge    c0025f50 <__kernel_rem_pio2+0xc0>
c0025f5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025f63:	85 c0                	test   eax,eax
c0025f65:	78 7c                	js     c0025fe3 <__kernel_rem_pio2+0x153>
c0025f67:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c0025f6e:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025f75:	31 db                	xor    ebx,ebx
c0025f77:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c0025f7e:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0025f85:	c1 e0 03             	shl    eax,0x3
c0025f88:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c0025f8f:	01 c1                	add    ecx,eax
c0025f91:	eb 0d                	jmp    c0025fa0 <__kernel_rem_pio2+0x110>
c0025f93:	90                   	nop
c0025f94:	90                   	nop
c0025f95:	90                   	nop
c0025f96:	90                   	nop
c0025f97:	90                   	nop
c0025f98:	90                   	nop
c0025f99:	90                   	nop
c0025f9a:	90                   	nop
c0025f9b:	90                   	nop
c0025f9c:	90                   	nop
c0025f9d:	90                   	nop
c0025f9e:	90                   	nop
c0025f9f:	90                   	nop
c0025fa0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fa4:	85 c0                	test   eax,eax
c0025fa6:	0f 88 65 04 00 00    	js     c0026411 <__kernel_rem_pio2+0x581>
c0025fac:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0025fb3:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0025fb6:	d9 ee                	fldz   
c0025fb8:	90                   	nop
c0025fb9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025fc0:	dd 02                	fld    QWORD PTR [edx]
c0025fc2:	83 c0 08             	add    eax,0x8
c0025fc5:	83 ea 08             	sub    edx,0x8
c0025fc8:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c0025fcb:	39 c1                	cmp    ecx,eax
c0025fcd:	de c1                	faddp  st(1),st
c0025fcf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025fd3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025fd7:	75 e7                	jne    c0025fc0 <__kernel_rem_pio2+0x130>
c0025fd9:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0025fdc:	83 c3 08             	add    ebx,0x8
c0025fdf:	39 dd                	cmp    ebp,ebx
c0025fe1:	75 bd                	jne    c0025fa0 <__kernel_rem_pio2+0x110>
c0025fe3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0025fe7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0025feb:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0025ff2:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0025ff6:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0025ffa:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c0025ffe:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0026005:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0026009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600d:	c1 e0 02             	shl    eax,0x2
c0026010:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0026014:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002601b:	8d 1c f8             	lea    ebx,[eax+edi*8]
c002601e:	b8 18 00 00 00       	mov    eax,0x18
c0026023:	29 e8                	sub    eax,ebp
c0026025:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0026029:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026030:	85 f6                	test   esi,esi
c0026032:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0026039:	7e 6a                	jle    c00260a5 <__kernel_rem_pio2+0x215>
c002603b:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c002603f:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0026046:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c002604a:	8d 54 24 50          	lea    edx,[esp+0x50]
c002604e:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c0026053:	66 81 c9 00 0c       	or     cx,0xc00
c0026058:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c002605d:	eb 03                	jmp    c0026062 <__kernel_rem_pio2+0x1d2>
c002605f:	90                   	nop
c0026060:	89 c8                	mov    eax,ecx
c0026062:	83 c2 04             	add    edx,0x4
c0026065:	d9 c0                	fld    st(0)
c0026067:	d8 0d 5c cd 02 c0    	fmul   DWORD PTR ds:0xc002cd5c
c002606d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0026070:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0026074:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0026078:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002607c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0026080:	d9 c0                	fld    st(0)
c0026082:	d8 0d 34 c2 02 c0    	fmul   DWORD PTR ds:0xc002c234
c0026088:	de ea                	fsubp  st(2),st
c002608a:	d9 c9                	fxch   st(1)
c002608c:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0026090:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c0026093:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0026097:	39 c5                	cmp    ebp,eax
c0026099:	dc 00                	fadd   QWORD PTR [eax]
c002609b:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002609f:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00260a3:	75 bb                	jne    c0026060 <__kernel_rem_pio2+0x1d0>
c00260a5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00260a9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00260ac:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00260b0:	e8 f7 f7 ff ff       	call   c00258ac <ldexp>
c00260b5:	d9 c0                	fld    st(0)
c00260b7:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c00260bb:	d8 0d 60 cd 02 c0    	fmul   DWORD PTR ds:0xc002cd60
c00260c1:	dd 1c 24             	fstp   QWORD PTR [esp]
c00260c4:	e8 8b f7 ff ff       	call   c0025854 <floor>
c00260c9:	d9 05 64 cd 02 c0    	fld    DWORD PTR ds:0xc002cd64
c00260cf:	de c9                	fmulp  st(1),st
c00260d1:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00260d5:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c00260d9:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00260de:	de e1                	fsubrp st(1),st
c00260e0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00260e4:	66 0d 00 0c          	or     ax,0xc00
c00260e8:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00260ed:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00260f1:	85 ff                	test   edi,edi
c00260f3:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00260f7:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c00260fb:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00260ff:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0026103:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0026107:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c002610b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c002610f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0026113:	de e9                	fsubp  st(1),st
c0026115:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026119:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002611d:	0f 8e 2d 01 00 00    	jle    c0026250 <__kernel_rem_pio2+0x3c0>
c0026123:	8d 7e ff             	lea    edi,[esi-0x1]
c0026126:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c002612b:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c002612f:	89 c2                	mov    edx,eax
c0026131:	d3 fa                	sar    edx,cl
c0026133:	01 d5                	add    ebp,edx
c0026135:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0026139:	d3 e2                	shl    edx,cl
c002613b:	b9 17 00 00 00       	mov    ecx,0x17
c0026140:	29 d0                	sub    eax,edx
c0026142:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0026146:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002614a:	29 f9                	sub    ecx,edi
c002614c:	d3 f8                	sar    eax,cl
c002614e:	89 c5                	mov    ebp,eax
c0026150:	85 ed                	test   ebp,ebp
c0026152:	0f 8f 0e 01 00 00    	jg     c0026266 <__kernel_rem_pio2+0x3d6>
c0026158:	d9 ee                	fldz   
c002615a:	d9 c9                	fxch   st(1)
c002615c:	db e9                	fucomi st,st(1)
c002615e:	dd d9                	fstp   st(1)
c0026160:	0f 8a a2 01 00 00    	jp     c0026308 <__kernel_rem_pio2+0x478>
c0026166:	0f 85 9c 01 00 00    	jne    c0026308 <__kernel_rem_pio2+0x478>
c002616c:	dd d8                	fstp   st(0)
c002616e:	8d 7e ff             	lea    edi,[esi-0x1]
c0026171:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c0026175:	7f 2a                	jg     c00261a1 <__kernel_rem_pio2+0x311>
c0026177:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002617b:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c002617f:	31 d2                	xor    edx,edx
c0026181:	eb 0d                	jmp    c0026190 <__kernel_rem_pio2+0x300>
c0026183:	90                   	nop
c0026184:	90                   	nop
c0026185:	90                   	nop
c0026186:	90                   	nop
c0026187:	90                   	nop
c0026188:	90                   	nop
c0026189:	90                   	nop
c002618a:	90                   	nop
c002618b:	90                   	nop
c002618c:	90                   	nop
c002618d:	90                   	nop
c002618e:	90                   	nop
c002618f:	90                   	nop
c0026190:	0b 10                	or     edx,DWORD PTR [eax]
c0026192:	83 e8 04             	sub    eax,0x4
c0026195:	39 c1                	cmp    ecx,eax
c0026197:	75 f7                	jne    c0026190 <__kernel_rem_pio2+0x300>
c0026199:	85 d2                	test   edx,edx
c002619b:	0f 85 85 02 00 00    	jne    c0026426 <__kernel_rem_pio2+0x596>
c00261a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00261a5:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c00261a9:	85 c9                	test   ecx,ecx
c00261ab:	0f 85 48 02 00 00    	jne    c00263f9 <__kernel_rem_pio2+0x569>
c00261b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00261b5:	bf 01 00 00 00       	mov    edi,0x1
c00261ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00261c0:	83 e8 04             	sub    eax,0x4
c00261c3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00261c6:	47                   	inc    edi
c00261c7:	85 d2                	test   edx,edx
c00261c9:	74 f5                	je     c00261c0 <__kernel_rem_pio2+0x330>
c00261cb:	8d 4e 01             	lea    ecx,[esi+0x1]
c00261ce:	01 f7                	add    edi,esi
c00261d0:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c00261d7:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c00261de:	01 c6                	add    esi,eax
c00261e0:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c00261e7:	89 f6                	mov    esi,esi
c00261e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00261f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261f4:	db 84 88 80 c2 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd3d80]
c00261fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261ff:	85 c0                	test   eax,eax
c0026201:	dd 1e                	fstp   QWORD PTR [esi]
c0026203:	78 3b                	js     c0026240 <__kernel_rem_pio2+0x3b0>
c0026205:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002620c:	d9 ee                	fldz   
c002620e:	89 f2                	mov    edx,esi
c0026210:	dd 02                	fld    QWORD PTR [edx]
c0026212:	83 c0 08             	add    eax,0x8
c0026215:	83 ea 08             	sub    edx,0x8
c0026218:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002621b:	39 c3                	cmp    ebx,eax
c002621d:	de c1                	faddp  st(1),st
c002621f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026223:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026227:	75 e7                	jne    c0026210 <__kernel_rem_pio2+0x380>
c0026229:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c002622d:	41                   	inc    ecx
c002622e:	83 c6 08             	add    esi,0x8
c0026231:	39 cf                	cmp    edi,ecx
c0026233:	7d bb                	jge    c00261f0 <__kernel_rem_pio2+0x360>
c0026235:	89 fe                	mov    esi,edi
c0026237:	e9 f4 fd ff ff       	jmp    c0026030 <__kernel_rem_pio2+0x1a0>
c002623c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026240:	d9 ee                	fldz   
c0026242:	83 c6 08             	add    esi,0x8
c0026245:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c0026249:	41                   	inc    ecx
c002624a:	39 cf                	cmp    edi,ecx
c002624c:	7d a2                	jge    c00261f0 <__kernel_rem_pio2+0x360>
c002624e:	eb e5                	jmp    c0026235 <__kernel_rem_pio2+0x3a5>
c0026250:	0f 85 8a 01 00 00    	jne    c00263e0 <__kernel_rem_pio2+0x550>
c0026256:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c002625a:	c1 fd 17             	sar    ebp,0x17
c002625d:	85 ed                	test   ebp,ebp
c002625f:	90                   	nop
c0026260:	0f 8e f2 fe ff ff    	jle    c0026158 <__kernel_rem_pio2+0x2c8>
c0026266:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c002626a:	85 f6                	test   esi,esi
c002626c:	0f 8e d3 04 00 00    	jle    c0026745 <__kernel_rem_pio2+0x8b5>
c0026272:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0026276:	85 d2                	test   edx,edx
c0026278:	0f 85 12 01 00 00    	jne    c0026390 <__kernel_rem_pio2+0x500>
c002627e:	83 fe 01             	cmp    esi,0x1
c0026281:	b9 01 00 00 00       	mov    ecx,0x1
c0026286:	74 15                	je     c002629d <__kernel_rem_pio2+0x40d>
c0026288:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c002628c:	8d 41 01             	lea    eax,[ecx+0x1]
c002628f:	85 d2                	test   edx,edx
c0026291:	0f 85 00 01 00 00    	jne    c0026397 <__kernel_rem_pio2+0x507>
c0026297:	39 c6                	cmp    esi,eax
c0026299:	89 c1                	mov    ecx,eax
c002629b:	75 eb                	jne    c0026288 <__kernel_rem_pio2+0x3f8>
c002629d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00262a1:	85 c0                	test   eax,eax
c00262a3:	7e 16                	jle    c00262bb <__kernel_rem_pio2+0x42b>
c00262a5:	83 f8 01             	cmp    eax,0x1
c00262a8:	0f 84 51 04 00 00    	je     c00266ff <__kernel_rem_pio2+0x86f>
c00262ae:	83 f8 02             	cmp    eax,0x2
c00262b1:	75 08                	jne    c00262bb <__kernel_rem_pio2+0x42b>
c00262b3:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c00262bb:	83 fd 02             	cmp    ebp,0x2
c00262be:	0f 85 94 fe ff ff    	jne    c0026158 <__kernel_rem_pio2+0x2c8>
c00262c4:	d9 e8                	fld1   
c00262c6:	85 d2                	test   edx,edx
c00262c8:	de e1                	fsubrp st(1),st
c00262ca:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00262ce:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00262d2:	0f 84 80 fe ff ff    	je     c0026158 <__kernel_rem_pio2+0x2c8>
c00262d8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00262dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00262e0:	d9 e8                	fld1   
c00262e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00262e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262e9:	e8 be f5 ff ff       	call   c00258ac <ldexp>
c00262ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00262f2:	de e1                	fsubrp st(1),st
c00262f4:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00262f8:	d9 ee                	fldz   
c00262fa:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00262fe:	db e9                	fucomi st,st(1)
c0026300:	dd d9                	fstp   st(1)
c0026302:	0f 8b 5e fe ff ff    	jnp    c0026166 <__kernel_rem_pio2+0x2d6>
c0026308:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002630c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002630f:	89 d8                	mov    eax,ebx
c0026311:	f7 d8                	neg    eax
c0026313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026317:	e8 90 f5 ff ff       	call   c00258ac <ldexp>
c002631c:	d9 05 34 c2 02 c0    	fld    DWORD PTR ds:0xc002c234
c0026322:	d9 c9                	fxch   st(1)
c0026324:	db f1                	fcomi  st,st(1)
c0026326:	dd d9                	fstp   st(1)
c0026328:	0f 82 94 04 00 00    	jb     c00267c2 <__kernel_rem_pio2+0x932>
c002632e:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0026332:	83 c3 18             	add    ebx,0x18
c0026335:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0026339:	d9 c0                	fld    st(0)
c002633b:	d8 0d 5c cd 02 c0    	fmul   DWORD PTR ds:0xc002cd5c
c0026341:	8d 7e 01             	lea    edi,[esi+0x1]
c0026344:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0026349:	66 0d 00 0c          	or     ax,0xc00
c002634d:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0026352:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0026356:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c002635a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002635e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0026362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026366:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c002636a:	d8 0d 34 c2 02 c0    	fmul   DWORD PTR ds:0xc002c234
c0026370:	de e9                	fsubp  st(1),st
c0026372:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0026376:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c002637a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002637e:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0026382:	89 d8                	mov    eax,ebx
c0026384:	e9 be 00 00 00       	jmp    c0026447 <__kernel_rem_pio2+0x5b7>
c0026389:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026390:	b8 01 00 00 00       	mov    eax,0x1
c0026395:	31 c9                	xor    ecx,ecx
c0026397:	bf 00 00 00 01       	mov    edi,0x1000000
c002639c:	29 d7                	sub    edi,edx
c002639e:	39 c6                	cmp    esi,eax
c00263a0:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c00263a4:	7e 30                	jle    c00263d6 <__kernel_rem_pio2+0x546>
c00263a6:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c00263aa:	ba ff ff ff 00       	mov    edx,0xffffff
c00263af:	29 ca                	sub    edx,ecx
c00263b1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00263b5:	40                   	inc    eax
c00263b6:	39 c6                	cmp    esi,eax
c00263b8:	7e 1c                	jle    c00263d6 <__kernel_rem_pio2+0x546>
c00263ba:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c00263be:	b9 ff ff ff 00       	mov    ecx,0xffffff
c00263c3:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c00263c7:	89 ca                	mov    edx,ecx
c00263c9:	83 c0 04             	add    eax,0x4
c00263cc:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c00263cf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00263d2:	39 c7                	cmp    edi,eax
c00263d4:	75 f1                	jne    c00263c7 <__kernel_rem_pio2+0x537>
c00263d6:	ba 01 00 00 00       	mov    edx,0x1
c00263db:	e9 bd fe ff ff       	jmp    c002629d <__kernel_rem_pio2+0x40d>
c00263e0:	d9 05 24 bf 02 c0    	fld    DWORD PTR ds:0xc002bf24
c00263e6:	d9 c9                	fxch   st(1)
c00263e8:	db f1                	fcomi  st,st(1)
c00263ea:	dd d9                	fstp   st(1)
c00263ec:	0f 83 2a 03 00 00    	jae    c002671c <__kernel_rem_pio2+0x88c>
c00263f2:	31 ed                	xor    ebp,ebp
c00263f4:	e9 5f fd ff ff       	jmp    c0026158 <__kernel_rem_pio2+0x2c8>
c00263f9:	8d 4e 01             	lea    ecx,[esi+0x1]
c00263fc:	89 cf                	mov    edi,ecx
c00263fe:	e9 cd fd ff ff       	jmp    c00261d0 <__kernel_rem_pio2+0x340>
c0026403:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002640a:	31 c0                	xor    eax,eax
c002640c:	e9 2e fb ff ff       	jmp    c0025f3f <__kernel_rem_pio2+0xaf>
c0026411:	d9 ee                	fldz   
c0026413:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0026416:	83 c3 08             	add    ebx,0x8
c0026419:	39 dd                	cmp    ebp,ebx
c002641b:	0f 85 7f fb ff ff    	jne    c0025fa0 <__kernel_rem_pio2+0x110>
c0026421:	e9 bd fb ff ff       	jmp    c0025fe3 <__kernel_rem_pio2+0x153>
c0026426:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c002642a:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c002642f:	85 db                	test   ebx,ebx
c0026431:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0026435:	75 10                	jne    c0026447 <__kernel_rem_pio2+0x5b7>
c0026437:	4f                   	dec    edi
c0026438:	83 e8 18             	sub    eax,0x18
c002643b:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c002643f:	85 c9                	test   ecx,ecx
c0026441:	74 f4                	je     c0026437 <__kernel_rem_pio2+0x5a7>
c0026443:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0026447:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002644b:	d9 e8                	fld1   
c002644d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026450:	e8 57 f4 ff ff       	call   c00258ac <ldexp>
c0026455:	85 ff                	test   edi,edi
c0026457:	0f 88 d2 03 00 00    	js     c002682f <__kernel_rem_pio2+0x99f>
c002645d:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0026464:	89 f8                	mov    eax,edi
c0026466:	8d 76 00             	lea    esi,[esi+0x0]
c0026469:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026470:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c0026474:	d8 c9                	fmul   st,st(1)
c0026476:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c0026479:	48                   	dec    eax
c002647a:	d8 0d 5c cd 02 c0    	fmul   DWORD PTR ds:0xc002cd5c
c0026480:	83 f8 ff             	cmp    eax,0xffffffff
c0026483:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026487:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002648b:	75 e3                	jne    c0026470 <__kernel_rem_pio2+0x5e0>
c002648d:	dd d8                	fstp   st(0)
c002648f:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c0026496:	31 d2                	xor    edx,edx
c0026498:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002649c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00264a0:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c00264a7:	01 f0                	add    eax,esi
c00264a9:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c00264ad:	eb 03                	jmp    c00264b2 <__kernel_rem_pio2+0x622>
c00264af:	90                   	nop
c00264b0:	89 e8                	mov    eax,ebp
c00264b2:	85 db                	test   ebx,ebx
c00264b4:	0f 88 84 02 00 00    	js     c002673e <__kernel_rem_pio2+0x8ae>
c00264ba:	d9 05 7c cd 02 c0    	fld    DWORD PTR ds:0xc002cd7c
c00264c0:	dc 08                	fmul   QWORD PTR [eax]
c00264c2:	d8 05 58 cd 02 c0    	fadd   DWORD PTR ds:0xc002cd58
c00264c8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00264cc:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00264d0:	0f 84 d9 00 00 00    	je     c00265af <__kernel_rem_pio2+0x71f>
c00264d6:	85 d2                	test   edx,edx
c00264d8:	0f 84 d1 00 00 00    	je     c00265af <__kernel_rem_pio2+0x71f>
c00264de:	d9 05 68 cd 02 c0    	fld    DWORD PTR ds:0xc002cd68
c00264e4:	83 fb 01             	cmp    ebx,0x1
c00264e7:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c00264ea:	de c1                	faddp  st(1),st
c00264ec:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00264f0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00264f4:	0f 84 b5 00 00 00    	je     c00265af <__kernel_rem_pio2+0x71f>
c00264fa:	83 fa 01             	cmp    edx,0x1
c00264fd:	0f 84 ac 00 00 00    	je     c00265af <__kernel_rem_pio2+0x71f>
c0026503:	d9 05 6c cd 02 c0    	fld    DWORD PTR ds:0xc002cd6c
c0026509:	83 fb 02             	cmp    ebx,0x2
c002650c:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c002650f:	de c1                	faddp  st(1),st
c0026511:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026515:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026519:	0f 84 90 00 00 00    	je     c00265af <__kernel_rem_pio2+0x71f>
c002651f:	83 fa 02             	cmp    edx,0x2
c0026522:	0f 84 87 00 00 00    	je     c00265af <__kernel_rem_pio2+0x71f>
c0026528:	d9 05 70 cd 02 c0    	fld    DWORD PTR ds:0xc002cd70
c002652e:	83 fb 03             	cmp    ebx,0x3
c0026531:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c0026534:	de c1                	faddp  st(1),st
c0026536:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002653a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002653e:	74 6f                	je     c00265af <__kernel_rem_pio2+0x71f>
c0026540:	83 fa 03             	cmp    edx,0x3
c0026543:	74 6a                	je     c00265af <__kernel_rem_pio2+0x71f>
c0026545:	d9 05 74 cd 02 c0    	fld    DWORD PTR ds:0xc002cd74
c002654b:	83 fb 04             	cmp    ebx,0x4
c002654e:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c0026551:	de c1                	faddp  st(1),st
c0026553:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026557:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002655b:	74 52                	je     c00265af <__kernel_rem_pio2+0x71f>
c002655d:	83 fa 04             	cmp    edx,0x4
c0026560:	74 4d                	je     c00265af <__kernel_rem_pio2+0x71f>
c0026562:	d9 05 78 cd 02 c0    	fld    DWORD PTR ds:0xc002cd78
c0026568:	83 fb 05             	cmp    ebx,0x5
c002656b:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c002656e:	de c1                	faddp  st(1),st
c0026570:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026574:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026578:	74 35                	je     c00265af <__kernel_rem_pio2+0x71f>
c002657a:	83 fa 05             	cmp    edx,0x5
c002657d:	74 30                	je     c00265af <__kernel_rem_pio2+0x71f>
c002657f:	dd 05 80 cd 02 c0    	fld    QWORD PTR ds:0xc002cd80
c0026585:	83 fb 06             	cmp    ebx,0x6
c0026588:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c002658b:	de c1                	faddp  st(1),st
c002658d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026591:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026595:	74 18                	je     c00265af <__kernel_rem_pio2+0x71f>
c0026597:	83 fa 06             	cmp    edx,0x6
c002659a:	74 13                	je     c00265af <__kernel_rem_pio2+0x71f>
c002659c:	dd 05 88 cd 02 c0    	fld    QWORD PTR ds:0xc002cd88
c00265a2:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c00265a5:	de c1                	faddp  st(1),st
c00265a7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00265ab:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00265af:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c00265b2:	42                   	inc    edx
c00265b3:	8d 68 f8             	lea    ebp,[eax-0x8]
c00265b6:	39 c6                	cmp    esi,eax
c00265b8:	0f 85 f2 fe ff ff    	jne    c00264b0 <__kernel_rem_pio2+0x620>
c00265be:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c00265c6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00265ca:	7f 4f                	jg     c002661b <__kernel_rem_pio2+0x78b>
c00265cc:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c00265d3:	85 c0                	test   eax,eax
c00265d5:	0f 8f 71 01 00 00    	jg     c002674c <__kernel_rem_pio2+0x8bc>
c00265db:	75 2c                	jne    c0026609 <__kernel_rem_pio2+0x779>
c00265dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00265e1:	d9 ee                	fldz   
c00265e3:	01 c8                	add    eax,ecx
c00265e5:	eb 02                	jmp    c00265e9 <__kernel_rem_pio2+0x759>
c00265e7:	89 d0                	mov    eax,edx
c00265e9:	39 c8                	cmp    eax,ecx
c00265eb:	dc 00                	fadd   QWORD PTR [eax]
c00265ed:	8d 50 f8             	lea    edx,[eax-0x8]
c00265f0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00265f4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00265f8:	75 ed                	jne    c00265e7 <__kernel_rem_pio2+0x757>
c00265fa:	85 ed                	test   ebp,ebp
c00265fc:	74 02                	je     c0026600 <__kernel_rem_pio2+0x770>
c00265fe:	d9 e0                	fchs   
c0026600:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0026607:	dd 18                	fstp   QWORD PTR [eax]
c0026609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660d:	81 c4 8c 02 00 00    	add    esp,0x28c
c0026613:	5b                   	pop    ebx
c0026614:	5e                   	pop    esi
c0026615:	83 e0 07             	and    eax,0x7
c0026618:	5f                   	pop    edi
c0026619:	5d                   	pop    ebp
c002661a:	c3                   	ret    
c002661b:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0026623:	75 e4                	jne    c0026609 <__kernel_rem_pio2+0x779>
c0026625:	85 ff                	test   edi,edi
c0026627:	0f 8e 38 02 00 00    	jle    c0026865 <__kernel_rem_pio2+0x9d5>
c002662d:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c0026634:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c002663b:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c0026642:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c0026646:	eb 02                	jmp    c002664a <__kernel_rem_pio2+0x7ba>
c0026648:	89 d0                	mov    eax,edx
c002664a:	dd 00                	fld    QWORD PTR [eax]
c002664c:	8d 50 f8             	lea    edx,[eax-0x8]
c002664f:	39 c1                	cmp    ecx,eax
c0026651:	d9 c1                	fld    st(1)
c0026653:	d9 c1                	fld    st(1)
c0026655:	de c3                	faddp  st(3),st
c0026657:	d9 ca                	fxch   st(2)
c0026659:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002665d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026661:	d9 c0                	fld    st(0)
c0026663:	dc ea                	fsub   st(2),st
c0026665:	d9 ca                	fxch   st(2)
c0026667:	de c3                	faddp  st(3),st
c0026669:	d9 ca                	fxch   st(2)
c002666b:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002666e:	d9 c9                	fxch   st(1)
c0026670:	dd 18                	fstp   QWORD PTR [eax]
c0026672:	75 d4                	jne    c0026648 <__kernel_rem_pio2+0x7b8>
c0026674:	dd d8                	fstp   st(0)
c0026676:	83 ff 01             	cmp    edi,0x1
c0026679:	0f 8e e6 01 00 00    	jle    c0026865 <__kernel_rem_pio2+0x9d5>
c002667f:	c1 e7 03             	shl    edi,0x3
c0026682:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c0026686:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c002668d:	eb 02                	jmp    c0026691 <__kernel_rem_pio2+0x801>
c002668f:	89 d0                	mov    eax,edx
c0026691:	dd 00                	fld    QWORD PTR [eax]
c0026693:	8d 50 f8             	lea    edx,[eax-0x8]
c0026696:	d9 c1                	fld    st(1)
c0026698:	39 d1                	cmp    ecx,edx
c002669a:	d9 c1                	fld    st(1)
c002669c:	de c3                	faddp  st(3),st
c002669e:	d9 ca                	fxch   st(2)
c00266a0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00266a4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00266a8:	d9 c0                	fld    st(0)
c00266aa:	dc ea                	fsub   st(2),st
c00266ac:	d9 ca                	fxch   st(2)
c00266ae:	de c3                	faddp  st(3),st
c00266b0:	d9 ca                	fxch   st(2)
c00266b2:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00266b5:	d9 c9                	fxch   st(1)
c00266b7:	dd 18                	fstp   QWORD PTR [eax]
c00266b9:	75 d4                	jne    c002668f <__kernel_rem_pio2+0x7ff>
c00266bb:	dd d8                	fstp   st(0)
c00266bd:	d9 ee                	fldz   
c00266bf:	01 f9                	add    ecx,edi
c00266c1:	83 e9 08             	sub    ecx,0x8
c00266c4:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c00266c7:	39 c8                	cmp    eax,ecx
c00266c9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00266cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00266d1:	75 ee                	jne    c00266c1 <__kernel_rem_pio2+0x831>
c00266d3:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c00266da:	85 ed                	test   ebp,ebp
c00266dc:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c00266e3:	0f 85 02 01 00 00    	jne    c00267eb <__kernel_rem_pio2+0x95b>
c00266e9:	d9 c9                	fxch   st(1)
c00266eb:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00266f2:	dd 18                	fstp   QWORD PTR [eax]
c00266f4:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00266f7:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c00266fa:	e9 0a ff ff ff       	jmp    c0026609 <__kernel_rem_pio2+0x779>
c00266ff:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0026707:	e9 af fb ff ff       	jmp    c00262bb <__kernel_rem_pio2+0x42b>
c002670c:	31 d2                	xor    edx,edx
c002670e:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0026713:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026717:	e9 d3 f7 ff ff       	jmp    c0025eef <__kernel_rem_pio2+0x5f>
c002671c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0026720:	85 f6                	test   esi,esi
c0026722:	bd 02 00 00 00       	mov    ebp,0x2
c0026727:	0f 8f 45 fb ff ff    	jg     c0026272 <__kernel_rem_pio2+0x3e2>
c002672d:	d9 e8                	fld1   
c002672f:	de e1                	fsubrp st(1),st
c0026731:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026735:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026739:	e9 1a fa ff ff       	jmp    c0026158 <__kernel_rem_pio2+0x2c8>
c002673e:	d9 ee                	fldz   
c0026740:	e9 6a fe ff ff       	jmp    c00265af <__kernel_rem_pio2+0x71f>
c0026745:	31 d2                	xor    edx,edx
c0026747:	e9 51 fb ff ff       	jmp    c002629d <__kernel_rem_pio2+0x40d>
c002674c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026750:	d9 ee                	fldz   
c0026752:	01 c8                	add    eax,ecx
c0026754:	eb 02                	jmp    c0026758 <__kernel_rem_pio2+0x8c8>
c0026756:	89 d0                	mov    eax,edx
c0026758:	39 c8                	cmp    eax,ecx
c002675a:	dc 00                	fadd   QWORD PTR [eax]
c002675c:	8d 50 f8             	lea    edx,[eax-0x8]
c002675f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026763:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026767:	75 ed                	jne    c0026756 <__kernel_rem_pio2+0x8c6>
c0026769:	d9 c0                	fld    st(0)
c002676b:	85 ed                	test   ebp,ebp
c002676d:	0f 85 94 00 00 00    	jne    c0026807 <__kernel_rem_pio2+0x977>
c0026773:	d9 c9                	fxch   st(1)
c0026775:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c002677c:	85 ff                	test   edi,edi
c002677e:	dd 18                	fstp   QWORD PTR [eax]
c0026780:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0026787:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002678b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002678f:	7e 22                	jle    c00267b3 <__kernel_rem_pio2+0x923>
c0026791:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0026798:	8d 14 f8             	lea    edx,[eax+edi*8]
c002679b:	83 c0 08             	add    eax,0x8
c002679e:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c00267a1:	39 d0                	cmp    eax,edx
c00267a3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00267a7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00267ab:	75 ee                	jne    c002679b <__kernel_rem_pio2+0x90b>
c00267ad:	85 ed                	test   ebp,ebp
c00267af:	74 02                	je     c00267b3 <__kernel_rem_pio2+0x923>
c00267b1:	d9 e0                	fchs   
c00267b3:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00267ba:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00267bd:	e9 47 fe ff ff       	jmp    c0026609 <__kernel_rem_pio2+0x779>
c00267c2:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00267c6:	89 f7                	mov    edi,esi
c00267c8:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00267cd:	66 0d 00 0c          	or     ax,0xc00
c00267d1:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00267d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00267da:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00267de:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c00267e2:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00267e6:	e9 5c fc ff ff       	jmp    c0026447 <__kernel_rem_pio2+0x5b7>
c00267eb:	d9 c9                	fxch   st(1)
c00267ed:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00267f4:	d9 e0                	fchs   
c00267f6:	dd 18                	fstp   QWORD PTR [eax]
c00267f8:	d9 e0                	fchs   
c00267fa:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00267fd:	d9 e0                	fchs   
c00267ff:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0026802:	e9 02 fe ff ff       	jmp    c0026609 <__kernel_rem_pio2+0x779>
c0026807:	d9 c9                	fxch   st(1)
c0026809:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0026810:	d9 e0                	fchs   
c0026812:	85 ff                	test   edi,edi
c0026814:	dd 18                	fstp   QWORD PTR [eax]
c0026816:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c002681d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026821:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026825:	0f 8f 66 ff ff ff    	jg     c0026791 <__kernel_rem_pio2+0x901>
c002682b:	d9 e0                	fchs   
c002682d:	eb 84                	jmp    c00267b3 <__kernel_rem_pio2+0x923>
c002682f:	dd d8                	fstp   st(0)
c0026831:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0026839:	0f 8f dc fd ff ff    	jg     c002661b <__kernel_rem_pio2+0x78b>
c002683f:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0026846:	85 d2                	test   edx,edx
c0026848:	7f 0d                	jg     c0026857 <__kernel_rem_pio2+0x9c7>
c002684a:	0f 85 b9 fd ff ff    	jne    c0026609 <__kernel_rem_pio2+0x779>
c0026850:	d9 ee                	fldz   
c0026852:	e9 a3 fd ff ff       	jmp    c00265fa <__kernel_rem_pio2+0x76a>
c0026857:	d9 ee                	fldz   
c0026859:	d9 ee                	fldz   
c002685b:	90                   	nop
c002685c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026860:	e9 06 ff ff ff       	jmp    c002676b <__kernel_rem_pio2+0x8db>
c0026865:	d9 ee                	fldz   
c0026867:	e9 67 fe ff ff       	jmp    c00266d3 <__kernel_rem_pio2+0x843>
c002686c:	66 90                	xchg   ax,ax
c002686e:	66 90                	xchg   ax,ax

c0026870 <__kernel_sin>:
c0026870:	83 ec 0c             	sub    esp,0xc
c0026873:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026877:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002687b:	d9 c0                	fld    st(0)
c002687d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026881:	d8 c9                	fmul   st,st(1)
c0026883:	85 c0                	test   eax,eax
c0026885:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026888:	dd 04 24             	fld    QWORD PTR [esp]
c002688b:	d9 c1                	fld    st(1)
c002688d:	d8 c9                	fmul   st,st(1)
c002688f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026892:	dd 04 24             	fld    QWORD PTR [esp]
c0026895:	d9 c1                	fld    st(1)
c0026897:	d8 ca                	fmul   st,st(2)
c0026899:	dd 1c 24             	fstp   QWORD PTR [esp]
c002689c:	dd 04 24             	fld    QWORD PTR [esp]
c002689f:	d8 ca                	fmul   st,st(2)
c00268a1:	d9 c2                	fld    st(2)
c00268a3:	dc 0d 90 cd 02 c0    	fmul   QWORD PTR ds:0xc002cd90
c00268a9:	dc 25 98 cd 02 c0    	fsub   QWORD PTR ds:0xc002cd98
c00268af:	de c9                	fmulp  st(1),st
c00268b1:	d9 c2                	fld    st(2)
c00268b3:	dc 0d a0 cd 02 c0    	fmul   QWORD PTR ds:0xc002cda0
c00268b9:	dc 25 a8 cd 02 c0    	fsub   QWORD PTR ds:0xc002cda8
c00268bf:	d8 cb                	fmul   st,st(3)
c00268c1:	dc 05 b0 cd 02 c0    	fadd   QWORD PTR ds:0xc002cdb0
c00268c7:	de c1                	faddp  st(1),st
c00268c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00268cc:	dd 04 24             	fld    QWORD PTR [esp]
c00268cf:	75 2f                	jne    c0026900 <__kernel_sin+0x90>
c00268d1:	dd dc                	fstp   st(4)
c00268d3:	d9 c9                	fxch   st(1)
c00268d5:	d9 ca                	fxch   st(2)
c00268d7:	d9 cb                	fxch   st(3)
c00268d9:	de ca                	fmulp  st(2),st
c00268db:	d9 c9                	fxch   st(1)
c00268dd:	dc 25 b8 cd 02 c0    	fsub   QWORD PTR ds:0xc002cdb8
c00268e3:	de c9                	fmulp  st(1),st
c00268e5:	de c1                	faddp  st(1),st
c00268e7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00268ea:	dd 04 24             	fld    QWORD PTR [esp]
c00268ed:	83 c4 0c             	add    esp,0xc
c00268f0:	c3                   	ret    
c00268f1:	eb 0d                	jmp    c0026900 <__kernel_sin+0x90>
c00268f3:	90                   	nop
c00268f4:	90                   	nop
c00268f5:	90                   	nop
c00268f6:	90                   	nop
c00268f7:	90                   	nop
c00268f8:	90                   	nop
c00268f9:	90                   	nop
c00268fa:	90                   	nop
c00268fb:	90                   	nop
c00268fc:	90                   	nop
c00268fd:	90                   	nop
c00268fe:	90                   	nop
c00268ff:	90                   	nop
c0026900:	d9 c4                	fld    st(4)
c0026902:	d8 0d 24 bf 02 c0    	fmul   DWORD PTR ds:0xc002bf24
c0026908:	d9 c9                	fxch   st(1)
c002690a:	d8 ca                	fmul   st,st(2)
c002690c:	de e9                	fsubp  st(1),st
c002690e:	de ca                	fmulp  st(2),st
c0026910:	d9 c9                	fxch   st(1)
c0026912:	de e3                	fsubrp st(3),st
c0026914:	dc 0d b8 cd 02 c0    	fmul   QWORD PTR ds:0xc002cdb8
c002691a:	de c2                	faddp  st(2),st
c002691c:	de e1                	fsubrp st(1),st
c002691e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026921:	dd 04 24             	fld    QWORD PTR [esp]
c0026924:	83 c4 0c             	add    esp,0xc
c0026927:	c3                   	ret    

Disassembly of section .init:

c0026928 <_init>:
c0026928:	55                   	push   ebp
c0026929:	89 e5                	mov    ebp,esp
c002692b:	e8 c4 97 fd ff       	call   c00000f4 <frame_dummy>
c0026930:	e8 0b c2 ff ff       	call   c0022b40 <__do_global_ctors_aux>
c0026935:	5d                   	pop    ebp
c0026936:	c3                   	ret    

Disassembly of section .fini:

c0026937 <_fini>:
c0026937:	55                   	push   ebp
c0026938:	89 e5                	mov    ebp,esp
c002693a:	e8 45 97 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002693f:	5d                   	pop    ebp
c0026940:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware10_getDriverEv:

c0026944 <RootHardware::_getDriver()>:
c0026944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026948:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c002694b:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware7getTypeEv:

c002694c <RootHardware::getType()>:
c002694c:	b8 04 00 00 00       	mov    eax,0x4
c0026951:	c3                   	ret    

Disassembly of section .text._ZN6DriverC2Ev:

c0026954 <Driver::Driver()>:
c0026954:	ba 64 8e 02 c0       	mov    edx,0xc0028e64
c0026959:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002695d:	89 10                	mov    DWORD PTR [eax],edx
c002695f:	90                   	nop
c0026960:	c3                   	ret    

Disassembly of section .text._ZN10RootDriverC2Ev:

c0026964 <RootDriver::RootDriver()>:
c0026964:	83 ec 0c             	sub    esp,0xc
c0026967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002696b:	83 ec 0c             	sub    esp,0xc
c002696e:	50                   	push   eax
c002696f:	e8 e0 ff ff ff       	call   c0026954 <Driver::Driver()>
c0026974:	83 c4 10             	add    esp,0x10
c0026977:	ba d4 8e 02 c0       	mov    edx,0xc0028ed4
c002697c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026980:	89 10                	mov    DWORD PTR [eax],edx
c0026982:	90                   	nop
c0026983:	83 c4 0c             	add    esp,0xc
c0026986:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c0026988 <std::vector<Hardware*>::iterator::~iterator()>:
c0026988:	90                   	nop
c0026989:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c002698c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026990:	8b 10                	mov    edx,DWORD PTR [eax]
c0026992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026996:	89 10                	mov    DWORD PTR [eax],edx
c0026998:	90                   	nop
c0026999:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c002699c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00269a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00269a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00269a8:	39 c2                	cmp    edx,eax
c00269aa:	0f 95 c0             	setne  al
c00269ad:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c00269b0 <std::vector<Hardware*>::iterator::operator*() const>:
c00269b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00269b6:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c00269b8 <std::vector<Hardware*>::~vector()>:
c00269b8:	83 ec 0c             	sub    esp,0xc
c00269bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00269c2:	85 c0                	test   eax,eax
c00269c4:	74 1e                	je     c00269e4 <std::vector<Hardware*>::~vector()+0x2c>
c00269c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00269cd:	85 c0                	test   eax,eax
c00269cf:	74 13                	je     c00269e4 <std::vector<Hardware*>::~vector()+0x2c>
c00269d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00269d8:	83 ec 0c             	sub    esp,0xc
c00269db:	50                   	push   eax
c00269dc:	e8 ec 71 fe ff       	call   c000dbcd <operator delete[](void*)>
c00269e1:	83 c4 10             	add    esp,0x10
c00269e4:	90                   	nop
c00269e5:	83 c4 0c             	add    esp,0xc
c00269e8:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c00269ec <std::vector<DeviceMemoryRange>::~vector()>:
c00269ec:	83 ec 0c             	sub    esp,0xc
c00269ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00269f6:	85 c0                	test   eax,eax
c00269f8:	74 1e                	je     c0026a18 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c00269fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a01:	85 c0                	test   eax,eax
c0026a03:	74 13                	je     c0026a18 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0026a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a0c:	83 ec 0c             	sub    esp,0xc
c0026a0f:	50                   	push   eax
c0026a10:	e8 b8 71 fe ff       	call   c000dbcd <operator delete[](void*)>
c0026a15:	83 c4 10             	add    esp,0x10
c0026a18:	90                   	nop
c0026a19:	83 c4 0c             	add    esp,0xc
c0026a1c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c0026a20 <std::vector<DevicePortRange>::~vector()>:
c0026a20:	83 ec 0c             	sub    esp,0xc
c0026a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a2a:	85 c0                	test   eax,eax
c0026a2c:	74 1e                	je     c0026a4c <std::vector<DevicePortRange>::~vector()+0x2c>
c0026a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a35:	85 c0                	test   eax,eax
c0026a37:	74 13                	je     c0026a4c <std::vector<DevicePortRange>::~vector()+0x2c>
c0026a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a40:	83 ec 0c             	sub    esp,0xc
c0026a43:	50                   	push   eax
c0026a44:	e8 84 71 fe ff       	call   c000dbcd <operator delete[](void*)>
c0026a49:	83 c4 10             	add    esp,0x10
c0026a4c:	90                   	nop
c0026a4d:	83 c4 0c             	add    esp,0xc
c0026a50:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD2Ev:

c0026a54 <RootHardware::~RootHardware()>:
c0026a54:	83 ec 0c             	sub    esp,0xc
c0026a57:	ba 80 8e 02 c0       	mov    edx,0xc0028e80
c0026a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a60:	89 10                	mov    DWORD PTR [eax],edx
c0026a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a66:	83 ec 0c             	sub    esp,0xc
c0026a69:	50                   	push   eax
c0026a6a:	e8 ed 09 fe ff       	call   c000745c <Hardware::~Hardware()>
c0026a6f:	83 c4 10             	add    esp,0x10
c0026a72:	90                   	nop
c0026a73:	83 c4 0c             	add    esp,0xc
c0026a76:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD0Ev:

c0026a78 <RootHardware::~RootHardware()>:
c0026a78:	83 ec 0c             	sub    esp,0xc
c0026a7b:	83 ec 0c             	sub    esp,0xc
c0026a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a82:	e8 cd ff ff ff       	call   c0026a54 <RootHardware::~RootHardware()>
c0026a87:	83 c4 10             	add    esp,0x10
c0026a8a:	83 ec 08             	sub    esp,0x8
c0026a8d:	6a 58                	push   0x58
c0026a8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a93:	e8 30 71 fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0026a98:	83 c4 10             	add    esp,0x10
c0026a9b:	83 c4 0c             	add    esp,0xc
c0026a9e:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c0026aa0 <std::vector<Hardware*>::vector()>:
c0026aa0:	83 ec 1c             	sub    esp,0x1c
c0026aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026aa7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026aae:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0026ab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026aba:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026abf:	77 07                	ja     c0026ac8 <std::vector<Hardware*>::vector()+0x28>
c0026ac1:	c1 e0 02             	shl    eax,0x2
c0026ac4:	eb 0a                	jmp    c0026ad0 <std::vector<Hardware*>::vector()+0x30>
c0026ac6:	66 90                	xchg   ax,ax
c0026ac8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026acd:	8d 76 00             	lea    esi,[esi+0x0]
c0026ad0:	83 ec 0c             	sub    esp,0xc
c0026ad3:	50                   	push   eax
c0026ad4:	e8 ea 70 fe ff       	call   c000dbc3 <operator new[](unsigned long)>
c0026ad9:	83 c4 10             	add    esp,0x10
c0026adc:	89 c2                	mov    edx,eax
c0026ade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ae2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ae9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026af0:	89 10                	mov    DWORD PTR [eax],edx
c0026af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026af6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026af9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026afd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b04:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b13:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026b16:	90                   	nop
c0026b17:	83 c4 1c             	add    esp,0x1c
c0026b1a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c0026b1c <std::vector<DeviceMemoryRange>::vector()>:
c0026b1c:	83 ec 1c             	sub    esp,0x1c
c0026b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b23:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026b2a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0026b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b36:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0026b3b:	77 07                	ja     c0026b44 <std::vector<DeviceMemoryRange>::vector()+0x28>
c0026b3d:	c1 e0 03             	shl    eax,0x3
c0026b40:	eb 0a                	jmp    c0026b4c <std::vector<DeviceMemoryRange>::vector()+0x30>
c0026b42:	66 90                	xchg   ax,ax
c0026b44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026b49:	8d 76 00             	lea    esi,[esi+0x0]
c0026b4c:	83 ec 0c             	sub    esp,0xc
c0026b4f:	50                   	push   eax
c0026b50:	e8 6e 70 fe ff       	call   c000dbc3 <operator new[](unsigned long)>
c0026b55:	83 c4 10             	add    esp,0x10
c0026b58:	89 c2                	mov    edx,eax
c0026b5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b65:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b6c:	89 10                	mov    DWORD PTR [eax],edx
c0026b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b72:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b79:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b80:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026b87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026b8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b8f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026b92:	90                   	nop
c0026b93:	83 c4 1c             	add    esp,0x1c
c0026b96:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0026b98 <std::vector<DevicePortRange>::vector()>:
c0026b98:	83 ec 1c             	sub    esp,0x1c
c0026b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b9f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026ba6:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0026bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026bb2:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026bb7:	77 07                	ja     c0026bc0 <std::vector<DevicePortRange>::vector()+0x28>
c0026bb9:	c1 e0 02             	shl    eax,0x2
c0026bbc:	eb 0a                	jmp    c0026bc8 <std::vector<DevicePortRange>::vector()+0x30>
c0026bbe:	66 90                	xchg   ax,ax
c0026bc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0026bc8:	83 ec 0c             	sub    esp,0xc
c0026bcb:	50                   	push   eax
c0026bcc:	e8 f2 6f fe ff       	call   c000dbc3 <operator new[](unsigned long)>
c0026bd1:	83 c4 10             	add    esp,0x10
c0026bd4:	89 c2                	mov    edx,eax
c0026bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026bda:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026bdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026be1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026be8:	89 10                	mov    DWORD PTR [eax],edx
c0026bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026bee:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026bf5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026bfc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026c07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c0b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026c0e:	90                   	nop
c0026c0f:	83 c4 1c             	add    esp,0x1c
c0026c12:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareC2Ev:

c0026c14 <RootHardware::RootHardware()>:
c0026c14:	53                   	push   ebx
c0026c15:	83 ec 18             	sub    esp,0x18
c0026c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c1c:	83 ec 0c             	sub    esp,0xc
c0026c1f:	50                   	push   eax
c0026c20:	e8 ab 08 fe ff       	call   c00074d0 <Hardware::Hardware()>
c0026c25:	83 c4 10             	add    esp,0x10
c0026c28:	ba 80 8e 02 c0       	mov    edx,0xc0028e80
c0026c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c31:	89 10                	mov    DWORD PTR [eax],edx
c0026c33:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0026c3b:	83 ec 0c             	sub    esp,0xc
c0026c3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026c42:	e8 74 94 fe ff       	call   c00100bb <malloc>
c0026c47:	83 c4 10             	add    esp,0x10
c0026c4a:	89 c3                	mov    ebx,eax
c0026c4c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0026c52:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0026c59:	83 ec 0c             	sub    esp,0xc
c0026c5c:	53                   	push   ebx
c0026c5d:	e8 02 fd ff ff       	call   c0026964 <RootDriver::RootDriver()>
c0026c62:	83 c4 10             	add    esp,0x10
c0026c65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c69:	89 58 54             	mov    DWORD PTR [eax+0x54],ebx
c0026c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c70:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0026c73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c7e:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
c0026c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c85:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0026c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c8a:	83 c0 04             	add    eax,0x4
c0026c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c8f:	83 ec 0c             	sub    esp,0xc
c0026c92:	52                   	push   edx
c0026c93:	ff d0                	call   eax
c0026c95:	83 c4 10             	add    esp,0x10
c0026c98:	90                   	nop
c0026c99:	83 c4 18             	add    esp,0x18
c0026c9c:	5b                   	pop    ebx
c0026c9d:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c0026ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026ca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026ca8:	89 10                	mov    DWORD PTR [eax],edx
c0026caa:	90                   	nop
c0026cab:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c0026cac <std::vector<Hardware*>::begin()>:
c0026cac:	83 ec 0c             	sub    esp,0xc
c0026caf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cb5:	83 ec 08             	sub    esp,0x8
c0026cb8:	50                   	push   eax
c0026cb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026cbd:	e8 de ff ff ff       	call   c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026cc2:	83 c4 10             	add    esp,0x10
c0026cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc9:	83 c4 0c             	add    esp,0xc
c0026ccc:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c0026cd0 <std::vector<Hardware*>::end()>:
c0026cd0:	83 ec 0c             	sub    esp,0xc
c0026cd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026cd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026cda:	83 ec 08             	sub    esp,0x8
c0026cdd:	50                   	push   eax
c0026cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ce2:	e8 b9 ff ff ff       	call   c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026ce7:	83 c4 10             	add    esp,0x10
c0026cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cee:	83 c4 0c             	add    esp,0xc
c0026cf1:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c0026cf4 <std::vector<Hardware*>::iterator::operator++()>:
c0026cf4:	83 ec 0c             	sub    esp,0xc
c0026cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cfd:	8d 50 04             	lea    edx,[eax+0x4]
c0026d00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d04:	89 10                	mov    DWORD PTR [eax],edx
c0026d06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d0c:	83 ec 08             	sub    esp,0x8
c0026d0f:	50                   	push   eax
c0026d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d14:	e8 87 ff ff ff       	call   c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026d19:	83 c4 10             	add    esp,0x10
c0026d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d20:	83 c4 0c             	add    esp,0xc
c0026d23:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0026d28 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0026d28:	83 ec 1c             	sub    esp,0x1c
c0026d2b:	90                   	nop
c0026d2c:	83 ec 08             	sub    esp,0x8
c0026d2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026d33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026d37:	e8 60 fc ff ff       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026d3c:	83 c4 10             	add    esp,0x10
c0026d3f:	0f b6 c0             	movzx  eax,al
c0026d42:	85 c0                	test   eax,eax
c0026d44:	74 62                	je     c0026da8 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x80>
c0026d46:	83 ec 0c             	sub    esp,0xc
c0026d49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026d4d:	e8 5e fc ff ff       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c0026d52:	83 c4 10             	add    esp,0x10
c0026d55:	8b 10                	mov    edx,DWORD PTR [eax]
c0026d57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0026d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d5d:	39 c2                	cmp    edx,eax
c0026d5f:	0f 94 c0             	sete   al
c0026d62:	0f b6 c0             	movzx  eax,al
c0026d65:	85 c0                	test   eax,eax
c0026d67:	74 17                	je     c0026d80 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x58>
c0026d69:	83 ec 08             	sub    esp,0x8
c0026d6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d74:	e8 13 fc ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026d79:	83 c4 10             	add    esp,0x10
c0026d7c:	eb 3e                	jmp    c0026dbc <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x94>
c0026d7e:	66 90                	xchg   ax,ax
c0026d80:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0026d84:	83 ec 08             	sub    esp,0x8
c0026d87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d8b:	50                   	push   eax
c0026d8c:	e8 63 ff ff ff       	call   c0026cf4 <std::vector<Hardware*>::iterator::operator++()>
c0026d91:	83 c4 0c             	add    esp,0xc
c0026d94:	83 ec 0c             	sub    esp,0xc
c0026d97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026d9b:	50                   	push   eax
c0026d9c:	e8 e7 fb ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0026da1:	83 c4 10             	add    esp,0x10
c0026da4:	eb 86                	jmp    c0026d2c <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x4>
c0026da6:	66 90                	xchg   ax,ax
c0026da8:	83 ec 08             	sub    esp,0x8
c0026dab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026daf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026db3:	e8 d4 fb ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026db8:	83 c4 10             	add    esp,0x10
c0026dbb:	90                   	nop
c0026dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026dc0:	83 c4 1c             	add    esp,0x1c
c0026dc3:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c0026dc8 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c0026dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026dcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0026dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026dd2:	89 10                	mov    DWORD PTR [eax],edx
c0026dd4:	90                   	nop
c0026dd5:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c0026dd8 <std::vector<Hardware*>::iterator::operator++(int)>:
c0026dd8:	83 ec 0c             	sub    esp,0xc
c0026ddb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ddf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026de1:	8d 48 04             	lea    ecx,[eax+0x4]
c0026de4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026de8:	89 0a                	mov    DWORD PTR [edx],ecx
c0026dea:	83 ec 08             	sub    esp,0x8
c0026ded:	50                   	push   eax
c0026dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026df2:	e8 a9 fe ff ff       	call   c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026df7:	83 c4 10             	add    esp,0x10
c0026dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dfe:	83 c4 0c             	add    esp,0xc
c0026e01:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c0026e04 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c0026e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e08:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0026e0c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0026e0c:	53                   	push   ebx
c0026e0d:	83 ec 28             	sub    esp,0x28
c0026e10:	83 ec 08             	sub    esp,0x8
c0026e13:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026e17:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026e1b:	50                   	push   eax
c0026e1c:	e8 6b fb ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026e21:	83 c4 10             	add    esp,0x10
c0026e24:	83 ec 08             	sub    esp,0x8
c0026e27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026e2b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026e2f:	50                   	push   eax
c0026e30:	e8 57 fb ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026e35:	83 c4 10             	add    esp,0x10
c0026e38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0026e3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026e40:	8d 54 24 14          	lea    edx,[esp+0x14]
c0026e44:	52                   	push   edx
c0026e45:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0026e49:	52                   	push   edx
c0026e4a:	50                   	push   eax
c0026e4b:	e8 d8 fe ff ff       	call   c0026d28 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0026e50:	83 c4 0c             	add    esp,0xc
c0026e53:	83 ec 08             	sub    esp,0x8
c0026e56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026e5a:	50                   	push   eax
c0026e5b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026e5f:	e8 64 ff ff ff       	call   c0026dc8 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c0026e64:	83 c4 10             	add    esp,0x10
c0026e67:	83 ec 0c             	sub    esp,0xc
c0026e6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026e6e:	50                   	push   eax
c0026e6f:	e8 14 fb ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0026e74:	83 c4 10             	add    esp,0x10
c0026e77:	83 ec 0c             	sub    esp,0xc
c0026e7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026e7e:	50                   	push   eax
c0026e7f:	e8 04 fb ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0026e84:	83 c4 10             	add    esp,0x10
c0026e87:	83 ec 0c             	sub    esp,0xc
c0026e8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026e8e:	50                   	push   eax
c0026e8f:	e8 f4 fa ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0026e94:	83 c4 10             	add    esp,0x10
c0026e97:	83 ec 08             	sub    esp,0x8
c0026e9a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026e9e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026ea2:	e8 f5 fa ff ff       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026ea7:	83 c4 10             	add    esp,0x10
c0026eaa:	0f b6 c0             	movzx  eax,al
c0026ead:	85 c0                	test   eax,eax
c0026eaf:	0f 84 ef 00 00 00    	je     c0026fa4 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x198>
c0026eb5:	83 ec 08             	sub    esp,0x8
c0026eb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026ebc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026ec0:	50                   	push   eax
c0026ec1:	e8 c6 fa ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026ec6:	83 c4 10             	add    esp,0x10
c0026ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0026ecc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026ed0:	83 ec 08             	sub    esp,0x8
c0026ed3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0026ed7:	52                   	push   edx
c0026ed8:	50                   	push   eax
c0026ed9:	e8 16 fe ff ff       	call   c0026cf4 <std::vector<Hardware*>::iterator::operator++()>
c0026ede:	83 c4 0c             	add    esp,0xc
c0026ee1:	83 ec 08             	sub    esp,0x8
c0026ee4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0026eec:	50                   	push   eax
c0026eed:	e8 aa fa ff ff       	call   c002699c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026ef2:	83 c4 10             	add    esp,0x10
c0026ef5:	88 c3                	mov    bl,al
c0026ef7:	83 ec 0c             	sub    esp,0xc
c0026efa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0026efe:	50                   	push   eax
c0026eff:	e8 84 fa ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0026f04:	83 c4 10             	add    esp,0x10
c0026f07:	0f b6 c3             	movzx  eax,bl
c0026f0a:	85 c0                	test   eax,eax
c0026f0c:	0f 84 82 00 00 00    	je     c0026f94 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x188>
c0026f12:	83 ec 0c             	sub    esp,0xc
c0026f15:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026f19:	50                   	push   eax
c0026f1a:	e8 91 fa ff ff       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c0026f1f:	83 c4 10             	add    esp,0x10
c0026f22:	8b 10                	mov    edx,DWORD PTR [eax]
c0026f24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026f28:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f2a:	39 c2                	cmp    edx,eax
c0026f2c:	0f 95 c0             	setne  al
c0026f2f:	0f b6 c0             	movzx  eax,al
c0026f32:	85 c0                	test   eax,eax
c0026f34:	74 96                	je     c0026ecc <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0026f36:	83 ec 0c             	sub    esp,0xc
c0026f39:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026f3d:	50                   	push   eax
c0026f3e:	e8 6d fa ff ff       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c0026f43:	83 c4 10             	add    esp,0x10
c0026f46:	83 ec 0c             	sub    esp,0xc
c0026f49:	50                   	push   eax
c0026f4a:	e8 b5 fe ff ff       	call   c0026e04 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c0026f4f:	83 c4 10             	add    esp,0x10
c0026f52:	89 c3                	mov    ebx,eax
c0026f54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026f58:	83 ec 04             	sub    esp,0x4
c0026f5b:	6a 00                	push   0x0
c0026f5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026f61:	50                   	push   eax
c0026f62:	e8 71 fe ff ff       	call   c0026dd8 <std::vector<Hardware*>::iterator::operator++(int)>
c0026f67:	83 c4 0c             	add    esp,0xc
c0026f6a:	83 ec 0c             	sub    esp,0xc
c0026f6d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0026f71:	50                   	push   eax
c0026f72:	e8 39 fa ff ff       	call   c00269b0 <std::vector<Hardware*>::iterator::operator*() const>
c0026f77:	83 c4 10             	add    esp,0x10
c0026f7a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0026f7c:	89 10                	mov    DWORD PTR [eax],edx
c0026f7e:	83 ec 0c             	sub    esp,0xc
c0026f81:	8d 44 24 28          	lea    eax,[esp+0x28]
c0026f85:	50                   	push   eax
c0026f86:	e8 fd f9 ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0026f8b:	83 c4 10             	add    esp,0x10
c0026f8e:	e9 39 ff ff ff       	jmp    c0026ecc <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0026f93:	90                   	nop
c0026f94:	83 ec 0c             	sub    esp,0xc
c0026f97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026f9b:	50                   	push   eax
c0026f9c:	e8 e7 f9 ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0026fa1:	83 c4 10             	add    esp,0x10
c0026fa4:	83 ec 08             	sub    esp,0x8
c0026fa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026fab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026faf:	e8 d8 f9 ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026fb4:	83 c4 10             	add    esp,0x10
c0026fb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026fbb:	83 c4 28             	add    esp,0x28
c0026fbe:	5b                   	pop    ebx
c0026fbf:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c0026fc4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c0026fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026fc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0026fca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026fce:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fd0:	29 c2                	sub    edx,eax
c0026fd2:	89 d0                	mov    eax,edx
c0026fd4:	c1 f8 02             	sar    eax,0x2
c0026fd7:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c0026fd8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c0026fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026fdc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0026fe0:	74 1a                	je     c0026ffc <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x24>
c0026fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026fe6:	8b 10                	mov    edx,DWORD PTR [eax]
c0026fe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026fec:	89 10                	mov    DWORD PTR [eax],edx
c0026fee:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0026ff3:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0026ff8:	eb de                	jmp    c0026fd8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0026ffa:	66 90                	xchg   ax,ax
c0026ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027000:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c0027004 <std::vector<Hardware*>::reserve(unsigned long)>:
c0027004:	83 ec 1c             	sub    esp,0x1c
c0027007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002700b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002700e:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0027012:	0f 86 d4 00 00 00    	jbe    c00270ec <std::vector<Hardware*>::reserve(unsigned long)+0xe8>
c0027018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002701c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002701f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0027023:	76 17                	jbe    c002703c <std::vector<Hardware*>::reserve(unsigned long)+0x38>
c0027025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027029:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002702c:	01 c0                	add    eax,eax
c002702e:	89 c2                	mov    edx,eax
c0027030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027034:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0027037:	eb df                	jmp    c0027018 <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c0027039:	8d 76 00             	lea    esi,[esi+0x0]
c002703c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027040:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027043:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0027048:	77 06                	ja     c0027050 <std::vector<Hardware*>::reserve(unsigned long)+0x4c>
c002704a:	c1 e0 02             	shl    eax,0x2
c002704d:	eb 09                	jmp    c0027058 <std::vector<Hardware*>::reserve(unsigned long)+0x54>
c002704f:	90                   	nop
c0027050:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027055:	8d 76 00             	lea    esi,[esi+0x0]
c0027058:	83 ec 0c             	sub    esp,0xc
c002705b:	50                   	push   eax
c002705c:	e8 62 6b fe ff       	call   c000dbc3 <operator new[](unsigned long)>
c0027061:	83 c4 10             	add    esp,0x10
c0027064:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002706c:	8b 10                	mov    edx,DWORD PTR [eax]
c002706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027075:	39 c2                	cmp    edx,eax
c0027077:	74 1f                	je     c0027098 <std::vector<Hardware*>::reserve(unsigned long)+0x94>
c0027079:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002707d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027084:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027087:	83 ec 04             	sub    esp,0x4
c002708a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002708e:	52                   	push   edx
c002708f:	50                   	push   eax
c0027090:	e8 43 ff ff ff       	call   c0026fd8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0027095:	83 c4 10             	add    esp,0x10
c0027098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002709c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002709f:	85 c0                	test   eax,eax
c00270a1:	74 15                	je     c00270b8 <std::vector<Hardware*>::reserve(unsigned long)+0xb4>
c00270a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00270a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00270aa:	83 ec 0c             	sub    esp,0xc
c00270ad:	50                   	push   eax
c00270ae:	e8 1a 6b fe ff       	call   c000dbcd <operator delete[](void*)>
c00270b3:	83 c4 10             	add    esp,0x10
c00270b6:	66 90                	xchg   ax,ax
c00270b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00270bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00270c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00270c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00270c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00270ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00270ce:	89 10                	mov    DWORD PTR [eax],edx
c00270d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00270d4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00270d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00270db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00270de:	c1 e0 02             	shl    eax,0x2
c00270e1:	01 c2                	add    edx,eax
c00270e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00270e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00270ea:	66 90                	xchg   ax,ax
c00270ec:	90                   	nop
c00270ed:	83 c4 1c             	add    esp,0x1c
c00270f0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c00270f4 <std::vector<Hardware*>::push_back(Hardware* const&)>:
c00270f4:	83 ec 0c             	sub    esp,0xc
c00270f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270fb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00270fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027102:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027105:	39 c2                	cmp    edx,eax
c0027107:	73 2f                	jae    c0027138 <std::vector<Hardware*>::push_back(Hardware* const&)+0x44>
c0027109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002710d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027110:	8d 48 04             	lea    ecx,[eax+0x4]
c0027113:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027117:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c002711a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002711e:	8b 12                	mov    edx,DWORD PTR [edx]
c0027120:	89 10                	mov    DWORD PTR [eax],edx
c0027122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027126:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027129:	8d 50 01             	lea    edx,[eax+0x1]
c002712c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027130:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0027133:	eb 47                	jmp    c002717c <std::vector<Hardware*>::push_back(Hardware* const&)+0x88>
c0027135:	8d 76 00             	lea    esi,[esi+0x0]
c0027138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002713c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002713f:	01 c0                	add    eax,eax
c0027141:	83 ec 08             	sub    esp,0x8
c0027144:	50                   	push   eax
c0027145:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027149:	e8 b6 fe ff ff       	call   c0027004 <std::vector<Hardware*>::reserve(unsigned long)>
c002714e:	83 c4 10             	add    esp,0x10
c0027151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027155:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027158:	8d 50 01             	lea    edx,[eax+0x1]
c002715b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002715f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0027162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027169:	8d 48 04             	lea    ecx,[eax+0x4]
c002716c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027170:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0027173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027177:	8b 12                	mov    edx,DWORD PTR [edx]
c0027179:	89 10                	mov    DWORD PTR [eax],edx
c002717b:	90                   	nop
c002717c:	90                   	nop
c002717d:	83 c4 0c             	add    esp,0xc
c0027180:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c0027184 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c0027184:	53                   	push   ebx
c0027185:	83 ec 28             	sub    esp,0x28
c0027188:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002718c:	8b 00                	mov    eax,DWORD PTR [eax]
c002718e:	83 ec 08             	sub    esp,0x8
c0027191:	50                   	push   eax
c0027192:	8d 44 24 14          	lea    eax,[esp+0x14]
c0027196:	50                   	push   eax
c0027197:	e8 04 fb ff ff       	call   c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002719c:	83 c4 10             	add    esp,0x10
c002719f:	83 ec 08             	sub    esp,0x8
c00271a2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00271a6:	50                   	push   eax
c00271a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00271ab:	e8 14 fe ff ff       	call   c0026fc4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00271b0:	83 c4 10             	add    esp,0x10
c00271b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00271b7:	83 ec 0c             	sub    esp,0xc
c00271ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00271be:	50                   	push   eax
c00271bf:	e8 c4 f7 ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00271c4:	83 c4 10             	add    esp,0x10
c00271c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00271cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00271cd:	83 ec 08             	sub    esp,0x8
c00271d0:	50                   	push   eax
c00271d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00271d5:	50                   	push   eax
c00271d6:	e8 c5 fa ff ff       	call   c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00271db:	83 c4 10             	add    esp,0x10
c00271de:	83 ec 08             	sub    esp,0x8
c00271e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00271e5:	50                   	push   eax
c00271e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00271ea:	e8 d5 fd ff ff       	call   c0026fc4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00271ef:	83 c4 10             	add    esp,0x10
c00271f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00271f6:	83 ec 0c             	sub    esp,0xc
c00271f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00271fd:	50                   	push   eax
c00271fe:	e8 85 f7 ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0027203:	83 c4 10             	add    esp,0x10
c0027206:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002720a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002720d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027211:	c1 e2 02             	shl    edx,0x2
c0027214:	8d 0c 10             	lea    ecx,[eax+edx*1]
c0027217:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002721b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002721e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027222:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027225:	c1 e0 02             	shl    eax,0x2
c0027228:	01 c2                	add    edx,eax
c002722a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002722e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027231:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0027235:	c1 e3 02             	shl    ebx,0x2
c0027238:	01 d8                	add    eax,ebx
c002723a:	83 ec 04             	sub    esp,0x4
c002723d:	51                   	push   ecx
c002723e:	52                   	push   edx
c002723f:	50                   	push   eax
c0027240:	e8 93 fd ff ff       	call   c0026fd8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0027245:	83 c4 10             	add    esp,0x10
c0027248:	83 ec 08             	sub    esp,0x8
c002724b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002724f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0027253:	50                   	push   eax
c0027254:	e8 33 f7 ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0027259:	83 c4 10             	add    esp,0x10
c002725c:	83 ec 08             	sub    esp,0x8
c002725f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027263:	50                   	push   eax
c0027264:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027268:	e8 57 fd ff ff       	call   c0026fc4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c002726d:	83 c4 10             	add    esp,0x10
c0027270:	89 c2                	mov    edx,eax
c0027272:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027276:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027279:	29 d0                	sub    eax,edx
c002727b:	89 c2                	mov    edx,eax
c002727d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027281:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0027284:	83 ec 0c             	sub    esp,0xc
c0027287:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002728b:	50                   	push   eax
c002728c:	e8 f7 f6 ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c0027291:	83 c4 10             	add    esp,0x10
c0027294:	83 ec 08             	sub    esp,0x8
c0027297:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002729b:	8d 44 24 20          	lea    eax,[esp+0x20]
c002729f:	50                   	push   eax
c00272a0:	e8 e7 f6 ff ff       	call   c002698c <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00272a5:	83 c4 10             	add    esp,0x10
c00272a8:	83 ec 08             	sub    esp,0x8
c00272ab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00272af:	50                   	push   eax
c00272b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00272b4:	e8 0b fd ff ff       	call   c0026fc4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00272b9:	83 c4 10             	add    esp,0x10
c00272bc:	89 c2                	mov    edx,eax
c00272be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00272c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272c5:	c1 e2 02             	shl    edx,0x2
c00272c8:	f7 da                	neg    edx
c00272ca:	01 c2                	add    edx,eax
c00272cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00272d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00272d3:	83 ec 0c             	sub    esp,0xc
c00272d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00272da:	50                   	push   eax
c00272db:	e8 a8 f6 ff ff       	call   c0026988 <std::vector<Hardware*>::iterator::~iterator()>
c00272e0:	83 c4 10             	add    esp,0x10
c00272e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00272e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00272ee:	c1 e2 02             	shl    edx,0x2
c00272f1:	01 d0                	add    eax,edx
c00272f3:	83 ec 08             	sub    esp,0x8
c00272f6:	50                   	push   eax
c00272f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00272fb:	e8 a0 f9 ff ff       	call   c0026ca0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0027300:	83 c4 10             	add    esp,0x10
c0027303:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0027307:	83 c4 28             	add    esp,0x28
c002730a:	5b                   	pop    ebx
c002730b:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c0027310 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c0027310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027314:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0027318:	74 1e                	je     c0027338 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c002731a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002731e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027322:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027325:	8b 00                	mov    eax,DWORD PTR [eax]
c0027327:	89 01                	mov    DWORD PTR [ecx],eax
c0027329:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002732c:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c0027331:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c0027336:	eb d8                	jmp    c0027310 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c0027338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002733c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c0027340 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c0027340:	83 ec 1c             	sub    esp,0x1c
c0027343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027347:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002734a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002734e:	0f 86 d4 00 00 00    	jbe    c0027428 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xe8>
c0027354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027358:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002735b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002735f:	76 17                	jbe    c0027378 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x38>
c0027361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027365:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027368:	01 c0                	add    eax,eax
c002736a:	89 c2                	mov    edx,eax
c002736c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027370:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0027373:	eb df                	jmp    c0027354 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c0027375:	8d 76 00             	lea    esi,[esi+0x0]
c0027378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002737c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002737f:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0027384:	77 06                	ja     c002738c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x4c>
c0027386:	c1 e0 03             	shl    eax,0x3
c0027389:	eb 09                	jmp    c0027394 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x54>
c002738b:	90                   	nop
c002738c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027391:	8d 76 00             	lea    esi,[esi+0x0]
c0027394:	83 ec 0c             	sub    esp,0xc
c0027397:	50                   	push   eax
c0027398:	e8 26 68 fe ff       	call   c000dbc3 <operator new[](unsigned long)>
c002739d:	83 c4 10             	add    esp,0x10
c00273a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00273a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00273aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273b1:	39 c2                	cmp    edx,eax
c00273b3:	74 1f                	je     c00273d4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x94>
c00273b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00273bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273c3:	83 ec 04             	sub    esp,0x4
c00273c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00273ca:	52                   	push   edx
c00273cb:	50                   	push   eax
c00273cc:	e8 3f ff ff ff       	call   c0027310 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c00273d1:	83 c4 10             	add    esp,0x10
c00273d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273db:	85 c0                	test   eax,eax
c00273dd:	74 15                	je     c00273f4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xb4>
c00273df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273e6:	83 ec 0c             	sub    esp,0xc
c00273e9:	50                   	push   eax
c00273ea:	e8 de 67 fe ff       	call   c000dbcd <operator delete[](void*)>
c00273ef:	83 c4 10             	add    esp,0x10
c00273f2:	66 90                	xchg   ax,ax
c00273f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00273fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027403:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002740a:	89 10                	mov    DWORD PTR [eax],edx
c002740c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027410:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027417:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002741a:	c1 e0 03             	shl    eax,0x3
c002741d:	01 c2                	add    edx,eax
c002741f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027423:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027426:	66 90                	xchg   ax,ax
c0027428:	90                   	nop
c0027429:	83 c4 1c             	add    esp,0x1c
c002742c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c0027430 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c0027430:	83 ec 0c             	sub    esp,0xc
c0027433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027437:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002743a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002743e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027441:	39 c2                	cmp    edx,eax
c0027443:	73 33                	jae    c0027478 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x48>
c0027445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027449:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c002744c:	8d 51 08             	lea    edx,[ecx+0x8]
c002744f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027453:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027456:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002745a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002745d:	8b 00                	mov    eax,DWORD PTR [eax]
c002745f:	89 01                	mov    DWORD PTR [ecx],eax
c0027461:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027468:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002746b:	8d 50 01             	lea    edx,[eax+0x1]
c002746e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027472:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0027475:	eb 4d                	jmp    c00274c4 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x94>
c0027477:	90                   	nop
c0027478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002747c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002747f:	01 c0                	add    eax,eax
c0027481:	83 ec 08             	sub    esp,0x8
c0027484:	50                   	push   eax
c0027485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027489:	e8 b2 fe ff ff       	call   c0027340 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c002748e:	83 c4 10             	add    esp,0x10
c0027491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027495:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027498:	8d 50 01             	lea    edx,[eax+0x1]
c002749b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002749f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00274a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00274a9:	8d 51 08             	lea    edx,[ecx+0x8]
c00274ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00274b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00274b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00274ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00274bc:	89 01                	mov    DWORD PTR [ecx],eax
c00274be:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00274c1:	8d 76 00             	lea    esi,[esi+0x0]
c00274c4:	90                   	nop
c00274c5:	83 c4 0c             	add    esp,0xc
c00274c8:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c00274cc <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c00274cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274d0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00274d4:	74 1a                	je     c00274f0 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x24>
c00274d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00274da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00274de:	8b 12                	mov    edx,DWORD PTR [edx]
c00274e0:	89 10                	mov    DWORD PTR [eax],edx
c00274e2:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c00274e7:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c00274ec:	eb de                	jmp    c00274cc <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c00274ee:	66 90                	xchg   ax,ax
c00274f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00274f4:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c00274f8 <std::vector<DevicePortRange>::reserve(unsigned long)>:
c00274f8:	83 ec 1c             	sub    esp,0x1c
c00274fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00274ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027502:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0027506:	0f 86 d4 00 00 00    	jbe    c00275e0 <std::vector<DevicePortRange>::reserve(unsigned long)+0xe8>
c002750c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027510:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027513:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0027517:	76 17                	jbe    c0027530 <std::vector<DevicePortRange>::reserve(unsigned long)+0x38>
c0027519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002751d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027520:	01 c0                	add    eax,eax
c0027522:	89 c2                	mov    edx,eax
c0027524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027528:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002752b:	eb df                	jmp    c002750c <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c002752d:	8d 76 00             	lea    esi,[esi+0x0]
c0027530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027534:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027537:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c002753c:	77 06                	ja     c0027544 <std::vector<DevicePortRange>::reserve(unsigned long)+0x4c>
c002753e:	c1 e0 02             	shl    eax,0x2
c0027541:	eb 09                	jmp    c002754c <std::vector<DevicePortRange>::reserve(unsigned long)+0x54>
c0027543:	90                   	nop
c0027544:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027549:	8d 76 00             	lea    esi,[esi+0x0]
c002754c:	83 ec 0c             	sub    esp,0xc
c002754f:	50                   	push   eax
c0027550:	e8 6e 66 fe ff       	call   c000dbc3 <operator new[](unsigned long)>
c0027555:	83 c4 10             	add    esp,0x10
c0027558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002755c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027560:	8b 10                	mov    edx,DWORD PTR [eax]
c0027562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027569:	39 c2                	cmp    edx,eax
c002756b:	74 1f                	je     c002758c <std::vector<DevicePortRange>::reserve(unsigned long)+0x94>
c002756d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027571:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027578:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002757b:	83 ec 04             	sub    esp,0x4
c002757e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0027582:	52                   	push   edx
c0027583:	50                   	push   eax
c0027584:	e8 43 ff ff ff       	call   c00274cc <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c0027589:	83 c4 10             	add    esp,0x10
c002758c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027590:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027593:	85 c0                	test   eax,eax
c0027595:	74 15                	je     c00275ac <std::vector<DevicePortRange>::reserve(unsigned long)+0xb4>
c0027597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002759b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002759e:	83 ec 0c             	sub    esp,0xc
c00275a1:	50                   	push   eax
c00275a2:	e8 26 66 fe ff       	call   c000dbcd <operator delete[](void*)>
c00275a7:	83 c4 10             	add    esp,0x10
c00275aa:	66 90                	xchg   ax,ax
c00275ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00275b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00275b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275bb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00275be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275c2:	89 10                	mov    DWORD PTR [eax],edx
c00275c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275c8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00275cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00275d2:	c1 e0 02             	shl    eax,0x2
c00275d5:	01 c2                	add    edx,eax
c00275d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275de:	66 90                	xchg   ax,ax
c00275e0:	90                   	nop
c00275e1:	83 c4 1c             	add    esp,0x1c
c00275e4:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c00275e8 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c00275e8:	83 ec 0c             	sub    esp,0xc
c00275eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ef:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00275f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00275f9:	39 c2                	cmp    edx,eax
c00275fb:	73 2f                	jae    c002762c <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x44>
c00275fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027601:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027604:	8d 48 04             	lea    ecx,[eax+0x4]
c0027607:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002760b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c002760e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027612:	8b 12                	mov    edx,DWORD PTR [edx]
c0027614:	89 10                	mov    DWORD PTR [eax],edx
c0027616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002761a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002761d:	8d 50 01             	lea    edx,[eax+0x1]
c0027620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027624:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0027627:	eb 47                	jmp    c0027670 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x88>
c0027629:	8d 76 00             	lea    esi,[esi+0x0]
c002762c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027630:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027633:	01 c0                	add    eax,eax
c0027635:	83 ec 08             	sub    esp,0x8
c0027638:	50                   	push   eax
c0027639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002763d:	e8 b6 fe ff ff       	call   c00274f8 <std::vector<DevicePortRange>::reserve(unsigned long)>
c0027642:	83 c4 10             	add    esp,0x10
c0027645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027649:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002764c:	8d 50 01             	lea    edx,[eax+0x1]
c002764f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027653:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0027656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002765a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002765d:	8d 48 04             	lea    ecx,[eax+0x4]
c0027660:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027664:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0027667:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002766b:	8b 12                	mov    edx,DWORD PTR [edx]
c002766d:	89 10                	mov    DWORD PTR [eax],edx
c002766f:	90                   	nop
c0027670:	90                   	nop
c0027671:	83 c4 0c             	add    esp,0xc
c0027674:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware10_getDriverEv:

c0027678 <BusHardware::_getDriver()>:
c0027678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002767c:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c002767f:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware7getTypeEv:

c0027680 <BusHardware::getType()>:
c0027680:	b8 01 00 00 00       	mov    eax,0x1
c0027685:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD2Ev:

c0027688 <BusHardware::~BusHardware()>:
c0027688:	83 ec 0c             	sub    esp,0xc
c002768b:	ba bc 8e 02 c0       	mov    edx,0xc0028ebc
c0027690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027694:	89 10                	mov    DWORD PTR [eax],edx
c0027696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002769a:	83 ec 0c             	sub    esp,0xc
c002769d:	50                   	push   eax
c002769e:	e8 b9 fd fd ff       	call   c000745c <Hardware::~Hardware()>
c00276a3:	83 c4 10             	add    esp,0x10
c00276a6:	90                   	nop
c00276a7:	83 c4 0c             	add    esp,0xc
c00276aa:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD0Ev:

c00276ac <BusHardware::~BusHardware()>:
c00276ac:	83 ec 0c             	sub    esp,0xc
c00276af:	83 ec 0c             	sub    esp,0xc
c00276b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276b6:	e8 cd ff ff ff       	call   c0027688 <BusHardware::~BusHardware()>
c00276bb:	83 c4 10             	add    esp,0x10
c00276be:	83 ec 08             	sub    esp,0x8
c00276c1:	6a 58                	push   0x58
c00276c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276c7:	e8 fc 64 fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00276cc:	83 c4 10             	add    esp,0x10
c00276cf:	83 c4 0c             	add    esp,0xc
c00276d2:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareC2EP9BusDriver:

c00276d4 <BusHardware::BusHardware(BusDriver*)>:
c00276d4:	83 ec 0c             	sub    esp,0xc
c00276d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276db:	83 ec 0c             	sub    esp,0xc
c00276de:	50                   	push   eax
c00276df:	e8 ec fd fd ff       	call   c00074d0 <Hardware::Hardware()>
c00276e4:	83 c4 10             	add    esp,0x10
c00276e7:	ba bc 8e 02 c0       	mov    edx,0xc0028ebc
c00276ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f0:	89 10                	mov    DWORD PTR [eax],edx
c00276f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00276fa:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
c00276fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027701:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0027704:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027708:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002770b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002770f:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0027712:	89 c2                	mov    edx,eax
c0027714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027718:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c002771b:	8b 00                	mov    eax,DWORD PTR [eax]
c002771d:	83 c0 04             	add    eax,0x4
c0027720:	8b 00                	mov    eax,DWORD PTR [eax]
c0027722:	83 ec 0c             	sub    esp,0xc
c0027725:	52                   	push   edx
c0027726:	ff d0                	call   eax
c0027728:	83 c4 10             	add    esp,0x10
c002772b:	90                   	nop
c002772c:	83 c4 0c             	add    esp,0xc
c002772f:	c3                   	ret    

Disassembly of section .text._ZN9ISADriverC2Ev:

c0027730 <ISADriver::ISADriver()>:
c0027730:	83 ec 0c             	sub    esp,0xc
c0027733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027737:	83 ec 0c             	sub    esp,0xc
c002773a:	50                   	push   eax
c002773b:	e8 14 f2 ff ff       	call   c0026954 <Driver::Driver()>
c0027740:	83 c4 10             	add    esp,0x10
c0027743:	ba bc b4 02 c0       	mov    edx,0xc002b4bc
c0027748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002774c:	89 10                	mov    DWORD PTR [eax],edx
c002774e:	90                   	nop
c002774f:	83 c4 0c             	add    esp,0xc
c0027752:	c3                   	ret    

Disassembly of section .text._ZN10ACPIDriverC2Ev:

c0027754 <ACPIDriver::ACPIDriver()>:
c0027754:	83 ec 0c             	sub    esp,0xc
c0027757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002775b:	83 ec 0c             	sub    esp,0xc
c002775e:	50                   	push   eax
c002775f:	e8 f0 f1 ff ff       	call   c0026954 <Driver::Driver()>
c0027764:	83 c4 10             	add    esp,0x10
c0027767:	ba 9c b4 02 c0       	mov    edx,0xc002b49c
c002776c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027770:	89 10                	mov    DWORD PTR [eax],edx
c0027772:	90                   	nop
c0027773:	83 c4 0c             	add    esp,0xc
c0027776:	c3                   	ret    

Disassembly of section .text._ZN9PCIDriverC2Ev:

c0027778 <PCIDriver::PCIDriver()>:
c0027778:	83 ec 0c             	sub    esp,0xc
c002777b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002777f:	83 ec 0c             	sub    esp,0xc
c0027782:	50                   	push   eax
c0027783:	e8 cc f1 ff ff       	call   c0026954 <Driver::Driver()>
c0027788:	83 c4 10             	add    esp,0x10
c002778b:	ba e0 b4 02 c0       	mov    edx,0xc002b4e0
c0027790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027794:	89 10                	mov    DWORD PTR [eax],edx
c0027796:	90                   	nop
c0027797:	83 c4 0c             	add    esp,0xc
c002779a:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002779c <DriverlessDevice::~DriverlessDevice()>:
c002779c:	ba 9c 93 02 c0       	mov    edx,0xc002939c
c00277a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00277a5:	89 10                	mov    DWORD PTR [eax],edx
c00277a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00277ab:	50                   	push   eax
c00277ac:	e8 f1 29 fe ff       	call   c000a1a2 <Device::~Device()>
c00277b1:	83 c4 04             	add    esp,0x4
c00277b4:	90                   	nop
c00277b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00277b6 <DriverlessDevice::~DriverlessDevice()>:
c00277b6:	83 ec 0c             	sub    esp,0xc
c00277b9:	83 ec 0c             	sub    esp,0xc
c00277bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277c0:	e8 d7 ff ff ff       	call   c002779c <DriverlessDevice::~DriverlessDevice()>
c00277c5:	83 c4 10             	add    esp,0x10
c00277c8:	83 ec 08             	sub    esp,0x8
c00277cb:	68 58 01 00 00       	push   0x158
c00277d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277d4:	e8 ef 63 fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00277d9:	83 c4 10             	add    esp,0x10
c00277dc:	83 c4 0c             	add    esp,0xc
c00277df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00277e0 <LinkedList<Device>::addElement(Device*)>:
c00277e0:	83 ec 0c             	sub    esp,0xc
c00277e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00277e8:	75 10                	jne    c00277fa <LinkedList<Device>::addElement(Device*)+0x1a>
c00277ea:	83 ec 0c             	sub    esp,0xc
c00277ed:	68 30 93 02 c0       	push   0xc0029330
c00277f2:	e8 19 8d fe ff       	call   c0010510 <KePanic(char const*)>
c00277f7:	83 c4 10             	add    esp,0x10
c00277fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0027800:	85 c0                	test   eax,eax
c0027802:	74 3a                	je     c002783e <LinkedList<Device>::addElement(Device*)+0x5e>
c0027804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027808:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002780b:	85 c0                	test   eax,eax
c002780d:	74 2f                	je     c002783e <LinkedList<Device>::addElement(Device*)+0x5e>
c002780f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027813:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002781a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0027820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027824:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027828:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002782b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002782f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027832:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002783c:	eb 68                	jmp    c00278a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002783e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027842:	8b 00                	mov    eax,DWORD PTR [eax]
c0027844:	85 c0                	test   eax,eax
c0027846:	75 4e                	jne    c0027896 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002784c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002784f:	85 c0                	test   eax,eax
c0027851:	75 43                	jne    c0027896 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027857:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002785b:	89 10                	mov    DWORD PTR [eax],edx
c002785d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027865:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002786c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002786f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002787d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027880:	85 c0                	test   eax,eax
c0027882:	74 22                	je     c00278a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027884:	83 ec 0c             	sub    esp,0xc
c0027887:	68 52 93 02 c0       	push   0xc0029352
c002788c:	e8 7f 8c fe ff       	call   c0010510 <KePanic(char const*)>
c0027891:	83 c4 10             	add    esp,0x10
c0027894:	eb 10                	jmp    c00278a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027896:	83 ec 0c             	sub    esp,0xc
c0027899:	68 5c 93 02 c0       	push   0xc002935c
c002789e:	e8 6d 8c fe ff       	call   c0010510 <KePanic(char const*)>
c00278a3:	83 c4 10             	add    esp,0x10
c00278a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00278ad:	8d 50 01             	lea    edx,[eax+0x1]
c00278b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00278b7:	90                   	nop
c00278b8:	83 c4 0c             	add    esp,0xc
c00278bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00278bc <LinkedList<Device>::LinkedList()>:
c00278bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00278c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00278d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00278dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00278e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00278f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00278fc:	90                   	nop
c00278fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027900 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027904:	8b 00                	mov    eax,DWORD PTR [eax]
c0027906:	85 c0                	test   eax,eax
c0027908:	75 0e                	jne    c0027918 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002790a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002790e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027911:	85 c0                	test   eax,eax
c0027913:	75 03                	jne    c0027918 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027915:	b0 01                	mov    al,0x1
c0027917:	c3                   	ret    
c0027918:	b0 00                	mov    al,0x0
c002791a:	90                   	nop
c002791b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002791c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002791c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027920:	8b 00                	mov    eax,DWORD PTR [eax]
c0027922:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027924 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027924:	83 ec 0c             	sub    esp,0xc
c0027927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792b:	8b 00                	mov    eax,DWORD PTR [eax]
c002792d:	85 c0                	test   eax,eax
c002792f:	75 17                	jne    c0027948 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0027931:	83 ec 0c             	sub    esp,0xc
c0027934:	68 cc 95 02 c0       	push   0xc00295cc
c0027939:	e8 d2 8b fe ff       	call   c0010510 <KePanic(char const*)>
c002793e:	83 c4 10             	add    esp,0x10
c0027941:	e9 96 00 00 00       	jmp    c00279dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0027946:	66 90                	xchg   ax,ax
c0027948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002794c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002794f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027952:	85 c0                	test   eax,eax
c0027954:	0f 95 c0             	setne  al
c0027957:	0f b6 c0             	movzx  eax,al
c002795a:	85 c0                	test   eax,eax
c002795c:	74 12                	je     c0027970 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002795e:	83 ec 0c             	sub    esp,0xc
c0027961:	68 17 96 02 c0       	push   0xc0029617
c0027966:	e8 a5 8b fe ff       	call   c0010510 <KePanic(char const*)>
c002796b:	83 c4 10             	add    esp,0x10
c002796e:	66 90                	xchg   ax,ax
c0027970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027974:	8b 00                	mov    eax,DWORD PTR [eax]
c0027976:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027979:	85 c0                	test   eax,eax
c002797b:	0f 94 c0             	sete   al
c002797e:	0f b6 c0             	movzx  eax,al
c0027981:	85 c0                	test   eax,eax
c0027983:	74 33                	je     c00279b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0027985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027989:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002798f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027993:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002799a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002799e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279a1:	83 f8 01             	cmp    eax,0x1
c00279a4:	74 22                	je     c00279c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00279a6:	83 ec 0c             	sub    esp,0xc
c00279a9:	68 f0 95 02 c0       	push   0xc00295f0
c00279ae:	e8 5d 8b fe ff       	call   c0010510 <KePanic(char const*)>
c00279b3:	83 c4 10             	add    esp,0x10
c00279b6:	eb 10                	jmp    c00279c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00279b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00279be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00279c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279c5:	89 10                	mov    DWORD PTR [eax],edx
c00279c7:	90                   	nop
c00279c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00279d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00279d9:	8d 76 00             	lea    esi,[esi+0x0]
c00279dc:	83 c4 0c             	add    esp,0xc
c00279df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00279e0:	83 ec 0c             	sub    esp,0xc
c00279e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00279e8:	75 12                	jne    c00279fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00279ea:	83 ec 0c             	sub    esp,0xc
c00279ed:	68 30 93 02 c0       	push   0xc0029330
c00279f2:	e8 19 8b fe ff       	call   c0010510 <KePanic(char const*)>
c00279f7:	83 c4 10             	add    esp,0x10
c00279fa:	66 90                	xchg   ax,ax
c00279fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0027a02:	85 c0                	test   eax,eax
c0027a04:	74 36                	je     c0027a3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0027a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a0d:	85 c0                	test   eax,eax
c0027a0f:	74 2b                	je     c0027a3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0027a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0027a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027a38:	eb 6a                	jmp    c0027aa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0027a3a:	66 90                	xchg   ax,ax
c0027a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a40:	8b 00                	mov    eax,DWORD PTR [eax]
c0027a42:	85 c0                	test   eax,eax
c0027a44:	75 4e                	jne    c0027a94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0027a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a4d:	85 c0                	test   eax,eax
c0027a4f:	75 43                	jne    c0027a94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0027a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a59:	89 10                	mov    DWORD PTR [eax],edx
c0027a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027a7b:	85 c0                	test   eax,eax
c0027a7d:	74 25                	je     c0027aa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0027a7f:	83 ec 0c             	sub    esp,0xc
c0027a82:	68 52 93 02 c0       	push   0xc0029352
c0027a87:	e8 84 8a fe ff       	call   c0010510 <KePanic(char const*)>
c0027a8c:	83 c4 10             	add    esp,0x10
c0027a8f:	eb 13                	jmp    c0027aa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0027a91:	8d 76 00             	lea    esi,[esi+0x0]
c0027a94:	83 ec 0c             	sub    esp,0xc
c0027a97:	68 5c 93 02 c0       	push   0xc002935c
c0027a9c:	e8 6f 8a fe ff       	call   c0010510 <KePanic(char const*)>
c0027aa1:	83 c4 10             	add    esp,0x10
c0027aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aa8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027aab:	8d 50 01             	lea    edx,[eax+0x1]
c0027aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ab2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027ab5:	90                   	nop
c0027ab6:	83 c4 0c             	add    esp,0xc
c0027ab9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027abc <ACPI::~ACPI()>:
c0027abc:	83 ec 0c             	sub    esp,0xc
c0027abf:	ba 4c 9a 02 c0       	mov    edx,0xc0029a4c
c0027ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac8:	89 10                	mov    DWORD PTR [eax],edx
c0027aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ace:	83 ec 0c             	sub    esp,0xc
c0027ad1:	50                   	push   eax
c0027ad2:	e8 cb 26 fe ff       	call   c000a1a2 <Device::~Device()>
c0027ad7:	83 c4 10             	add    esp,0x10
c0027ada:	90                   	nop
c0027adb:	83 c4 0c             	add    esp,0xc
c0027ade:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027ae0 <ACPI::~ACPI()>:
c0027ae0:	83 ec 0c             	sub    esp,0xc
c0027ae3:	83 ec 0c             	sub    esp,0xc
c0027ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aea:	e8 cd ff ff ff       	call   c0027abc <ACPI::~ACPI()>
c0027aef:	83 c4 10             	add    esp,0x10
c0027af2:	83 ec 08             	sub    esp,0x8
c0027af5:	68 64 12 00 00       	push   0x1264
c0027afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027afe:	e8 c5 60 fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0027b03:	83 c4 10             	add    esp,0x10
c0027b06:	83 c4 0c             	add    esp,0xc
c0027b09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0027b0c <LinkedList<Device>::~LinkedList()>:
c0027b0c:	90                   	nop
c0027b0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0027b10 <LinkedList<Device>::isEmpty()>:
c0027b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0027b16:	85 c0                	test   eax,eax
c0027b18:	75 0e                	jne    c0027b28 <LinkedList<Device>::isEmpty()+0x18>
c0027b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027b21:	85 c0                	test   eax,eax
c0027b23:	75 03                	jne    c0027b28 <LinkedList<Device>::isEmpty()+0x18>
c0027b25:	b0 01                	mov    al,0x1
c0027b27:	c3                   	ret    
c0027b28:	b0 00                	mov    al,0x0
c0027b2a:	90                   	nop
c0027b2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0027b2c <LinkedList<Device>::getFirstElement()>:
c0027b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0027b32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0027b34 <LinkedList<Device>::removeFirst()>:
c0027b34:	83 ec 0c             	sub    esp,0xc
c0027b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0027b3d:	85 c0                	test   eax,eax
c0027b3f:	75 17                	jne    c0027b58 <LinkedList<Device>::removeFirst()+0x24>
c0027b41:	83 ec 0c             	sub    esp,0xc
c0027b44:	68 cc 95 02 c0       	push   0xc00295cc
c0027b49:	e8 c2 89 fe ff       	call   c0010510 <KePanic(char const*)>
c0027b4e:	83 c4 10             	add    esp,0x10
c0027b51:	e9 92 00 00 00       	jmp    c0027be8 <LinkedList<Device>::removeFirst()+0xb4>
c0027b56:	66 90                	xchg   ax,ax
c0027b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027b5f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0027b65:	85 c0                	test   eax,eax
c0027b67:	74 13                	je     c0027b7c <LinkedList<Device>::removeFirst()+0x48>
c0027b69:	83 ec 0c             	sub    esp,0xc
c0027b6c:	68 17 96 02 c0       	push   0xc0029617
c0027b71:	e8 9a 89 fe ff       	call   c0010510 <KePanic(char const*)>
c0027b76:	83 c4 10             	add    esp,0x10
c0027b79:	8d 76 00             	lea    esi,[esi+0x0]
c0027b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0027b82:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0027b88:	85 c0                	test   eax,eax
c0027b8a:	75 34                	jne    c0027bc0 <LinkedList<Device>::removeFirst()+0x8c>
c0027b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ba5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027ba8:	83 f8 01             	cmp    eax,0x1
c0027bab:	74 27                	je     c0027bd4 <LinkedList<Device>::removeFirst()+0xa0>
c0027bad:	83 ec 0c             	sub    esp,0xc
c0027bb0:	68 f0 95 02 c0       	push   0xc00295f0
c0027bb5:	e8 56 89 fe ff       	call   c0010510 <KePanic(char const*)>
c0027bba:	83 c4 10             	add    esp,0x10
c0027bbd:	eb 15                	jmp    c0027bd4 <LinkedList<Device>::removeFirst()+0xa0>
c0027bbf:	90                   	nop
c0027bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0027bc6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0027bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bd0:	89 10                	mov    DWORD PTR [eax],edx
c0027bd2:	66 90                	xchg   ax,ax
c0027bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027bdb:	8d 50 ff             	lea    edx,[eax-0x1]
c0027bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027be2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027be5:	8d 76 00             	lea    esi,[esi+0x0]
c0027be8:	83 c4 0c             	add    esp,0xc
c0027beb:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027bec <Computer::~Computer()>:
c0027bec:	83 ec 0c             	sub    esp,0xc
c0027bef:	ba b8 9b 02 c0       	mov    edx,0xc0029bb8
c0027bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bf8:	89 10                	mov    DWORD PTR [eax],edx
c0027bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bfe:	83 ec 0c             	sub    esp,0xc
c0027c01:	50                   	push   eax
c0027c02:	e8 9b 25 fe ff       	call   c000a1a2 <Device::~Device()>
c0027c07:	83 c4 10             	add    esp,0x10
c0027c0a:	90                   	nop
c0027c0b:	83 c4 0c             	add    esp,0xc
c0027c0e:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027c10 <Computer::~Computer()>:
c0027c10:	83 ec 0c             	sub    esp,0xc
c0027c13:	83 ec 0c             	sub    esp,0xc
c0027c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c1a:	e8 cd ff ff ff       	call   c0027bec <Computer::~Computer()>
c0027c1f:	83 c4 10             	add    esp,0x10
c0027c22:	83 ec 08             	sub    esp,0x8
c0027c25:	68 68 01 00 00       	push   0x168
c0027c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c2e:	e8 95 5f fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0027c33:	83 c4 10             	add    esp,0x10
c0027c36:	83 c4 0c             	add    esp,0xc
c0027c39:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027c3a <idleCommon()>:
c0027c3a:	83 ec 0c             	sub    esp,0xc
c0027c3d:	fa                   	cli    
c0027c3e:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0027c44:	e8 5f f4 fe ff       	call   c00170a8 <schedule()>
c0027c49:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0027c50:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0027c57:	75 01                	jne    c0027c5a <idleCommon()+0x20>
c0027c59:	fb                   	sti    
c0027c5a:	83 c4 0c             	add    esp,0xc
c0027c5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027c5e <LinkedList<UnixFile>::~LinkedList()>:
c0027c5e:	90                   	nop
c0027c5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027c60 <LinkedList<UnixFile>::LinkedList()>:
c0027c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027c75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c79:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027c95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ca0:	90                   	nop
c0027ca1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027ca2 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027ca2:	83 ec 0c             	sub    esp,0xc
c0027ca5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027caa:	75 10                	jne    c0027cbc <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027cac:	83 ec 0c             	sub    esp,0xc
c0027caf:	68 30 93 02 c0       	push   0xc0029330
c0027cb4:	e8 57 88 fe ff       	call   c0010510 <KePanic(char const*)>
c0027cb9:	83 c4 10             	add    esp,0x10
c0027cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0027cc2:	85 c0                	test   eax,eax
c0027cc4:	74 34                	je     c0027cfa <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ccd:	85 c0                	test   eax,eax
c0027ccf:	74 29                	je     c0027cfa <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027cd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027cdc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ce3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027ce7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027cf1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027cf8:	eb 65                	jmp    c0027d5f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0027d00:	85 c0                	test   eax,eax
c0027d02:	75 4b                	jne    c0027d4f <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027d0b:	85 c0                	test   eax,eax
c0027d0d:	75 40                	jne    c0027d4f <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027d17:	89 10                	mov    DWORD PTR [eax],edx
c0027d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027d21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027d2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027d39:	85 c0                	test   eax,eax
c0027d3b:	74 22                	je     c0027d5f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027d3d:	83 ec 0c             	sub    esp,0xc
c0027d40:	68 52 93 02 c0       	push   0xc0029352
c0027d45:	e8 c6 87 fe ff       	call   c0010510 <KePanic(char const*)>
c0027d4a:	83 c4 10             	add    esp,0x10
c0027d4d:	eb 10                	jmp    c0027d5f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027d4f:	83 ec 0c             	sub    esp,0xc
c0027d52:	68 5c 93 02 c0       	push   0xc002935c
c0027d57:	e8 b4 87 fe ff       	call   c0010510 <KePanic(char const*)>
c0027d5c:	83 c4 10             	add    esp,0x10
c0027d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027d66:	8d 50 01             	lea    edx,[eax+0x1]
c0027d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d6d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027d70:	90                   	nop
c0027d71:	83 c4 0c             	add    esp,0xc
c0027d74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027d76 <LinkedList<UnixFile>::getFirstElement()>:
c0027d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0027d7c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027d7e <LinkedList<UnixFile>::removeFirst()>:
c0027d7e:	83 ec 0c             	sub    esp,0xc
c0027d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0027d87:	85 c0                	test   eax,eax
c0027d89:	75 12                	jne    c0027d9d <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027d8b:	83 ec 0c             	sub    esp,0xc
c0027d8e:	68 cc 95 02 c0       	push   0xc00295cc
c0027d93:	e8 78 87 fe ff       	call   c0010510 <KePanic(char const*)>
c0027d98:	83 c4 10             	add    esp,0x10
c0027d9b:	eb 7e                	jmp    c0027e1b <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027da1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027da7:	85 c0                	test   eax,eax
c0027da9:	74 10                	je     c0027dbb <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027dab:	83 ec 0c             	sub    esp,0xc
c0027dae:	68 17 96 02 c0       	push   0xc0029617
c0027db3:	e8 58 87 fe ff       	call   c0010510 <KePanic(char const*)>
c0027db8:	83 c4 10             	add    esp,0x10
c0027dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0027dc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027dc4:	85 c0                	test   eax,eax
c0027dc6:	75 33                	jne    c0027dfb <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027de1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027de4:	83 f8 01             	cmp    eax,0x1
c0027de7:	74 21                	je     c0027e0a <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027de9:	83 ec 0c             	sub    esp,0xc
c0027dec:	68 f0 95 02 c0       	push   0xc00295f0
c0027df1:	e8 1a 87 fe ff       	call   c0010510 <KePanic(char const*)>
c0027df6:	83 c4 10             	add    esp,0x10
c0027df9:	eb 0f                	jmp    c0027e0a <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dff:	8b 00                	mov    eax,DWORD PTR [eax]
c0027e01:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e08:	89 10                	mov    DWORD PTR [eax],edx
c0027e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e11:	8d 50 ff             	lea    edx,[eax-0x1]
c0027e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e18:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027e1b:	83 c4 0c             	add    esp,0xc
c0027e1e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0027e20 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0027e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027e28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e2c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027e2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027e30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027e30:	90                   	nop
c0027e31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027e34 <ThreadControlBlock::ThreadControlBlock()>:
c0027e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e38:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027e3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e43:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e4e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027e55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e59:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0027e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e64:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0027e6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e6f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027e73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e77:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0027e7b:	90                   	nop
c0027e7c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027e95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ea4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027eae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027eb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027eb9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ec0:	90                   	nop
c0027ec1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027ec2 <IOAPIC::~IOAPIC()>:
c0027ec2:	83 ec 0c             	sub    esp,0xc
c0027ec5:	ba f8 af 02 c0       	mov    edx,0xc002aff8
c0027eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ece:	89 10                	mov    DWORD PTR [eax],edx
c0027ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ed4:	83 ec 0c             	sub    esp,0xc
c0027ed7:	50                   	push   eax
c0027ed8:	e8 c5 22 fe ff       	call   c000a1a2 <Device::~Device()>
c0027edd:	83 c4 10             	add    esp,0x10
c0027ee0:	90                   	nop
c0027ee1:	83 c4 0c             	add    esp,0xc
c0027ee4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027ee6 <IOAPIC::~IOAPIC()>:
c0027ee6:	83 ec 0c             	sub    esp,0xc
c0027ee9:	83 ec 0c             	sub    esp,0xc
c0027eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ef0:	e8 cd ff ff ff       	call   c0027ec2 <IOAPIC::~IOAPIC()>
c0027ef5:	83 c4 10             	add    esp,0x10
c0027ef8:	83 ec 08             	sub    esp,0x8
c0027efb:	68 68 01 00 00       	push   0x168
c0027f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f04:	e8 bf 5c fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0027f09:	83 c4 10             	add    esp,0x10
c0027f0c:	83 c4 0c             	add    esp,0xc
c0027f0f:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027f10 <CPU::~CPU()>:
c0027f10:	83 ec 0c             	sub    esp,0xc
c0027f13:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c0027f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f1c:	89 10                	mov    DWORD PTR [eax],edx
c0027f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f22:	83 ec 0c             	sub    esp,0xc
c0027f25:	50                   	push   eax
c0027f26:	e8 77 22 fe ff       	call   c000a1a2 <Device::~Device()>
c0027f2b:	83 c4 10             	add    esp,0x10
c0027f2e:	90                   	nop
c0027f2f:	83 c4 0c             	add    esp,0xc
c0027f32:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027f34 <CPU::~CPU()>:
c0027f34:	83 ec 0c             	sub    esp,0xc
c0027f37:	83 ec 0c             	sub    esp,0xc
c0027f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f3e:	e8 cd ff ff ff       	call   c0027f10 <CPU::~CPU()>
c0027f43:	83 c4 10             	add    esp,0x10
c0027f46:	83 ec 08             	sub    esp,0x8
c0027f49:	68 78 11 00 00       	push   0x1178
c0027f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f52:	e8 71 5c fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0027f57:	83 c4 10             	add    esp,0x10
c0027f5a:	83 c4 0c             	add    esp,0xc
c0027f5d:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0027f5e <PCI::~PCI()>:
c0027f5e:	83 ec 0c             	sub    esp,0xc
c0027f61:	ba 3c b9 02 c0       	mov    edx,0xc002b93c
c0027f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f6a:	89 10                	mov    DWORD PTR [eax],edx
c0027f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f70:	83 ec 0c             	sub    esp,0xc
c0027f73:	50                   	push   eax
c0027f74:	e8 6f 12 fe ff       	call   c00091e8 <Bus::~Bus()>
c0027f79:	83 c4 10             	add    esp,0x10
c0027f7c:	90                   	nop
c0027f7d:	83 c4 0c             	add    esp,0xc
c0027f80:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027f82 <PCI::~PCI()>:
c0027f82:	83 ec 0c             	sub    esp,0xc
c0027f85:	83 ec 0c             	sub    esp,0xc
c0027f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f8c:	e8 cd ff ff ff       	call   c0027f5e <PCI::~PCI()>
c0027f91:	83 c4 10             	add    esp,0x10
c0027f94:	83 ec 08             	sub    esp,0x8
c0027f97:	68 5c 01 00 00       	push   0x15c
c0027f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fa0:	e8 23 5c fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0027fa5:	83 c4 10             	add    esp,0x10
c0027fa8:	83 c4 0c             	add    esp,0xc
c0027fab:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0027fac <IDE::~IDE()>:
c0027fac:	83 ec 0c             	sub    esp,0xc
c0027faf:	ba 8c ba 02 c0       	mov    edx,0xc002ba8c
c0027fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fb8:	89 10                	mov    DWORD PTR [eax],edx
c0027fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fbe:	83 ec 0c             	sub    esp,0xc
c0027fc1:	50                   	push   eax
c0027fc2:	e8 69 26 fe ff       	call   c000a630 <HardDiskController::~HardDiskController()>
c0027fc7:	83 c4 10             	add    esp,0x10
c0027fca:	90                   	nop
c0027fcb:	83 c4 0c             	add    esp,0xc
c0027fce:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027fd0 <IDE::~IDE()>:
c0027fd0:	83 ec 0c             	sub    esp,0xc
c0027fd3:	83 ec 0c             	sub    esp,0xc
c0027fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fda:	e8 cd ff ff ff       	call   c0027fac <IDE::~IDE()>
c0027fdf:	83 c4 10             	add    esp,0x10
c0027fe2:	83 ec 08             	sub    esp,0x8
c0027fe5:	68 70 02 00 00       	push   0x270
c0027fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fee:	e8 d5 5b fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0027ff3:	83 c4 10             	add    esp,0x10
c0027ff6:	83 c4 0c             	add    esp,0xc
c0027ff9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0027ffa <SATABus::~SATABus()>:
c0027ffa:	83 ec 0c             	sub    esp,0xc
c0027ffd:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0028002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028006:	89 10                	mov    DWORD PTR [eax],edx
c0028008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002800c:	83 ec 0c             	sub    esp,0xc
c002800f:	50                   	push   eax
c0028010:	e8 1b 26 fe ff       	call   c000a630 <HardDiskController::~HardDiskController()>
c0028015:	83 c4 10             	add    esp,0x10
c0028018:	90                   	nop
c0028019:	83 c4 0c             	add    esp,0xc
c002801c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002801e <SATABus::~SATABus()>:
c002801e:	83 ec 0c             	sub    esp,0xc
c0028021:	83 ec 0c             	sub    esp,0xc
c0028024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028028:	e8 cd ff ff ff       	call   c0027ffa <SATABus::~SATABus()>
c002802d:	83 c4 10             	add    esp,0x10
c0028030:	83 ec 08             	sub    esp,0x8
c0028033:	68 64 01 00 00       	push   0x164
c0028038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002803c:	e8 87 5b fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0028041:	83 c4 10             	add    esp,0x10
c0028044:	83 c4 0c             	add    esp,0xc
c0028047:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028048 <ATA::~ATA()>:
c0028048:	83 ec 0c             	sub    esp,0xc
c002804b:	ba c4 bb 02 c0       	mov    edx,0xc002bbc4
c0028050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028054:	89 10                	mov    DWORD PTR [eax],edx
c0028056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002805a:	83 ec 0c             	sub    esp,0xc
c002805d:	50                   	push   eax
c002805e:	e8 af 26 fe ff       	call   c000a712 <PhysicalDisk::~PhysicalDisk()>
c0028063:	83 c4 10             	add    esp,0x10
c0028066:	90                   	nop
c0028067:	83 c4 0c             	add    esp,0xc
c002806a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002806c <ATA::~ATA()>:
c002806c:	83 ec 0c             	sub    esp,0xc
c002806f:	83 ec 0c             	sub    esp,0xc
c0028072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028076:	e8 cd ff ff ff       	call   c0028048 <ATA::~ATA()>
c002807b:	83 c4 10             	add    esp,0x10
c002807e:	83 ec 08             	sub    esp,0x8
c0028081:	68 8c 01 00 00       	push   0x18c
c0028086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002808a:	e8 39 5b fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c002808f:	83 c4 10             	add    esp,0x10
c0028092:	83 c4 0c             	add    esp,0xc
c0028095:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028096 <ATAPI::~ATAPI()>:
c0028096:	83 ec 0c             	sub    esp,0xc
c0028099:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c002809e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a2:	89 10                	mov    DWORD PTR [eax],edx
c00280a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a8:	83 ec 0c             	sub    esp,0xc
c00280ab:	50                   	push   eax
c00280ac:	e8 61 26 fe ff       	call   c000a712 <PhysicalDisk::~PhysicalDisk()>
c00280b1:	83 c4 10             	add    esp,0x10
c00280b4:	90                   	nop
c00280b5:	83 c4 0c             	add    esp,0xc
c00280b8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00280ba <ATAPI::~ATAPI()>:
c00280ba:	83 ec 0c             	sub    esp,0xc
c00280bd:	83 ec 0c             	sub    esp,0xc
c00280c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280c4:	e8 cd ff ff ff       	call   c0028096 <ATAPI::~ATAPI()>
c00280c9:	83 c4 10             	add    esp,0x10
c00280cc:	83 ec 08             	sub    esp,0x8
c00280cf:	68 84 01 00 00       	push   0x184
c00280d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280d8:	e8 eb 5a fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00280dd:	83 c4 10             	add    esp,0x10
c00280e0:	83 c4 0c             	add    esp,0xc
c00280e3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00280e4 <SATA::~SATA()>:
c00280e4:	83 ec 0c             	sub    esp,0xc
c00280e7:	ba cc bc 02 c0       	mov    edx,0xc002bccc
c00280ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280f0:	89 10                	mov    DWORD PTR [eax],edx
c00280f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280f6:	83 ec 0c             	sub    esp,0xc
c00280f9:	50                   	push   eax
c00280fa:	e8 13 26 fe ff       	call   c000a712 <PhysicalDisk::~PhysicalDisk()>
c00280ff:	83 c4 10             	add    esp,0x10
c0028102:	90                   	nop
c0028103:	83 c4 0c             	add    esp,0xc
c0028106:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028108 <SATA::~SATA()>:
c0028108:	83 ec 0c             	sub    esp,0xc
c002810b:	83 ec 0c             	sub    esp,0xc
c002810e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028112:	e8 cd ff ff ff       	call   c00280e4 <SATA::~SATA()>
c0028117:	83 c4 10             	add    esp,0x10
c002811a:	83 ec 08             	sub    esp,0x8
c002811d:	68 7c 01 00 00       	push   0x17c
c0028122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028126:	e8 9d 5a fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c002812b:	83 c4 10             	add    esp,0x10
c002812e:	83 c4 0c             	add    esp,0xc
c0028131:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028132 <SATAPI::~SATAPI()>:
c0028132:	83 ec 0c             	sub    esp,0xc
c0028135:	ba f0 bd 02 c0       	mov    edx,0xc002bdf0
c002813a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002813e:	89 10                	mov    DWORD PTR [eax],edx
c0028140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028144:	83 ec 0c             	sub    esp,0xc
c0028147:	50                   	push   eax
c0028148:	e8 c5 25 fe ff       	call   c000a712 <PhysicalDisk::~PhysicalDisk()>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	90                   	nop
c0028151:	83 c4 0c             	add    esp,0xc
c0028154:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028156 <SATAPI::~SATAPI()>:
c0028156:	83 ec 0c             	sub    esp,0xc
c0028159:	83 ec 0c             	sub    esp,0xc
c002815c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028160:	e8 cd ff ff ff       	call   c0028132 <SATAPI::~SATAPI()>
c0028165:	83 c4 10             	add    esp,0x10
c0028168:	83 ec 08             	sub    esp,0x8
c002816b:	68 84 01 00 00       	push   0x184
c0028170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028174:	e8 4f 5a fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0028179:	83 c4 10             	add    esp,0x10
c002817c:	83 c4 0c             	add    esp,0xc
c002817f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028180 <APICTimer::~APICTimer()>:
c0028180:	83 ec 0c             	sub    esp,0xc
c0028183:	ba 44 be 02 c0       	mov    edx,0xc002be44
c0028188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002818c:	89 10                	mov    DWORD PTR [eax],edx
c002818e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028192:	83 ec 0c             	sub    esp,0xc
c0028195:	50                   	push   eax
c0028196:	e8 11 37 fe ff       	call   c000b8ac <Timer::~Timer()>
c002819b:	83 c4 10             	add    esp,0x10
c002819e:	90                   	nop
c002819f:	83 c4 0c             	add    esp,0xc
c00281a2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00281a4 <APICTimer::~APICTimer()>:
c00281a4:	83 ec 0c             	sub    esp,0xc
c00281a7:	83 ec 0c             	sub    esp,0xc
c00281aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281ae:	e8 cd ff ff ff       	call   c0028180 <APICTimer::~APICTimer()>
c00281b3:	83 c4 10             	add    esp,0x10
c00281b6:	83 ec 08             	sub    esp,0x8
c00281b9:	68 60 01 00 00       	push   0x160
c00281be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281c2:	e8 01 5a fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c00281c7:	83 c4 10             	add    esp,0x10
c00281ca:	83 c4 0c             	add    esp,0xc
c00281cd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00281d0 <PIT::~PIT()>:
c00281d0:	83 ec 0c             	sub    esp,0xc
c00281d3:	ba 94 be 02 c0       	mov    edx,0xc002be94
c00281d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281dc:	89 10                	mov    DWORD PTR [eax],edx
c00281de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281e2:	83 ec 0c             	sub    esp,0xc
c00281e5:	50                   	push   eax
c00281e6:	e8 c1 36 fe ff       	call   c000b8ac <Timer::~Timer()>
c00281eb:	83 c4 10             	add    esp,0x10
c00281ee:	90                   	nop
c00281ef:	83 c4 0c             	add    esp,0xc
c00281f2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00281f4 <PIT::~PIT()>:
c00281f4:	83 ec 0c             	sub    esp,0xc
c00281f7:	83 ec 0c             	sub    esp,0xc
c00281fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281fe:	e8 cd ff ff ff       	call   c00281d0 <PIT::~PIT()>
c0028203:	83 c4 10             	add    esp,0x10
c0028206:	83 ec 08             	sub    esp,0x8
c0028209:	68 5c 01 00 00       	push   0x15c
c002820e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028212:	e8 b1 59 fe ff       	call   c000dbc8 <operator delete(void*, unsigned long)>
c0028217:	83 c4 10             	add    esp,0x10
c002821a:	83 c4 0c             	add    esp,0xc
c002821d:	c3                   	ret    

Disassembly of section userkernel:

c002e000 <KiDefaultSignalHandlerAbort(int)>:
c002e000:	57                   	push   edi
c002e001:	b9 07 00 00 00       	mov    ecx,0x7
c002e006:	56                   	push   esi
c002e007:	be 9f a0 02 c0       	mov    esi,0xc002a09f
c002e00c:	83 ec 24             	sub    esp,0x24
c002e00f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002e013:	fc                   	cld    
c002e014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002e016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002e01a:	50                   	push   eax
c002e01b:	6a 00                	push   0x0
c002e01d:	6a 38                	push   0x38
c002e01f:	6a 01                	push   0x1
c002e021:	e8 2c 00 00 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002e026:	83 c4 34             	add    esp,0x34
c002e029:	5e                   	pop    esi
c002e02a:	5f                   	pop    edi
c002e02b:	c3                   	ret    

c002e02c <KiDefaultSignalHandlerTerminate(int)>:
c002e02c:	57                   	push   edi
c002e02d:	b9 08 00 00 00       	mov    ecx,0x8
c002e032:	56                   	push   esi
c002e033:	be bb a0 02 c0       	mov    esi,0xc002a0bb
c002e038:	83 ec 24             	sub    esp,0x24
c002e03b:	89 e7                	mov    edi,esp
c002e03d:	fc                   	cld    
c002e03e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002e040:	54                   	push   esp
c002e041:	6a 00                	push   0x0
c002e043:	6a 37                	push   0x37
c002e045:	6a 01                	push   0x1
c002e047:	e8 06 00 00 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002e04c:	83 c4 34             	add    esp,0x34
c002e04f:	5e                   	pop    esi
c002e050:	5f                   	pop    edi
c002e051:	c3                   	ret    

c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c002e052:	53                   	push   ebx
c002e053:	83 ec 10             	sub    esp,0x10
c002e056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e05a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002e05e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002e062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002e066:	cd 60                	int    0x60
c002e068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002e074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e078:	83 c4 10             	add    esp,0x10
c002e07b:	5b                   	pop    ebx
c002e07c:	c3                   	ret    

Disassembly of section align_previous:

c002f000 <DO_NOT_DELETE()>:
c002f000:	c3                   	ret    
